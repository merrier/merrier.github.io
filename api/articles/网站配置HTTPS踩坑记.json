{"title":"网站配置HTTPS踩坑记","slug":"网站配置HTTPS踩坑记","date":"2018-04-16T06:36:36.000Z","updated":"2019-08-06T03:28:58.289Z","comments":true,"path":"api/articles/网站配置HTTPS踩坑记.json","excerpt":null,"covers":["/images/hexo_post_290.png","/images/hexo_post_291.png","/images/hexo_post_289.png"],"content":"<p>近两年来 HTTPS 取代 HTTP 已经成为大势所趋。早在 2014 年 Google Chromium 安全团队提议将所有的 HTTP 协议网站标注为不安全。现在，Chrome 浏览器已经开始执行这一标准了。从 Chrome 56 开始，任何网页，如果有输入密码或者信用卡资料的，却没有使用 HTTPS，将被 Chrome 浏览器标识为不安全；逐步的，任何没有使用 HTTPS 协议的网页 Chrome 浏览器都会被标识为”不安全”，或者 “Not Secure”。所以处女座的我打算将 merrier.wang 升级成 HTTPS，以下对升级过程中遇到的问题和坑进行一下总结，如果你也有类似需求，希望这篇文章能够帮到你一二~</p>\n<h2 id=\"SSL证书选择\"><a href=\"#SSL证书选择\" class=\"headerlink\" title=\"SSL证书选择\"></a>SSL证书选择</h2><p>1、对于国内用户来说，可以使用与百度云、腾讯云、阿里云合作的赛门铁克签署的证书，一年免费，申请和使用都很方便。 （<strong>不过我一开始用腾讯云的免费证书，发现chrome浏览器还是标记不安全，所以我就放弃用国内的证书- -</strong>） 2、自从 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 免费签发证书后，SSL 证书的价格就开始平民化了，有不少免费和收费的 SSL 可以选择。Let’s Encrypt 的证书虽然只有90的天，不过自动续期也很方便，对于小站来说，是很不错的选择。而我使用的就是 Lets Encrypt 颁发的证书，下面就主要记录一下申请证书，配置证书到 apache，以及自动续期的实现步骤，供有兴趣的童鞋参考。</p>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><p>Certbot 是一个简单易用的 SSL 证书部署工具，由 EFF 开发，前身即 Let’s Encrypt 官方（Python）客户端。简单来说，certbot 就是一个简化 Let’s Encrypt 部署，和管理 Let’s Encrypt 证书的工具。所以我们可以通过 Certbot 非常方便的生成证书并借助脚本实现自动续费。 首先来到 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot官网</a>，在下面的蓝色箭头处选择操作系统和服务器型号：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_290.png\" alt=\"\"><br></div>\n\n<p>以我的阿里云 ECS 举例，操作系统是 CentOS 6，服务器是 Apache，选择完之后页面下方会出现指引；按照其指引，我们首先需要安装 certbot-auto，在你想要安装的目录（这个目录最好是一个简单好找的目录，比如 <code>/etc/httpd/conf</code>，因为后面还要用到）下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure>\n<p>然后我们通过certbot获取证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./path/to/certbot-auto --apache</span><br></pre></td></tr></table></figure>\n<p>期间会让你填一些自己的信息，比如个人邮箱等等，按照自己的实际情况填写即可，然后过程中可能会遇到下面这条信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class=\"line\">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class=\"line\">new sites, or if you&apos;re confident your site works on HTTPS. You can undo this</span><br><span class=\"line\">change by editing your web server&apos;s configuration.</span><br></pre></td></tr></table></figure>\n<p>这里我强烈建议选择第二个 Redirect 选项，因为这样 Certbot 会对 apache 配置文件进行修改，当用户访问 HTTP 链接时，强制重定向到 HTTPS 链接，就不需要我们自己进行修改了。 如果一切顺利的话，当我们看到下面的提示信息时，就证明我们的证书已经申请成功并配置成功了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">Congratulations! You have successfully enabled https://merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">You should test your configuration at:</span><br><span class=\"line\">https://www.ssllabs.com/ssltest/analyze.html?d=merrier.wang</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动续费\"><a href=\"#自动续费\" class=\"headerlink\" title=\"自动续费\"></a>自动续费</h2><p>此时我们可以访问一下 HTTPS 的链接，看看证书是否生效，如果不生效，可以尝试一下重启 apache：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Let’s Encrypt 的证书，默认的有效期是 90 天，不过官方推荐每 60 天续期。到期之后，我们需要用命令来为证书续期，不过我们是懒人，这种体力活还是交给机器来完成比较合适。所以，我们可以用 Linux 的 cron job 来完成这类的任务。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果服务器上没有安装 crontabs，需要手动安装，centos 系统建议通过 yum 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install crontabs</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start</span><br><span class=\"line\">chkconfig crond start</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加新的任务\"><a href=\"#添加新的任务\" class=\"headerlink\" title=\"添加新的任务\"></a>添加新的任务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab \\[-u user\\] -e</span><br></pre></td></tr></table></figure>\n<p>其中：-u user：用来设定某个用户的 crontab 服务，例如，“-u ixdba”表示设定 ixdba 用户的 crontab 服务，此参数一般由 root 用户来运行。即执行 <code>crontab -u root -e</code> 来添加任务，此时会打开一个新的文件，填入以下脚本信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0,12 * * * python -c &apos;import random; import time; time.sleep(random.random() * 3600)&apos; &amp;&amp; ./path/to/certbot-auto renew --post-hook &quot;service httpd restart&quot;</span><br></pre></td></tr></table></figure>\n<p>如果出现 crontab: installing new crontab 就说明我们的脚本已经生效了，自动续费就配置好了。关于更多 crontab 的内容可以<a href=\"https://www.jianshu.com/p/838db0269fd0\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，你可以利用他做更多有意思的事情。如果你不确定自己的定时任务是否设置成功，可以通过执行 <code>crontab -l</code> 进行查看，如果出现上面的那段 python 代码，说明定时任务已经设置成功；有时候可能 crond 服务莫名的挂掉，我们可以通过上面的命令手动启动，同时也可以通过下面的命令手动更新证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/httpd/conf/certbot-auto renew</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wordpress配置https\"><a href=\"#Wordpress配置https\" class=\"headerlink\" title=\"Wordpress配置https\"></a>Wordpress配置https</h2><p>如果你的网站是通过 wordpress 搭建的，除了进行上面的流程之外，还需要进行额外的配置：</p>\n<h3 id=\"修改wordpress后台配置中的地址改为https版本\"><a href=\"#修改wordpress后台配置中的地址改为https版本\" class=\"headerlink\" title=\"修改wordpress后台配置中的地址改为https版本\"></a>修改wordpress后台配置中的地址改为https版本</h3><div align=\"center\"><br><img src=\"/images/hexo_post_291.png\" alt=\"\"><br></div>\n\n<p><strong>注意：一定要保证https和http两种方式都能正常访问网站，才能改这个配置，否则可能导致网站无法访问。</strong>通过上面的设置，绝大部分导航中的链接就由 wordpress 系统会自动改为 HTTPS 版本。</p>\n<h3 id=\"替换正文的内部链接和其他静态资源\"><a href=\"#替换正文的内部链接和其他静态资源\" class=\"headerlink\" title=\"替换正文的内部链接和其他静态资源\"></a>替换正文的内部链接和其他静态资源</h3><p>对于这部分链接需要手工修改，修改的方法有两种：</p>\n<h4 id=\"（1）直接在数据库中更新，更新的sql如下：\"><a href=\"#（1）直接在数据库中更新，更新的sql如下：\" class=\"headerlink\" title=\"（1）直接在数据库中更新，更新的sql如下：\"></a>（1）直接在数据库中更新，更新的sql如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update wp\\_posts set post\\_content = replace(post_content, ‘http://your-website-name/’,‘https://your-website-name/’)</span><br></pre></td></tr></table></figure>\n<p>对于数据库不熟悉的童鞋不推荐这种方法，对数据库错误的更新对网站可能是毁灭性的打击，建议<strong>更新前最好备份数据库</strong>。</p>\n<h4 id=\"（2）利用wordpress提供的api来重写链接\"><a href=\"#（2）利用wordpress提供的api来重写链接\" class=\"headerlink\" title=\"（2）利用wordpress提供的api来重写链接\"></a>（2）利用wordpress提供的api来重写链接</h4><p>在使用的主题（themes）的目录下的 functions.php 加入如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"function\"><span class=\"keyword\">function</span>\\<span class=\"title\">_exists</span><span class=\"params\">(<span class=\"string\">'add\\_theme\\_support'</span>)</span> )<span class=\"title\">add</span>\\<span class=\"title\">_theme_support</span><span class=\"params\">(<span class=\"string\">'post-thumbnails'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'script\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_script\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_script</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'style\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_style\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_style</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法优点是可逆，不会对网站的数据库有什么影响，推荐使用这种方法。 调整完内部链接后，检查整个网站的页面，包括首页，栏目页，内容页，sitemap，页面head部分内容，比如：css，js，canonical 等，是否都转换成了 HTTPS 版本。</p>\n<h2 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h2><h3 id=\"Apache配置文件找不到\"><a href=\"#Apache配置文件找不到\" class=\"headerlink\" title=\"Apache配置文件找不到\"></a>Apache配置文件找不到</h3><p>可能某些童鞋的 apache 配置文件不在 <code>/etc/httpd/conf</code> 目录下，可以通过 find 命令进行查找：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>其中“/”是指在根目录下进行查找，如果你知道在哪个目录下，可以自行修改，节省查找的时间</p>\n<h3 id=\"Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\"><a href=\"#Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\" class=\"headerlink\" title=\"Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration\"></a>Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration</h3><p>不管是在证书申请过程中还是在自己修改配置过程中遇到次报错，一般情况下是因为在 modules 文件夹下并没有 ssl 模块，那就需要自己安装了，我在<a href=\"https://stackoverflow.com/questions/5257974/how-to-install-mod-ssl-for-apache-httpd\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上搜到了解决方案，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mod_ssl</span><br></pre></td></tr></table></figure>\n<p>当我们安装完毕之后，就可以看到 modules 文件夹下多了一个 mod_ssl.so 文件了，此时我们再重启 apache 就应该不报错了。</p>\n<h3 id=\"warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\"><a href=\"#warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\" class=\"headerlink\" title=\"[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down\"></a>[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down</h3><p>出现该警告说明 ssl module 被多处使用，可以用如下命令检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep ssl_module -rI /etc/httpd/*</span><br></pre></td></tr></table></figure>\n<p>此时会出现：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_289.png\" alt=\"\"><br></div>\n\n<p>其中 <code>httpd.bk.conf</code> 是我自己建的备份，所以有两种解决方法：</p>\n<ol>\n<li>httpd.conf 中去掉 <code>LoadModule ssl\\_module modules/mod\\_ssl.so</code>、去掉 <code>Listen 443</code></li>\n<li>直接删除 <code>/etc/httpd/conf.d/ssl.conf</code>，推荐直接删除 ssl.conf</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.watch-life.net/wordpress/wordpress-https-link.html\" target=\"_blank\" rel=\"noopener\">WordPress整站轻松开启HTTPS</a></p>\n<p><a href=\"https://www.jianshu.com/p/909adc612fd4\" target=\"_blank\" rel=\"noopener\">apache服务器添加https（针对ios10 https）</a></p>\n<p><a href=\"https://stringblog.com/%E9%80%9A%E8%BF%87certbot%E9%85%8D%E7%BD%AElets-encrypt%E7%9A%84ssl%EF%BC%88apache%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">通过Certbot配置Let’s Encrypt的SSL（Apache）</a></p>\n","more":"<p>近两年来 HTTPS 取代 HTTP 已经成为大势所趋。早在 2014 年 Google Chromium 安全团队提议将所有的 HTTP 协议网站标注为不安全。现在，Chrome 浏览器已经开始执行这一标准了。从 Chrome 56 开始，任何网页，如果有输入密码或者信用卡资料的，却没有使用 HTTPS，将被 Chrome 浏览器标识为不安全；逐步的，任何没有使用 HTTPS 协议的网页 Chrome 浏览器都会被标识为”不安全”，或者 “Not Secure”。所以处女座的我打算将 merrier.wang 升级成 HTTPS，以下对升级过程中遇到的问题和坑进行一下总结，如果你也有类似需求，希望这篇文章能够帮到你一二~</p>\n<h2 id=\"SSL证书选择\"><a href=\"#SSL证书选择\" class=\"headerlink\" title=\"SSL证书选择\"></a>SSL证书选择</h2><p>1、对于国内用户来说，可以使用与百度云、腾讯云、阿里云合作的赛门铁克签署的证书，一年免费，申请和使用都很方便。 （<strong>不过我一开始用腾讯云的免费证书，发现chrome浏览器还是标记不安全，所以我就放弃用国内的证书- -</strong>） 2、自从 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 免费签发证书后，SSL 证书的价格就开始平民化了，有不少免费和收费的 SSL 可以选择。Let’s Encrypt 的证书虽然只有90的天，不过自动续期也很方便，对于小站来说，是很不错的选择。而我使用的就是 Lets Encrypt 颁发的证书，下面就主要记录一下申请证书，配置证书到 apache，以及自动续期的实现步骤，供有兴趣的童鞋参考。</p>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><p>Certbot 是一个简单易用的 SSL 证书部署工具，由 EFF 开发，前身即 Let’s Encrypt 官方（Python）客户端。简单来说，certbot 就是一个简化 Let’s Encrypt 部署，和管理 Let’s Encrypt 证书的工具。所以我们可以通过 Certbot 非常方便的生成证书并借助脚本实现自动续费。 首先来到 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot官网</a>，在下面的蓝色箭头处选择操作系统和服务器型号：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_290.png\" alt=\"\"><br></div>\n\n<p>以我的阿里云 ECS 举例，操作系统是 CentOS 6，服务器是 Apache，选择完之后页面下方会出现指引；按照其指引，我们首先需要安装 certbot-auto，在你想要安装的目录（这个目录最好是一个简单好找的目录，比如 <code>/etc/httpd/conf</code>，因为后面还要用到）下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure>\n<p>然后我们通过certbot获取证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./path/to/certbot-auto --apache</span><br></pre></td></tr></table></figure>\n<p>期间会让你填一些自己的信息，比如个人邮箱等等，按照自己的实际情况填写即可，然后过程中可能会遇到下面这条信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class=\"line\">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class=\"line\">new sites, or if you&apos;re confident your site works on HTTPS. You can undo this</span><br><span class=\"line\">change by editing your web server&apos;s configuration.</span><br></pre></td></tr></table></figure>\n<p>这里我强烈建议选择第二个 Redirect 选项，因为这样 Certbot 会对 apache 配置文件进行修改，当用户访问 HTTP 链接时，强制重定向到 HTTPS 链接，就不需要我们自己进行修改了。 如果一切顺利的话，当我们看到下面的提示信息时，就证明我们的证书已经申请成功并配置成功了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">Congratulations! You have successfully enabled https://merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">You should test your configuration at:</span><br><span class=\"line\">https://www.ssllabs.com/ssltest/analyze.html?d=merrier.wang</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动续费\"><a href=\"#自动续费\" class=\"headerlink\" title=\"自动续费\"></a>自动续费</h2><p>此时我们可以访问一下 HTTPS 的链接，看看证书是否生效，如果不生效，可以尝试一下重启 apache：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Let’s Encrypt 的证书，默认的有效期是 90 天，不过官方推荐每 60 天续期。到期之后，我们需要用命令来为证书续期，不过我们是懒人，这种体力活还是交给机器来完成比较合适。所以，我们可以用 Linux 的 cron job 来完成这类的任务。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果服务器上没有安装 crontabs，需要手动安装，centos 系统建议通过 yum 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install crontabs</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start</span><br><span class=\"line\">chkconfig crond start</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加新的任务\"><a href=\"#添加新的任务\" class=\"headerlink\" title=\"添加新的任务\"></a>添加新的任务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab \\[-u user\\] -e</span><br></pre></td></tr></table></figure>\n<p>其中：-u user：用来设定某个用户的 crontab 服务，例如，“-u ixdba”表示设定 ixdba 用户的 crontab 服务，此参数一般由 root 用户来运行。即执行 <code>crontab -u root -e</code> 来添加任务，此时会打开一个新的文件，填入以下脚本信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0,12 * * * python -c &apos;import random; import time; time.sleep(random.random() * 3600)&apos; &amp;&amp; ./path/to/certbot-auto renew --post-hook &quot;service httpd restart&quot;</span><br></pre></td></tr></table></figure>\n<p>如果出现 crontab: installing new crontab 就说明我们的脚本已经生效了，自动续费就配置好了。关于更多 crontab 的内容可以<a href=\"https://www.jianshu.com/p/838db0269fd0\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，你可以利用他做更多有意思的事情。如果你不确定自己的定时任务是否设置成功，可以通过执行 <code>crontab -l</code> 进行查看，如果出现上面的那段 python 代码，说明定时任务已经设置成功；有时候可能 crond 服务莫名的挂掉，我们可以通过上面的命令手动启动，同时也可以通过下面的命令手动更新证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/httpd/conf/certbot-auto renew</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wordpress配置https\"><a href=\"#Wordpress配置https\" class=\"headerlink\" title=\"Wordpress配置https\"></a>Wordpress配置https</h2><p>如果你的网站是通过 wordpress 搭建的，除了进行上面的流程之外，还需要进行额外的配置：</p>\n<h3 id=\"修改wordpress后台配置中的地址改为https版本\"><a href=\"#修改wordpress后台配置中的地址改为https版本\" class=\"headerlink\" title=\"修改wordpress后台配置中的地址改为https版本\"></a>修改wordpress后台配置中的地址改为https版本</h3><div align=\"center\"><br><img src=\"/images/hexo_post_291.png\" alt=\"\"><br></div>\n\n<p><strong>注意：一定要保证https和http两种方式都能正常访问网站，才能改这个配置，否则可能导致网站无法访问。</strong>通过上面的设置，绝大部分导航中的链接就由 wordpress 系统会自动改为 HTTPS 版本。</p>\n<h3 id=\"替换正文的内部链接和其他静态资源\"><a href=\"#替换正文的内部链接和其他静态资源\" class=\"headerlink\" title=\"替换正文的内部链接和其他静态资源\"></a>替换正文的内部链接和其他静态资源</h3><p>对于这部分链接需要手工修改，修改的方法有两种：</p>\n<h4 id=\"（1）直接在数据库中更新，更新的sql如下：\"><a href=\"#（1）直接在数据库中更新，更新的sql如下：\" class=\"headerlink\" title=\"（1）直接在数据库中更新，更新的sql如下：\"></a>（1）直接在数据库中更新，更新的sql如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update wp\\_posts set post\\_content = replace(post_content, ‘http://your-website-name/’,‘https://your-website-name/’)</span><br></pre></td></tr></table></figure>\n<p>对于数据库不熟悉的童鞋不推荐这种方法，对数据库错误的更新对网站可能是毁灭性的打击，建议<strong>更新前最好备份数据库</strong>。</p>\n<h4 id=\"（2）利用wordpress提供的api来重写链接\"><a href=\"#（2）利用wordpress提供的api来重写链接\" class=\"headerlink\" title=\"（2）利用wordpress提供的api来重写链接\"></a>（2）利用wordpress提供的api来重写链接</h4><p>在使用的主题（themes）的目录下的 functions.php 加入如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"function\"><span class=\"keyword\">function</span>\\<span class=\"title\">_exists</span><span class=\"params\">(<span class=\"string\">'add\\_theme\\_support'</span>)</span> )<span class=\"title\">add</span>\\<span class=\"title\">_theme_support</span><span class=\"params\">(<span class=\"string\">'post-thumbnails'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'script\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_script\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_script</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'style\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_style\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_style</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法优点是可逆，不会对网站的数据库有什么影响，推荐使用这种方法。 调整完内部链接后，检查整个网站的页面，包括首页，栏目页，内容页，sitemap，页面head部分内容，比如：css，js，canonical 等，是否都转换成了 HTTPS 版本。</p>\n<h2 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h2><h3 id=\"Apache配置文件找不到\"><a href=\"#Apache配置文件找不到\" class=\"headerlink\" title=\"Apache配置文件找不到\"></a>Apache配置文件找不到</h3><p>可能某些童鞋的 apache 配置文件不在 <code>/etc/httpd/conf</code> 目录下，可以通过 find 命令进行查找：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>其中“/”是指在根目录下进行查找，如果你知道在哪个目录下，可以自行修改，节省查找的时间</p>\n<h3 id=\"Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\"><a href=\"#Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\" class=\"headerlink\" title=\"Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration\"></a>Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration</h3><p>不管是在证书申请过程中还是在自己修改配置过程中遇到次报错，一般情况下是因为在 modules 文件夹下并没有 ssl 模块，那就需要自己安装了，我在<a href=\"https://stackoverflow.com/questions/5257974/how-to-install-mod-ssl-for-apache-httpd\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上搜到了解决方案，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mod_ssl</span><br></pre></td></tr></table></figure>\n<p>当我们安装完毕之后，就可以看到 modules 文件夹下多了一个 mod_ssl.so 文件了，此时我们再重启 apache 就应该不报错了。</p>\n<h3 id=\"warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\"><a href=\"#warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\" class=\"headerlink\" title=\"[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down\"></a>[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down</h3><p>出现该警告说明 ssl module 被多处使用，可以用如下命令检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep ssl_module -rI /etc/httpd/*</span><br></pre></td></tr></table></figure>\n<p>此时会出现：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_289.png\" alt=\"\"><br></div>\n\n<p>其中 <code>httpd.bk.conf</code> 是我自己建的备份，所以有两种解决方法：</p>\n<ol>\n<li>httpd.conf 中去掉 <code>LoadModule ssl\\_module modules/mod\\_ssl.so</code>、去掉 <code>Listen 443</code></li>\n<li>直接删除 <code>/etc/httpd/conf.d/ssl.conf</code>，推荐直接删除 ssl.conf</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.watch-life.net/wordpress/wordpress-https-link.html\" target=\"_blank\" rel=\"noopener\">WordPress整站轻松开启HTTPS</a></p>\n<p><a href=\"https://www.jianshu.com/p/909adc612fd4\" target=\"_blank\" rel=\"noopener\">apache服务器添加https（针对ios10 https）</a></p>\n<p><a href=\"https://stringblog.com/%E9%80%9A%E8%BF%87certbot%E9%85%8D%E7%BD%AElets-encrypt%E7%9A%84ssl%EF%BC%88apache%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">通过Certbot配置Let’s Encrypt的SSL（Apache）</a></p>\n","categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"},{"name":"Wordpress","path":"api/tags/Wordpress.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]}