{"title":"好文章推荐系列——前沿","slug":"好文章推荐系列——前沿","date":"2017-08-07T14:34:02.000Z","updated":"2025-01-03T12:32:52.481Z","comments":true,"path":"api/articles/好文章推荐系列——前沿.json","excerpt":null,"covers":null,"content":"<h3 id=\"阿里跨端技术演进中的实践与思考\"><a href=\"#阿里跨端技术演进中的实践与思考\" class=\"headerlink\" title=\"阿里跨端技术演进中的实践与思考\"></a><a href=\"https://www.infoq.cn/article/6mar8xqh3d7j5d2qx9kn\">阿里跨端技术演进中的实践与思考</a></h3><p>2020 年 12 月，QCon 全球软件大会 2020·上海站上阿里巴巴张舒迪（圣司）分享了《阿里跨端技术演进中的实践与思考》，他从跨端技术背景及演进历程、阿里跨端业务现状及思考、跨端技术方向思路演进以及对跨端技术未来展望这四个方面进行了深入的分析，从实践出发为跨端技术开发者带来更多思考方向。本文根据此次分享整理。</p>\n<h3 id=\"元宇宙趋势下的前端现状\"><a href=\"#元宇宙趋势下的前端现状\" class=\"headerlink\" title=\"元宇宙趋势下的前端现状\"></a><a href=\"https://cloud.tencent.com/developer/article/1902488\">元宇宙趋势下的前端现状</a></h3><p>“交互娱乐类资本瞄准的互联网未来 - 元宇宙”,作为大家口中的“互联网的最终形态”，需要如今大热的包括 AR、VR、5G、云计算、区块链等软硬件技术的成熟。才能构建出一个去中心化的、不受单一控制的、永续的、不会终止的世界。</p>\n<p>上面提到的各项技术，和目前前端关联比较大的，便是 AR、VR。</p>\n<h3 id=\"可折叠Web可能会给我们带来的变化\"><a href=\"#可折叠Web可能会给我们带来的变化\" class=\"headerlink\" title=\"可折叠Web可能会给我们带来的变化\"></a><a href=\"https://mp.weixin.qq.com/s/SxA8E5IG5r9u2LoaNdxArw\">可折叠Web可能会给我们带来的变化</a></h3><p>可折叠Web的说法是可折叠设备带来的。可折叠设备形式多样，从笔记本电脑到手机，再到新奇的双屏幕混合设备。对于这类新发明并没有一个全面的定义，但大多数都可以归为两类。“可折叠”是指屏幕可以折叠的设备（比如华为Mate X，三星Galaxy Z Flip）；而“双屏”设备的屏幕是分开的，但也可以以独特的方式一起工作，以灵活的形式提供生产力（比如，微软的Surface Neo和Surface Duo）。当涉及到Web设计时，这两种类型可能会遵循类似的规则。如果这项技术能大获成功，那么Web设计将面临十年来最大的变革。这对于我们Web开发者而言，也将会开启新的旅程。</p>\n<h3 id=\"跨平台解决方案的技术分析\"><a href=\"#跨平台解决方案的技术分析\" class=\"headerlink\" title=\"跨平台解决方案的技术分析\"></a><a href=\"https://mp.weixin.qq.com/s/6UzhBRScBW67Ev95BK0ulg\">跨平台解决方案的技术分析</a></h3><p>本文旨在介绍不同跨平台解决方案的技术架构和特点，分析各个解决方案的优势和不足之处，以便对业界当前的跨平台技术方案建立起整体的认知和对团队的技术选型提供一定的参考作用。注意的是，这里的跨平台特指的是针对 iOS 和安卓进行的跨平台开发。</p>\n<h3 id=\"利用机器学习通过网页预提取技术加快网站加载速度\"><a href=\"#利用机器学习通过网页预提取技术加快网站加载速度\" class=\"headerlink\" title=\"利用机器学习通过网页预提取技术加快网站加载速度\"></a><a href=\"https://mp.weixin.qq.com/s/S1Yg6wiYkK2lN-5aTp2dqQ\">利用机器学习通过网页预提取技术加快网站加载速度</a></h3><p>在本篇文章中，我们将展示一种端到端的工作流，涉及从 Google Analytics 获取网站导航数据并加以利用，以及训练一种能预测用户下一步操作的自定义机器学习模型。您可以在 Angular 应用中利用这些预测，预提取候选页面，从而大幅改进网站的用户体验。</p>\n<h3 id=\"万字长文讲透低代码\"><a href=\"#万字长文讲透低代码\" class=\"headerlink\" title=\"万字长文讲透低代码\"></a><a href=\"https://mp.weixin.qq.com/s/OXCBORheAx99o3fS-ZfUdg\">万字长文讲透低代码</a></h3><p>本文希望对这个当前动荡不安的领域做一点“不草就”的综合说明，想说清楚七大问题：低代码和无代码（也称零代码）是什么关系、怎么判断一个低代码平台是否专业、国内是否有专业的低代码平台、低代码是不是新瓶装旧酒、低代码真的搞不定专业的企业应用吗、低代码不适合开发哪些应用、低代码并非银弹。</p>\n<h3 id=\"How-we-use-Web-Components-at-GitHub\"><a href=\"#How-we-use-Web-Components-at-GitHub\" class=\"headerlink\" title=\"How we use Web Components at GitHub\"></a><a href=\"https://github.blog/2021-05-04-how-we-use-web-components-at-github/\">How we use Web Components at GitHub</a></h3><p>At GitHub, we pride ourselves on delivering a first-class developer experience. A considerable part of our work is on our front end, which we strive to keep as lightweight, fast, and accessible as possible. For a product as large as GitHub, this can be quite the task. Like many front-end codebases, we leverage components, independent, isolated, and reusable pieces of code that allow application teams to deliver high fidelity UI quickly and efficiently while still keeping to our high standards of quality.</p>\n<h3 id=\"Web-Components-上手指南\"><a href=\"#Web-Components-上手指南\" class=\"headerlink\" title=\"Web Components 上手指南\"></a><a href=\"https://blog.shenfq.com/posts/2021/Web%20Components%20%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.html\">Web Components 上手指南</a></h3><p>虽然 React、Vue 为我们的组件开发提供了便利，但是这两者在组件的开发思路上，一个是自创的 JSX 语法，一个是特有的单文件模板的语法，两者的目标都是想提供一种组件的封装方法。毕竟都有其原创的东西在里面，和我们刚开始接触的 Web 基础的 HTML、CSS、JS 的方式还是有些出入的。今天介绍的就是，通过 HTML、CSS、JS 的方式来实现自定义的组件，也是目前浏览器原生提供的方案：Web Components。</p>\n<h3 id=\"看懂-Serverless，这一篇就够了\"><a href=\"#看懂-Serverless，这一篇就够了\" class=\"headerlink\" title=\"看懂 Serverless，这一篇就够了\"></a><a href=\"http://wemedia.ifeng.com/90135068/wemedia.shtml\">看懂 Serverless，这一篇就够了</a></h3><p>目录如下：</p>\n<ol>\n<li>一、无服务器（Serverless）计算是什么</li>\n<li>二、理解Serverless技术—FaaS和BaaS</li>\n<li>三、无服务器（Serverless）计算如何工作？</li>\n<li>四、无服务器（Serverless）适用于哪些场景？</li>\n<li>五、Serverless 的问题</li>\n<li>六、总结</li>\n</ol>\n<h3 id=\"GraphQL-and-Relay-浅析\"><a href=\"#GraphQL-and-Relay-浅析\" class=\"headerlink\" title=\"GraphQL and Relay 浅析\"></a><a href=\"https://zhuanlan.zhihu.com/p/20638731\">GraphQL and Relay 浅析</a></h3><p>相信大部分人都没听说过 GraphQL 和 Relay 吧，这篇文章就对这两样东西进行了介绍，同时文章结尾还有一些扩展阅读链接</p>\n<h3 id=\"译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\"><a href=\"#译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\" class=\"headerlink\" title=\"译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫\"></a><a href=\"http://csbun.github.io/blog/2017/09/puppeteer/\">译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫</a></h3><p><a href=\"https://github.com/GoogleChrome/puppeteer\"><code>Puppeteer</code></a> 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具。正因为这个官方声明，许多业内自动化测试库都已经停止维护，包括 <strong><a href=\"http://phantomjs.org/\">PhantomJS</a></strong>。<strong><a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/\">Selenium IDE for Firefox</a></strong> 项目也因为缺乏维护者而终止。</p>\n<h3 id=\"初探-Headless-Chrome\"><a href=\"#初探-Headless-Chrome\" class=\"headerlink\" title=\"初探 Headless Chrome\"></a><a href=\"https://zhuanlan.zhihu.com/p/27100187\">初探 Headless Chrome</a></h3><p>Headless Chrome 是 Chrome 浏览器的无界面形态，可以在不打开浏览器的前提下，使用所有 Chrome 支持的特性运行你的程序。相比于现代浏览器，Headless Chrome 更加方便测试 web 应用，获得网站的截图，做爬虫抓取信息等。相比于出道较早的 PhantomJS，SlimerJS 等，Headless Chrome 则更加贴近浏览器环境。</p>\n<h3 id=\"译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\"><a href=\"#译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\" class=\"headerlink\" title=\"[译] React Native vs. Cordova、PhoneGap、Ionic，等等\"></a>[译] React Native vs. Cordova、PhoneGap、Ionic，等等</h3><p>原文链接：<a href=\"https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc\">https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc</a>，主要解释了以下几个问题：</p>\n<ul>\n<li>什么是原生应用？</li>\n<li>什么是 WebView UI ？</li>\n<li>更原生化的框架的优势和劣势分别是什么？原生化更少的框架呢？</li>\n<li>React Native 与 Cordova 相比如何？</li>\n</ul>\n","more":"<h3 id=\"阿里跨端技术演进中的实践与思考\"><a href=\"#阿里跨端技术演进中的实践与思考\" class=\"headerlink\" title=\"阿里跨端技术演进中的实践与思考\"></a><a href=\"https://www.infoq.cn/article/6mar8xqh3d7j5d2qx9kn\">阿里跨端技术演进中的实践与思考</a></h3><p>2020 年 12 月，QCon 全球软件大会 2020·上海站上阿里巴巴张舒迪（圣司）分享了《阿里跨端技术演进中的实践与思考》，他从跨端技术背景及演进历程、阿里跨端业务现状及思考、跨端技术方向思路演进以及对跨端技术未来展望这四个方面进行了深入的分析，从实践出发为跨端技术开发者带来更多思考方向。本文根据此次分享整理。</p>\n<h3 id=\"元宇宙趋势下的前端现状\"><a href=\"#元宇宙趋势下的前端现状\" class=\"headerlink\" title=\"元宇宙趋势下的前端现状\"></a><a href=\"https://cloud.tencent.com/developer/article/1902488\">元宇宙趋势下的前端现状</a></h3><p>“交互娱乐类资本瞄准的互联网未来 - 元宇宙”,作为大家口中的“互联网的最终形态”，需要如今大热的包括 AR、VR、5G、云计算、区块链等软硬件技术的成熟。才能构建出一个去中心化的、不受单一控制的、永续的、不会终止的世界。</p>\n<p>上面提到的各项技术，和目前前端关联比较大的，便是 AR、VR。</p>\n<h3 id=\"可折叠Web可能会给我们带来的变化\"><a href=\"#可折叠Web可能会给我们带来的变化\" class=\"headerlink\" title=\"可折叠Web可能会给我们带来的变化\"></a><a href=\"https://mp.weixin.qq.com/s/SxA8E5IG5r9u2LoaNdxArw\">可折叠Web可能会给我们带来的变化</a></h3><p>可折叠Web的说法是可折叠设备带来的。可折叠设备形式多样，从笔记本电脑到手机，再到新奇的双屏幕混合设备。对于这类新发明并没有一个全面的定义，但大多数都可以归为两类。“可折叠”是指屏幕可以折叠的设备（比如华为Mate X，三星Galaxy Z Flip）；而“双屏”设备的屏幕是分开的，但也可以以独特的方式一起工作，以灵活的形式提供生产力（比如，微软的Surface Neo和Surface Duo）。当涉及到Web设计时，这两种类型可能会遵循类似的规则。如果这项技术能大获成功，那么Web设计将面临十年来最大的变革。这对于我们Web开发者而言，也将会开启新的旅程。</p>\n<h3 id=\"跨平台解决方案的技术分析\"><a href=\"#跨平台解决方案的技术分析\" class=\"headerlink\" title=\"跨平台解决方案的技术分析\"></a><a href=\"https://mp.weixin.qq.com/s/6UzhBRScBW67Ev95BK0ulg\">跨平台解决方案的技术分析</a></h3><p>本文旨在介绍不同跨平台解决方案的技术架构和特点，分析各个解决方案的优势和不足之处，以便对业界当前的跨平台技术方案建立起整体的认知和对团队的技术选型提供一定的参考作用。注意的是，这里的跨平台特指的是针对 iOS 和安卓进行的跨平台开发。</p>\n<h3 id=\"利用机器学习通过网页预提取技术加快网站加载速度\"><a href=\"#利用机器学习通过网页预提取技术加快网站加载速度\" class=\"headerlink\" title=\"利用机器学习通过网页预提取技术加快网站加载速度\"></a><a href=\"https://mp.weixin.qq.com/s/S1Yg6wiYkK2lN-5aTp2dqQ\">利用机器学习通过网页预提取技术加快网站加载速度</a></h3><p>在本篇文章中，我们将展示一种端到端的工作流，涉及从 Google Analytics 获取网站导航数据并加以利用，以及训练一种能预测用户下一步操作的自定义机器学习模型。您可以在 Angular 应用中利用这些预测，预提取候选页面，从而大幅改进网站的用户体验。</p>\n<h3 id=\"万字长文讲透低代码\"><a href=\"#万字长文讲透低代码\" class=\"headerlink\" title=\"万字长文讲透低代码\"></a><a href=\"https://mp.weixin.qq.com/s/OXCBORheAx99o3fS-ZfUdg\">万字长文讲透低代码</a></h3><p>本文希望对这个当前动荡不安的领域做一点“不草就”的综合说明，想说清楚七大问题：低代码和无代码（也称零代码）是什么关系、怎么判断一个低代码平台是否专业、国内是否有专业的低代码平台、低代码是不是新瓶装旧酒、低代码真的搞不定专业的企业应用吗、低代码不适合开发哪些应用、低代码并非银弹。</p>\n<h3 id=\"How-we-use-Web-Components-at-GitHub\"><a href=\"#How-we-use-Web-Components-at-GitHub\" class=\"headerlink\" title=\"How we use Web Components at GitHub\"></a><a href=\"https://github.blog/2021-05-04-how-we-use-web-components-at-github/\">How we use Web Components at GitHub</a></h3><p>At GitHub, we pride ourselves on delivering a first-class developer experience. A considerable part of our work is on our front end, which we strive to keep as lightweight, fast, and accessible as possible. For a product as large as GitHub, this can be quite the task. Like many front-end codebases, we leverage components, independent, isolated, and reusable pieces of code that allow application teams to deliver high fidelity UI quickly and efficiently while still keeping to our high standards of quality.</p>\n<h3 id=\"Web-Components-上手指南\"><a href=\"#Web-Components-上手指南\" class=\"headerlink\" title=\"Web Components 上手指南\"></a><a href=\"https://blog.shenfq.com/posts/2021/Web%20Components%20%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.html\">Web Components 上手指南</a></h3><p>虽然 React、Vue 为我们的组件开发提供了便利，但是这两者在组件的开发思路上，一个是自创的 JSX 语法，一个是特有的单文件模板的语法，两者的目标都是想提供一种组件的封装方法。毕竟都有其原创的东西在里面，和我们刚开始接触的 Web 基础的 HTML、CSS、JS 的方式还是有些出入的。今天介绍的就是，通过 HTML、CSS、JS 的方式来实现自定义的组件，也是目前浏览器原生提供的方案：Web Components。</p>\n<h3 id=\"看懂-Serverless，这一篇就够了\"><a href=\"#看懂-Serverless，这一篇就够了\" class=\"headerlink\" title=\"看懂 Serverless，这一篇就够了\"></a><a href=\"http://wemedia.ifeng.com/90135068/wemedia.shtml\">看懂 Serverless，这一篇就够了</a></h3><p>目录如下：</p>\n<ol>\n<li>一、无服务器（Serverless）计算是什么</li>\n<li>二、理解Serverless技术—FaaS和BaaS</li>\n<li>三、无服务器（Serverless）计算如何工作？</li>\n<li>四、无服务器（Serverless）适用于哪些场景？</li>\n<li>五、Serverless 的问题</li>\n<li>六、总结</li>\n</ol>\n<h3 id=\"GraphQL-and-Relay-浅析\"><a href=\"#GraphQL-and-Relay-浅析\" class=\"headerlink\" title=\"GraphQL and Relay 浅析\"></a><a href=\"https://zhuanlan.zhihu.com/p/20638731\">GraphQL and Relay 浅析</a></h3><p>相信大部分人都没听说过 GraphQL 和 Relay 吧，这篇文章就对这两样东西进行了介绍，同时文章结尾还有一些扩展阅读链接</p>\n<h3 id=\"译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\"><a href=\"#译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\" class=\"headerlink\" title=\"译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫\"></a><a href=\"http://csbun.github.io/blog/2017/09/puppeteer/\">译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫</a></h3><p><a href=\"https://github.com/GoogleChrome/puppeteer\"><code>Puppeteer</code></a> 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具。正因为这个官方声明，许多业内自动化测试库都已经停止维护，包括 <strong><a href=\"http://phantomjs.org/\">PhantomJS</a></strong>。<strong><a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/\">Selenium IDE for Firefox</a></strong> 项目也因为缺乏维护者而终止。</p>\n<h3 id=\"初探-Headless-Chrome\"><a href=\"#初探-Headless-Chrome\" class=\"headerlink\" title=\"初探 Headless Chrome\"></a><a href=\"https://zhuanlan.zhihu.com/p/27100187\">初探 Headless Chrome</a></h3><p>Headless Chrome 是 Chrome 浏览器的无界面形态，可以在不打开浏览器的前提下，使用所有 Chrome 支持的特性运行你的程序。相比于现代浏览器，Headless Chrome 更加方便测试 web 应用，获得网站的截图，做爬虫抓取信息等。相比于出道较早的 PhantomJS，SlimerJS 等，Headless Chrome 则更加贴近浏览器环境。</p>\n<h3 id=\"译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\"><a href=\"#译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\" class=\"headerlink\" title=\"[译] React Native vs. Cordova、PhoneGap、Ionic，等等\"></a>[译] React Native vs. Cordova、PhoneGap、Ionic，等等</h3><p>原文链接：<a href=\"https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc\">https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc</a>，主要解释了以下几个问题：</p>\n<ul>\n<li>什么是原生应用？</li>\n<li>什么是 WebView UI ？</li>\n<li>更原生化的框架的优势和劣势分别是什么？原生化更少的框架呢？</li>\n<li>React Native 与 Cordova 相比如何？</li>\n</ul>\n","categories":[{"name":"推荐","path":"api/categories/推荐.json"}],"tags":[{"name":"前沿","path":"api/tags/前沿.json"}]}