{"title":"前端面试系列（6）——HTTP请求的状态码","slug":"前端面试系列（6）——HTTP请求的状态码","date":"2017-04-04T13:38:16.000Z","updated":"2019-12-31T04:54:06.486Z","comments":true,"path":"api/articles/前端面试系列（6）——HTTP请求的状态码.json","excerpt":null,"covers":null,"content":"<p>首先说一下 HTTP，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言（HTML）文档从 Web 服务器传送到客户端的浏览器；而状态码在 Response 消息中的第一行（状态行），用来告诉 HTTP 客户端，HTTP 服务器是否产生了预期的 Response</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><p>HTTP/1.1 中定义了 5 类状态码，状态码由三位数字组成，第一个数字定义了响应的类别</p>\n<ul>\n<li>1XX  提示信息 - 表示请求已被成功接收，继续处理</li>\n<li>2XX  成功 - 表示请求已被成功接收，理解，接受</li>\n<li>3XX  重定向 - 要完成请求必须进行更进一步的处理</li>\n<li>4XX  客户端错误 - 请求有语法错误或请求无法实现</li>\n<li>5XX  服务器端错误 - 服务器未能实现合法的请求</li>\n</ul>\n<h2 id=\"状态码含义\"><a href=\"#状态码含义\" class=\"headerlink\" title=\"状态码含义\"></a>状态码含义</h2><p><strong>粗体为常见状态码，需要多留意</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">英文解释</th>\n<th style=\"text-align:left\">中文解释</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">Continue</td>\n<td style=\"text-align:left\">初始的请求已经接受，客户应当继续发送请求的其余部分</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\">Switching Protocols</td>\n<td style=\"text-align:left\">服务器将遵从客户的请求转换到另外一种协议</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>200</strong></td>\n<td style=\"text-align:center\"><strong>OK</strong></td>\n<td style=\"text-align:left\"><strong>一切正常，对GET和POST请求的应答文档跟在后面</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201</td>\n<td style=\"text-align:center\">Created</td>\n<td style=\"text-align:left\">服务器已经创建了文档，Location头给出了它的URL</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">202</td>\n<td style=\"text-align:center\">Accepted</td>\n<td style=\"text-align:left\">已经接受请求，但处理尚未完成</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">203</td>\n<td style=\"text-align:center\">Non-Authoritative Information</td>\n<td style=\"text-align:left\">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">204</td>\n<td style=\"text-align:center\">No Content</td>\n<td style=\"text-align:left\">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而 Servlet 可以确定用户文档足够新，这个状态代码是很有用的</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">205</td>\n<td style=\"text-align:center\">Reset Content</td>\n<td style=\"text-align:left\">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">206</td>\n<td style=\"text-align:center\">Partial Content</td>\n<td style=\"text-align:left\">客户发送了一个带有Range头的GET请求，服务器完成了它</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300</td>\n<td style=\"text-align:center\">Multiple Choices</td>\n<td style=\"text-align:left\">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>301</strong></td>\n<td style=\"text-align:center\"><strong>Moved Permanently</strong></td>\n<td style=\"text-align:left\"><strong>客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>302</strong></td>\n<td style=\"text-align:center\"><strong>Found</strong></td>\n<td style=\"text-align:left\"><strong>类似于 301，但新的URL应该被视为临时性的替代，而不是永久性的</strong></td>\n<td style=\"text-align:left\"><strong>在 HTTP1.0 中对应的状态信息是 “Moved Temporatily”</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">303</td>\n<td style=\"text-align:center\">See Other</td>\n<td style=\"text-align:left\">类似于301/302，不同之处在于，如果原来的请求是 POST，Location 头指定的重定向目标文档应该通过 GET 提取</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>304</strong></td>\n<td style=\"text-align:center\"><strong>Not Modified</strong></td>\n<td style=\"text-align:left\"><strong>客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">305</td>\n<td style=\"text-align:center\">Use Proxy</td>\n<td style=\"text-align:left\">客户请求的文档应该通过 Location 头所指明的代理服务器提取</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">307</td>\n<td style=\"text-align:center\">Temporary Redirect</td>\n<td style=\"text-align:left\">和 302 相同。许多浏览器会错误地响应 302 应答进行重定向，即使原来的请求是 POST，即使它实际上只能在 POST 请求的应答是 303 时才能重定向。由于这个原因，HTTP 1.1 新增了 307，以便更加清除地区分几个状态代码：当出现 303 应答时，浏览器可以跟随重定向的 GET 和 POST 请求；如果是 307 应答，则浏览器只能跟随对 GET 请求的重定向</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">Bad Request</td>\n<td style=\"text-align:left\">请求出现语法错误</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">401</td>\n<td style=\"text-align:center\">Unauthorized</td>\n<td style=\"text-align:left\">客户试图未经授权访问受密码保护的页面。应答中会包含一个 WWW-Authenticate 头，浏览器据此显示用户名字/密码对话框，然后在填写合适的 Authorization 头后再次发出请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>403</strong></td>\n<td style=\"text-align:center\"><strong>Forbidden</strong></td>\n<td style=\"text-align:left\"><strong>资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>404</strong></td>\n<td style=\"text-align:center\"><strong>Not Found</strong></td>\n<td style=\"text-align:left\"><strong>无法找到指定位置的资源。这也是一个常用的应答</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">405</td>\n<td style=\"text-align:center\">Method Not Allowed</td>\n<td style=\"text-align:left\">请求方法（GET、POST、HEAD、Delete、PUT、TRACE 等）对指定的资源不适用。</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">406</td>\n<td style=\"text-align:center\">Not Acceptable</td>\n<td style=\"text-align:left\">指定的资源已经找到，但它的 MIME 类型和客户在 Accpet 头中所指定的不兼容</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">407</td>\n<td style=\"text-align:center\">Proxy Authentication Required</td>\n<td style=\"text-align:left\">类似于 401，表示客户必须先经过代理服务器的授权</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">408</td>\n<td style=\"text-align:center\">Request Timeout</td>\n<td style=\"text-align:left\">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">409</td>\n<td style=\"text-align:center\">Conflict</td>\n<td style=\"text-align:left\">通常和 PUT 请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">410</td>\n<td style=\"text-align:center\">Gone</td>\n<td style=\"text-align:left\">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">411</td>\n<td style=\"text-align:center\">Length Required</td>\n<td style=\"text-align:left\">服务器不能处理请求，除非客户发送一个 Content-Length 头</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">412</td>\n<td style=\"text-align:center\">Precondition Failed</td>\n<td style=\"text-align:left\">请求头中指定的一些前提条件失败</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">413</td>\n<td style=\"text-align:center\">Request Entity Too Large</td>\n<td style=\"text-align:left\">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个 Retry-After 头</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">414</td>\n<td style=\"text-align:center\">Request URI Too Long</td>\n<td style=\"text-align:left\">URI 太长</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">Internal Server Error</td>\n<td style=\"text-align:left\">服务器遇到了意料不到的情况，不能完成客户的请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">501</td>\n<td style=\"text-align:center\">Not Implemented</td>\n<td style=\"text-align:left\">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>502</strong></td>\n<td style=\"text-align:center\"><strong>Bad Gateway</strong></td>\n<td style=\"text-align:left\"><strong>服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>503</strong></td>\n<td style=\"text-align:center\"><strong>Service Unavailable</strong></td>\n<td style=\"text-align:left\"><strong>服务器由于维护或者负载过重未能应答。例如，Servlet 可能在数据库连接池已满的情况下返回503。服务器返回 503 时可以提供一个 Retry-After 头</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>504</strong></td>\n<td style=\"text-align:center\"><strong>Gateway Timeout</strong></td>\n<td style=\"text-align:left\"><strong>由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</strong></td>\n<td style=\"text-align:left\"><strong>HTTP 1.1 新</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">505</td>\n<td style=\"text-align:center\">HTTP Version Not Supported</td>\n<td style=\"text-align:left\">服务器不支持请求中所指明的 HTTP 版本</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>[一篇学习HTTP状态码的神文]（<a href=\"http://www.codeceo.com/article/http-code.html）\" target=\"_blank\" rel=\"noopener\">http://www.codeceo.com/article/http-code.html）</a></li>\n</ul>\n","more":"<p>首先说一下 HTTP，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言（HTML）文档从 Web 服务器传送到客户端的浏览器；而状态码在 Response 消息中的第一行（状态行），用来告诉 HTTP 客户端，HTTP 服务器是否产生了预期的 Response</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><p>HTTP/1.1 中定义了 5 类状态码，状态码由三位数字组成，第一个数字定义了响应的类别</p>\n<ul>\n<li>1XX  提示信息 - 表示请求已被成功接收，继续处理</li>\n<li>2XX  成功 - 表示请求已被成功接收，理解，接受</li>\n<li>3XX  重定向 - 要完成请求必须进行更进一步的处理</li>\n<li>4XX  客户端错误 - 请求有语法错误或请求无法实现</li>\n<li>5XX  服务器端错误 - 服务器未能实现合法的请求</li>\n</ul>\n<h2 id=\"状态码含义\"><a href=\"#状态码含义\" class=\"headerlink\" title=\"状态码含义\"></a>状态码含义</h2><p><strong>粗体为常见状态码，需要多留意</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">英文解释</th>\n<th style=\"text-align:left\">中文解释</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">Continue</td>\n<td style=\"text-align:left\">初始的请求已经接受，客户应当继续发送请求的其余部分</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\">Switching Protocols</td>\n<td style=\"text-align:left\">服务器将遵从客户的请求转换到另外一种协议</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>200</strong></td>\n<td style=\"text-align:center\"><strong>OK</strong></td>\n<td style=\"text-align:left\"><strong>一切正常，对GET和POST请求的应答文档跟在后面</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201</td>\n<td style=\"text-align:center\">Created</td>\n<td style=\"text-align:left\">服务器已经创建了文档，Location头给出了它的URL</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">202</td>\n<td style=\"text-align:center\">Accepted</td>\n<td style=\"text-align:left\">已经接受请求，但处理尚未完成</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">203</td>\n<td style=\"text-align:center\">Non-Authoritative Information</td>\n<td style=\"text-align:left\">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">204</td>\n<td style=\"text-align:center\">No Content</td>\n<td style=\"text-align:left\">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而 Servlet 可以确定用户文档足够新，这个状态代码是很有用的</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">205</td>\n<td style=\"text-align:center\">Reset Content</td>\n<td style=\"text-align:left\">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">206</td>\n<td style=\"text-align:center\">Partial Content</td>\n<td style=\"text-align:left\">客户发送了一个带有Range头的GET请求，服务器完成了它</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300</td>\n<td style=\"text-align:center\">Multiple Choices</td>\n<td style=\"text-align:left\">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>301</strong></td>\n<td style=\"text-align:center\"><strong>Moved Permanently</strong></td>\n<td style=\"text-align:left\"><strong>客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>302</strong></td>\n<td style=\"text-align:center\"><strong>Found</strong></td>\n<td style=\"text-align:left\"><strong>类似于 301，但新的URL应该被视为临时性的替代，而不是永久性的</strong></td>\n<td style=\"text-align:left\"><strong>在 HTTP1.0 中对应的状态信息是 “Moved Temporatily”</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">303</td>\n<td style=\"text-align:center\">See Other</td>\n<td style=\"text-align:left\">类似于301/302，不同之处在于，如果原来的请求是 POST，Location 头指定的重定向目标文档应该通过 GET 提取</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>304</strong></td>\n<td style=\"text-align:center\"><strong>Not Modified</strong></td>\n<td style=\"text-align:left\"><strong>客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">305</td>\n<td style=\"text-align:center\">Use Proxy</td>\n<td style=\"text-align:left\">客户请求的文档应该通过 Location 头所指明的代理服务器提取</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">307</td>\n<td style=\"text-align:center\">Temporary Redirect</td>\n<td style=\"text-align:left\">和 302 相同。许多浏览器会错误地响应 302 应答进行重定向，即使原来的请求是 POST，即使它实际上只能在 POST 请求的应答是 303 时才能重定向。由于这个原因，HTTP 1.1 新增了 307，以便更加清除地区分几个状态代码：当出现 303 应答时，浏览器可以跟随重定向的 GET 和 POST 请求；如果是 307 应答，则浏览器只能跟随对 GET 请求的重定向</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">Bad Request</td>\n<td style=\"text-align:left\">请求出现语法错误</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">401</td>\n<td style=\"text-align:center\">Unauthorized</td>\n<td style=\"text-align:left\">客户试图未经授权访问受密码保护的页面。应答中会包含一个 WWW-Authenticate 头，浏览器据此显示用户名字/密码对话框，然后在填写合适的 Authorization 头后再次发出请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>403</strong></td>\n<td style=\"text-align:center\"><strong>Forbidden</strong></td>\n<td style=\"text-align:left\"><strong>资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>404</strong></td>\n<td style=\"text-align:center\"><strong>Not Found</strong></td>\n<td style=\"text-align:left\"><strong>无法找到指定位置的资源。这也是一个常用的应答</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">405</td>\n<td style=\"text-align:center\">Method Not Allowed</td>\n<td style=\"text-align:left\">请求方法（GET、POST、HEAD、Delete、PUT、TRACE 等）对指定的资源不适用。</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">406</td>\n<td style=\"text-align:center\">Not Acceptable</td>\n<td style=\"text-align:left\">指定的资源已经找到，但它的 MIME 类型和客户在 Accpet 头中所指定的不兼容</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">407</td>\n<td style=\"text-align:center\">Proxy Authentication Required</td>\n<td style=\"text-align:left\">类似于 401，表示客户必须先经过代理服务器的授权</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">408</td>\n<td style=\"text-align:center\">Request Timeout</td>\n<td style=\"text-align:left\">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">409</td>\n<td style=\"text-align:center\">Conflict</td>\n<td style=\"text-align:left\">通常和 PUT 请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">410</td>\n<td style=\"text-align:center\">Gone</td>\n<td style=\"text-align:left\">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">411</td>\n<td style=\"text-align:center\">Length Required</td>\n<td style=\"text-align:left\">服务器不能处理请求，除非客户发送一个 Content-Length 头</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">412</td>\n<td style=\"text-align:center\">Precondition Failed</td>\n<td style=\"text-align:left\">请求头中指定的一些前提条件失败</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">413</td>\n<td style=\"text-align:center\">Request Entity Too Large</td>\n<td style=\"text-align:left\">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个 Retry-After 头</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">414</td>\n<td style=\"text-align:center\">Request URI Too Long</td>\n<td style=\"text-align:left\">URI 太长</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">Internal Server Error</td>\n<td style=\"text-align:left\">服务器遇到了意料不到的情况，不能完成客户的请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">501</td>\n<td style=\"text-align:center\">Not Implemented</td>\n<td style=\"text-align:left\">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>502</strong></td>\n<td style=\"text-align:center\"><strong>Bad Gateway</strong></td>\n<td style=\"text-align:left\"><strong>服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>503</strong></td>\n<td style=\"text-align:center\"><strong>Service Unavailable</strong></td>\n<td style=\"text-align:left\"><strong>服务器由于维护或者负载过重未能应答。例如，Servlet 可能在数据库连接池已满的情况下返回503。服务器返回 503 时可以提供一个 Retry-After 头</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>504</strong></td>\n<td style=\"text-align:center\"><strong>Gateway Timeout</strong></td>\n<td style=\"text-align:left\"><strong>由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</strong></td>\n<td style=\"text-align:left\"><strong>HTTP 1.1 新</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">505</td>\n<td style=\"text-align:center\">HTTP Version Not Supported</td>\n<td style=\"text-align:left\">服务器不支持请求中所指明的 HTTP 版本</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>[一篇学习HTTP状态码的神文]（<a href=\"http://www.codeceo.com/article/http-code.html）\" target=\"_blank\" rel=\"noopener\">http://www.codeceo.com/article/http-code.html）</a></li>\n</ul>\n","categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"面试","path":"api/tags/面试.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]}