{"title":"读书笔记系列（1）——HTML5移动Web开发指南","slug":"读书笔记系列（1）——HTML5移动Web开发指南","date":"2017-04-06T07:41:14.000Z","updated":"2019-01-29T09:23:55.540Z","comments":true,"path":"api/articles/读书笔记系列（1）——HTML5移动Web开发指南.json","excerpt":null,"covers":null,"content":"<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><h3 id=\"包含匹配选择器\"><a href=\"#包含匹配选择器\" class=\"headerlink\" title=\"包含匹配选择器\"></a>包含匹配选择器</h3><p>包含匹配比完全匹配范围更广。只要元素中的属性包含有指定的字符串，元素就使用该样式。其语法是：<code>[attribute*=value]</code>。</p>\n<p>其中 attribute 指的是属性名，value 指的是属性值，包含匹配采用 “ *=” 符号。</p>\n<h3 id=\"首字符匹配选择器\"><a href=\"#首字符匹配选择器\" class=\"headerlink\" title=\"首字符匹配选择器\"></a>首字符匹配选择器</h3><p>首字符匹配就是匹配属性值开头字符，只要开头字符符合匹配，则元素使用该样式。其语法是：<code>[attribute^=value]</code>。</p>\n<p>其中 attribute 指的是属性名，value 指的是属性值，首字符匹配采用“ ^=”符号。</p>\n<h3 id=\"尾字符匹配选择器\"><a href=\"#尾字符匹配选择器\" class=\"headerlink\" title=\"尾字符匹配选择器\"></a>尾字符匹配选择器</h3><p>尾字符匹配跟首字符匹配原理一样。尾字符只匹配结尾的字符串，只要结尾字符串符合匹配，则元素使用该样式。其语法是：<code>[attribute$=value]</code>。其中 attribute 指的是属性名，value 指的是属性值，尾字符匹配采用 “ $=”符号。</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h3><p>before 伪类元素选择器主要的作用是在选择某个元素之前插入内容，一般用于清除浮动。before 选择器的语法是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素标签<span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">\"插入的内容\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如，在 p 元素之前插入“文字”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.before</span>&#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"文字\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h3><p>after 伪类元素选择器和 before 伪类元素选择器原理一样，但 after 是在选择某个元素之后插入内容。after 选择器的语法是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素标签<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"插入的内容\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"first-child\"><a href=\"#first-child\" class=\"headerlink\" title=\"first-child\"></a>first-child</h3><p>指定元素列表中第一个元素的样式。语法：<code>li:first-child</code></p>\n<h3 id=\"last-child\"><a href=\"#last-child\" class=\"headerlink\" title=\"last-child\"></a>last-child</h3><p>和 first-child 是同类型的选择器。last-child 指定元素列表中最后一个元素的样式。语法：<code>li:last-child</code></p>\n<h3 id=\"nth-child-和-nth-last-child\"><a href=\"#nth-child-和-nth-last-child\" class=\"headerlink\" title=\"nth-child 和 nth-last-child\"></a>nth-child 和 nth-last-child</h3><p>指定某个元素的样式或从后数起某个元素的样式。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><h3 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h3><blockquote>\n<p>box-shadow: <code>&lt;length&gt; &lt;length&gt; &lt;length&gt;</code> || color</p>\n</blockquote>\n<p>第一个 length 值是阴影水平偏移值；第二个 length 值是阴影垂直偏移值；第三个 length 值是阴影模糊值。水平和垂直偏移值都可取正负值。</p>\n<p>基于 Webkit 的 Chrome 和 Safari 等浏览器：-webkit-box-shadow</p>\n<p>Firebox 浏览器：-moz-box-shadow</p>\n<h3 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h3><blockquote>\n<p>text-shadow: <code>&lt;length&gt; &lt;length&gt; &lt;length&gt;</code> || color</p>\n</blockquote>\n<p>第一个 length 值是阴影水平偏移值；第二个 length 值是阴影垂直偏移值；第三个 length 值是阴影模糊值。水平和垂直偏移值都可取正负值。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"background-size\"><a href=\"#background-size\" class=\"headerlink\" title=\"background-size**\"></a>background-size**</h3><p>背景图像的大小</p>\n<h3 id=\"background-clip\"><a href=\"#background-clip\" class=\"headerlink\" title=\"background-clip\"></a>background-clip</h3><p>背景的裁剪区域</p>\n<blockquote>\n<p>background-clip: border-box | padding-box | content-box | no-clip</p>\n</blockquote>\n<p>其中：</p>\n<ul>\n<li>border-box 是从 border 区域向外裁剪背景；</li>\n<li>padding-box 是从 padding 区域向外裁剪背景；</li>\n<li>content-box 是从内容区域向外裁剪背景；</li>\n<li>no-clip 是从 border 区域向外裁剪背景。</li>\n</ul>\n<h3 id=\"background-origin\"><a href=\"#background-origin\" class=\"headerlink\" title=\"background-origin\"></a>background-origin</h3><p>background-origin 属性是指定 background-position 属性的参考坐标的起始位置。 background-origin 属性有三种值可以选择，border 值指定从边框的左上角坐标开始；content 值指定从内容区域的左上角坐标开始；padding 值指定从 padding 区域开始。</p>\n<h3 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h3><p>可以使用 Webkit 的其中一种特性对背景采用颜色渐变，而非采用图片方式。</p>\n<blockquote>\n<p>-webkit-gradient(<code>&lt;type&gt;, &lt;port&gt;[, &lt;radius&gt;]?,&lt;point&gt; [, &lt;radius&gt;]? [, &lt;stop&gt;]*</code>)</p>\n</blockquote>\n<p>type 类型是指采用渐变类型，如线性渐变 linear 或径向渐变 radial。如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">-webkit-gradient</span>(<span class=\"selector-tag\">linear</span>, 0 0, 0 100%, <span class=\"selector-tag\">form</span>(<span class=\"selector-id\">#FFF</span>), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#000</span>));</span><br></pre></td></tr></table></figure>\n<p>上述代码的含义是定义一个渐变背景色，该渐变色是线性渐变并且是由白色向黑色渐变的。其中前两个 0 表示的是渐变开始 <strong>X</strong> 和 <strong>Y</strong> 坐标位置；0 和 100%表示的是渐变结束 <strong>X</strong> 和 <strong>Y</strong> 坐标位置。</p>\n<h2 id=\"Media-Queries-移动设备样式\"><a href=\"#Media-Queries-移动设备样式\" class=\"headerlink\" title=\"Media Queries 移动设备样式\"></a>Media Queries 移动设备样式</h2><h3 id=\"viewport设置适应移动设备屏幕大小\"><a href=\"#viewport设置适应移动设备屏幕大小\" class=\"headerlink\" title=\"viewport设置适应移动设备屏幕大小\"></a>viewport设置适应移动设备屏幕大小</h3><p>Android Browser 浏览器的默认值是 800 像素；IE 浏览器的默认值是 974 像素；Opera 浏览器的默认值是 850 像素。viewport 虚拟窗口是在 meta 元素中定义的，其主要作用是设置 Web 页面适应移动设备的屏幕大小。 如以下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码中的 content 属性内共定义三种参数。实际上 content 属性允许设置 6 种不同的 参数，分别如下：</p>\n<ul>\n<li>width：指定虚拟窗口的屏幕宽度大小。</li>\n<li>height：指定虚拟窗口的屏幕高度大小。</li>\n<li>initial-scale：指定初始缩放比例。</li>\n<li>maximum-scale：指定允许用户缩放的最大比例。</li>\n<li>minimum-scale：指定允许用户缩放的最小比例。</li>\n<li>user-scalable：指定是否允许手动缩放。</li>\n</ul>\n<h3 id=\"Media-Queries-如何工作\"><a href=\"#Media-Queries-如何工作\" class=\"headerlink\" title=\"Media Queries 如何工作\"></a>Media Queries 如何工作</h3><p>要实现 Media Queries 样式模块，需要在 head 标签内导入一个 CSS 样式文件，例如，下面代码使用 media 属性定义当前屏幕可视区域的宽度最大值是 600 像素时应用该样式文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen and(max-width:600px)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"small.css\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 small.css 样式文件内，需要定义 media 类型的样式，例如： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width:<span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.demo</span>&#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span>; &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样也可以判断当移动设备（如 iPad）的方向发生变化时应用该样式。以下代码是当移动设备处于纵向（portrait）模式下时，应用 portrait 样式文件；当移动设备处于横向（landscape）模式下时，应用 landscape 样式文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all and(orientation:portrait)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"portrait.css\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all and(orientation:landscape)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"landscape.css\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Media-Queries-语法总结\"><a href=\"#Media-Queries-语法总结\" class=\"headerlink\" title=\"Media Queries 语法总结\"></a>Media Queries 语法总结</h3><p>Media Queries 的语法如下所示：</p>\n<blockquote>\n<p>@media [media_query] media_type and media_feature</p>\n</blockquote>\n<p>使用 Media Queries 样式模块时都必须以 “@media” 方式开头。media_query 表示查询关键字，在这里可以使用 not 关键字和 only 关键字。not 关键字表示对后面的样式表达式执行取反操作。例如如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not screen and (max-device-width:<span class=\"number\">480px</span>)</span><br></pre></td></tr></table></figure>\n<p>only 关键字的作用是，让不支持 Media Queries 的设备但能读取 Media Type 类型的浏览器忽略这个样式。例如如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (max-device-width:<span class=\"number\">480px</span>)</span><br></pre></td></tr></table></figure>\n<p>对于支持 Media Queries 的移动设备来说，如果存在 only 关键字，移动设备的 Web 浏览器会忽略 only 关键字并直接根据后面的表达式应用样式文件。对于不支持 Media Queries 的设备但能够读取 Media Type 类型的 Web 浏览器，遇到 only 关键字时会忽略这个样式文件。</p>\n<p>media_type 参数的作用是指定设备类型，通常称为媒体类型。实际上在 CSS2.1 版本时已经定义了该媒体类型。</p>\n<ul>\n<li><strong>all</strong>                 所有设备</li>\n<li><strong>aural</strong>               听觉设备</li>\n<li><strong>braille</strong>             点字触觉设备</li>\n<li><strong>handled</strong>             便携设备，如手机、平板电脑</li>\n<li><strong>print</strong>               打印预览图等</li>\n<li><strong>projection</strong>          投影设备</li>\n<li><strong>screen</strong>              显示器、笔记本、移动端等设备</li>\n<li><strong>tty</strong>                 如打字机或终端等设备</li>\n<li><strong>tv</strong>                  电视机等设备类型</li>\n<li><strong>embossed</strong>            盲文打印机</li>\n</ul>\n<p>media_feature 的主要作用是定义 CSS 中的设备特性，大部分移动设备特性都允许接受 min/max 的前缀。 例如，min-width 表示指定大于等于该值；max-width 表示指定小于等于该值。</p>\n","more":"<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><h3 id=\"包含匹配选择器\"><a href=\"#包含匹配选择器\" class=\"headerlink\" title=\"包含匹配选择器\"></a>包含匹配选择器</h3><p>包含匹配比完全匹配范围更广。只要元素中的属性包含有指定的字符串，元素就使用该样式。其语法是：<code>[attribute*=value]</code>。</p>\n<p>其中 attribute 指的是属性名，value 指的是属性值，包含匹配采用 “ *=” 符号。</p>\n<h3 id=\"首字符匹配选择器\"><a href=\"#首字符匹配选择器\" class=\"headerlink\" title=\"首字符匹配选择器\"></a>首字符匹配选择器</h3><p>首字符匹配就是匹配属性值开头字符，只要开头字符符合匹配，则元素使用该样式。其语法是：<code>[attribute^=value]</code>。</p>\n<p>其中 attribute 指的是属性名，value 指的是属性值，首字符匹配采用“ ^=”符号。</p>\n<h3 id=\"尾字符匹配选择器\"><a href=\"#尾字符匹配选择器\" class=\"headerlink\" title=\"尾字符匹配选择器\"></a>尾字符匹配选择器</h3><p>尾字符匹配跟首字符匹配原理一样。尾字符只匹配结尾的字符串，只要结尾字符串符合匹配，则元素使用该样式。其语法是：<code>[attribute$=value]</code>。其中 attribute 指的是属性名，value 指的是属性值，尾字符匹配采用 “ $=”符号。</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h3><p>before 伪类元素选择器主要的作用是在选择某个元素之前插入内容，一般用于清除浮动。before 选择器的语法是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素标签<span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">\"插入的内容\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如，在 p 元素之前插入“文字”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.before</span>&#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"文字\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h3><p>after 伪类元素选择器和 before 伪类元素选择器原理一样，但 after 是在选择某个元素之后插入内容。after 选择器的语法是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素标签<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"插入的内容\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"first-child\"><a href=\"#first-child\" class=\"headerlink\" title=\"first-child\"></a>first-child</h3><p>指定元素列表中第一个元素的样式。语法：<code>li:first-child</code></p>\n<h3 id=\"last-child\"><a href=\"#last-child\" class=\"headerlink\" title=\"last-child\"></a>last-child</h3><p>和 first-child 是同类型的选择器。last-child 指定元素列表中最后一个元素的样式。语法：<code>li:last-child</code></p>\n<h3 id=\"nth-child-和-nth-last-child\"><a href=\"#nth-child-和-nth-last-child\" class=\"headerlink\" title=\"nth-child 和 nth-last-child\"></a>nth-child 和 nth-last-child</h3><p>指定某个元素的样式或从后数起某个元素的样式。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><h3 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h3><blockquote>\n<p>box-shadow: <code>&lt;length&gt; &lt;length&gt; &lt;length&gt;</code> || color</p>\n</blockquote>\n<p>第一个 length 值是阴影水平偏移值；第二个 length 值是阴影垂直偏移值；第三个 length 值是阴影模糊值。水平和垂直偏移值都可取正负值。</p>\n<p>基于 Webkit 的 Chrome 和 Safari 等浏览器：-webkit-box-shadow</p>\n<p>Firebox 浏览器：-moz-box-shadow</p>\n<h3 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h3><blockquote>\n<p>text-shadow: <code>&lt;length&gt; &lt;length&gt; &lt;length&gt;</code> || color</p>\n</blockquote>\n<p>第一个 length 值是阴影水平偏移值；第二个 length 值是阴影垂直偏移值；第三个 length 值是阴影模糊值。水平和垂直偏移值都可取正负值。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"background-size\"><a href=\"#background-size\" class=\"headerlink\" title=\"background-size**\"></a>background-size**</h3><p>背景图像的大小</p>\n<h3 id=\"background-clip\"><a href=\"#background-clip\" class=\"headerlink\" title=\"background-clip\"></a>background-clip</h3><p>背景的裁剪区域</p>\n<blockquote>\n<p>background-clip: border-box | padding-box | content-box | no-clip</p>\n</blockquote>\n<p>其中：</p>\n<ul>\n<li>border-box 是从 border 区域向外裁剪背景；</li>\n<li>padding-box 是从 padding 区域向外裁剪背景；</li>\n<li>content-box 是从内容区域向外裁剪背景；</li>\n<li>no-clip 是从 border 区域向外裁剪背景。</li>\n</ul>\n<h3 id=\"background-origin\"><a href=\"#background-origin\" class=\"headerlink\" title=\"background-origin\"></a>background-origin</h3><p>background-origin 属性是指定 background-position 属性的参考坐标的起始位置。 background-origin 属性有三种值可以选择，border 值指定从边框的左上角坐标开始；content 值指定从内容区域的左上角坐标开始；padding 值指定从 padding 区域开始。</p>\n<h3 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h3><p>可以使用 Webkit 的其中一种特性对背景采用颜色渐变，而非采用图片方式。</p>\n<blockquote>\n<p>-webkit-gradient(<code>&lt;type&gt;, &lt;port&gt;[, &lt;radius&gt;]?,&lt;point&gt; [, &lt;radius&gt;]? [, &lt;stop&gt;]*</code>)</p>\n</blockquote>\n<p>type 类型是指采用渐变类型，如线性渐变 linear 或径向渐变 radial。如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">-webkit-gradient</span>(<span class=\"selector-tag\">linear</span>, 0 0, 0 100%, <span class=\"selector-tag\">form</span>(<span class=\"selector-id\">#FFF</span>), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#000</span>));</span><br></pre></td></tr></table></figure>\n<p>上述代码的含义是定义一个渐变背景色，该渐变色是线性渐变并且是由白色向黑色渐变的。其中前两个 0 表示的是渐变开始 <strong>X</strong> 和 <strong>Y</strong> 坐标位置；0 和 100%表示的是渐变结束 <strong>X</strong> 和 <strong>Y</strong> 坐标位置。</p>\n<h2 id=\"Media-Queries-移动设备样式\"><a href=\"#Media-Queries-移动设备样式\" class=\"headerlink\" title=\"Media Queries 移动设备样式\"></a>Media Queries 移动设备样式</h2><h3 id=\"viewport设置适应移动设备屏幕大小\"><a href=\"#viewport设置适应移动设备屏幕大小\" class=\"headerlink\" title=\"viewport设置适应移动设备屏幕大小\"></a>viewport设置适应移动设备屏幕大小</h3><p>Android Browser 浏览器的默认值是 800 像素；IE 浏览器的默认值是 974 像素；Opera 浏览器的默认值是 850 像素。viewport 虚拟窗口是在 meta 元素中定义的，其主要作用是设置 Web 页面适应移动设备的屏幕大小。 如以下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码中的 content 属性内共定义三种参数。实际上 content 属性允许设置 6 种不同的 参数，分别如下：</p>\n<ul>\n<li>width：指定虚拟窗口的屏幕宽度大小。</li>\n<li>height：指定虚拟窗口的屏幕高度大小。</li>\n<li>initial-scale：指定初始缩放比例。</li>\n<li>maximum-scale：指定允许用户缩放的最大比例。</li>\n<li>minimum-scale：指定允许用户缩放的最小比例。</li>\n<li>user-scalable：指定是否允许手动缩放。</li>\n</ul>\n<h3 id=\"Media-Queries-如何工作\"><a href=\"#Media-Queries-如何工作\" class=\"headerlink\" title=\"Media Queries 如何工作\"></a>Media Queries 如何工作</h3><p>要实现 Media Queries 样式模块，需要在 head 标签内导入一个 CSS 样式文件，例如，下面代码使用 media 属性定义当前屏幕可视区域的宽度最大值是 600 像素时应用该样式文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen and(max-width:600px)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"small.css\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 small.css 样式文件内，需要定义 media 类型的样式，例如： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width:<span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.demo</span>&#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span>; &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样也可以判断当移动设备（如 iPad）的方向发生变化时应用该样式。以下代码是当移动设备处于纵向（portrait）模式下时，应用 portrait 样式文件；当移动设备处于横向（landscape）模式下时，应用 landscape 样式文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all and(orientation:portrait)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"portrait.css\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all and(orientation:landscape)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"landscape.css\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Media-Queries-语法总结\"><a href=\"#Media-Queries-语法总结\" class=\"headerlink\" title=\"Media Queries 语法总结\"></a>Media Queries 语法总结</h3><p>Media Queries 的语法如下所示：</p>\n<blockquote>\n<p>@media [media_query] media_type and media_feature</p>\n</blockquote>\n<p>使用 Media Queries 样式模块时都必须以 “@media” 方式开头。media_query 表示查询关键字，在这里可以使用 not 关键字和 only 关键字。not 关键字表示对后面的样式表达式执行取反操作。例如如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not screen and (max-device-width:<span class=\"number\">480px</span>)</span><br></pre></td></tr></table></figure>\n<p>only 关键字的作用是，让不支持 Media Queries 的设备但能读取 Media Type 类型的浏览器忽略这个样式。例如如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (max-device-width:<span class=\"number\">480px</span>)</span><br></pre></td></tr></table></figure>\n<p>对于支持 Media Queries 的移动设备来说，如果存在 only 关键字，移动设备的 Web 浏览器会忽略 only 关键字并直接根据后面的表达式应用样式文件。对于不支持 Media Queries 的设备但能够读取 Media Type 类型的 Web 浏览器，遇到 only 关键字时会忽略这个样式文件。</p>\n<p>media_type 参数的作用是指定设备类型，通常称为媒体类型。实际上在 CSS2.1 版本时已经定义了该媒体类型。</p>\n<ul>\n<li><strong>all</strong>                 所有设备</li>\n<li><strong>aural</strong>               听觉设备</li>\n<li><strong>braille</strong>             点字触觉设备</li>\n<li><strong>handled</strong>             便携设备，如手机、平板电脑</li>\n<li><strong>print</strong>               打印预览图等</li>\n<li><strong>projection</strong>          投影设备</li>\n<li><strong>screen</strong>              显示器、笔记本、移动端等设备</li>\n<li><strong>tty</strong>                 如打字机或终端等设备</li>\n<li><strong>tv</strong>                  电视机等设备类型</li>\n<li><strong>embossed</strong>            盲文打印机</li>\n</ul>\n<p>media_feature 的主要作用是定义 CSS 中的设备特性，大部分移动设备特性都允许接受 min/max 的前缀。 例如，min-width 表示指定大于等于该值；max-width 表示指定小于等于该值。</p>\n","categories":[{"name":"HTML","path":"api/categories/HTML.json"}],"tags":[{"name":"HTML","path":"api/tags/HTML.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}