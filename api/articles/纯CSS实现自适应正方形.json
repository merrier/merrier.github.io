{"title":"纯CSS实现自适应正方形","slug":"纯CSS实现自适应正方形","date":"2017-05-16T09:00:27.000Z","updated":"2019-02-07T13:01:36.423Z","comments":true,"path":"api/articles/纯CSS实现自适应正方形.json","excerpt":null,"covers":["/images/hexo_post_231.png"],"content":"<p>首先，自适应正方形是指宽度和高度随着屏幕宽度（不管是移动端还是 PC 端）进行等比例变化的正方形，在处理移动端页面时，我们有时会需要将 banner 图做成与屏幕等宽的正方形以获得最佳的体验效果，如 <a href=\"http://flipboard.com/@news/\" target=\"_blank\" rel=\"noopener\">Flipbord的移动页面</a>，而在 PC 端，我们也可能需要实现一个随屏幕宽度变化的正方形，从而达到某些效果；那么应该怎么使用纯 CSS 制作出能够自适应大小的正方形呢？</p>\n<h2 id=\"方案一：CSS3-vw-单位\"><a href=\"#方案一：CSS3-vw-单位\" class=\"headerlink\" title=\"方案一：CSS3 vw 单位\"></a>方案一：CSS3 vw 单位</h2><p>CSS3 中新增了一组相对于可视区域百分比的长度单位 vw, vh, vmin, vmax。其中vw是相对于视口宽度百分比的单位，1vw = 1% viewport width，vh是相对于视口高度百分比的单位，1vh = 1% viewport height；vmin 是相对当前视口宽高中较小的一个的百分比单位，同理 vmax 是相对当前视口宽高中较大的一个的百分比单位。<a href=\"http://caniuse.com/#search=vw\" target=\"_blank\" rel=\"noopener\">该单位浏览器兼容性</a>如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_231.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"placeholder\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：简洁方便 缺点：浏览器兼容不好</p>\n<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#viewwidth\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"方法二：设置垂直方向的-padding-撑开容器\"><a href=\"#方法二：设置垂直方向的-padding-撑开容器\" class=\"headerlink\" title=\"方法二：设置垂直方向的 padding 撑开容器\"></a>方法二：设置垂直方向的 padding 撑开容器</h2><p>在 CSS 盒模型中，一个比较容易被忽略的就是 margin, padding 的百分比数值计算。按照规定，<strong>margin, padding 的百分比数值是相对父元素宽度的宽度计算的</strong>。由此可以发现只需将元素垂直方向的一个 padding 值设定为与 width 相同的百分比就可以制作出自适应正方形了：</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: bottom:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果正方形中没有内容（相当于只是一个几何里面的正方形，并没有展示其他任何内容），一切看起来都很正常；但是，如果正方形中有其他内容（这种情况会更常见一些，比如说有一些文本和图片），此时容器的高度就会被拉伸，因为<a href=\"/20170403/css-box-model.html\">盒子模型</a>中的 padding 是不包含在 content 中的，所以我们可以通过 height:0 解决这个问题；这种方案简洁明了，且兼容性好；但是除了填充内容后会出现问题以外，还有可能碰上<a href=\"https://idiotwu.me/study/responsive-square/#maxheight\" target=\"_blank\" rel=\"noopener\">max-height不收缩</a>，于是第三种方案来了：</p>\n<h2 id=\"方案三：利用伪元素的-margin-padding-top-撑开容器\"><a href=\"#方案三：利用伪元素的-margin-padding-top-撑开容器\" class=\"headerlink\" title=\"方案三：利用伪元素的 margin(padding)-top 撑开容器\"></a>方案三：利用伪元素的 margin(padding)-top 撑开容器</h2><p>在方案二中，我们利用百分比数值的 padding-bottom 属性撑开容器内部空间，但是这样做会导致在元素上设置的 max-height 属性失效；而失效的原因是 <a href=\"http://stackoverflow.com/questions/21750091/max-height-on-border-boxed-div-with-padding-is-not-set\" target=\"_blank\" rel=\"noopener\">max-height 属性只限制于 height</a>，也就是只会对元素的 content height 起作用。那么我们是不是能用一个子元素撑开 content 部分的高度，从而使 max-height 属性生效呢？我们来试试：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.placeholder</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/* margin 百分比相对父元素宽度计算 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一刷新页面，啊嘞？怎么什么也没有？ 这里就涉及到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing\" target=\"_blank\" rel=\"noopener\">margin collapse</a> 的概念了，由于容器与伪元素在垂直方向发生了外边距折叠，所以我们想象中的撑开父元素高度并没有出现。而应对的方法是在父元素上触发 BFC：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现效果-1\"><a href=\"#实现效果-1\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#margin\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是三种制作自适应正方形的方案，除去 CSS3 中的视口相对单位，主要利用到 margin, padding 的百分比数值相对父元素宽度的宽度计算得出来制作宽高相等、且相对视口宽度自适应的正方形。如果需求是制作相对视口高度自适应的正方形，估计就只能使用 vh 单位了吧~</p>\n","more":"<p>首先，自适应正方形是指宽度和高度随着屏幕宽度（不管是移动端还是 PC 端）进行等比例变化的正方形，在处理移动端页面时，我们有时会需要将 banner 图做成与屏幕等宽的正方形以获得最佳的体验效果，如 <a href=\"http://flipboard.com/@news/\" target=\"_blank\" rel=\"noopener\">Flipbord的移动页面</a>，而在 PC 端，我们也可能需要实现一个随屏幕宽度变化的正方形，从而达到某些效果；那么应该怎么使用纯 CSS 制作出能够自适应大小的正方形呢？</p>\n<h2 id=\"方案一：CSS3-vw-单位\"><a href=\"#方案一：CSS3-vw-单位\" class=\"headerlink\" title=\"方案一：CSS3 vw 单位\"></a>方案一：CSS3 vw 单位</h2><p>CSS3 中新增了一组相对于可视区域百分比的长度单位 vw, vh, vmin, vmax。其中vw是相对于视口宽度百分比的单位，1vw = 1% viewport width，vh是相对于视口高度百分比的单位，1vh = 1% viewport height；vmin 是相对当前视口宽高中较小的一个的百分比单位，同理 vmax 是相对当前视口宽高中较大的一个的百分比单位。<a href=\"http://caniuse.com/#search=vw\" target=\"_blank\" rel=\"noopener\">该单位浏览器兼容性</a>如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_231.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"placeholder\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：简洁方便 缺点：浏览器兼容不好</p>\n<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#viewwidth\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"方法二：设置垂直方向的-padding-撑开容器\"><a href=\"#方法二：设置垂直方向的-padding-撑开容器\" class=\"headerlink\" title=\"方法二：设置垂直方向的 padding 撑开容器\"></a>方法二：设置垂直方向的 padding 撑开容器</h2><p>在 CSS 盒模型中，一个比较容易被忽略的就是 margin, padding 的百分比数值计算。按照规定，<strong>margin, padding 的百分比数值是相对父元素宽度的宽度计算的</strong>。由此可以发现只需将元素垂直方向的一个 padding 值设定为与 width 相同的百分比就可以制作出自适应正方形了：</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: bottom:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果正方形中没有内容（相当于只是一个几何里面的正方形，并没有展示其他任何内容），一切看起来都很正常；但是，如果正方形中有其他内容（这种情况会更常见一些，比如说有一些文本和图片），此时容器的高度就会被拉伸，因为<a href=\"/20170403/css-box-model.html\">盒子模型</a>中的 padding 是不包含在 content 中的，所以我们可以通过 height:0 解决这个问题；这种方案简洁明了，且兼容性好；但是除了填充内容后会出现问题以外，还有可能碰上<a href=\"https://idiotwu.me/study/responsive-square/#maxheight\" target=\"_blank\" rel=\"noopener\">max-height不收缩</a>，于是第三种方案来了：</p>\n<h2 id=\"方案三：利用伪元素的-margin-padding-top-撑开容器\"><a href=\"#方案三：利用伪元素的-margin-padding-top-撑开容器\" class=\"headerlink\" title=\"方案三：利用伪元素的 margin(padding)-top 撑开容器\"></a>方案三：利用伪元素的 margin(padding)-top 撑开容器</h2><p>在方案二中，我们利用百分比数值的 padding-bottom 属性撑开容器内部空间，但是这样做会导致在元素上设置的 max-height 属性失效；而失效的原因是 <a href=\"http://stackoverflow.com/questions/21750091/max-height-on-border-boxed-div-with-padding-is-not-set\" target=\"_blank\" rel=\"noopener\">max-height 属性只限制于 height</a>，也就是只会对元素的 content height 起作用。那么我们是不是能用一个子元素撑开 content 部分的高度，从而使 max-height 属性生效呢？我们来试试：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.placeholder</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/* margin 百分比相对父元素宽度计算 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一刷新页面，啊嘞？怎么什么也没有？ 这里就涉及到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing\" target=\"_blank\" rel=\"noopener\">margin collapse</a> 的概念了，由于容器与伪元素在垂直方向发生了外边距折叠，所以我们想象中的撑开父元素高度并没有出现。而应对的方法是在父元素上触发 BFC：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现效果-1\"><a href=\"#实现效果-1\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#margin\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是三种制作自适应正方形的方案，除去 CSS3 中的视口相对单位，主要利用到 margin, padding 的百分比数值相对父元素宽度的宽度计算得出来制作宽高相等、且相对视口宽度自适应的正方形。如果需求是制作相对视口高度自适应的正方形，估计就只能使用 vh 单位了吧~</p>\n","categories":[{"name":"CSS","path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]}