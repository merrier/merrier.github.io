{"title":"jQuery事件：不要再(滥)用return false了","slug":"jQuery事件：不要再(滥)用return false了","date":"2017-08-03T10:25:21.000Z","updated":"2019-11-12T04:57:03.924Z","comments":true,"path":"api/articles/jQuery事件：不要再(滥)用return false了.json","excerpt":null,"covers":null,"content":"<p>无意中在 stackoverflow 上看到一个<a href=\"https://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false\" target=\"_blank\" rel=\"noopener\">关于jQuery中event.preventDefault()和return false的提问</a>，后来从评论中发现一篇<a href=\"https://web.archive.org/web/20160614140933/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\" target=\"_blank\" rel=\"noopener\">关于这个问题的很不错的文章</a>，遂翻译了一下，希望能够帮助大家更好的理解 jQuery 中的 return false；当你刚开始学习 jQuery 中的事件时，也许你首先碰到的知识点就是“取消浏览器的默认行为”这一概念。比如，一个讲 click 的初级教程里可能会有如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a.toggle\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\"#mydiv\"</span>).toggle();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 禁止浏览器访问'#'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面这个方法动态的控制 #mydiv 的显示与隐藏，然后取消了浏览器的默认行为——访问锚标签的 href，这是一个非常简单的例子，同时也让很多前端小白养成了使用 return false 取消浏览器默认行为的习惯。关于取消浏览器事件这一问题，我将从以下两个主题重点讲解：</p>\n<ul>\n<li>使用正确的方法：return false、preventDefault、stopPropagation 和 stopImmediatePropagation</li>\n<li>头部、底部或中间某个位置：我们应该在事件回调函数的哪个位置取消默认行为？</li>\n</ul>\n<h2 id=\"使用正确的方法\"><a href=\"#使用正确的方法\" class=\"headerlink\" title=\"使用正确的方法\"></a>使用正确的方法</h2><p>之所以 return false 被大量滥用，是因为它确实满足了我们的需求——超链接不再跳转，表单也不再提交等等，那么为什么我说好多人都误用了呢？</p>\n<h3 id=\"return-false-到底做了什么\"><a href=\"#return-false-到底做了什么\" class=\"headerlink\" title=\"return false 到底做了什么\"></a>return false 到底做了什么</h3><p>首先，大部分人都没有搞明白的是，jQuery 中的 return false 其实做了下面三件事：</p>\n<ol>\n<li><strong>event.preventDefault();</strong></li>\n<li><strong>event.stopPropagation();</strong></li>\n<li><strong>阻止剩下的代码执行，同时立即返回</strong></li>\n</ol>\n<p>“等一下”。你是不是很惊讶，大部分人用 return false 其实只是为了阻止默认行为，也就是上面的第一件事，另外两件其实根本不需要。上面3件事中，只有 event.preventDefault() 会取消默认行为。除非你真的打算阻止事件冒泡，否则使用 return false 将大大增加你的代码的脆弱性。让我们来看看现实应用中这种滥用是如何产生的： 我们有如下HTML代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">    &lt;h2&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path/to/page\"</span>&gt;</span>My Page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">        Teaser text...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">    &lt;h2&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path/to/other_page\"</span>&gt;</span>My Other Page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">        Teaser text...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>现在我们想实现这样的功能：当用户点击标题链接时，跳转到相应的 div.content 上面，我们可能会写出这样的 jQuery 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">   $(<span class=\"string\">\"div.post h2 a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = $(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">          href = a.attr(<span class=\"string\">'href'</span>), <span class=\"comment\">// \b获取href,</span></span><br><span class=\"line\">          content  = a.parent().next();</span><br><span class=\"line\">      content.load(href + <span class=\"string\">\" #content\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 取消链接跳转这种默认行为</span></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>目前，我们的页面一切正常。然后，我们又想要添加一个功能：当 div.post（或者它的子元素）被点击时，给当前被点击的 div.post 添加一个 “active” 类。所以，我们需要添加一个 click 事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> posts = $(<span class=\"string\">\"div.post\"</span>);</span><br><span class=\"line\">posts.click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    posts.removeClass(<span class=\"string\">\"active\"</span>);  <span class=\"comment\">// \b移除所有div.post的active类</span></span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">\"active\"</span>);  <span class=\"comment\">// 给当前的div.post添加active类</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在测试一下，当我们点击标题链接的时候，它会起作用吗？不会！它不能起作用的原因是我们在点击事件中 return false 了。而 return false 实际上意味着执行了 event.preventDefault() 和 event.stopPropagation()。所以点击事件不会冒泡到 div.post 上，从而我们新添加的事件将不起作用。 当我们将正常绑定的事件和 live 以及 delegate 绑定的事件混用时，它也会出现问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"a\"</span>).live(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的代码将不起作用</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"我们真正想要实现什么？\"><a href=\"#我们真正想要实现什么？\" class=\"headerlink\" title=\"我们真正想要实现什么？\"></a>我们真正想要实现什么？</h3><h4 id=\"preventDefault\"><a href=\"#preventDefault\" class=\"headerlink\" title=\"preventDefault()\"></a>preventDefault()</h4><p>在大多数场景下，当我们使用 return false 的时候，我们真正想要的其实是 e.preventDefault()。使用 preventDefault 的前提是你允许在你的函数中访问事件对象（在后面的例子中以 e 表示事件对象）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// e代表我们的事件对象</span></span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个方法就可以是实现取消默认行为，但是它不能阻止事件冒泡。但是，代码的功能越单一，它的可维护性就更强</p>\n<h4 id=\"stopPropagation\"><a href=\"#stopPropagation\" class=\"headerlink\" title=\"stopPropagation()\"></a>stopPropagation()</h4><p>有些时候我们只是想阻止事件冒泡，比如下面的栗子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    Normal text and then a <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path\"</span>&gt;</span>link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> and then more text.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在，比如我们有一个非常“奇特”的需求：我们想让用户点击 div 中除了链接之外的任何地方都干一件事（可能是重定向到其他页面），然后还想让用户点击链接的时候可以正常跳转（从可用性的角度来看，这是一个非常糟糕的 idea。因为如果用户本意想点击链接却点到了其他地方，接下来发生的事情可能会让用户很吃惊，影响用户体验）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"div.post\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div.post a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里不要取消默认行为</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要阻止事件冒泡</span></span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，如果我们用 return false，那 div 的点击事件将永远不会触发，这样用户就不会被引导到正确的页面。</p>\n<h4 id=\"stopImmediatePropagation\"><a href=\"#stopImmediatePropagation\" class=\"headerlink\" title=\"stopImmediatePropagation()\"></a>stopImmediatePropagation()</h4><p>这个函数将阻止事件的进一步执行，即使是同一对象上绑定的不同事件。因为绑定到一个 dom 元素的所有事件都将按照它们被绑定的顺序执行。下面是一个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"div a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Do something else</span></span><br><span class=\"line\">   e.stopImmediatePropagation();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这里将不会执行</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这里也不会执行</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你认为这个例子看起来太假了，不得不说，是很假。然而，有时候这种情况确实会发生。当你构造更加复杂的代码时，代码结构会变得比较混乱，不同的组件和插件可能会给同一个 dom 元素添加事件。在这种情况下，正确的理解和使用 stopImmediatePropagation() 就显得尤为重要了。</p>\n<h4 id=\"return-false\"><a href=\"#return-false\" class=\"headerlink\" title=\"return false\"></a>return false</h4><p>只有当你同时需要 preventDefault() 和 stopPaopagation() 时，才需要使用 return false。与此同时，你的代码应该保证只有到回调函数的尾部才取消默认行为。我强烈反对您在为 jQuery 小白编写的实例中使用这个 return false。它会误导一些入门开发者，因为只有很清楚它的功能你才能正确的使用它。</p>\n<h2 id=\"头部，底部还是中间的某个地方？\"><a href=\"#头部，底部还是中间的某个地方？\" class=\"headerlink\" title=\"头部，底部还是中间的某个地方？\"></a>头部，底部还是中间的某个地方？</h2><p>之前，当你(滥)用 return false 时，它总是出现在函数的底部，或者至少在某个特定逻辑行的结尾处，因为它会组织后面的代码执行。但是我们有 e.preventDefault，所以我们有了更多选择。e.preventDefault 可以在函数执行过程中的任何时候调用。那么应该把它放在哪里呢？</p>\n<h3 id=\"在开发环境，它应该总是放在第一行\"><a href=\"#在开发环境，它应该总是放在第一行\" class=\"headerlink\" title=\"在开发环境，它应该总是放在第一行\"></a>在开发环境，它应该总是放在第一行</h3><p>对于一个表单，你想做的最后一件事往往是，你希望通过 ajax 的方式将表单提交到另一个网页，同时你尝试在回调函数中调试 JavaScript 产生的 bug</p>\n<h3 id=\"在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾\"><a href=\"#在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾\" class=\"headerlink\" title=\"在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾\"></a>在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾</h3><p>如果你是在一个开发完的页面上添加功能，那么你的链接点击事件或者表单提交事件需要对于不支持 JS 的浏览器的服务器端的反馈。这里的好处在于，与不支持 JS 的浏览器无关，而是你的代码在那些浏览器中会抛出错误。下面有一个示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;&#125;;</span><br><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault(); <span class=\"comment\">// 取消默认行为</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 抛出一个错误，因为my是undefined</span></span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).append(data.my.link);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 链接将不起作用</span></span><br><span class=\"line\">    <span class=\"comment\">// JS的执行将终端，用户将不知所措</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在，让我们看一下同样的问题出现在 preventDefault 放在末尾时候的表现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;&#125;;</span><br><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// \b抛出错误，因为my是undefined</span></span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).append(data.my.link);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 这里将不会执行，此时你的网页将使用“href”</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    e.preventDefault(); <span class=\"comment\">// 取消默认行为</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个例子同样适用于表单提交事件，可以让你有适当的回退选择。所以，千万不要指望你的代码永远都会正确执行。计划好回退方案比盼望着不会报错要好得多！</p>\n<h3 id=\"在生产环境中，如果你的功能只与-JS-有关，请放在第一行\"><a href=\"#在生产环境中，如果你的功能只与-JS-有关，请放在第一行\" class=\"headerlink\" title=\"在生产环境中，如果你的功能只与 JS 有关，请放在第一行\"></a>在生产环境中，如果你的功能只与 JS 有关，请放在第一行</h3><p>它不一定是函数中的第一行，但是它应该在你的程序逻辑中的最开始位置。原因是这样的：如果功能的这一部分一开始是与 JS 相关的，那么回退就不是那么必要了。在这种情况下，回退只是会造成一个随机的“#”出现在 URL 中或者页面跳转的区别。很明显，我们需要做的事提供尽可能多的错误处理方案，从而确保用户不会觉得它们的努力是白费的。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>我希望这篇文章在你对于取消事件进行选择时提供了足够多的信息。记住只有在你真正需要 return false 时采去使用它，同时确保在你的回调函数的正确位置取消了默认行为。程序员的目标就是让你的代码尽可能的灵活，所以不要再用 return false 了！</p>\n","more":"<p>无意中在 stackoverflow 上看到一个<a href=\"https://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false\" target=\"_blank\" rel=\"noopener\">关于jQuery中event.preventDefault()和return false的提问</a>，后来从评论中发现一篇<a href=\"https://web.archive.org/web/20160614140933/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\" target=\"_blank\" rel=\"noopener\">关于这个问题的很不错的文章</a>，遂翻译了一下，希望能够帮助大家更好的理解 jQuery 中的 return false；当你刚开始学习 jQuery 中的事件时，也许你首先碰到的知识点就是“取消浏览器的默认行为”这一概念。比如，一个讲 click 的初级教程里可能会有如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a.toggle\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\"#mydiv\"</span>).toggle();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 禁止浏览器访问'#'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面这个方法动态的控制 #mydiv 的显示与隐藏，然后取消了浏览器的默认行为——访问锚标签的 href，这是一个非常简单的例子，同时也让很多前端小白养成了使用 return false 取消浏览器默认行为的习惯。关于取消浏览器事件这一问题，我将从以下两个主题重点讲解：</p>\n<ul>\n<li>使用正确的方法：return false、preventDefault、stopPropagation 和 stopImmediatePropagation</li>\n<li>头部、底部或中间某个位置：我们应该在事件回调函数的哪个位置取消默认行为？</li>\n</ul>\n<h2 id=\"使用正确的方法\"><a href=\"#使用正确的方法\" class=\"headerlink\" title=\"使用正确的方法\"></a>使用正确的方法</h2><p>之所以 return false 被大量滥用，是因为它确实满足了我们的需求——超链接不再跳转，表单也不再提交等等，那么为什么我说好多人都误用了呢？</p>\n<h3 id=\"return-false-到底做了什么\"><a href=\"#return-false-到底做了什么\" class=\"headerlink\" title=\"return false 到底做了什么\"></a>return false 到底做了什么</h3><p>首先，大部分人都没有搞明白的是，jQuery 中的 return false 其实做了下面三件事：</p>\n<ol>\n<li><strong>event.preventDefault();</strong></li>\n<li><strong>event.stopPropagation();</strong></li>\n<li><strong>阻止剩下的代码执行，同时立即返回</strong></li>\n</ol>\n<p>“等一下”。你是不是很惊讶，大部分人用 return false 其实只是为了阻止默认行为，也就是上面的第一件事，另外两件其实根本不需要。上面3件事中，只有 event.preventDefault() 会取消默认行为。除非你真的打算阻止事件冒泡，否则使用 return false 将大大增加你的代码的脆弱性。让我们来看看现实应用中这种滥用是如何产生的： 我们有如下HTML代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">    &lt;h2&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path/to/page\"</span>&gt;</span>My Page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">        Teaser text...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">    &lt;h2&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path/to/other_page\"</span>&gt;</span>My Other Page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">        Teaser text...</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>现在我们想实现这样的功能：当用户点击标题链接时，跳转到相应的 div.content 上面，我们可能会写出这样的 jQuery 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">   $(<span class=\"string\">\"div.post h2 a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = $(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">          href = a.attr(<span class=\"string\">'href'</span>), <span class=\"comment\">// \b获取href,</span></span><br><span class=\"line\">          content  = a.parent().next();</span><br><span class=\"line\">      content.load(href + <span class=\"string\">\" #content\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 取消链接跳转这种默认行为</span></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>目前，我们的页面一切正常。然后，我们又想要添加一个功能：当 div.post（或者它的子元素）被点击时，给当前被点击的 div.post 添加一个 “active” 类。所以，我们需要添加一个 click 事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> posts = $(<span class=\"string\">\"div.post\"</span>);</span><br><span class=\"line\">posts.click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    posts.removeClass(<span class=\"string\">\"active\"</span>);  <span class=\"comment\">// \b移除所有div.post的active类</span></span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">\"active\"</span>);  <span class=\"comment\">// 给当前的div.post添加active类</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在测试一下，当我们点击标题链接的时候，它会起作用吗？不会！它不能起作用的原因是我们在点击事件中 return false 了。而 return false 实际上意味着执行了 event.preventDefault() 和 event.stopPropagation()。所以点击事件不会冒泡到 div.post 上，从而我们新添加的事件将不起作用。 当我们将正常绑定的事件和 live 以及 delegate 绑定的事件混用时，它也会出现问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"a\"</span>).live(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的代码将不起作用</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"我们真正想要实现什么？\"><a href=\"#我们真正想要实现什么？\" class=\"headerlink\" title=\"我们真正想要实现什么？\"></a>我们真正想要实现什么？</h3><h4 id=\"preventDefault\"><a href=\"#preventDefault\" class=\"headerlink\" title=\"preventDefault()\"></a>preventDefault()</h4><p>在大多数场景下，当我们使用 return false 的时候，我们真正想要的其实是 e.preventDefault()。使用 preventDefault 的前提是你允许在你的函数中访问事件对象（在后面的例子中以 e 表示事件对象）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// e代表我们的事件对象</span></span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个方法就可以是实现取消默认行为，但是它不能阻止事件冒泡。但是，代码的功能越单一，它的可维护性就更强</p>\n<h4 id=\"stopPropagation\"><a href=\"#stopPropagation\" class=\"headerlink\" title=\"stopPropagation()\"></a>stopPropagation()</h4><p>有些时候我们只是想阻止事件冒泡，比如下面的栗子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    Normal text and then a <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/path\"</span>&gt;</span>link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> and then more text.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在，比如我们有一个非常“奇特”的需求：我们想让用户点击 div 中除了链接之外的任何地方都干一件事（可能是重定向到其他页面），然后还想让用户点击链接的时候可以正常跳转（从可用性的角度来看，这是一个非常糟糕的 idea。因为如果用户本意想点击链接却点到了其他地方，接下来发生的事情可能会让用户很吃惊，影响用户体验）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"div.post\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div.post a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里不要取消默认行为</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要阻止事件冒泡</span></span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，如果我们用 return false，那 div 的点击事件将永远不会触发，这样用户就不会被引导到正确的页面。</p>\n<h4 id=\"stopImmediatePropagation\"><a href=\"#stopImmediatePropagation\" class=\"headerlink\" title=\"stopImmediatePropagation()\"></a>stopImmediatePropagation()</h4><p>这个函数将阻止事件的进一步执行，即使是同一对象上绑定的不同事件。因为绑定到一个 dom 元素的所有事件都将按照它们被绑定的顺序执行。下面是一个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"div a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Do something else</span></span><br><span class=\"line\">   e.stopImmediatePropagation();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这里将不会执行</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这里也不会执行</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你认为这个例子看起来太假了，不得不说，是很假。然而，有时候这种情况确实会发生。当你构造更加复杂的代码时，代码结构会变得比较混乱，不同的组件和插件可能会给同一个 dom 元素添加事件。在这种情况下，正确的理解和使用 stopImmediatePropagation() 就显得尤为重要了。</p>\n<h4 id=\"return-false\"><a href=\"#return-false\" class=\"headerlink\" title=\"return false\"></a>return false</h4><p>只有当你同时需要 preventDefault() 和 stopPaopagation() 时，才需要使用 return false。与此同时，你的代码应该保证只有到回调函数的尾部才取消默认行为。我强烈反对您在为 jQuery 小白编写的实例中使用这个 return false。它会误导一些入门开发者，因为只有很清楚它的功能你才能正确的使用它。</p>\n<h2 id=\"头部，底部还是中间的某个地方？\"><a href=\"#头部，底部还是中间的某个地方？\" class=\"headerlink\" title=\"头部，底部还是中间的某个地方？\"></a>头部，底部还是中间的某个地方？</h2><p>之前，当你(滥)用 return false 时，它总是出现在函数的底部，或者至少在某个特定逻辑行的结尾处，因为它会组织后面的代码执行。但是我们有 e.preventDefault，所以我们有了更多选择。e.preventDefault 可以在函数执行过程中的任何时候调用。那么应该把它放在哪里呢？</p>\n<h3 id=\"在开发环境，它应该总是放在第一行\"><a href=\"#在开发环境，它应该总是放在第一行\" class=\"headerlink\" title=\"在开发环境，它应该总是放在第一行\"></a>在开发环境，它应该总是放在第一行</h3><p>对于一个表单，你想做的最后一件事往往是，你希望通过 ajax 的方式将表单提交到另一个网页，同时你尝试在回调函数中调试 JavaScript 产生的 bug</p>\n<h3 id=\"在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾\"><a href=\"#在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾\" class=\"headerlink\" title=\"在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾\"></a>在生产环境，如果还有其他功能待开发，请将它放在回调函数的底部或者执行过程的末尾</h3><p>如果你是在一个开发完的页面上添加功能，那么你的链接点击事件或者表单提交事件需要对于不支持 JS 的浏览器的服务器端的反馈。这里的好处在于，与不支持 JS 的浏览器无关，而是你的代码在那些浏览器中会抛出错误。下面有一个示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;&#125;;</span><br><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault(); <span class=\"comment\">// 取消默认行为</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 抛出一个错误，因为my是undefined</span></span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).append(data.my.link);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 链接将不起作用</span></span><br><span class=\"line\">    <span class=\"comment\">// JS的执行将终端，用户将不知所措</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在，让我们看一下同样的问题出现在 preventDefault 放在末尾时候的表现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;&#125;;</span><br><span class=\"line\">$(<span class=\"string\">\"a\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// \b抛出错误，因为my是undefined</span></span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).append(data.my.link);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 这里将不会执行，此时你的网页将使用“href”</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    e.preventDefault(); <span class=\"comment\">// 取消默认行为</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个例子同样适用于表单提交事件，可以让你有适当的回退选择。所以，千万不要指望你的代码永远都会正确执行。计划好回退方案比盼望着不会报错要好得多！</p>\n<h3 id=\"在生产环境中，如果你的功能只与-JS-有关，请放在第一行\"><a href=\"#在生产环境中，如果你的功能只与-JS-有关，请放在第一行\" class=\"headerlink\" title=\"在生产环境中，如果你的功能只与 JS 有关，请放在第一行\"></a>在生产环境中，如果你的功能只与 JS 有关，请放在第一行</h3><p>它不一定是函数中的第一行，但是它应该在你的程序逻辑中的最开始位置。原因是这样的：如果功能的这一部分一开始是与 JS 相关的，那么回退就不是那么必要了。在这种情况下，回退只是会造成一个随机的“#”出现在 URL 中或者页面跳转的区别。很明显，我们需要做的事提供尽可能多的错误处理方案，从而确保用户不会觉得它们的努力是白费的。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>我希望这篇文章在你对于取消事件进行选择时提供了足够多的信息。记住只有在你真正需要 return false 时采去使用它，同时确保在你的回调函数的正确位置取消了默认行为。程序员的目标就是让你的代码尽可能的灵活，所以不要再用 return false 了！</p>\n","categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"stackoverflow","path":"api/tags/stackoverflow.json"},{"name":"jQuery","path":"api/tags/jQuery.json"}]}