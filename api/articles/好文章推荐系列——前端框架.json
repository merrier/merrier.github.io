{"title":"好文章推荐系列——前端框架","slug":"好文章推荐系列——前端框架","date":"2017-08-07T08:29:18.000Z","updated":"2021-02-01T03:27:26.994Z","comments":true,"path":"api/articles/好文章推荐系列——前端框架.json","excerpt":null,"covers":null,"content":"<h3 id=\"关于ref的一切\"><a href=\"#关于ref的一切\" class=\"headerlink\" title=\"关于ref的一切\"></a><a href=\"https://mp.weixin.qq.com/s/hYLlE_gfYrLkZebT7f6rwA\" target=\"_blank\" rel=\"noopener\">关于ref的一切</a></h3><p>作为React开发者，你能回答如下几个问题么？</p>\n<ol>\n<li>为什么string类型的ref prop将会被废弃？</li>\n<li>function类型的ref prop会在什么时机被调用？</li>\n<li>React.createRef与useRef的返回值有什么不同？</li>\n</ol>\n<p>其实，这三个问题中的ref包含两个不同概念：</p>\n<ol>\n<li><p>不管是string、function类型或是React.createRef、useRef创建的ref，都是作为数据结构看待</p>\n</li>\n<li><p>问题2探讨的时机是将ref作为生命周期看待</p>\n</li>\n</ol>\n<p>该文会分别从数据结构、生命周期两个角度探讨ref。这，就是关于ref的一切。作者还写了关于 React 的其他文章共十篇：<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0MDg4NDY2Mg==&amp;action=getalbum&amp;album_id=1497862391320068101&amp;scene=173#wechat_redirect\" target=\"_blank\" rel=\"noopener\">#关于React的一切</a></p>\n<h3 id=\"为什么Vue3-0不再使用defineProperty实现数据监听？\"><a href=\"#为什么Vue3-0不再使用defineProperty实现数据监听？\" class=\"headerlink\" title=\"为什么Vue3.0不再使用defineProperty实现数据监听？\"></a><a href=\"https://www.infoq.cn/article/sPCMAcrdAZQfmLbGJeGr\" target=\"_blank\" rel=\"noopener\">为什么Vue3.0不再使用defineProperty实现数据监听？</a></h3><p>Vue 3.0 中，响应式数据部分弃用了 Object.defineProperty，使用Proxy来代替它。本文将主要通过以下方面来分析为什么 Vue 选择弃用 Object.defineProperty。</p>\n<ol>\n<li>Object.defineProperty 真的无法监测数组下标的变化吗？</li>\n<li>分析 Vue2.x 中对数组 Observe 部分源码。</li>\n<li>对比Object.defineProperty和 Proxy。</li>\n</ol>\n<h3 id=\"从-IIFE-聊到-Babel-带你深入了解前端模块化发展体系\"><a href=\"#从-IIFE-聊到-Babel-带你深入了解前端模块化发展体系\" class=\"headerlink\" title=\"从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系\"></a><a href=\"https://juejin.im/post/5cb9e563f265da03712999e8\" target=\"_blank\" rel=\"noopener\">从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系</a></h3><p>作者从十年前的 IIFE 开始介绍，一步步分析与介绍了前端模块化的演进与发展，文章很长，信息量很大。</p>\n<h3 id=\"这几个概念你可能还是没搞清require、import和export\"><a href=\"#这几个概念你可能还是没搞清require、import和export\" class=\"headerlink\" title=\"这几个概念你可能还是没搞清require、import和export\"></a><a href=\"https://juejin.im/post/5ccf98eae51d453a4a357e4a\" target=\"_blank\" rel=\"noopener\">这几个概念你可能还是没搞清require、import和export</a></h3><p>作者从一开始的 Function 到后来的对象写法再到后来的闭包写法，介绍了模块写法的演进历程，同时还介绍了CommonJS规范、AMD规范、CMD规范和AMD与CMD的区别</p>\n<h3 id=\"useEffect-完整指南\"><a href=\"#useEffect-完整指南\" class=\"headerlink\" title=\"useEffect 完整指南\"></a><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener\">useEffect 完整指南</a></h3><p>该文篇幅较长，深入讲解了 React Hook 中的 useEffect，看完后可以帮你明白下面几个问题的答案：</p>\n<ol>\n<li>🤔 如何用useEffect模拟componentDidMount生命周期？</li>\n<li>🤔 如何正确地在useEffect里请求数据？[]又是什么？</li>\n<li>🤔 我应该把函数当做effect的依赖吗？</li>\n<li>🤔 为什么有时候会出现无限重复请求的问题？</li>\n<li>🤔 为什么有时候在effect里拿到的是旧的state或prop？</li>\n</ol>\n<h3 id=\"前端构建秘籍\"><a href=\"#前端构建秘籍\" class=\"headerlink\" title=\"前端构建秘籍\"></a><a href=\"https://juejin.im/post/5c9075305188252d5c743520\" target=\"_blank\" rel=\"noopener\">前端构建秘籍</a></h3><p>你对 webpack 了解多少？如何针对业务集成最佳配置？如何优化开发体验？如何开足马力，实现极速的 webpack 的构建性能 🚀？又会有哪些坑 💣？该文带你解答这些问题</p>\n<h3 id=\"import、require、export、module-exports-混合使用详解\"><a href=\"#import、require、export、module-exports-混合使用详解\" class=\"headerlink\" title=\"import、require、export、module.exports 混合使用详解\"></a><a href=\"https://juejin.im/post/5a2e5f0851882575d42f5609\" target=\"_blank\" rel=\"noopener\">import、require、export、module.exports 混合使用详解</a></h3><p>该文通过以下几个问题进行展开，详细介绍了模块化相关规范以及 webpack 和 babel 在这其中起到的作用：</p>\n<ol>\n<li>为何有的地方使用 require 去引用一个模块时需要加上 default？ require(‘xx’).default</li>\n<li>经常在各大UI组件引用的文档上会看到说明 import { button } from ‘xx-ui’ 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 babel-plugin-component？</li>\n<li>为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？</li>\n<li>我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 element-ui 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？</li>\n<li>babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？</li>\n<li>听说 es6 还有 tree-shaking 功能，怎么才能使用这个功能？</li>\n</ol>\n<h3 id=\"基于-webpack-的持久化缓存方案\"><a href=\"#基于-webpack-的持久化缓存方案\" class=\"headerlink\" title=\"基于 webpack 的持久化缓存方案\"></a><a href=\"https://github.com/pigcan/blog/issues/9\" target=\"_blank\" rel=\"noopener\">基于 webpack 的持久化缓存方案</a></h3><p>如何基于 webpack 做持久化缓存似乎一直处于没有最佳实践的状态。作为开发者最大的诉求是：在 entry 内部内容未发生变更的情况下构建之后也能稳定不变。而 pigcan 的这篇文章通过具体的场景层层深入，带你逐步揭晓 webpack 持久化缓存的实现方案</p>\n<h3 id=\"让虚拟DOM和DOM-diff不再成为你的绊脚石\"><a href=\"#让虚拟DOM和DOM-diff不再成为你的绊脚石\" class=\"headerlink\" title=\"让虚拟DOM和DOM-diff不再成为你的绊脚石\"></a><a href=\"https://juejin.im/post/5c8e5e4951882545c109ae9c\" target=\"_blank\" rel=\"noopener\">让虚拟DOM和DOM-diff不再成为你的绊脚石</a></h3><p>作者通过实际代码一步步地对虚拟 DOM 实现和 Diff 算法进行了讲解和实现，讲解的很清楚，逻辑很清晰</p>\n<h3 id=\"为什么顺序调用对-React-Hooks-很重要？\"><a href=\"#为什么顺序调用对-React-Hooks-很重要？\" class=\"headerlink\" title=\"为什么顺序调用对 React Hooks 很重要？\"></a><a href=\"https://overreacted.io/zh-hans/why-do-hooks-rely-on-call-order/\" target=\"_blank\" rel=\"noopener\">为什么顺序调用对 React Hooks 很重要？</a></h3><p>同事推荐，对 React Hooks 讲解的很清楚，而且非常贴心的把评论神马的都翻译成了中文</p>\n<h3 id=\"react-组件的生命周期\"><a href=\"#react-组件的生命周期\" class=\"headerlink\" title=\"react 组件的生命周期\"></a><a href=\"https://segmentfault.com/a/1190000003691119\" target=\"_blank\" rel=\"noopener\">react 组件的生命周期</a></h3><p>作者详细介绍了和 react 生命周期的一些函数执行时机以及它们的作用，通过实例的方式进行了讲解，个人感觉讲解的非常清晰</p>\n<h3 id=\"Gulp-和-Webpack-对比\"><a href=\"#Gulp-和-Webpack-对比\" class=\"headerlink\" title=\"Gulp 和 Webpack 对比\"></a><a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"noopener\">Gulp 和 Webpack 对比</a></h3><p>作者通过实际的代码对比了 gulp 和 webpack 在功能、原理以及模块化方面的优缺点</p>\n<h3 id=\"webpack-常用插件及其作用\"><a href=\"#webpack-常用插件及其作用\" class=\"headerlink\" title=\"webpack 常用插件及其作用\"></a><a href=\"http://www.monster1935.site/blog/2017/08/24/webpack%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">webpack 常用插件及其作用</a></h3><p>介绍了 webpack 经常用到的一些插件和它们的作用，美中不足的是没有具体代码以及介绍的插件有点少</p>\n<h3 id=\"webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\"><a href=\"#webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\" class=\"headerlink\" title=\"webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别\"></a><a href=\"http://www.monster1935.site/blog/2017/09/07/webpack%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-npm%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8Cwebpack%E4%B8%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%85%A5webpack%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8C%BA%E5%88%AB/\" target=\"_blank\" rel=\"noopener\">webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别</a></h3><p>虽然是一个小知识点，不过作者读源码的精神可嘉</p>\n<h3 id=\"webpack-收藏集-掘金\"><a href=\"#webpack-收藏集-掘金\" class=\"headerlink\" title=\"webpack - 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000009435832\" target=\"_blank\" rel=\"noopener\">webpack - 收藏集 - 掘金</a></h3><p>掘金上面的 webpack 相关文章，webpack 本身实在太复杂，还是需要一些文章差补缺漏的</p>\n<h3 id=\"Vue-js——60分钟快速入门\"><a href=\"#Vue-js——60分钟快速入门\" class=\"headerlink\" title=\"Vue.js——60分钟快速入门\"></a><a href=\"http://www.cnblogs.com/keepfool/p/5619070.html\" target=\"_blank\" rel=\"noopener\">Vue.js——60分钟快速入门</a></h3><p>vue 入门教程，还有另外两篇文章，文章最后有链接，个人认为是目前为止看到的最舒服的 vue 入门教程，排版配色都很不错</p>\n<h3 id=\"深入到源码：解读-redux-的设计思路与用法\"><a href=\"#深入到源码：解读-redux-的设计思路与用法\" class=\"headerlink\" title=\"深入到源码：解读 redux 的设计思路与用法\"></a><a href=\"https://github.com/Lucifier129/Lucifier129.github.io/issues/9\" target=\"_blank\" rel=\"noopener\">深入到源码：解读 redux 的设计思路与用法</a></h3><p>一直都没搞明白 redux，后来看了这篇文章，讲的很详细，而且讲解了一部分源码，推荐！（下面一段话取自该文章） 组织 <code>redux</code> 的流程莫过于：</p>\n<ul>\n<li>设计全局 state 的数据结构</li>\n<li>设计更改 state 数据的 actionTypes 常量以及其他跟视图展现相关的 actionTypes 常量</li>\n<li>根据 actionTypes 常量，书写 actionCreator 。</li>\n<li>根据各个 actionCreator 的返回值，涉及 reducer 做数据的最后处理</li>\n<li>在有了 reducer 函数之后，createStore(reducer, initState) 得到 store 对象</li>\n<li>用 bindActionCreators 函数将 actionCreators 和 store.dispatch 绑定起来，得到一组能修改全局状态的函数</li>\n<li>分发各个状态修改函数到各个 DOM 事件中。</li>\n</ul>\n<h3 id=\"Vue-生命周期深入\"><a href=\"#Vue-生命周期深入\" class=\"headerlink\" title=\"Vue 生命周期深入\"></a><a href=\"https://segmentfault.com/a/1190000014705819\" target=\"_blank\" rel=\"noopener\">Vue 生命周期深入</a></h3><p>这篇博客会从下面四个常见的应用诠释了组件的生命周期，以及各个生命周期应该干什么事，博主写的很不错，直观易懂，很适合接触 vue 不深的童鞋。</p>\n<ol>\n<li>单组件的生命周期</li>\n<li>父子组件的生命周期</li>\n<li>兄弟组件的生命周期</li>\n<li>宏 mixin 的生命周期</li>\n</ol>\n<h3 id=\"2019-年-Vue-学习路线图\"><a href=\"#2019-年-Vue-学习路线图\" class=\"headerlink\" title=\"2019 年 Vue 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/jGmJndL-oK3i5lYLiQROIg\" target=\"_blank\" rel=\"noopener\">2019 年 Vue 学习路线图</a></h3><p>作者我将在这篇文章中展示了一个高级“知识地图”，它包含了与 Vue 开发相关的关键领域，你可以使用这张地图作为 2019 年学习 Vue 的图鉴。英文原文：<a href=\"https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/\" target=\"_blank\" rel=\"noopener\">https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/</a></p>\n<h3 id=\"一口-很长的-气了解-babel\"><a href=\"#一口-很长的-气了解-babel\" class=\"headerlink\" title=\"一口(很长的)气了解 babel\"></a><a href=\"https://juejin.im/post/5c19c5e0e51d4502a232c1c6\" target=\"_blank\" rel=\"noopener\">一口(很长的)气了解 babel</a></h3><p>作者详细介绍了 babel 究竟是做什么的，以及 babel 的一些配套工具的作用，同时还介绍了如何争取地进行配置和使用 babel。</p>\n<h3 id=\"Which-of-the-635000-npm-modules-do-I-choose\"><a href=\"#Which-of-the-635000-npm-modules-do-I-choose\" class=\"headerlink\" title=\"Which of the 635000 npm modules do I choose?\"></a><a href=\"https://www.coreycleary.me/which-of-the-635000-npm-modules-do-i-choose/\" target=\"_blank\" rel=\"noopener\">Which of the 635000 npm modules do I choose?</a></h3><p>npm 现在已经有 60 多万个库，如何在如此繁杂的 module 中选择合适自己的感觉是件难事，而作者就基于此对一些比较大型使用比较多的库进行了横向比较，会对你在技术上的选择起到帮助作用。</p>\n<h3 id=\"2019-年-React-学习路线图\"><a href=\"#2019-年-React-学习路线图\" class=\"headerlink\" title=\"2019 年 React 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/PWSeeqDwu8QOcamlo_FJrA\" target=\"_blank\" rel=\"noopener\">2019 年 React 学习路线图</a></h3><p>和上面的 Vue 学习路线图类似，建议搭配食用，英文原文：<a href=\"https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02\" target=\"_blank\" rel=\"noopener\">https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02</a></p>\n<h3 id=\"细说-webpack-之流程篇\"><a href=\"#细说-webpack-之流程篇\" class=\"headerlink\" title=\"细说 webpack 之流程篇\"></a><a href=\"http://taobaofed.org/blog/2016/09/09/webpack-flow/\" target=\"_blank\" rel=\"noopener\">细说 webpack 之流程篇</a></h3><p>淘宝 FED 这篇博客，对 webpack 的整体流程梳理的非常清晰，以及 webpack 的基础架构讲解的很细致，对 compiler 和 complation 对象也做了很细致的剖析。</p>\n<h3 id=\"React-是怎样炼成的\"><a href=\"#React-是怎样炼成的\" class=\"headerlink\" title=\"React 是怎样炼成的\"></a><a href=\"https://segmentfault.com/a/1190000013365426\" target=\"_blank\" rel=\"noopener\">React 是怎样炼成的</a></h3><p>文章主要讲述 React 的诞生过程和优化思路。内容整理自 2014 年的 <a href=\"https://speakerdeck.com/vjeux/oscon-react-architecture\" target=\"_blank\" rel=\"noopener\">OSCON - React Architecture by vjeux</a>，虽然从今天来看可能会有点历史感，但仍然值得学习了解。以史为鉴，从中也可以管窥 Facebook 优秀的工程管理文化。</p>\n","more":"<h3 id=\"关于ref的一切\"><a href=\"#关于ref的一切\" class=\"headerlink\" title=\"关于ref的一切\"></a><a href=\"https://mp.weixin.qq.com/s/hYLlE_gfYrLkZebT7f6rwA\" target=\"_blank\" rel=\"noopener\">关于ref的一切</a></h3><p>作为React开发者，你能回答如下几个问题么？</p>\n<ol>\n<li>为什么string类型的ref prop将会被废弃？</li>\n<li>function类型的ref prop会在什么时机被调用？</li>\n<li>React.createRef与useRef的返回值有什么不同？</li>\n</ol>\n<p>其实，这三个问题中的ref包含两个不同概念：</p>\n<ol>\n<li><p>不管是string、function类型或是React.createRef、useRef创建的ref，都是作为数据结构看待</p>\n</li>\n<li><p>问题2探讨的时机是将ref作为生命周期看待</p>\n</li>\n</ol>\n<p>该文会分别从数据结构、生命周期两个角度探讨ref。这，就是关于ref的一切。作者还写了关于 React 的其他文章共十篇：<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0MDg4NDY2Mg==&amp;action=getalbum&amp;album_id=1497862391320068101&amp;scene=173#wechat_redirect\" target=\"_blank\" rel=\"noopener\">#关于React的一切</a></p>\n<h3 id=\"为什么Vue3-0不再使用defineProperty实现数据监听？\"><a href=\"#为什么Vue3-0不再使用defineProperty实现数据监听？\" class=\"headerlink\" title=\"为什么Vue3.0不再使用defineProperty实现数据监听？\"></a><a href=\"https://www.infoq.cn/article/sPCMAcrdAZQfmLbGJeGr\" target=\"_blank\" rel=\"noopener\">为什么Vue3.0不再使用defineProperty实现数据监听？</a></h3><p>Vue 3.0 中，响应式数据部分弃用了 Object.defineProperty，使用Proxy来代替它。本文将主要通过以下方面来分析为什么 Vue 选择弃用 Object.defineProperty。</p>\n<ol>\n<li>Object.defineProperty 真的无法监测数组下标的变化吗？</li>\n<li>分析 Vue2.x 中对数组 Observe 部分源码。</li>\n<li>对比Object.defineProperty和 Proxy。</li>\n</ol>\n<h3 id=\"从-IIFE-聊到-Babel-带你深入了解前端模块化发展体系\"><a href=\"#从-IIFE-聊到-Babel-带你深入了解前端模块化发展体系\" class=\"headerlink\" title=\"从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系\"></a><a href=\"https://juejin.im/post/5cb9e563f265da03712999e8\" target=\"_blank\" rel=\"noopener\">从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系</a></h3><p>作者从十年前的 IIFE 开始介绍，一步步分析与介绍了前端模块化的演进与发展，文章很长，信息量很大。</p>\n<h3 id=\"这几个概念你可能还是没搞清require、import和export\"><a href=\"#这几个概念你可能还是没搞清require、import和export\" class=\"headerlink\" title=\"这几个概念你可能还是没搞清require、import和export\"></a><a href=\"https://juejin.im/post/5ccf98eae51d453a4a357e4a\" target=\"_blank\" rel=\"noopener\">这几个概念你可能还是没搞清require、import和export</a></h3><p>作者从一开始的 Function 到后来的对象写法再到后来的闭包写法，介绍了模块写法的演进历程，同时还介绍了CommonJS规范、AMD规范、CMD规范和AMD与CMD的区别</p>\n<h3 id=\"useEffect-完整指南\"><a href=\"#useEffect-完整指南\" class=\"headerlink\" title=\"useEffect 完整指南\"></a><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener\">useEffect 完整指南</a></h3><p>该文篇幅较长，深入讲解了 React Hook 中的 useEffect，看完后可以帮你明白下面几个问题的答案：</p>\n<ol>\n<li>🤔 如何用useEffect模拟componentDidMount生命周期？</li>\n<li>🤔 如何正确地在useEffect里请求数据？[]又是什么？</li>\n<li>🤔 我应该把函数当做effect的依赖吗？</li>\n<li>🤔 为什么有时候会出现无限重复请求的问题？</li>\n<li>🤔 为什么有时候在effect里拿到的是旧的state或prop？</li>\n</ol>\n<h3 id=\"前端构建秘籍\"><a href=\"#前端构建秘籍\" class=\"headerlink\" title=\"前端构建秘籍\"></a><a href=\"https://juejin.im/post/5c9075305188252d5c743520\" target=\"_blank\" rel=\"noopener\">前端构建秘籍</a></h3><p>你对 webpack 了解多少？如何针对业务集成最佳配置？如何优化开发体验？如何开足马力，实现极速的 webpack 的构建性能 🚀？又会有哪些坑 💣？该文带你解答这些问题</p>\n<h3 id=\"import、require、export、module-exports-混合使用详解\"><a href=\"#import、require、export、module-exports-混合使用详解\" class=\"headerlink\" title=\"import、require、export、module.exports 混合使用详解\"></a><a href=\"https://juejin.im/post/5a2e5f0851882575d42f5609\" target=\"_blank\" rel=\"noopener\">import、require、export、module.exports 混合使用详解</a></h3><p>该文通过以下几个问题进行展开，详细介绍了模块化相关规范以及 webpack 和 babel 在这其中起到的作用：</p>\n<ol>\n<li>为何有的地方使用 require 去引用一个模块时需要加上 default？ require(‘xx’).default</li>\n<li>经常在各大UI组件引用的文档上会看到说明 import { button } from ‘xx-ui’ 这样会引入所有组件内容，需要添加额外的 babel 配置，比如 babel-plugin-component？</li>\n<li>为什么可以使用 es6 的 import 去引用 commonjs 规范定义的模块，或者反过来也可以又是为什么？</li>\n<li>我们在浏览一些 npm 下载下来的 UI 组件模块时（比如说 element-ui 的 lib 文件下），看到的都是 webpack 编译好的 js 文件，可以使用 import 或 require 再去引用。但是我们平时编译好的 js 是无法再被其他模块 import 的，这是为什么？</li>\n<li>babel 在模块化的场景中充当了什么角色？以及 webpack ？哪个启到了关键作用？</li>\n<li>听说 es6 还有 tree-shaking 功能，怎么才能使用这个功能？</li>\n</ol>\n<h3 id=\"基于-webpack-的持久化缓存方案\"><a href=\"#基于-webpack-的持久化缓存方案\" class=\"headerlink\" title=\"基于 webpack 的持久化缓存方案\"></a><a href=\"https://github.com/pigcan/blog/issues/9\" target=\"_blank\" rel=\"noopener\">基于 webpack 的持久化缓存方案</a></h3><p>如何基于 webpack 做持久化缓存似乎一直处于没有最佳实践的状态。作为开发者最大的诉求是：在 entry 内部内容未发生变更的情况下构建之后也能稳定不变。而 pigcan 的这篇文章通过具体的场景层层深入，带你逐步揭晓 webpack 持久化缓存的实现方案</p>\n<h3 id=\"让虚拟DOM和DOM-diff不再成为你的绊脚石\"><a href=\"#让虚拟DOM和DOM-diff不再成为你的绊脚石\" class=\"headerlink\" title=\"让虚拟DOM和DOM-diff不再成为你的绊脚石\"></a><a href=\"https://juejin.im/post/5c8e5e4951882545c109ae9c\" target=\"_blank\" rel=\"noopener\">让虚拟DOM和DOM-diff不再成为你的绊脚石</a></h3><p>作者通过实际代码一步步地对虚拟 DOM 实现和 Diff 算法进行了讲解和实现，讲解的很清楚，逻辑很清晰</p>\n<h3 id=\"为什么顺序调用对-React-Hooks-很重要？\"><a href=\"#为什么顺序调用对-React-Hooks-很重要？\" class=\"headerlink\" title=\"为什么顺序调用对 React Hooks 很重要？\"></a><a href=\"https://overreacted.io/zh-hans/why-do-hooks-rely-on-call-order/\" target=\"_blank\" rel=\"noopener\">为什么顺序调用对 React Hooks 很重要？</a></h3><p>同事推荐，对 React Hooks 讲解的很清楚，而且非常贴心的把评论神马的都翻译成了中文</p>\n<h3 id=\"react-组件的生命周期\"><a href=\"#react-组件的生命周期\" class=\"headerlink\" title=\"react 组件的生命周期\"></a><a href=\"https://segmentfault.com/a/1190000003691119\" target=\"_blank\" rel=\"noopener\">react 组件的生命周期</a></h3><p>作者详细介绍了和 react 生命周期的一些函数执行时机以及它们的作用，通过实例的方式进行了讲解，个人感觉讲解的非常清晰</p>\n<h3 id=\"Gulp-和-Webpack-对比\"><a href=\"#Gulp-和-Webpack-对比\" class=\"headerlink\" title=\"Gulp 和 Webpack 对比\"></a><a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"noopener\">Gulp 和 Webpack 对比</a></h3><p>作者通过实际的代码对比了 gulp 和 webpack 在功能、原理以及模块化方面的优缺点</p>\n<h3 id=\"webpack-常用插件及其作用\"><a href=\"#webpack-常用插件及其作用\" class=\"headerlink\" title=\"webpack 常用插件及其作用\"></a><a href=\"http://www.monster1935.site/blog/2017/08/24/webpack%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">webpack 常用插件及其作用</a></h3><p>介绍了 webpack 经常用到的一些插件和它们的作用，美中不足的是没有具体代码以及介绍的插件有点少</p>\n<h3 id=\"webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\"><a href=\"#webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\" class=\"headerlink\" title=\"webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别\"></a><a href=\"http://www.monster1935.site/blog/2017/09/07/webpack%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-npm%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8Cwebpack%E4%B8%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%85%A5webpack%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8C%BA%E5%88%AB/\" target=\"_blank\" rel=\"noopener\">webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别</a></h3><p>虽然是一个小知识点，不过作者读源码的精神可嘉</p>\n<h3 id=\"webpack-收藏集-掘金\"><a href=\"#webpack-收藏集-掘金\" class=\"headerlink\" title=\"webpack - 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000009435832\" target=\"_blank\" rel=\"noopener\">webpack - 收藏集 - 掘金</a></h3><p>掘金上面的 webpack 相关文章，webpack 本身实在太复杂，还是需要一些文章差补缺漏的</p>\n<h3 id=\"Vue-js——60分钟快速入门\"><a href=\"#Vue-js——60分钟快速入门\" class=\"headerlink\" title=\"Vue.js——60分钟快速入门\"></a><a href=\"http://www.cnblogs.com/keepfool/p/5619070.html\" target=\"_blank\" rel=\"noopener\">Vue.js——60分钟快速入门</a></h3><p>vue 入门教程，还有另外两篇文章，文章最后有链接，个人认为是目前为止看到的最舒服的 vue 入门教程，排版配色都很不错</p>\n<h3 id=\"深入到源码：解读-redux-的设计思路与用法\"><a href=\"#深入到源码：解读-redux-的设计思路与用法\" class=\"headerlink\" title=\"深入到源码：解读 redux 的设计思路与用法\"></a><a href=\"https://github.com/Lucifier129/Lucifier129.github.io/issues/9\" target=\"_blank\" rel=\"noopener\">深入到源码：解读 redux 的设计思路与用法</a></h3><p>一直都没搞明白 redux，后来看了这篇文章，讲的很详细，而且讲解了一部分源码，推荐！（下面一段话取自该文章） 组织 <code>redux</code> 的流程莫过于：</p>\n<ul>\n<li>设计全局 state 的数据结构</li>\n<li>设计更改 state 数据的 actionTypes 常量以及其他跟视图展现相关的 actionTypes 常量</li>\n<li>根据 actionTypes 常量，书写 actionCreator 。</li>\n<li>根据各个 actionCreator 的返回值，涉及 reducer 做数据的最后处理</li>\n<li>在有了 reducer 函数之后，createStore(reducer, initState) 得到 store 对象</li>\n<li>用 bindActionCreators 函数将 actionCreators 和 store.dispatch 绑定起来，得到一组能修改全局状态的函数</li>\n<li>分发各个状态修改函数到各个 DOM 事件中。</li>\n</ul>\n<h3 id=\"Vue-生命周期深入\"><a href=\"#Vue-生命周期深入\" class=\"headerlink\" title=\"Vue 生命周期深入\"></a><a href=\"https://segmentfault.com/a/1190000014705819\" target=\"_blank\" rel=\"noopener\">Vue 生命周期深入</a></h3><p>这篇博客会从下面四个常见的应用诠释了组件的生命周期，以及各个生命周期应该干什么事，博主写的很不错，直观易懂，很适合接触 vue 不深的童鞋。</p>\n<ol>\n<li>单组件的生命周期</li>\n<li>父子组件的生命周期</li>\n<li>兄弟组件的生命周期</li>\n<li>宏 mixin 的生命周期</li>\n</ol>\n<h3 id=\"2019-年-Vue-学习路线图\"><a href=\"#2019-年-Vue-学习路线图\" class=\"headerlink\" title=\"2019 年 Vue 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/jGmJndL-oK3i5lYLiQROIg\" target=\"_blank\" rel=\"noopener\">2019 年 Vue 学习路线图</a></h3><p>作者我将在这篇文章中展示了一个高级“知识地图”，它包含了与 Vue 开发相关的关键领域，你可以使用这张地图作为 2019 年学习 Vue 的图鉴。英文原文：<a href=\"https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/\" target=\"_blank\" rel=\"noopener\">https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/</a></p>\n<h3 id=\"一口-很长的-气了解-babel\"><a href=\"#一口-很长的-气了解-babel\" class=\"headerlink\" title=\"一口(很长的)气了解 babel\"></a><a href=\"https://juejin.im/post/5c19c5e0e51d4502a232c1c6\" target=\"_blank\" rel=\"noopener\">一口(很长的)气了解 babel</a></h3><p>作者详细介绍了 babel 究竟是做什么的，以及 babel 的一些配套工具的作用，同时还介绍了如何争取地进行配置和使用 babel。</p>\n<h3 id=\"Which-of-the-635000-npm-modules-do-I-choose\"><a href=\"#Which-of-the-635000-npm-modules-do-I-choose\" class=\"headerlink\" title=\"Which of the 635000 npm modules do I choose?\"></a><a href=\"https://www.coreycleary.me/which-of-the-635000-npm-modules-do-i-choose/\" target=\"_blank\" rel=\"noopener\">Which of the 635000 npm modules do I choose?</a></h3><p>npm 现在已经有 60 多万个库，如何在如此繁杂的 module 中选择合适自己的感觉是件难事，而作者就基于此对一些比较大型使用比较多的库进行了横向比较，会对你在技术上的选择起到帮助作用。</p>\n<h3 id=\"2019-年-React-学习路线图\"><a href=\"#2019-年-React-学习路线图\" class=\"headerlink\" title=\"2019 年 React 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/PWSeeqDwu8QOcamlo_FJrA\" target=\"_blank\" rel=\"noopener\">2019 年 React 学习路线图</a></h3><p>和上面的 Vue 学习路线图类似，建议搭配食用，英文原文：<a href=\"https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02\" target=\"_blank\" rel=\"noopener\">https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02</a></p>\n<h3 id=\"细说-webpack-之流程篇\"><a href=\"#细说-webpack-之流程篇\" class=\"headerlink\" title=\"细说 webpack 之流程篇\"></a><a href=\"http://taobaofed.org/blog/2016/09/09/webpack-flow/\" target=\"_blank\" rel=\"noopener\">细说 webpack 之流程篇</a></h3><p>淘宝 FED 这篇博客，对 webpack 的整体流程梳理的非常清晰，以及 webpack 的基础架构讲解的很细致，对 compiler 和 complation 对象也做了很细致的剖析。</p>\n<h3 id=\"React-是怎样炼成的\"><a href=\"#React-是怎样炼成的\" class=\"headerlink\" title=\"React 是怎样炼成的\"></a><a href=\"https://segmentfault.com/a/1190000013365426\" target=\"_blank\" rel=\"noopener\">React 是怎样炼成的</a></h3><p>文章主要讲述 React 的诞生过程和优化思路。内容整理自 2014 年的 <a href=\"https://speakerdeck.com/vjeux/oscon-react-architecture\" target=\"_blank\" rel=\"noopener\">OSCON - React Architecture by vjeux</a>，虽然从今天来看可能会有点历史感，但仍然值得学习了解。以史为鉴，从中也可以管窥 Facebook 优秀的工程管理文化。</p>\n","categories":[{"name":"推荐","path":"api/categories/推荐.json"}],"tags":[{"name":"框架","path":"api/tags/框架.json"}]}