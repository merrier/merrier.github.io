{"title":"Leetcode的JS实现——Easy篇（下）","slug":"Leetcode的JS实现——Easy篇（下）","date":"2017-03-26T12:40:52.000Z","updated":"2025-01-03T13:19:00.879Z","comments":true,"path":"api/articles/Leetcode的JS实现——Easy篇（下）.json","excerpt":null,"covers":null,"content":"<p>这是 Leetcode 的 JS 实现——Easy 篇的后半部分，前半部分可以<a href=\"/20170326/js-implementation-of-leetcode-easy-part1.html\">点击这里</a>查看</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Leetcode 地址：<a href=\"https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目\">https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目</a></p>\n<p>排序方式：按照\b本难度中题目的 accepted 统计</p>\n<h2 id=\"JS-代码实现\"><a href=\"#JS-代码实现\" class=\"headerlink\" title=\"JS 代码实现\"></a>JS 代码实现</h2><h3 id=\"121-Best-Time-to-Buy-and-Sell-Stock\"><a href=\"#121-Best-Time-to-Buy-and-Sell-Stock\" class=\"headerlink\" title=\"121-Best Time to Buy and Sell Stock\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description\">121-Best Time to Buy and Sell Stock</a></h3><h4 id=\"方法一：动态规划\"><a href=\"#方法一：动态规划\" class=\"headerlink\" title=\"方法一：动态规划\"></a>方法一：动态规划</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">prices</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxPro = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minPrice = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ,n = prices.<span class=\"property\">length</span>; i&lt;n;i++)&#123;</span><br><span class=\"line\">        minPrice = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(minPrice, prices[i]);</span><br><span class=\"line\">        maxPro = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxPro, prices[i] - minPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxPro;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：Kadane’s-Algorithm\"><a href=\"#方法二：Kadane’s-Algorithm\" class=\"headerlink\" title=\"方法二：Kadane’s Algorithm\"></a>方法二：Kadane’s Algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">prices</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"title function_\">functon</span>(pris)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxCur = <span class=\"number\">0</span>, maxSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>,n = prices.<span class=\"property\">length</span>;i&lt;n; i++) &#123;</span><br><span class=\"line\">        maxCur = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, maxCur += prices[i] - prices[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">        maxSoFar = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxCur, maxSoFar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSoFar;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"202-Happy-Number\"><a href=\"#202-Happy-Number\" class=\"headerlink\" title=\"202-Happy Number\"></a><a href=\"https://leetcode.com/problems/happy-number/#/description\">202-Happy Number</a></h3><h4 id=\"方法一：Floyd-Cycle-detection-algorithm\"><a href=\"#方法一：Floyd-Cycle-detection-algorithm\" class=\"headerlink\" title=\"方法一：Floyd Cycle detection algorithm\"></a>方法一：Floyd Cycle detection algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> slow, fast;</span><br><span class=\"line\">    slow = fast = n;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        slow = <span class=\"title function_\">digitSquareSum</span>(slow);</span><br><span class=\"line\">        fast = <span class=\"title function_\">digitSquareSum</span>(fast);</span><br><span class=\"line\">        fast = <span class=\"title function_\">digitSquareSum</span>(fast);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(slow != fast);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> digitSquareSum = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：O-1-space，如果快-慢，证明陷入了死循环\"><a href=\"#方法二：O-1-space，如果快-慢，证明陷入了死循环\" class=\"headerlink\" title=\"方法二：O(1)space，如果快 = 慢，证明陷入了死循环\"></a>方法二：O(1)space，如果快 = 慢，证明陷入了死循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = n,y = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">cal</span>(x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">        y = <span class=\"title function_\">cal</span>(<span class=\"title function_\">cal</span>(y));            </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==y) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cal = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\"><a href=\"#方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\" class=\"headerlink\" title=\"方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)\"></a>方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">            next+=(n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>); </span><br><span class=\"line\">            n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n/<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"326-Power-of-Three\"><a href=\"#326-Power-of-Three\" class=\"headerlink\" title=\"326-Power of Three\"></a><a href=\"https://leetcode.com/problems/power-of-three/#/description\">326-Power of Three</a></h3><h4 id=\"方法一：递归\"><a href=\"#方法一：递归\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">3</span>===<span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">isPowerOfThree</span>(n/<span class=\"number\">3</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代\"><a href=\"#方法二：迭代\" class=\"headerlink\" title=\"方法二：迭代\"></a>方法二：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n%<span class=\"number\">3</span>===<span class=\"number\">0</span>) &#123;n /= <span class=\"number\">3</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：int-型数字中最大的-3-的幂为-1162261467\"><a href=\"#方法三：int-型数字中最大的-3-的幂为-1162261467\" class=\"headerlink\" title=\"方法三：int 型数字中最大的 3 的幂为 1162261467\"></a>方法三：int 型数字中最大的 3 的幂为 1162261467</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1162261467</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：对-n-取根值\"><a href=\"#方法四：对-n-取根值\" class=\"headerlink\" title=\"方法四：对 n 取根值\"></a>方法四：对 n 取根值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">log10</span>(n) / <span class=\"title class_\">Math</span>.<span class=\"title function_\">log10</span>(<span class=\"number\">3</span>)) % <span class=\"number\">1</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：正则表达式\"><a href=\"#方法五：正则表达式\" class=\"headerlink\" title=\"方法五：正则表达式\"></a>方法五：正则表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;^10*$&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.<span class=\"title function_\">test</span>(n.<span class=\"title function_\">toString</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"327-Power-of-Two\"><a href=\"#327-Power-of-Two\" class=\"headerlink\" title=\"327-Power of Two\"></a><a href=\"https://leetcode.com/problems/power-of-two/#/description\">327-Power of Two</a></h3><h4 id=\"方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\"><a href=\"#方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\" class=\"headerlink\" title=\"方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case\"></a>方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(n&amp;(n-<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\"><a href=\"#方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\" class=\"headerlink\" title=\"方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目\"></a>方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/0/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：迭代\"><a href=\"#方法三：迭代\" class=\"headerlink\" title=\"方法三：迭代\"></a>方法三：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n%<span class=\"number\">2</span>===<span class=\"number\">0</span>) n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n==<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：递归\"><a href=\"#方法四：递归\" class=\"headerlink\" title=\"方法四：递归\"></a>方法四：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">2</span>===<span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">isPowerOfTwo</span>(n/<span class=\"number\">2</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：利用-int-型数字中最大的-2-的幂\"><a href=\"#方法五：利用-int-型数字中最大的-2-的幂\" class=\"headerlink\" title=\"方法五：利用 int 型数字中最大的 2 的幂\"></a>方法五：利用 int 型数字中最大的 2 的幂</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1073741824</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"83-Remove-Duplicates-from-Sorted-List\"><a href=\"#83-Remove-Duplicates-from-Sorted-List\" class=\"headerlink\" title=\"83-Remove Duplicates from Sorted List\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/#/description\">83-Remove Duplicates from Sorted List</a></h3><h4 id=\"方法一：递归-1\"><a href=\"#方法一：递归-1\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span> || head.<span class=\"property\">next</span> === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"title function_\">deleteDuplicates</span>(head.<span class=\"property\">next</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.<span class=\"property\">val</span> == head.<span class=\"property\">next</span>.<span class=\"property\">val</span> ? head.<span class=\"property\">next</span> : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"70-Climbing-Stairs\"><a href=\"#70-Climbing-Stairs\" class=\"headerlink\" title=\"70-Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/#/description\">70-Climbing Stairs</a></h3><h4 id=\"方法一：斐波那契数列\"><a href=\"#方法一：斐波那契数列\" class=\"headerlink\" title=\"方法一：斐波那契数列\"></a>方法一：斐波那契数列</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> one_step_before = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> two_steps_before = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> all_ways = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">    \tall_ways = one_step_before + two_steps_before;</span><br><span class=\"line\">    \ttwo_steps_before = one_step_before;</span><br><span class=\"line\">        one_step_before = all_ways;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> all_ways;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\"><a href=\"#方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\" class=\"headerlink\" title=\"方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数\"></a>方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    a = b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">        a = (b += a) - a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53-Maximum Subarray\"></a><a href=\"https://leetcode.com/problems/maximum-subarray/#/description\">53-Maximum Subarray</a></h3><h4 id=\"方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\"><a href=\"#方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\" class=\"headerlink\" title=\"方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.\"></a>方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans=nums[<span class=\"number\">0</span>],i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">        sum+=nums[i];            </span><br><span class=\"line\">        ans=<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sum,ans);</span><br><span class=\"line\">        sum=<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sum,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：动态规划\"><a href=\"#方法二：动态规划\" class=\"headerlink\" title=\"方法二：动态规划\"></a>方法二：动态规划</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp = [];<span class=\"comment\">//dp[i] means the maximum subarray ending with nums[i];</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = nums[i] + (dp[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span> ? dp[i - <span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">        max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"437-Path-Sum-III\"><a href=\"#437-Path-Sum-III\" class=\"headerlink\" title=\"437-Path Sum III\"></a><a href=\"https://leetcode.com/problems/path-sum-iii/#/description\">437-Path Sum III</a></h3><h4 id=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"><a href=\"#方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\" class=\"headerlink\" title=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"></a>方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">sum</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = [];</span><br><span class=\"line\">    map[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  <span class=\"comment\">//Default sum = 0 has one count</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">backtrack</span>(root, <span class=\"number\">0</span>, sum, map); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> backtrack = <span class=\"keyword\">function</span>(<span class=\"params\">root,sum,target,map</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    sum += root.<span class=\"property\">val</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = map[sum-target] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum-target];<span class=\"comment\">//See if there is a subarray sum equals to target</span></span><br><span class=\"line\">    map[sum] = (map[sum] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum])+<span class=\"number\">1</span>;<span class=\"comment\">//Extend to left and right child</span></span><br><span class=\"line\">    res += <span class=\"title function_\">backtrack</span>(root.<span class=\"property\">left</span>, sum, target, map) + <span class=\"title function_\">backtrack</span>(root.<span class=\"property\">right</span>, sum, target, map);</span><br><span class=\"line\">    map[sum]--;   <span class=\"comment\">//Remove the current node so it wont affect other path</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\"><a href=\"#方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\" class=\"headerlink\" title=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解\"></a>方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">sum</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">sumUp</span>(root, <span class=\"number\">0</span>, sum) + <span class=\"title function_\">pathSum</span>(root.<span class=\"property\">left</span>, sum) + <span class=\"title function_\">pathSum</span>(root.<span class=\"property\">right</span>, sum);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumUp = <span class=\"keyword\">function</span>(<span class=\"params\">node,pre,sum</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = pre + node.<span class=\"property\">val</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cur == sum) + <span class=\"title function_\">sumUp</span>(node.<span class=\"property\">left</span>, cur, sum) + <span class=\"title function_\">sumUp</span>(node.<span class=\"property\">right</span>, cur, sum);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"501-Find-Mode-in-Binary-Search-Tree\"><a href=\"#501-Find-Mode-in-Binary-Search-Tree\" class=\"headerlink\" title=\"501-Find Mode in Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/find-mode-in-binary-search-tree/#/description\">501-Find Mode in Binary Search Tree</a></h3><h4 id=\"方法一：Morris-traversal（二叉树遍历方法，参考链接）\"><a href=\"#方法一：Morris-traversal（二叉树遍历方法，参考链接）\" class=\"headerlink\" title=\"方法一：Morris traversal（二叉树遍历方法，参考链接）\"></a>方法一：Morris traversal（二叉树遍历方法，<a href=\"http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html\">参考链接</a>）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currVal,</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    maxCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modes = []; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">inorder</span>(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(modeCount);</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"title function_\">inorder</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleValue = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val != currVal) &#123;</span><br><span class=\"line\">        currVal = val;</span><br><span class=\"line\">        currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currCount;</span><br><span class=\"line\">        modeCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">            modes[modeCount] = currVal;</span><br><span class=\"line\">        modeCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inorder = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">handleValue</span>(node.<span class=\"property\">val</span>);</span><br><span class=\"line\">                node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> prev = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (prev.<span class=\"property\">right</span> !== <span class=\"literal\">null</span> &amp;&amp; prev.<span class=\"property\">right</span> != node)</span><br><span class=\"line\">                    prev = prev.<span class=\"property\">right</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (prev.<span class=\"property\">right</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    prev.<span class=\"property\">right</span> = node;</span><br><span class=\"line\">                    node = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    prev.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"title function_\">handleValue</span>(node.<span class=\"property\">val</span>);</span><br><span class=\"line\">                    node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\"><a href=\"#方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\" class=\"headerlink\" title=\"方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度\"></a>方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modes = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(currentModes);</span><br><span class=\"line\">    currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> helper = <span class=\"keyword\">function</span> (<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">val</span> != currentValue) &#123;</span><br><span class=\"line\">        currentCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        currentValue = root.<span class=\"property\">val</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        currentCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currentCount;</span><br><span class=\"line\">        currentModes = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            modes[currentModes] = root.<span class=\"property\">val</span>;</span><br><span class=\"line\">            currentModes++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"191-Number-of-1-Bits\"><a href=\"#191-Number-of-1-Bits\" class=\"headerlink\" title=\"191-Number of 1 Bits\"></a><a href=\"https://leetcode.com/problems/number-of-1-bits/#/description\">191-Number of 1 Bits</a></h3><h4 id=\"方法一：利用-toString-2-和-replace\"><a href=\"#方法一：利用-toString-2-和-replace\" class=\"headerlink\" title=\"方法一：利用 toString(2) 和 replace()\"></a>方法一：利用 toString(2) 和 replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/0/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用-n-n-amp-n-1\"><a href=\"#方法二：利用-n-n-amp-n-1\" class=\"headerlink\" title=\"方法二：利用 n=n&amp;(n-1)\"></a>方法二：利用 n=n&amp;(n-1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;n!==<span class=\"number\">0</span>;n = n &amp; (n-<span class=\"number\">1</span>))</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：位运算\"><a href=\"#方法三：位运算\" class=\"headerlink\" title=\"方法三：位运算\"></a>方法三：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ones = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \tones = ones + (n &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    \tn = n&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ones;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"35-Search Insert Position\"></a><a href=\"https://leetcode.com/problems/search-insert-position/#/description\">35-Search Insert Position</a></h3><h4 id=\"方法一：按部就班遍历\"><a href=\"#方法一：按部就班遍历\" class=\"headerlink\" title=\"方法一：按部就班遍历\"></a>方法一：按部就班遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target&lt;=nums[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找\"><a href=\"#方法二：二分查找\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;<span class=\"keyword\">return</span> mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &gt; target) &#123;high = mid-<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;low = mid+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"107-Binary-Tree-Level-Order-Traversal-II\"><a href=\"#107-Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"107-Binary Tree Level Order Traversal II\"></a><a href=\"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/#/description\">107-Binary Tree Level Order Traversal II</a></h3><p>暂无</p>\n<h3 id=\"263-Ugly-Number\"><a href=\"#263-Ugly-Number\" class=\"headerlink\" title=\"263-Ugly Number\"></a><a href=\"https://leetcode.com/problems/ugly-number/#/description\">263-Ugly Number</a></h3><h4 id=\"方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\"><a href=\"#方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\" class=\"headerlink\" title=\"方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。\"></a>方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isUgly = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">of</span> [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &amp;&amp; num % p === <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"459-Repeated-Substring-Pattern\"><a href=\"#459-Repeated-Substring-Pattern\" class=\"headerlink\" title=\"459-Repeated Substring Pattern\"></a><a href=\"https://leetcode.com/problems/repeated-substring-pattern/#/description\">459-Repeated Substring Pattern</a></h3><h4 id=\"方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\"><a href=\"#方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\" class=\"headerlink\" title=\"方法一：The idea is that when we see a character in str that matches the very first character of str, we can start to hoping that str is a built by copies of the substring composed by all characters before the reappearance of the its first character.\"></a>方法一：The idea is that when we see a character in <em>str</em> that matches the very first character of <em>str</em>, we can start to hoping that <em>str</em> is a built by copies of the substring composed by all characters before the reappearance of the its first character.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> repeatedSubstringPattern = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = s.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sb = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = s.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    sb += first;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= l / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = s.<span class=\"title function_\">charAt</span>(i++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == first &amp;&amp; <span class=\"title function_\">isCopies</span>(s, sb)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb += c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isCopies = <span class=\"keyword\">function</span>(<span class=\"params\">str,substr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.<span class=\"property\">length</span> % substr.<span class=\"property\">length</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = substr.<span class=\"property\">length</span>; i &lt; str.<span class=\"property\">length</span>; i += substr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.<span class=\"title function_\">substring</span>(i).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,substr.<span class=\"property\">length</span>) !== substr)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其他方法仍在思考实现中</p>\n<h3 id=\"21-Merge-Two-Sorted-Lists\"><a href=\"#21-Merge-Two-Sorted-Lists\" class=\"headerlink\" title=\"21-Merge Two Sorted Lists\"></a><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/#/solutions\">21-Merge Two Sorted Lists</a></h3><h4 id=\"方法一：递归-2\"><a href=\"#方法一：递归-2\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">l1</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">l2</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.<span class=\"property\">val</span> &lt; l2.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">        l1.<span class=\"property\">next</span> = <span class=\"title function_\">mergeTwoLists</span>(l1.<span class=\"property\">next</span>, l2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.<span class=\"property\">next</span> = <span class=\"title function_\">mergeTwoLists</span>(l2.<span class=\"property\">next</span>, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\"><a href=\"#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\" class=\"headerlink\" title=\"235-Lowest Common Ancestor of a Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/#/description\">235-Lowest Common Ancestor of a Binary Search Tree</a></h3><h4 id=\"方法一：递归-3\"><a href=\"#方法一：递归-3\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><p>因为这是一棵二叉搜索数，所以两个节点分别与共同的祖先节点相减所得的差应该是异号或等于0的，否则就根据节点与当前根节点的大小比较对其左子树或右子树进行递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">p</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">q</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((root.<span class=\"property\">val</span> - p.<span class=\"property\">val</span>) * (root.<span class=\"property\">val</span> - q.<span class=\"property\">val</span>) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        root = p.<span class=\"property\">val</span> &lt; root.<span class=\"property\">val</span> ? root.<span class=\"property\">left</span> : root.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代，和递归类似，只不过代码更加简化\"><a href=\"#方法二：迭代，和递归类似，只不过代码更加简化\" class=\"headerlink\" title=\"方法二：迭代，和递归类似，只不过代码更加简化\"></a>方法二：迭代，和递归类似，只不过代码更加简化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">p</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">q</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (root.<span class=\"property\">val</span> - p.<span class=\"property\">val</span>) * (root.<span class=\"property\">val</span> - q.<span class=\"property\">val</span>) &lt; <span class=\"number\">1</span> ? root :</span><br><span class=\"line\">           <span class=\"title function_\">lowestCommonAncestor</span>(p.<span class=\"property\">val</span> &lt; root.<span class=\"property\">val</span> ? root.<span class=\"property\">left</span> : root.<span class=\"property\">right</span>, p, q);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"198-House-Robber\"><a href=\"#198-House-Robber\" class=\"headerlink\" title=\"198-House Robber\"></a><a href=\"https://leetcode.com/problems/house-robber/#/description\">198-House Robber</a></h3><h4 id=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"><a href=\"#方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\" class=\"headerlink\" title=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"></a>方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律</h4><blockquote>\n<p>f(0) = nums[0] f(1) = max(num[0], num[1]) f(k) = max( f(k-2) + nums[k], f(k-1) )</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">        b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.<span class=\"property\">length</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span>===<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a+nums[i], b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a, b+nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"342-Power-of-Four\"><a href=\"#342-Power-of-Four\" class=\"headerlink\" title=\"342-Power of Four\"></a><a href=\"https://leetcode.com/problems/power-of-four/#/description\">342-Power of Four</a></h3><h4 id=\"方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\"><a href=\"#方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\" class=\"headerlink\" title=\"方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上\"></a>方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num&amp;(num-<span class=\"number\">1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num &amp; <span class=\"number\">0x55555555</span>) !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：很好用的-replace-length\"><a href=\"#方法二：很好用的-replace-length\" class=\"headerlink\" title=\"方法二：很好用的 replace().length\"></a>方法二：很好用的 replace().length</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/0/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> === <span class=\"number\">1</span> &amp;&amp; num.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"property\">length</span>%<span class=\"number\">2</span> ===<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\"><a href=\"#方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\" class=\"headerlink\" title=\"方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性\"></a>方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num &amp; (num - <span class=\"number\">1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num - <span class=\"number\">1</span>) % <span class=\"number\">3</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"345-Reverse-Vowels-of-a-String\"><a href=\"#345-Reverse-Vowels-of-a-String\" class=\"headerlink\" title=\"345-Reverse Vowels of a String\"></a><a href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/#/solutions\">345-Reverse Vowels of a String</a></h3><h4 id=\"方法一：利用二分法和替代数组\"><a href=\"#方法一：利用二分法和替代数组\" class=\"headerlink\" title=\"方法一：利用二分法和替代数组\"></a>方法一：利用二分法和替代数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseVowels = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> s;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>,<span class=\"string\">&#x27;u&#x27;</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;I&#x27;</span>,<span class=\"string\">&#x27;O&#x27;</span>,<span class=\"string\">&#x27;U&#x27;</span>],</span><br><span class=\"line\">        res = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(s.<span class=\"property\">length</span>);</span><br><span class=\"line\">        left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = s.<span class=\"property\">length</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.<span class=\"title function_\">indexOf</span>(s[left]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.<span class=\"title function_\">indexOf</span>(s[right]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[right] = s[right];</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.<span class=\"title function_\">indexOf</span>(s[left]) &gt;=<span class=\"number\">0</span> &amp;&amp; arr.<span class=\"title function_\">indexOf</span>(s[right]) &gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[right];</span><br><span class=\"line\">            res[right] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"367-Valid-Perfect-Square\"><a href=\"#367-Valid-Perfect-Square\" class=\"headerlink\" title=\"367-Valid Perfect Square\"></a><a href=\"https://leetcode.com/problems/valid-perfect-square/#/description\">367-Valid Perfect Square</a></h3><h4 id=\"方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\"><a href=\"#方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\" class=\"headerlink\" title=\"方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))\"></a>方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; num &gt; <span class=\"number\">0</span>; i += <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        num -= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找，O-logN\"><a href=\"#方法二：二分查找，O-logN\" class=\"headerlink\" title=\"方法二：二分查找，O(logN)\"></a>方法二：二分查找，O(logN)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>, right = num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = mid * mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &gt; num) &#123;</span><br><span class=\"line\">          right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; num) &#123;</span><br><span class=\"line\">          left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法，O-1\"><a href=\"#方法三：牛顿迭代法，O-1\" class=\"headerlink\" title=\"方法三：牛顿迭代法，O(1)\"></a>方法三：<a href=\"https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\">牛顿迭代法</a>，O(1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(num / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t * t &gt; num) &#123;</span><br><span class=\"line\">        t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((t + num / t) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t * t == num || num === <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"27-Remove-Element\"><a href=\"#27-Remove-Element\" class=\"headerlink\" title=\"27-Remove Element\"></a><a href=\"https://leetcode.com/problems/remove-element/#/description\">27-Remove Element</a></h3><h4 id=\"方法一：在获得剩余长度的同时生成新数组\"><a href=\"#方法一：在获得剩余长度的同时生成新数组\" class=\"headerlink\" title=\"方法一：在获得剩余长度的同时生成新数组\"></a>方法一：在获得剩余长度的同时生成新数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">val</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; nums.<span class=\"property\">length</span> ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val)</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums[i-cnt] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>-cnt;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：既短又快\"><a href=\"#方法二：既短又快\" class=\"headerlink\" title=\"方法二：既短又快\"></a>方法二：既短又快</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">val</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">            nums[i--] = nums[l-- -<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"101-Symmetric-Tree\"><a href=\"#101-Symmetric-Tree\" class=\"headerlink\" title=\"101-Symmetric Tree\"></a><a href=\"https://leetcode.com/problems/symmetric-tree/#/description\">101-Symmetric Tree</a></h3><h4 id=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"><a href=\"#方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\" class=\"headerlink\" title=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"></a>方法一：通过另外一个方法判断其左右子树是否都是”镜像数”</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root===<span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isMirror</span>(root.<span class=\"property\">left</span>,root.<span class=\"property\">right</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isMirror = <span class=\"keyword\">function</span>(<span class=\"params\">p,q</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> &amp;&amp; q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> || q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p.<span class=\"property\">val</span>==q.<span class=\"property\">val</span>) &amp;&amp; <span class=\"title function_\">isMirror</span>(p.<span class=\"property\">left</span>,q.<span class=\"property\">right</span>) &amp;&amp; <span class=\"title function_\">isMirror</span>(p.<span class=\"property\">right</span>,q.<span class=\"property\">left</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：通过队列（在-JS-中通过数组模拟）\"><a href=\"#方法二：通过队列（在-JS-中通过数组模拟）\" class=\"headerlink\" title=\"方法二：通过队列（在 JS 中通过数组模拟）\"></a>方法二：通过队列（在 JS 中通过数组模拟）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> q = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.<span class=\"title function_\">push</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    q.<span class=\"title function_\">push</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = q.<span class=\"title function_\">shift</span>(),</span><br><span class=\"line\">            right = q.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span>&amp;&amp; right === <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span> ^ right === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left.<span class=\"property\">val</span> != right.<span class=\"property\">val</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(left.<span class=\"property\">left</span>);</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(right.<span class=\"property\">right</span>);</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(left.<span class=\"property\">right</span>);</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(right.<span class=\"property\">left</span>);            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"66-Plus-One\"><a href=\"#66-Plus-One\" class=\"headerlink\" title=\"66-Plus One\"></a><a href=\"https://leetcode.com/problems/plus-one/#/description\">66-Plus One</a></h3><h4 id=\"方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\"><a href=\"#方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\" class=\"headerlink\" title=\"方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位\"></a>方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">digits</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> plusOne = <span class=\"keyword\">function</span>(<span class=\"params\">digits</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n=digits.<span class=\"property\">length</span>,i=n-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        k = i==n-<span class=\"number\">1</span> ? <span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = digits[i];</span><br><span class=\"line\">        digits[i] = (old + j + k)%<span class=\"number\">10</span>;</span><br><span class=\"line\">        j = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((old + j + k)/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        digits.<span class=\"title function_\">unshift</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"118-Pascal’s-Triangle\"><a href=\"#118-Pascal’s-Triangle\" class=\"headerlink\" title=\"118-Pascal’s Triangle\"></a><a href=\"https://leetcode.com/problems/pascals-triangle/#/description\">118-Pascal’s Triangle</a></h3><h4 id=\"方法一：单独用一个方法生成某一行，再-push-进数组\"><a href=\"#方法一：单独用一个方法生成某一行，再-push-进数组\" class=\"headerlink\" title=\"方法一：单独用一个方法生成某一行，再 push 进数组\"></a>方法一：单独用一个方法生成某一行，再 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">numRows</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = <span class=\"title function_\">f</span>(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"title function_\">f</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = <span class=\"title function_\">f</span>(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            a[i+<span class=\"number\">1</span>] = arr[i]+arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[n-<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：直接对二维数组进行赋值\"><a href=\"#方法二：直接对二维数组进行赋值\" class=\"headerlink\" title=\"方法二：直接对二维数组进行赋值\"></a>方法二：直接对二维数组进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">numRows</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;numRows;k++)&#123;    </span><br><span class=\"line\">        r[k]= [];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">        r[i][<span class=\"number\">0</span>] = r[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">            r[i][j] = r[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + r[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"434-Number-of-Segments-in-a-String\"><a href=\"#434-Number-of-Segments-in-a-String\" class=\"headerlink\" title=\"434. Number of Segments in a String\"></a><a href=\"https://leetcode.com/problems/number-of-segments-in-a-string/#/description\">434. Number of Segments in a String</a></h3><h4 id=\"方法一：先去掉首尾空格再将非空格替换成空字符\"><a href=\"#方法一：先去掉首尾空格再将非空格替换成空字符\" class=\"headerlink\" title=\"方法一：先去掉首尾空格再将非空格替换成空字符\"></a>方法一：先去掉首尾空格再将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"property\">length</span> === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"><a href=\"#方法二：先在首尾加一个空格，然后将非空格替换成空字符\" class=\"headerlink\" title=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"></a>方法二：先在首尾加一个空格，然后将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">&quot; &quot;</span> + s + <span class=\"string\">&quot; &quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"110-Balanced-Binary-Tree\"><a href=\"#110-Balanced-Binary-Tree\" class=\"headerlink\" title=\"110. Balanced Binary Tree\"></a><a href=\"https://leetcode.com/problems/balanced-binary-tree/#/description\">110. Balanced Binary Tree</a></h3><h4 id=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\"><a href=\"#方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\" class=\"headerlink\" title=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)\"></a>方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=<span class=\"title function_\">depth</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right=<span class=\"title function_\">depth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(left - right) &lt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"title function_\">isBalanced</span>(root.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">isBalanced</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> depth = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"title function_\">depth</span>(root.<span class=\"property\">left</span>), <span class=\"title function_\">depth</span> (root.<span class=\"property\">right</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从底部向上遍历，O-N\"><a href=\"#方法二：从底部向上遍历，O-N\" class=\"headerlink\" title=\"方法二：从底部向上遍历，O(N)\"></a>方法二：从底部向上遍历，O(N)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">dfsHeight</span>(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dfsHeight = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftHeight = <span class=\"title function_\">dfsHeight</span> (root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftHeight == -<span class=\"number\">1</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightHeight = <span class=\"title function_\">dfsHeight</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightHeight == -<span class=\"number\">1</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(leftHeight - rightHeight) &gt; <span class=\"number\">1</span>)  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(leftHeight, rightHeight) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"257-Binary-Tree-Paths\"><a href=\"#257-Binary-Tree-Paths\" class=\"headerlink\" title=\"257-Binary Tree Paths\"></a><a href=\"https://leetcode.com/problems/binary-tree-paths/#/description\">257-Binary Tree Paths</a></h3><p>暂无</p>\n<h3 id=\"441-Arranging-Coins\"><a href=\"#441-Arranging-Coins\" class=\"headerlink\" title=\"441-Arranging Coins\"></a><a href=\"https://leetcode.com/problems/arranging-coins/#/description\">441-Arranging Coins</a></h3><h4 id=\"方法一：根据公式直接求解-x-x-1-2-lt-n\"><a href=\"#方法一：根据公式直接求解-x-x-1-2-lt-n\" class=\"headerlink\" title=\"方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n\"></a>方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(((-<span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"number\">1</span> + <span class=\"number\">8</span> *n)) / <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先根据根值确定大致范围，然后二分查找\"><a href=\"#方法二：先根据根值确定大致范围，然后二分查找\" class=\"headerlink\" title=\"方法二：先根据根值确定大致范围，然后二分查找\"></a>方法二：先根据根值确定大致范围，然后二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">        end = n,</span><br><span class=\"line\">        mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end)&#123;</span><br><span class=\"line\">        mid = (start + end) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"number\">0.5</span> * mid * mid + <span class=\"number\">0.5</span> * mid ) &lt;= n)&#123;</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"119-Pascal’s-Triangle-II\"><a href=\"#119-Pascal’s-Triangle-II\" class=\"headerlink\" title=\"119-Pascal’s Triangle II\"></a><a href=\"https://leetcode.com/problems/pascals-triangle-ii/#/description\">119-Pascal’s Triangle II</a></h3><h4 id=\"方法一：递归，直接计算\"><a href=\"#方法一：递归，直接计算\" class=\"headerlink\" title=\"方法一：递归，直接计算\"></a>方法一：递归，直接计算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rowIndex</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = [];</span><br><span class=\"line\">    A[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;rowIndex+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i; j&gt;=<span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j]))&#123;</span><br><span class=\"line\">                A[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j-<span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                A[j-<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[j] += A[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\"><a href=\"#方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\" class=\"headerlink\" title=\"方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现\"></a>方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rowIndex</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rowIndex === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> A=[];  </span><br><span class=\"line\">    A[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    A[<span class=\"number\">1</span>]=rowIndex;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;=rowIndex;i++) &#123;  </span><br><span class=\"line\">        A[i]=<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(A[i-<span class=\"number\">1</span>]*(rowIndex-(i-<span class=\"number\">1</span>))/i); <span class=\"comment\">//in case of overflow  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232-Implement Queue using Stacks\"></a><a href=\"https://leetcode.com/problems/implement-queue-using-stacks/#/description\">232-Implement Queue using Stacks</a></h3><p>参见我的另外一篇文章：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"141-Linked-List-Cycle\"><a href=\"#141-Linked-List-Cycle\" class=\"headerlink\" title=\"141-Linked List Cycle\"></a><a href=\"https://leetcode.com/problems/linked-list-cycle/#/description\">141-Linked List Cycle</a></h3><h4 id=\"方法一：一个快指针，一个慢指针\"><a href=\"#方法一：一个快指针，一个慢指针\" class=\"headerlink\" title=\"方法一：一个快指针，一个慢指针\"></a>方法一：一个快指针，一个慢指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> walker = head,runner = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(runner.<span class=\"property\">next</span>!==<span class=\"literal\">null</span> &amp;&amp; runner.<span class=\"property\">next</span>.<span class=\"property\">next</span>!==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        walker = walker.<span class=\"property\">next</span>;</span><br><span class=\"line\">        runner = runner.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(walker==runner) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"26-Remove-Duplicates-from-Sorted-Array\"><a href=\"#26-Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"26-Remove Duplicates from Sorted Array\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description\">26-Remove Duplicates from Sorted Array</a></h3><h4 id=\"方法一：遇到不同的元素时才进行赋值\"><a href=\"#方法一：遇到不同的元素时才进行赋值\" class=\"headerlink\" title=\"方法一：遇到不同的元素时才进行赋值\"></a>方法一：遇到不同的元素时才进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span>===<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.<span class=\"property\">length</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i]!=nums[j]) nums[++j]=nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++j;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个变量记录当前重复元素数量\"><a href=\"#方法二：用一个变量记录当前重复元素数量\" class=\"headerlink\" title=\"方法二：用一个变量记录当前重复元素数量\"></a>方法二：用一个变量记录当前重复元素数量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"property\">length</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == nums[i-<span class=\"number\">1</span>]) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> nums[i-count] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>-count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"172-Factorial-Trailing-Zeroes\"><a href=\"#172-Factorial-Trailing-Zeroes\" class=\"headerlink\" title=\"172-Factorial Trailing Zeroes\"></a><a href=\"https://leetcode.com/problems/factorial-trailing-zeroes/#/description\">172-Factorial Trailing Zeroes</a></h3><h4 id=\"方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\"><a href=\"#方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\" class=\"headerlink\" title=\"方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的\"></a>方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trailingZeroes = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">5</span>) + <span class=\"title function_\">trailingZeroes</span>(n / <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-Palindrome-Number\"><a href=\"#9-Palindrome-Number\" class=\"headerlink\" title=\"9-Palindrome Number\"></a><a href=\"https://leetcode.com/problems/palindrome-number/#/description\">9-Palindrome Number</a></h3><h4 id=\"方法一：二分查找\"><a href=\"#方法一：二分查找\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;&quot;</span> + x,left=<span class=\"number\">0</span>,right=str.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right-left&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[left] == str[right])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：比较前一半数字和后一半数字是否相等\"><a href=\"#方法二：比较前一半数字和后一半数字是否相等\" class=\"headerlink\" title=\"方法二：比较前一半数字和后一半数字是否相等\"></a>方法二：比较前一半数字和后一半数字是否相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span> || (x!==<span class=\"number\">0</span> &amp;&amp; x%<span class=\"number\">10</span>===<span class=\"number\">0</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x&gt;rev)&#123;</span><br><span class=\"line\">    \trev = rev*<span class=\"number\">10</span> + x%<span class=\"number\">10</span>;</span><br><span class=\"line\">    \tx = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x==rev || x==<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(rev/<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"374-Guess-Number-Higher-or-Lower\"><a href=\"#374-Guess-Number-Higher-or-Lower\" class=\"headerlink\" title=\"374-Guess Number Higher or Lower\"></a><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower/#/description\">374-Guess Number Higher or Lower</a></h3><h4 id=\"方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\"><a href=\"#方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\" class=\"headerlink\" title=\"方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）\"></a>方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forward declaration of guess API.</span></span><br><span class=\"line\"><span class=\"comment\">// @param n, your guess</span></span><br><span class=\"line\"><span class=\"comment\">// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> guessNumber = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(low + (n-low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> res = <span class=\"title function_\">guess</span>(mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res == -<span class=\"number\">1</span>)</span><br><span class=\"line\">            n = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438-Find All Anagrams in a String\"></a><a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/#/description\">438-Find All Anagrams in a String</a></h3><p>暂无</p>\n<h3 id=\"112-Path-Sum\"><a href=\"#112-Path-Sum\" class=\"headerlink\" title=\"112-Path Sum\"></a><a href=\"https://leetcode.com/problems/path-sum/#/description\">112-Path Sum</a></h3><h4 id=\"方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\"><a href=\"#方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\" class=\"headerlink\" title=\"方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val\"></a>方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">sum</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasPathSum = <span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">val</span> == sum &amp;&amp; root.<span class=\"property\">left</span> === <span class=\"literal\">null</span> &amp;&amp; root.<span class=\"property\">right</span> === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">hasPathSum</span>(root.<span class=\"property\">left</span>, sum-root.<span class=\"property\">val</span>) || <span class=\"title function_\">hasPathSum</span>(root.<span class=\"property\">right</span>, sum-root.<span class=\"property\">val</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"38-Count-and-Say\"><a href=\"#38-Count-and-Say\" class=\"headerlink\" title=\"38-Count and Say\"></a><a href=\"https://leetcode.com/problems/count-and-say/#/description\">38-Count and Say</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countAndSay = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"title function_\">countAndSay</span>(n-<span class=\"number\">1</span>),res=<span class=\"string\">&#x27;&#x27;</span>,a=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=s.<span class=\"property\">length</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i+<span class=\"number\">1</span>] == s[i])&#123;</span><br><span class=\"line\">                a++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res += a + s[i];</span><br><span class=\"line\">                a=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"250-Isomorphic-Strings\"><a href=\"#250-Isomorphic-Strings\" class=\"headerlink\" title=\"250-Isomorphic Strings\"></a><a href=\"https://leetcode.com/problems/isomorphic-strings/#/solutions\">250-Isomorphic Strings</a></h3><h4 id=\"方法一：用哈希表判断重复出现的位置\"><a href=\"#方法一：用哈希表判断重复出现的位置\" class=\"headerlink\" title=\"方法一：用哈希表判断重复出现的位置\"></a>方法一：用哈希表判断重复出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">t</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">phic</span>(s,t) &amp;&amp; <span class=\"title function_\">phic</span>(t,s);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phic = <span class=\"keyword\">function</span>(<span class=\"params\">s,t</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> code = s[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[code] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[code] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i] != t[arr[code]])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个数组保存重复元素第一次出现的位置\"><a href=\"#方法二：用一个数组保存重复元素第一次出现的位置\" class=\"headerlink\" title=\"方法二：用一个数组保存重复元素第一次出现的位置\"></a>方法二：用一个数组保存重复元素第一次出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">t</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m[s.<span class=\"title function_\">charCodeAt</span>(i)] != m[t.<span class=\"title function_\">charCodeAt</span>(i)+<span class=\"number\">256</span>]) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">        m[s.<span class=\"title function_\">charCodeAt</span>(i)] = m[t.<span class=\"title function_\">charCodeAt</span>(i)+<span class=\"number\">256</span>] = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20-Valid Parentheses\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/#/description\">20-Valid Parentheses</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> q = <span class=\"string\">&quot;()&#123;&#125;[]&quot;</span>.<span class=\"title function_\">indexOf</span>(s.<span class=\"title function_\">substring</span>(i, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.<span class=\"property\">length</span> === <span class=\"number\">0</span> || p.<span class=\"title function_\">shift</span>() != q - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> p.<span class=\"title function_\">unshift</span>(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !p.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"111-Minimum-Depth-of-Binary-Tree\"><a href=\"#111-Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"111-Minimum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/#/description\">111-Minimum Depth of Binary Tree</a></h3><h4 id=\"方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\"><a href=\"#方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\" class=\"headerlink\" title=\"方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.\"></a>方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minDepth = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> L = <span class=\"title function_\">minDepth</span>(root.<span class=\"property\">left</span>), R = <span class=\"title function_\">minDepth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + (<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(L, R) || <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(L, R));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"290-Word-Pattern\"><a href=\"#290-Word-Pattern\" class=\"headerlink\" title=\"290-Word Pattern\"></a><a href=\"https://leetcode.com/problems/word-pattern/#/description\">290-Word Pattern</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">pattern</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wordPattern = <span class=\"keyword\">function</span>(<span class=\"params\">pattern, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>),mid = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=pattern.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> char = pattern[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"number\">97</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid[char] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"title function_\">inArray</span>(arr[i],mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                mid[char] = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid[char] != arr[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> &amp;&amp; (pattern.<span class=\"property\">length</span> == arr.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inArray = <span class=\"keyword\">function</span>(<span class=\"params\">item,arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=arr.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] === item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"234-Palindrome-Linked-List\"><a href=\"#234-Palindrome-Linked-List\" class=\"headerlink\" title=\"234-Palindrome Linked List\"></a><a href=\"https://leetcode.com/problems/palindrome-linked-list/#/description\">234-Palindrome Linked List</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = head,p2 = head,p3 = p1.<span class=\"property\">next</span>,pre = p1;</span><br><span class=\"line\">    <span class=\"comment\">//find mid pointer, and reverse head half part</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p2.<span class=\"property\">next</span> !== <span class=\"literal\">null</span> &amp;&amp; p2.<span class=\"property\">next</span>.<span class=\"property\">next</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p2 = p2.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pre = p1;</span><br><span class=\"line\">        p1 = p3;</span><br><span class=\"line\">        p3 = p3.<span class=\"property\">next</span>;</span><br><span class=\"line\">        p1.<span class=\"property\">next</span> = pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//odd number of elements, need left move p1 one step</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2.<span class=\"property\">next</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p1 = p1.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//even number of elements, do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//compare from mid to head/tail</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p3 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1.<span class=\"property\">val</span> != p3.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p1 = p1.<span class=\"property\">next</span>;</span><br><span class=\"line\">        p3 = p3.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1.Two Sum\"></a><a href=\"https://leetcode.com/problems/two-sum/#/description\">1.Two Sum</a></h3><h4 id=\"方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\"><a href=\"#方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\" class=\"headerlink\" title=\"方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）\"></a>方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[j]) == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"219-Contains-Duplicate-II\"><a href=\"#219-Contains-Duplicate-II\" class=\"headerlink\" title=\"219-Contains Duplicate II\"></a><a href=\"https://leetcode.com/problems/contains-duplicate-ii/#/description\">219-Contains Duplicate II</a></h3><h4 id=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"><a href=\"#方法一：只要读懂题意就差不多了，哈希表及时更新\" class=\"headerlink\" title=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"></a>方法一：只要读懂题意就差不多了，哈希表及时更新</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsNearbyDuplicate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [],res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[item] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(arr[item] - i) &lt;= k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225-Implement Stack using Queues\"></a><a href=\"https://leetcode.com/problems/implement-stack-using-queues/#/description\">225-Implement Stack using Queues</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"88-Merge-Sorted-Array\"><a href=\"#88-Merge-Sorted-Array\" class=\"headerlink\" title=\"88.Merge Sorted Array\"></a><a href=\"https://leetcode.com/problems/merge-sorted-array/#/description\">88.Merge Sorted Array</a></h3><h4 id=\"方法一：模仿归并排序，从后往前比较\"><a href=\"#方法一：模仿归并排序，从后往前比较\" class=\"headerlink\" title=\"方法一：模仿归并排序，从后往前比较\"></a>方法一：模仿归并排序，从后往前比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums1</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums2</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>) nums1[m+n-<span class=\"number\">1</span>] = (m===<span class=\"number\">0</span>||nums2[n-<span class=\"number\">1</span>] &gt; nums1[m-<span class=\"number\">1</span>]) ? nums2[--n] : nums1[--m];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"203-Remove-Linked-List-Elements\"><a href=\"#203-Remove-Linked-List-Elements\" class=\"headerlink\" title=\"203-Remove Linked List Elements\"></a><a href=\"https://leetcode.com/problems/remove-linked-list-elements/#/solutions\">203-Remove Linked List Elements</a></h3><h4 id=\"方法一：递归-4\"><a href=\"#方法一：递归-4\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">val</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElements = <span class=\"keyword\">function</span>(<span class=\"params\">head, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"title function_\">removeElements</span>(head.<span class=\"property\">next</span>, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.<span class=\"property\">val</span> == val ? head.<span class=\"property\">next</span> : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"58-Length-of-Last-Word\"><a href=\"#58-Length-of-Last-Word\" class=\"headerlink\" title=\"58.Length of Last Word\"></a><a href=\"https://leetcode.com/problems/length-of-last-word/#/description\">58.Length of Last Word</a></h3><h4 id=\"方法一：利用-split，需要提前去掉前后空格\"><a href=\"#方法一：利用-split，需要提前去掉前后空格\" class=\"headerlink\" title=\"方法一：利用 split，需要提前去掉前后空格\"></a>方法一：利用 split，需要提前去掉前后空格</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLastWord = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>)[s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>).<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"507-Perfect-Number\"><a href=\"#507-Perfect-Number\" class=\"headerlink\" title=\"507-Perfect Number\"></a><a href=\"https://leetcode.com/problems/perfect-number/#/solutions\">507-Perfect Number</a></h3><h4 id=\"方法一：先求根值，因为根值是遍历的界限\"><a href=\"#方法一：先求根值，因为根值是遍历的界限\" class=\"headerlink\" title=\"方法一：先求根值，因为根值是遍历的界限\"></a>方法一：先求根值，因为根值是遍历的界限</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sqrt = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(num),res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=sqrt;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res += i+ num/i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num&gt;<span class=\"number\">1</span> &amp;&amp; res==<span class=\"number\">2</span>*num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"67-Add-Binary\"><a href=\"#67-Add-Binary\" class=\"headerlink\" title=\"67-Add Binary\"></a><a href=\"https://leetcode.com/problems/add-binary/#/description\">67-Add Binary</a></h3><h4 id=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"><a href=\"#方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\" class=\"headerlink\" title=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"></a>方法一：对两个字符串循环遍历，同时用一个变量保存进位情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">a</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">b</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addBinary = <span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">0</span>, i = a.<span class=\"property\">length</span> - <span class=\"number\">1</span>, j = b.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span> || c == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c += i &gt;= <span class=\"number\">0</span> ? a[i --] - <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        c += j &gt;= <span class=\"number\">0</span> ? b[j --] - <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        s = c % <span class=\"number\">2</span> + s;</span><br><span class=\"line\">        c = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(c / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-Longest-Common-Prefix\"><a href=\"#14-Longest-Common-Prefix\" class=\"headerlink\" title=\"14-Longest Common Prefix\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/#/description\">14-Longest Common Prefix</a></h3><h4 id=\"方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\"><a href=\"#方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\" class=\"headerlink\" title=\"方法一：对数组进行遍历，用 indexOf 判断字符串的前缀\"></a>方法一：对数组进行遍历，用 indexOf 判断字符串的前缀</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string[]</span>&#125; <span class=\"variable\">strs</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestCommonPrefix = <span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strs === <span class=\"literal\">null</span> || strs.<span class=\"property\">length</span> === <span class=\"number\">0</span>)    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pre = strs[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; strs.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(strs[i].<span class=\"title function_\">indexOf</span>(pre) !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            pre = pre.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>,pre.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"160-Intersection-of-Two-Linked-Lists\"><a href=\"#160-Intersection-of-Two-Linked-Lists\" class=\"headerlink\" title=\"160-Intersection of Two Linked Lists\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/#/description\">160-Intersection of Two Linked Lists</a></h3><h4 id=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"><a href=\"#方法一：用两个指针进行遍历，循环结束条件为指针相等\" class=\"headerlink\" title=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"></a>方法一：用两个指针进行遍历，循环结束条件为指针相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur1 = headA,cur2 = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur1 != cur2)&#123;</span><br><span class=\"line\">        cur1 = cur1?cur1.<span class=\"property\">next</span>:headB;</span><br><span class=\"line\">        cur2 = cur2?cur2.<span class=\"property\">next</span>:headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur1;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"400-Nth-Digit\"><a href=\"#400-Nth-Digit\" class=\"headerlink\" title=\"400-Nth Digit\"></a><a href=\"https://leetcode.com/problems/nth-digit/#/description\">400-Nth Digit</a></h3><h4 id=\"方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\"><a href=\"#方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\" class=\"headerlink\" title=\"方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数\"></a>方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findNthDigit = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    n -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> digits = <span class=\"number\">1</span>, first = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">9</span> / first / digits) &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        n -= <span class=\"number\">9</span> * first * digits;</span><br><span class=\"line\">        digits++;</span><br><span class=\"line\">        first *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (first + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n/digits) + <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">charAt</span>(n%digits) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"475-Heaters\"><a href=\"#475-Heaters\" class=\"headerlink\" title=\"475. Heaters**\"></a><a href=\"https://leetcode.com/problems/heaters/#/description\">475. Heaters</a>**</h3><h4 id=\"方法一：在对房子进行循环的过程中移动加热器的指针\"><a href=\"#方法一：在对房子进行循环的过程中移动加热器的指针\" class=\"headerlink\" title=\"方法一：在对房子进行循环的过程中移动加热器的指针\"></a>方法一：在对房子进行循环的过程中移动加热器的指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">houses</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">heaters</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRadius = <span class=\"keyword\">function</span>(<span class=\"params\">houses, heaters</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> house = houses.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        heater= heaters.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        i = <span class=\"number\">0</span>, </span><br><span class=\"line\">        res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,n=house.<span class=\"property\">length</span>;j&lt;n;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; heater.<span class=\"property\">length</span> - <span class=\"number\">1</span> &amp;&amp; heater[i] + heater[i + <span class=\"number\">1</span>] &lt;= house[j] * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(heater[i] - house[j]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"190-Reverse-Bits\"><a href=\"#190-Reverse-Bits\" class=\"headerlink\" title=\"190-Reverse Bits\"></a><a href=\"https://leetcode.com/problems/reverse-bits/#/description\">190-Reverse Bits</a></h3><h4 id=\"方法一：利用数组的-reverse-进行反转\"><a href=\"#方法一：利用数组的-reverse-进行反转\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 进行反转\"></a>方法一：利用数组的 reverse() 进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseBits = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zero = <span class=\"number\">32</span>- n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bit = n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(zero&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        bit += <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        zero--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(bit,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"303-Range-Sum-Query-Immutable\"><a href=\"#303-Range-Sum-Query-Immutable\" class=\"headerlink\" title=\"303-Range Sum Query - Immutable\"></a><a href=\"https://leetcode.com/problems/range-sum-query-immutable/#/description\">303-Range Sum Query - Immutable</a></h3><h4 id=\"方法一：用一个数组保存前面元素之和\"><a href=\"#方法一：用一个数组保存前面元素之和\" class=\"headerlink\" title=\"方法一：用一个数组保存前面元素之和\"></a>方法一：用一个数组保存前面元素之和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NumArray</span> = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"property\">length</span>; i++)</span><br><span class=\"line\">        nums[i] += nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span> = nums;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; i </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">j</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">NumArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sumRange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span>[j];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span>[j] - <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span>[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = Object.create(NumArray).createNew(nums)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.sumRange(i,j)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"28-Implement-strStr\"><a href=\"#28-Implement-strStr\" class=\"headerlink\" title=\"28-Implement strStr()\"></a><a href=\"https://leetcode.com/problems/implement-strstr/#/description\">28-Implement strStr()</a></h3><h4 id=\"方法一：利用-JS-中的-indexOf\"><a href=\"#方法一：利用-JS-中的-indexOf\" class=\"headerlink\" title=\"方法一：利用 JS 中的 indexOf()\"></a>方法一：利用 JS 中的 indexOf()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">haystack</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">needle</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> haystack.<span class=\"title function_\">indexOf</span>(needle);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：老老实实遍历\"><a href=\"#方法二：老老实实遍历\" class=\"headerlink\" title=\"方法二：老老实实遍历\"></a>方法二：老老实实遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">haystack</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">needle</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; ; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j == needle.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i + j == haystack.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (needle.<span class=\"title function_\">charAt</span>(j) != haystack.<span class=\"title function_\">charAt</span>(i + j)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"69-Sqrt-x\"><a href=\"#69-Sqrt-x\" class=\"headerlink\" title=\"69-Sqrt(x)\"></a><a href=\"https://leetcode.com/problems/sqrtx/#/description\">69-Sqrt(x)</a></h3><h4 id=\"方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"><a href=\"#方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\" class=\"headerlink\" title=\"方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"></a>方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(x/<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t*t&gt;x &amp;&amp; t&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        t--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x==<span class=\"number\">1</span> ? <span class=\"number\">1</span> : t;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找-1\"><a href=\"#方法二：二分查找-1\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> begin = <span class=\"number\">0</span>,end = x,result = <span class=\"number\">1</span>,mid = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(result-x) &gt; <span class=\"number\">0.000001</span>)&#123;  </span><br><span class=\"line\">        mid = (begin+end)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">        result = mid*mid;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result &gt; x)   &#123;end = mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;begin = mid; &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(mid);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法\"><a href=\"#方法三：牛顿迭代法\" class=\"headerlink\" title=\"方法三：牛顿迭代法\"></a>方法三：<a href=\"https://www.zhihu.com/question/20690553\">牛顿迭代法</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    r = x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r*r &gt; x)</span><br><span class=\"line\">        r = ((r + x/r) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"155-Min-Stack\"><a href=\"#155-Min-Stack\" class=\"headerlink\" title=\"155-Min Stack\"></a><a href=\"https://leetcode.com/problems/min-stack/#/description\">155-Min Stack</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"414-Third-Maximum-Number\"><a href=\"#414-Third-Maximum-Number\" class=\"headerlink\" title=\"414-Third Maximum Number\"></a><a href=\"https://leetcode.com/problems/third-maximum-number/#/description\">414-Third Maximum Number</a></h3><h4 id=\"方法一：遍历比较\"><a href=\"#方法一：遍历比较\" class=\"headerlink\" title=\"方法一：遍历比较\"></a>方法一：遍历比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max1 = <span class=\"literal\">null</span>,max2 = <span class=\"literal\">null</span>,max3 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=nums.<span class=\"property\">length</span>;i&lt;len;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max1 || n == max2 || n == max3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max1 === <span class=\"literal\">null</span> || n &gt; max1) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = max1;</span><br><span class=\"line\">            max1 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max2 === <span class=\"literal\">null</span> || n &gt; max2) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max3 === <span class=\"literal\">null</span> || n &gt; max3) &#123;</span><br><span class=\"line\">            max3 = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">null</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先将数组排序再遍历\"><a href=\"#方法二：先将数组排序再遍历\" class=\"headerlink\" title=\"方法二：先将数组排序再遍历\"></a>方法二：先将数组排序再遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b-a;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    max1 = nums[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>,j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] == max1&amp;&amp;nums[i] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max2 = nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[j] == max2&amp;&amp;nums[j] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max3 = nums[j];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">undefined</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"532-K-diff-Pairs-in-an-Array\"><a href=\"#532-K-diff-Pairs-in-an-Array\" class=\"headerlink\" title=\"532-K-diff Pairs in an Array\"></a><a href=\"https://leetcode.com/problems/k-diff-pairs-in-an-array/#/description\">532-K-diff Pairs in an Array</a></h3><h4 id=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"><a href=\"#方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\" class=\"headerlink\" title=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"></a>方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPairs = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(j, i + <span class=\"number\">1</span>); j &lt; nums.<span class=\"property\">length</span> &amp;&amp; nums[j] - nums[i] &lt; k; j++) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; nums.<span class=\"property\">length</span> &amp;&amp;  nums[j] - nums[i] == k) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i + <span class=\"number\">1</span> &lt; nums.<span class=\"property\">length</span> &amp;&amp; nums[i] == nums[i + <span class=\"number\">1</span>]) &#123;i++;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"204-Count-Primes\"><a href=\"#204-Count-Primes\" class=\"headerlink\" title=\"204-Count Primes\"></a><a href=\"https://leetcode.com/problems/count-primes/#/description\">204-Count Primes</a></h3><h4 id=\"方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\"><a href=\"#方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\" class=\"headerlink\" title=\"方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数\"></a>方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countPrimes = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = [],count = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">3</span>; i * i &lt; n; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[i]) &#123;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i * i; j &lt; n; j += <span class=\"number\">2</span> * i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!f[j]) &#123;</span><br><span class=\"line\">                --count;</span><br><span class=\"line\">                f[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"125-Valid-Palindrome\"><a href=\"#125-Valid-Palindrome\" class=\"headerlink\" title=\"125-Valid Palindrome\"></a><a href=\"https://leetcode.com/problems/valid-palindrome/#/description\">125-Valid Palindrome</a></h3><h4 id=\"方法一：二分查找-1\"><a href=\"#方法一：二分查找-1\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s === <span class=\"string\">&#x27;&#x27;</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\W/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(low);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=<span class=\"number\">0</span>,right=low.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(low[left] != low[right])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"168-Excel-Sheet-Column-Title\"><a href=\"#168-Excel-Sheet-Column-Title\" class=\"headerlink\" title=\"168-Excel Sheet Column Title\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-title/#/description\">168-Excel Sheet Column Title</a></h3><h4 id=\"方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\"><a href=\"#方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\" class=\"headerlink\" title=\"方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1\"></a>方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertToTitle = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        res =  <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(n % <span class=\"number\">26</span> + <span class=\"number\">65</span>)+res;</span><br><span class=\"line\">        n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n/<span class=\"number\">26</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"278-First-Bad-Version\"><a href=\"#278-First-Bad-Version\" class=\"headerlink\" title=\"278-First Bad Version\"></a><a href=\"https://leetcode.com/problems/first-bad-version/#/description\">278-First Bad Version</a></h3><h4 id=\"方法一：很常用的二分查找\"><a href=\"#方法一：很常用的二分查找\" class=\"headerlink\" title=\"方法一：很常用的二分查找\"></a>方法一：很常用的二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">integer</span>&#125; version number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">function</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">integer</span>&#125; n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">integer</span>&#125; The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>,right=n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"title function_\">isBadVersion</span>(min))&#123;</span><br><span class=\"line\">                right = min;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left=min+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7-Reverse Integer\"></a><a href=\"https://leetcode.com/problems/reverse-integer/#/description\">7-Reverse Integer</a></h3><h4 id=\"方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\"><a href=\"#方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理\"></a>方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"string\">&#x27;&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x)).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/,/g</span>,<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res &gt; (<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? res : <span class=\"number\">0</span>- res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用数学计算进行反转\"><a href=\"#方法二：利用数学计算进行反转\" class=\"headerlink\" title=\"方法二：利用数学计算进行反转\"></a>方法二：利用数学计算进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev= <span class=\"number\">0</span>,pos = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( pos !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        rev= rev*<span class=\"number\">10</span> + pos % <span class=\"number\">10</span>;</span><br><span class=\"line\">        pos= <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(pos/<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(rev)&gt;<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(rev) : <span class=\"number\">0</span>- <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(rev);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"189-Rotate-Array\"><a href=\"#189-Rotate-Array\" class=\"headerlink\" title=\"189-Rotate Array\"></a><a href=\"https://leetcode.com/problems/rotate-array/#/description\">189-Rotate Array</a></h3><p>方法一：利用数组的 pop() 和 unshift() 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        nums.<span class=\"title function_\">unshift</span>(nums.<span class=\"title function_\">pop</span>());</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：三次反转\"><a href=\"#方法二：三次反转\" class=\"headerlink\" title=\"方法二：三次反转\"></a>方法二：三次反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    k %= nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reverse</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reverse</span>(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reverse</span>(nums, k, nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span>(<span class=\"params\">nums,start,end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"><a href=\"#方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\" class=\"headerlink\" title=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"></a>方法三：非常巧妙的一种方式，看不懂的可以<a href=\"https://discuss.leetcode.com/topic/11349/my-three-way-to-solve-this-problem-the-first-way-is-interesting-java\">点击这里</a>看作者的解释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//step each time to move</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = k % nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"comment\">//find GCD between nums length and step</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gcd = <span class=\"title function_\">findGcd</span>(nums.<span class=\"property\">length</span>, step),position, count;</span><br><span class=\"line\">    <span class=\"comment\">//gcd path to finish movie</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; gcd; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//beginning position of each path</span></span><br><span class=\"line\">        position = i;</span><br><span class=\"line\">        <span class=\"comment\">//count is the number we need swap each path</span></span><br><span class=\"line\">        count = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(nums.<span class=\"property\">length</span> / gcd) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; count; j++)&#123;</span><br><span class=\"line\">            position = (position + step) % nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">            <span class=\"comment\">//swap index value in index i and position</span></span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">            nums[position] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> findGcd = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a === <span class=\"number\">0</span> || b === <span class=\"number\">0</span>) ? a + b : <span class=\"title function_\">findGcd</span>(b, a % b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<p>这是 Leetcode 的 JS 实现——Easy 篇的后半部分，前半部分可以<a href=\"/20170326/js-implementation-of-leetcode-easy-part1.html\">点击这里</a>查看</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Leetcode 地址：<a href=\"https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目\">https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目</a></p>\n<p>排序方式：按照\b本难度中题目的 accepted 统计</p>\n<h2 id=\"JS-代码实现\"><a href=\"#JS-代码实现\" class=\"headerlink\" title=\"JS 代码实现\"></a>JS 代码实现</h2><h3 id=\"121-Best-Time-to-Buy-and-Sell-Stock\"><a href=\"#121-Best-Time-to-Buy-and-Sell-Stock\" class=\"headerlink\" title=\"121-Best Time to Buy and Sell Stock\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description\">121-Best Time to Buy and Sell Stock</a></h3><h4 id=\"方法一：动态规划\"><a href=\"#方法一：动态规划\" class=\"headerlink\" title=\"方法一：动态规划\"></a>方法一：动态规划</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">prices</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxPro = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minPrice = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ,n = prices.<span class=\"property\">length</span>; i&lt;n;i++)&#123;</span><br><span class=\"line\">        minPrice = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(minPrice, prices[i]);</span><br><span class=\"line\">        maxPro = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxPro, prices[i] - minPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxPro;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：Kadane’s-Algorithm\"><a href=\"#方法二：Kadane’s-Algorithm\" class=\"headerlink\" title=\"方法二：Kadane’s Algorithm\"></a>方法二：Kadane’s Algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">prices</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"title function_\">functon</span>(pris)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxCur = <span class=\"number\">0</span>, maxSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>,n = prices.<span class=\"property\">length</span>;i&lt;n; i++) &#123;</span><br><span class=\"line\">        maxCur = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, maxCur += prices[i] - prices[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">        maxSoFar = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxCur, maxSoFar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSoFar;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"202-Happy-Number\"><a href=\"#202-Happy-Number\" class=\"headerlink\" title=\"202-Happy Number\"></a><a href=\"https://leetcode.com/problems/happy-number/#/description\">202-Happy Number</a></h3><h4 id=\"方法一：Floyd-Cycle-detection-algorithm\"><a href=\"#方法一：Floyd-Cycle-detection-algorithm\" class=\"headerlink\" title=\"方法一：Floyd Cycle detection algorithm\"></a>方法一：Floyd Cycle detection algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> slow, fast;</span><br><span class=\"line\">    slow = fast = n;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        slow = <span class=\"title function_\">digitSquareSum</span>(slow);</span><br><span class=\"line\">        fast = <span class=\"title function_\">digitSquareSum</span>(fast);</span><br><span class=\"line\">        fast = <span class=\"title function_\">digitSquareSum</span>(fast);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(slow != fast);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> digitSquareSum = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：O-1-space，如果快-慢，证明陷入了死循环\"><a href=\"#方法二：O-1-space，如果快-慢，证明陷入了死循环\" class=\"headerlink\" title=\"方法二：O(1)space，如果快 = 慢，证明陷入了死循环\"></a>方法二：O(1)space，如果快 = 慢，证明陷入了死循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = n,y = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">cal</span>(x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">        y = <span class=\"title function_\">cal</span>(<span class=\"title function_\">cal</span>(y));            </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==y) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cal = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\"><a href=\"#方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\" class=\"headerlink\" title=\"方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)\"></a>方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">            next+=(n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>); </span><br><span class=\"line\">            n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n/<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"326-Power-of-Three\"><a href=\"#326-Power-of-Three\" class=\"headerlink\" title=\"326-Power of Three\"></a><a href=\"https://leetcode.com/problems/power-of-three/#/description\">326-Power of Three</a></h3><h4 id=\"方法一：递归\"><a href=\"#方法一：递归\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">3</span>===<span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">isPowerOfThree</span>(n/<span class=\"number\">3</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代\"><a href=\"#方法二：迭代\" class=\"headerlink\" title=\"方法二：迭代\"></a>方法二：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n%<span class=\"number\">3</span>===<span class=\"number\">0</span>) &#123;n /= <span class=\"number\">3</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：int-型数字中最大的-3-的幂为-1162261467\"><a href=\"#方法三：int-型数字中最大的-3-的幂为-1162261467\" class=\"headerlink\" title=\"方法三：int 型数字中最大的 3 的幂为 1162261467\"></a>方法三：int 型数字中最大的 3 的幂为 1162261467</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1162261467</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：对-n-取根值\"><a href=\"#方法四：对-n-取根值\" class=\"headerlink\" title=\"方法四：对 n 取根值\"></a>方法四：对 n 取根值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">log10</span>(n) / <span class=\"title class_\">Math</span>.<span class=\"title function_\">log10</span>(<span class=\"number\">3</span>)) % <span class=\"number\">1</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：正则表达式\"><a href=\"#方法五：正则表达式\" class=\"headerlink\" title=\"方法五：正则表达式\"></a>方法五：正则表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;^10*$&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.<span class=\"title function_\">test</span>(n.<span class=\"title function_\">toString</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"327-Power-of-Two\"><a href=\"#327-Power-of-Two\" class=\"headerlink\" title=\"327-Power of Two\"></a><a href=\"https://leetcode.com/problems/power-of-two/#/description\">327-Power of Two</a></h3><h4 id=\"方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\"><a href=\"#方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\" class=\"headerlink\" title=\"方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case\"></a>方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(n&amp;(n-<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\"><a href=\"#方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\" class=\"headerlink\" title=\"方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目\"></a>方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/0/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：迭代\"><a href=\"#方法三：迭代\" class=\"headerlink\" title=\"方法三：迭代\"></a>方法三：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n%<span class=\"number\">2</span>===<span class=\"number\">0</span>) n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n==<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：递归\"><a href=\"#方法四：递归\" class=\"headerlink\" title=\"方法四：递归\"></a>方法四：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">2</span>===<span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">isPowerOfTwo</span>(n/<span class=\"number\">2</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：利用-int-型数字中最大的-2-的幂\"><a href=\"#方法五：利用-int-型数字中最大的-2-的幂\" class=\"headerlink\" title=\"方法五：利用 int 型数字中最大的 2 的幂\"></a>方法五：利用 int 型数字中最大的 2 的幂</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1073741824</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"83-Remove-Duplicates-from-Sorted-List\"><a href=\"#83-Remove-Duplicates-from-Sorted-List\" class=\"headerlink\" title=\"83-Remove Duplicates from Sorted List\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/#/description\">83-Remove Duplicates from Sorted List</a></h3><h4 id=\"方法一：递归-1\"><a href=\"#方法一：递归-1\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span> || head.<span class=\"property\">next</span> === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"title function_\">deleteDuplicates</span>(head.<span class=\"property\">next</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.<span class=\"property\">val</span> == head.<span class=\"property\">next</span>.<span class=\"property\">val</span> ? head.<span class=\"property\">next</span> : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"70-Climbing-Stairs\"><a href=\"#70-Climbing-Stairs\" class=\"headerlink\" title=\"70-Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/#/description\">70-Climbing Stairs</a></h3><h4 id=\"方法一：斐波那契数列\"><a href=\"#方法一：斐波那契数列\" class=\"headerlink\" title=\"方法一：斐波那契数列\"></a>方法一：斐波那契数列</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> one_step_before = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> two_steps_before = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> all_ways = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">    \tall_ways = one_step_before + two_steps_before;</span><br><span class=\"line\">    \ttwo_steps_before = one_step_before;</span><br><span class=\"line\">        one_step_before = all_ways;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> all_ways;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\"><a href=\"#方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\" class=\"headerlink\" title=\"方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数\"></a>方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    a = b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">        a = (b += a) - a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53-Maximum Subarray\"></a><a href=\"https://leetcode.com/problems/maximum-subarray/#/description\">53-Maximum Subarray</a></h3><h4 id=\"方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\"><a href=\"#方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\" class=\"headerlink\" title=\"方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.\"></a>方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans=nums[<span class=\"number\">0</span>],i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">        sum+=nums[i];            </span><br><span class=\"line\">        ans=<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sum,ans);</span><br><span class=\"line\">        sum=<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sum,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：动态规划\"><a href=\"#方法二：动态规划\" class=\"headerlink\" title=\"方法二：动态规划\"></a>方法二：动态规划</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp = [];<span class=\"comment\">//dp[i] means the maximum subarray ending with nums[i];</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = nums[i] + (dp[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span> ? dp[i - <span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">        max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"437-Path-Sum-III\"><a href=\"#437-Path-Sum-III\" class=\"headerlink\" title=\"437-Path Sum III\"></a><a href=\"https://leetcode.com/problems/path-sum-iii/#/description\">437-Path Sum III</a></h3><h4 id=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"><a href=\"#方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\" class=\"headerlink\" title=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"></a>方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">sum</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = [];</span><br><span class=\"line\">    map[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  <span class=\"comment\">//Default sum = 0 has one count</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">backtrack</span>(root, <span class=\"number\">0</span>, sum, map); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> backtrack = <span class=\"keyword\">function</span>(<span class=\"params\">root,sum,target,map</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    sum += root.<span class=\"property\">val</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = map[sum-target] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum-target];<span class=\"comment\">//See if there is a subarray sum equals to target</span></span><br><span class=\"line\">    map[sum] = (map[sum] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum])+<span class=\"number\">1</span>;<span class=\"comment\">//Extend to left and right child</span></span><br><span class=\"line\">    res += <span class=\"title function_\">backtrack</span>(root.<span class=\"property\">left</span>, sum, target, map) + <span class=\"title function_\">backtrack</span>(root.<span class=\"property\">right</span>, sum, target, map);</span><br><span class=\"line\">    map[sum]--;   <span class=\"comment\">//Remove the current node so it wont affect other path</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\"><a href=\"#方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\" class=\"headerlink\" title=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解\"></a>方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">sum</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">sumUp</span>(root, <span class=\"number\">0</span>, sum) + <span class=\"title function_\">pathSum</span>(root.<span class=\"property\">left</span>, sum) + <span class=\"title function_\">pathSum</span>(root.<span class=\"property\">right</span>, sum);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumUp = <span class=\"keyword\">function</span>(<span class=\"params\">node,pre,sum</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = pre + node.<span class=\"property\">val</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cur == sum) + <span class=\"title function_\">sumUp</span>(node.<span class=\"property\">left</span>, cur, sum) + <span class=\"title function_\">sumUp</span>(node.<span class=\"property\">right</span>, cur, sum);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"501-Find-Mode-in-Binary-Search-Tree\"><a href=\"#501-Find-Mode-in-Binary-Search-Tree\" class=\"headerlink\" title=\"501-Find Mode in Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/find-mode-in-binary-search-tree/#/description\">501-Find Mode in Binary Search Tree</a></h3><h4 id=\"方法一：Morris-traversal（二叉树遍历方法，参考链接）\"><a href=\"#方法一：Morris-traversal（二叉树遍历方法，参考链接）\" class=\"headerlink\" title=\"方法一：Morris traversal（二叉树遍历方法，参考链接）\"></a>方法一：Morris traversal（二叉树遍历方法，<a href=\"http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html\">参考链接</a>）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currVal,</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    maxCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modes = []; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">inorder</span>(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(modeCount);</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"title function_\">inorder</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleValue = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val != currVal) &#123;</span><br><span class=\"line\">        currVal = val;</span><br><span class=\"line\">        currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currCount;</span><br><span class=\"line\">        modeCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">            modes[modeCount] = currVal;</span><br><span class=\"line\">        modeCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inorder = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">handleValue</span>(node.<span class=\"property\">val</span>);</span><br><span class=\"line\">                node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> prev = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (prev.<span class=\"property\">right</span> !== <span class=\"literal\">null</span> &amp;&amp; prev.<span class=\"property\">right</span> != node)</span><br><span class=\"line\">                    prev = prev.<span class=\"property\">right</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (prev.<span class=\"property\">right</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    prev.<span class=\"property\">right</span> = node;</span><br><span class=\"line\">                    node = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    prev.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"title function_\">handleValue</span>(node.<span class=\"property\">val</span>);</span><br><span class=\"line\">                    node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\"><a href=\"#方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\" class=\"headerlink\" title=\"方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度\"></a>方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modes = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(currentModes);</span><br><span class=\"line\">    currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> helper = <span class=\"keyword\">function</span> (<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">val</span> != currentValue) &#123;</span><br><span class=\"line\">        currentCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        currentValue = root.<span class=\"property\">val</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        currentCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currentCount;</span><br><span class=\"line\">        currentModes = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            modes[currentModes] = root.<span class=\"property\">val</span>;</span><br><span class=\"line\">            currentModes++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">helper</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"191-Number-of-1-Bits\"><a href=\"#191-Number-of-1-Bits\" class=\"headerlink\" title=\"191-Number of 1 Bits\"></a><a href=\"https://leetcode.com/problems/number-of-1-bits/#/description\">191-Number of 1 Bits</a></h3><h4 id=\"方法一：利用-toString-2-和-replace\"><a href=\"#方法一：利用-toString-2-和-replace\" class=\"headerlink\" title=\"方法一：利用 toString(2) 和 replace()\"></a>方法一：利用 toString(2) 和 replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/0/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用-n-n-amp-n-1\"><a href=\"#方法二：利用-n-n-amp-n-1\" class=\"headerlink\" title=\"方法二：利用 n=n&amp;(n-1)\"></a>方法二：利用 n=n&amp;(n-1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;n!==<span class=\"number\">0</span>;n = n &amp; (n-<span class=\"number\">1</span>))</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：位运算\"><a href=\"#方法三：位运算\" class=\"headerlink\" title=\"方法三：位运算\"></a>方法三：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ones = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \tones = ones + (n &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    \tn = n&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ones;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"35-Search Insert Position\"></a><a href=\"https://leetcode.com/problems/search-insert-position/#/description\">35-Search Insert Position</a></h3><h4 id=\"方法一：按部就班遍历\"><a href=\"#方法一：按部就班遍历\" class=\"headerlink\" title=\"方法一：按部就班遍历\"></a>方法一：按部就班遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target&lt;=nums[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找\"><a href=\"#方法二：二分查找\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;<span class=\"keyword\">return</span> mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &gt; target) &#123;high = mid-<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;low = mid+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"107-Binary-Tree-Level-Order-Traversal-II\"><a href=\"#107-Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"107-Binary Tree Level Order Traversal II\"></a><a href=\"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/#/description\">107-Binary Tree Level Order Traversal II</a></h3><p>暂无</p>\n<h3 id=\"263-Ugly-Number\"><a href=\"#263-Ugly-Number\" class=\"headerlink\" title=\"263-Ugly Number\"></a><a href=\"https://leetcode.com/problems/ugly-number/#/description\">263-Ugly Number</a></h3><h4 id=\"方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\"><a href=\"#方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\" class=\"headerlink\" title=\"方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。\"></a>方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isUgly = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">of</span> [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &amp;&amp; num % p === <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"459-Repeated-Substring-Pattern\"><a href=\"#459-Repeated-Substring-Pattern\" class=\"headerlink\" title=\"459-Repeated Substring Pattern\"></a><a href=\"https://leetcode.com/problems/repeated-substring-pattern/#/description\">459-Repeated Substring Pattern</a></h3><h4 id=\"方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\"><a href=\"#方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\" class=\"headerlink\" title=\"方法一：The idea is that when we see a character in str that matches the very first character of str, we can start to hoping that str is a built by copies of the substring composed by all characters before the reappearance of the its first character.\"></a>方法一：The idea is that when we see a character in <em>str</em> that matches the very first character of <em>str</em>, we can start to hoping that <em>str</em> is a built by copies of the substring composed by all characters before the reappearance of the its first character.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> repeatedSubstringPattern = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = s.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sb = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = s.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    sb += first;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= l / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = s.<span class=\"title function_\">charAt</span>(i++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == first &amp;&amp; <span class=\"title function_\">isCopies</span>(s, sb)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb += c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isCopies = <span class=\"keyword\">function</span>(<span class=\"params\">str,substr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.<span class=\"property\">length</span> % substr.<span class=\"property\">length</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = substr.<span class=\"property\">length</span>; i &lt; str.<span class=\"property\">length</span>; i += substr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.<span class=\"title function_\">substring</span>(i).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,substr.<span class=\"property\">length</span>) !== substr)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其他方法仍在思考实现中</p>\n<h3 id=\"21-Merge-Two-Sorted-Lists\"><a href=\"#21-Merge-Two-Sorted-Lists\" class=\"headerlink\" title=\"21-Merge Two Sorted Lists\"></a><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/#/solutions\">21-Merge Two Sorted Lists</a></h3><h4 id=\"方法一：递归-2\"><a href=\"#方法一：递归-2\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">l1</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">l2</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.<span class=\"property\">val</span> &lt; l2.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">        l1.<span class=\"property\">next</span> = <span class=\"title function_\">mergeTwoLists</span>(l1.<span class=\"property\">next</span>, l2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.<span class=\"property\">next</span> = <span class=\"title function_\">mergeTwoLists</span>(l2.<span class=\"property\">next</span>, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\"><a href=\"#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\" class=\"headerlink\" title=\"235-Lowest Common Ancestor of a Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/#/description\">235-Lowest Common Ancestor of a Binary Search Tree</a></h3><h4 id=\"方法一：递归-3\"><a href=\"#方法一：递归-3\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><p>因为这是一棵二叉搜索数，所以两个节点分别与共同的祖先节点相减所得的差应该是异号或等于0的，否则就根据节点与当前根节点的大小比较对其左子树或右子树进行递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">p</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">q</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((root.<span class=\"property\">val</span> - p.<span class=\"property\">val</span>) * (root.<span class=\"property\">val</span> - q.<span class=\"property\">val</span>) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        root = p.<span class=\"property\">val</span> &lt; root.<span class=\"property\">val</span> ? root.<span class=\"property\">left</span> : root.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代，和递归类似，只不过代码更加简化\"><a href=\"#方法二：迭代，和递归类似，只不过代码更加简化\" class=\"headerlink\" title=\"方法二：迭代，和递归类似，只不过代码更加简化\"></a>方法二：迭代，和递归类似，只不过代码更加简化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">p</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">q</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (root.<span class=\"property\">val</span> - p.<span class=\"property\">val</span>) * (root.<span class=\"property\">val</span> - q.<span class=\"property\">val</span>) &lt; <span class=\"number\">1</span> ? root :</span><br><span class=\"line\">           <span class=\"title function_\">lowestCommonAncestor</span>(p.<span class=\"property\">val</span> &lt; root.<span class=\"property\">val</span> ? root.<span class=\"property\">left</span> : root.<span class=\"property\">right</span>, p, q);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"198-House-Robber\"><a href=\"#198-House-Robber\" class=\"headerlink\" title=\"198-House Robber\"></a><a href=\"https://leetcode.com/problems/house-robber/#/description\">198-House Robber</a></h3><h4 id=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"><a href=\"#方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\" class=\"headerlink\" title=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"></a>方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律</h4><blockquote>\n<p>f(0) = nums[0] f(1) = max(num[0], num[1]) f(k) = max( f(k-2) + nums[k], f(k-1) )</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">        b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.<span class=\"property\">length</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span>===<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a+nums[i], b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a, b+nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"342-Power-of-Four\"><a href=\"#342-Power-of-Four\" class=\"headerlink\" title=\"342-Power of Four\"></a><a href=\"https://leetcode.com/problems/power-of-four/#/description\">342-Power of Four</a></h3><h4 id=\"方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\"><a href=\"#方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\" class=\"headerlink\" title=\"方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上\"></a>方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num&amp;(num-<span class=\"number\">1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num &amp; <span class=\"number\">0x55555555</span>) !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：很好用的-replace-length\"><a href=\"#方法二：很好用的-replace-length\" class=\"headerlink\" title=\"方法二：很好用的 replace().length\"></a>方法二：很好用的 replace().length</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/0/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> === <span class=\"number\">1</span> &amp;&amp; num.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"property\">length</span>%<span class=\"number\">2</span> ===<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\"><a href=\"#方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\" class=\"headerlink\" title=\"方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性\"></a>方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num &amp; (num - <span class=\"number\">1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num - <span class=\"number\">1</span>) % <span class=\"number\">3</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"345-Reverse-Vowels-of-a-String\"><a href=\"#345-Reverse-Vowels-of-a-String\" class=\"headerlink\" title=\"345-Reverse Vowels of a String\"></a><a href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/#/solutions\">345-Reverse Vowels of a String</a></h3><h4 id=\"方法一：利用二分法和替代数组\"><a href=\"#方法一：利用二分法和替代数组\" class=\"headerlink\" title=\"方法一：利用二分法和替代数组\"></a>方法一：利用二分法和替代数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseVowels = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> s;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>,<span class=\"string\">&#x27;u&#x27;</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;I&#x27;</span>,<span class=\"string\">&#x27;O&#x27;</span>,<span class=\"string\">&#x27;U&#x27;</span>],</span><br><span class=\"line\">        res = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(s.<span class=\"property\">length</span>);</span><br><span class=\"line\">        left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = s.<span class=\"property\">length</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.<span class=\"title function_\">indexOf</span>(s[left]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.<span class=\"title function_\">indexOf</span>(s[right]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[right] = s[right];</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.<span class=\"title function_\">indexOf</span>(s[left]) &gt;=<span class=\"number\">0</span> &amp;&amp; arr.<span class=\"title function_\">indexOf</span>(s[right]) &gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[right];</span><br><span class=\"line\">            res[right] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"367-Valid-Perfect-Square\"><a href=\"#367-Valid-Perfect-Square\" class=\"headerlink\" title=\"367-Valid Perfect Square\"></a><a href=\"https://leetcode.com/problems/valid-perfect-square/#/description\">367-Valid Perfect Square</a></h3><h4 id=\"方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\"><a href=\"#方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\" class=\"headerlink\" title=\"方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))\"></a>方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; num &gt; <span class=\"number\">0</span>; i += <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        num -= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找，O-logN\"><a href=\"#方法二：二分查找，O-logN\" class=\"headerlink\" title=\"方法二：二分查找，O(logN)\"></a>方法二：二分查找，O(logN)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>, right = num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = mid * mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &gt; num) &#123;</span><br><span class=\"line\">          right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; num) &#123;</span><br><span class=\"line\">          left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法，O-1\"><a href=\"#方法三：牛顿迭代法，O-1\" class=\"headerlink\" title=\"方法三：牛顿迭代法，O(1)\"></a>方法三：<a href=\"https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\">牛顿迭代法</a>，O(1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(num / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t * t &gt; num) &#123;</span><br><span class=\"line\">        t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((t + num / t) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t * t == num || num === <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"27-Remove-Element\"><a href=\"#27-Remove-Element\" class=\"headerlink\" title=\"27-Remove Element\"></a><a href=\"https://leetcode.com/problems/remove-element/#/description\">27-Remove Element</a></h3><h4 id=\"方法一：在获得剩余长度的同时生成新数组\"><a href=\"#方法一：在获得剩余长度的同时生成新数组\" class=\"headerlink\" title=\"方法一：在获得剩余长度的同时生成新数组\"></a>方法一：在获得剩余长度的同时生成新数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">val</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; nums.<span class=\"property\">length</span> ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val)</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums[i-cnt] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>-cnt;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：既短又快\"><a href=\"#方法二：既短又快\" class=\"headerlink\" title=\"方法二：既短又快\"></a>方法二：既短又快</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">val</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">            nums[i--] = nums[l-- -<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"101-Symmetric-Tree\"><a href=\"#101-Symmetric-Tree\" class=\"headerlink\" title=\"101-Symmetric Tree\"></a><a href=\"https://leetcode.com/problems/symmetric-tree/#/description\">101-Symmetric Tree</a></h3><h4 id=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"><a href=\"#方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\" class=\"headerlink\" title=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"></a>方法一：通过另外一个方法判断其左右子树是否都是”镜像数”</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root===<span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isMirror</span>(root.<span class=\"property\">left</span>,root.<span class=\"property\">right</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isMirror = <span class=\"keyword\">function</span>(<span class=\"params\">p,q</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> &amp;&amp; q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> || q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p.<span class=\"property\">val</span>==q.<span class=\"property\">val</span>) &amp;&amp; <span class=\"title function_\">isMirror</span>(p.<span class=\"property\">left</span>,q.<span class=\"property\">right</span>) &amp;&amp; <span class=\"title function_\">isMirror</span>(p.<span class=\"property\">right</span>,q.<span class=\"property\">left</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：通过队列（在-JS-中通过数组模拟）\"><a href=\"#方法二：通过队列（在-JS-中通过数组模拟）\" class=\"headerlink\" title=\"方法二：通过队列（在 JS 中通过数组模拟）\"></a>方法二：通过队列（在 JS 中通过数组模拟）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> q = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.<span class=\"title function_\">push</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    q.<span class=\"title function_\">push</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = q.<span class=\"title function_\">shift</span>(),</span><br><span class=\"line\">            right = q.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span>&amp;&amp; right === <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span> ^ right === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left.<span class=\"property\">val</span> != right.<span class=\"property\">val</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(left.<span class=\"property\">left</span>);</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(right.<span class=\"property\">right</span>);</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(left.<span class=\"property\">right</span>);</span><br><span class=\"line\">        q.<span class=\"title function_\">push</span>(right.<span class=\"property\">left</span>);            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"66-Plus-One\"><a href=\"#66-Plus-One\" class=\"headerlink\" title=\"66-Plus One\"></a><a href=\"https://leetcode.com/problems/plus-one/#/description\">66-Plus One</a></h3><h4 id=\"方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\"><a href=\"#方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\" class=\"headerlink\" title=\"方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位\"></a>方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">digits</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> plusOne = <span class=\"keyword\">function</span>(<span class=\"params\">digits</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n=digits.<span class=\"property\">length</span>,i=n-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        k = i==n-<span class=\"number\">1</span> ? <span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = digits[i];</span><br><span class=\"line\">        digits[i] = (old + j + k)%<span class=\"number\">10</span>;</span><br><span class=\"line\">        j = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((old + j + k)/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        digits.<span class=\"title function_\">unshift</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"118-Pascal’s-Triangle\"><a href=\"#118-Pascal’s-Triangle\" class=\"headerlink\" title=\"118-Pascal’s Triangle\"></a><a href=\"https://leetcode.com/problems/pascals-triangle/#/description\">118-Pascal’s Triangle</a></h3><h4 id=\"方法一：单独用一个方法生成某一行，再-push-进数组\"><a href=\"#方法一：单独用一个方法生成某一行，再-push-进数组\" class=\"headerlink\" title=\"方法一：单独用一个方法生成某一行，再 push 进数组\"></a>方法一：单独用一个方法生成某一行，再 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">numRows</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = <span class=\"title function_\">f</span>(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"title function_\">f</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = <span class=\"title function_\">f</span>(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">            a[i+<span class=\"number\">1</span>] = arr[i]+arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[n-<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：直接对二维数组进行赋值\"><a href=\"#方法二：直接对二维数组进行赋值\" class=\"headerlink\" title=\"方法二：直接对二维数组进行赋值\"></a>方法二：直接对二维数组进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">numRows</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;numRows;k++)&#123;    </span><br><span class=\"line\">        r[k]= [];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">        r[i][<span class=\"number\">0</span>] = r[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">            r[i][j] = r[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + r[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"434-Number-of-Segments-in-a-String\"><a href=\"#434-Number-of-Segments-in-a-String\" class=\"headerlink\" title=\"434. Number of Segments in a String\"></a><a href=\"https://leetcode.com/problems/number-of-segments-in-a-string/#/description\">434. Number of Segments in a String</a></h3><h4 id=\"方法一：先去掉首尾空格再将非空格替换成空字符\"><a href=\"#方法一：先去掉首尾空格再将非空格替换成空字符\" class=\"headerlink\" title=\"方法一：先去掉首尾空格再将非空格替换成空字符\"></a>方法一：先去掉首尾空格再将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"property\">length</span> === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"><a href=\"#方法二：先在首尾加一个空格，然后将非空格替换成空字符\" class=\"headerlink\" title=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"></a>方法二：先在首尾加一个空格，然后将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">&quot; &quot;</span> + s + <span class=\"string\">&quot; &quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"110-Balanced-Binary-Tree\"><a href=\"#110-Balanced-Binary-Tree\" class=\"headerlink\" title=\"110. Balanced Binary Tree\"></a><a href=\"https://leetcode.com/problems/balanced-binary-tree/#/description\">110. Balanced Binary Tree</a></h3><h4 id=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\"><a href=\"#方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\" class=\"headerlink\" title=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)\"></a>方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=<span class=\"title function_\">depth</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right=<span class=\"title function_\">depth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(left - right) &lt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"title function_\">isBalanced</span>(root.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">isBalanced</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> depth = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"title function_\">depth</span>(root.<span class=\"property\">left</span>), <span class=\"title function_\">depth</span> (root.<span class=\"property\">right</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从底部向上遍历，O-N\"><a href=\"#方法二：从底部向上遍历，O-N\" class=\"headerlink\" title=\"方法二：从底部向上遍历，O(N)\"></a>方法二：从底部向上遍历，O(N)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">dfsHeight</span>(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dfsHeight = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftHeight = <span class=\"title function_\">dfsHeight</span> (root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftHeight == -<span class=\"number\">1</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightHeight = <span class=\"title function_\">dfsHeight</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightHeight == -<span class=\"number\">1</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(leftHeight - rightHeight) &gt; <span class=\"number\">1</span>)  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(leftHeight, rightHeight) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"257-Binary-Tree-Paths\"><a href=\"#257-Binary-Tree-Paths\" class=\"headerlink\" title=\"257-Binary Tree Paths\"></a><a href=\"https://leetcode.com/problems/binary-tree-paths/#/description\">257-Binary Tree Paths</a></h3><p>暂无</p>\n<h3 id=\"441-Arranging-Coins\"><a href=\"#441-Arranging-Coins\" class=\"headerlink\" title=\"441-Arranging Coins\"></a><a href=\"https://leetcode.com/problems/arranging-coins/#/description\">441-Arranging Coins</a></h3><h4 id=\"方法一：根据公式直接求解-x-x-1-2-lt-n\"><a href=\"#方法一：根据公式直接求解-x-x-1-2-lt-n\" class=\"headerlink\" title=\"方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n\"></a>方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(((-<span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"number\">1</span> + <span class=\"number\">8</span> *n)) / <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先根据根值确定大致范围，然后二分查找\"><a href=\"#方法二：先根据根值确定大致范围，然后二分查找\" class=\"headerlink\" title=\"方法二：先根据根值确定大致范围，然后二分查找\"></a>方法二：先根据根值确定大致范围，然后二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">        end = n,</span><br><span class=\"line\">        mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end)&#123;</span><br><span class=\"line\">        mid = (start + end) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"number\">0.5</span> * mid * mid + <span class=\"number\">0.5</span> * mid ) &lt;= n)&#123;</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"119-Pascal’s-Triangle-II\"><a href=\"#119-Pascal’s-Triangle-II\" class=\"headerlink\" title=\"119-Pascal’s Triangle II\"></a><a href=\"https://leetcode.com/problems/pascals-triangle-ii/#/description\">119-Pascal’s Triangle II</a></h3><h4 id=\"方法一：递归，直接计算\"><a href=\"#方法一：递归，直接计算\" class=\"headerlink\" title=\"方法一：递归，直接计算\"></a>方法一：递归，直接计算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rowIndex</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = [];</span><br><span class=\"line\">    A[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;rowIndex+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i; j&gt;=<span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j]))&#123;</span><br><span class=\"line\">                A[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j-<span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                A[j-<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[j] += A[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\"><a href=\"#方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\" class=\"headerlink\" title=\"方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现\"></a>方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">rowIndex</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rowIndex === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> A=[];  </span><br><span class=\"line\">    A[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    A[<span class=\"number\">1</span>]=rowIndex;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;=rowIndex;i++) &#123;  </span><br><span class=\"line\">        A[i]=<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(A[i-<span class=\"number\">1</span>]*(rowIndex-(i-<span class=\"number\">1</span>))/i); <span class=\"comment\">//in case of overflow  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232-Implement Queue using Stacks\"></a><a href=\"https://leetcode.com/problems/implement-queue-using-stacks/#/description\">232-Implement Queue using Stacks</a></h3><p>参见我的另外一篇文章：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"141-Linked-List-Cycle\"><a href=\"#141-Linked-List-Cycle\" class=\"headerlink\" title=\"141-Linked List Cycle\"></a><a href=\"https://leetcode.com/problems/linked-list-cycle/#/description\">141-Linked List Cycle</a></h3><h4 id=\"方法一：一个快指针，一个慢指针\"><a href=\"#方法一：一个快指针，一个慢指针\" class=\"headerlink\" title=\"方法一：一个快指针，一个慢指针\"></a>方法一：一个快指针，一个慢指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> walker = head,runner = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(runner.<span class=\"property\">next</span>!==<span class=\"literal\">null</span> &amp;&amp; runner.<span class=\"property\">next</span>.<span class=\"property\">next</span>!==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        walker = walker.<span class=\"property\">next</span>;</span><br><span class=\"line\">        runner = runner.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(walker==runner) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"26-Remove-Duplicates-from-Sorted-Array\"><a href=\"#26-Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"26-Remove Duplicates from Sorted Array\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description\">26-Remove Duplicates from Sorted Array</a></h3><h4 id=\"方法一：遇到不同的元素时才进行赋值\"><a href=\"#方法一：遇到不同的元素时才进行赋值\" class=\"headerlink\" title=\"方法一：遇到不同的元素时才进行赋值\"></a>方法一：遇到不同的元素时才进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span>===<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.<span class=\"property\">length</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i]!=nums[j]) nums[++j]=nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++j;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个变量记录当前重复元素数量\"><a href=\"#方法二：用一个变量记录当前重复元素数量\" class=\"headerlink\" title=\"方法二：用一个变量记录当前重复元素数量\"></a>方法二：用一个变量记录当前重复元素数量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"property\">length</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == nums[i-<span class=\"number\">1</span>]) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> nums[i-count] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>-count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"172-Factorial-Trailing-Zeroes\"><a href=\"#172-Factorial-Trailing-Zeroes\" class=\"headerlink\" title=\"172-Factorial Trailing Zeroes\"></a><a href=\"https://leetcode.com/problems/factorial-trailing-zeroes/#/description\">172-Factorial Trailing Zeroes</a></h3><h4 id=\"方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\"><a href=\"#方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\" class=\"headerlink\" title=\"方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的\"></a>方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trailingZeroes = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">5</span>) + <span class=\"title function_\">trailingZeroes</span>(n / <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-Palindrome-Number\"><a href=\"#9-Palindrome-Number\" class=\"headerlink\" title=\"9-Palindrome Number\"></a><a href=\"https://leetcode.com/problems/palindrome-number/#/description\">9-Palindrome Number</a></h3><h4 id=\"方法一：二分查找\"><a href=\"#方法一：二分查找\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;&quot;</span> + x,left=<span class=\"number\">0</span>,right=str.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right-left&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[left] == str[right])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：比较前一半数字和后一半数字是否相等\"><a href=\"#方法二：比较前一半数字和后一半数字是否相等\" class=\"headerlink\" title=\"方法二：比较前一半数字和后一半数字是否相等\"></a>方法二：比较前一半数字和后一半数字是否相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span> || (x!==<span class=\"number\">0</span> &amp;&amp; x%<span class=\"number\">10</span>===<span class=\"number\">0</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x&gt;rev)&#123;</span><br><span class=\"line\">    \trev = rev*<span class=\"number\">10</span> + x%<span class=\"number\">10</span>;</span><br><span class=\"line\">    \tx = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x==rev || x==<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(rev/<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"374-Guess-Number-Higher-or-Lower\"><a href=\"#374-Guess-Number-Higher-or-Lower\" class=\"headerlink\" title=\"374-Guess Number Higher or Lower\"></a><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower/#/description\">374-Guess Number Higher or Lower</a></h3><h4 id=\"方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\"><a href=\"#方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\" class=\"headerlink\" title=\"方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）\"></a>方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forward declaration of guess API.</span></span><br><span class=\"line\"><span class=\"comment\">// @param n, your guess</span></span><br><span class=\"line\"><span class=\"comment\">// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> guessNumber = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(low + (n-low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> res = <span class=\"title function_\">guess</span>(mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res == -<span class=\"number\">1</span>)</span><br><span class=\"line\">            n = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438-Find All Anagrams in a String\"></a><a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/#/description\">438-Find All Anagrams in a String</a></h3><p>暂无</p>\n<h3 id=\"112-Path-Sum\"><a href=\"#112-Path-Sum\" class=\"headerlink\" title=\"112-Path Sum\"></a><a href=\"https://leetcode.com/problems/path-sum/#/description\">112-Path Sum</a></h3><h4 id=\"方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\"><a href=\"#方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\" class=\"headerlink\" title=\"方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val\"></a>方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">sum</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasPathSum = <span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">val</span> == sum &amp;&amp; root.<span class=\"property\">left</span> === <span class=\"literal\">null</span> &amp;&amp; root.<span class=\"property\">right</span> === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">hasPathSum</span>(root.<span class=\"property\">left</span>, sum-root.<span class=\"property\">val</span>) || <span class=\"title function_\">hasPathSum</span>(root.<span class=\"property\">right</span>, sum-root.<span class=\"property\">val</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"38-Count-and-Say\"><a href=\"#38-Count-and-Say\" class=\"headerlink\" title=\"38-Count and Say\"></a><a href=\"https://leetcode.com/problems/count-and-say/#/description\">38-Count and Say</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countAndSay = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">&#x27;1&#x27;</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"title function_\">countAndSay</span>(n-<span class=\"number\">1</span>),res=<span class=\"string\">&#x27;&#x27;</span>,a=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=s.<span class=\"property\">length</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i+<span class=\"number\">1</span>] == s[i])&#123;</span><br><span class=\"line\">                a++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res += a + s[i];</span><br><span class=\"line\">                a=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"250-Isomorphic-Strings\"><a href=\"#250-Isomorphic-Strings\" class=\"headerlink\" title=\"250-Isomorphic Strings\"></a><a href=\"https://leetcode.com/problems/isomorphic-strings/#/solutions\">250-Isomorphic Strings</a></h3><h4 id=\"方法一：用哈希表判断重复出现的位置\"><a href=\"#方法一：用哈希表判断重复出现的位置\" class=\"headerlink\" title=\"方法一：用哈希表判断重复出现的位置\"></a>方法一：用哈希表判断重复出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">t</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">phic</span>(s,t) &amp;&amp; <span class=\"title function_\">phic</span>(t,s);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phic = <span class=\"keyword\">function</span>(<span class=\"params\">s,t</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> code = s[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[code] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[code] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i] != t[arr[code]])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个数组保存重复元素第一次出现的位置\"><a href=\"#方法二：用一个数组保存重复元素第一次出现的位置\" class=\"headerlink\" title=\"方法二：用一个数组保存重复元素第一次出现的位置\"></a>方法二：用一个数组保存重复元素第一次出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">t</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m[s.<span class=\"title function_\">charCodeAt</span>(i)] != m[t.<span class=\"title function_\">charCodeAt</span>(i)+<span class=\"number\">256</span>]) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">        m[s.<span class=\"title function_\">charCodeAt</span>(i)] = m[t.<span class=\"title function_\">charCodeAt</span>(i)+<span class=\"number\">256</span>] = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20-Valid Parentheses\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/#/description\">20-Valid Parentheses</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> q = <span class=\"string\">&quot;()&#123;&#125;[]&quot;</span>.<span class=\"title function_\">indexOf</span>(s.<span class=\"title function_\">substring</span>(i, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.<span class=\"property\">length</span> === <span class=\"number\">0</span> || p.<span class=\"title function_\">shift</span>() != q - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> p.<span class=\"title function_\">unshift</span>(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !p.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"111-Minimum-Depth-of-Binary-Tree\"><a href=\"#111-Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"111-Minimum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/#/description\">111-Minimum Depth of Binary Tree</a></h3><h4 id=\"方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\"><a href=\"#方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\" class=\"headerlink\" title=\"方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.\"></a>方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minDepth = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> L = <span class=\"title function_\">minDepth</span>(root.<span class=\"property\">left</span>), R = <span class=\"title function_\">minDepth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + (<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(L, R) || <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(L, R));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"290-Word-Pattern\"><a href=\"#290-Word-Pattern\" class=\"headerlink\" title=\"290-Word Pattern\"></a><a href=\"https://leetcode.com/problems/word-pattern/#/description\">290-Word Pattern</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">pattern</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wordPattern = <span class=\"keyword\">function</span>(<span class=\"params\">pattern, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>),mid = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=pattern.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> char = pattern[i].<span class=\"title function_\">charCodeAt</span>() - <span class=\"number\">97</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid[char] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"title function_\">inArray</span>(arr[i],mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                mid[char] = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid[char] != arr[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> &amp;&amp; (pattern.<span class=\"property\">length</span> == arr.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inArray = <span class=\"keyword\">function</span>(<span class=\"params\">item,arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=arr.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] === item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"234-Palindrome-Linked-List\"><a href=\"#234-Palindrome-Linked-List\" class=\"headerlink\" title=\"234-Palindrome Linked List\"></a><a href=\"https://leetcode.com/problems/palindrome-linked-list/#/description\">234-Palindrome Linked List</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = head,p2 = head,p3 = p1.<span class=\"property\">next</span>,pre = p1;</span><br><span class=\"line\">    <span class=\"comment\">//find mid pointer, and reverse head half part</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p2.<span class=\"property\">next</span> !== <span class=\"literal\">null</span> &amp;&amp; p2.<span class=\"property\">next</span>.<span class=\"property\">next</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p2 = p2.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pre = p1;</span><br><span class=\"line\">        p1 = p3;</span><br><span class=\"line\">        p3 = p3.<span class=\"property\">next</span>;</span><br><span class=\"line\">        p1.<span class=\"property\">next</span> = pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//odd number of elements, need left move p1 one step</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2.<span class=\"property\">next</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p1 = p1.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//even number of elements, do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//compare from mid to head/tail</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p3 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1.<span class=\"property\">val</span> != p3.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p1 = p1.<span class=\"property\">next</span>;</span><br><span class=\"line\">        p3 = p3.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1.Two Sum\"></a><a href=\"https://leetcode.com/problems/two-sum/#/description\">1.Two Sum</a></h3><h4 id=\"方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\"><a href=\"#方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\" class=\"headerlink\" title=\"方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）\"></a>方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[j]) == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"219-Contains-Duplicate-II\"><a href=\"#219-Contains-Duplicate-II\" class=\"headerlink\" title=\"219-Contains Duplicate II\"></a><a href=\"https://leetcode.com/problems/contains-duplicate-ii/#/description\">219-Contains Duplicate II</a></h3><h4 id=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"><a href=\"#方法一：只要读懂题意就差不多了，哈希表及时更新\" class=\"headerlink\" title=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"></a>方法一：只要读懂题意就差不多了，哈希表及时更新</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsNearbyDuplicate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [],res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.<span class=\"property\">length</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[item] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(arr[item] - i) &lt;= k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225-Implement Stack using Queues\"></a><a href=\"https://leetcode.com/problems/implement-stack-using-queues/#/description\">225-Implement Stack using Queues</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"88-Merge-Sorted-Array\"><a href=\"#88-Merge-Sorted-Array\" class=\"headerlink\" title=\"88.Merge Sorted Array\"></a><a href=\"https://leetcode.com/problems/merge-sorted-array/#/description\">88.Merge Sorted Array</a></h3><h4 id=\"方法一：模仿归并排序，从后往前比较\"><a href=\"#方法一：模仿归并排序，从后往前比较\" class=\"headerlink\" title=\"方法一：模仿归并排序，从后往前比较\"></a>方法一：模仿归并排序，从后往前比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums1</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums2</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>) nums1[m+n-<span class=\"number\">1</span>] = (m===<span class=\"number\">0</span>||nums2[n-<span class=\"number\">1</span>] &gt; nums1[m-<span class=\"number\">1</span>]) ? nums2[--n] : nums1[--m];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"203-Remove-Linked-List-Elements\"><a href=\"#203-Remove-Linked-List-Elements\" class=\"headerlink\" title=\"203-Remove Linked List Elements\"></a><a href=\"https://leetcode.com/problems/remove-linked-list-elements/#/solutions\">203-Remove Linked List Elements</a></h3><h4 id=\"方法一：递归-4\"><a href=\"#方法一：递归-4\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">val</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElements = <span class=\"keyword\">function</span>(<span class=\"params\">head, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"title function_\">removeElements</span>(head.<span class=\"property\">next</span>, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.<span class=\"property\">val</span> == val ? head.<span class=\"property\">next</span> : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"58-Length-of-Last-Word\"><a href=\"#58-Length-of-Last-Word\" class=\"headerlink\" title=\"58.Length of Last Word\"></a><a href=\"https://leetcode.com/problems/length-of-last-word/#/description\">58.Length of Last Word</a></h3><h4 id=\"方法一：利用-split，需要提前去掉前后空格\"><a href=\"#方法一：利用-split，需要提前去掉前后空格\" class=\"headerlink\" title=\"方法一：利用 split，需要提前去掉前后空格\"></a>方法一：利用 split，需要提前去掉前后空格</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLastWord = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>)[s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>).<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"507-Perfect-Number\"><a href=\"#507-Perfect-Number\" class=\"headerlink\" title=\"507-Perfect Number\"></a><a href=\"https://leetcode.com/problems/perfect-number/#/solutions\">507-Perfect Number</a></h3><h4 id=\"方法一：先求根值，因为根值是遍历的界限\"><a href=\"#方法一：先求根值，因为根值是遍历的界限\" class=\"headerlink\" title=\"方法一：先求根值，因为根值是遍历的界限\"></a>方法一：先求根值，因为根值是遍历的界限</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sqrt = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(num),res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=sqrt;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res += i+ num/i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num&gt;<span class=\"number\">1</span> &amp;&amp; res==<span class=\"number\">2</span>*num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"67-Add-Binary\"><a href=\"#67-Add-Binary\" class=\"headerlink\" title=\"67-Add Binary\"></a><a href=\"https://leetcode.com/problems/add-binary/#/description\">67-Add Binary</a></h3><h4 id=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"><a href=\"#方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\" class=\"headerlink\" title=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"></a>方法一：对两个字符串循环遍历，同时用一个变量保存进位情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">a</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">b</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addBinary = <span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">0</span>, i = a.<span class=\"property\">length</span> - <span class=\"number\">1</span>, j = b.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span> || c == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c += i &gt;= <span class=\"number\">0</span> ? a[i --] - <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        c += j &gt;= <span class=\"number\">0</span> ? b[j --] - <span class=\"string\">&#x27;0&#x27;</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        s = c % <span class=\"number\">2</span> + s;</span><br><span class=\"line\">        c = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(c / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-Longest-Common-Prefix\"><a href=\"#14-Longest-Common-Prefix\" class=\"headerlink\" title=\"14-Longest Common Prefix\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/#/description\">14-Longest Common Prefix</a></h3><h4 id=\"方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\"><a href=\"#方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\" class=\"headerlink\" title=\"方法一：对数组进行遍历，用 indexOf 判断字符串的前缀\"></a>方法一：对数组进行遍历，用 indexOf 判断字符串的前缀</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string[]</span>&#125; <span class=\"variable\">strs</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestCommonPrefix = <span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strs === <span class=\"literal\">null</span> || strs.<span class=\"property\">length</span> === <span class=\"number\">0</span>)    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pre = strs[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; strs.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(strs[i].<span class=\"title function_\">indexOf</span>(pre) !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            pre = pre.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>,pre.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"160-Intersection-of-Two-Linked-Lists\"><a href=\"#160-Intersection-of-Two-Linked-Lists\" class=\"headerlink\" title=\"160-Intersection of Two Linked Lists\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/#/description\">160-Intersection of Two Linked Lists</a></h3><h4 id=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"><a href=\"#方法一：用两个指针进行遍历，循环结束条件为指针相等\" class=\"headerlink\" title=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"></a>方法一：用两个指针进行遍历，循环结束条件为指针相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur1 = headA,cur2 = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur1 != cur2)&#123;</span><br><span class=\"line\">        cur1 = cur1?cur1.<span class=\"property\">next</span>:headB;</span><br><span class=\"line\">        cur2 = cur2?cur2.<span class=\"property\">next</span>:headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur1;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"400-Nth-Digit\"><a href=\"#400-Nth-Digit\" class=\"headerlink\" title=\"400-Nth Digit\"></a><a href=\"https://leetcode.com/problems/nth-digit/#/description\">400-Nth Digit</a></h3><h4 id=\"方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\"><a href=\"#方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\" class=\"headerlink\" title=\"方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数\"></a>方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findNthDigit = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    n -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> digits = <span class=\"number\">1</span>, first = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">9</span> / first / digits) &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        n -= <span class=\"number\">9</span> * first * digits;</span><br><span class=\"line\">        digits++;</span><br><span class=\"line\">        first *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (first + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n/digits) + <span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">charAt</span>(n%digits) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"475-Heaters\"><a href=\"#475-Heaters\" class=\"headerlink\" title=\"475. Heaters**\"></a><a href=\"https://leetcode.com/problems/heaters/#/description\">475. Heaters</a>**</h3><h4 id=\"方法一：在对房子进行循环的过程中移动加热器的指针\"><a href=\"#方法一：在对房子进行循环的过程中移动加热器的指针\" class=\"headerlink\" title=\"方法一：在对房子进行循环的过程中移动加热器的指针\"></a>方法一：在对房子进行循环的过程中移动加热器的指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">houses</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">heaters</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRadius = <span class=\"keyword\">function</span>(<span class=\"params\">houses, heaters</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> house = houses.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        heater= heaters.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        i = <span class=\"number\">0</span>, </span><br><span class=\"line\">        res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,n=house.<span class=\"property\">length</span>;j&lt;n;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; heater.<span class=\"property\">length</span> - <span class=\"number\">1</span> &amp;&amp; heater[i] + heater[i + <span class=\"number\">1</span>] &lt;= house[j] * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(heater[i] - house[j]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"190-Reverse-Bits\"><a href=\"#190-Reverse-Bits\" class=\"headerlink\" title=\"190-Reverse Bits\"></a><a href=\"https://leetcode.com/problems/reverse-bits/#/description\">190-Reverse Bits</a></h3><h4 id=\"方法一：利用数组的-reverse-进行反转\"><a href=\"#方法一：利用数组的-reverse-进行反转\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 进行反转\"></a>方法一：利用数组的 reverse() 进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span> - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125; - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseBits = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zero = <span class=\"number\">32</span>- n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bit = n.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(zero&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        bit += <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        zero--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(bit,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"303-Range-Sum-Query-Immutable\"><a href=\"#303-Range-Sum-Query-Immutable\" class=\"headerlink\" title=\"303-Range Sum Query - Immutable\"></a><a href=\"https://leetcode.com/problems/range-sum-query-immutable/#/description\">303-Range Sum Query - Immutable</a></h3><h4 id=\"方法一：用一个数组保存前面元素之和\"><a href=\"#方法一：用一个数组保存前面元素之和\" class=\"headerlink\" title=\"方法一：用一个数组保存前面元素之和\"></a>方法一：用一个数组保存前面元素之和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NumArray</span> = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"property\">length</span>; i++)</span><br><span class=\"line\">        nums[i] += nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span> = nums;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; i </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">j</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">NumArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sumRange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span>[j];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span>[j] - <span class=\"variable language_\">this</span>.<span class=\"property\">nums</span>[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = Object.create(NumArray).createNew(nums)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.sumRange(i,j)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"28-Implement-strStr\"><a href=\"#28-Implement-strStr\" class=\"headerlink\" title=\"28-Implement strStr()\"></a><a href=\"https://leetcode.com/problems/implement-strstr/#/description\">28-Implement strStr()</a></h3><h4 id=\"方法一：利用-JS-中的-indexOf\"><a href=\"#方法一：利用-JS-中的-indexOf\" class=\"headerlink\" title=\"方法一：利用 JS 中的 indexOf()\"></a>方法一：利用 JS 中的 indexOf()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">haystack</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">needle</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> haystack.<span class=\"title function_\">indexOf</span>(needle);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：老老实实遍历\"><a href=\"#方法二：老老实实遍历\" class=\"headerlink\" title=\"方法二：老老实实遍历\"></a>方法二：老老实实遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">haystack</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">needle</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; ; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j == needle.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i + j == haystack.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (needle.<span class=\"title function_\">charAt</span>(j) != haystack.<span class=\"title function_\">charAt</span>(i + j)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"69-Sqrt-x\"><a href=\"#69-Sqrt-x\" class=\"headerlink\" title=\"69-Sqrt(x)\"></a><a href=\"https://leetcode.com/problems/sqrtx/#/description\">69-Sqrt(x)</a></h3><h4 id=\"方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"><a href=\"#方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\" class=\"headerlink\" title=\"方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"></a>方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(x/<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t*t&gt;x &amp;&amp; t&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        t--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x==<span class=\"number\">1</span> ? <span class=\"number\">1</span> : t;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找-1\"><a href=\"#方法二：二分查找-1\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> begin = <span class=\"number\">0</span>,end = x,result = <span class=\"number\">1</span>,mid = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(result-x) &gt; <span class=\"number\">0.000001</span>)&#123;  </span><br><span class=\"line\">        mid = (begin+end)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">        result = mid*mid;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result &gt; x)   &#123;end = mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;begin = mid; &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(mid);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法\"><a href=\"#方法三：牛顿迭代法\" class=\"headerlink\" title=\"方法三：牛顿迭代法\"></a>方法三：<a href=\"https://www.zhihu.com/question/20690553\">牛顿迭代法</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    r = x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r*r &gt; x)</span><br><span class=\"line\">        r = ((r + x/r) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"155-Min-Stack\"><a href=\"#155-Min-Stack\" class=\"headerlink\" title=\"155-Min Stack\"></a><a href=\"https://leetcode.com/problems/min-stack/#/description\">155-Min Stack</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"414-Third-Maximum-Number\"><a href=\"#414-Third-Maximum-Number\" class=\"headerlink\" title=\"414-Third Maximum Number\"></a><a href=\"https://leetcode.com/problems/third-maximum-number/#/description\">414-Third Maximum Number</a></h3><h4 id=\"方法一：遍历比较\"><a href=\"#方法一：遍历比较\" class=\"headerlink\" title=\"方法一：遍历比较\"></a>方法一：遍历比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max1 = <span class=\"literal\">null</span>,max2 = <span class=\"literal\">null</span>,max3 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=nums.<span class=\"property\">length</span>;i&lt;len;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max1 || n == max2 || n == max3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max1 === <span class=\"literal\">null</span> || n &gt; max1) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = max1;</span><br><span class=\"line\">            max1 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max2 === <span class=\"literal\">null</span> || n &gt; max2) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max3 === <span class=\"literal\">null</span> || n &gt; max3) &#123;</span><br><span class=\"line\">            max3 = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">null</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先将数组排序再遍历\"><a href=\"#方法二：先将数组排序再遍历\" class=\"headerlink\" title=\"方法二：先将数组排序再遍历\"></a>方法二：先将数组排序再遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b-a;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    max1 = nums[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>,j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] == max1&amp;&amp;nums[i] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max2 = nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[j] == max2&amp;&amp;nums[j] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max3 = nums[j];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">undefined</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"532-K-diff-Pairs-in-an-Array\"><a href=\"#532-K-diff-Pairs-in-an-Array\" class=\"headerlink\" title=\"532-K-diff Pairs in an Array\"></a><a href=\"https://leetcode.com/problems/k-diff-pairs-in-an-array/#/description\">532-K-diff Pairs in an Array</a></h3><h4 id=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"><a href=\"#方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\" class=\"headerlink\" title=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"></a>方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPairs = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    nums.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(j, i + <span class=\"number\">1</span>); j &lt; nums.<span class=\"property\">length</span> &amp;&amp; nums[j] - nums[i] &lt; k; j++) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; nums.<span class=\"property\">length</span> &amp;&amp;  nums[j] - nums[i] == k) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i + <span class=\"number\">1</span> &lt; nums.<span class=\"property\">length</span> &amp;&amp; nums[i] == nums[i + <span class=\"number\">1</span>]) &#123;i++;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"204-Count-Primes\"><a href=\"#204-Count-Primes\" class=\"headerlink\" title=\"204-Count Primes\"></a><a href=\"https://leetcode.com/problems/count-primes/#/description\">204-Count Primes</a></h3><h4 id=\"方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\"><a href=\"#方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\" class=\"headerlink\" title=\"方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数\"></a>方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countPrimes = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = [],count = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">3</span>; i * i &lt; n; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[i]) &#123;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i * i; j &lt; n; j += <span class=\"number\">2</span> * i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!f[j]) &#123;</span><br><span class=\"line\">                --count;</span><br><span class=\"line\">                f[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"125-Valid-Palindrome\"><a href=\"#125-Valid-Palindrome\" class=\"headerlink\" title=\"125-Valid Palindrome\"></a><a href=\"https://leetcode.com/problems/valid-palindrome/#/description\">125-Valid Palindrome</a></h3><h4 id=\"方法一：二分查找-1\"><a href=\"#方法一：二分查找-1\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s === <span class=\"string\">&#x27;&#x27;</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\W/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(low);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=<span class=\"number\">0</span>,right=low.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(low[left] != low[right])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"168-Excel-Sheet-Column-Title\"><a href=\"#168-Excel-Sheet-Column-Title\" class=\"headerlink\" title=\"168-Excel Sheet Column Title\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-title/#/description\">168-Excel Sheet Column Title</a></h3><h4 id=\"方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\"><a href=\"#方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\" class=\"headerlink\" title=\"方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1\"></a>方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertToTitle = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        res =  <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(n % <span class=\"number\">26</span> + <span class=\"number\">65</span>)+res;</span><br><span class=\"line\">        n = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(n/<span class=\"number\">26</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"278-First-Bad-Version\"><a href=\"#278-First-Bad-Version\" class=\"headerlink\" title=\"278-First Bad Version\"></a><a href=\"https://leetcode.com/problems/first-bad-version/#/description\">278-First Bad Version</a></h3><h4 id=\"方法一：很常用的二分查找\"><a href=\"#方法一：很常用的二分查找\" class=\"headerlink\" title=\"方法一：很常用的二分查找\"></a>方法一：很常用的二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">integer</span>&#125; version number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125; whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">function</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">integer</span>&#125; n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">integer</span>&#125; The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>,right=n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"title function_\">isBadVersion</span>(min))&#123;</span><br><span class=\"line\">                right = min;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left=min+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7-Reverse Integer\"></a><a href=\"https://leetcode.com/problems/reverse-integer/#/description\">7-Reverse Integer</a></h3><h4 id=\"方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\"><a href=\"#方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理\"></a>方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"string\">&#x27;&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x)).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/,/g</span>,<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res &gt; (<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? res : <span class=\"number\">0</span>- res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用数学计算进行反转\"><a href=\"#方法二：利用数学计算进行反转\" class=\"headerlink\" title=\"方法二：利用数学计算进行反转\"></a>方法二：利用数学计算进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev= <span class=\"number\">0</span>,pos = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( pos !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        rev= rev*<span class=\"number\">10</span> + pos % <span class=\"number\">10</span>;</span><br><span class=\"line\">        pos= <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(pos/<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(rev)&gt;<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">31</span>)-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(rev) : <span class=\"number\">0</span>- <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(rev);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"189-Rotate-Array\"><a href=\"#189-Rotate-Array\" class=\"headerlink\" title=\"189-Rotate Array\"></a><a href=\"https://leetcode.com/problems/rotate-array/#/description\">189-Rotate Array</a></h3><p>方法一：利用数组的 pop() 和 unshift() 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        nums.<span class=\"title function_\">unshift</span>(nums.<span class=\"title function_\">pop</span>());</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：三次反转\"><a href=\"#方法二：三次反转\" class=\"headerlink\" title=\"方法二：三次反转\"></a>方法二：三次反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    k %= nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reverse</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reverse</span>(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reverse</span>(nums, k, nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"keyword\">function</span>(<span class=\"params\">nums,start,end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"><a href=\"#方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\" class=\"headerlink\" title=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"></a>方法三：非常巧妙的一种方式，看不懂的可以<a href=\"https://discuss.leetcode.com/topic/11349/my-three-way-to-solve-this-problem-the-first-way-is-interesting-java\">点击这里</a>看作者的解释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//step each time to move</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = k % nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"comment\">//find GCD between nums length and step</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gcd = <span class=\"title function_\">findGcd</span>(nums.<span class=\"property\">length</span>, step),position, count;</span><br><span class=\"line\">    <span class=\"comment\">//gcd path to finish movie</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; gcd; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//beginning position of each path</span></span><br><span class=\"line\">        position = i;</span><br><span class=\"line\">        <span class=\"comment\">//count is the number we need swap each path</span></span><br><span class=\"line\">        count = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(nums.<span class=\"property\">length</span> / gcd) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; count; j++)&#123;</span><br><span class=\"line\">            position = (position + step) % nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">            <span class=\"comment\">//swap index value in index i and position</span></span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">            nums[position] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> findGcd = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a === <span class=\"number\">0</span> || b === <span class=\"number\">0</span>) ? a + b : <span class=\"title function_\">findGcd</span>(b, a % b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","categories":[{"name":"算法","path":"api/categories/算法.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}