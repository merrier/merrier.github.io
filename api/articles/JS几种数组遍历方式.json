{"title":"JS几种数组遍历方式","slug":"JS几种数组遍历方式","date":"2017-03-18T08:50:29.000Z","updated":"2019-02-09T03:10:53.431Z","comments":true,"path":"api/articles/JS几种数组遍历方式.json","excerpt":null,"covers":null,"content":"<p>这是从 Lichun Dai 博客中看到的一篇文章，作者对 JS 中的数组遍历方式进行了总结，同时进行了性能对比。但根据评论者的回答，性能分析需要结合具体环境，单纯在浏览器中进行测试是难下结论的，所以我只会展示实现的方式，至于在浏览器中的性能可以点击文末的链接跳转至原作者的分析工具 demo。</p>\n<h2 id=\"第一种：普通-for-循环\"><a href=\"#第一种：普通-for-循环\" class=\"headerlink\" title=\"第一种：普通 for 循环\"></a>第一种：普通 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明：最简单的一种，也是使用频率最高的一种，虽然性能不弱，但仍有优化空间</p>\n<h2 id=\"第二种：优化版-for-循环\"><a href=\"#第二种：优化版-for-循环\" class=\"headerlink\" title=\"第二种：优化版 for 循环\"></a>第二种：优化版 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>,len=arr.length; j &lt; len; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显。 <strong>这种方法基本上是所有循环遍历方法中性能最高的一种</strong></p>\n<h2 id=\"第三种：弱化版-for-循环\"><a href=\"#第三种：弱化版-for-循环\" class=\"headerlink\" title=\"第三种：弱化版 for 循环\"></a>第三种：弱化版 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; arr\\[j\\]!=<span class=\"literal\">null</span>; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方法其实严格上也属于 for 循环，只不过是没有使用 length 判断，而使用变量本身判断 <strong>实际上，这种方法的性能要远远小于普通 for 循环</strong></p>\n<h2 id=\"第四种：foreach-循环\"><a href=\"#第四种：foreach-循环\" class=\"headerlink\" title=\"第四种：foreach 循环\"></a>第四种：foreach 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 数组自带的 foreach 循环，使用频率较高，实际上性能比普通 for 循环弱</p>\n<h2 id=\"第五种：foreach-变种\"><a href=\"#第五种：foreach-变种\" class=\"headerlink\" title=\"第五种：foreach 变种\"></a>第五种：foreach 变种</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(arr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 由于 foreach 是 Array 型自带的，对于一些非这种类型的，无法直接使用(如 NodeList)，所以才有了这个变种，使用这个变种可以让类似的数组拥有 foreach 功能。 实际性能要比普通 foreach 弱</p>\n<h2 id=\"第六种：forin-循环\"><a href=\"#第六种：forin-循环\" class=\"headerlink\" title=\"第六种：forin 循环\"></a>第六种：forin 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这个循环很多人爱用，但实际上，经分析测试，在众多的循环遍历方式中 <strong>它的效率是最低的</strong></p>\n<h2 id=\"第七种：map-遍历\"><a href=\"#第七种：map-遍历\" class=\"headerlink\" title=\"第七种：map 遍历\"></a>第七种：map 遍历</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上 foreach</p>\n<h2 id=\"第八种：forof-遍历（ES6）\"><a href=\"#第八种：forof-遍历（ES6）\" class=\"headerlink\" title=\"第八种：forof 遍历（ES6）\"></a>第八种：forof 遍历（ES6）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr) &#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方式是 ES6 里面用到的，性能要好于 forin，但仍然比不上普通 for 循环</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p><strong>普通 for 循环才是最优雅的</strong></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://dailc.github.io/2016/11/25/baseKnowlenge_javascript_jsarrayGoThrough.html\" target=\"_blank\" rel=\"noopener\">JS几种数组遍历方式以及性能分析对比</a></li>\n<li><a href=\"https://dailc.github.io/jsfoundation-perfanalysis/html/performanceAnalysis/demo_performanceAnalysis_jsarrayGoThrough.html\" target=\"_blank\" rel=\"noopener\">Js中几种常用数组遍历方式分析比较工具</a></li>\n</ul>\n","more":"<p>这是从 Lichun Dai 博客中看到的一篇文章，作者对 JS 中的数组遍历方式进行了总结，同时进行了性能对比。但根据评论者的回答，性能分析需要结合具体环境，单纯在浏览器中进行测试是难下结论的，所以我只会展示实现的方式，至于在浏览器中的性能可以点击文末的链接跳转至原作者的分析工具 demo。</p>\n<h2 id=\"第一种：普通-for-循环\"><a href=\"#第一种：普通-for-循环\" class=\"headerlink\" title=\"第一种：普通 for 循环\"></a>第一种：普通 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明：最简单的一种，也是使用频率最高的一种，虽然性能不弱，但仍有优化空间</p>\n<h2 id=\"第二种：优化版-for-循环\"><a href=\"#第二种：优化版-for-循环\" class=\"headerlink\" title=\"第二种：优化版 for 循环\"></a>第二种：优化版 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>,len=arr.length; j &lt; len; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显。 <strong>这种方法基本上是所有循环遍历方法中性能最高的一种</strong></p>\n<h2 id=\"第三种：弱化版-for-循环\"><a href=\"#第三种：弱化版-for-循环\" class=\"headerlink\" title=\"第三种：弱化版 for 循环\"></a>第三种：弱化版 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; arr\\[j\\]!=<span class=\"literal\">null</span>; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方法其实严格上也属于 for 循环，只不过是没有使用 length 判断，而使用变量本身判断 <strong>实际上，这种方法的性能要远远小于普通 for 循环</strong></p>\n<h2 id=\"第四种：foreach-循环\"><a href=\"#第四种：foreach-循环\" class=\"headerlink\" title=\"第四种：foreach 循环\"></a>第四种：foreach 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 数组自带的 foreach 循环，使用频率较高，实际上性能比普通 for 循环弱</p>\n<h2 id=\"第五种：foreach-变种\"><a href=\"#第五种：foreach-变种\" class=\"headerlink\" title=\"第五种：foreach 变种\"></a>第五种：foreach 变种</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(arr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 由于 foreach 是 Array 型自带的，对于一些非这种类型的，无法直接使用(如 NodeList)，所以才有了这个变种，使用这个变种可以让类似的数组拥有 foreach 功能。 实际性能要比普通 foreach 弱</p>\n<h2 id=\"第六种：forin-循环\"><a href=\"#第六种：forin-循环\" class=\"headerlink\" title=\"第六种：forin 循环\"></a>第六种：forin 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这个循环很多人爱用，但实际上，经分析测试，在众多的循环遍历方式中 <strong>它的效率是最低的</strong></p>\n<h2 id=\"第七种：map-遍历\"><a href=\"#第七种：map-遍历\" class=\"headerlink\" title=\"第七种：map 遍历\"></a>第七种：map 遍历</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上 foreach</p>\n<h2 id=\"第八种：forof-遍历（ES6）\"><a href=\"#第八种：forof-遍历（ES6）\" class=\"headerlink\" title=\"第八种：forof 遍历（ES6）\"></a>第八种：forof 遍历（ES6）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr) &#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方式是 ES6 里面用到的，性能要好于 forin，但仍然比不上普通 for 循环</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p><strong>普通 for 循环才是最优雅的</strong></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://dailc.github.io/2016/11/25/baseKnowlenge_javascript_jsarrayGoThrough.html\" target=\"_blank\" rel=\"noopener\">JS几种数组遍历方式以及性能分析对比</a></li>\n<li><a href=\"https://dailc.github.io/jsfoundation-perfanalysis/html/performanceAnalysis/demo_performanceAnalysis_jsarrayGoThrough.html\" target=\"_blank\" rel=\"noopener\">Js中几种常用数组遍历方式分析比较工具</a></li>\n</ul>\n","categories":[{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"数组","path":"api/tags/数组.json"}]}