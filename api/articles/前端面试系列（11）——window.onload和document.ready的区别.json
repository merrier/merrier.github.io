{"title":"前端面试系列（11）——window.onload和document.ready的区别","slug":"前端面试系列（11）——window.onload和document.ready的区别","date":"2017-04-12T09:14:30.000Z","updated":"2019-11-19T02:44:49.104Z","comments":true,"path":"api/articles/前端面试系列（11）——window.onload和document.ready的区别.json","excerpt":null,"covers":["/images/hexo_post_11.png","/images/hexo_post_12.png"],"content":"<p>这个问题虽然比较简单，但是依然是前端面试中经常会问到的一道题，所以为了让自己“与众不同”，必须全面了解这两者的区别，才能从众多候选人中脱颖而出</p>\n<h2 id=\"一张表格\"><a href=\"#一张表格\" class=\"headerlink\" title=\"一张表格\"></a>一张表格</h2><p>下面这张表格简单的介绍了两者的区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>window.onload()</th>\n<th>$(document).ready()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>执行时机</td>\n<td>在页面所有元素（包括图片，引用文件）加载完后执行</td>\n<td>页面中所有HTML DOM，CSS DOM结构加载完之后就会执行，其他图片等内容可能没有加载完</td>\n</tr>\n<tr>\n<td>编写个数</td>\n<td>不能同时写多个，后面的将会覆盖前面的</td>\n<td>可以同时写多个</td>\n</tr>\n<tr>\n<td>简写</td>\n<td>无</td>\n<td>$().ready(function(){}) // $()不带参数默认是document；$(function(){})</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"jQ-的-document-ready-实现\"><a href=\"#jQ-的-document-ready-实现\" class=\"headerlink\" title=\"jQ 的 document.ready() 实现\"></a>jQ 的 document.ready() 实现</h2><p>在 jQuery 脚本加载的时候，会监听 DOMContentLoaded 事件。当事件触发时候，会执行 ready 事件的回调；（document.readyState === “complete” 时相当于 dom 加载完毕<br>由于用的是原生的 DOMContentLoaded 事件，所以<strong>目前的 ready 函数仅能用于当前 document，无需选择器</strong></p>\n<h2 id=\"谁更快\"><a href=\"#谁更快\" class=\"headerlink\" title=\"谁更快\"></a>谁更快</h2><p>jQuery 的 document.ready 就一定比 window.onload 快吗？下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-US\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>加载时机<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">onload</span>=<span class=\"string\">\"console.log('jquery.js loaded')\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'define functions'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">type, info</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(type + <span class=\"string\">' onload '</span> + (info || <span class=\"string\">\"\"</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">     $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document ready'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;    </span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window addEventListener'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'DOMContentLoaded'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('body')\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('text')\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',1)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/17.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',2)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/16.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('js')\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行之后有两种结果：\"><a href=\"#执行之后有两种结果：\" class=\"headerlink\" title=\"执行之后有两种结果：\"></a>执行之后有两种结果：</h3><h4 id=\"首次加载：\"><a href=\"#首次加载：\" class=\"headerlink\" title=\"首次加载：\"></a>首次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_11.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"二次加载：\"><a href=\"#二次加载：\" class=\"headerlink\" title=\"二次加载：\"></a>二次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_12.png\" alt=\"\" width=\"400\"></div>\n\n<p>第一种情况非常符合我们的想法，ready 比 onload 快，顺序也比较合理。而第二种情况就有些怪异，应该依照上面 jquery ready 事件的实现，那 ready 应该要 DOMContentLoaded 后面啊。我思来想去，我觉得这是个误会，由于二次加载时利用到缓存，导致文件资源都很快加载，各个事件触发的时间非常相近，顺序也不定，就给人一种 ready 顺序不对之感，大家应该发现这几个事件都是在几十毫秒之内触发。PS：js 执行需要时间，几十毫秒不同的顺序我觉得很正常。另外尝试几次，二次加载顺序确实会有变化，但时间都很相近。所以，jQuery 的 document ready 不一定比 window.onload 快执行。</p>\n<h2 id=\"为什么外部-script-文件放页面内容后面好？\"><a href=\"#为什么外部-script-文件放页面内容后面好？\" class=\"headerlink\" title=\"为什么外部 script 文件放页面内容后面好？\"></a>为什么外部 script 文件放页面内容后面好？</h2><h3 id=\"script-执行顺序\"><a href=\"#script-执行顺序\" class=\"headerlink\" title=\"script 执行顺序\"></a>script 执行顺序</h3><blockquote>\n<p>无论如何包含代码，只要不存在 defer 和 async 属性，浏览器都会按照 <code>&lt;script&gt;</code> 元素在页面中出现的先后顺序对它们依次进行解析。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>换句话说，在第一个 <code>&lt;script&gt;</code> 元素包含的代码解析完成后，第二个 <code>&lt;script&gt;</code> 包含代码才会被解析，然后才是第三个…..<br>如果在 head 元素里包含所有 JavaScript 文件，就必须等到全部 JavaScript 代码都被下载、解析和执行完成以后，才能呈现页面的内容（浏览器在遇到 <code>&lt;body&gt;</code> 标签时才开始呈现内容）。在有 JavaScript 文件时候，浏览器呈现页面会出现明显的延迟，延时期间浏览器是一片空白。所以，外部 script 文件放页面内容后面。这样，在解析 JavaScript 代码之前，页面内容将完全呈现出来。</p>\n<h3 id=\"一定是放页面内容后面吗？\"><a href=\"#一定是放页面内容后面吗？\" class=\"headerlink\" title=\"一定是放页面内容后面吗？\"></a>一定是放页面内容后面吗？</h3><p>有种情况是 JavaScript 放哪里都一样的，那就是内容是依赖 JavaScript 的执行渲染时候，放哪都一样。所以我们需要尽量避免在 JS 中对 dom 进行修改，对于性能优化有比较大的帮助。</p>\n<h2 id=\"Load-方法\"><a href=\"#Load-方法\" class=\"headerlink\" title=\"Load() 方法\"></a>Load() 方法</h2><p>由于在 $(document).ready() 方法内注册的事件，只要 DOM 就绪就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕，所以例如图片的高度和宽度这样的属性此时不一定有效。要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法—— load() 方法。Load() 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>\n<h2 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h2><ul>\n<li>$(window).load()：等价于 window.onload()</li>\n<li>$(window).unload()：页面关闭时触发</li>\n</ul>\n<h2 id=\"坑爹的-IE-or-jQ？\"><a href=\"#坑爹的-IE-or-jQ？\" class=\"headerlink\" title=\"坑爹的 IE or jQ？\"></a>坑爹的 IE or jQ？</h2><p>最近在改一个嵌入在 iframe 中的页面的时候，使用了 jquery 做效果，而页面本身也绑定了 onload 事件。改完后，Firefox 下测试正常流畅，IE 下就要等个十几秒 jquery 的效果才出现，黄花菜都凉了。起初以为是和本身 onload 加载的方法冲突。网上普遍的说法是 $(document).ready() 是在页面 DOM 解析完成后执行，而 onload 事件是在所有资源都准备完成之后才执行，也就是说 $(document).ready() 是要在 onload 之前执行的，尤其当页面图片较大较多的时候，这个时间差可能更大。可是我这页面分明是图片都显示出来十几秒了，还不见 jquery 的效果出来。 删了 onload 加载的方法试试，结果还是一样，看来没有必要把原本的 onload 事件绑定也改用 $(document).ready() 来写。那是什么原因使得 Firefox 正常而 IE 就能呢？接着调试，发现 IE 下原来绑定的 onload 方法竟然先于 $(document).ready() 的内容执行，而 Firefox 则是先执行 $(document).ready() 的内容，再执行原来的 onload 方法。这个和网上的说法似乎不完全一致啊，走投无路的时候就看看源码，翻翻 jQuery 的源码看看 $(document).ready() 是如何实现的吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( jQuery.browser.msie &amp;&amp; <span class=\"built_in\">window</span> == top ) (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (jQuery.isReady) <span class=\"keyword\">return</span>; </span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( error ) &#123; </span><br><span class=\"line\">　　　　　　setTimeout( <span class=\"built_in\">arguments</span>.callee, <span class=\"number\">0</span> ); </span><br><span class=\"line\">　　　　　　 <span class=\"keyword\">return</span>; </span><br><span class=\"line\">　　　　&#125; </span><br><span class=\"line\">　　 <span class=\"comment\">// and execute any waiting functions </span></span><br><span class=\"line\">　　　jQuery.ready(); </span><br><span class=\"line\">&#125;)(); </span><br><span class=\"line\">jQuery.event.add( <span class=\"built_in\">window</span>, <span class=\"string\">\"load\"</span>, jQuery.ready );</span><br></pre></td></tr></table></figure>\n<p>结果很明了了，IE 只有在页面不是嵌入 iframe 中的情况下才和 Firefox 等一样，先执行 $(document).ready() 的内容，再执行原来的 onload 方法。对于嵌入 iframe 中的页面，也只是绑定在 load 事件上执行，所以自然是在原来的 onload 绑定的方法执行之后才轮到。而这个页面中正好在测试环境下有一个访问不到的资源，那十几秒的延迟正是它放大出的时间差。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.jb51.net/article/50185.htm\" target=\"_blank\" rel=\"noopener\">一张表格告诉你windows.onload()与$(document).ready()的区别</a></li>\n<li><a href=\"http://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></li>\n</ul>\n","more":"<p>这个问题虽然比较简单，但是依然是前端面试中经常会问到的一道题，所以为了让自己“与众不同”，必须全面了解这两者的区别，才能从众多候选人中脱颖而出</p>\n<h2 id=\"一张表格\"><a href=\"#一张表格\" class=\"headerlink\" title=\"一张表格\"></a>一张表格</h2><p>下面这张表格简单的介绍了两者的区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>window.onload()</th>\n<th>$(document).ready()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>执行时机</td>\n<td>在页面所有元素（包括图片，引用文件）加载完后执行</td>\n<td>页面中所有HTML DOM，CSS DOM结构加载完之后就会执行，其他图片等内容可能没有加载完</td>\n</tr>\n<tr>\n<td>编写个数</td>\n<td>不能同时写多个，后面的将会覆盖前面的</td>\n<td>可以同时写多个</td>\n</tr>\n<tr>\n<td>简写</td>\n<td>无</td>\n<td>$().ready(function(){}) // $()不带参数默认是document；$(function(){})</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"jQ-的-document-ready-实现\"><a href=\"#jQ-的-document-ready-实现\" class=\"headerlink\" title=\"jQ 的 document.ready() 实现\"></a>jQ 的 document.ready() 实现</h2><p>在 jQuery 脚本加载的时候，会监听 DOMContentLoaded 事件。当事件触发时候，会执行 ready 事件的回调；（document.readyState === “complete” 时相当于 dom 加载完毕<br>由于用的是原生的 DOMContentLoaded 事件，所以<strong>目前的 ready 函数仅能用于当前 document，无需选择器</strong></p>\n<h2 id=\"谁更快\"><a href=\"#谁更快\" class=\"headerlink\" title=\"谁更快\"></a>谁更快</h2><p>jQuery 的 document.ready 就一定比 window.onload 快吗？下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-US\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>加载时机<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">onload</span>=<span class=\"string\">\"console.log('jquery.js loaded')\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'define functions'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">type, info</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(type + <span class=\"string\">' onload '</span> + (info || <span class=\"string\">\"\"</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">     $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document ready'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;    </span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window addEventListener'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'DOMContentLoaded'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('body')\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('text')\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',1)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/17.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',2)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/16.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('js')\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行之后有两种结果：\"><a href=\"#执行之后有两种结果：\" class=\"headerlink\" title=\"执行之后有两种结果：\"></a>执行之后有两种结果：</h3><h4 id=\"首次加载：\"><a href=\"#首次加载：\" class=\"headerlink\" title=\"首次加载：\"></a>首次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_11.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"二次加载：\"><a href=\"#二次加载：\" class=\"headerlink\" title=\"二次加载：\"></a>二次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_12.png\" alt=\"\" width=\"400\"></div>\n\n<p>第一种情况非常符合我们的想法，ready 比 onload 快，顺序也比较合理。而第二种情况就有些怪异，应该依照上面 jquery ready 事件的实现，那 ready 应该要 DOMContentLoaded 后面啊。我思来想去，我觉得这是个误会，由于二次加载时利用到缓存，导致文件资源都很快加载，各个事件触发的时间非常相近，顺序也不定，就给人一种 ready 顺序不对之感，大家应该发现这几个事件都是在几十毫秒之内触发。PS：js 执行需要时间，几十毫秒不同的顺序我觉得很正常。另外尝试几次，二次加载顺序确实会有变化，但时间都很相近。所以，jQuery 的 document ready 不一定比 window.onload 快执行。</p>\n<h2 id=\"为什么外部-script-文件放页面内容后面好？\"><a href=\"#为什么外部-script-文件放页面内容后面好？\" class=\"headerlink\" title=\"为什么外部 script 文件放页面内容后面好？\"></a>为什么外部 script 文件放页面内容后面好？</h2><h3 id=\"script-执行顺序\"><a href=\"#script-执行顺序\" class=\"headerlink\" title=\"script 执行顺序\"></a>script 执行顺序</h3><blockquote>\n<p>无论如何包含代码，只要不存在 defer 和 async 属性，浏览器都会按照 <code>&lt;script&gt;</code> 元素在页面中出现的先后顺序对它们依次进行解析。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>换句话说，在第一个 <code>&lt;script&gt;</code> 元素包含的代码解析完成后，第二个 <code>&lt;script&gt;</code> 包含代码才会被解析，然后才是第三个…..<br>如果在 head 元素里包含所有 JavaScript 文件，就必须等到全部 JavaScript 代码都被下载、解析和执行完成以后，才能呈现页面的内容（浏览器在遇到 <code>&lt;body&gt;</code> 标签时才开始呈现内容）。在有 JavaScript 文件时候，浏览器呈现页面会出现明显的延迟，延时期间浏览器是一片空白。所以，外部 script 文件放页面内容后面。这样，在解析 JavaScript 代码之前，页面内容将完全呈现出来。</p>\n<h3 id=\"一定是放页面内容后面吗？\"><a href=\"#一定是放页面内容后面吗？\" class=\"headerlink\" title=\"一定是放页面内容后面吗？\"></a>一定是放页面内容后面吗？</h3><p>有种情况是 JavaScript 放哪里都一样的，那就是内容是依赖 JavaScript 的执行渲染时候，放哪都一样。所以我们需要尽量避免在 JS 中对 dom 进行修改，对于性能优化有比较大的帮助。</p>\n<h2 id=\"Load-方法\"><a href=\"#Load-方法\" class=\"headerlink\" title=\"Load() 方法\"></a>Load() 方法</h2><p>由于在 $(document).ready() 方法内注册的事件，只要 DOM 就绪就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕，所以例如图片的高度和宽度这样的属性此时不一定有效。要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法—— load() 方法。Load() 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>\n<h2 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h2><ul>\n<li>$(window).load()：等价于 window.onload()</li>\n<li>$(window).unload()：页面关闭时触发</li>\n</ul>\n<h2 id=\"坑爹的-IE-or-jQ？\"><a href=\"#坑爹的-IE-or-jQ？\" class=\"headerlink\" title=\"坑爹的 IE or jQ？\"></a>坑爹的 IE or jQ？</h2><p>最近在改一个嵌入在 iframe 中的页面的时候，使用了 jquery 做效果，而页面本身也绑定了 onload 事件。改完后，Firefox 下测试正常流畅，IE 下就要等个十几秒 jquery 的效果才出现，黄花菜都凉了。起初以为是和本身 onload 加载的方法冲突。网上普遍的说法是 $(document).ready() 是在页面 DOM 解析完成后执行，而 onload 事件是在所有资源都准备完成之后才执行，也就是说 $(document).ready() 是要在 onload 之前执行的，尤其当页面图片较大较多的时候，这个时间差可能更大。可是我这页面分明是图片都显示出来十几秒了，还不见 jquery 的效果出来。 删了 onload 加载的方法试试，结果还是一样，看来没有必要把原本的 onload 事件绑定也改用 $(document).ready() 来写。那是什么原因使得 Firefox 正常而 IE 就能呢？接着调试，发现 IE 下原来绑定的 onload 方法竟然先于 $(document).ready() 的内容执行，而 Firefox 则是先执行 $(document).ready() 的内容，再执行原来的 onload 方法。这个和网上的说法似乎不完全一致啊，走投无路的时候就看看源码，翻翻 jQuery 的源码看看 $(document).ready() 是如何实现的吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( jQuery.browser.msie &amp;&amp; <span class=\"built_in\">window</span> == top ) (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (jQuery.isReady) <span class=\"keyword\">return</span>; </span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( error ) &#123; </span><br><span class=\"line\">　　　　　　setTimeout( <span class=\"built_in\">arguments</span>.callee, <span class=\"number\">0</span> ); </span><br><span class=\"line\">　　　　　　 <span class=\"keyword\">return</span>; </span><br><span class=\"line\">　　　　&#125; </span><br><span class=\"line\">　　 <span class=\"comment\">// and execute any waiting functions </span></span><br><span class=\"line\">　　　jQuery.ready(); </span><br><span class=\"line\">&#125;)(); </span><br><span class=\"line\">jQuery.event.add( <span class=\"built_in\">window</span>, <span class=\"string\">\"load\"</span>, jQuery.ready );</span><br></pre></td></tr></table></figure>\n<p>结果很明了了，IE 只有在页面不是嵌入 iframe 中的情况下才和 Firefox 等一样，先执行 $(document).ready() 的内容，再执行原来的 onload 方法。对于嵌入 iframe 中的页面，也只是绑定在 load 事件上执行，所以自然是在原来的 onload 绑定的方法执行之后才轮到。而这个页面中正好在测试环境下有一个访问不到的资源，那十几秒的延迟正是它放大出的时间差。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.jb51.net/article/50185.htm\" target=\"_blank\" rel=\"noopener\">一张表格告诉你windows.onload()与$(document).ready()的区别</a></li>\n<li><a href=\"http://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></li>\n</ul>\n","categories":[{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"面试","path":"api/tags/面试.json"}]}