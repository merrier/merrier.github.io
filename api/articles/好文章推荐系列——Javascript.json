{"title":"好文章推荐系列——Javascript","slug":"好文章推荐系列——Javascript","date":"2017-08-07T08:28:03.000Z","updated":"2021-02-02T03:23:00.849Z","comments":true,"path":"api/articles/好文章推荐系列——Javascript.json","excerpt":null,"covers":null,"content":"<h3 id=\"时区与JS中的Date对象\"><a href=\"#时区与JS中的Date对象\" class=\"headerlink\" title=\"时区与JS中的Date对象\"></a><a href=\"https://juejin.im/post/6844903885505576968\" target=\"_blank\" rel=\"noopener\">时区与JS中的Date对象</a></h3><p>非常详细的介绍了时区、时间标准等概念和规范，同时结合 JS 中的使用和常见问题可以更深刻地理解 Date 对象与时区。</p>\n<h3 id=\"深拷贝的终极探索\"><a href=\"#深拷贝的终极探索\" class=\"headerlink\" title=\"深拷贝的终极探索\"></a><a href=\"https://yanhaijing.com/javascript/2018/10/10/clone-deep/\" target=\"_blank\" rel=\"noopener\">深拷贝的终极探索</a></h3><p>深拷贝和浅拷贝是面试高频题目，作者首先列举了一些深拷贝的实现方案，同时通过这些方案存在的问题引出他所理解的最终解决方案</p>\n<h3 id=\"WebAudio-Deep-Note-part-2-play-a-sound\"><a href=\"#WebAudio-Deep-Note-part-2-play-a-sound\" class=\"headerlink\" title=\"WebAudio Deep Note, part 2: play a sound\"></a><a href=\"https://www.phpied.com/webaudio-deep-note-part-2-play-a-sound/\" target=\"_blank\" rel=\"noopener\">WebAudio Deep Note, part 2: play a sound</a></h3><p>介绍了 iOS 上关于音频的一些知识</p>\n<h3 id=\"你不知道的-JSON-stringify-的威力\"><a href=\"#你不知道的-JSON-stringify-的威力\" class=\"headerlink\" title=\"你不知道的 JSON.stringify() 的威力\"></a><a href=\"https://github.com/NieZhuZhu/Blog/issues/1\" target=\"_blank\" rel=\"noopener\">你不知道的 JSON.stringify() 的威力</a></h3><p>作者详细介绍了<code>JSON.stringify()</code>的九大特性，同时还介绍了<code>JSON.stringify()</code>中经常被人忽略的第二个和第三个参数，相信看完之后对<code>JSON.stringify()</code>会有更深入的理解。</p>\n<h3 id=\"忍者代码\"><a href=\"#忍者代码\" class=\"headerlink\" title=\"忍者代码\"></a><a href=\"https://zh.javascript.info/ninja-code#zong-jie\" target=\"_blank\" rel=\"noopener\">忍者代码</a></h3><p>过去的程序员忍者使用这些技巧，来使代码维护者的头脑更加敏锐。<br>代码审查大师在测试任务中寻找它们。<br>一些新入门的开发者有时候甚至比忍者程序员能够更好地使用它们。<br>仔细阅读本文，找出你是谁 —— 一个忍者、一个新手、或者一个代码审查者？</p>\n<h3 id=\"《编程时间简史系列》JavaScript-模块化的历史进程\"><a href=\"#《编程时间简史系列》JavaScript-模块化的历史进程\" class=\"headerlink\" title=\"《编程时间简史系列》JavaScript 模块化的历史进程\"></a><a href=\"https://segmentfault.com/a/1190000023017398\" target=\"_blank\" rel=\"noopener\">《编程时间简史系列》JavaScript 模块化的历史进程</a></h3><p>模块化是前端绕不开的话题，而本篇文章不涉及任何前端代码，只谈历史故事，可以作为模块化开发的了解材料</p>\n<h3 id=\"深入理解-TypeScript\"><a href=\"#深入理解-TypeScript\" class=\"headerlink\" title=\"深入理解 TypeScript\"></a><a href=\"https://jkchao.github.io/typescript-book-chinese/\" target=\"_blank\" rel=\"noopener\">深入理解 TypeScript</a></h3><p><a href=\"https://github.com/basarat/typescript-book/\" target=\"_blank\" rel=\"noopener\">《TypeScript Deep Dive》</a> 的中文翻译版</p>\n<h3 id=\"【动画演示】：事件循环-形象深动-JavaScript\"><a href=\"#【动画演示】：事件循环-形象深动-JavaScript\" class=\"headerlink\" title=\"【动画演示】：事件循环 形象深动(JavaScript)\"></a><a href=\"https://juejin.im/post/5e0a8d57f265da33a55fb33c\" target=\"_blank\" rel=\"noopener\">【动画演示】：事件循环 形象深动(JavaScript)</a></h3><p>通过几张动图 + 讲解非常生动形象的讲解了 JS 中的事件循环这一重要概念。</p>\n<h3 id=\"一次弄懂Event-Loop（彻底解决此类面试问题）\"><a href=\"#一次弄懂Event-Loop（彻底解决此类面试问题）\" class=\"headerlink\" title=\"一次弄懂Event Loop（彻底解决此类面试问题）\"></a><a href=\"https://juejin.im/post/5c3d8956e51d4511dc72c200\" target=\"_blank\" rel=\"noopener\">一次弄懂Event Loop（彻底解决此类面试问题）</a></h3><p>Event Loop 即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。本文内容较长，通过实例对事件循环概念和应用进行了讲解，图文并茂，看起来其实并不枯燥。</p>\n<h3 id=\"统一回复《怎么学JavaScript？》\"><a href=\"#统一回复《怎么学JavaScript？》\" class=\"headerlink\" title=\"统一回复《怎么学JavaScript？》\"></a><a href=\"http://www.qdfuns.com/notes/17398/d3f6dd40e2d3ff15b209810dfa98be0b:storey-71.html\" target=\"_blank\" rel=\"noopener\">统一回复《怎么学JavaScript？》</a></h3><p>作者通过自己的经历告诉大家：如何学习前端。这是一篇很不错的前端入门文章，作者推荐了一些前端方面的书籍，同时还注明了这些书籍适合什么时候阅读以及适合怎样阅读，建议仍然不知道如何学前端的你好好看一下这篇文章</p>\n<h3 id=\"javascript-的-12-个怪癖（quirks）\"><a href=\"#javascript-的-12-个怪癖（quirks）\" class=\"headerlink\" title=\"javascript 的 12 个怪癖（quirks）\"></a><a href=\"http://justjavac.com/javascript/2013/04/08/12-javascript-quirks.html\" target=\"_blank\" rel=\"noopener\">javascript 的 12 个怪癖（quirks）</a></h3><p>实际上 javascript 是一个相当简洁的语言，但是也难免会有一些怪癖（quirks）。这是作者翻译的国外一个开发者的系列文章，同时在我发布之前（2017-8-7），作者还没有翻译团队，如果有英语比较好的前端小伙伴，欢迎加入翻译的队伍中，像我这种英语“战五渣”表示只能“拿来”了。。</p>\n<h3 id=\"80-应聘者都不及格的-JS-面试题\"><a href=\"#80-应聘者都不及格的-JS-面试题\" class=\"headerlink\" title=\"80% 应聘者都不及格的 JS 面试题\"></a><a href=\"https://juejin.im/post/58cf180b0ce4630057d6727c\" target=\"_blank\" rel=\"noopener\">80% 应聘者都不及格的 JS 面试题</a></h3><p>从最简单的 setTimeout() 执行队列，到自执行函数产生闭包，再到 ES6 中的 promise 以及 ES7 中的 async 和 await，作者通过一道不断延伸出来的js面试题讲解了在面试中经常遇到的问题，同时对以上的这些知识点进行了概括总结</p>\n<h3 id=\"翻译-We-have-a-problem-with-promises\"><a href=\"#翻译-We-have-a-problem-with-promises\" class=\"headerlink\" title=\"[翻译] We have a problem with promises\"></a><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">[翻译] We have a problem with promises</a></h3><p>promise 一直是被认为判断一名“前端工程师”是否仍然处在“初级”的利器，而这篇文章通过 promise 相关的四段代码对 promise 进行了深入剖析，这是一篇译文，英文原文可以<a href=\"http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看</p>\n<h3 id=\"学用-JavaScript-设计模式\"><a href=\"#学用-JavaScript-设计模式\" class=\"headerlink\" title=\"学用 JavaScript 设计模式\"></a><a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/constructor-mode.html\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式</a></h3><p>设计模式的概念很早之前就有了，而 JS 虽然之前一直被认为是“做网页”的语言，但是JS中也有设计模式的思想，相信看完这个系列的文章之后，你会对 JS 有更加深入的理解，该系列文章对于没有“面向对象”语言基础的童鞋来说可能会有些难度，建议在看的过程中及时查阅其他资料。</p>\n<h3 id=\"ajax跨域，这应该是最全的解决方案了\"><a href=\"#ajax跨域，这应该是最全的解决方案了\" class=\"headerlink\" title=\"ajax跨域，这应该是最全的解决方案了\"></a><a href=\"https://segmentfault.com/a/1190000012469713\" target=\"_blank\" rel=\"noopener\">ajax跨域，这应该是最全的解决方案了</a></h3><p>看题目就很屌，恩。。</p>\n<h3 id=\"jQuery的document-ready与-onload事件——你真的思考过吗？\"><a href=\"#jQuery的document-ready与-onload事件——你真的思考过吗？\" class=\"headerlink\" title=\"jQuery的document ready与 onload事件——你真的思考过吗？\"></a><a href=\"https://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></h3><p>虽然题目看似和 jQuery 关系很大，但其实作者探究了很多 JS 相关问题，包括加载顺序以及 load 事件的产生原因，内容短小精悍，值得一看。下面这些问题是作者在文中所阐述探索的：</p>\n<ol>\n<li>window.onload 到底是什么加载完触发？</li>\n<li>body 为什么会有 onload 事件？</li>\n<li>为什么是 window.onload，而不是 document.onload？</li>\n<li>document ready到底是什么 ready，DOM 渲染完成？</li>\n<li>jQuery 怎么实现 $(document).ready？</li>\n<li>jQuery 的 ready，还能 ready 什么？</li>\n<li>jQuery 的 document ready 就一定比 window.onload 快吗？</li>\n<li>为什么外部 script 文件放页面内容后面好，是一定的吗？</li>\n</ol>\n<h3 id=\"10-分钟了解-JS-堆、栈以及事件循环的概念\"><a href=\"#10-分钟了解-JS-堆、栈以及事件循环的概念\" class=\"headerlink\" title=\"10 分钟了解 JS 堆、栈以及事件循环的概念\"></a><a href=\"https://github.com/BooheeFE/weekly/issues/2\" target=\"_blank\" rel=\"noopener\">10 分钟了解 JS 堆、栈以及事件循环的概念</a></h3><p>作者通过 <code>JS的内存机制</code>以及<code>事件机制</code>和<code>大量的（例子）</code>来讲解栈、堆究竟是个什么玩意。概念比较多，不用死读，把所有的实例代码手敲一遍就很清楚了，作者讲的很透彻，该文章来自于<a href=\"https://github.com/BooheeFE/weekly\" target=\"_blank\" rel=\"noopener\">薄荷前端周刊</a>，该周刊发布的文章都蛮不错的，建议阅读~</p>\n<h3 id=\"7-分钟理解-JS-的节流、防抖及使用场景\"><a href=\"#7-分钟理解-JS-的节流、防抖及使用场景\" class=\"headerlink\" title=\"7 分钟理解 JS 的节流、防抖及使用场景\"></a><a href=\"https://juejin.im/post/5b8de829f265da43623c4261?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">7 分钟理解 JS 的节流、防抖及使用场景</a></h3><p>防抖和节流是两个很重要也经常会用到的知识点，这篇文章的重点并不是介绍它们的实现原理，而是着眼于它们的应用效果和应用场景，文中对于防抖和节流产生效果的总结很通俗易懂：</p>\n<blockquote>\n<p>函数防抖就是法师发技能的时候要读条，技能读条没完再按技能就会重新读条。<br>函数节流就是 fps 游戏的射速，就算一直按着鼠标射击，也只会在规定射速内射出子弹。</p>\n</blockquote>\n<h3 id=\"精读-The-Cost-of-JavaScript\"><a href=\"#精读-The-Cost-of-JavaScript\" class=\"headerlink\" title=\"精读 The Cost of JavaScript\"></a><a href=\"https://zhuanlan.zhihu.com/p/41292532\" target=\"_blank\" rel=\"noopener\">精读 The Cost of JavaScript</a></h3><p>Addy 在 <a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\" target=\"_blank\" rel=\"noopener\">The Cost of JavaScript In 2018</a>一文中分享了在保证用户友好交互体验的前提下如何高效分发 JavaScript 的开发经验，而我现在推荐的这篇文章是一篇导读文章，原文作者首先将全文的内容压缩成几条观点总结出来，之后从用户体验为 Web 带来的变化开始说起，到 JavaScript 的成本有哪些、它们为何如此高昂、如何降低开销以及持续集成，全文形成一个非常完整的优化流程：</p>\n<ol>\n<li>写在开头的话</li>\n<li>膨胀的 JavaScript 与 Web 现状</li>\n<li>JavaScript 的成本所在</li>\n<li>页面交互性解释与建议</li>\n<li>处理 JavaScript 成本为何如此昂贵</li>\n<li>千差万别的移动用户与应对策略</li>\n<li>分发更少 JavaScript 的常见技巧</li>\n<li>持续集成四部曲</li>\n</ol>\n<h3 id=\"深入理解javascript原型和闭包系列\"><a href=\"#深入理解javascript原型和闭包系列\" class=\"headerlink\" title=\"深入理解javascript原型和闭包系列\"></a><a href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包系列</a></h3><p>本系列有 16 篇文章，外加两篇后补的，一共 18 篇文章。将原型和闭包相关知识都进行了讲解，知识点很全，图文并茂。</p>\n<h3 id=\"JavaScript-模块化七日谈\"><a href=\"#JavaScript-模块化七日谈\" class=\"headerlink\" title=\"JavaScript 模块化七日谈\"></a><a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"noopener\">JavaScript 模块化七日谈</a></h3><p>作者以 slide 的形式讲解了 JS 模块化的发展历程，目录：</p>\n<ul>\n<li>第一日 上古时期 <em><strong>Module?</strong></em> 从设计模式说起</li>\n<li>第二日 石器时代 <em><strong>Script Loader</strong></em> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <em><strong>Module Loader</strong></em> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <em><strong>CommonJS</strong></em> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <em><strong>AMD/CMD</strong></em> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <em><strong>Browserify/Webpack</strong></em> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <em><strong>ES6 Module</strong></em> 最后的战役</li>\n</ul>\n<h3 id=\"写了-10-年-Javascript-未必全了解的连续赋值运算\"><a href=\"#写了-10-年-Javascript-未必全了解的连续赋值运算\" class=\"headerlink\" title=\"写了 10 年 Javascript 未必全了解的连续赋值运算\"></a><a href=\"https://yanhaijing.com/javascript/2012/04/05/javascript-continuous-assignment-operator/\" target=\"_blank\" rel=\"noopener\">写了 10 年 Javascript 未必全了解的连续赋值运算</a></h3><p><code>a.x = a = {n:2}</code> 是一个连续赋值表达式。 这个连续赋值表达式在引擎内部究竟发生了什么？是如何解释的？作者从这一问题出发，对 JS 中的变量定义规则进行了研究。</p>\n<h3 id=\"每个-JavaScript-工程师都应懂的33个概念\"><a href=\"#每个-JavaScript-工程师都应懂的33个概念\" class=\"headerlink\" title=\"每个 JavaScript 工程师都应懂的33个概念\"></a><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">每个 JavaScript 工程师都应懂的33个概念</a></h3><p>这篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。 由于原版资源都要翻墙，所以作者创立了一个中文版，附上关于 JS 中的 33 个概念在国内的一些文章和视频。所以这可以看做是一个文章 / 视频集合，闲来无事的时候可以看一下巩固一下基础概念。</p>\n<h3 id=\"前端网老姚浅谈：怎么学-JavaScript？\"><a href=\"#前端网老姚浅谈：怎么学-JavaScript？\" class=\"headerlink\" title=\"前端网老姚浅谈：怎么学 JavaScript？\"></a><a href=\"https://zhuanlan.zhihu.com/p/23265155\" target=\"_blank\" rel=\"noopener\">前端网老姚浅谈：怎么学 JavaScript？</a></h3><p>前端老姚对如何学习JS这一问题的解答，主要回答了以下几个问题：</p>\n<ul>\n<li>看书有啥好处</li>\n<li>看什么书</li>\n<li>怎么看书</li>\n<li>看书的层次</li>\n<li>利用源码进行学习</li>\n<li>时间、兴趣等问题</li>\n</ul>\n<h3 id=\"Effective-JavaScript\"><a href=\"#Effective-JavaScript\" class=\"headerlink\" title=\"Effective JavaScript\"></a><a href=\"https://github.com/dreamapplehappy/effective-javascript\" target=\"_blank\" rel=\"noopener\">Effective JavaScript</a></h3><p>关于原生 JS 的 68 个实例，理论上,实践过下面的 68 个项目之后,你的JS能力应该有一个质的飞跃</p>\n<h3 id=\"how-javascript-works\"><a href=\"#how-javascript-works\" class=\"headerlink\" title=\"how javascript works\"></a><a href=\"https://github.com/Troland/how-javascript-works\" target=\"_blank\" rel=\"noopener\">how javascript works</a></h3><p>本文是翻译介绍 JavaScript 的工作原理的，该系列原文还在更新中，原文见<a href=\"https://blog.sessionstack.com/tagged/tutorial\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"JavaScript-This-的六道坎\"><a href=\"#JavaScript-This-的六道坎\" class=\"headerlink\" title=\"JavaScript This 的六道坎\"></a><a href=\"https://blog.crimx.com/2016/05/12/understanding-this/\" target=\"_blank\" rel=\"noopener\">JavaScript This 的六道坎</a></h3><p>鉴于 this 风骚的运作方式，对 this 的理解是永不过时的话题，该文试图通过将其大卸六块来钉住这个磨人的妖精。通过六个成语对 this 进行了剖析讲解，非常清晰明了。</p>\n<h3 id=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"><a href=\"#从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\" class=\"headerlink\" title=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"></a><a href=\"http://www.dailichun.com/2018/01/21/js_singlethread_eventloop.html\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></h3><ol>\n<li>展现形式：由于是属于系统梳理型，就没有由浅入深了，而是从头到尾的梳理知识体系，重点是将关键节点的知识点串联起来，而不是仅仅剖析某一部分知识。</li>\n<li>内容是：从浏览器进程，再到浏览器内核运行，再到 JS 引擎单线程，再到 JS 事件循环机制，从头到尾系统的梳理一遍，摆脱碎片化，形成一个知识体系</li>\n<li>目标是：看完这篇文章后，对浏览器多进程，JS 单线程，JS 事件循环机制这些都能有一定理解，有一个知识体系骨架，而不是似懂非懂的感觉。</li>\n<li>另外，本文适合有一定经验的前端人员，<strong>新手请规避</strong>，避免受到过多的概念冲击。可以先存起来，有了一定理解后再看，也可以分成多批次观看，避免过度疲劳。</li>\n</ol>\n<p><strong>大纲</strong>：</p>\n<ul>\n<li>区分进程和线程</li>\n<li>浏览器是多进程的<ul>\n<li>浏览器都包含哪些进程？</li>\n<li>浏览器多进程的优势</li>\n<li>重点是浏览器内核（渲染进程）</li>\n<li>Browser进程和浏览器内核（Renderer进程）的通信过程</li>\n</ul>\n</li>\n<li>梳理浏览器内核中线程之间的关系<ul>\n<li>GUI渲染线程与JS引擎线程互斥</li>\n<li>JS阻塞页面加载</li>\n<li>WebWorker，JS的多线程？</li>\n<li>WebWorker与SharedWorker</li>\n</ul>\n</li>\n<li>简单梳理下浏览器渲染流程<ul>\n<li>load事件与DOMContentLoaded事件的先后</li>\n<li>css加载是否会阻塞dom树渲染？</li>\n<li>普通图层和复合图层</li>\n</ul>\n</li>\n<li>从Event Loop谈JS的运行机制<ul>\n<li>事件循环机制进一步补充</li>\n<li>单独说说定时器</li>\n<li>setTimeout而不是setInterval</li>\n</ul>\n</li>\n<li>事件循环进阶：macrotask与microtask</li>\n<li>写在最后的话</li>\n</ul>\n<h3 id=\"关于-Promise-的-9-个提示\"><a href=\"#关于-Promise-的-9-个提示\" class=\"headerlink\" title=\"关于 Promise 的 9 个提示\"></a><a href=\"https://mp.weixin.qq.com/s/1ILwZ6BecgBFA49c4YvTRQ\" target=\"_blank\" rel=\"noopener\">关于 Promise 的 9 个提示</a></h3><p>通过 9 个鲜活的案例，我们可以加深对 Promise 的理解</p>\n","more":"<h3 id=\"时区与JS中的Date对象\"><a href=\"#时区与JS中的Date对象\" class=\"headerlink\" title=\"时区与JS中的Date对象\"></a><a href=\"https://juejin.im/post/6844903885505576968\" target=\"_blank\" rel=\"noopener\">时区与JS中的Date对象</a></h3><p>非常详细的介绍了时区、时间标准等概念和规范，同时结合 JS 中的使用和常见问题可以更深刻地理解 Date 对象与时区。</p>\n<h3 id=\"深拷贝的终极探索\"><a href=\"#深拷贝的终极探索\" class=\"headerlink\" title=\"深拷贝的终极探索\"></a><a href=\"https://yanhaijing.com/javascript/2018/10/10/clone-deep/\" target=\"_blank\" rel=\"noopener\">深拷贝的终极探索</a></h3><p>深拷贝和浅拷贝是面试高频题目，作者首先列举了一些深拷贝的实现方案，同时通过这些方案存在的问题引出他所理解的最终解决方案</p>\n<h3 id=\"WebAudio-Deep-Note-part-2-play-a-sound\"><a href=\"#WebAudio-Deep-Note-part-2-play-a-sound\" class=\"headerlink\" title=\"WebAudio Deep Note, part 2: play a sound\"></a><a href=\"https://www.phpied.com/webaudio-deep-note-part-2-play-a-sound/\" target=\"_blank\" rel=\"noopener\">WebAudio Deep Note, part 2: play a sound</a></h3><p>介绍了 iOS 上关于音频的一些知识</p>\n<h3 id=\"你不知道的-JSON-stringify-的威力\"><a href=\"#你不知道的-JSON-stringify-的威力\" class=\"headerlink\" title=\"你不知道的 JSON.stringify() 的威力\"></a><a href=\"https://github.com/NieZhuZhu/Blog/issues/1\" target=\"_blank\" rel=\"noopener\">你不知道的 JSON.stringify() 的威力</a></h3><p>作者详细介绍了<code>JSON.stringify()</code>的九大特性，同时还介绍了<code>JSON.stringify()</code>中经常被人忽略的第二个和第三个参数，相信看完之后对<code>JSON.stringify()</code>会有更深入的理解。</p>\n<h3 id=\"忍者代码\"><a href=\"#忍者代码\" class=\"headerlink\" title=\"忍者代码\"></a><a href=\"https://zh.javascript.info/ninja-code#zong-jie\" target=\"_blank\" rel=\"noopener\">忍者代码</a></h3><p>过去的程序员忍者使用这些技巧，来使代码维护者的头脑更加敏锐。<br>代码审查大师在测试任务中寻找它们。<br>一些新入门的开发者有时候甚至比忍者程序员能够更好地使用它们。<br>仔细阅读本文，找出你是谁 —— 一个忍者、一个新手、或者一个代码审查者？</p>\n<h3 id=\"《编程时间简史系列》JavaScript-模块化的历史进程\"><a href=\"#《编程时间简史系列》JavaScript-模块化的历史进程\" class=\"headerlink\" title=\"《编程时间简史系列》JavaScript 模块化的历史进程\"></a><a href=\"https://segmentfault.com/a/1190000023017398\" target=\"_blank\" rel=\"noopener\">《编程时间简史系列》JavaScript 模块化的历史进程</a></h3><p>模块化是前端绕不开的话题，而本篇文章不涉及任何前端代码，只谈历史故事，可以作为模块化开发的了解材料</p>\n<h3 id=\"深入理解-TypeScript\"><a href=\"#深入理解-TypeScript\" class=\"headerlink\" title=\"深入理解 TypeScript\"></a><a href=\"https://jkchao.github.io/typescript-book-chinese/\" target=\"_blank\" rel=\"noopener\">深入理解 TypeScript</a></h3><p><a href=\"https://github.com/basarat/typescript-book/\" target=\"_blank\" rel=\"noopener\">《TypeScript Deep Dive》</a> 的中文翻译版</p>\n<h3 id=\"【动画演示】：事件循环-形象深动-JavaScript\"><a href=\"#【动画演示】：事件循环-形象深动-JavaScript\" class=\"headerlink\" title=\"【动画演示】：事件循环 形象深动(JavaScript)\"></a><a href=\"https://juejin.im/post/5e0a8d57f265da33a55fb33c\" target=\"_blank\" rel=\"noopener\">【动画演示】：事件循环 形象深动(JavaScript)</a></h3><p>通过几张动图 + 讲解非常生动形象的讲解了 JS 中的事件循环这一重要概念。</p>\n<h3 id=\"一次弄懂Event-Loop（彻底解决此类面试问题）\"><a href=\"#一次弄懂Event-Loop（彻底解决此类面试问题）\" class=\"headerlink\" title=\"一次弄懂Event Loop（彻底解决此类面试问题）\"></a><a href=\"https://juejin.im/post/5c3d8956e51d4511dc72c200\" target=\"_blank\" rel=\"noopener\">一次弄懂Event Loop（彻底解决此类面试问题）</a></h3><p>Event Loop 即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。本文内容较长，通过实例对事件循环概念和应用进行了讲解，图文并茂，看起来其实并不枯燥。</p>\n<h3 id=\"统一回复《怎么学JavaScript？》\"><a href=\"#统一回复《怎么学JavaScript？》\" class=\"headerlink\" title=\"统一回复《怎么学JavaScript？》\"></a><a href=\"http://www.qdfuns.com/notes/17398/d3f6dd40e2d3ff15b209810dfa98be0b:storey-71.html\" target=\"_blank\" rel=\"noopener\">统一回复《怎么学JavaScript？》</a></h3><p>作者通过自己的经历告诉大家：如何学习前端。这是一篇很不错的前端入门文章，作者推荐了一些前端方面的书籍，同时还注明了这些书籍适合什么时候阅读以及适合怎样阅读，建议仍然不知道如何学前端的你好好看一下这篇文章</p>\n<h3 id=\"javascript-的-12-个怪癖（quirks）\"><a href=\"#javascript-的-12-个怪癖（quirks）\" class=\"headerlink\" title=\"javascript 的 12 个怪癖（quirks）\"></a><a href=\"http://justjavac.com/javascript/2013/04/08/12-javascript-quirks.html\" target=\"_blank\" rel=\"noopener\">javascript 的 12 个怪癖（quirks）</a></h3><p>实际上 javascript 是一个相当简洁的语言，但是也难免会有一些怪癖（quirks）。这是作者翻译的国外一个开发者的系列文章，同时在我发布之前（2017-8-7），作者还没有翻译团队，如果有英语比较好的前端小伙伴，欢迎加入翻译的队伍中，像我这种英语“战五渣”表示只能“拿来”了。。</p>\n<h3 id=\"80-应聘者都不及格的-JS-面试题\"><a href=\"#80-应聘者都不及格的-JS-面试题\" class=\"headerlink\" title=\"80% 应聘者都不及格的 JS 面试题\"></a><a href=\"https://juejin.im/post/58cf180b0ce4630057d6727c\" target=\"_blank\" rel=\"noopener\">80% 应聘者都不及格的 JS 面试题</a></h3><p>从最简单的 setTimeout() 执行队列，到自执行函数产生闭包，再到 ES6 中的 promise 以及 ES7 中的 async 和 await，作者通过一道不断延伸出来的js面试题讲解了在面试中经常遇到的问题，同时对以上的这些知识点进行了概括总结</p>\n<h3 id=\"翻译-We-have-a-problem-with-promises\"><a href=\"#翻译-We-have-a-problem-with-promises\" class=\"headerlink\" title=\"[翻译] We have a problem with promises\"></a><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">[翻译] We have a problem with promises</a></h3><p>promise 一直是被认为判断一名“前端工程师”是否仍然处在“初级”的利器，而这篇文章通过 promise 相关的四段代码对 promise 进行了深入剖析，这是一篇译文，英文原文可以<a href=\"http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看</p>\n<h3 id=\"学用-JavaScript-设计模式\"><a href=\"#学用-JavaScript-设计模式\" class=\"headerlink\" title=\"学用 JavaScript 设计模式\"></a><a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/constructor-mode.html\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式</a></h3><p>设计模式的概念很早之前就有了，而 JS 虽然之前一直被认为是“做网页”的语言，但是JS中也有设计模式的思想，相信看完这个系列的文章之后，你会对 JS 有更加深入的理解，该系列文章对于没有“面向对象”语言基础的童鞋来说可能会有些难度，建议在看的过程中及时查阅其他资料。</p>\n<h3 id=\"ajax跨域，这应该是最全的解决方案了\"><a href=\"#ajax跨域，这应该是最全的解决方案了\" class=\"headerlink\" title=\"ajax跨域，这应该是最全的解决方案了\"></a><a href=\"https://segmentfault.com/a/1190000012469713\" target=\"_blank\" rel=\"noopener\">ajax跨域，这应该是最全的解决方案了</a></h3><p>看题目就很屌，恩。。</p>\n<h3 id=\"jQuery的document-ready与-onload事件——你真的思考过吗？\"><a href=\"#jQuery的document-ready与-onload事件——你真的思考过吗？\" class=\"headerlink\" title=\"jQuery的document ready与 onload事件——你真的思考过吗？\"></a><a href=\"https://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></h3><p>虽然题目看似和 jQuery 关系很大，但其实作者探究了很多 JS 相关问题，包括加载顺序以及 load 事件的产生原因，内容短小精悍，值得一看。下面这些问题是作者在文中所阐述探索的：</p>\n<ol>\n<li>window.onload 到底是什么加载完触发？</li>\n<li>body 为什么会有 onload 事件？</li>\n<li>为什么是 window.onload，而不是 document.onload？</li>\n<li>document ready到底是什么 ready，DOM 渲染完成？</li>\n<li>jQuery 怎么实现 $(document).ready？</li>\n<li>jQuery 的 ready，还能 ready 什么？</li>\n<li>jQuery 的 document ready 就一定比 window.onload 快吗？</li>\n<li>为什么外部 script 文件放页面内容后面好，是一定的吗？</li>\n</ol>\n<h3 id=\"10-分钟了解-JS-堆、栈以及事件循环的概念\"><a href=\"#10-分钟了解-JS-堆、栈以及事件循环的概念\" class=\"headerlink\" title=\"10 分钟了解 JS 堆、栈以及事件循环的概念\"></a><a href=\"https://github.com/BooheeFE/weekly/issues/2\" target=\"_blank\" rel=\"noopener\">10 分钟了解 JS 堆、栈以及事件循环的概念</a></h3><p>作者通过 <code>JS的内存机制</code>以及<code>事件机制</code>和<code>大量的（例子）</code>来讲解栈、堆究竟是个什么玩意。概念比较多，不用死读，把所有的实例代码手敲一遍就很清楚了，作者讲的很透彻，该文章来自于<a href=\"https://github.com/BooheeFE/weekly\" target=\"_blank\" rel=\"noopener\">薄荷前端周刊</a>，该周刊发布的文章都蛮不错的，建议阅读~</p>\n<h3 id=\"7-分钟理解-JS-的节流、防抖及使用场景\"><a href=\"#7-分钟理解-JS-的节流、防抖及使用场景\" class=\"headerlink\" title=\"7 分钟理解 JS 的节流、防抖及使用场景\"></a><a href=\"https://juejin.im/post/5b8de829f265da43623c4261?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">7 分钟理解 JS 的节流、防抖及使用场景</a></h3><p>防抖和节流是两个很重要也经常会用到的知识点，这篇文章的重点并不是介绍它们的实现原理，而是着眼于它们的应用效果和应用场景，文中对于防抖和节流产生效果的总结很通俗易懂：</p>\n<blockquote>\n<p>函数防抖就是法师发技能的时候要读条，技能读条没完再按技能就会重新读条。<br>函数节流就是 fps 游戏的射速，就算一直按着鼠标射击，也只会在规定射速内射出子弹。</p>\n</blockquote>\n<h3 id=\"精读-The-Cost-of-JavaScript\"><a href=\"#精读-The-Cost-of-JavaScript\" class=\"headerlink\" title=\"精读 The Cost of JavaScript\"></a><a href=\"https://zhuanlan.zhihu.com/p/41292532\" target=\"_blank\" rel=\"noopener\">精读 The Cost of JavaScript</a></h3><p>Addy 在 <a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\" target=\"_blank\" rel=\"noopener\">The Cost of JavaScript In 2018</a>一文中分享了在保证用户友好交互体验的前提下如何高效分发 JavaScript 的开发经验，而我现在推荐的这篇文章是一篇导读文章，原文作者首先将全文的内容压缩成几条观点总结出来，之后从用户体验为 Web 带来的变化开始说起，到 JavaScript 的成本有哪些、它们为何如此高昂、如何降低开销以及持续集成，全文形成一个非常完整的优化流程：</p>\n<ol>\n<li>写在开头的话</li>\n<li>膨胀的 JavaScript 与 Web 现状</li>\n<li>JavaScript 的成本所在</li>\n<li>页面交互性解释与建议</li>\n<li>处理 JavaScript 成本为何如此昂贵</li>\n<li>千差万别的移动用户与应对策略</li>\n<li>分发更少 JavaScript 的常见技巧</li>\n<li>持续集成四部曲</li>\n</ol>\n<h3 id=\"深入理解javascript原型和闭包系列\"><a href=\"#深入理解javascript原型和闭包系列\" class=\"headerlink\" title=\"深入理解javascript原型和闭包系列\"></a><a href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包系列</a></h3><p>本系列有 16 篇文章，外加两篇后补的，一共 18 篇文章。将原型和闭包相关知识都进行了讲解，知识点很全，图文并茂。</p>\n<h3 id=\"JavaScript-模块化七日谈\"><a href=\"#JavaScript-模块化七日谈\" class=\"headerlink\" title=\"JavaScript 模块化七日谈\"></a><a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"noopener\">JavaScript 模块化七日谈</a></h3><p>作者以 slide 的形式讲解了 JS 模块化的发展历程，目录：</p>\n<ul>\n<li>第一日 上古时期 <em><strong>Module?</strong></em> 从设计模式说起</li>\n<li>第二日 石器时代 <em><strong>Script Loader</strong></em> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <em><strong>Module Loader</strong></em> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <em><strong>CommonJS</strong></em> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <em><strong>AMD/CMD</strong></em> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <em><strong>Browserify/Webpack</strong></em> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <em><strong>ES6 Module</strong></em> 最后的战役</li>\n</ul>\n<h3 id=\"写了-10-年-Javascript-未必全了解的连续赋值运算\"><a href=\"#写了-10-年-Javascript-未必全了解的连续赋值运算\" class=\"headerlink\" title=\"写了 10 年 Javascript 未必全了解的连续赋值运算\"></a><a href=\"https://yanhaijing.com/javascript/2012/04/05/javascript-continuous-assignment-operator/\" target=\"_blank\" rel=\"noopener\">写了 10 年 Javascript 未必全了解的连续赋值运算</a></h3><p><code>a.x = a = {n:2}</code> 是一个连续赋值表达式。 这个连续赋值表达式在引擎内部究竟发生了什么？是如何解释的？作者从这一问题出发，对 JS 中的变量定义规则进行了研究。</p>\n<h3 id=\"每个-JavaScript-工程师都应懂的33个概念\"><a href=\"#每个-JavaScript-工程师都应懂的33个概念\" class=\"headerlink\" title=\"每个 JavaScript 工程师都应懂的33个概念\"></a><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">每个 JavaScript 工程师都应懂的33个概念</a></h3><p>这篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。 由于原版资源都要翻墙，所以作者创立了一个中文版，附上关于 JS 中的 33 个概念在国内的一些文章和视频。所以这可以看做是一个文章 / 视频集合，闲来无事的时候可以看一下巩固一下基础概念。</p>\n<h3 id=\"前端网老姚浅谈：怎么学-JavaScript？\"><a href=\"#前端网老姚浅谈：怎么学-JavaScript？\" class=\"headerlink\" title=\"前端网老姚浅谈：怎么学 JavaScript？\"></a><a href=\"https://zhuanlan.zhihu.com/p/23265155\" target=\"_blank\" rel=\"noopener\">前端网老姚浅谈：怎么学 JavaScript？</a></h3><p>前端老姚对如何学习JS这一问题的解答，主要回答了以下几个问题：</p>\n<ul>\n<li>看书有啥好处</li>\n<li>看什么书</li>\n<li>怎么看书</li>\n<li>看书的层次</li>\n<li>利用源码进行学习</li>\n<li>时间、兴趣等问题</li>\n</ul>\n<h3 id=\"Effective-JavaScript\"><a href=\"#Effective-JavaScript\" class=\"headerlink\" title=\"Effective JavaScript\"></a><a href=\"https://github.com/dreamapplehappy/effective-javascript\" target=\"_blank\" rel=\"noopener\">Effective JavaScript</a></h3><p>关于原生 JS 的 68 个实例，理论上,实践过下面的 68 个项目之后,你的JS能力应该有一个质的飞跃</p>\n<h3 id=\"how-javascript-works\"><a href=\"#how-javascript-works\" class=\"headerlink\" title=\"how javascript works\"></a><a href=\"https://github.com/Troland/how-javascript-works\" target=\"_blank\" rel=\"noopener\">how javascript works</a></h3><p>本文是翻译介绍 JavaScript 的工作原理的，该系列原文还在更新中，原文见<a href=\"https://blog.sessionstack.com/tagged/tutorial\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"JavaScript-This-的六道坎\"><a href=\"#JavaScript-This-的六道坎\" class=\"headerlink\" title=\"JavaScript This 的六道坎\"></a><a href=\"https://blog.crimx.com/2016/05/12/understanding-this/\" target=\"_blank\" rel=\"noopener\">JavaScript This 的六道坎</a></h3><p>鉴于 this 风骚的运作方式，对 this 的理解是永不过时的话题，该文试图通过将其大卸六块来钉住这个磨人的妖精。通过六个成语对 this 进行了剖析讲解，非常清晰明了。</p>\n<h3 id=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"><a href=\"#从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\" class=\"headerlink\" title=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"></a><a href=\"http://www.dailichun.com/2018/01/21/js_singlethread_eventloop.html\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></h3><ol>\n<li>展现形式：由于是属于系统梳理型，就没有由浅入深了，而是从头到尾的梳理知识体系，重点是将关键节点的知识点串联起来，而不是仅仅剖析某一部分知识。</li>\n<li>内容是：从浏览器进程，再到浏览器内核运行，再到 JS 引擎单线程，再到 JS 事件循环机制，从头到尾系统的梳理一遍，摆脱碎片化，形成一个知识体系</li>\n<li>目标是：看完这篇文章后，对浏览器多进程，JS 单线程，JS 事件循环机制这些都能有一定理解，有一个知识体系骨架，而不是似懂非懂的感觉。</li>\n<li>另外，本文适合有一定经验的前端人员，<strong>新手请规避</strong>，避免受到过多的概念冲击。可以先存起来，有了一定理解后再看，也可以分成多批次观看，避免过度疲劳。</li>\n</ol>\n<p><strong>大纲</strong>：</p>\n<ul>\n<li>区分进程和线程</li>\n<li>浏览器是多进程的<ul>\n<li>浏览器都包含哪些进程？</li>\n<li>浏览器多进程的优势</li>\n<li>重点是浏览器内核（渲染进程）</li>\n<li>Browser进程和浏览器内核（Renderer进程）的通信过程</li>\n</ul>\n</li>\n<li>梳理浏览器内核中线程之间的关系<ul>\n<li>GUI渲染线程与JS引擎线程互斥</li>\n<li>JS阻塞页面加载</li>\n<li>WebWorker，JS的多线程？</li>\n<li>WebWorker与SharedWorker</li>\n</ul>\n</li>\n<li>简单梳理下浏览器渲染流程<ul>\n<li>load事件与DOMContentLoaded事件的先后</li>\n<li>css加载是否会阻塞dom树渲染？</li>\n<li>普通图层和复合图层</li>\n</ul>\n</li>\n<li>从Event Loop谈JS的运行机制<ul>\n<li>事件循环机制进一步补充</li>\n<li>单独说说定时器</li>\n<li>setTimeout而不是setInterval</li>\n</ul>\n</li>\n<li>事件循环进阶：macrotask与microtask</li>\n<li>写在最后的话</li>\n</ul>\n<h3 id=\"关于-Promise-的-9-个提示\"><a href=\"#关于-Promise-的-9-个提示\" class=\"headerlink\" title=\"关于 Promise 的 9 个提示\"></a><a href=\"https://mp.weixin.qq.com/s/1ILwZ6BecgBFA49c4YvTRQ\" target=\"_blank\" rel=\"noopener\">关于 Promise 的 9 个提示</a></h3><p>通过 9 个鲜活的案例，我们可以加深对 Promise 的理解</p>\n","categories":[{"name":"推荐","path":"api/categories/推荐.json"}],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"}]}