{"title":"读书笔记-TypeScript入门教程","slug":"读书笔记-TypeScript入门教程","date":"2019-04-01T20:06:15.000Z","updated":"2025-01-03T12:32:52.486Z","comments":true,"path":"api/articles/读书笔记-TypeScript入门教程.json","excerpt":null,"covers":null,"content":"<p><a href=\"https://ts.xcatliu.com/\">TypeScript 入门教程</a>笔记，总结了一些需要额外注意的点，过滤掉了一些基础知识</p>\n<h2 id=\"Hello-TypeScript\"><a href=\"#Hello-TypeScript\" class=\"headerlink\" title=\"Hello TypeScript\"></a>Hello TypeScript</h2><ol>\n<li>TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。但即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</li>\n</ol>\n<blockquote>\n<p>如果要在报错的时候终止 js 文件的生成，可以在 tsconfig.json 中配置 noEmitOnError 即可。</p>\n</blockquote>\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><ol>\n<li>使用构造函数 Boolean 创造的对象不是布尔值：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdByNewBoolean</span>: <span class=\"built_in\">boolean</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(1,5): error TS2322: Type &#x27;Boolean&#x27; is not assignable to type &#x27;boolean&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>事实上 new Boolean() 返回的是一个 Boolean 对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdByNewBoolean</span>: <span class=\"title class_\">Boolean</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>直接调用 Boolean 也可以返回一个 boolean 类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdByBoolean</span>: <span class=\"built_in\">boolean</span> = <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>在 TypeScript 中，<code>boolean</code> 是 JavaScript 中的基本类型，而 <code>Boolean</code> 是 JavaScript 中的构造函数。</p>\n<ol start=\"2\">\n<li><code>0b1010</code> 和 <code>0o744</code> 是 ES6 中的二进制和八进制表示法，它们会被编译为十进制数字：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 中的二进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">binaryLiteral</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"comment\">// ES6 中的八进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">octalLiteral</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 中的二进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> binaryLiteral = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// ES6 中的八进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> octalLiteral = <span class=\"number\">484</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>JavaScript</code> 没有空值（Void）的概念，在 <code>TypeScript</code> 中，可以用 <code>void</code> 表示没有任何返回值的函数：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">alertName</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;My name is Tom&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明一个 <code>void</code> 类型的变量没有什么用，因为你只能将它赋值为 <code>undefined</code> 和 <code>null</code>：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p><code>undefined</code> 类型的变量只能被赋值为 <code>undefined</code>，<code>null</code> 类型的变量只能被赋值为 <code>null</code></p>\n</li>\n<li><p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这样也不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = u;</span><br></pre></td></tr></table></figure>\n<h2 id=\"任意值\"><a href=\"#任意值\" class=\"headerlink\" title=\"任意值\"></a>任意值</h2><ol>\n<li><p>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</p>\n</li>\n<li><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> something;</span><br><span class=\"line\">something = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">something = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">something.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">something</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">something = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">something = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">something.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型推论\"><a href=\"#类型推论\" class=\"headerlink\" title=\"类型推论\"></a>类型推论</h2><ol>\n<li>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。以下代码虽然没有指定类型，但是会在编译的时候报错：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>; <span class=\"comment\">// 等价于 let myFavoriteNumber: string = &#x27;seven&#x27;;</span></span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(2,1): error TS2322: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><ol>\n<li>联合类型（Union Types）表示取值可以为多种类型中的一种。联合类型使用 <code>|</code> 分隔每个类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNumber</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\"><span class=\"attr\">something</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(2,22): error TS2339: Property &#x27;length&#x27; does not exist on type &#x27;string | number&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Property &#x27;length&#x27; does not exist on type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>上例中，<code>length</code> 不是 <code>string</code> 和 <code>number</code> 的共有属性，所以会报错。</p>\n<h2 id=\"对象的类型——接口\"><a href=\"#对象的类型——接口\" class=\"headerlink\" title=\"对象的类型——接口\"></a>对象的类型——接口</h2><ol>\n<li>赋值的时候，变量的形状必须和接口的形状保持一致：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(6,5): error TS2322: Type &#x27;&#123; name: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Property &#x27;age&#x27; is missing in type &#x27;&#123; name: string; &#125;&#x27;.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(9,5): error TS2322: Type &#x27;&#123; name: string; age: number; gender: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Object literal may only specify known properties, and &#x27;gender&#x27; does not exist in type &#x27;Person&#x27;.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>可选属性用 <code>?</code> 表示：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>任意属性用 <code>[]</code> 表示：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>[propName: string]</code> 定义了任意属性取 string 类型的值。需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(3,5): error TS2411: Property &#x27;age&#x27; of type &#x27;number&#x27; is not assignable to string index type &#x27;string&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">// index.ts(7,5): error TS2322: Type &#x27;&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Index signatures are incompatible.</span></span><br><span class=\"line\"><span class=\"comment\">//     Type &#x27;string | number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//       Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。</p>\n<ol start=\"4\">\n<li>只读属性用 <code>readonly</code> 表示：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">89757</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">tom.<span class=\"property\">id</span> = <span class=\"number\">9527</span>;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(14,5): error TS2540: Cannot assign to &#x27;id&#x27; because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><ol>\n<li>在 TypeScript 中，数组类型有多种定义方式，比较灵活：</li>\n</ol>\n<ul>\n<li>「类型 + 方括号」表示法：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组泛型：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用接口表示：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NumberArray</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">index</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"title class_\">NumberArray</span> = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<p><code>NumberArray</code> 表示：只要 index 的类型是 number，那么值的类型必须是 number。</p>\n<ol start=\"2\">\n<li>类数组（Array-like Object）不是数组类型，比如 <code>arguments</code>；常见的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">args</span>: <span class=\"title class_\">IArguments</span> = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><ol>\n<li>函数表达式：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySum</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注意不要混淆了 TypeScript 中的 =&gt; 和 ES6 中的 =&gt;。在 TypeScript 的类型定义中，=&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<ol start=\"2\">\n<li>用接口定义函数</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>可选参数必须在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\"><span class=\"attr\">firstName</span>?: <span class=\"built_in\">string</span>, <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\"><span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>剩余参数是一个数组。所以我们可以用数组的类型来定义它：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\"><span class=\"attr\">array</span>: <span class=\"built_in\">any</span>[], ...<span class=\"attr\">items</span>: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">    items.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        array.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，rest 参数只能是最后一个参数</p>\n</blockquote>\n<ol start=\"6\">\n<li>我们可以使用重载定义多个 reverse 的函数类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上例中，我们重复定义了多次函数 reverse，前几次都是函数定义，最后一次是函数实现。</p>\n<blockquote>\n<p>注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n</blockquote>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>\n<ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;类型&gt;值</span><br></pre></td></tr></table></figure>\n<p>或：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值 <span class=\"keyword\">as</span> 类型</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须用后一种。</p>\n</blockquote>\n<ol start=\"2\">\n<li>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\"><span class=\"attr\">something</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;<span class=\"built_in\">boolean</span>&gt;something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(2,10): error TS2352: Type &#x27;string | number&#x27; cannot be converted to type &#x27;boolean&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Type &#x27;number&#x27; is not comparable to type &#x27;boolean&#x27;.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p>\n<ol>\n<li>比如使用 <code>declare var</code> 来定义 <code>jQuery</code> 的类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">var</span> <span class=\"attr\">jQuery</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">selector</span>: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"><span class=\"title function_\">jQuery</span>(<span class=\"string\">&#x27;#foo&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>上例中，<code>declare var</code> 并没有真的定义一个变量，只是定义了全局变量 <code>jQuery</code> 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。</p>\n<ol start=\"2\">\n<li><p>声明文件必需以 <code>.d.ts</code> 为后缀。</p>\n</li>\n<li><p>推荐使用 <code>@types</code> 统一管理第三方库的声明文件。以 jQuery 为例：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/jquery --save-dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以在<a href=\"http://microsoft.github.io/TypeSearch/\">这个页面</a>搜索你需要的声明文件。</p>\n</blockquote>\n<ol start=\"4\">\n<li>全局变量的声明文件主要有以下几种语法：</li>\n</ol>\n<ul>\n<li><code>declare var</code> 声明全局变量</li>\n<li><code>declare function</code> 声明全局方法</li>\n<li><code>declare class</code> 声明全局类</li>\n<li><code>declare enum</code> 声明全局枚举类型</li>\n<li><code>declare namespace</code> 声明全局对象（含有子属性）</li>\n<li><code>interface</code> 和 <code>type</code> 声明全局类型</li>\n</ul>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><ol>\n<li><a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/lib\">TypeScript 核心库的定义文件</a>中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</li>\n</ol>\n<blockquote>\n<p>注意，TypeScript 核心库的定义中不包含 Node.js 部分。</p>\n</blockquote>\n<ol start=\"2\">\n<li>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名用来给一个类型起个新名字（类型别名常用于联合类型）：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameResolver</span> = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrResolver</span> = <span class=\"title class_\">Name</span> | <span class=\"title class_\">NameResolver</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"><span class=\"attr\">n</span>: <span class=\"title class_\">NameOrResolver</span></span>): <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串字面量类型\"><a href=\"#字符串字面量类型\" class=\"headerlink\" title=\"字符串字面量类型\"></a>字符串字面量类型</h2><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EventNames</span> = <span class=\"string\">&#x27;click&#x27;</span> | <span class=\"string\">&#x27;scroll&#x27;</span> | <span class=\"string\">&#x27;mousemove&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>上例中，我们使用 type 定了一个字符串字面量类型 EventNames，它只能取三种字符串中的一种。</p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">xcatliu</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&#x27;Xcat Liu&#x27;</span>, <span class=\"number\">25</span>];</span><br></pre></td></tr></table></figure>\n<ol>\n<li>当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">xcatliu</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">xcatliu = [<span class=\"string\">&#x27;Xcat Liu&#x27;</span>, <span class=\"number\">25</span>];</span><br><span class=\"line\">xcatliu.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;http://xcatliu.com/&#x27;</span>);</span><br><span class=\"line\">xcatliu.<span class=\"title function_\">push</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(4,14): error TS2345: Argument of type &#x27;boolean&#x27; is not assignable to parameter of type &#x27;string | number&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Type &#x27;boolean&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><ol>\n<li>使用 static 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">isAnimal</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"title function_\">isAnimal</span>(a); <span class=\"comment\">// true</span></span><br><span class=\"line\">a.<span class=\"title function_\">isAnimal</span>(a); <span class=\"comment\">// TypeError: a.isAnimal is not a function</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 public、private 和 protected：</li>\n</ol>\n<ul>\n<li>public 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的</li>\n<li>private 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li>\n<li>protected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的</li>\n</ul>\n","more":"<p><a href=\"https://ts.xcatliu.com/\">TypeScript 入门教程</a>笔记，总结了一些需要额外注意的点，过滤掉了一些基础知识</p>\n<h2 id=\"Hello-TypeScript\"><a href=\"#Hello-TypeScript\" class=\"headerlink\" title=\"Hello TypeScript\"></a>Hello TypeScript</h2><ol>\n<li>TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。但即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</li>\n</ol>\n<blockquote>\n<p>如果要在报错的时候终止 js 文件的生成，可以在 tsconfig.json 中配置 noEmitOnError 即可。</p>\n</blockquote>\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><ol>\n<li>使用构造函数 Boolean 创造的对象不是布尔值：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdByNewBoolean</span>: <span class=\"built_in\">boolean</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(1,5): error TS2322: Type &#x27;Boolean&#x27; is not assignable to type &#x27;boolean&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>事实上 new Boolean() 返回的是一个 Boolean 对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdByNewBoolean</span>: <span class=\"title class_\">Boolean</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>直接调用 Boolean 也可以返回一个 boolean 类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createdByBoolean</span>: <span class=\"built_in\">boolean</span> = <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>在 TypeScript 中，<code>boolean</code> 是 JavaScript 中的基本类型，而 <code>Boolean</code> 是 JavaScript 中的构造函数。</p>\n<ol start=\"2\">\n<li><code>0b1010</code> 和 <code>0o744</code> 是 ES6 中的二进制和八进制表示法，它们会被编译为十进制数字：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 中的二进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">binaryLiteral</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0b1010</span>;</span><br><span class=\"line\"><span class=\"comment\">// ES6 中的八进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">octalLiteral</span>: <span class=\"built_in\">number</span> = <span class=\"number\">0o744</span>;</span><br></pre></td></tr></table></figure>\n<p>编译结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 中的二进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> binaryLiteral = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// ES6 中的八进制表示法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> octalLiteral = <span class=\"number\">484</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>JavaScript</code> 没有空值（Void）的概念，在 <code>TypeScript</code> 中，可以用 <code>void</code> 表示没有任何返回值的函数：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">alertName</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;My name is Tom&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明一个 <code>void</code> 类型的变量没有什么用，因为你只能将它赋值为 <code>undefined</code> 和 <code>null</code>：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p><code>undefined</code> 类型的变量只能被赋值为 <code>undefined</code>，<code>null</code> 类型的变量只能被赋值为 <code>null</code></p>\n</li>\n<li><p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这样也不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>: <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = u;</span><br></pre></td></tr></table></figure>\n<h2 id=\"任意值\"><a href=\"#任意值\" class=\"headerlink\" title=\"任意值\"></a>任意值</h2><ol>\n<li><p>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</p>\n</li>\n<li><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> something;</span><br><span class=\"line\">something = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">something = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">something.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">something</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">something = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">something = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">something.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型推论\"><a href=\"#类型推论\" class=\"headerlink\" title=\"类型推论\"></a>类型推论</h2><ol>\n<li>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。以下代码虽然没有指定类型，但是会在编译的时候报错：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>; <span class=\"comment\">// 等价于 let myFavoriteNumber: string = &#x27;seven&#x27;;</span></span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(2,1): error TS2322: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNumber;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><ol>\n<li>联合类型（Union Types）表示取值可以为多种类型中的一种。联合类型使用 <code>|</code> 分隔每个类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNumber</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNumber = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\"><span class=\"attr\">something</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(2,22): error TS2339: Property &#x27;length&#x27; does not exist on type &#x27;string | number&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Property &#x27;length&#x27; does not exist on type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>上例中，<code>length</code> 不是 <code>string</code> 和 <code>number</code> 的共有属性，所以会报错。</p>\n<h2 id=\"对象的类型——接口\"><a href=\"#对象的类型——接口\" class=\"headerlink\" title=\"对象的类型——接口\"></a>对象的类型——接口</h2><ol>\n<li>赋值的时候，变量的形状必须和接口的形状保持一致：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(6,5): error TS2322: Type &#x27;&#123; name: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Property &#x27;age&#x27; is missing in type &#x27;&#123; name: string; &#125;&#x27;.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(9,5): error TS2322: Type &#x27;&#123; name: string; age: number; gender: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Object literal may only specify known properties, and &#x27;gender&#x27; does not exist in type &#x27;Person&#x27;.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>可选属性用 <code>?</code> 表示：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>任意属性用 <code>[]</code> 表示：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>[propName: string]</code> 定义了任意属性取 string 类型的值。需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(3,5): error TS2411: Property &#x27;age&#x27; of type &#x27;number&#x27; is not assignable to string index type &#x27;string&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">// index.ts(7,5): error TS2322: Type &#x27;&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Index signatures are incompatible.</span></span><br><span class=\"line\"><span class=\"comment\">//     Type &#x27;string | number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//       Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。</p>\n<ol start=\"4\">\n<li>只读属性用 <code>readonly</code> 表示：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">89757</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">tom.<span class=\"property\">id</span> = <span class=\"number\">9527</span>;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(14,5): error TS2540: Cannot assign to &#x27;id&#x27; because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><ol>\n<li>在 TypeScript 中，数组类型有多种定义方式，比较灵活：</li>\n</ol>\n<ul>\n<li>「类型 + 方括号」表示法：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组泛型：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用接口表示：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NumberArray</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">index</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>: <span class=\"title class_\">NumberArray</span> = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<p><code>NumberArray</code> 表示：只要 index 的类型是 number，那么值的类型必须是 number。</p>\n<ol start=\"2\">\n<li>类数组（Array-like Object）不是数组类型，比如 <code>arguments</code>；常见的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">args</span>: <span class=\"title class_\">IArguments</span> = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><ol>\n<li>函数表达式：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySum</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注意不要混淆了 TypeScript 中的 =&gt; 和 ES6 中的 =&gt;。在 TypeScript 的类型定义中，=&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<ol start=\"2\">\n<li>用接口定义函数</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>可选参数必须在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\"><span class=\"attr\">firstName</span>?: <span class=\"built_in\">string</span>, <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\"><span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>剩余参数是一个数组。所以我们可以用数组的类型来定义它：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\"><span class=\"attr\">array</span>: <span class=\"built_in\">any</span>[], ...<span class=\"attr\">items</span>: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">    items.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        array.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，rest 参数只能是最后一个参数</p>\n</blockquote>\n<ol start=\"6\">\n<li>我们可以使用重载定义多个 reverse 的函数类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\"><span class=\"attr\">x</span>: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上例中，我们重复定义了多次函数 reverse，前几次都是函数定义，最后一次是函数实现。</p>\n<blockquote>\n<p>注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n</blockquote>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>\n<ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;类型&gt;值</span><br></pre></td></tr></table></figure>\n<p>或：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值 <span class=\"keyword\">as</span> 类型</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须用后一种。</p>\n</blockquote>\n<ol start=\"2\">\n<li>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\"><span class=\"attr\">something</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;<span class=\"built_in\">boolean</span>&gt;something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// index.ts(2,10): error TS2352: Type &#x27;string | number&#x27; cannot be converted to type &#x27;boolean&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Type &#x27;number&#x27; is not comparable to type &#x27;boolean&#x27;.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p>\n<ol>\n<li>比如使用 <code>declare var</code> 来定义 <code>jQuery</code> 的类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">var</span> <span class=\"attr\">jQuery</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">selector</span>: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"><span class=\"title function_\">jQuery</span>(<span class=\"string\">&#x27;#foo&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>上例中，<code>declare var</code> 并没有真的定义一个变量，只是定义了全局变量 <code>jQuery</code> 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。</p>\n<ol start=\"2\">\n<li><p>声明文件必需以 <code>.d.ts</code> 为后缀。</p>\n</li>\n<li><p>推荐使用 <code>@types</code> 统一管理第三方库的声明文件。以 jQuery 为例：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/jquery --save-dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以在<a href=\"http://microsoft.github.io/TypeSearch/\">这个页面</a>搜索你需要的声明文件。</p>\n</blockquote>\n<ol start=\"4\">\n<li>全局变量的声明文件主要有以下几种语法：</li>\n</ol>\n<ul>\n<li><code>declare var</code> 声明全局变量</li>\n<li><code>declare function</code> 声明全局方法</li>\n<li><code>declare class</code> 声明全局类</li>\n<li><code>declare enum</code> 声明全局枚举类型</li>\n<li><code>declare namespace</code> 声明全局对象（含有子属性）</li>\n<li><code>interface</code> 和 <code>type</code> 声明全局类型</li>\n</ul>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><ol>\n<li><a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/lib\">TypeScript 核心库的定义文件</a>中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</li>\n</ol>\n<blockquote>\n<p>注意，TypeScript 核心库的定义中不包含 Node.js 部分。</p>\n</blockquote>\n<ol start=\"2\">\n<li>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名用来给一个类型起个新名字（类型别名常用于联合类型）：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameResolver</span> = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrResolver</span> = <span class=\"title class_\">Name</span> | <span class=\"title class_\">NameResolver</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"><span class=\"attr\">n</span>: <span class=\"title class_\">NameOrResolver</span></span>): <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串字面量类型\"><a href=\"#字符串字面量类型\" class=\"headerlink\" title=\"字符串字面量类型\"></a>字符串字面量类型</h2><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EventNames</span> = <span class=\"string\">&#x27;click&#x27;</span> | <span class=\"string\">&#x27;scroll&#x27;</span> | <span class=\"string\">&#x27;mousemove&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>上例中，我们使用 type 定了一个字符串字面量类型 EventNames，它只能取三种字符串中的一种。</p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">xcatliu</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&#x27;Xcat Liu&#x27;</span>, <span class=\"number\">25</span>];</span><br></pre></td></tr></table></figure>\n<ol>\n<li>当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">xcatliu</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">xcatliu = [<span class=\"string\">&#x27;Xcat Liu&#x27;</span>, <span class=\"number\">25</span>];</span><br><span class=\"line\">xcatliu.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;http://xcatliu.com/&#x27;</span>);</span><br><span class=\"line\">xcatliu.<span class=\"title function_\">push</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.ts(4,14): error TS2345: Argument of type &#x27;boolean&#x27; is not assignable to parameter of type &#x27;string | number&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">//   Type &#x27;boolean&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><ol>\n<li>使用 static 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">isAnimal</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"title function_\">isAnimal</span>(a); <span class=\"comment\">// true</span></span><br><span class=\"line\">a.<span class=\"title function_\">isAnimal</span>(a); <span class=\"comment\">// TypeError: a.isAnimal is not a function</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 public、private 和 protected：</li>\n</ol>\n<ul>\n<li>public 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的</li>\n<li>private 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li>\n<li>protected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的</li>\n</ul>\n","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"typescript","path":"api/tags/typescript.json"},{"name":"入门","path":"api/tags/入门.json"}]}