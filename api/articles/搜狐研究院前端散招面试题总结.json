{"title":"搜狐研究院前端散招面试题总结","slug":"搜狐研究院前端散招面试题总结","date":"2017-05-19T10:06:37.000Z","updated":"2025-01-03T13:19:00.887Z","comments":true,"path":"api/articles/搜狐研究院前端散招面试题总结.json","excerpt":null,"covers":null,"content":"<p>首先，搜狐媒体大厦还是蛮阔气的，但是门口的保安让我在沙发区稍等一会儿的时候，我看到那里有 5 个类似员工的人在打王者荣耀。。果然“大公司”的员工氛围就是不一样啊。。后来等了大概 10 分钟左右，一个挂有实习工作牌的女士把我带到了 9 楼，这里应该是搜狐员工办公的地方，两边都有比较大的办公区，然后中间有一块稍微小一点的地方用来面试和聊天，hr 姐姐首先让我做了一下搜狐的笔试题，然后说大概一个小时，如果做完了就给她打电话，然后就自己走开了（连杯水都没有倒，实习生就是这样的吗。。）， 做完了之后就有一位男士拿着我的简历过来了，整个面试的过程堪称尴尬，因为我的简历上写有“关注ES6”，所以这位年轻的面试官就开始各种问 ES6 相关的东西，还问我和 react 相关的东西，比如让我讲一下 react 的设计思想啊什么的。。难道这就是“关注ES6”想要表达的意思吗？后来他可能感觉也比较尴尬了，就问了一些 JS 相关的东西，比如 self 和 this 的区别啊什么的，但是我的水平实在有限，这位面试官的前端水平实在是在我之上太多，所以我也是基本上全程蒙蔽，更别提让我用 jQuery 实现一个 promise 对象了（对了，这位面试官连 jQ 的 when() 方法都不知道。。），就这样结束了一面，当然由于我的水平实在太低，所以就直接让我走人了（不过我也比较饿了，想回学校吃点东西了。。）</p>\n<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><h3 id=\"一、不定项选择题\"><a href=\"#一、不定项选择题\" class=\"headerlink\" title=\"一、不定项选择题\"></a>一、不定项选择题</h3><p>我不知道笔试题能不能拍照，但是我还是冒着被批评和留下不好印象的风险拍了一下，总体来说难度还是适中的，其中有些题还是蛮经典的，大家可以自行消化</p>\n<h4 id=\"1-以下元素为块级元素的有：\"><a href=\"#1-以下元素为块级元素的有：\" class=\"headerlink\" title=\"1. 以下元素为块级元素的有：\"></a>1. 以下元素为块级元素的有：</h4><ul>\n<li>p</li>\n<li>strong</li>\n<li>span</li>\n<li>section</li>\n</ul>\n<h4 id=\"2-以下可以使元素不可见的有：\"><a href=\"#2-以下可以使元素不可见的有：\" class=\"headerlink\" title=\"2. 以下可以使元素不可见的有：\"></a>2. 以下可以使元素不可见的有：</h4><ul>\n<li>display: none</li>\n<li>width:0; height:0; overflow:hidden</li>\n<li>visibility: hidden</li>\n<li>display: inline</li>\n</ul>\n<h4 id=\"3-以下正确的有：\"><a href=\"#3-以下正确的有：\" class=\"headerlink\" title=\"3. 以下正确的有：\"></a>3. 以下正确的有：</h4><ul>\n<li>Number.MIN_VALUE &gt; 0</li>\n<li>Number(1) == new Number(1)</li>\n<li>null == undefined</li>\n<li>NaN == NaN</li>\n</ul>\n<h4 id=\"4-以下会有错误发生的有：\"><a href=\"#4-以下会有错误发生的有：\" class=\"headerlink\" title=\"4. 以下会有错误发生的有：\"></a>4. 以下会有错误发生的有：</h4><ul>\n<li>9..toString()  //“9”</li>\n<li>alert(a)  //a is not defined</li>\n<li>eval(‘a’)  //a is not defined</li>\n<li>console.log(Number)</li>\n</ul>\n<h4 id=\"5-以下哪些情况会促发-BFC？\"><a href=\"#5-以下哪些情况会促发-BFC？\" class=\"headerlink\" title=\"5. 以下哪些情况会促发 BFC？\"></a>5. 以下哪些情况会促发 BFC？</h4><ul>\n<li>float 不为 none</li>\n<li>position 为 fixed</li>\n<li>display 为 static</li>\n<li>overflow 为 scroll</li>\n</ul>\n<h4 id=\"6-哪些元素会生成-BFC：\"><a href=\"#6-哪些元素会生成-BFC：\" class=\"headerlink\" title=\"6. 哪些元素会生成 BFC：\"></a>6. 哪些元素会生成 BFC：</h4><ol>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow 不为 visible</li>\n</ol>\n<h3 id=\"二、填空题\"><a href=\"#二、填空题\" class=\"headerlink\" title=\"二、填空题\"></a>二、填空题</h3><h4 id=\"1-一个-div-垂直居中于整个-body-的-css-代码：\"><a href=\"#1-一个-div-垂直居中于整个-body-的-css-代码：\" class=\"headerlink\" title=\"1. 一个 div 垂直居中于整个 body 的 css 代码：\"></a>1. 一个 div 垂直居中于整个 body 的 css 代码：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\"><a href=\"#2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\" class=\"headerlink\" title=\"2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10\"></a>2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-匹配邮箱的正则表达式：\"><a href=\"#3-匹配邮箱的正则表达式：\" class=\"headerlink\" title=\"3. 匹配邮箱的正则表达式：\"></a>3. 匹配邮箱的正则表达式：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\[a-z0-<span class=\"number\">9</span>\\]+(\\[.<span class=\"property\">_</span>\\\\\\-\\]*\\[a-z0-<span class=\"number\">9</span>\\])*@(\\[a-z0-<span class=\"number\">9</span>\\]+\\[-a-z0-<span class=\"number\">9</span>\\]*\\[a-z0-<span class=\"number\">9</span>\\]+.)&#123;<span class=\"number\">1</span>,<span class=\"number\">63</span>&#125;\\[a-z0-<span class=\"number\">9</span>\\]+$</span><br></pre></td></tr></table></figure>\n<p>对于该正则表达式的解释：<a href=\"http://www.jb51.net/article/31182.htm\">比较正宗的验证邮箱的正则表达式js代码详解</a></p>\n<h4 id=\"4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\"><a href=\"#4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\" class=\"headerlink\" title=\"4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值\"></a>4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doubleMin</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">min</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,arr.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于数组 map() 方法的讲解：<a href=\"http://www.cnblogs.com/xuan52rock/p/4460949.html\">js 数组 map方法</a></p>\n<h4 id=\"5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\"><a href=\"#5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\" class=\"headerlink\" title=\"5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]\"></a>5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> af = a.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bf = b.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(af.<span class=\"title function_\">localeCompare</span>(bf) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(af.<span class=\"title function_\">localeCompare</span>(bf) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、简答题\"><a href=\"#三、简答题\" class=\"headerlink\" title=\"三、简答题\"></a>三、简答题</h3><h4 id=\"1-实现：var-a-add-10-3-2-a打印结果为15\"><a href=\"#1-实现：var-a-add-10-3-2-a打印结果为15\" class=\"headerlink\" title=\"1. 实现：var a = add(10)(3)(2) // a打印结果为15\"></a>1. 实现：var a = add(10)(3)(2) // a打印结果为15</h4><p>这是一道关于类型转换的问题：<a href=\"http://web.jobbole.com/90654/\">一道面试题引发的对 javascript 类型转换的思考</a></p>\n<h4 id=\"2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\"><a href=\"#2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\" class=\"headerlink\" title=\"2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）\"></a>2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）</h4><p>利用关键帧动画 @keyframes 就可以达到，网上有好多关于加载动画实现的文章，推荐一下类似这道题想要的效果的文章：<a href=\"http://www.cnblogs.com/zourong/p/4022729.html\">CSS 实现加载动画之八-圆点旋转</a>、<a href=\"http://www.jq22.com/yanshi12864\">6种CSS3加载动画</a></p>\n<h4 id=\"3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\"><a href=\"#3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\" class=\"headerlink\" title=\"3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解\"></a>3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解</h4><p>网站是如何记住用户信息的：<a href=\"http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/\">无状态协议中认证状态保持方案的一些思考</a></p>\n<h4 id=\"4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\"><a href=\"#4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\" class=\"headerlink\" title=\"4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；\"></a>4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；</h4><p>在 JS 中是没有类的，所以其实是用 function 来间接实现，这类实现在我的另一篇文章里大量提到：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS 实现复杂数据结构</a></p>\n<h4 id=\"5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\"><a href=\"#5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\" class=\"headerlink\" title=\"5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）\"></a>5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）</h4><p>在 css 中，通过 border 和旋转可以实现很多种图形，我在这个方面也是比较白痴的，所以推荐以下文章：<a href=\"http://www.2cto.com/kf/201604/500811.html\">CSS3实现32种基本图形</a>、<a href=\"http://www.cnblogs.com/pigtail/archive/2013/02/17/2914119.html\">利用css样式画各种图形–初步、进阶、高级（一）</a>（感觉这两篇文章的排版和图片都不是很好，找时间我会自己再总结一下）</p>\n<h4 id=\"6-简要回答你对跨域的理解，为什么要跨域，如何跨域\"><a href=\"#6-简要回答你对跨域的理解，为什么要跨域，如何跨域\" class=\"headerlink\" title=\"6. 简要回答你对跨域的理解，为什么要跨域，如何跨域\"></a>6. 简要回答你对跨域的理解，为什么要跨域，如何跨域</h4><p>跨域这种问题应该是老生常谈了，其实就是浏览器的一种“同源策略”，为了保证安全而采取的措施，具体大家自行搜索吧，关于跨域的文章实在是太多了</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><h3 id=\"1-localStorage-和-sessionStorage-的区别\"><a href=\"#1-localStorage-和-sessionStorage-的区别\" class=\"headerlink\" title=\"1. localStorage 和 sessionStorage 的区别\"></a>1. localStorage 和 sessionStorage 的区别</h3><ul>\n<li>localStorage 和 sessionStorage 一样都是用来存储客户端临时信息的对象。</li>\n<li>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</li>\n<li>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。</li>\n<li>sessionStorage 生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过 sessionStorage 存储的数据也就被清空了。</li>\n<li>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</li>\n</ul>\n<h3 id=\"2-JS中self和this的区别\"><a href=\"#2-JS中self和this的区别\" class=\"headerlink\" title=\"2. JS中self和this的区别\"></a>2. JS中self和this的区别</h3><p>不知道为什么面试官会问这个问题，因为 self 好像在 react 才会经常用到吧？。。但是我还是查了一下，网上对这两个的区别的解释很少，大致就是：self 指向本窗口，this 指向就比较广泛了</p>\n<h3 id=\"3-如何实现-JS-中的防抖动和节流阀\"><a href=\"#3-如何实现-JS-中的防抖动和节流阀\" class=\"headerlink\" title=\"3. 如何实现 JS 中的防抖动和节流阀\"></a>3. 如何实现 JS 中的防抖动和节流阀</h3><p>这个功能其实经常用到，但是面试官给我的答案是 underscore.js 源码中有，然后说 jQuery 的第三方库应该也有。。估计是这位面试官经常用 underscore.js 解决重复点击的问题，然后至于怎么实现的自己也不知道。。（我就没好意思再问了，以免造成尴尬的局面），推荐一下解释的很清楚的文章（这是一篇中文译文，英文原文可以点击下面这篇文章中的原文链接）：<a href=\"http://www.tuicool.com/articles/VfyMBrI\">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></p>\n<h3 id=\"4-HTML5-使任何元素变为可编辑的属性\"><a href=\"#4-HTML5-使任何元素变为可编辑的属性\" class=\"headerlink\" title=\"4. HTML5 使任何元素变为可编辑的属性\"></a>4. HTML5 使任何元素变为可编辑的属性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contenteditable=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\"><a href=\"#5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\" class=\"headerlink\" title=\"5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式\"></a>5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式</h3><p>在张鑫旭的慕课网讲解视频（深入理解 CSS 系列）中曾经讲到过这些单位的含义和作用，具体可以点击下面链接查看我对他的讲解的总结：<a href=\"/20170421/line-height-of-css.html\">CSS 深入理解之 line-height</a>，具体计算公式和作用如下：</p>\n<ul>\n<li>5rem：按照 html 的 font-size 进行计算</li>\n<li>5em：按照自身的 font-size 进行计算</li>\n<li>5px：相对长度单位，像素</li>\n<li>5pt：绝对长度单位，点 Points (1点 = 1/72英寸)</li>\n<li>500%：按照自身的 font-size 进行计算</li>\n<li>5：同样按照自身的 font-size 进行计算</li>\n</ul>\n<p>可以看出，line-height 的值如果不是具体数值，都是按照 font-size 进行计算的，同时 500%/5em/5 有什么区别呢？在张鑫旭的讲解中也提到了，500%/5em 会根据自身的 font-size 进行计算，得到具体数值后将行高继承给后代元素，而 5 只会将比例继承给后代元素，后代元素会根据自己的 font-size 重新计算行高</p>\n<blockquote>\n<p>更新自2017-10-11：突然发现小程序中有一个很有趣的长度单位 rpx，具体参见这篇文章：<a href=\"http://huang-jerryc.com/2017/05/21/talk-about-pixel-and-rpx/\">谈谈像素以及微信小程序的 rpx</a></p>\n</blockquote>\n<h3 id=\"6-oninput-事件和-onchange-事件的区别\"><a href=\"#6-oninput-事件和-onchange-事件的区别\" class=\"headerlink\" title=\"6. oninput 事件和 onchange 事件的区别\"></a>6. oninput 事件和 onchange 事件的区别</h3><p>onchange 事件经常用到（图片、文件上传），但是 oninput 事件却没有用过了，推荐：<a href=\"http://blog.csdn.net/freshlover/article/details/39050609\">总结oninput、onchange与onpropertychange事件的用法和区别</a></p>\n","more":"<p>首先，搜狐媒体大厦还是蛮阔气的，但是门口的保安让我在沙发区稍等一会儿的时候，我看到那里有 5 个类似员工的人在打王者荣耀。。果然“大公司”的员工氛围就是不一样啊。。后来等了大概 10 分钟左右，一个挂有实习工作牌的女士把我带到了 9 楼，这里应该是搜狐员工办公的地方，两边都有比较大的办公区，然后中间有一块稍微小一点的地方用来面试和聊天，hr 姐姐首先让我做了一下搜狐的笔试题，然后说大概一个小时，如果做完了就给她打电话，然后就自己走开了（连杯水都没有倒，实习生就是这样的吗。。）， 做完了之后就有一位男士拿着我的简历过来了，整个面试的过程堪称尴尬，因为我的简历上写有“关注ES6”，所以这位年轻的面试官就开始各种问 ES6 相关的东西，还问我和 react 相关的东西，比如让我讲一下 react 的设计思想啊什么的。。难道这就是“关注ES6”想要表达的意思吗？后来他可能感觉也比较尴尬了，就问了一些 JS 相关的东西，比如 self 和 this 的区别啊什么的，但是我的水平实在有限，这位面试官的前端水平实在是在我之上太多，所以我也是基本上全程蒙蔽，更别提让我用 jQuery 实现一个 promise 对象了（对了，这位面试官连 jQ 的 when() 方法都不知道。。），就这样结束了一面，当然由于我的水平实在太低，所以就直接让我走人了（不过我也比较饿了，想回学校吃点东西了。。）</p>\n<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><h3 id=\"一、不定项选择题\"><a href=\"#一、不定项选择题\" class=\"headerlink\" title=\"一、不定项选择题\"></a>一、不定项选择题</h3><p>我不知道笔试题能不能拍照，但是我还是冒着被批评和留下不好印象的风险拍了一下，总体来说难度还是适中的，其中有些题还是蛮经典的，大家可以自行消化</p>\n<h4 id=\"1-以下元素为块级元素的有：\"><a href=\"#1-以下元素为块级元素的有：\" class=\"headerlink\" title=\"1. 以下元素为块级元素的有：\"></a>1. 以下元素为块级元素的有：</h4><ul>\n<li>p</li>\n<li>strong</li>\n<li>span</li>\n<li>section</li>\n</ul>\n<h4 id=\"2-以下可以使元素不可见的有：\"><a href=\"#2-以下可以使元素不可见的有：\" class=\"headerlink\" title=\"2. 以下可以使元素不可见的有：\"></a>2. 以下可以使元素不可见的有：</h4><ul>\n<li>display: none</li>\n<li>width:0; height:0; overflow:hidden</li>\n<li>visibility: hidden</li>\n<li>display: inline</li>\n</ul>\n<h4 id=\"3-以下正确的有：\"><a href=\"#3-以下正确的有：\" class=\"headerlink\" title=\"3. 以下正确的有：\"></a>3. 以下正确的有：</h4><ul>\n<li>Number.MIN_VALUE &gt; 0</li>\n<li>Number(1) == new Number(1)</li>\n<li>null == undefined</li>\n<li>NaN == NaN</li>\n</ul>\n<h4 id=\"4-以下会有错误发生的有：\"><a href=\"#4-以下会有错误发生的有：\" class=\"headerlink\" title=\"4. 以下会有错误发生的有：\"></a>4. 以下会有错误发生的有：</h4><ul>\n<li>9..toString()  //“9”</li>\n<li>alert(a)  //a is not defined</li>\n<li>eval(‘a’)  //a is not defined</li>\n<li>console.log(Number)</li>\n</ul>\n<h4 id=\"5-以下哪些情况会促发-BFC？\"><a href=\"#5-以下哪些情况会促发-BFC？\" class=\"headerlink\" title=\"5. 以下哪些情况会促发 BFC？\"></a>5. 以下哪些情况会促发 BFC？</h4><ul>\n<li>float 不为 none</li>\n<li>position 为 fixed</li>\n<li>display 为 static</li>\n<li>overflow 为 scroll</li>\n</ul>\n<h4 id=\"6-哪些元素会生成-BFC：\"><a href=\"#6-哪些元素会生成-BFC：\" class=\"headerlink\" title=\"6. 哪些元素会生成 BFC：\"></a>6. 哪些元素会生成 BFC：</h4><ol>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow 不为 visible</li>\n</ol>\n<h3 id=\"二、填空题\"><a href=\"#二、填空题\" class=\"headerlink\" title=\"二、填空题\"></a>二、填空题</h3><h4 id=\"1-一个-div-垂直居中于整个-body-的-css-代码：\"><a href=\"#1-一个-div-垂直居中于整个-body-的-css-代码：\" class=\"headerlink\" title=\"1. 一个 div 垂直居中于整个 body 的 css 代码：\"></a>1. 一个 div 垂直居中于整个 body 的 css 代码：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\"><a href=\"#2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\" class=\"headerlink\" title=\"2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10\"></a>2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-匹配邮箱的正则表达式：\"><a href=\"#3-匹配邮箱的正则表达式：\" class=\"headerlink\" title=\"3. 匹配邮箱的正则表达式：\"></a>3. 匹配邮箱的正则表达式：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\[a-z0-<span class=\"number\">9</span>\\]+(\\[.<span class=\"property\">_</span>\\\\\\-\\]*\\[a-z0-<span class=\"number\">9</span>\\])*@(\\[a-z0-<span class=\"number\">9</span>\\]+\\[-a-z0-<span class=\"number\">9</span>\\]*\\[a-z0-<span class=\"number\">9</span>\\]+.)&#123;<span class=\"number\">1</span>,<span class=\"number\">63</span>&#125;\\[a-z0-<span class=\"number\">9</span>\\]+$</span><br></pre></td></tr></table></figure>\n<p>对于该正则表达式的解释：<a href=\"http://www.jb51.net/article/31182.htm\">比较正宗的验证邮箱的正则表达式js代码详解</a></p>\n<h4 id=\"4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\"><a href=\"#4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\" class=\"headerlink\" title=\"4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值\"></a>4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doubleMin</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">min</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,arr.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于数组 map() 方法的讲解：<a href=\"http://www.cnblogs.com/xuan52rock/p/4460949.html\">js 数组 map方法</a></p>\n<h4 id=\"5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\"><a href=\"#5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\" class=\"headerlink\" title=\"5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]\"></a>5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> af = a.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bf = b.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(af.<span class=\"title function_\">localeCompare</span>(bf) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(af.<span class=\"title function_\">localeCompare</span>(bf) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、简答题\"><a href=\"#三、简答题\" class=\"headerlink\" title=\"三、简答题\"></a>三、简答题</h3><h4 id=\"1-实现：var-a-add-10-3-2-a打印结果为15\"><a href=\"#1-实现：var-a-add-10-3-2-a打印结果为15\" class=\"headerlink\" title=\"1. 实现：var a = add(10)(3)(2) // a打印结果为15\"></a>1. 实现：var a = add(10)(3)(2) // a打印结果为15</h4><p>这是一道关于类型转换的问题：<a href=\"http://web.jobbole.com/90654/\">一道面试题引发的对 javascript 类型转换的思考</a></p>\n<h4 id=\"2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\"><a href=\"#2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\" class=\"headerlink\" title=\"2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）\"></a>2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）</h4><p>利用关键帧动画 @keyframes 就可以达到，网上有好多关于加载动画实现的文章，推荐一下类似这道题想要的效果的文章：<a href=\"http://www.cnblogs.com/zourong/p/4022729.html\">CSS 实现加载动画之八-圆点旋转</a>、<a href=\"http://www.jq22.com/yanshi12864\">6种CSS3加载动画</a></p>\n<h4 id=\"3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\"><a href=\"#3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\" class=\"headerlink\" title=\"3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解\"></a>3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解</h4><p>网站是如何记住用户信息的：<a href=\"http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/\">无状态协议中认证状态保持方案的一些思考</a></p>\n<h4 id=\"4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\"><a href=\"#4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\" class=\"headerlink\" title=\"4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；\"></a>4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；</h4><p>在 JS 中是没有类的，所以其实是用 function 来间接实现，这类实现在我的另一篇文章里大量提到：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS 实现复杂数据结构</a></p>\n<h4 id=\"5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\"><a href=\"#5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\" class=\"headerlink\" title=\"5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）\"></a>5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）</h4><p>在 css 中，通过 border 和旋转可以实现很多种图形，我在这个方面也是比较白痴的，所以推荐以下文章：<a href=\"http://www.2cto.com/kf/201604/500811.html\">CSS3实现32种基本图形</a>、<a href=\"http://www.cnblogs.com/pigtail/archive/2013/02/17/2914119.html\">利用css样式画各种图形–初步、进阶、高级（一）</a>（感觉这两篇文章的排版和图片都不是很好，找时间我会自己再总结一下）</p>\n<h4 id=\"6-简要回答你对跨域的理解，为什么要跨域，如何跨域\"><a href=\"#6-简要回答你对跨域的理解，为什么要跨域，如何跨域\" class=\"headerlink\" title=\"6. 简要回答你对跨域的理解，为什么要跨域，如何跨域\"></a>6. 简要回答你对跨域的理解，为什么要跨域，如何跨域</h4><p>跨域这种问题应该是老生常谈了，其实就是浏览器的一种“同源策略”，为了保证安全而采取的措施，具体大家自行搜索吧，关于跨域的文章实在是太多了</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><h3 id=\"1-localStorage-和-sessionStorage-的区别\"><a href=\"#1-localStorage-和-sessionStorage-的区别\" class=\"headerlink\" title=\"1. localStorage 和 sessionStorage 的区别\"></a>1. localStorage 和 sessionStorage 的区别</h3><ul>\n<li>localStorage 和 sessionStorage 一样都是用来存储客户端临时信息的对象。</li>\n<li>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</li>\n<li>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。</li>\n<li>sessionStorage 生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过 sessionStorage 存储的数据也就被清空了。</li>\n<li>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</li>\n</ul>\n<h3 id=\"2-JS中self和this的区别\"><a href=\"#2-JS中self和this的区别\" class=\"headerlink\" title=\"2. JS中self和this的区别\"></a>2. JS中self和this的区别</h3><p>不知道为什么面试官会问这个问题，因为 self 好像在 react 才会经常用到吧？。。但是我还是查了一下，网上对这两个的区别的解释很少，大致就是：self 指向本窗口，this 指向就比较广泛了</p>\n<h3 id=\"3-如何实现-JS-中的防抖动和节流阀\"><a href=\"#3-如何实现-JS-中的防抖动和节流阀\" class=\"headerlink\" title=\"3. 如何实现 JS 中的防抖动和节流阀\"></a>3. 如何实现 JS 中的防抖动和节流阀</h3><p>这个功能其实经常用到，但是面试官给我的答案是 underscore.js 源码中有，然后说 jQuery 的第三方库应该也有。。估计是这位面试官经常用 underscore.js 解决重复点击的问题，然后至于怎么实现的自己也不知道。。（我就没好意思再问了，以免造成尴尬的局面），推荐一下解释的很清楚的文章（这是一篇中文译文，英文原文可以点击下面这篇文章中的原文链接）：<a href=\"http://www.tuicool.com/articles/VfyMBrI\">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></p>\n<h3 id=\"4-HTML5-使任何元素变为可编辑的属性\"><a href=\"#4-HTML5-使任何元素变为可编辑的属性\" class=\"headerlink\" title=\"4. HTML5 使任何元素变为可编辑的属性\"></a>4. HTML5 使任何元素变为可编辑的属性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contenteditable=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\"><a href=\"#5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\" class=\"headerlink\" title=\"5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式\"></a>5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式</h3><p>在张鑫旭的慕课网讲解视频（深入理解 CSS 系列）中曾经讲到过这些单位的含义和作用，具体可以点击下面链接查看我对他的讲解的总结：<a href=\"/20170421/line-height-of-css.html\">CSS 深入理解之 line-height</a>，具体计算公式和作用如下：</p>\n<ul>\n<li>5rem：按照 html 的 font-size 进行计算</li>\n<li>5em：按照自身的 font-size 进行计算</li>\n<li>5px：相对长度单位，像素</li>\n<li>5pt：绝对长度单位，点 Points (1点 = 1/72英寸)</li>\n<li>500%：按照自身的 font-size 进行计算</li>\n<li>5：同样按照自身的 font-size 进行计算</li>\n</ul>\n<p>可以看出，line-height 的值如果不是具体数值，都是按照 font-size 进行计算的，同时 500%/5em/5 有什么区别呢？在张鑫旭的讲解中也提到了，500%/5em 会根据自身的 font-size 进行计算，得到具体数值后将行高继承给后代元素，而 5 只会将比例继承给后代元素，后代元素会根据自己的 font-size 重新计算行高</p>\n<blockquote>\n<p>更新自2017-10-11：突然发现小程序中有一个很有趣的长度单位 rpx，具体参见这篇文章：<a href=\"http://huang-jerryc.com/2017/05/21/talk-about-pixel-and-rpx/\">谈谈像素以及微信小程序的 rpx</a></p>\n</blockquote>\n<h3 id=\"6-oninput-事件和-onchange-事件的区别\"><a href=\"#6-oninput-事件和-onchange-事件的区别\" class=\"headerlink\" title=\"6. oninput 事件和 onchange 事件的区别\"></a>6. oninput 事件和 onchange 事件的区别</h3><p>onchange 事件经常用到（图片、文件上传），但是 oninput 事件却没有用过了，推荐：<a href=\"http://blog.csdn.net/freshlover/article/details/39050609\">总结oninput、onchange与onpropertychange事件的用法和区别</a></p>\n","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"面试","path":"api/tags/面试.json"},{"name":"前端","path":"api/tags/前端.json"}]}