{"title":"好文章推荐系列——工具","slug":"好文章推荐系列——工具","date":"2017-08-07T14:34:11.000Z","updated":"2025-01-03T13:10:40.013Z","comments":true,"path":"api/articles/好文章推荐系列——工具.json","excerpt":null,"covers":null,"content":"<h3 id=\"【答疑解惑】为什么你的-Charles-会抓包失败？\"><a href=\"#【答疑解惑】为什么你的-Charles-会抓包失败？\" class=\"headerlink\" title=\"【答疑解惑】为什么你的 Charles 会抓包失败？\"></a><a href=\"https://www.cnblogs.com/skychx/p/use-charles.html\">【答疑解惑】为什么你的 Charles 会抓包失败？</a></h3><p>作为一名 Web 开发工程师，天天都会和网络打交道。Charles 作为一款网络抓包工具，几乎成了 Web 开发的标配。</p>\n<p>本文是我<strong>深度使用 Charles 后总结而成</strong>，不同于其它介绍 Charles 的文章，这篇文章不会详细介绍 Charles 的各个功能（例如 remote 和 rewrite），而是专注于分析一个问题：<strong>什么情况下 Charles 会抓包失败？</strong></p>\n<p>为了解决这个问题，我会从 Charles 的原理分析，并且结合 Android/iOS 的官方政策，一一分析 Charles 抓包中的那些失效问题。</p>\n<h2 id=\"IDE-中的魔法\"><a href=\"#IDE-中的魔法\" class=\"headerlink\" title=\"IDE 中的魔法\"></a><a href=\"https://www.zhihu.com/column/c_1463537113430441984\">IDE 中的魔法</a></h2><p>这是专栏文章，希望读者能够通过这系列文章，对 IDE 相关技术的实现有一定的认知，同时，通过对语言进行静态分析，能够从编译器的视角，审视语言特性，帮助大家在了解 IDE 的同时，也能更深入的了解语言本身。</p>\n<h2 id=\"黑客增长-从博客引流到公众号\"><a href=\"#黑客增长-从博客引流到公众号\" class=\"headerlink\" title=\"黑客增长: 从博客引流到公众号\"></a><a href=\"https://github.com/shfshanyue/op-note/blob/master/blog-to-wechat.md\">黑客增长: 从博客引流到公众号</a></h2><p>前几日在朋友圈刷到一篇文章 <a href=\"https://cuiqingcai.com/7463.html\">我是怎么把博客粉丝转到公众号的</a>，觉得相当有创意。最近一年在做 toC 产品，一直在谈拉新留存转化。<strong>这刚好可以作为一个黑客增长的成功案例</strong>。</p>\n<p>鉴于我自己也有一个博客，并且日均UV在200左右，决定来试一试。整理了一下思路，差不多与短信验证码的逻辑相似，于是花了一天时间搞定。</p>\n<p>另外，在此之前我也花了一天时间调研了 <code>serverless</code>。所以你完全可以<strong>零成本实现从博客到公众号引流的功能</strong>。</p>\n<h2 id=\"前端漫谈-一巴掌拍平Git中的各种概念\"><a href=\"#前端漫谈-一巴掌拍平Git中的各种概念\" class=\"headerlink\" title=\"[前端漫谈] 一巴掌拍平Git中的各种概念\"></a><a href=\"https://juejin.cn/post/6844903759961653261\">[前端漫谈] 一巴掌拍平Git中的各种概念</a></h2><p>讲git的文章很多，但是大部分都是一个套路，讲概念，讲命令，太多的概念和命令总是让人有一种稀里糊涂的感觉，讲的很对，但似乎没能讲透，没有醍醐灌顶的感觉，大概是我的悟性差吧。所以这几天一直在做各种git的实验，并且阅读了一些博客、文档、资料，综合下来整理出了这么一篇文章。注意：</p>\n<p>本篇文章旨在说明我对git的理解，只是一家之言，聊以分享。<br>本片文章不是一篇命令教程，或者概念说明，需要一定的git使用经验和踩坑经验。<br>为了阅读方便，commitID只保留4位</p>\n<h2 id=\"前端漫谈-Git-在项目中的完全控制实践\"><a href=\"#前端漫谈-Git-在项目中的完全控制实践\" class=\"headerlink\" title=\"[前端漫谈]Git 在项目中的完全控制实践\"></a><a href=\"https://juejin.cn/post/6844904015705161735\">[前端漫谈]Git 在项目中的完全控制实践</a></h2><p>这篇文章结合实际场景，主要描述我在项目实践中使用 Git 管理项目、团队协作的一些经验。包括  1）merge 和 rebase 使用的区别和选择；2）多人团队合作开发流程；3）标准化 commit message；4）commit 精细化管理等。这些都是为项目的健壮发展和代码的精细管理所流的泪累积出来的。</p>\n<h2 id=\"页面可视化搭建工具前生今世\"><a href=\"#页面可视化搭建工具前生今世\" class=\"headerlink\" title=\"页面可视化搭建工具前生今世\"></a><a href=\"https://zhuanlan.zhihu.com/p/37171897\">页面可视化搭建工具前生今世</a></h2><p>页面可视化搭建, 是一个历久弥新的话题. 更广义上讲, 页面是 GUI 的一部分, GUI 的拖拉生成在各种开发工具上很常见, 如 Android Studio, Xcode, Visual Studio 等. 前端页面早在十几年前就能用 Dreamweaver, Frontpage 等工具可视化搭建出来.文章目录：</p>\n<ul>\n<li>页面构成和页面组件化</li>\n<li>页面可视化搭建工具的必要性</li>\n<li>页面可视化搭建工具的区分维度</li>\n<li>业界的实践实例</li>\n</ul>\n<h2 id=\"Comparing-the-New-Generation-of-Build-Tools\"><a href=\"#Comparing-the-New-Generation-of-Build-Tools\" class=\"headerlink\" title=\"Comparing the New Generation of Build Tools\"></a><a href=\"https://css-tricks.com/comparing-the-new-generation-of-build-tools/\">Comparing the New Generation of Build Tools</a></h2><p>作者详细对比了常用的几个构建工具，文章目录：</p>\n<ul>\n<li>esbuild</li>\n<li>Snowpack</li>\n<li>Vite</li>\n<li>wmr</li>\n<li>Feature comparison</li>\n<li>Wrapping up</li>\n</ul>\n<h2 id=\"开源富文本编辑器技术的演进（2020-1024）\"><a href=\"#开源富文本编辑器技术的演进（2020-1024）\" class=\"headerlink\" title=\"开源富文本编辑器技术的演进（2020 1024）\"></a><a href=\"https://zhuanlan.zhihu.com/p/268366406\">开源富文本编辑器技术的演进（2020 1024）</a></h2><p>这里我主要从技术实现以及编程思想的演变，介绍编辑器这10年间的变化与发展。大概要说到下面这几款编辑器：</p>\n<ul>\n<li>CKEditor 1-4（2008）</li>\n<li>UEditor (2012)</li>\n<li>Quill.js（2012）</li>\n<li>CKEditor 5（2014）</li>\n<li>Prosemirror（2015）</li>\n<li>Draft.js（2015）</li>\n<li>Slate（2016）</li>\n</ul>\n<p>因为每一款编辑器想研究明白都需要花费几个月甚至半年的时间，所以这里主要说说我对这些编辑器的一个理解，介绍下他们的特点以及他们之间的区别，点到为止。</p>\n<h2 id=\"Charles-使用手册\"><a href=\"#Charles-使用手册\" class=\"headerlink\" title=\"Charles 使用手册\"></a><a href=\"https://juejin.cn/post/6844904031505088519\">Charles 使用手册</a></h2><p>作者总结了关于 Charles 的各种用法，包括基础、高级、进阶等用法</p>\n<h2 id=\"如履薄冰的复制粘贴-clipboard详解\"><a href=\"#如履薄冰的复制粘贴-clipboard详解\" class=\"headerlink\" title=\"如履薄冰的复制粘贴-clipboard详解\"></a><a href=\"https://juejin.cn/post/6903698870694313991\">如履薄冰的复制粘贴-clipboard详解</a></h2><p>本文从纯前端出发，因此不会涉及到类似flash或者插件之类跳过浏览器安全检测的操作实现的复制粘贴，完全基于浏览器下的安全限制与一些“奇技淫巧”去实现一个相对较为完整的复制粘贴功能。本文将从浏览器自身的复制粘贴功能出发，带领大家了解复制粘贴背后的功能实现，对比多个富文本文档实现，在浏览器的各种限制下，如何实现一个基于JSON-MODEL数据并且适用于类富文本的剪切板。</p>\n<h2 id=\"Commit-message-和-Change-log-编写指南\"><a href=\"#Commit-message-和-Change-log-编写指南\" class=\"headerlink\" title=\"Commit message 和 Change log 编写指南\"></a><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">Commit message 和 Change log 编写指南</a></h2><p>阮一峰出品，非常详细的 commit message 和 change log 编写指南和最佳实践，可以配合<a href=\"https://zhuanlan.zhihu.com/p/36860301\">https://zhuanlan.zhihu.com/p/36860301</a>一起食用</p>\n<h2 id=\"Awesome-Mac\"><a href=\"#Awesome-Mac\" class=\"headerlink\" title=\"Awesome Mac\"></a><a href=\"https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md\">Awesome Mac</a></h2><p>收集了各种类别非常好用的 Mac 应用程序、软件以及工具</p>\n<h3 id=\"EffectiveMac\"><a href=\"#EffectiveMac\" class=\"headerlink\" title=\"EffectiveMac\"></a><a href=\"https://mac.bestswifter.com/\">EffectiveMac</a></h3><p>作者是在今日头条任职的 iOS 高级工程师，在这篇文章里介绍了 Mac 的一些使用技巧以及配置指南，包括 Vim、Git、Zsh 等工具的使用方式，是截止到目前为止我看过的最全面、最实用的 Mac 教程，经常用 Mac 的童鞋一定要抽空看一看！</p>\n","more":"<h3 id=\"【答疑解惑】为什么你的-Charles-会抓包失败？\"><a href=\"#【答疑解惑】为什么你的-Charles-会抓包失败？\" class=\"headerlink\" title=\"【答疑解惑】为什么你的 Charles 会抓包失败？\"></a><a href=\"https://www.cnblogs.com/skychx/p/use-charles.html\">【答疑解惑】为什么你的 Charles 会抓包失败？</a></h3><p>作为一名 Web 开发工程师，天天都会和网络打交道。Charles 作为一款网络抓包工具，几乎成了 Web 开发的标配。</p>\n<p>本文是我<strong>深度使用 Charles 后总结而成</strong>，不同于其它介绍 Charles 的文章，这篇文章不会详细介绍 Charles 的各个功能（例如 remote 和 rewrite），而是专注于分析一个问题：<strong>什么情况下 Charles 会抓包失败？</strong></p>\n<p>为了解决这个问题，我会从 Charles 的原理分析，并且结合 Android/iOS 的官方政策，一一分析 Charles 抓包中的那些失效问题。</p>\n<h2 id=\"IDE-中的魔法\"><a href=\"#IDE-中的魔法\" class=\"headerlink\" title=\"IDE 中的魔法\"></a><a href=\"https://www.zhihu.com/column/c_1463537113430441984\">IDE 中的魔法</a></h2><p>这是专栏文章，希望读者能够通过这系列文章，对 IDE 相关技术的实现有一定的认知，同时，通过对语言进行静态分析，能够从编译器的视角，审视语言特性，帮助大家在了解 IDE 的同时，也能更深入的了解语言本身。</p>\n<h2 id=\"黑客增长-从博客引流到公众号\"><a href=\"#黑客增长-从博客引流到公众号\" class=\"headerlink\" title=\"黑客增长: 从博客引流到公众号\"></a><a href=\"https://github.com/shfshanyue/op-note/blob/master/blog-to-wechat.md\">黑客增长: 从博客引流到公众号</a></h2><p>前几日在朋友圈刷到一篇文章 <a href=\"https://cuiqingcai.com/7463.html\">我是怎么把博客粉丝转到公众号的</a>，觉得相当有创意。最近一年在做 toC 产品，一直在谈拉新留存转化。<strong>这刚好可以作为一个黑客增长的成功案例</strong>。</p>\n<p>鉴于我自己也有一个博客，并且日均UV在200左右，决定来试一试。整理了一下思路，差不多与短信验证码的逻辑相似，于是花了一天时间搞定。</p>\n<p>另外，在此之前我也花了一天时间调研了 <code>serverless</code>。所以你完全可以<strong>零成本实现从博客到公众号引流的功能</strong>。</p>\n<h2 id=\"前端漫谈-一巴掌拍平Git中的各种概念\"><a href=\"#前端漫谈-一巴掌拍平Git中的各种概念\" class=\"headerlink\" title=\"[前端漫谈] 一巴掌拍平Git中的各种概念\"></a><a href=\"https://juejin.cn/post/6844903759961653261\">[前端漫谈] 一巴掌拍平Git中的各种概念</a></h2><p>讲git的文章很多，但是大部分都是一个套路，讲概念，讲命令，太多的概念和命令总是让人有一种稀里糊涂的感觉，讲的很对，但似乎没能讲透，没有醍醐灌顶的感觉，大概是我的悟性差吧。所以这几天一直在做各种git的实验，并且阅读了一些博客、文档、资料，综合下来整理出了这么一篇文章。注意：</p>\n<p>本篇文章旨在说明我对git的理解，只是一家之言，聊以分享。<br>本片文章不是一篇命令教程，或者概念说明，需要一定的git使用经验和踩坑经验。<br>为了阅读方便，commitID只保留4位</p>\n<h2 id=\"前端漫谈-Git-在项目中的完全控制实践\"><a href=\"#前端漫谈-Git-在项目中的完全控制实践\" class=\"headerlink\" title=\"[前端漫谈]Git 在项目中的完全控制实践\"></a><a href=\"https://juejin.cn/post/6844904015705161735\">[前端漫谈]Git 在项目中的完全控制实践</a></h2><p>这篇文章结合实际场景，主要描述我在项目实践中使用 Git 管理项目、团队协作的一些经验。包括  1）merge 和 rebase 使用的区别和选择；2）多人团队合作开发流程；3）标准化 commit message；4）commit 精细化管理等。这些都是为项目的健壮发展和代码的精细管理所流的泪累积出来的。</p>\n<h2 id=\"页面可视化搭建工具前生今世\"><a href=\"#页面可视化搭建工具前生今世\" class=\"headerlink\" title=\"页面可视化搭建工具前生今世\"></a><a href=\"https://zhuanlan.zhihu.com/p/37171897\">页面可视化搭建工具前生今世</a></h2><p>页面可视化搭建, 是一个历久弥新的话题. 更广义上讲, 页面是 GUI 的一部分, GUI 的拖拉生成在各种开发工具上很常见, 如 Android Studio, Xcode, Visual Studio 等. 前端页面早在十几年前就能用 Dreamweaver, Frontpage 等工具可视化搭建出来.文章目录：</p>\n<ul>\n<li>页面构成和页面组件化</li>\n<li>页面可视化搭建工具的必要性</li>\n<li>页面可视化搭建工具的区分维度</li>\n<li>业界的实践实例</li>\n</ul>\n<h2 id=\"Comparing-the-New-Generation-of-Build-Tools\"><a href=\"#Comparing-the-New-Generation-of-Build-Tools\" class=\"headerlink\" title=\"Comparing the New Generation of Build Tools\"></a><a href=\"https://css-tricks.com/comparing-the-new-generation-of-build-tools/\">Comparing the New Generation of Build Tools</a></h2><p>作者详细对比了常用的几个构建工具，文章目录：</p>\n<ul>\n<li>esbuild</li>\n<li>Snowpack</li>\n<li>Vite</li>\n<li>wmr</li>\n<li>Feature comparison</li>\n<li>Wrapping up</li>\n</ul>\n<h2 id=\"开源富文本编辑器技术的演进（2020-1024）\"><a href=\"#开源富文本编辑器技术的演进（2020-1024）\" class=\"headerlink\" title=\"开源富文本编辑器技术的演进（2020 1024）\"></a><a href=\"https://zhuanlan.zhihu.com/p/268366406\">开源富文本编辑器技术的演进（2020 1024）</a></h2><p>这里我主要从技术实现以及编程思想的演变，介绍编辑器这10年间的变化与发展。大概要说到下面这几款编辑器：</p>\n<ul>\n<li>CKEditor 1-4（2008）</li>\n<li>UEditor (2012)</li>\n<li>Quill.js（2012）</li>\n<li>CKEditor 5（2014）</li>\n<li>Prosemirror（2015）</li>\n<li>Draft.js（2015）</li>\n<li>Slate（2016）</li>\n</ul>\n<p>因为每一款编辑器想研究明白都需要花费几个月甚至半年的时间，所以这里主要说说我对这些编辑器的一个理解，介绍下他们的特点以及他们之间的区别，点到为止。</p>\n<h2 id=\"Charles-使用手册\"><a href=\"#Charles-使用手册\" class=\"headerlink\" title=\"Charles 使用手册\"></a><a href=\"https://juejin.cn/post/6844904031505088519\">Charles 使用手册</a></h2><p>作者总结了关于 Charles 的各种用法，包括基础、高级、进阶等用法</p>\n<h2 id=\"如履薄冰的复制粘贴-clipboard详解\"><a href=\"#如履薄冰的复制粘贴-clipboard详解\" class=\"headerlink\" title=\"如履薄冰的复制粘贴-clipboard详解\"></a><a href=\"https://juejin.cn/post/6903698870694313991\">如履薄冰的复制粘贴-clipboard详解</a></h2><p>本文从纯前端出发，因此不会涉及到类似flash或者插件之类跳过浏览器安全检测的操作实现的复制粘贴，完全基于浏览器下的安全限制与一些“奇技淫巧”去实现一个相对较为完整的复制粘贴功能。本文将从浏览器自身的复制粘贴功能出发，带领大家了解复制粘贴背后的功能实现，对比多个富文本文档实现，在浏览器的各种限制下，如何实现一个基于JSON-MODEL数据并且适用于类富文本的剪切板。</p>\n<h2 id=\"Commit-message-和-Change-log-编写指南\"><a href=\"#Commit-message-和-Change-log-编写指南\" class=\"headerlink\" title=\"Commit message 和 Change log 编写指南\"></a><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">Commit message 和 Change log 编写指南</a></h2><p>阮一峰出品，非常详细的 commit message 和 change log 编写指南和最佳实践，可以配合<a href=\"https://zhuanlan.zhihu.com/p/36860301\">https://zhuanlan.zhihu.com/p/36860301</a>一起食用</p>\n<h2 id=\"Awesome-Mac\"><a href=\"#Awesome-Mac\" class=\"headerlink\" title=\"Awesome Mac\"></a><a href=\"https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md\">Awesome Mac</a></h2><p>收集了各种类别非常好用的 Mac 应用程序、软件以及工具</p>\n<h3 id=\"EffectiveMac\"><a href=\"#EffectiveMac\" class=\"headerlink\" title=\"EffectiveMac\"></a><a href=\"https://mac.bestswifter.com/\">EffectiveMac</a></h3><p>作者是在今日头条任职的 iOS 高级工程师，在这篇文章里介绍了 Mac 的一些使用技巧以及配置指南，包括 Vim、Git、Zsh 等工具的使用方式，是截止到目前为止我看过的最全面、最实用的 Mac 教程，经常用 Mac 的童鞋一定要抽空看一看！</p>\n","categories":[{"name":"推荐","path":"api/categories/推荐.json"}],"tags":[{"name":"Mac","path":"api/tags/Mac.json"},{"name":"工具","path":"api/tags/工具.json"}]}