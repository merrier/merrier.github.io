{"title":"JS中判断字符串中是否含有一个子串","slug":"JS中判断字符串中是否含有一个子串","date":"2017-08-01T07:33:27.000Z","updated":"2019-02-04T06:11:30.226Z","comments":true,"path":"api/articles/JS中判断字符串中是否含有一个子串.json","excerpt":null,"covers":["/images/hexo_post_273.png"],"content":"<p>题目我就不过多解释了，这篇文章是对 <a href=\"https://stackoverflow.com/questions/1789945/how-to-check-whether-a-string-contains-a-substring-in-javascript\" target=\"_blank\" rel=\"noopener\">stackoverflow 上一个问题</a>的总结，如果英文不是特别差的话，推荐大家点击上面链接看大家对这个问题的详细讨论</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    substring = <span class=\"string\">\"oo\"</span>;</span><br><span class=\"line\">string.indexOf(substring) !== <span class=\"number\">-1</span>;</span><br></pre></td></tr></table></figure>\n<p>String 的原型方法，返回一个字符串在另一个字符串中的位置，如果没有找到的话就返回 -1；也是大家经常用的方案</p>\n<h3 id=\"ES6-的-includes\"><a href=\"#ES6-的-includes\" class=\"headerlink\" title=\"ES6 的 includes\"></a>ES6 的 includes</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    substring = <span class=\"string\">\"oo\"</span>;</span><br><span class=\"line\">string.includes(substring);</span><br></pre></td></tr></table></figure>\n<p>ES6 中新增的 String 原型方法（其实 Array 原型也有 includes 方法），可以<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看文档</p>\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    expr = <span class=\"regexp\">/oo/</span>;</span><br><span class=\"line\">string.search(expr);</span><br></pre></td></tr></table></figure>\n<p>String.prototype.search() 执行正则表达式和 String 对象之间的一个搜索匹配，所以参数需要是正则表达式，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看中文文档</p>\n<h3 id=\"lodash-的-includes\"><a href=\"#lodash-的-includes\" class=\"headerlink\" title=\"lodash 的 includes\"></a>lodash 的 includes</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    substring = <span class=\"string\">\"oo\"</span>;</span><br><span class=\"line\">_.includes(string, substring);</span><br></pre></td></tr></table></figure>\n<p>lodash 是一个前端库，其提供了一些更加拥抱未来的方法，其中就有 _.includes(str,substr)</p>\n<h3 id=\"RegExp-和-test\"><a href=\"#RegExp-和-test\" class=\"headerlink\" title=\"RegExp 和 test\"></a>RegExp 和 test</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    expr = <span class=\"regexp\">/oo/</span>;  <span class=\"comment\">// no quotes here</span></span><br><span class=\"line\">expr.test(string);</span><br></pre></td></tr></table></figure>\n<p>“正则表达式是万能的”，RegExp.prototype.test(str)</p>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    expr = <span class=\"regexp\">/oo/</span>;</span><br><span class=\"line\">string.match(expr);</span><br></pre></td></tr></table></figure>\n<p>和上面的 test 正好相反，match 方式是 String 的原型方法，String.prototype.match(expr)</p>\n<h2 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h2><p>既然有这么多方法都可以实现，那么哪一种才是“性能最优”的方法呢？早就有前辈替我们做了测试，可以<a href=\"http://jsben.ch/#/RVYk7\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看测试结果，或者直接看下面这张图片：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_273.png\" alt=\"\" width=\"500\"></div>\n\n<p>不出所料，果然原生方法 indexOf() 是最快的，所以我们以后就还尽量用 indexOf() 吧！</p>\n","more":"<p>题目我就不过多解释了，这篇文章是对 <a href=\"https://stackoverflow.com/questions/1789945/how-to-check-whether-a-string-contains-a-substring-in-javascript\" target=\"_blank\" rel=\"noopener\">stackoverflow 上一个问题</a>的总结，如果英文不是特别差的话，推荐大家点击上面链接看大家对这个问题的详细讨论</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    substring = <span class=\"string\">\"oo\"</span>;</span><br><span class=\"line\">string.indexOf(substring) !== <span class=\"number\">-1</span>;</span><br></pre></td></tr></table></figure>\n<p>String 的原型方法，返回一个字符串在另一个字符串中的位置，如果没有找到的话就返回 -1；也是大家经常用的方案</p>\n<h3 id=\"ES6-的-includes\"><a href=\"#ES6-的-includes\" class=\"headerlink\" title=\"ES6 的 includes\"></a>ES6 的 includes</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    substring = <span class=\"string\">\"oo\"</span>;</span><br><span class=\"line\">string.includes(substring);</span><br></pre></td></tr></table></figure>\n<p>ES6 中新增的 String 原型方法（其实 Array 原型也有 includes 方法），可以<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看文档</p>\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    expr = <span class=\"regexp\">/oo/</span>;</span><br><span class=\"line\">string.search(expr);</span><br></pre></td></tr></table></figure>\n<p>String.prototype.search() 执行正则表达式和 String 对象之间的一个搜索匹配，所以参数需要是正则表达式，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看中文文档</p>\n<h3 id=\"lodash-的-includes\"><a href=\"#lodash-的-includes\" class=\"headerlink\" title=\"lodash 的 includes\"></a>lodash 的 includes</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    substring = <span class=\"string\">\"oo\"</span>;</span><br><span class=\"line\">_.includes(string, substring);</span><br></pre></td></tr></table></figure>\n<p>lodash 是一个前端库，其提供了一些更加拥抱未来的方法，其中就有 _.includes(str,substr)</p>\n<h3 id=\"RegExp-和-test\"><a href=\"#RegExp-和-test\" class=\"headerlink\" title=\"RegExp 和 test\"></a>RegExp 和 test</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    expr = <span class=\"regexp\">/oo/</span>;  <span class=\"comment\">// no quotes here</span></span><br><span class=\"line\">expr.test(string);</span><br></pre></td></tr></table></figure>\n<p>“正则表达式是万能的”，RegExp.prototype.test(str)</p>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">    expr = <span class=\"regexp\">/oo/</span>;</span><br><span class=\"line\">string.match(expr);</span><br></pre></td></tr></table></figure>\n<p>和上面的 test 正好相反，match 方式是 String 的原型方法，String.prototype.match(expr)</p>\n<h2 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h2><p>既然有这么多方法都可以实现，那么哪一种才是“性能最优”的方法呢？早就有前辈替我们做了测试，可以<a href=\"http://jsben.ch/#/RVYk7\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看测试结果，或者直接看下面这张图片：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_273.png\" alt=\"\" width=\"500\"></div>\n\n<p>不出所料，果然原生方法 indexOf() 是最快的，所以我们以后就还尽量用 indexOf() 吧！</p>\n","categories":[{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"stackoverflow","path":"api/tags/stackoverflow.json"}]}