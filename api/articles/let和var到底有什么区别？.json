{"title":"let和var到底有什么区别？","slug":"let和var到底有什么区别？","date":"2017-08-04T08:10:14.000Z","updated":"2019-01-27T13:15:42.891Z","comments":true,"path":"api/articles/let和var到底有什么区别？.json","excerpt":null,"covers":null,"content":"<p>问题来自于stackoverflow：<a href=\"https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var-to-declare-a-variable\" target=\"_blank\" rel=\"noopener\">What’s the difference between using “let” and “var” to declare a variable?</a> 我们都知道 ES6 中引入了 let 声明，而 let 也一直被认为是声明“局部变量”，那么 let 和 var 到底有什么区别呢？</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>首先，从其定义本身，其区别之一是起作用的范围： var 起作用的范围是其最近的方法体，而 let 起作用的范围是其最近的包围块，所谓的“包围块”是有可能比方法体小的。但是<strong>如果都是全局作用域上声明的话，var 和 let 起作用的范围其实是一样的</strong> 除此之外，用 let 声明的变量在它们被声明之前是无法访问到的（有点类似于严格模式），举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'globalVar: '</span> + globalVar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'globalLet: '</span> + globalLet);</span><br><span class=\"line\"><span class=\"keyword\">var</span> globalVar = <span class=\"string\">'globalVar'</span>;  <span class=\"comment\">//globalVar: undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalLet = <span class=\"string\">'globalLet'</span>;  <span class=\"comment\">//Uncaught ReferenceError: globalLet is not defined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为全局变量\"><a href=\"#作为全局变量\" class=\"headerlink\" title=\"作为全局变量\"></a>作为全局变量</h2><p>和 var 不同，用 let 声明的“全局变量”将不会作为属性赋给 window，简单的栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"string\">'go'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'able'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.me); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.i); <span class=\"comment\">// 'able'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在函数中声明\"><a href=\"#在函数中声明\" class=\"headerlink\" title=\"在函数中声明\"></a>在函数中声明</h2><p>当它们在函数体中声明时是一样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ingWithinEstablishedParameters</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> funclet = <span class=\"string\">'funclet'</span>; <span class=\"comment\">//作用域为函数体内部</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> funcvar = <span class=\"string\">'funcvar'</span>; <span class=\"comment\">//作用域为函数体内部</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在循环体中声明\"><a href=\"#在循环体中声明\" class=\"headerlink\" title=\"在循环体中声明\"></a>在循环体中声明</h2><p>当我们在循环体中声明变量（例如 for）时，var 和 let 是有显著区别的：let 只在循环体内部可访问，而 var 在整个方法体中都可访问。还是个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allyIlliterate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//tuce在这里不可访问</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> tuce = <span class=\"number\">0</span>; tuce &lt; <span class=\"number\">5</span>; tuce++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//tuce只能在这里访问得到</span></span><br><span class=\"line\">        <span class=\"comment\">//所以每次循环之后tuce的值都会变</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//tuce在这里也不可访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">byE40</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//nish在这里可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> nish = <span class=\"number\">0</span>; nish &lt; <span class=\"number\">5</span>; nish++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//nish在整个方法体中都可以访问得到</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//nish在这里也可以访问</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明覆盖\"><a href=\"#声明覆盖\" class=\"headerlink\" title=\"声明覆盖\"></a>声明覆盖</h2><p>在严格模式下，var 允许你重新给一个变量赋值，但是 let 不允许：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"string\">'bar'</span>; <span class=\"comment\">// SyntaxError: Identifier 'me' has already been declared</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"string\">'bar'</span>; <span class=\"comment\">// 没毛病，现在me就是bar了</span></span><br></pre></td></tr></table></figure>\n<p>虽然 let 和 var 在某些情况下是一样的行为表现，但还是推荐大家多使用 let，逐渐放弃 var 的使用。</p>\n","more":"<p>问题来自于stackoverflow：<a href=\"https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var-to-declare-a-variable\" target=\"_blank\" rel=\"noopener\">What’s the difference between using “let” and “var” to declare a variable?</a> 我们都知道 ES6 中引入了 let 声明，而 let 也一直被认为是声明“局部变量”，那么 let 和 var 到底有什么区别呢？</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>首先，从其定义本身，其区别之一是起作用的范围： var 起作用的范围是其最近的方法体，而 let 起作用的范围是其最近的包围块，所谓的“包围块”是有可能比方法体小的。但是<strong>如果都是全局作用域上声明的话，var 和 let 起作用的范围其实是一样的</strong> 除此之外，用 let 声明的变量在它们被声明之前是无法访问到的（有点类似于严格模式），举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'globalVar: '</span> + globalVar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'globalLet: '</span> + globalLet);</span><br><span class=\"line\"><span class=\"keyword\">var</span> globalVar = <span class=\"string\">'globalVar'</span>;  <span class=\"comment\">//globalVar: undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalLet = <span class=\"string\">'globalLet'</span>;  <span class=\"comment\">//Uncaught ReferenceError: globalLet is not defined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为全局变量\"><a href=\"#作为全局变量\" class=\"headerlink\" title=\"作为全局变量\"></a>作为全局变量</h2><p>和 var 不同，用 let 声明的“全局变量”将不会作为属性赋给 window，简单的栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"string\">'go'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'able'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.me); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.i); <span class=\"comment\">// 'able'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在函数中声明\"><a href=\"#在函数中声明\" class=\"headerlink\" title=\"在函数中声明\"></a>在函数中声明</h2><p>当它们在函数体中声明时是一样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ingWithinEstablishedParameters</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> funclet = <span class=\"string\">'funclet'</span>; <span class=\"comment\">//作用域为函数体内部</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> funcvar = <span class=\"string\">'funcvar'</span>; <span class=\"comment\">//作用域为函数体内部</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在循环体中声明\"><a href=\"#在循环体中声明\" class=\"headerlink\" title=\"在循环体中声明\"></a>在循环体中声明</h2><p>当我们在循环体中声明变量（例如 for）时，var 和 let 是有显著区别的：let 只在循环体内部可访问，而 var 在整个方法体中都可访问。还是个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allyIlliterate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//tuce在这里不可访问</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> tuce = <span class=\"number\">0</span>; tuce &lt; <span class=\"number\">5</span>; tuce++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//tuce只能在这里访问得到</span></span><br><span class=\"line\">        <span class=\"comment\">//所以每次循环之后tuce的值都会变</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//tuce在这里也不可访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">byE40</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//nish在这里可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> nish = <span class=\"number\">0</span>; nish &lt; <span class=\"number\">5</span>; nish++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//nish在整个方法体中都可以访问得到</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//nish在这里也可以访问</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明覆盖\"><a href=\"#声明覆盖\" class=\"headerlink\" title=\"声明覆盖\"></a>声明覆盖</h2><p>在严格模式下，var 允许你重新给一个变量赋值，但是 let 不允许：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"string\">'bar'</span>; <span class=\"comment\">// SyntaxError: Identifier 'me' has already been declared</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"string\">'bar'</span>; <span class=\"comment\">// 没毛病，现在me就是bar了</span></span><br></pre></td></tr></table></figure>\n<p>虽然 let 和 var 在某些情况下是一样的行为表现，但还是推荐大家多使用 let，逐渐放弃 var 的使用。</p>\n","categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"stackoverflow","path":"api/tags/stackoverflow.json"},{"name":"ES6","path":"api/tags/ES6.json"}]}