{"title":"JS中的传值与传址","slug":"JS中的传值与传址","date":"2017-04-25T12:36:04.000Z","updated":"2019-11-14T05:12:01.467Z","comments":true,"path":"api/articles/JS中的传值与传址.json","excerpt":null,"covers":["/images/hexo_post_21.jpg"],"content":"<p>在 JS 中，有两种不同的方式可以操作数据的值，这两种技术分别叫做<strong>传值</strong>和<strong>传址</strong>。</p>\n<h2 id=\"数据值的操作\"><a href=\"#数据值的操作\" class=\"headerlink\" title=\"数据值的操作\"></a>数据值的操作</h2><p>要知道传址跟传址，首先我们先了解下数据值的操作。</p>\n<ol>\n<li><strong>复制</strong>：可以把它赋值给一个新的变量</li>\n<li><strong>传递</strong>：可以将他传递给一个函数或者方法</li>\n<li><strong>比较</strong>：可以与另外一个值比较，判断是否相等</li>\n</ol>\n<h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p><strong>传值</strong>：在赋值过程中，首先对值进行了一份拷贝，而后将这份拷贝存储到一个变量、对象属性或数组元素中。拷贝的值和原始的值是完全独立、互不影响的。当一份数据通过值传递给一个函数，实际上被传递的不是数据本身，而是数据的一份拷贝。因此，如果函数修改了这个值，影响到的只是数据的那份拷贝，而并不影响数据本身。</p>\n<p><strong>传址</strong>：在赋值过程中，变量实际上存储的是数据的地址（对数据的引用），而不是原始数据或者是数据的拷贝。如果值通过一个地址发生了改变，这个改变也会通过原始地址表现出来。</p>\n<h2 id=\"参阅对比表\"><a href=\"#参阅对比表\" class=\"headerlink\" title=\"参阅对比表\"></a>参阅对比表</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>传值</th>\n<th>传址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>复制</td>\n<td>实际复制的是值，存在于两个不同的独立拷贝</td>\n<td>复制的只是对数值的引用，即地址，如果通过这个新的引用修改了数值，这个改变对最初的引用也是可见的</td>\n</tr>\n<tr>\n<td>传递</td>\n<td>传递给函数的值是一个独立的拷贝，对它的改变函数外没有影响</td>\n<td>传递给函数的是对数值的一个引用。如果通过这个新的引用修改了数值，这个改变对最初的引用也是可见的</td>\n</tr>\n<tr>\n<td>比较</td>\n<td>比较两个独立的值，判断是否相同</td>\n<td>比较的是两个的引用，判断引用是否是同一个数值。对两个不同数值的引用不相等，即使这两个数值相等</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>根据操作数据方式的不同，我们可以把数据类型分为两类：<strong>基础类型</strong>和<strong>引用类型</strong>。</p>\n<ul>\n<li>基础类型主要有：数字(Number)、布尔类型(Boolean)；其操作方式为传值。</li>\n<li>引用类型主要有：对象(Object) —— 数组(Array)、函数(Function)；其操作方式为传址。</li>\n</ul>\n<p>数字和布尔类型是基础类型，它们是由很小的，固定数目字节组成，所以可以通过传值来操作；而数组和函数，是对象的特殊类型，也是引用类型。由于对象没有固定大小，所以无法通过传值进行操作。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传值（赋值操作）\"><a href=\"#传值（赋值操作）\" class=\"headerlink\" title=\"传值（赋值操作）\"></a>传值（赋值操作）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = a, a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a=\"</span> + a + <span class=\"string\">\",b=\"</span> + b);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_21.jpg\" alt=\"\" width=\"400\"></div>\n\n<p>a 先是被赋值为 1，接着把 a 的值赋给 b，这时会进行值的拷贝，因此b = 1；然后又把 a 赋值为 2。在没有执行 a = 2 之前，我们试试下列代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b);  <span class=\"comment\">// 输出为true. 可见它们在内存中是指向同一个位置的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传值（基础类型）\"><a href=\"#传值（基础类型）\" class=\"headerlink\" title=\"传值（基础类型）\"></a>传值（基础类型）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;            <span class=\"comment\">// 将a复制给b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">x,y</span>) </span>&#123;     <span class=\"comment\">// 函数修改参数的值</span></span><br><span class=\"line\">  x = x + y;              <span class=\"comment\">// 虽然这个里面将值进行相加，但是仅仅是值的独立拷贝，进行相加，在函数外面没有影响</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add1(a,b);                <span class=\"comment\">// 数字类型为传值</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">\"a:\"</span> + a + <span class=\"string\">\"n\"</span> + <span class=\"string\">\"b:\"</span> + b);      <span class=\"comment\">// a为1，b为1  </span></span><br><span class=\"line\">(a == b) ? c = <span class=\"string\">\"true\"</span> : c = <span class=\"string\">\"false\"</span>;  </span><br><span class=\"line\">alert(c);         <span class=\"comment\">// c = \"true\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传址（引用类型）\"><a href=\"#传址（引用类型）\" class=\"headerlink\" title=\"传址（引用类型）\"></a>传址（引用类型）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];      <span class=\"comment\">// 定义数组，引用类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;                           <span class=\"comment\">// 将a复制给b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;           <span class=\"comment\">// 函数修改参数的值</span></span><br><span class=\"line\">  x[<span class=\"number\">0</span>] = <span class=\"string\">\"tt\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(b);             <span class=\"comment\">// 数组对象为传址  </span></span><br><span class=\"line\">alert(<span class=\"string\">\"a:\"</span> + a[<span class=\"number\">0</span>] + a[<span class=\"number\">1</span>] + a[<span class=\"number\">2</span>] + a[<span class=\"number\">3</span>] + <span class=\"string\">\"n\"</span> + <span class=\"string\">\"b:\"</span> + b[<span class=\"number\">0</span>] + b[<span class=\"number\">1</span>] + b[<span class=\"number\">2</span>] + b[<span class=\"number\">3</span>]);  <span class=\"comment\">// b对象修改，则a也会修改，传址</span></span><br><span class=\"line\">(a == b) ? q = <span class=\"string\">\"true\"</span> : q = <span class=\"string\">\"false\"</span>;    <span class=\"comment\">// 判断 a=b  ，返回true</span></span><br><span class=\"line\">alert(q);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];</span><br><span class=\"line\">(a == b) ? q = <span class=\"string\">\"true\"</span> : q = <span class=\"string\">\"false\"</span>;     <span class=\"comment\">// 这里定义了两个对象，虽然值一样，但是不是同样的地址，所以为false</span></span><br><span class=\"line\">alert(q);    <span class=\"comment\">// 输出\"false\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数内的特殊引用\"><a href=\"#函数内的特殊引用\" class=\"headerlink\" title=\"函数内的特殊引用\"></a>函数内的特殊引用</h3><p>按值传递一个参数给函数就是制作该参数的一个独立复本，即一个只存在于该函数内的复本。即使按引用传递对象和数组时，如果直接在函数中用新值覆盖原先的值，在函数外并不反映新值。只有在对象的属性或者数组的元素改变时，在函数外才可以看出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newa = <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  newa[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] + b;</span><br><span class=\"line\">  newa[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>] + b;</span><br><span class=\"line\">  newa[<span class=\"number\">2</span>] = a[<span class=\"number\">2</span>] + b;</span><br><span class=\"line\">  a = newa;     <span class=\"comment\">// 重新覆盖了引用，所以外部是不可见的</span></span><br><span class=\"line\">  alert(a[<span class=\"number\">0</span>]);  <span class=\"comment\">// 11</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(a1, <span class=\"number\">10</span>);   </span><br><span class=\"line\">alert(a1[<span class=\"number\">0</span>]);     <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><p>前面看了这么多类型，一直都没有介绍字符串类型，它不好直接分为基础类型和引用类型，因为字符串\b可以是任意的长度，看上去应该是引用类型，可是他却不是对象，所以也不可作为引用类型；总结一下，<strong>字符串是按引用(即地址)复制和传递的，但是是按值来比较的。</strong></p>\n<p>请注意，假如有两个 String 对象（用 new String(“something”) 创建的），按引用比较它们，但是，如果其中一个或者两者都是字符串值的话，按值比较它们</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>复制</th>\n<th>传递</th>\n<th>比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数字</td>\n<td>传值</td>\n<td>传值</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>传值</td>\n<td>传值</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>不可变</td>\n<td>不可变</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>传址</td>\n<td>传址</td>\n<td>传址</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/joe2014/archive/2014/06/28/3813919.html\" target=\"_blank\" rel=\"noopener\">JS 基础知识2 传值和传址</a></li>\n<li><a href=\"http://www.cnblogs.com/idayln/p/3346242.html\" target=\"_blank\" rel=\"noopener\">图解JS的传值与传址</a></li>\n<li><a href=\"http://lxneliu.iteye.com/blog/1567205\" target=\"_blank\" rel=\"noopener\">JS 传值与传址</a></li>\n</ul>\n","more":"<p>在 JS 中，有两种不同的方式可以操作数据的值，这两种技术分别叫做<strong>传值</strong>和<strong>传址</strong>。</p>\n<h2 id=\"数据值的操作\"><a href=\"#数据值的操作\" class=\"headerlink\" title=\"数据值的操作\"></a>数据值的操作</h2><p>要知道传址跟传址，首先我们先了解下数据值的操作。</p>\n<ol>\n<li><strong>复制</strong>：可以把它赋值给一个新的变量</li>\n<li><strong>传递</strong>：可以将他传递给一个函数或者方法</li>\n<li><strong>比较</strong>：可以与另外一个值比较，判断是否相等</li>\n</ol>\n<h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p><strong>传值</strong>：在赋值过程中，首先对值进行了一份拷贝，而后将这份拷贝存储到一个变量、对象属性或数组元素中。拷贝的值和原始的值是完全独立、互不影响的。当一份数据通过值传递给一个函数，实际上被传递的不是数据本身，而是数据的一份拷贝。因此，如果函数修改了这个值，影响到的只是数据的那份拷贝，而并不影响数据本身。</p>\n<p><strong>传址</strong>：在赋值过程中，变量实际上存储的是数据的地址（对数据的引用），而不是原始数据或者是数据的拷贝。如果值通过一个地址发生了改变，这个改变也会通过原始地址表现出来。</p>\n<h2 id=\"参阅对比表\"><a href=\"#参阅对比表\" class=\"headerlink\" title=\"参阅对比表\"></a>参阅对比表</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>传值</th>\n<th>传址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>复制</td>\n<td>实际复制的是值，存在于两个不同的独立拷贝</td>\n<td>复制的只是对数值的引用，即地址，如果通过这个新的引用修改了数值，这个改变对最初的引用也是可见的</td>\n</tr>\n<tr>\n<td>传递</td>\n<td>传递给函数的值是一个独立的拷贝，对它的改变函数外没有影响</td>\n<td>传递给函数的是对数值的一个引用。如果通过这个新的引用修改了数值，这个改变对最初的引用也是可见的</td>\n</tr>\n<tr>\n<td>比较</td>\n<td>比较两个独立的值，判断是否相同</td>\n<td>比较的是两个的引用，判断引用是否是同一个数值。对两个不同数值的引用不相等，即使这两个数值相等</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>根据操作数据方式的不同，我们可以把数据类型分为两类：<strong>基础类型</strong>和<strong>引用类型</strong>。</p>\n<ul>\n<li>基础类型主要有：数字(Number)、布尔类型(Boolean)；其操作方式为传值。</li>\n<li>引用类型主要有：对象(Object) —— 数组(Array)、函数(Function)；其操作方式为传址。</li>\n</ul>\n<p>数字和布尔类型是基础类型，它们是由很小的，固定数目字节组成，所以可以通过传值来操作；而数组和函数，是对象的特殊类型，也是引用类型。由于对象没有固定大小，所以无法通过传值进行操作。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传值（赋值操作）\"><a href=\"#传值（赋值操作）\" class=\"headerlink\" title=\"传值（赋值操作）\"></a>传值（赋值操作）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = a, a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a=\"</span> + a + <span class=\"string\">\",b=\"</span> + b);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_21.jpg\" alt=\"\" width=\"400\"></div>\n\n<p>a 先是被赋值为 1，接着把 a 的值赋给 b，这时会进行值的拷贝，因此b = 1；然后又把 a 赋值为 2。在没有执行 a = 2 之前，我们试试下列代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b);  <span class=\"comment\">// 输出为true. 可见它们在内存中是指向同一个位置的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传值（基础类型）\"><a href=\"#传值（基础类型）\" class=\"headerlink\" title=\"传值（基础类型）\"></a>传值（基础类型）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;            <span class=\"comment\">// 将a复制给b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">x,y</span>) </span>&#123;     <span class=\"comment\">// 函数修改参数的值</span></span><br><span class=\"line\">  x = x + y;              <span class=\"comment\">// 虽然这个里面将值进行相加，但是仅仅是值的独立拷贝，进行相加，在函数外面没有影响</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add1(a,b);                <span class=\"comment\">// 数字类型为传值</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">\"a:\"</span> + a + <span class=\"string\">\"n\"</span> + <span class=\"string\">\"b:\"</span> + b);      <span class=\"comment\">// a为1，b为1  </span></span><br><span class=\"line\">(a == b) ? c = <span class=\"string\">\"true\"</span> : c = <span class=\"string\">\"false\"</span>;  </span><br><span class=\"line\">alert(c);         <span class=\"comment\">// c = \"true\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传址（引用类型）\"><a href=\"#传址（引用类型）\" class=\"headerlink\" title=\"传址（引用类型）\"></a>传址（引用类型）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];      <span class=\"comment\">// 定义数组，引用类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;                           <span class=\"comment\">// 将a复制给b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;           <span class=\"comment\">// 函数修改参数的值</span></span><br><span class=\"line\">  x[<span class=\"number\">0</span>] = <span class=\"string\">\"tt\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(b);             <span class=\"comment\">// 数组对象为传址  </span></span><br><span class=\"line\">alert(<span class=\"string\">\"a:\"</span> + a[<span class=\"number\">0</span>] + a[<span class=\"number\">1</span>] + a[<span class=\"number\">2</span>] + a[<span class=\"number\">3</span>] + <span class=\"string\">\"n\"</span> + <span class=\"string\">\"b:\"</span> + b[<span class=\"number\">0</span>] + b[<span class=\"number\">1</span>] + b[<span class=\"number\">2</span>] + b[<span class=\"number\">3</span>]);  <span class=\"comment\">// b对象修改，则a也会修改，传址</span></span><br><span class=\"line\">(a == b) ? q = <span class=\"string\">\"true\"</span> : q = <span class=\"string\">\"false\"</span>;    <span class=\"comment\">// 判断 a=b  ，返回true</span></span><br><span class=\"line\">alert(q);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];</span><br><span class=\"line\">(a == b) ? q = <span class=\"string\">\"true\"</span> : q = <span class=\"string\">\"false\"</span>;     <span class=\"comment\">// 这里定义了两个对象，虽然值一样，但是不是同样的地址，所以为false</span></span><br><span class=\"line\">alert(q);    <span class=\"comment\">// 输出\"false\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数内的特殊引用\"><a href=\"#函数内的特殊引用\" class=\"headerlink\" title=\"函数内的特殊引用\"></a>函数内的特殊引用</h3><p>按值传递一个参数给函数就是制作该参数的一个独立复本，即一个只存在于该函数内的复本。即使按引用传递对象和数组时，如果直接在函数中用新值覆盖原先的值，在函数外并不反映新值。只有在对象的属性或者数组的元素改变时，在函数外才可以看出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newa = <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  newa[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] + b;</span><br><span class=\"line\">  newa[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>] + b;</span><br><span class=\"line\">  newa[<span class=\"number\">2</span>] = a[<span class=\"number\">2</span>] + b;</span><br><span class=\"line\">  a = newa;     <span class=\"comment\">// 重新覆盖了引用，所以外部是不可见的</span></span><br><span class=\"line\">  alert(a[<span class=\"number\">0</span>]);  <span class=\"comment\">// 11</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(a1, <span class=\"number\">10</span>);   </span><br><span class=\"line\">alert(a1[<span class=\"number\">0</span>]);     <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><p>前面看了这么多类型，一直都没有介绍字符串类型，它不好直接分为基础类型和引用类型，因为字符串\b可以是任意的长度，看上去应该是引用类型，可是他却不是对象，所以也不可作为引用类型；总结一下，<strong>字符串是按引用(即地址)复制和传递的，但是是按值来比较的。</strong></p>\n<p>请注意，假如有两个 String 对象（用 new String(“something”) 创建的），按引用比较它们，但是，如果其中一个或者两者都是字符串值的话，按值比较它们</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>复制</th>\n<th>传递</th>\n<th>比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数字</td>\n<td>传值</td>\n<td>传值</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>传值</td>\n<td>传值</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>不可变</td>\n<td>不可变</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>传址</td>\n<td>传址</td>\n<td>传址</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/joe2014/archive/2014/06/28/3813919.html\" target=\"_blank\" rel=\"noopener\">JS 基础知识2 传值和传址</a></li>\n<li><a href=\"http://www.cnblogs.com/idayln/p/3346242.html\" target=\"_blank\" rel=\"noopener\">图解JS的传值与传址</a></li>\n<li><a href=\"http://lxneliu.iteye.com/blog/1567205\" target=\"_blank\" rel=\"noopener\">JS 传值与传址</a></li>\n</ul>\n","categories":[{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"面试","path":"api/tags/面试.json"}]}