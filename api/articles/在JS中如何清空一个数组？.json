{"title":"在JS中如何清空一个数组？","slug":"在JS中如何清空一个数组？","date":"2017-08-04T15:30:29.000Z","updated":"2025-01-03T13:10:40.012Z","comments":true,"path":"api/articles/在JS中如何清空一个数组？.json","excerpt":null,"covers":null,"content":"<p>问题来源于stackoverflow：<a href=\"https://stackoverflow.com/questions/1232040/how-do-i-empty-an-array-in-javascript\">How do I empty an array in JavaScript?</a>。更多关于JS中数组的相关操作参见：<a href=\"/20170322/summary-of-array-method-in-js.html\">JS中数组方法总结</a> 比如我有如下数组：<code>A = [1, 2, 3, 4]</code>; 我如何清空它？</p>\n<h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A = [];\"></a>A = [];</h2><p>这个答案应该很好想到，因为很符合“从问题本身出发”的逻辑，既然我们想清空数组 A，那就清空喽~ 但是这个方法有一个弊端：如果你之前通过引用的方式 copy 了数组A，那么即使通过 <code>A = []</code> 将数组 A 清空了，你的引用变量也还是 A 原来的值，理论知识总是难理解，举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;  <span class=\"comment\">//arr2是arr1的一个引用</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2 === arr1)  <span class=\"comment\">//arr2和arr1共享内存地址</span></span><br><span class=\"line\">arr1 = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2);  <span class=\"comment\">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]，此时arr2和arr1就互相不认识了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"A-length-0\"><a href=\"#A-length-0\" class=\"headerlink\" title=\"A.length = 0\"></a>A.length = 0</h2><p>因为在 JS 中数组其实也是一个对象（所谓的“数组对象”），而每个数组都有一个 length 属性，这是一个可读写的属性，将其置为 0 之后就可以清空数组。同时它的引用变量也将被清空：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;  <span class=\"comment\">// 我胡汉三又来引用了</span></span><br><span class=\"line\">arr1.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1);  <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2);  <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1 === arr2)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"A-splice-0-A-length\"><a href=\"#A-splice-0-A-length\" class=\"headerlink\" title=\"A.splice(0, A.length)\"></a>A.splice(0, A.length)</h2><p>和上面的通过 length 清空类似，该方法也将同时清空数组 arr2。不同点在于，.splice() 方法将返回一个数组</p>\n<h2 id=\"while-和-pop\"><a href=\"#while-和-pop\" class=\"headerlink\" title=\"while 和 .pop()\"></a>while 和 .pop()</h2><p>这是一个比较“愚蠢”的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(A.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法同样会清空数组 arr2，但是也是效率最低的一种方法</p>\n<h2 id=\"while和-shift\"><a href=\"#while和-shift\" class=\"headerlink\" title=\"while和.shift()\"></a>while和.shift()</h2><p>一般“愚蠢”的方法不止一种。。：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(A.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h2><p>可以<a href=\"http://jsben.ch/hyj65\">点击这里</a>查看这四种方法的性能测试结果，或者直接看下图：</p>\n<div align='center'><img src='/images/hexo_post_277.png' alt='' width='500' /></div>\n\n<p>从图中可以很明显的看出来，<code>A.length = 0;</code> 这种方法是效率最高的，效率最低的是 pop 和 shift（不出所料啊。。）</p>\n","more":"<p>问题来源于stackoverflow：<a href=\"https://stackoverflow.com/questions/1232040/how-do-i-empty-an-array-in-javascript\">How do I empty an array in JavaScript?</a>。更多关于JS中数组的相关操作参见：<a href=\"/20170322/summary-of-array-method-in-js.html\">JS中数组方法总结</a> 比如我有如下数组：<code>A = [1, 2, 3, 4]</code>; 我如何清空它？</p>\n<h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A = [];\"></a>A = [];</h2><p>这个答案应该很好想到，因为很符合“从问题本身出发”的逻辑，既然我们想清空数组 A，那就清空喽~ 但是这个方法有一个弊端：如果你之前通过引用的方式 copy 了数组A，那么即使通过 <code>A = []</code> 将数组 A 清空了，你的引用变量也还是 A 原来的值，理论知识总是难理解，举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;  <span class=\"comment\">//arr2是arr1的一个引用</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2 === arr1)  <span class=\"comment\">//arr2和arr1共享内存地址</span></span><br><span class=\"line\">arr1 = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2);  <span class=\"comment\">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]，此时arr2和arr1就互相不认识了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"A-length-0\"><a href=\"#A-length-0\" class=\"headerlink\" title=\"A.length = 0\"></a>A.length = 0</h2><p>因为在 JS 中数组其实也是一个对象（所谓的“数组对象”），而每个数组都有一个 length 属性，这是一个可读写的属性，将其置为 0 之后就可以清空数组。同时它的引用变量也将被清空：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;  <span class=\"comment\">// 我胡汉三又来引用了</span></span><br><span class=\"line\">arr1.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1);  <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2);  <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1 === arr2)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"A-splice-0-A-length\"><a href=\"#A-splice-0-A-length\" class=\"headerlink\" title=\"A.splice(0, A.length)\"></a>A.splice(0, A.length)</h2><p>和上面的通过 length 清空类似，该方法也将同时清空数组 arr2。不同点在于，.splice() 方法将返回一个数组</p>\n<h2 id=\"while-和-pop\"><a href=\"#while-和-pop\" class=\"headerlink\" title=\"while 和 .pop()\"></a>while 和 .pop()</h2><p>这是一个比较“愚蠢”的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(A.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法同样会清空数组 arr2，但是也是效率最低的一种方法</p>\n<h2 id=\"while和-shift\"><a href=\"#while和-shift\" class=\"headerlink\" title=\"while和.shift()\"></a>while和.shift()</h2><p>一般“愚蠢”的方法不止一种。。：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(A.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h2><p>可以<a href=\"http://jsben.ch/hyj65\">点击这里</a>查看这四种方法的性能测试结果，或者直接看下图：</p>\n<div align='center'><img src='/images/hexo_post_277.png' alt='' width='500' /></div>\n\n<p>从图中可以很明显的看出来，<code>A.length = 0;</code> 这种方法是效率最高的，效率最低的是 pop 和 shift（不出所料啊。。）</p>\n","categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"stackoverflow","path":"api/tags/stackoverflow.json"},{"name":"数组","path":"api/tags/数组.json"}]}