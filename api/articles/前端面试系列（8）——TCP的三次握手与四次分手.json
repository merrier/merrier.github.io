{"title":"前端面试系列（8）——TCP的三次握手与四次分手","slug":"前端面试系列（8）——TCP的三次握手与四次分手","date":"2017-04-05T08:07:21.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（8）——TCP的三次握手与四次分手.json","excerpt":null,"covers":["/images/hexo_post_123.jpg","/images/hexo_post_58.jpeg","/images/hexo_post_223.jpg","/images/hexo_post_74.jpg"],"content":"<h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><p><a href=\"http://baike.baidu.com/link?url=eNyUOgDeOV5z-03dVd8M1Y2jazNBA9n_eeqpsGs6DROKf_Eezztf31POgn2yMVtzxhX1BIcma9hIT2lzwaeswKAUZHNBSzFasHHI6SsZKnGJJVu2fKrPkMh3byyFTt1j4VqBV4re8SYTBTMDXY_L7clee5XEglKSOAWJqr5E_QRD6INjs03VMQNOUstxguVR-oOfOPGi4cah5m0VFukOkpT6STLUEGHWUIUUYFv0aAgMRFovp5EWN7V3iMdEZQ0a6ikGU90BRIYMLLIKsVNjP8Szj4c6SexwpfRM6D5CjjG\" target=\"_blank\" rel=\"noopener\">开放系统互连参考模型</a> (Open System Interconnect 简称 OSI）是国际标准化组织（ISO）和国际电报电话咨询委员会（CCITT）联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。每一层的功能是独立的。它利用其下一层提供的服务并为其上一层提供服务，而与其他层的具体实现无关。这里所谓的“服务”就是下一层向上一层提供的通信功能和层之间的会话规定，一般用通信原语实现。两个开放系统中的同等层之间的通信规则和约定称之为协议。通常把1～4层协议称为下层协议，5～7 层协议称为上层协议。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_123.jpg\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP / IP\"></a>TCP / IP</h3><p>TCP 工作在网络 OSI 的七层模型中的第四层——Transport 层，IP 在第三层——Network 层，ARP 在第二层——Data Link 层；在第二层上的数据，我们把它叫 Frame，在第三层上的数据叫 Packet，第四层的数据叫 Segment。同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。在 OSI 七层模型中，每一层的作用和对应的协议如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_58.jpeg\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h2><p>TCP 是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记 TCP 协议中每个字段的含义。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_223.jpg\" alt=\"\" width=\"700\"></div>\n\n<p>上面就是 TCP 协议头部的格式，下面就将每个字段的信息都详细的说明一下。</p>\n<ul>\n<li><strong>Source Port</strong>和<strong>Destination Port</strong>：分别占用 16 位，表示源端口号和目的端口号；用于区别主机中的不同进程，而 IP 地址是用来区分不同的主机的，源端口号和目的端口号配合上 IP 首部中的源 IP 地址和目的 IP 地址就能唯一的确定一个 TCP 连接；</li>\n<li><strong>Sequence Number</strong>：用来标识从 TCP 发端向 TCP 收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；</li>\n<li><strong>Acknowledgment Number</strong>：32 位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加 1。不过，只有当标志位中的 ACK 标志（下面介绍）为 1 时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li>\n<li><strong>Offset</strong>：给出首部中 32 bit 字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占 4bit（最多能表示 15 个 32bit 的的字，即 4*15=60 个字节的首部长度），因此 TCP 最多有 60 字节的首部。然而，没有任选字段，正常的长度是 20 字节；</li>\n<li><strong>TCP Flags</strong>：TCP 首部中有 6 个标志比特，它们中的多个可同时被设置为 1，主要是用于操控 TCP 的状态机的，依次为 <code>URG</code>，<code>ACK</code>，<code>PSH</code>，<code>RST</code>，<code>SYN</code>，<code>FIN</code>。每个标志位的意思如下：<ul>\n<li>URG：此标志表示 TCP 包的紧急指针域（后面马上就要说到）有效，用来保证 TCP 连接不被中断，并且督促中间层设备要尽快处理这些数据；</li>\n<li><strong>ACK</strong>：此标志表示应答域有效，就是说前面所说的 TCP 应答号将会包含在 TCP 数据包中；有两个取值：0 和 1，为 1 的时候表示应答域有效，反之为 0；</li>\n<li>PSH：这个标志位表示 Push 操作。所谓 Push 操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li>\n<li>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li>\n<li><strong>SYN</strong>：表示同步序号，用来建立连接。<code>SYN</code> 标志位和 <code>ACK</code> 标志位搭配使用，当连接请求的时候，<code>SYN</code> = 1，<code>ACK</code> = 0；连接被响应的时候，<code>SYN</code> = 1，<code>ACK</code> = 1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有 <code>SYN</code> 的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行 TCP 三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行 TCP 的三次握手；</li>\n<li>FIN：表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送 <code>FIN</code> 标志位的 TCP 数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n</li>\n<li><strong>Window</strong>：窗口大小，也就是有名的滑动窗口，用来进行流量控制；这是一个复杂的问题，这篇博文中并不会进行总结的；</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>TCP 是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在 TCP / IP 协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。这就是面试中经常会被问到的 <strong>TCP 三次握手</strong>。\b下图很形象的展示了三次握手和四次分手的数据交换：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_74.jpg\" alt=\"\" width=\"400\"></div>\n\n<ol>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将 <code>SYN</code> 位置为1，<code>Sequence Number</code> 为 x；然后，客户端进入 <code>SYN_SEND</code> 状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到 <code>SYN</code> 报文段。服务器收到客户端的 <code>SYN</code> 报文段，需要对这个 <code>SYN</code> 报文段进行确认，设置 <code>Acknowledgment Number</code> 为 x+1(<code>Sequence Number</code> + 1)；同时，自己自己还要发送 <code>SYN</code> 请求信息，将 <code>SYN</code> 位置为1，<code>Sequence Number</code> 为 y；服务器端将上述所有信息放到一个报文段（即 <code>SYN + ACK</code> 报文段）中，一并发送给客户端，此时服务器进入 <code>SYN_RECV</code> 状态；</li>\n<li>第三次握手：客户端收到服务器的<code>SYN + ACK</code> 报文段。然后将 <code>Acknowledgment Number</code> 设置为 y+1，向服务器发送 <code>ACK</code> 报文段，这个报文段发送完毕以后，客户端和服务器端都进入 <code>ESTABLISHED</code> 状态，完成 TCP 三次握手。</li>\n</ol>\n<p>完成了三次握手，客户端和服务器端就可以开始传送数据。</p>\n<h2 id=\"四次分手\"><a href=\"#四次分手\" class=\"headerlink\" title=\"四次分手\"></a>四次分手</h2><p>当客户端和服务器通过三次握手建立了 TCP 连接以后，当数据传送完毕，肯定是要断开 TCP 连接的啊。那对于 TCP 的断开连接，这里就有了神秘的“四次分手”。</p>\n<ol>\n<li>第一次分手：主机 1（可以是客户端，也可以是服务器端），设置 <code>Sequence Number</code> 和 <code>Acknowledgment Number</code>，向主机 2 发送一个 <code>FIN</code> 报文段；此时，主机 1 进入 <code>FIN_WAIT_1</code> 状态；这表示主机1没有数据要发送给主机 2 了；</li>\n<li>第二次分手：主机 2 收到了主机1发送的 <code>FIN</code> 报文段，向主机 1 回一个 <code>ACK</code> 报文段，<code>Acknowledgment Number</code> 为 <code>Sequence Number</code> 加 1；主机 1 进入 <code>FIN_WAIT_2</code> 状态；主机 2 告诉主机 1，我“同意”你的关闭请求；</li>\n<li>第三次分手：主机 2 向主机 1 发送 <code>FIN</code> 报文段，请求关闭连接，同时主机 2 进入 <code>LAST_ACK</code> 状态；</li>\n<li>第四次分手：主机 1 收到主机 2 发送的 <code>FIN</code> 报文段，向主机 2 发送 <code>ACK</code> 报文段，然后主机 1 进入 <code>TIME_WAIT</code> 状态；主机 2 收到主机 1 的 <code>ACK</code> 报文段以后，就关闭连接；此时，主机 1 等待 2MSL 后依然没有收到回复，则证明 Server 端已正常关闭，那好，主机 1 也可以关闭连接了。</li>\n</ol>\n<p>至此，TCP 的四次分手就这么愉快的完成了。</p>\n<h3 id=\"为什么要握手三次\"><a href=\"#为什么要握手三次\" class=\"headerlink\" title=\"为什么要握手三次\"></a>为什么要握手三次</h3><p>既然总结了 TCP 的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那 TCP 为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p>\n<blockquote>\n<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n</blockquote>\n<p>在书中同时举了一个例子：</p>\n<blockquote>\n<p>“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。”</p>\n</blockquote>\n<p>总结一下就是为了<strong>防止服务器端一直等待而浪费资源。</strong></p>\n<h2 id=\"为什么要分手四次\"><a href=\"#为什么要分手四次\" class=\"headerlink\" title=\"为什么要分手四次\"></a>为什么要分手四次</h2><p>那四次分手又是为何呢？TCP 协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP 是全双工模式，这就意味着，当主机 1 发出 <code>FIN</code> 报文段时，只是表示主机 1 已经没有数据要发送了，主机 1 告诉主机 2，它的数据已经全部发送完毕了；但是，这个时候主机 1 还是可以接受来自主机 2 的数据；当主机 2 返回 <code>ACK</code> 报文段时，表示它已经知道主机 1 没有数据发送了，但是主机 2 还是可以发送数据到主机 1 的；当主机 2 也发送了 <code>FIN</code> 报文段时，这个时候就表示主机 2 也没有数据要发送了，就会告诉主机 1，我也没有数据要发送了，之后彼此就会愉快的中断这次 TCP 连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>\n<ul>\n<li><code>FIN_WAIT_1</code>：这个状态要好好解释一下，其实 <code>FIN_WAIT_1</code> 和 <code>FIN_WAIT_2</code> 状态的真正含义都是表示等待对方的 FIN 报文。而这两种状态的区别是：<code>FIN_WAIT_1</code> 状态实际上是当 SOCKET 在 ESTABLISHED 状态时，它想主动关闭连接，向对方发送了 <code>FIN</code> 报文，此时该 SOCKET 即进入到 <code>FIN_WAIT_1</code> 状态。而当对方回应 ACK 报文后，则进入到 <code>FIN_WAIT_2</code> 状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应 ACK 报文，所以 <code>FIN_WAIT_1</code> 状态一般是比较难见到的，而 <code>FIN_WAIT_2</code> 状态还有时常常可以用 netstat 看到。（主动方）</li>\n<li><code>FIN_WAIT_2</code>：上面已经详细解释了这种状态，实际上 <code>FIN_WAIT_2</code> 状态下的 SOCKET，表示半连接，也即有一方要求 close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK 信息)，稍后再关闭连接。（主动方）</li>\n<li><code>CLOSE_WAIT</code>：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方 close 一个 SOCKET 后发送 <code>FIN</code> 报文给自己，你系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 <code>CLOSE_WAIT</code> 状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close 这个 SOCKET，发送 <code>FIN</code> 报文给对方，也即关闭连接。所以你在 <code>CLOSE_WAIT</code> 状态下，需要完成的事情是等待你去关闭连接。（被动方）</li>\n<li><code>LAST_ACK</code>：这个状态还是比较容易好理解的，它是被动关闭一方在发送 <code>FIN</code> 报文后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态了。（被动方）</li>\n<li><code>TIME_WAIT</code>：表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态了。如果 FIN_WAIT_1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 <code>TIME_WAIT</code> 状态，而无须经过 <code>FIN_WAIT_2</code> 状态。（主动方）</li>\n<li><code>CLOSED</code>：表示连接中断。</li>\n</ul>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"><a href=\"#1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\" class=\"headerlink\" title=\"1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"></a>1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</h3><p>这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建连请求后，它可以把 ACK 和 SYN（ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上关闭 SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的。</p>\n<h3 id=\"2．为什么-TIME-WAIT-状态还需要等-2MSL-后才能返回到-CLOSED-状态？\"><a href=\"#2．为什么-TIME-WAIT-状态还需要等-2MSL-后才能返回到-CLOSED-状态？\" class=\"headerlink\" title=\"2．为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？\"></a>2．为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？</h3><p>这是因为虽然双方都同意关闭连接了，而且握手的 4 个报文也都协调和发送完毕，按理可以直接回到 CLOSED 状态（就好比从 SYN_SEND 状态到 ESTABLISH 状态那样）；但是因为我们必须要假想网络是不可靠的，你无法保证你最后发送的 ACK 报文会一定被对方收到，因此对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文，而重发 FIN 报文，所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/20879359\" target=\"_blank\" rel=\"noopener\">怎样生动描述TCP的「三次握手」？</a></li>\n</ul>\n","more":"<h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><p><a href=\"http://baike.baidu.com/link?url=eNyUOgDeOV5z-03dVd8M1Y2jazNBA9n_eeqpsGs6DROKf_Eezztf31POgn2yMVtzxhX1BIcma9hIT2lzwaeswKAUZHNBSzFasHHI6SsZKnGJJVu2fKrPkMh3byyFTt1j4VqBV4re8SYTBTMDXY_L7clee5XEglKSOAWJqr5E_QRD6INjs03VMQNOUstxguVR-oOfOPGi4cah5m0VFukOkpT6STLUEGHWUIUUYFv0aAgMRFovp5EWN7V3iMdEZQ0a6ikGU90BRIYMLLIKsVNjP8Szj4c6SexwpfRM6D5CjjG\" target=\"_blank\" rel=\"noopener\">开放系统互连参考模型</a> (Open System Interconnect 简称 OSI）是国际标准化组织（ISO）和国际电报电话咨询委员会（CCITT）联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。每一层的功能是独立的。它利用其下一层提供的服务并为其上一层提供服务，而与其他层的具体实现无关。这里所谓的“服务”就是下一层向上一层提供的通信功能和层之间的会话规定，一般用通信原语实现。两个开放系统中的同等层之间的通信规则和约定称之为协议。通常把1～4层协议称为下层协议，5～7 层协议称为上层协议。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_123.jpg\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP / IP\"></a>TCP / IP</h3><p>TCP 工作在网络 OSI 的七层模型中的第四层——Transport 层，IP 在第三层——Network 层，ARP 在第二层——Data Link 层；在第二层上的数据，我们把它叫 Frame，在第三层上的数据叫 Packet，第四层的数据叫 Segment。同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。在 OSI 七层模型中，每一层的作用和对应的协议如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_58.jpeg\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h2><p>TCP 是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记 TCP 协议中每个字段的含义。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_223.jpg\" alt=\"\" width=\"700\"></div>\n\n<p>上面就是 TCP 协议头部的格式，下面就将每个字段的信息都详细的说明一下。</p>\n<ul>\n<li><strong>Source Port</strong>和<strong>Destination Port</strong>：分别占用 16 位，表示源端口号和目的端口号；用于区别主机中的不同进程，而 IP 地址是用来区分不同的主机的，源端口号和目的端口号配合上 IP 首部中的源 IP 地址和目的 IP 地址就能唯一的确定一个 TCP 连接；</li>\n<li><strong>Sequence Number</strong>：用来标识从 TCP 发端向 TCP 收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；</li>\n<li><strong>Acknowledgment Number</strong>：32 位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加 1。不过，只有当标志位中的 ACK 标志（下面介绍）为 1 时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li>\n<li><strong>Offset</strong>：给出首部中 32 bit 字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占 4bit（最多能表示 15 个 32bit 的的字，即 4*15=60 个字节的首部长度），因此 TCP 最多有 60 字节的首部。然而，没有任选字段，正常的长度是 20 字节；</li>\n<li><strong>TCP Flags</strong>：TCP 首部中有 6 个标志比特，它们中的多个可同时被设置为 1，主要是用于操控 TCP 的状态机的，依次为 <code>URG</code>，<code>ACK</code>，<code>PSH</code>，<code>RST</code>，<code>SYN</code>，<code>FIN</code>。每个标志位的意思如下：<ul>\n<li>URG：此标志表示 TCP 包的紧急指针域（后面马上就要说到）有效，用来保证 TCP 连接不被中断，并且督促中间层设备要尽快处理这些数据；</li>\n<li><strong>ACK</strong>：此标志表示应答域有效，就是说前面所说的 TCP 应答号将会包含在 TCP 数据包中；有两个取值：0 和 1，为 1 的时候表示应答域有效，反之为 0；</li>\n<li>PSH：这个标志位表示 Push 操作。所谓 Push 操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li>\n<li>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li>\n<li><strong>SYN</strong>：表示同步序号，用来建立连接。<code>SYN</code> 标志位和 <code>ACK</code> 标志位搭配使用，当连接请求的时候，<code>SYN</code> = 1，<code>ACK</code> = 0；连接被响应的时候，<code>SYN</code> = 1，<code>ACK</code> = 1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有 <code>SYN</code> 的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行 TCP 三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行 TCP 的三次握手；</li>\n<li>FIN：表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送 <code>FIN</code> 标志位的 TCP 数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n</li>\n<li><strong>Window</strong>：窗口大小，也就是有名的滑动窗口，用来进行流量控制；这是一个复杂的问题，这篇博文中并不会进行总结的；</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>TCP 是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在 TCP / IP 协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。这就是面试中经常会被问到的 <strong>TCP 三次握手</strong>。\b下图很形象的展示了三次握手和四次分手的数据交换：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_74.jpg\" alt=\"\" width=\"400\"></div>\n\n<ol>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将 <code>SYN</code> 位置为1，<code>Sequence Number</code> 为 x；然后，客户端进入 <code>SYN_SEND</code> 状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到 <code>SYN</code> 报文段。服务器收到客户端的 <code>SYN</code> 报文段，需要对这个 <code>SYN</code> 报文段进行确认，设置 <code>Acknowledgment Number</code> 为 x+1(<code>Sequence Number</code> + 1)；同时，自己自己还要发送 <code>SYN</code> 请求信息，将 <code>SYN</code> 位置为1，<code>Sequence Number</code> 为 y；服务器端将上述所有信息放到一个报文段（即 <code>SYN + ACK</code> 报文段）中，一并发送给客户端，此时服务器进入 <code>SYN_RECV</code> 状态；</li>\n<li>第三次握手：客户端收到服务器的<code>SYN + ACK</code> 报文段。然后将 <code>Acknowledgment Number</code> 设置为 y+1，向服务器发送 <code>ACK</code> 报文段，这个报文段发送完毕以后，客户端和服务器端都进入 <code>ESTABLISHED</code> 状态，完成 TCP 三次握手。</li>\n</ol>\n<p>完成了三次握手，客户端和服务器端就可以开始传送数据。</p>\n<h2 id=\"四次分手\"><a href=\"#四次分手\" class=\"headerlink\" title=\"四次分手\"></a>四次分手</h2><p>当客户端和服务器通过三次握手建立了 TCP 连接以后，当数据传送完毕，肯定是要断开 TCP 连接的啊。那对于 TCP 的断开连接，这里就有了神秘的“四次分手”。</p>\n<ol>\n<li>第一次分手：主机 1（可以是客户端，也可以是服务器端），设置 <code>Sequence Number</code> 和 <code>Acknowledgment Number</code>，向主机 2 发送一个 <code>FIN</code> 报文段；此时，主机 1 进入 <code>FIN_WAIT_1</code> 状态；这表示主机1没有数据要发送给主机 2 了；</li>\n<li>第二次分手：主机 2 收到了主机1发送的 <code>FIN</code> 报文段，向主机 1 回一个 <code>ACK</code> 报文段，<code>Acknowledgment Number</code> 为 <code>Sequence Number</code> 加 1；主机 1 进入 <code>FIN_WAIT_2</code> 状态；主机 2 告诉主机 1，我“同意”你的关闭请求；</li>\n<li>第三次分手：主机 2 向主机 1 发送 <code>FIN</code> 报文段，请求关闭连接，同时主机 2 进入 <code>LAST_ACK</code> 状态；</li>\n<li>第四次分手：主机 1 收到主机 2 发送的 <code>FIN</code> 报文段，向主机 2 发送 <code>ACK</code> 报文段，然后主机 1 进入 <code>TIME_WAIT</code> 状态；主机 2 收到主机 1 的 <code>ACK</code> 报文段以后，就关闭连接；此时，主机 1 等待 2MSL 后依然没有收到回复，则证明 Server 端已正常关闭，那好，主机 1 也可以关闭连接了。</li>\n</ol>\n<p>至此，TCP 的四次分手就这么愉快的完成了。</p>\n<h3 id=\"为什么要握手三次\"><a href=\"#为什么要握手三次\" class=\"headerlink\" title=\"为什么要握手三次\"></a>为什么要握手三次</h3><p>既然总结了 TCP 的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那 TCP 为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p>\n<blockquote>\n<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n</blockquote>\n<p>在书中同时举了一个例子：</p>\n<blockquote>\n<p>“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。”</p>\n</blockquote>\n<p>总结一下就是为了<strong>防止服务器端一直等待而浪费资源。</strong></p>\n<h2 id=\"为什么要分手四次\"><a href=\"#为什么要分手四次\" class=\"headerlink\" title=\"为什么要分手四次\"></a>为什么要分手四次</h2><p>那四次分手又是为何呢？TCP 协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP 是全双工模式，这就意味着，当主机 1 发出 <code>FIN</code> 报文段时，只是表示主机 1 已经没有数据要发送了，主机 1 告诉主机 2，它的数据已经全部发送完毕了；但是，这个时候主机 1 还是可以接受来自主机 2 的数据；当主机 2 返回 <code>ACK</code> 报文段时，表示它已经知道主机 1 没有数据发送了，但是主机 2 还是可以发送数据到主机 1 的；当主机 2 也发送了 <code>FIN</code> 报文段时，这个时候就表示主机 2 也没有数据要发送了，就会告诉主机 1，我也没有数据要发送了，之后彼此就会愉快的中断这次 TCP 连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>\n<ul>\n<li><code>FIN_WAIT_1</code>：这个状态要好好解释一下，其实 <code>FIN_WAIT_1</code> 和 <code>FIN_WAIT_2</code> 状态的真正含义都是表示等待对方的 FIN 报文。而这两种状态的区别是：<code>FIN_WAIT_1</code> 状态实际上是当 SOCKET 在 ESTABLISHED 状态时，它想主动关闭连接，向对方发送了 <code>FIN</code> 报文，此时该 SOCKET 即进入到 <code>FIN_WAIT_1</code> 状态。而当对方回应 ACK 报文后，则进入到 <code>FIN_WAIT_2</code> 状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应 ACK 报文，所以 <code>FIN_WAIT_1</code> 状态一般是比较难见到的，而 <code>FIN_WAIT_2</code> 状态还有时常常可以用 netstat 看到。（主动方）</li>\n<li><code>FIN_WAIT_2</code>：上面已经详细解释了这种状态，实际上 <code>FIN_WAIT_2</code> 状态下的 SOCKET，表示半连接，也即有一方要求 close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK 信息)，稍后再关闭连接。（主动方）</li>\n<li><code>CLOSE_WAIT</code>：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方 close 一个 SOCKET 后发送 <code>FIN</code> 报文给自己，你系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 <code>CLOSE_WAIT</code> 状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close 这个 SOCKET，发送 <code>FIN</code> 报文给对方，也即关闭连接。所以你在 <code>CLOSE_WAIT</code> 状态下，需要完成的事情是等待你去关闭连接。（被动方）</li>\n<li><code>LAST_ACK</code>：这个状态还是比较容易好理解的，它是被动关闭一方在发送 <code>FIN</code> 报文后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态了。（被动方）</li>\n<li><code>TIME_WAIT</code>：表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态了。如果 FIN_WAIT_1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 <code>TIME_WAIT</code> 状态，而无须经过 <code>FIN_WAIT_2</code> 状态。（主动方）</li>\n<li><code>CLOSED</code>：表示连接中断。</li>\n</ul>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"><a href=\"#1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\" class=\"headerlink\" title=\"1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"></a>1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</h3><p>这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建连请求后，它可以把 ACK 和 SYN（ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上关闭 SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的。</p>\n<h3 id=\"2．为什么-TIME-WAIT-状态还需要等-2MSL-后才能返回到-CLOSED-状态？\"><a href=\"#2．为什么-TIME-WAIT-状态还需要等-2MSL-后才能返回到-CLOSED-状态？\" class=\"headerlink\" title=\"2．为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？\"></a>2．为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？</h3><p>这是因为虽然双方都同意关闭连接了，而且握手的 4 个报文也都协调和发送完毕，按理可以直接回到 CLOSED 状态（就好比从 SYN_SEND 状态到 ESTABLISH 状态那样）；但是因为我们必须要假想网络是不可靠的，你无法保证你最后发送的 ACK 报文会一定被对方收到，因此对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文，而重发 FIN 报文，所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/20879359\" target=\"_blank\" rel=\"noopener\">怎样生动描述TCP的「三次握手」？</a></li>\n</ul>\n","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"}],"tags":[{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"面试","path":"api/tags/面试.json"}]}