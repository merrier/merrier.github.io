{"title":"好文章推荐系列——前端","slug":"好文章推荐系列——前端","date":"2017-08-07T16:27:35.000Z","updated":"2025-01-03T13:19:00.886Z","comments":true,"path":"api/articles/好文章推荐系列——前端.json","excerpt":null,"covers":null,"content":"<h3 id=\"来自未来，2022-年的前端人都在做什么\"><a href=\"#来自未来，2022-年的前端人都在做什么\" class=\"headerlink\" title=\"来自未来，2022 年的前端人都在做什么?\"></a><a href=\"https://juejin.cn/post/7062617190981173278\">来自未来，2022 年的前端人都在做什么?</a></h3><p>这是一份来自未来的文档，感谢你对前端技术领域持续关注。</p>\n<h3 id=\"前端领域的-“干净架构”\"><a href=\"#前端领域的-“干净架构”\" class=\"headerlink\" title=\"前端领域的 “干净架构”\"></a><a href=\"https://juejin.cn/post/7054888223830441991\">前端领域的 “干净架构”</a></h3><p>今天我们来看一种前端架构的模式，原作者称它为“干净架构（Clean Architecture）”，文章很长，讲的也很详细，我花了很长时间去读完了它，看完很有收获，翻译给大家，文中也融入了很多我自己的思考，推荐大家看完。</p>\n<p>英文原文：<a href=\"https://dev.to/bespoyasov/clean-architecture-on-frontend-4311\">https://dev.to/bespoyasov/clean-architecture-on-frontend-4311</a><br>本文中示例的源码：<a href=\"https://github.com/bespoyasov/frontend-clean-architecture/\">https://github.com/bespoyasov/frontend-clean-architecture/</a></p>\n<h3 id=\"前端100万行代码是怎样的体验？\"><a href=\"#前端100万行代码是怎样的体验？\" class=\"headerlink\" title=\"前端100万行代码是怎样的体验？\"></a><a href=\"https://zhuanlan.zhihu.com/p/425616384\">前端100万行代码是怎样的体验？</a></h3><p>近年来，阿里数据中台产品发展迅速。核心产品之 <a href=\"https://link.zhihu.com/?target=https%3A//www.aliyun.com/page-source/common/yunqihao/quickbi_gartnerabi_2021\">Quick BI</a> 连续 2 年成为国内唯一入选 Gartner 魔力象限的国产 BI。Quick BI 单一代码仓库源码突破了 100万行。整个开发过程涉及到的人员和模块都很多，因为下面分享的一些原则，产品能一直做到快速迭代。</p>\n<h3 id=\"《蚂蚁前端研发最佳实践》文字稿\"><a href=\"#《蚂蚁前端研发最佳实践》文字稿\" class=\"headerlink\" title=\"《蚂蚁前端研发最佳实践》文字稿\"></a><a href=\"https://zhuanlan.zhihu.com/p/94949118\">《蚂蚁前端研发最佳实践》文字稿</a></h3><p>作者：陈成，Umi &amp; Dva 等开源库作者。以下是我在 2019.11.15 成都全栈大会分享的文字稿，介绍了蚂蚁前端研发的最佳实践，其中我提取了三个比较重要的点，每个点都是我们实践和深入思考后的结果，希望能对大家有所启发，欢迎探讨。</p>\n<h3 id=\"写给初中级前端的高级进阶指南\"><a href=\"#写给初中级前端的高级进阶指南\" class=\"headerlink\" title=\"写给初中级前端的高级进阶指南\"></a><a href=\"https://juejin.cn/post/6844904103504527374\">写给初中级前端的高级进阶指南</a></h3><p>这篇文章会提到非常非常多的学习路线和链接，如果你还在初中级的阶段，不必太焦虑，可以把这篇文章作为一个进阶的路线图，在未来的时日里朝着这个方向努力就好。<br>我也并不是说这篇文章是进阶高级工程师的唯一一条路线，如果你在业务上做的精进，亦或是能在沟通上八面玲珑，配合各方面力量把项目做的漂漂亮亮，那你也一样可以拥有这个头衔。本文只是我自己的一个成长路线总结。</p>\n<h3 id=\"Web前端技术简介技术分享大纲（入门级）\"><a href=\"#Web前端技术简介技术分享大纲（入门级）\" class=\"headerlink\" title=\"Web前端技术简介技术分享大纲（入门级）\"></a><a href=\"https://yizhiyue.me/2021/03/28/web-front-end-introduction-for-beginner\">Web前端技术简介技术分享大纲（入门级）</a></h3><p>这篇分享的主要目的是为大家普及前端的发展历程，以及简单介绍相关的开发工具及其用途，从而使大家对当前web前端开发有个大概的了解。由于时间有限，我们不能十分深入地讨论每一项技术的具体细节。不过，在了解大概技术种类之后，我们可以投票选出大家最想深入了解的主题，在今后的技术分享中，可以深入讨论具体细节。 在本次分享之后，我希望你能了解到：</p>\n<ol>\n<li>现代前端跟传统前端开发有何不同？</li>\n<li>现代前端开发的工具有哪些？</li>\n<li>作为非前端开发者，学会基本的前端开发可以做什么？</li>\n</ol>\n<h3 id=\"前端优秀实践不完全指南\"><a href=\"#前端优秀实践不完全指南\" class=\"headerlink\" title=\"前端优秀实践不完全指南\"></a><a href=\"https://juejin.cn/post/6932647134944886797\">前端优秀实践不完全指南</a></h3><p>所谓的用户体验设计，其实是一个比较虚的概念，是秉承着以用户为中心的思想的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。<br>良好的用户体验设计，是产品每一个环节共同努力的结果。<br>除去一些很难一蹴而就的，本文将就页面展示、交互细节、可访问性三个方面入手，罗列一些在实际的开发过程中，积攒的一些有益的经验。通过本文，你将能收获到：</p>\n<ul>\n<li>了解到一些小细节是如何影响用户体验的</li>\n<li>了解到如何在尽量小的开发改动下，提升页面的用户体验</li>\n<li>了解到一些优秀的交互设计细节</li>\n<li>了解基本的无障碍功能及页面可访问性的含义</li>\n<li>了解基本的提升页面可访问性的方法</li>\n</ul>\n<h3 id=\"现代-CLI-和-GUI-方案指南\"><a href=\"#现代-CLI-和-GUI-方案指南\" class=\"headerlink\" title=\"现代 CLI 和 GUI 方案指南\"></a><a href=\"http://axuebin.com/articles/fe-solution/cli/desc.html\">现代 CLI 和 GUI 方案指南</a></h3><p>提到初始化项目，那就必须提到脚手架这个名词，那为什么这篇文章的标题不是关于脚手架而是关于初始化项目呢？ 脚手架这个名词来源于建筑工程领域，百度百科对其的解释是“脚手架是为了保证各施工过程顺利进行而搭设的工作平台”，也就是说脚手架为工人提供了施工的基础功能。将其引申到软件工程领域，又是什么含义呢？</p>\n<div align='center'><img src='/images/hexo_post_718.png' alt='' /></div>\n\n\n<h3 id=\"前端性能优化指北-关于有些细节和思路\"><a href=\"#前端性能优化指北-关于有些细节和思路\" class=\"headerlink\" title=\"前端性能优化指北-关于有些细节和思路\"></a><a href=\"https://blog.csdn.net/weixin_44643524/article/details/115323203\">前端性能优化指北-关于有些细节和思路</a></h3><p>这份清单综合性很强，几乎介绍了所有的可用的优化方式。那么，如果你只有一个小时进行优化，你应该干什么呢？让我们从中总结10个最有用的来。别忘了在你开始优化前和结束优化后，记录你的结果，包括开始渲染时间以及在3G，有限连接下的速度。</p>\n<p>但没关系，本文只是一个普通大纲（希望能做到综合性强），你应该根据自己的工作环境列一份适合自己的清单。最重要的，在开始优化之前，先对项目中存在的问题有一个明确的了解。</p>\n<h2 id=\"业务线前端-7-年之-“感”\"><a href=\"#业务线前端-7-年之-“感”\" class=\"headerlink\" title=\"业务线前端 7 年之 “感”\"></a><a href=\"https://mp.weixin.qq.com/s/kfKJDzbWKChIkGgjL0-_CQ\">业务线前端 7 年之 “感”</a></h2><p>业务压力大也许只是一时的，可以选择压力小一点的业务线，或是找到应对压力的办法；没有话语权也许是因为本身能力不够或是沟通不到位，不能帮助合作伙伴解决问题；至于成长，核心在于自己是否愿意挤出时间、挤出精力，持续地学习。</p>\n<h2 id=\"前端搞基建-堂主-如何推动前端团队的基础设施建设\"><a href=\"#前端搞基建-堂主-如何推动前端团队的基础设施建设\" class=\"headerlink\" title=\"前端搞基建|堂主 - 如何推动前端团队的基础设施建设\"></a><a href=\"https://zhuanlan.zhihu.com/p/148210793\">前端搞基建|堂主 - 如何推动前端团队的基础设施建设</a></h2><p>本文根据 2020.02.29 日，《第二届前端早早聊大会》 的“前端基建”专场分享整理而来。</p>\n<p>本文是契合大会所有分享都以 “如何” 为切入的要求，同时也是最近一年，对我所负责的团队在前端技术基础设施建设方面如何从 0 到 1 的一次沉淀总结。</p>\n<h2 id=\"Contemporary-Front-end-Architectures\"><a href=\"#Contemporary-Front-end-Architectures\" class=\"headerlink\" title=\"Contemporary Front-end Architectures\"></a><a href=\"https://blog.webf.zone/contemporary-front-end-architectures-fb5b500b0231\">Contemporary Front-end Architectures</a></h2><p>旨在帮助任何 web 开发人员对现代 web 应用程序架构有一个全面的了解，篇幅较长</p>\n<div align='center'><img src='/images/hexo_post_716.png' alt='' /></div>\n\n<h2 id=\"Making-GitHub’s-new-homepage-fast-and-performant\"><a href=\"#Making-GitHub’s-new-homepage-fast-and-performant\" class=\"headerlink\" title=\"Making GitHub’s new homepage fast and performant\"></a><a href=\"https://github.blog/2021-01-29-making-githubs-new-homepage-fast-and-performant/\">Making GitHub’s new homepage fast and performant</a></h2><p>This post is the third installment of our five-part series on building GitHub’s new homepage:</p>\n<ol>\n<li>How our globe is built</li>\n<li>How we collect and use the data behind the globe</li>\n<li>How we made the page fast and performant</li>\n<li>How we illustrate at GitHub</li>\n<li>How we designed the homepage and wrote the narrative</li>\n</ol>\n<h2 id=\"2020年大前端技术趋势解读\"><a href=\"#2020年大前端技术趋势解读\" class=\"headerlink\" title=\"2020年大前端技术趋势解读\"></a><a href=\"https://juejin.cn/post/6908713513271689224\">2020年大前端技术趋势解读</a></h2><p>前端正在通过持续的技术革新和技术融合不断突破自身边界，进而重新定义自身价值。在这种大变革的时代背景下，腾讯IMWeb前端团队也正在与时俱进得进行着技术更新、优化与升级，结合自身这一年的快速发展，IMWeb团队为大家带来2020年大前端技术趋势解读</p>\n<h2 id=\"滨江前端沙龙分享：前端团队研发效能提升的探索与实践\"><a href=\"#滨江前端沙龙分享：前端团队研发效能提升的探索与实践\" class=\"headerlink\" title=\"滨江前端沙龙分享：前端团队研发效能提升的探索与实践\"></a><a href=\"https://www.yuque.com/lizhiyao/dxydance/kikle8\">滨江前端沙龙分享：前端团队研发效能提升的探索与实践</a></h2><p><strong>读者受益</strong>:</p>\n<ul>\n<li>研发效能定义：知道研发效能是什么？（对「研发效能」的定义有一个经得起推敲的参考）</li>\n<li>研发效能提升：知道如何提升技术团队的研发效能？（对提升自己所在团队研发效能有一些想法/灵感）</li>\n<li>技术的价值：当被问到自己（技术/技术人）的价值时，能从容的去回答</li>\n<li>职业发展：关于自己的职业发展，可以想的更清楚</li>\n<li>成长抓手：关于自己在工作中成长的抓手，可以拿捏得更精准</li>\n</ul>\n<h2 id=\"一文带你层层解锁「文件下载」的奥秘\"><a href=\"#一文带你层层解锁「文件下载」的奥秘\" class=\"headerlink\" title=\"一文带你层层解锁「文件下载」的奥秘\"></a><a href=\"https://juejin.cn/post/6867469476196155400\">一文带你层层解锁「文件下载」的奥秘</a></h2><p>最近有研究一些媒体相关的工作，因此打算对下载做一个整理。</p>\n<h2 id=\"不能说的秘密——前端也能玩的图片隐写术\"><a href=\"#不能说的秘密——前端也能玩的图片隐写术\" class=\"headerlink\" title=\"不能说的秘密——前端也能玩的图片隐写术\"></a><a href=\"http://www.alloyteam.com/2016/03/image-steganography/\">不能说的秘密——前端也能玩的图片隐写术</a></h2><p>隐写术算是一种加密技术，权威的 wiki 说法是“ 隐写术是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。” 而用前端如何实现呢？</p>\n<h2 id=\"从破解某设计网站谈前端水印-详细教程\"><a href=\"#从破解某设计网站谈前端水印-详细教程\" class=\"headerlink\" title=\"从破解某设计网站谈前端水印(详细教程)\"></a><a href=\"https://juejin.cn/post/6900713052270755847\">从破解某设计网站谈前端水印(详细教程)</a></h2><p>作者对前端实现水印的几种方式进行了深入研究，同时对他们的可靠性也进行了测试。</p>\n<h2 id=\"如何有效地进行代码-Review？\"><a href=\"#如何有效地进行代码-Review？\" class=\"headerlink\" title=\"如何有效地进行代码 Review？\"></a><a href=\"https://mp.weixin.qq.com/s/ICl-IBgR3aVQi4ObsB0-ww\">如何有效地进行代码 Review？</a></h2><p>研发都知道代码 Review 的重要性，在腾讯代码 Review 也越来越受大家重视，作为腾讯专有云平台研发的一员，我参与了大量的代码 Review，明显地感受到有效的代码 Review 不但能提高代码的质量，更能促进团队沟通协作，建立更高的工程质量标准，无论对个人还是团队都有着重要的价值。本文就为什么要做代码 Review 以及如何有效地做代码 Review 分享一下个人的看法。</p>\n<h3 id=\"前端冷知识\"><a href=\"#前端冷知识\" class=\"headerlink\" title=\"前端冷知识\"></a><a href=\"https://github.com/akira-cn/FE_You_dont_know\">前端冷知识</a></h3><p>来自月影，分享一些在前端开发中，你不知道的JavaScript、CSS和HTML趣味知识，增加你的知识面。</p>\n<h3 id=\"对-OzJS-的一些疑惑、建议与探讨\"><a href=\"#对-OzJS-的一些疑惑、建议与探讨\" class=\"headerlink\" title=\"对 OzJS 的一些疑惑、建议与探讨\"></a><a href=\"https://github.com/dexteryy/OzJS/issues/10\">对 OzJS 的一些疑惑、建议与探讨</a></h3><p>这是 13 年的一个 Github issue，来自阿里玉伯和目前已入职字节的大佬的对话，信息量很大，可以学到不少东西。。</p>\n<h3 id=\"ReactJS-Roadmap-🗺-For-Developers-💻\"><a href=\"#ReactJS-Roadmap-🗺-For-Developers-💻\" class=\"headerlink\" title=\"ReactJS Roadmap 🗺 For Developers 💻\"></a><a href=\"https://dev.to/theme_selection/reactjs-roadmap-for-developers-2824\">ReactJS Roadmap 🗺 For Developers 💻</a></h3><p>这个系列的文章包括 5 篇，分别是 React、FrontEnd、Bootstrap、JS、Vue 的</p>\n<h3 id=\"Ultimate-RoadMap-with-so-many-resources-for-Front-End-Development-💥💥\"><a href=\"#Ultimate-RoadMap-with-so-many-resources-for-Front-End-Development-💥💥\" class=\"headerlink\" title=\"Ultimate RoadMap with so many resources for Front-End Development 💥💥\"></a><a href=\"https://dev.to/rahxuls/ultimate-roadmap-with-so-many-resources-for-front-end-development-597f\">Ultimate RoadMap with so many resources for Front-End Development 💥💥</a></h3><p>I’ve got you everything covered. This is the final you need.<br>The best resources with the best road map. You definitely need this if you are curious how to start with front-end development. This post covers everything about front-end development.</p>\n<h3 id=\"高质量前端快照方案：来自页面的「自拍」\"><a href=\"#高质量前端快照方案：来自页面的「自拍」\" class=\"headerlink\" title=\"高质量前端快照方案：来自页面的「自拍」\"></a><a href=\"https://juejin.cn/post/6844904019605848072\">高质量前端快照方案：来自页面的「自拍」</a></h3><p>本文基于html2canvas和canvas2image，从快照的内容完整性、清晰度和转换效率等多个方面，介绍了前端页面生成高质量快照的解决方案。</p>\n<h3 id=\"我的前端成长之路\"><a href=\"#我的前端成长之路\" class=\"headerlink\" title=\"我的前端成长之路\"></a><a href=\"https://www.yuque.com/yubo/morning/grow-up-at-alibaba\">我的前端成长之路</a></h3><p>来自阿里玉伯：“全情投入、守正出奇、愿等花开”</p>\n<h3 id=\"前端项目自动化部署——超详细教程（Jenkins、Github-Actions）\"><a href=\"#前端项目自动化部署——超详细教程（Jenkins、Github-Actions）\" class=\"headerlink\" title=\"前端项目自动化部署——超详细教程（Jenkins、Github Actions）\"></a><a href=\"https://juejin.im/post/6887751398499287054\">前端项目自动化部署——超详细教程（Jenkins、Github Actions）</a></h3><p>本教程主要讲解了怎么使用 Jenkins 和 Github Actions 部署前端项目。</p>\n<p>第一部分是使用 Gitea 配置局域网 git 服务器，再使用 Jenkins 将 Gitea 下的项目部署到局域网服务器。<br>第二部分是使用 Github Actions 将 Github 项目部署到 Github Page 和阿里云。</p>\n<p>阅读本教程并不需要你提前了解 Jenkins 和 Github Actions 的知识，只要按照本教程的指引，就能够实现自动化部署项目。不过教程中所有的操作均在 windows 下运行，其他操作系统上可能会有一些区别。</p>\n<h3 id=\"从-VSCode-看大型-IDE-技术架构\"><a href=\"#从-VSCode-看大型-IDE-技术架构\" class=\"headerlink\" title=\"从 VSCode 看大型 IDE 技术架构\"></a><a href=\"https://www.yuque.com/paranoidjk/blog/vuuz30\">从 VSCode 看大型 IDE 技术架构</a></h3><p>主要回答了以下几个问题：</p>\n<ul>\n<li>大型复杂 GUI 软件（如 IDE 类）如何组织功能模块代码</li>\n<li>如何使用 Electron 技术将 Web 软件桌面化</li>\n<li>如何在打造插件化开放生态的同时保证软件整体质量与性能</li>\n<li>如何打造一款好用的、流行的工具软件</li>\n</ul>\n<h3 id=\"你所需要知道的代码整洁之道\"><a href=\"#你所需要知道的代码整洁之道\" class=\"headerlink\" title=\"你所需要知道的代码整洁之道\"></a><a href=\"https://juejin.im/post/6844904050572394510\">你所需要知道的代码整洁之道</a></h3><p>每次 review 过往写的代码，总有一种不忍直视的感觉。想提高编码能力，故阅读了一些相关书籍及博文，并有所感悟，今将一些读书笔记及个人心得感悟梳理出来。抛转引玉，希望这砖能抛得起来。</p>\n<p>宋代禅宗大师青原行思提出参禅的三重境界：</p>\n<blockquote>\n<p>参禅之初，看山是山，看水是水；禅有悟时，看山不是山，看水不是水；禅中彻悟，看山仍是山，看水仍是水。</p>\n</blockquote>\n<p>同理，编程同样存在境界：编程的一重境界是照葫芦画瓢，二重境界是可以灵活运用，三重境界则是心中无模式。唯有多实践，多感悟，方能突破一重又一重的境界。<br>最后，愿大家终将能写出自己不再讨厌的代码。</p>\n<h3 id=\"前端极致性能优化手册大全\"><a href=\"#前端极致性能优化手册大全\" class=\"headerlink\" title=\"前端极致性能优化手册大全\"></a><a href=\"https://github.com/Godiswill/blog/issues/15\">前端极致性能优化手册大全</a></h3><p>非常详尽地从以下几个方面介绍了前端如何进行性能优化：</p>\n<ul>\n<li>webpack</li>\n<li>图片</li>\n<li>缓存</li>\n<li>浏览器渲染</li>\n<li>服务器</li>\n</ul>\n<h3 id=\"Fast-load-times\"><a href=\"#Fast-load-times\" class=\"headerlink\" title=\"Fast load times\"></a><a href=\"https://web.dev/fast/\">Fast load times</a></h3><p>这其实是一系列文章的集合，总结了一些前端性能优化相关的文章，包括：</p>\n<ul>\n<li>Set performance budgets</li>\n<li>Optimize your images</li>\n<li>Lazy-load images and video</li>\n<li>Optimize your JavaScript</li>\n<li>Optimize your resource delivery</li>\n<li>Optimize your CSS</li>\n<li>Optimize your third-party resources</li>\n<li>Optimize WebFonts</li>\n<li>Optimize for network quality</li>\n<li>Measure performance in the field</li>\n<li>Build a performance culture</li>\n</ul>\n<h3 id=\"哪些技术会决定前端开发者的未来发展？\"><a href=\"#哪些技术会决定前端开发者的未来发展？\" class=\"headerlink\" title=\"哪些技术会决定前端开发者的未来发展？\"></a><a href=\"https://juejin.im/post/6844903876320034824\">哪些技术会决定前端开发者的未来发展？</a></h3><p>2019年下半年即将到来，上半年狂风骤雨般的裁员浪潮让每一位从业者背脊发凉，在经历了五六年黄金发展期之后，前端开发这个行业似乎也进入了转折点。作者在该文章里阐述了他认为的一些前端开发者需要关注的技术，仅供参考吧。</p>\n<h3 id=\"中文技术文档的写作规范\"><a href=\"#中文技术文档的写作规范\" class=\"headerlink\" title=\"中文技术文档的写作规范\"></a><a href=\"https://github.com/ruanyf/document-style-guide\">中文技术文档的写作规范</a></h3><p>出自阮一峰，介绍了写中文技术文档（主要是 Markdown）时的规范，包括：标题、文本、段落、数值、标点符号、文档体系等方面</p>\n<h3 id=\"前端如何在项目中做出亮点\"><a href=\"#前端如何在项目中做出亮点\" class=\"headerlink\" title=\"前端如何在项目中做出亮点\"></a><a href=\"https://segmentfault.com/a/1190000022795484\">前端如何在项目中做出亮点</a></h3><p>作者对前端在项目中如何做出亮点给出了自己的答案，作为程序员，我们很容易成为“搬砖仔”、“切图仔”、“页面仔”，但是其实如果我们再往前一步，就可以站得更高，走的更远</p>\n<h3 id=\"if-我是前端团队-Leader，怎么制定前端协作规范\"><a href=\"#if-我是前端团队-Leader，怎么制定前端协作规范\" class=\"headerlink\" title=\"if 我是前端团队 Leader，怎么制定前端协作规范?\"></a><a href=\"https://juejin.im/post/5d3a7134f265da1b5d57f1ed\">if 我是前端团队 Leader，怎么制定前端协作规范?</a></h3><p>记录了作者在制定前端协作规范时的一些思考，万字长文全是干货。</p>\n<h3 id=\"现代-Web-开发的现状与未来（JSDC-2019-演讲全文）\"><a href=\"#现代-Web-开发的现状与未来（JSDC-2019-演讲全文）\" class=\"headerlink\" title=\"现代 Web 开发的现状与未来（JSDC 2019 演讲全文）\"></a><a href=\"https://zhuanlan.zhihu.com/p/88616149\">现代 Web 开发的现状与未来（JSDC 2019 演讲全文）</a></h3><p>本文是 “JS黑客，GUI大法师，WebApp工匠，虚拟世界建筑师，奇幻科幻PC游戏动漫宅”——Dexter.Yy 受邀在台北的 JSDC 2019 活动中做的一次分享，从内容上来说已经可以算的上他的 2019 跨年演讲，内容非常多且详尽，可以开阔视野，展望未来。下图是作者自我介绍的：</p>\n<div align='center'><img src='' alt='/images/hexo_post_535.jpg' width='' /></div>\n\n\n<h3 id=\"从零做一个前端开源项目\"><a href=\"#从零做一个前端开源项目\" class=\"headerlink\" title=\"从零做一个前端开源项目\"></a><a href=\"http://www.imooc.com/article/28240\">从零做一个前端开源项目</a></h3><p>该文已录制成免费的视频教程，想看视频的点击：<a href=\"https://www.imooc.com/learn/1003\">https://www.imooc.com/learn/1003</a></p>\n<p>目录：</p>\n<ul>\n<li>什么是开源？</li>\n<li>为何做开源？</li>\n<li>做什么？</li>\n<li>注册账号</li>\n<li>搭建开发环境</li>\n<li>提交代码</li>\n<li>创建官网</li>\n<li>如何宣传？</li>\n<li>持续迭代</li>\n<li>总结</li>\n</ul>\n<h3 id=\"从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\"><a href=\"#从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\" class=\"headerlink\" title=\"从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\"></a><a href=\"http://www.dailichun.com/2018/03/12/whenyouenteraurl.html\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></h3><p>该文梳理了一个较为完整的前端向知识体系，内容超多</p>\n<h3 id=\"玉伯《从前端技术到体验科技（附演讲视频）》\"><a href=\"#玉伯《从前端技术到体验科技（附演讲视频）》\" class=\"headerlink\" title=\"玉伯《从前端技术到体验科技（附演讲视频）》\"></a><a href=\"https://cnodejs.org/topic/5a54a8a4afa0a121784a8ab0\">玉伯《从前端技术到体验科技（附演讲视频）》</a></h3><p>我想，玉伯大神应该不用过多介绍了吧，从之前的 seajs 到现在的 ant design，而玉伯大神也从一名前端工程师“进化”为一名架构师，这篇文章是玉伯大神在 SEE Conf 大会上的演讲记录，同时文章末尾还有演讲视频链接，不喜欢看文字的朋友可以直接看演讲视频。</p>\n<h3 id=\"哔哩哔哩（B站）的前端之路\"><a href=\"#哔哩哔哩（B站）的前端之路\" class=\"headerlink\" title=\"哔哩哔哩（B站）的前端之路\"></a><a href=\"https://zhuanlan.zhihu.com/p/32487533\">哔哩哔哩（B站）的前端之路</a></h3><p>作者总结了 B站 的前端进阶之路，前端的轮子很多，作者介绍了 B站 是如何选型的以及遇到了哪些坑。</p>\n<h3 id=\"深入剖析-WebKit\"><a href=\"#深入剖析-WebKit\" class=\"headerlink\" title=\"深入剖析 WebKit\"></a><a href=\"http://www.starming.com/2017/10/11/deeply-analyse-webkit/\">深入剖析 WebKit</a></h3><p>这篇文章和他的题目一样，真的很“深入”，因为你可以看到滚轮滑动的速度。。不过图文并茂的表现形式并不会让你产生“看不下去”的感觉，来张目录感受一下是不是干货：</p>\n<div align='center'><img src='' alt='/images/hexo_post_286.png' width='400' /></div>\n\n<h3 id=\"前端文章-收藏集-掘金\"><a href=\"#前端文章-收藏集-掘金\" class=\"headerlink\" title=\"前端文章- 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000010452096\">前端文章- 收藏集 - 掘金</a></h3><p>掘金上面关于前端的文章集合，闲暇时间看一下，可能会有意想不到的收获</p>\n<h3 id=\"前端工程——基础篇\"><a href=\"#前端工程——基础篇\" class=\"headerlink\" title=\"前端工程——基础篇\"></a><a href=\"https://github.com/fouber/blog/issues/10\">前端工程——基础篇</a></h3><p>fis 作者张玉龙对于前端工程的理解，从组件化到资源管理都阐述了自己的观点，这是一篇 2015 年的文章，但是文中的某些观念到现在看来仍然是字字珠玑，相信看完之后的你可以对前端有更深层次的理解。</p>\n<h3 id=\"大公司里怎样开发和部署前端代码？\"><a href=\"#大公司里怎样开发和部署前端代码？\" class=\"headerlink\" title=\"大公司里怎样开发和部署前端代码？\"></a><a href=\"https://github.com/fouber/blog/issues/6\">大公司里怎样开发和部署前端代码？</a></h3><p>又是张玉龙的文章，通过一个实际的场景一步步的告诉你大公司的前端代码是如何开发和部署上线的。</p>\n<h3 id=\"Web-前端知识体系精简\"><a href=\"#Web-前端知识体系精简\" class=\"headerlink\" title=\"Web 前端知识体系精简\"></a><a href=\"http://www.cnblogs.com/onepixel/p/7021506.html\">Web 前端知识体系精简</a></h3><p>从前端三剑客：HTML、CSS、Javascript 的角度分析了前端的知识体系，涉及到的领域比较广泛，很适合前端新人开拓视野和寻找学习方向，同时总结的也很全面，是一篇不错的入门教材。</p>\n<h3 id=\"移动时代的前端加密\"><a href=\"#移动时代的前端加密\" class=\"headerlink\" title=\"移动时代的前端加密\"></a><a href=\"http://div.io/topic/1220\">移动时代的前端加密</a></h3><p>这篇文章篇幅很长，对于前端来说，很多人感觉“加密”是莫须有的一种东西，其实这是一种误解，“加密”并不意味着绝对安全，这篇文章将从这个角度向你阐述前端加密的正确姿势。</p>\n<h3 id=\"前端疲劳\"><a href=\"#前端疲劳\" class=\"headerlink\" title=\"前端疲劳\"></a><a href=\"http://www.jianshu.com/p/a2eff3d721cb\">前端疲劳</a></h3><p>有这么多不同的前端技术栈，不同的前端框架，不同的前端工具和库像水一样包裹着我，我不去学就不会，学了又学不完。在前端的海洋里越陷越深的我究竟该如何自救呢？这篇文章可能有你要的答案</p>\n<h3 id=\"精读前后端渲染之争\"><a href=\"#精读前后端渲染之争\" class=\"headerlink\" title=\"精读前后端渲染之争\"></a><a href=\"https://github.com/camsong/blog/issues/8\">精读前后端渲染之争</a></h3><p>前后端渲染一直以来都是一个带有争议的话题，而该文章的作者对<a href=\"https://medium.freecodecamp.org/heres-why-client-side-rendering-won-46a349fadb52\">国外一篇关于前后端渲染的文章</a>进行了精读，介绍了前后端渲染各自的优缺点，以及我们在实际项目中如何取舍。</p>\n<h3 id=\"技术雷达之「微前端」-将微服务理念扩展到前端开发\"><a href=\"#技术雷达之「微前端」-将微服务理念扩展到前端开发\" class=\"headerlink\" title=\"技术雷达之「微前端」- 将微服务理念扩展到前端开发\"></a><a href=\"https://zhuanlan.zhihu.com/p/32378432\">技术雷达之「微前端」- 将微服务理念扩展到前端开发</a></h3><p>看标题就知道，这是一篇基本上看不懂的文章，不过图文并茂的形式让这篇文章生动了很多，内容很充实，覆盖面很广</p>\n<h3 id=\"理解-Web-路由\"><a href=\"#理解-Web-路由\" class=\"headerlink\" title=\"理解 Web 路由\"></a><a href=\"https://zhuanlan.zhihu.com/p/24814675\">理解 Web 路由</a></h3><p>关于路由，其实是一个很抽象的概念，而这篇文章对经常提到的前端路由和后端路由的实现和区别进行了很详细很清晰的讲解，同时对动态路由和严格路由也进行了介绍。</p>\n<h3 id=\"一站到底—前端基础之网络\"><a href=\"#一站到底—前端基础之网络\" class=\"headerlink\" title=\"一站到底—前端基础之网络\"></a><a href=\"https://juejin.im/post/5b3357556fb9a00e5a4b63df\">一站到底—前端基础之网络</a></h3><p>这篇文章算是近几年来我读过的信息量最大、知识点最全的文章了，作者从访问一个网址说起，为读者建立了一个健全的网络知识体系，该文章解答了以下问题：</p>\n<p><strong>必会：</strong></p>\n<ul>\n<li>http 报文都有哪些内容？</li>\n<li>HTTP 协议头含有哪些重要的部分，HTTP 状态码？</li>\n<li>HTTP 状态码状态码都有哪些？</li>\n<li>什么是强缓存？什么是弱缓存？</li>\n<li>浏览器的现缓存机制是什么？如何设置 HTTP 缓存？</li>\n<li>你知道有哪些 HTTP 方法？POST 和 PUT 有什么区别？</li>\n<li>如何对数据进行压缩（ZLIB），Gzip? 压缩的范围是什么，请求头会压缩吗？</li>\n<li>跨域，为什么 JS 会对跨域做出限制？如何允许跨域?</li>\n</ul>\n<p><strong>基础：</strong></p>\n<ul>\n<li>影响网速的原因有哪些？网络丢包的主要原因是什么？</li>\n<li>网络体系结构的五层参考模型都是什么？它们之间的关系是什么？</li>\n<li>我们常听到报文、段（分组）、数据报、帧、和数据包，它们有什么关系？</li>\n<li>Ajax 能发送 http 请求，它和 http 有什么样的关系？</li>\n<li>HTTP1.0 到 HTTP1.1 解决了什么问题？</li>\n<li>http2 有什么特性？</li>\n<li>http1.1 为什么会有队首阻塞？</li>\n<li>SSL 与 TLS 关系？HTTPS 协议如何实现？</li>\n</ul>\n<p><strong>补课与拓展：（慢慢更新）</strong></p>\n<ul>\n<li>常用的传输层协议有哪些？TCP 和 UDP 分别有什么特点？</li>\n<li>解释一下 TCP 的三次握手和四次挥手？</li>\n<li>为什么说 TCP 可能是网络通信的瓶颈？如何解决 TCP 队首阻塞？</li>\n<li>谷歌新出 QUIC 为什么要基于 UDP？</li>\n<li>QUIC 有哪些新特性，解决了什么问题？</li>\n</ul>\n<h3 id=\"WEB-服务器探究\"><a href=\"#WEB-服务器探究\" class=\"headerlink\" title=\"WEB 服务器探究\"></a><a href=\"https://wangzitian0.github.io/2017/06/27/WEB-server-explore/\">WEB 服务器探究</a></h3><p>作者介绍了 web 服务器的基本概念，和常见的服务端演替路线。图文并茂的方式很容易理解，干货满满。</p>\n<h3 id=\"网站性能优化实战——从12-67s到1-06s的故事\"><a href=\"#网站性能优化实战——从12-67s到1-06s的故事\" class=\"headerlink\" title=\"网站性能优化实战——从12.67s到1.06s的故事\"></a><a href=\"http://imweb.io/topic/5b6fd3c13cb5a02f33c013bd\">网站性能优化实战——从12.67s到1.06s的故事</a></h3><p>作者将<a href=\"http://jerryonlyzrj.com/resume/\">自己的在线简历</a>进行了性能优化，首屏时间从 12.67s 降低到了 1.06s，这个过程中作者踩了很多坑，翻阅了很多书籍，最终总结出了这篇文章。文章涉及到的知识点比较全面，对性能优化进行了系统的介绍。</p>\n<h3 id=\"现代-Web-开发基础与工程实践\"><a href=\"#现代-Web-开发基础与工程实践\" class=\"headerlink\" title=\"现代 Web 开发基础与工程实践\"></a><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/README.md\">现代 Web 开发基础与工程实践</a></h3><p>前端大牛@王下邀月熊的著作，对 Web 开发基础与工程实践的相关博客、示例代码与开源项目、整理成的系列书籍等内容进行了总结，信息量异常庞大，包含以下篇章：</p>\n<ul>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%AF%BC%E8%AE%BA\">导论篇</a>: Web 开发简史与运行机制，数据流驱动的界面，模块化与组件化，工具化与工程化，前后端分离与 GraphQL，大前端与 WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%9F%BA%E7%A1%80\">基础篇</a>: 对于 HTML、CSS、DOM 等 Web 开发中涉及的基础知识与理念的总结介绍。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5\">工程实践篇</a>: 构建工具，测试，安全，WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96%E7%AF%87\">架构优化篇</a>: 组件化，状态管理，性能优化，PWA。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\">React 篇</a>：近年来前端领域百花齐放，各种技术方案争妍斗艳，各领风骚。本书立足于其中的佼佼者 React，深入浅出的介绍 React、Webpack 、 ES6、Redux 、 MobX 等常见前端开发工具与开发库的用法，帮助初学者能够迅速成为一名合格前端工程师。而本书也不仅局限于工具使用的层面，探寻各种技术方案背后蕴含的设计思想与架构模式，从前端工程化的角度讨论前端开发者在进阶过程中需要掌握的工程实践、模块化与组件化、质量保障、性能优化等知识要点。最终帮助开发者在前端开发中能够因地制宜的指定合理方案，以尽可能快的速度实现可信赖的产品。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/Vue\">Vue 篇</a>：本部分目前正逐步启动，笔者的初衷是希望能够保证本书章节与 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\">React 与前端工程化实践</a>尽可能一致，从而更方便地去介绍不同技术栈下相通的设计理念；目前本书的目录只是拷贝自 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\">React 与前端工程化实践</a>，未来笔者会逐步完善。</li>\n</ul>\n<h3 id=\"雅虎前端优化35条规则翻译\"><a href=\"#雅虎前端优化35条规则翻译\" class=\"headerlink\" title=\"雅虎前端优化35条规则翻译\"></a><a href=\"https://github.com/creeperyang/blog/issues/1\">雅虎前端优化35条规则翻译</a></h3><p>本文是大名鼎鼎的雅虎前端优化规则（<strong>Yslow</strong>）的翻译。作者对其中的一些例子进行了精简。</p>\n<h3 id=\"前端知识体系目录\"><a href=\"#前端知识体系目录\" class=\"headerlink\" title=\"前端知识体系目录\"></a><a href=\"http://hao.jser.com/archive/5314/\">前端知识体系目录</a></h3><p>从基础到进阶，从 HTML、CSS、JS 到 HTTP，简单的总结了前端领域需要了解的知识点，同时推荐了一些书籍，对于那些想要入坑前端的童鞋来说是一份不错的指引文档。</p>\n<h3 id=\"微前端的那些事儿\"><a href=\"#微前端的那些事儿\" class=\"headerlink\" title=\"微前端的那些事儿\"></a><a href=\"https://github.com/phodal/microfrontends\">微前端的那些事儿</a></h3><blockquote>\n<p>微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为<strong>多个小型前端应用聚合为一的应用</strong>。各个前端应用还可以<strong>独立运行</strong>、<strong>独立开发</strong>、<strong>独立部署</strong>。</p>\n</blockquote>\n<p>这篇文章是 phodal 对于微前端的解读，包括其实现方式以及方案对比，而微服务与前端的结合会有多大的优势，值得期待。</p>\n<h3 id=\"2018-前端常见题汇总\"><a href=\"#2018-前端常见题汇总\" class=\"headerlink\" title=\"2018 前端常见题汇总\"></a><a href=\"https://github.com/qianbin01/frontend_train\">2018 前端常见题汇总</a></h3><p>汇总了前端一些问题，作者不定时更新，建议收藏</p>\n<ol>\n<li><a href=\"https://github.com/qianbin01/frontend_train#html\">HTML 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#css\">CSS 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#javascript\">JAVASCRIPT 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#dom\">DOM 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#http\">HTTP 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#vue\">VUE 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#sort\">算法相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#web\">网络安全相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#webpack\">webpack 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#other\">其他</a></li>\n</ol>\n<h3 id=\"InfoQ-趋势报告之-JavaScript-和-Web-开发\"><a href=\"#InfoQ-趋势报告之-JavaScript-和-Web-开发\" class=\"headerlink\" title=\"InfoQ 趋势报告之 JavaScript 和 Web 开发\"></a><a href=\"https://www.infoq.cn/article/TFXQXkWbPPM*cK5KFJrW\">InfoQ 趋势报告之 JavaScript 和 Web 开发</a></h3><p>文章简单介绍了 Javascript 生态系统的现状和发展历程，文中提到了很多名词和框架，是一篇很不错的“扫盲”文章。</p>\n<h3 id=\"2019-Web开发技术指南和趋势\"><a href=\"#2019-Web开发技术指南和趋势\" class=\"headerlink\" title=\"2019 - Web开发技术指南和趋势\"></a><a href=\"https://www.jianshu.com/p/062c978d9f04\">2019 - Web开发技术指南和趋势</a></h3><p>这是一个 2019 年你成为前端，后端或全栈开发者的进阶指南:</p>\n<ol>\n<li>你不需要学习所有的技术成为一个 web 开发者</li>\n<li>这个指南只是通过简单分类列出了技术选项</li>\n<li>我将从我的经验和参考中给出建议</li>\n<li>首选我们会介绍通用的知识, 最后介绍 2019 年的 Web 的一些趋势</li>\n</ol>\n<p>要想知道更多细节, 请看 Youtube 视频: <a href=\"https://www.youtube.com/watch?v=UnTQVlqmDQ0&amp;t=18s\">Web Development in 2019</a></p>\n<h3 id=\"前端模块化详解-完整版\"><a href=\"#前端模块化详解-完整版\" class=\"headerlink\" title=\"前端模块化详解(完整版)\"></a><a href=\"https://juejin.im/post/5c17ad756fb9a049ff4e0a62\">前端模块化详解(完整版)</a></h3><p>这篇文章内容主要有理解模块化，为什么要模块化，模块化的优缺点以及模块化规范，并且介绍下开发中最流行的 CommonJS, AMD, ES6、CMD 规范。作者试图站在小白的角度，用通俗易懂的笔调介绍这些枯燥无味的概念，希望屏幕前的你阅读后，对模块化编程有个全新的认识和理解！</p>\n<h3 id=\"2018-前端性能优化清单\"><a href=\"#2018-前端性能优化清单\" class=\"headerlink\" title=\"2018 前端性能优化清单\"></a><a href=\"https://cherryblog.site/front-end-performance-checklist-2018.html\">2018 前端性能优化清单</a></h3><p>英文原文：<a href=\"https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/\">https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/</a>，文章较长，需要比较长的时间才能读完，涉及到的地方非常全面，五星推荐。</p>\n<h3 id=\"列一份前端知识架构图\"><a href=\"#列一份前端知识架构图\" class=\"headerlink\" title=\"列一份前端知识架构图\"></a><a href=\"https://time.geekbang.org/column/article/77804\">列一份前端知识架构图</a></h3><p>计算机之子“Winter”列的一份前端知识框架图</p>\n<h3 id=\"茴字的四种写法—移动适配方案的进化\"><a href=\"#茴字的四种写法—移动适配方案的进化\" class=\"headerlink\" title=\"茴字的四种写法—移动适配方案的进化\"></a><a href=\"https://segmentfault.com/a/1190000014309664\">茴字的四种写法—移动适配方案的进化</a></h3><p>这是一篇一站式的文章，可以系统的了解前端适配的演进。</p>\n<h3 id=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"><a href=\"#现代前端开发路线图：从零开始，一步步成为前端工程师\" class=\"headerlink\" title=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"></a><a href=\"https://36kr.com/p/5128487.html\">现代前端开发路线图：从零开始，一步步成为前端工程师</a></h3><p>很多人都想学编程。但是苦于没有具体的步骤和指导。比如想找份前端开发的工作，却不知道应该先学习什么再学习什么，也不知道该选择什么样的工具。因为经常被人问到类似的问题，全栈开发者Kamran Ahmed索性在github上制订了一份<a href=\"https://github.com/kamranahmedse/developer-roadmap\">现代前端开发的路线图</a>，并且用<a href=\"https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c\">一篇文章</a>对前端开发的整个学习过程进行了详细解释。感兴趣的初学者不容错过。</p>\n<p>而这篇文章的目的就是依次解释路线图的每一个步骤，对于前端初学者来说具有指引作用。</p>\n","more":"<h3 id=\"来自未来，2022-年的前端人都在做什么\"><a href=\"#来自未来，2022-年的前端人都在做什么\" class=\"headerlink\" title=\"来自未来，2022 年的前端人都在做什么?\"></a><a href=\"https://juejin.cn/post/7062617190981173278\">来自未来，2022 年的前端人都在做什么?</a></h3><p>这是一份来自未来的文档，感谢你对前端技术领域持续关注。</p>\n<h3 id=\"前端领域的-“干净架构”\"><a href=\"#前端领域的-“干净架构”\" class=\"headerlink\" title=\"前端领域的 “干净架构”\"></a><a href=\"https://juejin.cn/post/7054888223830441991\">前端领域的 “干净架构”</a></h3><p>今天我们来看一种前端架构的模式，原作者称它为“干净架构（Clean Architecture）”，文章很长，讲的也很详细，我花了很长时间去读完了它，看完很有收获，翻译给大家，文中也融入了很多我自己的思考，推荐大家看完。</p>\n<p>英文原文：<a href=\"https://dev.to/bespoyasov/clean-architecture-on-frontend-4311\">https://dev.to/bespoyasov/clean-architecture-on-frontend-4311</a><br>本文中示例的源码：<a href=\"https://github.com/bespoyasov/frontend-clean-architecture/\">https://github.com/bespoyasov/frontend-clean-architecture/</a></p>\n<h3 id=\"前端100万行代码是怎样的体验？\"><a href=\"#前端100万行代码是怎样的体验？\" class=\"headerlink\" title=\"前端100万行代码是怎样的体验？\"></a><a href=\"https://zhuanlan.zhihu.com/p/425616384\">前端100万行代码是怎样的体验？</a></h3><p>近年来，阿里数据中台产品发展迅速。核心产品之 <a href=\"https://link.zhihu.com/?target=https%3A//www.aliyun.com/page-source/common/yunqihao/quickbi_gartnerabi_2021\">Quick BI</a> 连续 2 年成为国内唯一入选 Gartner 魔力象限的国产 BI。Quick BI 单一代码仓库源码突破了 100万行。整个开发过程涉及到的人员和模块都很多，因为下面分享的一些原则，产品能一直做到快速迭代。</p>\n<h3 id=\"《蚂蚁前端研发最佳实践》文字稿\"><a href=\"#《蚂蚁前端研发最佳实践》文字稿\" class=\"headerlink\" title=\"《蚂蚁前端研发最佳实践》文字稿\"></a><a href=\"https://zhuanlan.zhihu.com/p/94949118\">《蚂蚁前端研发最佳实践》文字稿</a></h3><p>作者：陈成，Umi &amp; Dva 等开源库作者。以下是我在 2019.11.15 成都全栈大会分享的文字稿，介绍了蚂蚁前端研发的最佳实践，其中我提取了三个比较重要的点，每个点都是我们实践和深入思考后的结果，希望能对大家有所启发，欢迎探讨。</p>\n<h3 id=\"写给初中级前端的高级进阶指南\"><a href=\"#写给初中级前端的高级进阶指南\" class=\"headerlink\" title=\"写给初中级前端的高级进阶指南\"></a><a href=\"https://juejin.cn/post/6844904103504527374\">写给初中级前端的高级进阶指南</a></h3><p>这篇文章会提到非常非常多的学习路线和链接，如果你还在初中级的阶段，不必太焦虑，可以把这篇文章作为一个进阶的路线图，在未来的时日里朝着这个方向努力就好。<br>我也并不是说这篇文章是进阶高级工程师的唯一一条路线，如果你在业务上做的精进，亦或是能在沟通上八面玲珑，配合各方面力量把项目做的漂漂亮亮，那你也一样可以拥有这个头衔。本文只是我自己的一个成长路线总结。</p>\n<h3 id=\"Web前端技术简介技术分享大纲（入门级）\"><a href=\"#Web前端技术简介技术分享大纲（入门级）\" class=\"headerlink\" title=\"Web前端技术简介技术分享大纲（入门级）\"></a><a href=\"https://yizhiyue.me/2021/03/28/web-front-end-introduction-for-beginner\">Web前端技术简介技术分享大纲（入门级）</a></h3><p>这篇分享的主要目的是为大家普及前端的发展历程，以及简单介绍相关的开发工具及其用途，从而使大家对当前web前端开发有个大概的了解。由于时间有限，我们不能十分深入地讨论每一项技术的具体细节。不过，在了解大概技术种类之后，我们可以投票选出大家最想深入了解的主题，在今后的技术分享中，可以深入讨论具体细节。 在本次分享之后，我希望你能了解到：</p>\n<ol>\n<li>现代前端跟传统前端开发有何不同？</li>\n<li>现代前端开发的工具有哪些？</li>\n<li>作为非前端开发者，学会基本的前端开发可以做什么？</li>\n</ol>\n<h3 id=\"前端优秀实践不完全指南\"><a href=\"#前端优秀实践不完全指南\" class=\"headerlink\" title=\"前端优秀实践不完全指南\"></a><a href=\"https://juejin.cn/post/6932647134944886797\">前端优秀实践不完全指南</a></h3><p>所谓的用户体验设计，其实是一个比较虚的概念，是秉承着以用户为中心的思想的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。<br>良好的用户体验设计，是产品每一个环节共同努力的结果。<br>除去一些很难一蹴而就的，本文将就页面展示、交互细节、可访问性三个方面入手，罗列一些在实际的开发过程中，积攒的一些有益的经验。通过本文，你将能收获到：</p>\n<ul>\n<li>了解到一些小细节是如何影响用户体验的</li>\n<li>了解到如何在尽量小的开发改动下，提升页面的用户体验</li>\n<li>了解到一些优秀的交互设计细节</li>\n<li>了解基本的无障碍功能及页面可访问性的含义</li>\n<li>了解基本的提升页面可访问性的方法</li>\n</ul>\n<h3 id=\"现代-CLI-和-GUI-方案指南\"><a href=\"#现代-CLI-和-GUI-方案指南\" class=\"headerlink\" title=\"现代 CLI 和 GUI 方案指南\"></a><a href=\"http://axuebin.com/articles/fe-solution/cli/desc.html\">现代 CLI 和 GUI 方案指南</a></h3><p>提到初始化项目，那就必须提到脚手架这个名词，那为什么这篇文章的标题不是关于脚手架而是关于初始化项目呢？ 脚手架这个名词来源于建筑工程领域，百度百科对其的解释是“脚手架是为了保证各施工过程顺利进行而搭设的工作平台”，也就是说脚手架为工人提供了施工的基础功能。将其引申到软件工程领域，又是什么含义呢？</p>\n<div align='center'><img src='/images/hexo_post_718.png' alt='' /></div>\n\n\n<h3 id=\"前端性能优化指北-关于有些细节和思路\"><a href=\"#前端性能优化指北-关于有些细节和思路\" class=\"headerlink\" title=\"前端性能优化指北-关于有些细节和思路\"></a><a href=\"https://blog.csdn.net/weixin_44643524/article/details/115323203\">前端性能优化指北-关于有些细节和思路</a></h3><p>这份清单综合性很强，几乎介绍了所有的可用的优化方式。那么，如果你只有一个小时进行优化，你应该干什么呢？让我们从中总结10个最有用的来。别忘了在你开始优化前和结束优化后，记录你的结果，包括开始渲染时间以及在3G，有限连接下的速度。</p>\n<p>但没关系，本文只是一个普通大纲（希望能做到综合性强），你应该根据自己的工作环境列一份适合自己的清单。最重要的，在开始优化之前，先对项目中存在的问题有一个明确的了解。</p>\n<h2 id=\"业务线前端-7-年之-“感”\"><a href=\"#业务线前端-7-年之-“感”\" class=\"headerlink\" title=\"业务线前端 7 年之 “感”\"></a><a href=\"https://mp.weixin.qq.com/s/kfKJDzbWKChIkGgjL0-_CQ\">业务线前端 7 年之 “感”</a></h2><p>业务压力大也许只是一时的，可以选择压力小一点的业务线，或是找到应对压力的办法；没有话语权也许是因为本身能力不够或是沟通不到位，不能帮助合作伙伴解决问题；至于成长，核心在于自己是否愿意挤出时间、挤出精力，持续地学习。</p>\n<h2 id=\"前端搞基建-堂主-如何推动前端团队的基础设施建设\"><a href=\"#前端搞基建-堂主-如何推动前端团队的基础设施建设\" class=\"headerlink\" title=\"前端搞基建|堂主 - 如何推动前端团队的基础设施建设\"></a><a href=\"https://zhuanlan.zhihu.com/p/148210793\">前端搞基建|堂主 - 如何推动前端团队的基础设施建设</a></h2><p>本文根据 2020.02.29 日，《第二届前端早早聊大会》 的“前端基建”专场分享整理而来。</p>\n<p>本文是契合大会所有分享都以 “如何” 为切入的要求，同时也是最近一年，对我所负责的团队在前端技术基础设施建设方面如何从 0 到 1 的一次沉淀总结。</p>\n<h2 id=\"Contemporary-Front-end-Architectures\"><a href=\"#Contemporary-Front-end-Architectures\" class=\"headerlink\" title=\"Contemporary Front-end Architectures\"></a><a href=\"https://blog.webf.zone/contemporary-front-end-architectures-fb5b500b0231\">Contemporary Front-end Architectures</a></h2><p>旨在帮助任何 web 开发人员对现代 web 应用程序架构有一个全面的了解，篇幅较长</p>\n<div align='center'><img src='/images/hexo_post_716.png' alt='' /></div>\n\n<h2 id=\"Making-GitHub’s-new-homepage-fast-and-performant\"><a href=\"#Making-GitHub’s-new-homepage-fast-and-performant\" class=\"headerlink\" title=\"Making GitHub’s new homepage fast and performant\"></a><a href=\"https://github.blog/2021-01-29-making-githubs-new-homepage-fast-and-performant/\">Making GitHub’s new homepage fast and performant</a></h2><p>This post is the third installment of our five-part series on building GitHub’s new homepage:</p>\n<ol>\n<li>How our globe is built</li>\n<li>How we collect and use the data behind the globe</li>\n<li>How we made the page fast and performant</li>\n<li>How we illustrate at GitHub</li>\n<li>How we designed the homepage and wrote the narrative</li>\n</ol>\n<h2 id=\"2020年大前端技术趋势解读\"><a href=\"#2020年大前端技术趋势解读\" class=\"headerlink\" title=\"2020年大前端技术趋势解读\"></a><a href=\"https://juejin.cn/post/6908713513271689224\">2020年大前端技术趋势解读</a></h2><p>前端正在通过持续的技术革新和技术融合不断突破自身边界，进而重新定义自身价值。在这种大变革的时代背景下，腾讯IMWeb前端团队也正在与时俱进得进行着技术更新、优化与升级，结合自身这一年的快速发展，IMWeb团队为大家带来2020年大前端技术趋势解读</p>\n<h2 id=\"滨江前端沙龙分享：前端团队研发效能提升的探索与实践\"><a href=\"#滨江前端沙龙分享：前端团队研发效能提升的探索与实践\" class=\"headerlink\" title=\"滨江前端沙龙分享：前端团队研发效能提升的探索与实践\"></a><a href=\"https://www.yuque.com/lizhiyao/dxydance/kikle8\">滨江前端沙龙分享：前端团队研发效能提升的探索与实践</a></h2><p><strong>读者受益</strong>:</p>\n<ul>\n<li>研发效能定义：知道研发效能是什么？（对「研发效能」的定义有一个经得起推敲的参考）</li>\n<li>研发效能提升：知道如何提升技术团队的研发效能？（对提升自己所在团队研发效能有一些想法/灵感）</li>\n<li>技术的价值：当被问到自己（技术/技术人）的价值时，能从容的去回答</li>\n<li>职业发展：关于自己的职业发展，可以想的更清楚</li>\n<li>成长抓手：关于自己在工作中成长的抓手，可以拿捏得更精准</li>\n</ul>\n<h2 id=\"一文带你层层解锁「文件下载」的奥秘\"><a href=\"#一文带你层层解锁「文件下载」的奥秘\" class=\"headerlink\" title=\"一文带你层层解锁「文件下载」的奥秘\"></a><a href=\"https://juejin.cn/post/6867469476196155400\">一文带你层层解锁「文件下载」的奥秘</a></h2><p>最近有研究一些媒体相关的工作，因此打算对下载做一个整理。</p>\n<h2 id=\"不能说的秘密——前端也能玩的图片隐写术\"><a href=\"#不能说的秘密——前端也能玩的图片隐写术\" class=\"headerlink\" title=\"不能说的秘密——前端也能玩的图片隐写术\"></a><a href=\"http://www.alloyteam.com/2016/03/image-steganography/\">不能说的秘密——前端也能玩的图片隐写术</a></h2><p>隐写术算是一种加密技术，权威的 wiki 说法是“ 隐写术是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。” 而用前端如何实现呢？</p>\n<h2 id=\"从破解某设计网站谈前端水印-详细教程\"><a href=\"#从破解某设计网站谈前端水印-详细教程\" class=\"headerlink\" title=\"从破解某设计网站谈前端水印(详细教程)\"></a><a href=\"https://juejin.cn/post/6900713052270755847\">从破解某设计网站谈前端水印(详细教程)</a></h2><p>作者对前端实现水印的几种方式进行了深入研究，同时对他们的可靠性也进行了测试。</p>\n<h2 id=\"如何有效地进行代码-Review？\"><a href=\"#如何有效地进行代码-Review？\" class=\"headerlink\" title=\"如何有效地进行代码 Review？\"></a><a href=\"https://mp.weixin.qq.com/s/ICl-IBgR3aVQi4ObsB0-ww\">如何有效地进行代码 Review？</a></h2><p>研发都知道代码 Review 的重要性，在腾讯代码 Review 也越来越受大家重视，作为腾讯专有云平台研发的一员，我参与了大量的代码 Review，明显地感受到有效的代码 Review 不但能提高代码的质量，更能促进团队沟通协作，建立更高的工程质量标准，无论对个人还是团队都有着重要的价值。本文就为什么要做代码 Review 以及如何有效地做代码 Review 分享一下个人的看法。</p>\n<h3 id=\"前端冷知识\"><a href=\"#前端冷知识\" class=\"headerlink\" title=\"前端冷知识\"></a><a href=\"https://github.com/akira-cn/FE_You_dont_know\">前端冷知识</a></h3><p>来自月影，分享一些在前端开发中，你不知道的JavaScript、CSS和HTML趣味知识，增加你的知识面。</p>\n<h3 id=\"对-OzJS-的一些疑惑、建议与探讨\"><a href=\"#对-OzJS-的一些疑惑、建议与探讨\" class=\"headerlink\" title=\"对 OzJS 的一些疑惑、建议与探讨\"></a><a href=\"https://github.com/dexteryy/OzJS/issues/10\">对 OzJS 的一些疑惑、建议与探讨</a></h3><p>这是 13 年的一个 Github issue，来自阿里玉伯和目前已入职字节的大佬的对话，信息量很大，可以学到不少东西。。</p>\n<h3 id=\"ReactJS-Roadmap-🗺-For-Developers-💻\"><a href=\"#ReactJS-Roadmap-🗺-For-Developers-💻\" class=\"headerlink\" title=\"ReactJS Roadmap 🗺 For Developers 💻\"></a><a href=\"https://dev.to/theme_selection/reactjs-roadmap-for-developers-2824\">ReactJS Roadmap 🗺 For Developers 💻</a></h3><p>这个系列的文章包括 5 篇，分别是 React、FrontEnd、Bootstrap、JS、Vue 的</p>\n<h3 id=\"Ultimate-RoadMap-with-so-many-resources-for-Front-End-Development-💥💥\"><a href=\"#Ultimate-RoadMap-with-so-many-resources-for-Front-End-Development-💥💥\" class=\"headerlink\" title=\"Ultimate RoadMap with so many resources for Front-End Development 💥💥\"></a><a href=\"https://dev.to/rahxuls/ultimate-roadmap-with-so-many-resources-for-front-end-development-597f\">Ultimate RoadMap with so many resources for Front-End Development 💥💥</a></h3><p>I’ve got you everything covered. This is the final you need.<br>The best resources with the best road map. You definitely need this if you are curious how to start with front-end development. This post covers everything about front-end development.</p>\n<h3 id=\"高质量前端快照方案：来自页面的「自拍」\"><a href=\"#高质量前端快照方案：来自页面的「自拍」\" class=\"headerlink\" title=\"高质量前端快照方案：来自页面的「自拍」\"></a><a href=\"https://juejin.cn/post/6844904019605848072\">高质量前端快照方案：来自页面的「自拍」</a></h3><p>本文基于html2canvas和canvas2image，从快照的内容完整性、清晰度和转换效率等多个方面，介绍了前端页面生成高质量快照的解决方案。</p>\n<h3 id=\"我的前端成长之路\"><a href=\"#我的前端成长之路\" class=\"headerlink\" title=\"我的前端成长之路\"></a><a href=\"https://www.yuque.com/yubo/morning/grow-up-at-alibaba\">我的前端成长之路</a></h3><p>来自阿里玉伯：“全情投入、守正出奇、愿等花开”</p>\n<h3 id=\"前端项目自动化部署——超详细教程（Jenkins、Github-Actions）\"><a href=\"#前端项目自动化部署——超详细教程（Jenkins、Github-Actions）\" class=\"headerlink\" title=\"前端项目自动化部署——超详细教程（Jenkins、Github Actions）\"></a><a href=\"https://juejin.im/post/6887751398499287054\">前端项目自动化部署——超详细教程（Jenkins、Github Actions）</a></h3><p>本教程主要讲解了怎么使用 Jenkins 和 Github Actions 部署前端项目。</p>\n<p>第一部分是使用 Gitea 配置局域网 git 服务器，再使用 Jenkins 将 Gitea 下的项目部署到局域网服务器。<br>第二部分是使用 Github Actions 将 Github 项目部署到 Github Page 和阿里云。</p>\n<p>阅读本教程并不需要你提前了解 Jenkins 和 Github Actions 的知识，只要按照本教程的指引，就能够实现自动化部署项目。不过教程中所有的操作均在 windows 下运行，其他操作系统上可能会有一些区别。</p>\n<h3 id=\"从-VSCode-看大型-IDE-技术架构\"><a href=\"#从-VSCode-看大型-IDE-技术架构\" class=\"headerlink\" title=\"从 VSCode 看大型 IDE 技术架构\"></a><a href=\"https://www.yuque.com/paranoidjk/blog/vuuz30\">从 VSCode 看大型 IDE 技术架构</a></h3><p>主要回答了以下几个问题：</p>\n<ul>\n<li>大型复杂 GUI 软件（如 IDE 类）如何组织功能模块代码</li>\n<li>如何使用 Electron 技术将 Web 软件桌面化</li>\n<li>如何在打造插件化开放生态的同时保证软件整体质量与性能</li>\n<li>如何打造一款好用的、流行的工具软件</li>\n</ul>\n<h3 id=\"你所需要知道的代码整洁之道\"><a href=\"#你所需要知道的代码整洁之道\" class=\"headerlink\" title=\"你所需要知道的代码整洁之道\"></a><a href=\"https://juejin.im/post/6844904050572394510\">你所需要知道的代码整洁之道</a></h3><p>每次 review 过往写的代码，总有一种不忍直视的感觉。想提高编码能力，故阅读了一些相关书籍及博文，并有所感悟，今将一些读书笔记及个人心得感悟梳理出来。抛转引玉，希望这砖能抛得起来。</p>\n<p>宋代禅宗大师青原行思提出参禅的三重境界：</p>\n<blockquote>\n<p>参禅之初，看山是山，看水是水；禅有悟时，看山不是山，看水不是水；禅中彻悟，看山仍是山，看水仍是水。</p>\n</blockquote>\n<p>同理，编程同样存在境界：编程的一重境界是照葫芦画瓢，二重境界是可以灵活运用，三重境界则是心中无模式。唯有多实践，多感悟，方能突破一重又一重的境界。<br>最后，愿大家终将能写出自己不再讨厌的代码。</p>\n<h3 id=\"前端极致性能优化手册大全\"><a href=\"#前端极致性能优化手册大全\" class=\"headerlink\" title=\"前端极致性能优化手册大全\"></a><a href=\"https://github.com/Godiswill/blog/issues/15\">前端极致性能优化手册大全</a></h3><p>非常详尽地从以下几个方面介绍了前端如何进行性能优化：</p>\n<ul>\n<li>webpack</li>\n<li>图片</li>\n<li>缓存</li>\n<li>浏览器渲染</li>\n<li>服务器</li>\n</ul>\n<h3 id=\"Fast-load-times\"><a href=\"#Fast-load-times\" class=\"headerlink\" title=\"Fast load times\"></a><a href=\"https://web.dev/fast/\">Fast load times</a></h3><p>这其实是一系列文章的集合，总结了一些前端性能优化相关的文章，包括：</p>\n<ul>\n<li>Set performance budgets</li>\n<li>Optimize your images</li>\n<li>Lazy-load images and video</li>\n<li>Optimize your JavaScript</li>\n<li>Optimize your resource delivery</li>\n<li>Optimize your CSS</li>\n<li>Optimize your third-party resources</li>\n<li>Optimize WebFonts</li>\n<li>Optimize for network quality</li>\n<li>Measure performance in the field</li>\n<li>Build a performance culture</li>\n</ul>\n<h3 id=\"哪些技术会决定前端开发者的未来发展？\"><a href=\"#哪些技术会决定前端开发者的未来发展？\" class=\"headerlink\" title=\"哪些技术会决定前端开发者的未来发展？\"></a><a href=\"https://juejin.im/post/6844903876320034824\">哪些技术会决定前端开发者的未来发展？</a></h3><p>2019年下半年即将到来，上半年狂风骤雨般的裁员浪潮让每一位从业者背脊发凉，在经历了五六年黄金发展期之后，前端开发这个行业似乎也进入了转折点。作者在该文章里阐述了他认为的一些前端开发者需要关注的技术，仅供参考吧。</p>\n<h3 id=\"中文技术文档的写作规范\"><a href=\"#中文技术文档的写作规范\" class=\"headerlink\" title=\"中文技术文档的写作规范\"></a><a href=\"https://github.com/ruanyf/document-style-guide\">中文技术文档的写作规范</a></h3><p>出自阮一峰，介绍了写中文技术文档（主要是 Markdown）时的规范，包括：标题、文本、段落、数值、标点符号、文档体系等方面</p>\n<h3 id=\"前端如何在项目中做出亮点\"><a href=\"#前端如何在项目中做出亮点\" class=\"headerlink\" title=\"前端如何在项目中做出亮点\"></a><a href=\"https://segmentfault.com/a/1190000022795484\">前端如何在项目中做出亮点</a></h3><p>作者对前端在项目中如何做出亮点给出了自己的答案，作为程序员，我们很容易成为“搬砖仔”、“切图仔”、“页面仔”，但是其实如果我们再往前一步，就可以站得更高，走的更远</p>\n<h3 id=\"if-我是前端团队-Leader，怎么制定前端协作规范\"><a href=\"#if-我是前端团队-Leader，怎么制定前端协作规范\" class=\"headerlink\" title=\"if 我是前端团队 Leader，怎么制定前端协作规范?\"></a><a href=\"https://juejin.im/post/5d3a7134f265da1b5d57f1ed\">if 我是前端团队 Leader，怎么制定前端协作规范?</a></h3><p>记录了作者在制定前端协作规范时的一些思考，万字长文全是干货。</p>\n<h3 id=\"现代-Web-开发的现状与未来（JSDC-2019-演讲全文）\"><a href=\"#现代-Web-开发的现状与未来（JSDC-2019-演讲全文）\" class=\"headerlink\" title=\"现代 Web 开发的现状与未来（JSDC 2019 演讲全文）\"></a><a href=\"https://zhuanlan.zhihu.com/p/88616149\">现代 Web 开发的现状与未来（JSDC 2019 演讲全文）</a></h3><p>本文是 “JS黑客，GUI大法师，WebApp工匠，虚拟世界建筑师，奇幻科幻PC游戏动漫宅”——Dexter.Yy 受邀在台北的 JSDC 2019 活动中做的一次分享，从内容上来说已经可以算的上他的 2019 跨年演讲，内容非常多且详尽，可以开阔视野，展望未来。下图是作者自我介绍的：</p>\n<div align='center'><img src='' alt='/images/hexo_post_535.jpg' width='' /></div>\n\n\n<h3 id=\"从零做一个前端开源项目\"><a href=\"#从零做一个前端开源项目\" class=\"headerlink\" title=\"从零做一个前端开源项目\"></a><a href=\"http://www.imooc.com/article/28240\">从零做一个前端开源项目</a></h3><p>该文已录制成免费的视频教程，想看视频的点击：<a href=\"https://www.imooc.com/learn/1003\">https://www.imooc.com/learn/1003</a></p>\n<p>目录：</p>\n<ul>\n<li>什么是开源？</li>\n<li>为何做开源？</li>\n<li>做什么？</li>\n<li>注册账号</li>\n<li>搭建开发环境</li>\n<li>提交代码</li>\n<li>创建官网</li>\n<li>如何宣传？</li>\n<li>持续迭代</li>\n<li>总结</li>\n</ul>\n<h3 id=\"从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\"><a href=\"#从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\" class=\"headerlink\" title=\"从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\"></a><a href=\"http://www.dailichun.com/2018/03/12/whenyouenteraurl.html\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></h3><p>该文梳理了一个较为完整的前端向知识体系，内容超多</p>\n<h3 id=\"玉伯《从前端技术到体验科技（附演讲视频）》\"><a href=\"#玉伯《从前端技术到体验科技（附演讲视频）》\" class=\"headerlink\" title=\"玉伯《从前端技术到体验科技（附演讲视频）》\"></a><a href=\"https://cnodejs.org/topic/5a54a8a4afa0a121784a8ab0\">玉伯《从前端技术到体验科技（附演讲视频）》</a></h3><p>我想，玉伯大神应该不用过多介绍了吧，从之前的 seajs 到现在的 ant design，而玉伯大神也从一名前端工程师“进化”为一名架构师，这篇文章是玉伯大神在 SEE Conf 大会上的演讲记录，同时文章末尾还有演讲视频链接，不喜欢看文字的朋友可以直接看演讲视频。</p>\n<h3 id=\"哔哩哔哩（B站）的前端之路\"><a href=\"#哔哩哔哩（B站）的前端之路\" class=\"headerlink\" title=\"哔哩哔哩（B站）的前端之路\"></a><a href=\"https://zhuanlan.zhihu.com/p/32487533\">哔哩哔哩（B站）的前端之路</a></h3><p>作者总结了 B站 的前端进阶之路，前端的轮子很多，作者介绍了 B站 是如何选型的以及遇到了哪些坑。</p>\n<h3 id=\"深入剖析-WebKit\"><a href=\"#深入剖析-WebKit\" class=\"headerlink\" title=\"深入剖析 WebKit\"></a><a href=\"http://www.starming.com/2017/10/11/deeply-analyse-webkit/\">深入剖析 WebKit</a></h3><p>这篇文章和他的题目一样，真的很“深入”，因为你可以看到滚轮滑动的速度。。不过图文并茂的表现形式并不会让你产生“看不下去”的感觉，来张目录感受一下是不是干货：</p>\n<div align='center'><img src='' alt='/images/hexo_post_286.png' width='400' /></div>\n\n<h3 id=\"前端文章-收藏集-掘金\"><a href=\"#前端文章-收藏集-掘金\" class=\"headerlink\" title=\"前端文章- 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000010452096\">前端文章- 收藏集 - 掘金</a></h3><p>掘金上面关于前端的文章集合，闲暇时间看一下，可能会有意想不到的收获</p>\n<h3 id=\"前端工程——基础篇\"><a href=\"#前端工程——基础篇\" class=\"headerlink\" title=\"前端工程——基础篇\"></a><a href=\"https://github.com/fouber/blog/issues/10\">前端工程——基础篇</a></h3><p>fis 作者张玉龙对于前端工程的理解，从组件化到资源管理都阐述了自己的观点，这是一篇 2015 年的文章，但是文中的某些观念到现在看来仍然是字字珠玑，相信看完之后的你可以对前端有更深层次的理解。</p>\n<h3 id=\"大公司里怎样开发和部署前端代码？\"><a href=\"#大公司里怎样开发和部署前端代码？\" class=\"headerlink\" title=\"大公司里怎样开发和部署前端代码？\"></a><a href=\"https://github.com/fouber/blog/issues/6\">大公司里怎样开发和部署前端代码？</a></h3><p>又是张玉龙的文章，通过一个实际的场景一步步的告诉你大公司的前端代码是如何开发和部署上线的。</p>\n<h3 id=\"Web-前端知识体系精简\"><a href=\"#Web-前端知识体系精简\" class=\"headerlink\" title=\"Web 前端知识体系精简\"></a><a href=\"http://www.cnblogs.com/onepixel/p/7021506.html\">Web 前端知识体系精简</a></h3><p>从前端三剑客：HTML、CSS、Javascript 的角度分析了前端的知识体系，涉及到的领域比较广泛，很适合前端新人开拓视野和寻找学习方向，同时总结的也很全面，是一篇不错的入门教材。</p>\n<h3 id=\"移动时代的前端加密\"><a href=\"#移动时代的前端加密\" class=\"headerlink\" title=\"移动时代的前端加密\"></a><a href=\"http://div.io/topic/1220\">移动时代的前端加密</a></h3><p>这篇文章篇幅很长，对于前端来说，很多人感觉“加密”是莫须有的一种东西，其实这是一种误解，“加密”并不意味着绝对安全，这篇文章将从这个角度向你阐述前端加密的正确姿势。</p>\n<h3 id=\"前端疲劳\"><a href=\"#前端疲劳\" class=\"headerlink\" title=\"前端疲劳\"></a><a href=\"http://www.jianshu.com/p/a2eff3d721cb\">前端疲劳</a></h3><p>有这么多不同的前端技术栈，不同的前端框架，不同的前端工具和库像水一样包裹着我，我不去学就不会，学了又学不完。在前端的海洋里越陷越深的我究竟该如何自救呢？这篇文章可能有你要的答案</p>\n<h3 id=\"精读前后端渲染之争\"><a href=\"#精读前后端渲染之争\" class=\"headerlink\" title=\"精读前后端渲染之争\"></a><a href=\"https://github.com/camsong/blog/issues/8\">精读前后端渲染之争</a></h3><p>前后端渲染一直以来都是一个带有争议的话题，而该文章的作者对<a href=\"https://medium.freecodecamp.org/heres-why-client-side-rendering-won-46a349fadb52\">国外一篇关于前后端渲染的文章</a>进行了精读，介绍了前后端渲染各自的优缺点，以及我们在实际项目中如何取舍。</p>\n<h3 id=\"技术雷达之「微前端」-将微服务理念扩展到前端开发\"><a href=\"#技术雷达之「微前端」-将微服务理念扩展到前端开发\" class=\"headerlink\" title=\"技术雷达之「微前端」- 将微服务理念扩展到前端开发\"></a><a href=\"https://zhuanlan.zhihu.com/p/32378432\">技术雷达之「微前端」- 将微服务理念扩展到前端开发</a></h3><p>看标题就知道，这是一篇基本上看不懂的文章，不过图文并茂的形式让这篇文章生动了很多，内容很充实，覆盖面很广</p>\n<h3 id=\"理解-Web-路由\"><a href=\"#理解-Web-路由\" class=\"headerlink\" title=\"理解 Web 路由\"></a><a href=\"https://zhuanlan.zhihu.com/p/24814675\">理解 Web 路由</a></h3><p>关于路由，其实是一个很抽象的概念，而这篇文章对经常提到的前端路由和后端路由的实现和区别进行了很详细很清晰的讲解，同时对动态路由和严格路由也进行了介绍。</p>\n<h3 id=\"一站到底—前端基础之网络\"><a href=\"#一站到底—前端基础之网络\" class=\"headerlink\" title=\"一站到底—前端基础之网络\"></a><a href=\"https://juejin.im/post/5b3357556fb9a00e5a4b63df\">一站到底—前端基础之网络</a></h3><p>这篇文章算是近几年来我读过的信息量最大、知识点最全的文章了，作者从访问一个网址说起，为读者建立了一个健全的网络知识体系，该文章解答了以下问题：</p>\n<p><strong>必会：</strong></p>\n<ul>\n<li>http 报文都有哪些内容？</li>\n<li>HTTP 协议头含有哪些重要的部分，HTTP 状态码？</li>\n<li>HTTP 状态码状态码都有哪些？</li>\n<li>什么是强缓存？什么是弱缓存？</li>\n<li>浏览器的现缓存机制是什么？如何设置 HTTP 缓存？</li>\n<li>你知道有哪些 HTTP 方法？POST 和 PUT 有什么区别？</li>\n<li>如何对数据进行压缩（ZLIB），Gzip? 压缩的范围是什么，请求头会压缩吗？</li>\n<li>跨域，为什么 JS 会对跨域做出限制？如何允许跨域?</li>\n</ul>\n<p><strong>基础：</strong></p>\n<ul>\n<li>影响网速的原因有哪些？网络丢包的主要原因是什么？</li>\n<li>网络体系结构的五层参考模型都是什么？它们之间的关系是什么？</li>\n<li>我们常听到报文、段（分组）、数据报、帧、和数据包，它们有什么关系？</li>\n<li>Ajax 能发送 http 请求，它和 http 有什么样的关系？</li>\n<li>HTTP1.0 到 HTTP1.1 解决了什么问题？</li>\n<li>http2 有什么特性？</li>\n<li>http1.1 为什么会有队首阻塞？</li>\n<li>SSL 与 TLS 关系？HTTPS 协议如何实现？</li>\n</ul>\n<p><strong>补课与拓展：（慢慢更新）</strong></p>\n<ul>\n<li>常用的传输层协议有哪些？TCP 和 UDP 分别有什么特点？</li>\n<li>解释一下 TCP 的三次握手和四次挥手？</li>\n<li>为什么说 TCP 可能是网络通信的瓶颈？如何解决 TCP 队首阻塞？</li>\n<li>谷歌新出 QUIC 为什么要基于 UDP？</li>\n<li>QUIC 有哪些新特性，解决了什么问题？</li>\n</ul>\n<h3 id=\"WEB-服务器探究\"><a href=\"#WEB-服务器探究\" class=\"headerlink\" title=\"WEB 服务器探究\"></a><a href=\"https://wangzitian0.github.io/2017/06/27/WEB-server-explore/\">WEB 服务器探究</a></h3><p>作者介绍了 web 服务器的基本概念，和常见的服务端演替路线。图文并茂的方式很容易理解，干货满满。</p>\n<h3 id=\"网站性能优化实战——从12-67s到1-06s的故事\"><a href=\"#网站性能优化实战——从12-67s到1-06s的故事\" class=\"headerlink\" title=\"网站性能优化实战——从12.67s到1.06s的故事\"></a><a href=\"http://imweb.io/topic/5b6fd3c13cb5a02f33c013bd\">网站性能优化实战——从12.67s到1.06s的故事</a></h3><p>作者将<a href=\"http://jerryonlyzrj.com/resume/\">自己的在线简历</a>进行了性能优化，首屏时间从 12.67s 降低到了 1.06s，这个过程中作者踩了很多坑，翻阅了很多书籍，最终总结出了这篇文章。文章涉及到的知识点比较全面，对性能优化进行了系统的介绍。</p>\n<h3 id=\"现代-Web-开发基础与工程实践\"><a href=\"#现代-Web-开发基础与工程实践\" class=\"headerlink\" title=\"现代 Web 开发基础与工程实践\"></a><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/README.md\">现代 Web 开发基础与工程实践</a></h3><p>前端大牛@王下邀月熊的著作，对 Web 开发基础与工程实践的相关博客、示例代码与开源项目、整理成的系列书籍等内容进行了总结，信息量异常庞大，包含以下篇章：</p>\n<ul>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%AF%BC%E8%AE%BA\">导论篇</a>: Web 开发简史与运行机制，数据流驱动的界面，模块化与组件化，工具化与工程化，前后端分离与 GraphQL，大前端与 WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%9F%BA%E7%A1%80\">基础篇</a>: 对于 HTML、CSS、DOM 等 Web 开发中涉及的基础知识与理念的总结介绍。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5\">工程实践篇</a>: 构建工具，测试，安全，WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96%E7%AF%87\">架构优化篇</a>: 组件化，状态管理，性能优化，PWA。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\">React 篇</a>：近年来前端领域百花齐放，各种技术方案争妍斗艳，各领风骚。本书立足于其中的佼佼者 React，深入浅出的介绍 React、Webpack 、 ES6、Redux 、 MobX 等常见前端开发工具与开发库的用法，帮助初学者能够迅速成为一名合格前端工程师。而本书也不仅局限于工具使用的层面，探寻各种技术方案背后蕴含的设计思想与架构模式，从前端工程化的角度讨论前端开发者在进阶过程中需要掌握的工程实践、模块化与组件化、质量保障、性能优化等知识要点。最终帮助开发者在前端开发中能够因地制宜的指定合理方案，以尽可能快的速度实现可信赖的产品。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/Vue\">Vue 篇</a>：本部分目前正逐步启动，笔者的初衷是希望能够保证本书章节与 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\">React 与前端工程化实践</a>尽可能一致，从而更方便地去介绍不同技术栈下相通的设计理念；目前本书的目录只是拷贝自 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\">React 与前端工程化实践</a>，未来笔者会逐步完善。</li>\n</ul>\n<h3 id=\"雅虎前端优化35条规则翻译\"><a href=\"#雅虎前端优化35条规则翻译\" class=\"headerlink\" title=\"雅虎前端优化35条规则翻译\"></a><a href=\"https://github.com/creeperyang/blog/issues/1\">雅虎前端优化35条规则翻译</a></h3><p>本文是大名鼎鼎的雅虎前端优化规则（<strong>Yslow</strong>）的翻译。作者对其中的一些例子进行了精简。</p>\n<h3 id=\"前端知识体系目录\"><a href=\"#前端知识体系目录\" class=\"headerlink\" title=\"前端知识体系目录\"></a><a href=\"http://hao.jser.com/archive/5314/\">前端知识体系目录</a></h3><p>从基础到进阶，从 HTML、CSS、JS 到 HTTP，简单的总结了前端领域需要了解的知识点，同时推荐了一些书籍，对于那些想要入坑前端的童鞋来说是一份不错的指引文档。</p>\n<h3 id=\"微前端的那些事儿\"><a href=\"#微前端的那些事儿\" class=\"headerlink\" title=\"微前端的那些事儿\"></a><a href=\"https://github.com/phodal/microfrontends\">微前端的那些事儿</a></h3><blockquote>\n<p>微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为<strong>多个小型前端应用聚合为一的应用</strong>。各个前端应用还可以<strong>独立运行</strong>、<strong>独立开发</strong>、<strong>独立部署</strong>。</p>\n</blockquote>\n<p>这篇文章是 phodal 对于微前端的解读，包括其实现方式以及方案对比，而微服务与前端的结合会有多大的优势，值得期待。</p>\n<h3 id=\"2018-前端常见题汇总\"><a href=\"#2018-前端常见题汇总\" class=\"headerlink\" title=\"2018 前端常见题汇总\"></a><a href=\"https://github.com/qianbin01/frontend_train\">2018 前端常见题汇总</a></h3><p>汇总了前端一些问题，作者不定时更新，建议收藏</p>\n<ol>\n<li><a href=\"https://github.com/qianbin01/frontend_train#html\">HTML 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#css\">CSS 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#javascript\">JAVASCRIPT 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#dom\">DOM 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#http\">HTTP 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#vue\">VUE 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#sort\">算法相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#web\">网络安全相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#webpack\">webpack 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#other\">其他</a></li>\n</ol>\n<h3 id=\"InfoQ-趋势报告之-JavaScript-和-Web-开发\"><a href=\"#InfoQ-趋势报告之-JavaScript-和-Web-开发\" class=\"headerlink\" title=\"InfoQ 趋势报告之 JavaScript 和 Web 开发\"></a><a href=\"https://www.infoq.cn/article/TFXQXkWbPPM*cK5KFJrW\">InfoQ 趋势报告之 JavaScript 和 Web 开发</a></h3><p>文章简单介绍了 Javascript 生态系统的现状和发展历程，文中提到了很多名词和框架，是一篇很不错的“扫盲”文章。</p>\n<h3 id=\"2019-Web开发技术指南和趋势\"><a href=\"#2019-Web开发技术指南和趋势\" class=\"headerlink\" title=\"2019 - Web开发技术指南和趋势\"></a><a href=\"https://www.jianshu.com/p/062c978d9f04\">2019 - Web开发技术指南和趋势</a></h3><p>这是一个 2019 年你成为前端，后端或全栈开发者的进阶指南:</p>\n<ol>\n<li>你不需要学习所有的技术成为一个 web 开发者</li>\n<li>这个指南只是通过简单分类列出了技术选项</li>\n<li>我将从我的经验和参考中给出建议</li>\n<li>首选我们会介绍通用的知识, 最后介绍 2019 年的 Web 的一些趋势</li>\n</ol>\n<p>要想知道更多细节, 请看 Youtube 视频: <a href=\"https://www.youtube.com/watch?v=UnTQVlqmDQ0&amp;t=18s\">Web Development in 2019</a></p>\n<h3 id=\"前端模块化详解-完整版\"><a href=\"#前端模块化详解-完整版\" class=\"headerlink\" title=\"前端模块化详解(完整版)\"></a><a href=\"https://juejin.im/post/5c17ad756fb9a049ff4e0a62\">前端模块化详解(完整版)</a></h3><p>这篇文章内容主要有理解模块化，为什么要模块化，模块化的优缺点以及模块化规范，并且介绍下开发中最流行的 CommonJS, AMD, ES6、CMD 规范。作者试图站在小白的角度，用通俗易懂的笔调介绍这些枯燥无味的概念，希望屏幕前的你阅读后，对模块化编程有个全新的认识和理解！</p>\n<h3 id=\"2018-前端性能优化清单\"><a href=\"#2018-前端性能优化清单\" class=\"headerlink\" title=\"2018 前端性能优化清单\"></a><a href=\"https://cherryblog.site/front-end-performance-checklist-2018.html\">2018 前端性能优化清单</a></h3><p>英文原文：<a href=\"https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/\">https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/</a>，文章较长，需要比较长的时间才能读完，涉及到的地方非常全面，五星推荐。</p>\n<h3 id=\"列一份前端知识架构图\"><a href=\"#列一份前端知识架构图\" class=\"headerlink\" title=\"列一份前端知识架构图\"></a><a href=\"https://time.geekbang.org/column/article/77804\">列一份前端知识架构图</a></h3><p>计算机之子“Winter”列的一份前端知识框架图</p>\n<h3 id=\"茴字的四种写法—移动适配方案的进化\"><a href=\"#茴字的四种写法—移动适配方案的进化\" class=\"headerlink\" title=\"茴字的四种写法—移动适配方案的进化\"></a><a href=\"https://segmentfault.com/a/1190000014309664\">茴字的四种写法—移动适配方案的进化</a></h3><p>这是一篇一站式的文章，可以系统的了解前端适配的演进。</p>\n<h3 id=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"><a href=\"#现代前端开发路线图：从零开始，一步步成为前端工程师\" class=\"headerlink\" title=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"></a><a href=\"https://36kr.com/p/5128487.html\">现代前端开发路线图：从零开始，一步步成为前端工程师</a></h3><p>很多人都想学编程。但是苦于没有具体的步骤和指导。比如想找份前端开发的工作，却不知道应该先学习什么再学习什么，也不知道该选择什么样的工具。因为经常被人问到类似的问题，全栈开发者Kamran Ahmed索性在github上制订了一份<a href=\"https://github.com/kamranahmedse/developer-roadmap\">现代前端开发的路线图</a>，并且用<a href=\"https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c\">一篇文章</a>对前端开发的整个学习过程进行了详细解释。感兴趣的初学者不容错过。</p>\n<p>而这篇文章的目的就是依次解释路线图的每一个步骤，对于前端初学者来说具有指引作用。</p>\n","categories":[{"name":"推荐","path":"api/categories/推荐.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"}]}