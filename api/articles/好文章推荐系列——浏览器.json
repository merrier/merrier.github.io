{"title":"好文章推荐系列——浏览器","slug":"好文章推荐系列——浏览器","date":"2017-08-07T08:29:36.000Z","updated":"2021-02-01T03:27:26.994Z","comments":true,"path":"api/articles/好文章推荐系列——浏览器.json","excerpt":null,"covers":null,"content":"<h3 id=\"美国如果把根域名服务器封了，中国会从网络上消失？\"><a href=\"#美国如果把根域名服务器封了，中国会从网络上消失？\" class=\"headerlink\" title=\"美国如果把根域名服务器封了，中国会从网络上消失？\"></a><a href=\"https://mp.weixin.qq.com/s/3NoGKhuViPswyAEge0b9jw\" target=\"_blank\" rel=\"noopener\">美国如果把根域名服务器封了，中国会从网络上消失？</a></h3><p>题目很吸引人，其实作者主要是借这个话题对 DNS 相关知识进行了讲解</p>\n<h3 id=\"用故事说透-HTTPS\"><a href=\"#用故事说透-HTTPS\" class=\"headerlink\" title=\"用故事说透 HTTPS\"></a><a href=\"https://mp.weixin.qq.com/s/MfvUuitrF8MN16nxyZNB8A\" target=\"_blank\" rel=\"noopener\">用故事说透 HTTPS</a></h3><p>该文以故事的形式介绍了 HTTP 的不安全，保证 HTTPS 安全性的背后支持，包含数字证书、数字签名、对称加密、非对称加密的概念，当然光有理论还不行，需要实践才能更好地理解。</p>\n<h3 id=\"不同浏览器下-autoplay-的限制策略和方案的处理\"><a href=\"#不同浏览器下-autoplay-的限制策略和方案的处理\" class=\"headerlink\" title=\"不同浏览器下 autoplay 的限制策略和方案的处理\"></a><a href=\"https://segmentfault.com/a/1190000018273509\" target=\"_blank\" rel=\"noopener\">不同浏览器下 autoplay 的限制策略和方案的处理</a></h3><p>从 PC 和移动端两个方面介绍了 autoplay 属性的一些坑，同时提供了解决方案</p>\n<h3 id=\"js在微信、微博、QQ、Safari唤起App的解决方案\"><a href=\"#js在微信、微博、QQ、Safari唤起App的解决方案\" class=\"headerlink\" title=\"js在微信、微博、QQ、Safari唤起App的解决方案\"></a><a href=\"https://segmentfault.com/a/1190000012940046\" target=\"_blank\" rel=\"noopener\">js在微信、微博、QQ、Safari唤起App的解决方案</a></h3><p>一个全面的、最新（2018-01-22）的唤起方案，总结的很透彻，值得一读</p>\n<h3 id=\"浏览器进程？线程？傻傻分不清楚！\"><a href=\"#浏览器进程？线程？傻傻分不清楚！\" class=\"headerlink\" title=\"浏览器进程？线程？傻傻分不清楚！\"></a><a href=\"http://www.imweb.io/topic/58e3bfa845e5c13468f567d5\" target=\"_blank\" rel=\"noopener\">浏览器进程？线程？傻傻分不清楚！</a></h3><p>什么是多进程架构浏览器？为什么浏览器内核是多线程？Javascript 是单线程又是什么鬼？进程和线程是否分得清楚呢？文章干货和知识点比较多，需要查阅相关知识才能完全消化。</p>\n<h3 id=\"WebView-性能、体验分析与优化\"><a href=\"#WebView-性能、体验分析与优化\" class=\"headerlink\" title=\"WebView 性能、体验分析与优化\"></a><a href=\"https://tech.meituan.com/WebViewPerf.html\" target=\"_blank\" rel=\"noopener\">WebView 性能、体验分析与优化</a></h3><p>来自美团的技术文档，对 webview 的方方面面都进行了详细的介绍，同时指出了其存在的问题，相信看完之后对于 webview 会有更深层次的理解~</p>\n<h3 id=\"浅析-HTTP-缓存的机制-浏览器缓存\"><a href=\"#浅析-HTTP-缓存的机制-浏览器缓存\" class=\"headerlink\" title=\"浅析 HTTP 缓存的机制-浏览器缓存\"></a><a href=\"http://obkoro1.com/2018/06/09/%E6%B5%85%E6%9E%90HTTP%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%BA%E5%88%B6-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/\" target=\"_blank\" rel=\"noopener\">浅析 HTTP 缓存的机制-浏览器缓存</a></h3><p>在浏览器众多缓存中的 HTTP 缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的 magic，但是对此背后的原因可能不甚了解；作者结合状态码介绍了强缓存和弱缓存的区别和触发条件，篇幅短小精悍，值得一读。</p>\n<h3 id=\"深入理解-JSCore\"><a href=\"#深入理解-JSCore\" class=\"headerlink\" title=\"深入理解 JSCore\"></a><a href=\"https://juejin.im/post/5b7f6a27e51d4538b063f233?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">深入理解 JSCore</a></h3><p>目前业界流行的动态化方案，如 Facebook 的 React Native，阿里巴巴的 Weex 都采用了前端系的 DSL 方案，而它们在 iOS 系统上能够顺利的运行，都离不开一个背后的功臣：JavaScriptCore（以下简称 JSCore），它建立起了 Objective-C（以下简称OC）和 JavaScript（以下简称 JS）两门语言之间沟通的桥梁。作者从浏览器谈起，对 Webkit 内核的工作原理和组成进行了详细介绍，同时介绍了 JSCore 的组成部分：词法分析、语法分析和解释执行，后面还介绍了 iOS 中的 JSCore 的应用和一些机制，篇幅较长，但是干货满满，如果你对浏览器渲染引擎感兴趣，这篇文章值得一看~</p>\n<h3 id=\"H5-唤起-APP-指南-附开源唤端库\"><a href=\"#H5-唤起-APP-指南-附开源唤端库\" class=\"headerlink\" title=\"H5 唤起 APP 指南(附开源唤端库)\"></a><a href=\"https://juejin.im/post/5b7efb2ee51d45388b6af96c?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">H5 唤起 APP 指南(附开源唤端库)</a></h3><p>唤端的定义：引导已下载用户打开 APP，引导未下载用户下载 APP。对于用户留存来讲，唤起 App 是一种很重要的手段，这篇文章可以说把所有和唤端相关的知识点都介绍了，最后还给自己的工具打了一发广告。。</p>\n<h3 id=\"当···时发生了什么？\"><a href=\"#当···时发生了什么？\" class=\"headerlink\" title=\"当···时发生了什么？\"></a><a href=\"https://github.com/skyline75489/what-happens-when-zh_CN\" target=\"_blank\" rel=\"noopener\">当···时发生了什么？</a></h3><p>这个仓库试图回答一个古老的面试问题：当你在浏览器中输入 google.com 并且按下回车之后发生了什么？不过作者不再局限于平常的回答，而是想办法回答地尽可能具体，不遗漏任何细节。包括一些硬件知识也包含其中，我相信如果面试官问到你这道题，然后你的回答是这篇文章里面描述的话，面试官肯定会大吃一惊！</p>\n<h3 id=\"HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\"><a href=\"#HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\" class=\"headerlink\" title=\"HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事\"></a><a href=\"http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/\" target=\"_blank\" rel=\"noopener\">HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事</a></h3><p>作为一个经常和 web 打交道的程序员，了解这些协议是必须的，而这篇文章就向大家介绍了一下这些协议的区别和基本概念，文中不局限于前端知识，还包括一些运维，协议方面的知识。</p>\n<h3 id=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"><a href=\"#浏览器的工作原理：新式网络浏览器幕后揭秘\" class=\"headerlink\" title=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"></a><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality\" target=\"_blank\" rel=\"noopener\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></h3><p>这是一篇全面介绍 WebKit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数，并花了很多时间来研读网络浏览器的源代码。 网络浏览器很可能是使用最广的软件。在这篇入门文章中，作者将会介绍它们的幕后工作原理。我们会了解到，从在地址栏输入 <code>google.com</code> 直到在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。文章讲解的很详细，篇幅较长，需要比较大的耐心才能看下去。</p>\n<h3 id=\"HTTP-请求头中的-X-Forwarded-For\"><a href=\"#HTTP-请求头中的-X-Forwarded-For\" class=\"headerlink\" title=\"HTTP 请求头中的 X-Forwarded-For\"></a><a href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" target=\"_blank\" rel=\"noopener\">HTTP 请求头中的 X-Forwarded-For</a></h3><p>这篇文章对 HTTP 请求头中的 X-Forwarded-For（XFF）进行了详细的讲解，当我们需要取到用户的真实 IP 时，对这个请求头的理解和使用就显得尤为重要了，而从这个应用场景出发，作者还对请求头中的 x-real-ip 字段以及 Remote Address 进行了介绍。作者还有关于 HTTP 的其他文章，可以<a href=\"https://imququ.com/post/series.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看更多。</p>\n<h3 id=\"图解浏览器的基本工作原理\"><a href=\"#图解浏览器的基本工作原理\" class=\"headerlink\" title=\"图解浏览器的基本工作原理\"></a><a href=\"https://zhuanlan.zhihu.com/p/47407398\" target=\"_blank\" rel=\"noopener\">图解浏览器的基本工作原理</a></h3><p>可能每一个前端工程师都想要理解浏览器的工作原理。我们希望知道从在浏览器地址栏中输入 url 到页面展现的短短几秒内浏览器究竟做了什么；我们希望了解平时常常听说的各种代码优化方案是究竟为什么能起到优化的作用；我们希望更细化的了解浏览器的渲染流程。那么这篇文章就解答了上面的所有问题，文章较长，图文并茂。</p>\n<h3 id=\"Content-Security-Policy-An-Introduction\"><a href=\"#Content-Security-Policy-An-Introduction\" class=\"headerlink\" title=\"Content Security Policy - An Introduction\"></a><a href=\"https://scotthelme.co.uk/content-security-policy-an-introduction/\" target=\"_blank\" rel=\"noopener\">Content Security Policy - An Introduction</a></h3><p>一篇介绍 CSP 的文章，介绍了我们为什么需要 CSP，以及涉及到 CSP 的一些协议头等等相关信息。</p>\n<h3 id=\"认识-HTTP—-Cookie-和-Session-篇\"><a href=\"#认识-HTTP—-Cookie-和-Session-篇\" class=\"headerlink\" title=\"认识 HTTP—-Cookie 和 Session 篇\"></a><a href=\"https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892\" target=\"_blank\" rel=\"noopener\">认识 HTTP—-Cookie 和 Session 篇</a></h3><p>虽然内容大多来自《图解HTTP》一书，但是条理清楚分明，文笔很好，作者解释的很清晰。</p>\n<h3 id=\"图解基于-HTTPS-的-DNS\"><a href=\"#图解基于-HTTPS-的-DNS\" class=\"headerlink\" title=\"图解基于 HTTPS 的 DNS\"></a><a href=\"https://www.infoq.cn/article/a-cartoon-intro-to-dns-over-https\" target=\"_blank\" rel=\"noopener\">图解基于 HTTPS 的 DNS</a></h3><p>这是关于 dns 查询的过程讲解，配上插图和文字，可以对 dns 的查询过程有一个大概了解。</p>\n<h3 id=\"理解-WebKit-和-Chromium\"><a href=\"#理解-WebKit-和-Chromium\" class=\"headerlink\" title=\"理解 WebKit 和 Chromium\"></a><a href=\"https://blog.csdn.net/milado_nju/article/details/7216067\" target=\"_blank\" rel=\"noopener\">理解 WebKit 和 Chromium</a></h3><p>系统的描述了 Chrome 浏览器的信息，可以更加全面的了解 Chrome 浏览器，最给力的是有很多工具的使用介绍。</p>\n<h3 id=\"你真的了解回流和重绘吗\"><a href=\"#你真的了解回流和重绘吗\" class=\"headerlink\" title=\"你真的了解回流和重绘吗?\"></a><a href=\"https://github.com/chenjigeng/blog/blob/master/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E5%90%97.md\" target=\"_blank\" rel=\"noopener\">你真的了解回流和重绘吗?</a></h3><p>这篇文章主要讲了浏览器的渲染过程、浏览器的优化机制以及如何减少甚至避免回流和重绘，可以帮助读者更好的理解回流重绘。</p>\n<h3 id=\"这样使用GPU动画\"><a href=\"#这样使用GPU动画\" class=\"headerlink\" title=\"这样使用GPU动画\"></a><a href=\"https://www.w3cplus.com/animation/gpu-animation-doing-it-right.html\" target=\"_blank\" rel=\"noopener\">这样使用GPU动画</a></h3><p><a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">《GPU Animation: Doing It Right》</a>的译文，这篇文章能帮助你更好地了解浏览器如何使用GPU来渲染，这样你就可以创作能在所有设备上快速运行的令人印象深刻的网站。著作权归作者所有。</p>\n<h3 id=\"How-Blink-Works-中文译文\"><a href=\"#How-Blink-Works-中文译文\" class=\"headerlink\" title=\"How Blink Works 中文译文\"></a><a href=\"https://zhuanlan.zhihu.com/p/52918538\" target=\"_blank\" rel=\"noopener\">How Blink Works 中文译文</a></h3><p>Chromium 的工程师们写了两篇技术文章 <a href=\"https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit?pli=1#\" target=\"_blank\" rel=\"noopener\">How Blink Works</a> 和 <a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/how_cc_works.md\" target=\"_blank\" rel=\"noopener\">How cc Works</a>，分别介绍了 Chrome 浏览器内核内部的两个重要模块 Blink 和 cc 内部设计和实现的一些细节。对于想要了解 Chrome 内核内部实现的同学，这两篇文章提供了不错的入门指引。</p>\n","more":"<h3 id=\"美国如果把根域名服务器封了，中国会从网络上消失？\"><a href=\"#美国如果把根域名服务器封了，中国会从网络上消失？\" class=\"headerlink\" title=\"美国如果把根域名服务器封了，中国会从网络上消失？\"></a><a href=\"https://mp.weixin.qq.com/s/3NoGKhuViPswyAEge0b9jw\" target=\"_blank\" rel=\"noopener\">美国如果把根域名服务器封了，中国会从网络上消失？</a></h3><p>题目很吸引人，其实作者主要是借这个话题对 DNS 相关知识进行了讲解</p>\n<h3 id=\"用故事说透-HTTPS\"><a href=\"#用故事说透-HTTPS\" class=\"headerlink\" title=\"用故事说透 HTTPS\"></a><a href=\"https://mp.weixin.qq.com/s/MfvUuitrF8MN16nxyZNB8A\" target=\"_blank\" rel=\"noopener\">用故事说透 HTTPS</a></h3><p>该文以故事的形式介绍了 HTTP 的不安全，保证 HTTPS 安全性的背后支持，包含数字证书、数字签名、对称加密、非对称加密的概念，当然光有理论还不行，需要实践才能更好地理解。</p>\n<h3 id=\"不同浏览器下-autoplay-的限制策略和方案的处理\"><a href=\"#不同浏览器下-autoplay-的限制策略和方案的处理\" class=\"headerlink\" title=\"不同浏览器下 autoplay 的限制策略和方案的处理\"></a><a href=\"https://segmentfault.com/a/1190000018273509\" target=\"_blank\" rel=\"noopener\">不同浏览器下 autoplay 的限制策略和方案的处理</a></h3><p>从 PC 和移动端两个方面介绍了 autoplay 属性的一些坑，同时提供了解决方案</p>\n<h3 id=\"js在微信、微博、QQ、Safari唤起App的解决方案\"><a href=\"#js在微信、微博、QQ、Safari唤起App的解决方案\" class=\"headerlink\" title=\"js在微信、微博、QQ、Safari唤起App的解决方案\"></a><a href=\"https://segmentfault.com/a/1190000012940046\" target=\"_blank\" rel=\"noopener\">js在微信、微博、QQ、Safari唤起App的解决方案</a></h3><p>一个全面的、最新（2018-01-22）的唤起方案，总结的很透彻，值得一读</p>\n<h3 id=\"浏览器进程？线程？傻傻分不清楚！\"><a href=\"#浏览器进程？线程？傻傻分不清楚！\" class=\"headerlink\" title=\"浏览器进程？线程？傻傻分不清楚！\"></a><a href=\"http://www.imweb.io/topic/58e3bfa845e5c13468f567d5\" target=\"_blank\" rel=\"noopener\">浏览器进程？线程？傻傻分不清楚！</a></h3><p>什么是多进程架构浏览器？为什么浏览器内核是多线程？Javascript 是单线程又是什么鬼？进程和线程是否分得清楚呢？文章干货和知识点比较多，需要查阅相关知识才能完全消化。</p>\n<h3 id=\"WebView-性能、体验分析与优化\"><a href=\"#WebView-性能、体验分析与优化\" class=\"headerlink\" title=\"WebView 性能、体验分析与优化\"></a><a href=\"https://tech.meituan.com/WebViewPerf.html\" target=\"_blank\" rel=\"noopener\">WebView 性能、体验分析与优化</a></h3><p>来自美团的技术文档，对 webview 的方方面面都进行了详细的介绍，同时指出了其存在的问题，相信看完之后对于 webview 会有更深层次的理解~</p>\n<h3 id=\"浅析-HTTP-缓存的机制-浏览器缓存\"><a href=\"#浅析-HTTP-缓存的机制-浏览器缓存\" class=\"headerlink\" title=\"浅析 HTTP 缓存的机制-浏览器缓存\"></a><a href=\"http://obkoro1.com/2018/06/09/%E6%B5%85%E6%9E%90HTTP%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%BA%E5%88%B6-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/\" target=\"_blank\" rel=\"noopener\">浅析 HTTP 缓存的机制-浏览器缓存</a></h3><p>在浏览器众多缓存中的 HTTP 缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的 magic，但是对此背后的原因可能不甚了解；作者结合状态码介绍了强缓存和弱缓存的区别和触发条件，篇幅短小精悍，值得一读。</p>\n<h3 id=\"深入理解-JSCore\"><a href=\"#深入理解-JSCore\" class=\"headerlink\" title=\"深入理解 JSCore\"></a><a href=\"https://juejin.im/post/5b7f6a27e51d4538b063f233?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">深入理解 JSCore</a></h3><p>目前业界流行的动态化方案，如 Facebook 的 React Native，阿里巴巴的 Weex 都采用了前端系的 DSL 方案，而它们在 iOS 系统上能够顺利的运行，都离不开一个背后的功臣：JavaScriptCore（以下简称 JSCore），它建立起了 Objective-C（以下简称OC）和 JavaScript（以下简称 JS）两门语言之间沟通的桥梁。作者从浏览器谈起，对 Webkit 内核的工作原理和组成进行了详细介绍，同时介绍了 JSCore 的组成部分：词法分析、语法分析和解释执行，后面还介绍了 iOS 中的 JSCore 的应用和一些机制，篇幅较长，但是干货满满，如果你对浏览器渲染引擎感兴趣，这篇文章值得一看~</p>\n<h3 id=\"H5-唤起-APP-指南-附开源唤端库\"><a href=\"#H5-唤起-APP-指南-附开源唤端库\" class=\"headerlink\" title=\"H5 唤起 APP 指南(附开源唤端库)\"></a><a href=\"https://juejin.im/post/5b7efb2ee51d45388b6af96c?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">H5 唤起 APP 指南(附开源唤端库)</a></h3><p>唤端的定义：引导已下载用户打开 APP，引导未下载用户下载 APP。对于用户留存来讲，唤起 App 是一种很重要的手段，这篇文章可以说把所有和唤端相关的知识点都介绍了，最后还给自己的工具打了一发广告。。</p>\n<h3 id=\"当···时发生了什么？\"><a href=\"#当···时发生了什么？\" class=\"headerlink\" title=\"当···时发生了什么？\"></a><a href=\"https://github.com/skyline75489/what-happens-when-zh_CN\" target=\"_blank\" rel=\"noopener\">当···时发生了什么？</a></h3><p>这个仓库试图回答一个古老的面试问题：当你在浏览器中输入 google.com 并且按下回车之后发生了什么？不过作者不再局限于平常的回答，而是想办法回答地尽可能具体，不遗漏任何细节。包括一些硬件知识也包含其中，我相信如果面试官问到你这道题，然后你的回答是这篇文章里面描述的话，面试官肯定会大吃一惊！</p>\n<h3 id=\"HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\"><a href=\"#HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\" class=\"headerlink\" title=\"HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事\"></a><a href=\"http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/\" target=\"_blank\" rel=\"noopener\">HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事</a></h3><p>作为一个经常和 web 打交道的程序员，了解这些协议是必须的，而这篇文章就向大家介绍了一下这些协议的区别和基本概念，文中不局限于前端知识，还包括一些运维，协议方面的知识。</p>\n<h3 id=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"><a href=\"#浏览器的工作原理：新式网络浏览器幕后揭秘\" class=\"headerlink\" title=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"></a><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality\" target=\"_blank\" rel=\"noopener\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></h3><p>这是一篇全面介绍 WebKit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数，并花了很多时间来研读网络浏览器的源代码。 网络浏览器很可能是使用最广的软件。在这篇入门文章中，作者将会介绍它们的幕后工作原理。我们会了解到，从在地址栏输入 <code>google.com</code> 直到在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。文章讲解的很详细，篇幅较长，需要比较大的耐心才能看下去。</p>\n<h3 id=\"HTTP-请求头中的-X-Forwarded-For\"><a href=\"#HTTP-请求头中的-X-Forwarded-For\" class=\"headerlink\" title=\"HTTP 请求头中的 X-Forwarded-For\"></a><a href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" target=\"_blank\" rel=\"noopener\">HTTP 请求头中的 X-Forwarded-For</a></h3><p>这篇文章对 HTTP 请求头中的 X-Forwarded-For（XFF）进行了详细的讲解，当我们需要取到用户的真实 IP 时，对这个请求头的理解和使用就显得尤为重要了，而从这个应用场景出发，作者还对请求头中的 x-real-ip 字段以及 Remote Address 进行了介绍。作者还有关于 HTTP 的其他文章，可以<a href=\"https://imququ.com/post/series.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看更多。</p>\n<h3 id=\"图解浏览器的基本工作原理\"><a href=\"#图解浏览器的基本工作原理\" class=\"headerlink\" title=\"图解浏览器的基本工作原理\"></a><a href=\"https://zhuanlan.zhihu.com/p/47407398\" target=\"_blank\" rel=\"noopener\">图解浏览器的基本工作原理</a></h3><p>可能每一个前端工程师都想要理解浏览器的工作原理。我们希望知道从在浏览器地址栏中输入 url 到页面展现的短短几秒内浏览器究竟做了什么；我们希望了解平时常常听说的各种代码优化方案是究竟为什么能起到优化的作用；我们希望更细化的了解浏览器的渲染流程。那么这篇文章就解答了上面的所有问题，文章较长，图文并茂。</p>\n<h3 id=\"Content-Security-Policy-An-Introduction\"><a href=\"#Content-Security-Policy-An-Introduction\" class=\"headerlink\" title=\"Content Security Policy - An Introduction\"></a><a href=\"https://scotthelme.co.uk/content-security-policy-an-introduction/\" target=\"_blank\" rel=\"noopener\">Content Security Policy - An Introduction</a></h3><p>一篇介绍 CSP 的文章，介绍了我们为什么需要 CSP，以及涉及到 CSP 的一些协议头等等相关信息。</p>\n<h3 id=\"认识-HTTP—-Cookie-和-Session-篇\"><a href=\"#认识-HTTP—-Cookie-和-Session-篇\" class=\"headerlink\" title=\"认识 HTTP—-Cookie 和 Session 篇\"></a><a href=\"https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892\" target=\"_blank\" rel=\"noopener\">认识 HTTP—-Cookie 和 Session 篇</a></h3><p>虽然内容大多来自《图解HTTP》一书，但是条理清楚分明，文笔很好，作者解释的很清晰。</p>\n<h3 id=\"图解基于-HTTPS-的-DNS\"><a href=\"#图解基于-HTTPS-的-DNS\" class=\"headerlink\" title=\"图解基于 HTTPS 的 DNS\"></a><a href=\"https://www.infoq.cn/article/a-cartoon-intro-to-dns-over-https\" target=\"_blank\" rel=\"noopener\">图解基于 HTTPS 的 DNS</a></h3><p>这是关于 dns 查询的过程讲解，配上插图和文字，可以对 dns 的查询过程有一个大概了解。</p>\n<h3 id=\"理解-WebKit-和-Chromium\"><a href=\"#理解-WebKit-和-Chromium\" class=\"headerlink\" title=\"理解 WebKit 和 Chromium\"></a><a href=\"https://blog.csdn.net/milado_nju/article/details/7216067\" target=\"_blank\" rel=\"noopener\">理解 WebKit 和 Chromium</a></h3><p>系统的描述了 Chrome 浏览器的信息，可以更加全面的了解 Chrome 浏览器，最给力的是有很多工具的使用介绍。</p>\n<h3 id=\"你真的了解回流和重绘吗\"><a href=\"#你真的了解回流和重绘吗\" class=\"headerlink\" title=\"你真的了解回流和重绘吗?\"></a><a href=\"https://github.com/chenjigeng/blog/blob/master/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E5%90%97.md\" target=\"_blank\" rel=\"noopener\">你真的了解回流和重绘吗?</a></h3><p>这篇文章主要讲了浏览器的渲染过程、浏览器的优化机制以及如何减少甚至避免回流和重绘，可以帮助读者更好的理解回流重绘。</p>\n<h3 id=\"这样使用GPU动画\"><a href=\"#这样使用GPU动画\" class=\"headerlink\" title=\"这样使用GPU动画\"></a><a href=\"https://www.w3cplus.com/animation/gpu-animation-doing-it-right.html\" target=\"_blank\" rel=\"noopener\">这样使用GPU动画</a></h3><p><a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">《GPU Animation: Doing It Right》</a>的译文，这篇文章能帮助你更好地了解浏览器如何使用GPU来渲染，这样你就可以创作能在所有设备上快速运行的令人印象深刻的网站。著作权归作者所有。</p>\n<h3 id=\"How-Blink-Works-中文译文\"><a href=\"#How-Blink-Works-中文译文\" class=\"headerlink\" title=\"How Blink Works 中文译文\"></a><a href=\"https://zhuanlan.zhihu.com/p/52918538\" target=\"_blank\" rel=\"noopener\">How Blink Works 中文译文</a></h3><p>Chromium 的工程师们写了两篇技术文章 <a href=\"https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit?pli=1#\" target=\"_blank\" rel=\"noopener\">How Blink Works</a> 和 <a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/how_cc_works.md\" target=\"_blank\" rel=\"noopener\">How cc Works</a>，分别介绍了 Chrome 浏览器内核内部的两个重要模块 Blink 和 cc 内部设计和实现的一些细节。对于想要了解 Chrome 内核内部实现的同学，这两篇文章提供了不错的入门指引。</p>\n","categories":[{"name":"推荐","path":"api/categories/推荐.json"}],"tags":[{"name":"浏览器","path":"api/tags/浏览器.json"}]}