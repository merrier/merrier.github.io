{"title":"JS 中的浅拷贝和深拷贝","slug":"JS中的浅拷贝和深拷贝","date":"2017-07-30T10:17:35.000Z","updated":"2019-12-16T11:30:39.057Z","comments":true,"path":"api/articles/JS中的浅拷贝和深拷贝.json","excerpt":null,"covers":null,"content":"<h2 id=\"浅拷贝-VS-深拷贝\"><a href=\"#浅拷贝-VS-深拷贝\" class=\"headerlink\" title=\"浅拷贝 VS 深拷贝\"></a>浅拷贝 VS 深拷贝</h2><p>浅拷贝和深拷贝也成为<strong>浅复制</strong>和<strong>深复制</strong>，是在很多编程语言中经常用到的方法。另外，本文只会涉及到 js 中<strong>复杂数据类型</strong>的拷贝问题（Object, Array 等），不讨论基本数据类型（null, undefined, string, number 和 boolean），因为基本数据类型不存在引用值的情况。浅拷贝和深拷贝都可以实现在已有对象的基础上再生一份的作用，但是对象的实例是存储在堆内存中然后通过一个<strong>引用值</strong>去操作对象，由此拷贝的时候就存在两种情况了：<strong>拷贝引用和拷贝实例</strong>，这也是浅拷贝和深拷贝的区别所在：浅拷贝：只会将对象的各个属性进行依次复制，<strong>并不会进行递归复制</strong>，而JS中存储对象都是存地址的，所以浅拷贝会导致 obj.arr 和 shallowObj.arr 指向同一块内存地址 深拷贝：不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法<strong>递归复制</strong>到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。 </p>\n<p>NOTE：如果对象比较大，层级也比较多，<strong>深拷贝会带来性能上的问题</strong>。在遇到需要采用深拷贝的场景时，可以考虑有没有其他替代的方案。在实际的应用场景中，也是浅拷贝更为常用。</p>\n<h2 id=\"浅拷贝的实现方式\"><a href=\"#浅拷贝的实现方式\" class=\"headerlink\" title=\"浅拷贝的实现方式\"></a>浅拷贝的实现方式</h2><p>从以上的对比可以总结出：浅拷贝就是简单的<strong>引用复制</strong>，有以下几种实现方式：</p>\n<h3 id=\"jQuery-extend-false-…\"><a href=\"#jQuery-extend-false-…\" class=\"headerlink\" title=\"jQuery.extend(false,…)\"></a>jQuery.extend(false,…)</h3><p>jQuery.extend 的第一个参数可以是布尔值，用来设置是否深度拷贝，设置为 false 或设置为空时就可以实现浅拷贝</p>\n<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><p>ES6 中的 Object.assign(…) 方法可用来实现浅拷贝–它会遍历一个或多个源对象的所有可枚举的自有键并把它们复制到目标对象，最后返回目标对象。</p>\n<p>NOTE：这里<a href=\"https://stackoverflow.com/questions/38345937/object-assign-vs-extend\" target=\"_blank\" rel=\"noopener\">有一篇stackoverflow的文章</a>，是关于jQuery.extend()和Object.assign()区别的，当然你也可以直接点击<a href=\"https://jsfiddle.net/on9x55ow/2/\" target=\"_blank\" rel=\"noopener\">这里</a>通过实例比较两者区别</p>\n<h3 id=\"Underscore-的-clone\"><a href=\"#Underscore-的-clone\" class=\"headerlink\" title=\"Underscore 的 _.clone()\"></a>Underscore 的 _.clone()</h3><p>在 Underscore 中有这样一个方法：<code>_.clone()</code>，这个方法实际上是一种浅拷贝，所有嵌套的对象和数组都是直接复制引用，但是它比直接赋值来得“深”一些，因为它创建了一个新的对象，可以看下面例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">z</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = _.clone(x);</span><br><span class=\"line\"></span><br><span class=\"line\">y === x       <span class=\"comment\">// false</span></span><br><span class=\"line\">y.b === x.b   <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.b.z = <span class=\"number\">100</span>;</span><br><span class=\"line\">y.b.z         <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-的-slice-和-concat\"><a href=\"#Array-的-slice-和-concat\" class=\"headerlink\" title=\"Array 的 slice 和 concat\"></a>Array 的 slice 和 concat</h3><p>Array 的 slice 和 concat 方法都会<strong>返回一个新的数组实例</strong>，但是这两个方法对于数组中的对象元素却没有执行深拷贝，而只是复制了引用。（和上面的 _.clone() 类似）</p>\n<h3 id=\"for…in…\"><a href=\"#for…in…\" class=\"headerlink\" title=\"for…in…\"></a>for…in…</h3><p>利用 for…in… 遍历对象就可以实现浅拷贝，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">p,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">    c = c||&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.hasOwnProperty(i))&#123;</span><br><span class=\"line\">            c\\[i\\] = p\\[i\\];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝的实现方式\"><a href=\"#深拷贝的实现方式\" class=\"headerlink\" title=\"深拷贝的实现方式\"></a>深拷贝的实现方式</h2><p>浅拷贝的实现方式如上所述，浅拷贝适合用在开发 jQuery 插件或者 redux 中返回 new state，而我们有时需要的是深拷贝，就是<strong>保证拷贝的对象与源对象完全隔离</strong>：</p>\n<h3 id=\"jQuery-extend-true-…\"><a href=\"#jQuery-extend-true-…\" class=\"headerlink\" title=\"jQuery.extend(true,…)\"></a>jQuery.extend(true,…)</h3><p>将 jQuery.extend 的第一个参数设置为 true 即可实现深度拷贝。但是缺点是<strong>无法深拷贝 JSON 对象以外的对象</strong></p>\n<p>NOTE：jQuery 中有一个叫做 $.clone() 的方法，可是它并不是用于一般的 JS 对象的拷贝，而是用于 DOM 对象的克隆，所以不要被它的名字骗到~</p>\n<h3 id=\"借助-JSON-全局对象\"><a href=\"#借助-JSON-全局对象\" class=\"headerlink\" title=\"借助 JSON 全局对象\"></a>借助 JSON 全局对象</h3><p>相比于使用插件，使用 JSON 全局对象的 <code>parse</code> 和 <code>stringify</code> 方法来实现深复制也算是一个简单讨巧的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = jsonClone(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>然而这种方法<strong>有一些隐藏的坑</strong>：</p>\n<ul>\n<li>只能处理能够被json直接表示的数据结构：Number, String, Boolean, Array, 扁平对象；而对于正则表达式、Date 和 Function这种特殊的 Object 就无能为力了</li>\n<li>如果对象中存在循环引用的情况，这个方法也无法正确处理</li>\n</ul>\n<h3 id=\"lodash-的-clone-cloneDeep\"><a href=\"#lodash-的-clone-cloneDeep\" class=\"headerlink\" title=\"lodash 的 _.clone() / _.cloneDeep()\"></a>lodash 的 _.clone() / _.cloneDeep()</h3><p>在 lodash 中关于复制的方法有两个，分别是 <code>_.clone()</code> 和 <code>_.cloneDeep()</code>。其中 <code>_.clone(obj, true)</code> 等价于 <code>_.cloneDeep(obj)</code>。看了源码会发现，lodash 中与深拷贝相关的代码有上百行，而 jQuery 却只有 60 多行，这是为什么呢？原因是 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对<strong>存在环的对象</strong>的处理也是非常出色的。 所以，loadsh 在深拷贝上下了很多功夫，是一个很完美同时更拥抱未来的一个第三方库</p>\n<h2 id=\"各个深拷贝方法的比较\"><a href=\"#各个深拷贝方法的比较\" class=\"headerlink\" title=\"各个深拷贝方法的比较\"></a>各个深拷贝方法的比较</h2><p><a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074\" target=\"_blank\" rel=\"noopener\">stackoverflow 上有一个提问</a>，讨论了 JS 中各个深拷贝方法的效率问题，然后有位大牛借助 jsben 对各个深拷贝方法进行了<a href=\"http://jsben.ch/bWfk9\" target=\"_blank\" rel=\"noopener\">实例测试</a>，强烈推荐大家看一下这个提问下的讨论以及实例测试的结果，相信看完后你对 JS 中的深拷贝会有更深刻的理解~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/tracylin/p/5346314.html\" target=\"_blank\" rel=\"noopener\">也来谈一谈js的浅复制和深复制</a></li>\n<li><a href=\"https://www.zhihu.com/question/23031215\" target=\"_blank\" rel=\"noopener\">javascript中的深拷贝和浅拷贝？</a></li>\n<li><a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></li>\n</ul>\n","more":"<h2 id=\"浅拷贝-VS-深拷贝\"><a href=\"#浅拷贝-VS-深拷贝\" class=\"headerlink\" title=\"浅拷贝 VS 深拷贝\"></a>浅拷贝 VS 深拷贝</h2><p>浅拷贝和深拷贝也成为<strong>浅复制</strong>和<strong>深复制</strong>，是在很多编程语言中经常用到的方法。另外，本文只会涉及到 js 中<strong>复杂数据类型</strong>的拷贝问题（Object, Array 等），不讨论基本数据类型（null, undefined, string, number 和 boolean），因为基本数据类型不存在引用值的情况。浅拷贝和深拷贝都可以实现在已有对象的基础上再生一份的作用，但是对象的实例是存储在堆内存中然后通过一个<strong>引用值</strong>去操作对象，由此拷贝的时候就存在两种情况了：<strong>拷贝引用和拷贝实例</strong>，这也是浅拷贝和深拷贝的区别所在：浅拷贝：只会将对象的各个属性进行依次复制，<strong>并不会进行递归复制</strong>，而JS中存储对象都是存地址的，所以浅拷贝会导致 obj.arr 和 shallowObj.arr 指向同一块内存地址 深拷贝：不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法<strong>递归复制</strong>到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。 </p>\n<p>NOTE：如果对象比较大，层级也比较多，<strong>深拷贝会带来性能上的问题</strong>。在遇到需要采用深拷贝的场景时，可以考虑有没有其他替代的方案。在实际的应用场景中，也是浅拷贝更为常用。</p>\n<h2 id=\"浅拷贝的实现方式\"><a href=\"#浅拷贝的实现方式\" class=\"headerlink\" title=\"浅拷贝的实现方式\"></a>浅拷贝的实现方式</h2><p>从以上的对比可以总结出：浅拷贝就是简单的<strong>引用复制</strong>，有以下几种实现方式：</p>\n<h3 id=\"jQuery-extend-false-…\"><a href=\"#jQuery-extend-false-…\" class=\"headerlink\" title=\"jQuery.extend(false,…)\"></a>jQuery.extend(false,…)</h3><p>jQuery.extend 的第一个参数可以是布尔值，用来设置是否深度拷贝，设置为 false 或设置为空时就可以实现浅拷贝</p>\n<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><p>ES6 中的 Object.assign(…) 方法可用来实现浅拷贝–它会遍历一个或多个源对象的所有可枚举的自有键并把它们复制到目标对象，最后返回目标对象。</p>\n<p>NOTE：这里<a href=\"https://stackoverflow.com/questions/38345937/object-assign-vs-extend\" target=\"_blank\" rel=\"noopener\">有一篇stackoverflow的文章</a>，是关于jQuery.extend()和Object.assign()区别的，当然你也可以直接点击<a href=\"https://jsfiddle.net/on9x55ow/2/\" target=\"_blank\" rel=\"noopener\">这里</a>通过实例比较两者区别</p>\n<h3 id=\"Underscore-的-clone\"><a href=\"#Underscore-的-clone\" class=\"headerlink\" title=\"Underscore 的 _.clone()\"></a>Underscore 的 _.clone()</h3><p>在 Underscore 中有这样一个方法：<code>_.clone()</code>，这个方法实际上是一种浅拷贝，所有嵌套的对象和数组都是直接复制引用，但是它比直接赋值来得“深”一些，因为它创建了一个新的对象，可以看下面例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">z</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = _.clone(x);</span><br><span class=\"line\"></span><br><span class=\"line\">y === x       <span class=\"comment\">// false</span></span><br><span class=\"line\">y.b === x.b   <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.b.z = <span class=\"number\">100</span>;</span><br><span class=\"line\">y.b.z         <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-的-slice-和-concat\"><a href=\"#Array-的-slice-和-concat\" class=\"headerlink\" title=\"Array 的 slice 和 concat\"></a>Array 的 slice 和 concat</h3><p>Array 的 slice 和 concat 方法都会<strong>返回一个新的数组实例</strong>，但是这两个方法对于数组中的对象元素却没有执行深拷贝，而只是复制了引用。（和上面的 _.clone() 类似）</p>\n<h3 id=\"for…in…\"><a href=\"#for…in…\" class=\"headerlink\" title=\"for…in…\"></a>for…in…</h3><p>利用 for…in… 遍历对象就可以实现浅拷贝，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">p,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">    c = c||&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.hasOwnProperty(i))&#123;</span><br><span class=\"line\">            c\\[i\\] = p\\[i\\];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝的实现方式\"><a href=\"#深拷贝的实现方式\" class=\"headerlink\" title=\"深拷贝的实现方式\"></a>深拷贝的实现方式</h2><p>浅拷贝的实现方式如上所述，浅拷贝适合用在开发 jQuery 插件或者 redux 中返回 new state，而我们有时需要的是深拷贝，就是<strong>保证拷贝的对象与源对象完全隔离</strong>：</p>\n<h3 id=\"jQuery-extend-true-…\"><a href=\"#jQuery-extend-true-…\" class=\"headerlink\" title=\"jQuery.extend(true,…)\"></a>jQuery.extend(true,…)</h3><p>将 jQuery.extend 的第一个参数设置为 true 即可实现深度拷贝。但是缺点是<strong>无法深拷贝 JSON 对象以外的对象</strong></p>\n<p>NOTE：jQuery 中有一个叫做 $.clone() 的方法，可是它并不是用于一般的 JS 对象的拷贝，而是用于 DOM 对象的克隆，所以不要被它的名字骗到~</p>\n<h3 id=\"借助-JSON-全局对象\"><a href=\"#借助-JSON-全局对象\" class=\"headerlink\" title=\"借助 JSON 全局对象\"></a>借助 JSON 全局对象</h3><p>相比于使用插件，使用 JSON 全局对象的 <code>parse</code> 和 <code>stringify</code> 方法来实现深复制也算是一个简单讨巧的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = jsonClone(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>然而这种方法<strong>有一些隐藏的坑</strong>：</p>\n<ul>\n<li>只能处理能够被json直接表示的数据结构：Number, String, Boolean, Array, 扁平对象；而对于正则表达式、Date 和 Function这种特殊的 Object 就无能为力了</li>\n<li>如果对象中存在循环引用的情况，这个方法也无法正确处理</li>\n</ul>\n<h3 id=\"lodash-的-clone-cloneDeep\"><a href=\"#lodash-的-clone-cloneDeep\" class=\"headerlink\" title=\"lodash 的 _.clone() / _.cloneDeep()\"></a>lodash 的 _.clone() / _.cloneDeep()</h3><p>在 lodash 中关于复制的方法有两个，分别是 <code>_.clone()</code> 和 <code>_.cloneDeep()</code>。其中 <code>_.clone(obj, true)</code> 等价于 <code>_.cloneDeep(obj)</code>。看了源码会发现，lodash 中与深拷贝相关的代码有上百行，而 jQuery 却只有 60 多行，这是为什么呢？原因是 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对<strong>存在环的对象</strong>的处理也是非常出色的。 所以，loadsh 在深拷贝上下了很多功夫，是一个很完美同时更拥抱未来的一个第三方库</p>\n<h2 id=\"各个深拷贝方法的比较\"><a href=\"#各个深拷贝方法的比较\" class=\"headerlink\" title=\"各个深拷贝方法的比较\"></a>各个深拷贝方法的比较</h2><p><a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074\" target=\"_blank\" rel=\"noopener\">stackoverflow 上有一个提问</a>，讨论了 JS 中各个深拷贝方法的效率问题，然后有位大牛借助 jsben 对各个深拷贝方法进行了<a href=\"http://jsben.ch/bWfk9\" target=\"_blank\" rel=\"noopener\">实例测试</a>，强烈推荐大家看一下这个提问下的讨论以及实例测试的结果，相信看完后你对 JS 中的深拷贝会有更深刻的理解~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/tracylin/p/5346314.html\" target=\"_blank\" rel=\"noopener\">也来谈一谈js的浅复制和深复制</a></li>\n<li><a href=\"https://www.zhihu.com/question/23031215\" target=\"_blank\" rel=\"noopener\">javascript中的深拷贝和浅拷贝？</a></li>\n<li><a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></li>\n</ul>\n","categories":[{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"数据结构","path":"api/tags/数据结构.json"}]}