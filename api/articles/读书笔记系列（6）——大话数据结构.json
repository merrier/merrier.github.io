{"title":"读书笔记系列（6）——大话数据结构","slug":"读书笔记系列（6）——大话数据结构","date":"2017-04-08T12:50:00.000Z","updated":"2019-02-27T06:40:32.630Z","comments":true,"path":"api/articles/读书笔记系列（6）——大话数据结构.json","excerpt":null,"covers":["/images/hexo_post_147.png","/images/hexo_post_148.png","/images/hexo_post_149.png","/images/hexo_post_150.png","/images/hexo_post_151.png","/images/hexo_post_152.png","/images/hexo_post_153.png","/images/hexo_post_154.png","/images/hexo_post_155.png","/images/hexo_post_156.png","/images/hexo_post_295.png","/images/hexo_post_158.png","/images/hexo_post_159.png","/images/hexo_post_160.png","/images/hexo_post_296.png","/images/hexo_post_162.png","/images/hexo_post_163.png","/images/hexo_post_164.png","/images/hexo_post_165.png","/images/hexo_post_166.png","/images/hexo_post_167.png","/images/hexo_post_168.png","/images/hexo_post_169.png","/images/hexo_post_170.png","/images/hexo_post_171.png","/images/hexo_post_172.png","/images/hexo_post_173.png","/images/hexo_post_174.png","/images/hexo_post_175.png","/images/hexo_post_176.png","/images/hexo_post_177.png","/images/hexo_post_178.png","/images/hexo_post_179.png","/images/hexo_post_180.png","/images/hexo_post_181.png","/images/hexo_post_182.png","/images/hexo_post_183.png","/images/hexo_post_184.png","/images/hexo_post_185.png","/images/hexo_post_186.png","/images/hexo_post_187.png","/images/hexo_post_188.png"],"content":"<p>这本书我是在网上下载的电子版，所以可能会有一些错别字，但是无伤大雅；《大话数据结构》被誉为程序员面试必读书籍，我大概用了 3 天的时间详读了一遍，感觉作者的文笔很好，而且很擅长通过生活中的小故事总结相关知识和算法思路，对于计算机初级童鞋来说是一本很好的数据结构入门读物，而且作者对于代码的讲解很详尽，接近逐行解释了，和其他数据结构的书籍形成了鲜明的对比，总体评价五星吧；不过我是在刷完 Leetcode 的 easy 题才看的这本书，感觉先看这本书再刷题的话会好很多</p>\n<h2 id=\"一、数据结构与算法\"><a href=\"#一、数据结构与算法\" class=\"headerlink\" title=\"一、数据结构与算法\"></a>一、数据结构与算法</h2><h3 id=\"1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子\"><a href=\"#1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子\" class=\"headerlink\" title=\"1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子\"></a>1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子</h3><h3 id=\"2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科\"><a href=\"#2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科\" class=\"headerlink\" title=\"2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科\"></a>2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科</h3><h3 id=\"3、数据元素的存储结构形式有两种：顺序存储和链式存储\"><a href=\"#3、数据元素的存储结构形式有两种：顺序存储和链式存储\" class=\"headerlink\" title=\"3、数据元素的存储结构形式有两种：顺序存储和链式存储\"></a>3、数据元素的存储结构形式有两种：顺序存储和链式存储</h3><ul>\n<li>顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的（谁也别插谁的队）</li>\n<li>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的（需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置）</li>\n</ul>\n<h3 id=\"4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性\"><a href=\"#4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性\" class=\"headerlink\" title=\"4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性\"></a>4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性</h3><h3 id=\"5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征\"><a href=\"#5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征\" class=\"headerlink\" title=\"5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征\"></a>5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征</h3><h3 id=\"6、推导时间复杂度大-O-阶方法：\"><a href=\"#6、推导时间复杂度大-O-阶方法：\" class=\"headerlink\" title=\"6、推导时间复杂度大 O 阶方法：\"></a>6、推导时间复杂度大 O 阶方法：</h3><ol>\n<li>用常数 1 取代运行时间中的所有加法常数</li>\n<li>在修改后的运行次数函数中，只保留最高阶项</li>\n<li>如果最高阶项存在且不是1，则去除与这个项相乘的常数</li>\n</ol>\n<h3 id=\"7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数\"><a href=\"#7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数\" class=\"headerlink\" title=\"7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数\"></a>7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数</h3><h3 id=\"8、常见的时间复杂度所耗费的时间：\"><a href=\"#8、常见的时间复杂度所耗费的时间：\" class=\"headerlink\" title=\"8、常见的时间复杂度所耗费的时间：\"></a>8、常见的时间复杂度所耗费的时间：</h3><div align=\"center\"><img src=\"/images/hexo_post_147.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。\"><a href=\"#9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。\" class=\"headerlink\" title=\"9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。\"></a>9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。</h3><p>在应用中，这是一种最重要的需求，通常，除非特别制定，我们提到的运行时间都是最坏情况的运行时间 平均运行时间是所有情况中最有意义的，因为它是期望的运行时间</p>\n<h3 id=\"10、算法的空间复杂度\"><a href=\"#10、算法的空间复杂度\" class=\"headerlink\" title=\"10、算法的空间复杂度\"></a>10、算法的空间复杂度</h3><p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数</p>\n<h2 id=\"二、线性表\"><a href=\"#二、线性表\" class=\"headerlink\" title=\"二、线性表\"></a>二、线性表</h2><h3 id=\"1、描述顺序存储结构需要三个属性：\"><a href=\"#1、描述顺序存储结构需要三个属性：\" class=\"headerlink\" title=\"1、描述顺序存储结构需要三个属性：\"></a>1、描述顺序存储结构需要三个属性：</h3><ul>\n<li>存储空间的起始位置：数组 data，它的存储位置就是存储空间的存储位置</li>\n<li>线性表的最大存储容量：数组长度 MaxSize</li>\n<li>线性表的当前长度：length</li>\n</ul>\n<h3 id=\"2、插入算法的思路：\"><a href=\"#2、插入算法的思路：\" class=\"headerlink\" title=\"2、插入算法的思路：\"></a>2、插入算法的思路：</h3><ol>\n<li>如果插入位置不合理，抛出异常</li>\n<li>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量</li>\n<li>从最后一个元素开始向前遍历到第 i 个位置，分别将它们都向后移动一个位置</li>\n<li>将要插入元素填入位置 i 处</li>\n<li>表长加 1</li>\n</ol>\n<h3 id=\"3、删除算法的思路：\"><a href=\"#3、删除算法的思路：\" class=\"headerlink\" title=\"3、删除算法的思路：\"></a>3、删除算法的思路：</h3><ol>\n<li>如果删除位置不合理，抛出异常</li>\n<li>取出删除元素</li>\n<li>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置</li>\n<li>表长减 1</li>\n</ol>\n<h3 id=\"4、线性表的顺序存储结构的优缺点：\"><a href=\"#4、线性表的顺序存储结构的优缺点：\" class=\"headerlink\" title=\"4、线性表的顺序存储结构的优缺点：\"></a>4、线性表的顺序存储结构的优缺点：</h3><p><strong>优点：</strong></p>\n<ul>\n<li>无须为表示表中元素之间的逻辑关系而增加额外的存储空间</li>\n<li>可以快速地存取表中任一位置的元素</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>插入和删除操作需要移动大量元素</li>\n<li>当线性表长度变化较大时，难以确定存储空间的容量</li>\n<li>造成存储空间的“碎片”</li>\n</ul>\n<h3 id=\"5、单链表\"><a href=\"#5、单链表\" class=\"headerlink\" title=\"5、单链表\"></a>5、单链表</h3><p>n 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。单链表正是通过每个结点的指针域将线性表的数据元素按其逻辑次序链接在一起</p>\n<div align=\"center\"><img src=\"/images/hexo_post_148.png\" alt=\"\" width=\"400\"></div>\n\n<p>有时，为了更加方便地对链表进行操作，会在单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息，也可以存储如线性表的长度等附加信息，头结点的指针域存储指向第一个结点的指针：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_149.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"6、头指针与头结点的异同\"><a href=\"#6、头指针与头结点的异同\" class=\"headerlink\" title=\"6、头指针与头结点的异同\"></a>6、头指针与头结点的异同</h3><h4 id=\"头指针\"><a href=\"#头指针\" class=\"headerlink\" title=\"头指针\"></a>头指针</h4><ul>\n<li>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</li>\n<li>头指针具有标识作用，所以常用头指针冠以链表的名字</li>\n<li>无论链表是否为空，头指针均不为空。头指针式链表的必要元素</li>\n</ul>\n<h4 id=\"头结点\"><a href=\"#头结点\" class=\"headerlink\" title=\"头结点\"></a>头结点</h4><ul>\n<li>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）</li>\n<li>有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了</li>\n<li>头结点不一定是链表必须要素</li>\n</ul>\n<h3 id=\"7、获取链表第-i-个数据的算法思路\"><a href=\"#7、获取链表第-i-个数据的算法思路\" class=\"headerlink\" title=\"7、获取链表第 i 个数据的算法思路\"></a>7、获取链表第 i 个数据的算法思路</h3><ol>\n<li>声明一个结点 p 指向链表第一个结点，初始化 j 从 1 开始</li>\n<li>当 j &lt; i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1</li>\n<li>若到链表末尾 p 为空，则说明第 i 个元素不存在</li>\n<li>否则查找成功，返回结点 p 的数据</li>\n</ol>\n<h3 id=\"8、单链表第-i-个数据插入结点的算法思路\"><a href=\"#8、单链表第-i-个数据插入结点的算法思路\" class=\"headerlink\" title=\"8、单链表第 i 个数据插入结点的算法思路\"></a>8、单链表第 i 个数据插入结点的算法思路</h3><ol>\n<li>声明一结点 p 指向链表第一个结点，初始化 j 从 1 开始</li>\n<li>当 j &lt; i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1</li>\n<li>若到链表末尾 p 为空，则说明第 i 个元素不存在</li>\n<li>否则查找成功，在系统中生成一个空结点 s</li>\n<li>将数据元素 e 赋值给 s -&gt; data</li>\n<li>单链表的插入标准语句 s-&gt;next=p-&gt;next;p-&gt;next=s</li>\n<li>返回成功</li>\n</ol>\n<h3 id=\"9、单链表第-i-个数据删除结点的算法思路\"><a href=\"#9、单链表第-i-个数据删除结点的算法思路\" class=\"headerlink\" title=\"9、单链表第 i 个数据删除结点的算法思路\"></a>9、单链表第 i 个数据删除结点的算法思路</h3><ol>\n<li>声明一结点 p 指向链表第一个结点，初始化 j 从 1 开始</li>\n<li>当 j &lt; i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1</li>\n<li>若到链表末尾 p 为空，则说明第 i 个元素不存在</li>\n<li>否则查找成功，\b将欲删除的结点 p -&gt; next 赋值给 q</li>\n<li>单链表的删除标准语句 p-&gt;next=q-&gt;next</li>\n<li>将 q 结点中的数据赋值给 e，作为返回</li>\n<li>释放 q 结点</li>\n<li>返回成功</li>\n</ol>\n<h3 id=\"10、单链表整表创建的算法思路\"><a href=\"#10、单链表整表创建的算法思路\" class=\"headerlink\" title=\"10、单链表整表创建的算法思路\"></a>10、单链表整表创建的算法思路</h3><ol>\n<li>声明一结点 p 和计数器变量 i</li>\n<li>初始化一空链表 L</li>\n<li>让 L 的头结点的指针指向 NULL，即建立一个带头结点的单链表</li>\n<li>循环：</li>\n</ol>\n<ul>\n<li>生成一新结点赋值给 p</li>\n<li>随机生成一数字赋值给 p 的数据域 p-&gt;data</li>\n<li>将 p 插入到头结点与前一新节点之间</li>\n</ul>\n<h3 id=\"11、单链表的整表删除\"><a href=\"#11、单链表的整表删除\" class=\"headerlink\" title=\"11、单链表的整表删除\"></a>11、单链表的整表删除</h3><ol>\n<li>声明一结点 p 和 q</li>\n<li>将第一个结点赋值给 p</li>\n<li>循环：</li>\n</ol>\n<ul>\n<li>将下一结点赋值给 q</li>\n<li>释放 p</li>\n<li>将 q 赋值给 p</li>\n</ul>\n<h3 id=\"12、单链表结构和顺序存储结构做对比\"><a href=\"#12、单链表结构和顺序存储结构做对比\" class=\"headerlink\" title=\"12、单链表结构和顺序存储结构做对比\"></a>12、单链表结构和顺序存储结构做对比</h3><div align=\"center\"><img src=\"/images/hexo_post_150.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"13、所谓的成功男人就是-3-岁时不尿裤子，5-岁能自己吃饭……80-岁能自己吃饭，90-岁能不尿裤子\"><a href=\"#13、所谓的成功男人就是-3-岁时不尿裤子，5-岁能自己吃饭……80-岁能自己吃饭，90-岁能不尿裤子\" class=\"headerlink\" title=\"13、所谓的成功男人就是 3 岁时不尿裤子，5 岁能自己吃饭……80 岁能自己吃饭，90 岁能不尿裤子\"></a>13、所谓的成功男人就是 3 岁时不尿裤子，5 岁能自己吃饭……80 岁能自己吃饭，90 岁能不尿裤子</h3><h3 id=\"14、循环链表\"><a href=\"#14、循环链表\" class=\"headerlink\" title=\"14、循环链表\"></a>14、循环链表</h3><p>将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表（circular linked list）:</p>\n<div align=\"center\"><img src=\"/images/hexo_post_151.png\" alt=\"\" width=\"500\"></div>\n\n<p>循环链表和单链表的主要差异就在于循环的判断条件上，原来是判断 p-&gt;next 是否为空，现在则是 <strong>p-&gt;next 不等于头结点，则循环未结束</strong></p>\n<h3 id=\"15、合并两个循环链表\"><a href=\"#15、合并两个循环链表\" class=\"headerlink\" title=\"15、合并两个循环链表\"></a>15、合并两个循环链表</h3><div align=\"center\"><img src=\"/images/hexo_post_152.png\" alt=\"\" width=\"500\"></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=rearA-&gt;next;                   /* 保存A表的头结点，即① */</span><br><span class=\"line\">rearA-&gt;next=rearB-&gt;next-&gt;next;   /* 将本是指向B表的第一个结点（不是头结点） */</span><br><span class=\"line\">                                 /* 赋值给rearA-&gt;next，即 ②*/</span><br><span class=\"line\">rearB-&gt;next=p;                   /* 将原A表的头结点赋值给rearB-&gt;next，即③ */</span><br><span class=\"line\">free(p);                         /* 释放p */</span><br></pre></td></tr></table></figure>\n<h3 id=\"16、双向链表\"><a href=\"#16、双向链表\" class=\"headerlink\" title=\"16、双向链表\"></a>16、双向链表</h3><p>双向链表（double linked list）是在单链表的每个结点中，再设置一个指向其前驱结点的指针域</p>\n<h3 id=\"17、双向链表的插入\"><a href=\"#17、双向链表的插入\" class=\"headerlink\" title=\"17、双向链表的插入\"></a>17、双向链表的插入</h3><p>假设存储元素 e 的结点为 s，要实现将结点 s 插入到结点 p 和 p-&gt;next 之间需要下面几步：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_153.png\" alt=\"\" width=\"400\"></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s-&gt;prior=p;           /* 把 p 赋值给 s 的前驱，如图中① */</span><br><span class=\"line\">s-&gt;next=p-&gt;next;      /* 把 p-&gt;next 赋值给 s 的后继，如图中② */</span><br><span class=\"line\">p-&gt;next-&gt;prior=s;     /* 把 s 赋值给 p-&gt;next 的前驱，如图中③ */</span><br><span class=\"line\">p-&gt;next=s;            /* 把 s 赋值给 p 的后继，如图中④ */</span><br></pre></td></tr></table></figure>\n<h3 id=\"18、线性表的总结\"><a href=\"#18、线性表的总结\" class=\"headerlink\" title=\"18、线性表的总结\"></a>18、线性表的总结</h3><div align=\"center\"><img src=\"/images/hexo_post_154.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"三、栈与队列\"><a href=\"#三、栈与队列\" class=\"headerlink\" title=\"三、栈与队列\"></a>三、栈与队列</h2><h3 id=\"1、栈的定义\"><a href=\"#1、栈的定义\" class=\"headerlink\" title=\"1、栈的定义\"></a>1、栈的定义</h3><p>栈（stack）是限定<strong>仅在表尾进行插入和删除操作</strong>的线性表，我们把允许插入和删除的一端称为<strong>栈顶</strong>（top），另一端称为<strong>栈底</strong>（bottom），不含任何数据元素的栈称为<strong>空栈</strong></p>\n<h3 id=\"2、当栈存在一个元素时，top-等于-0，因此通常把空栈的判定条件定位-top-等于-1（索引值从-0-开始）\"><a href=\"#2、当栈存在一个元素时，top-等于-0，因此通常把空栈的判定条件定位-top-等于-1（索引值从-0-开始）\" class=\"headerlink\" title=\"2、当栈存在一个元素时，top 等于 0，因此通常把空栈的判定条件定位 top 等于 -1（索引值从 0 开始）\"></a>2、当栈存在一个元素时，top 等于 0，因此通常把空栈的判定条件定位 top 等于 -1（索引值从 0 开始）</h3><h3 id=\"3、用一个数组来存储两个栈\"><a href=\"#3、用一个数组来存储两个栈\" class=\"headerlink\" title=\"3、用一个数组来存储两个栈\"></a>3、用一个数组来存储两个栈</h3><div align=\"center\"><img src=\"/images/hexo_post_155.png\" alt=\"\" width=\"700\"></div>\n\n<p>数组有两个端点，两个栈有两个栈底，让一个栈的栈底为数组的始端，即下标为 0 处，另一个栈为栈的末端，即下标为数组长度 n - 1 处。这样，如果两个栈增加元素，就是两端点向中间延伸</p>\n<p><strong>两个栈见面之时，也就是两个指针之间相差 1 时，即 top1 + 1 == top2为栈满</strong></p>\n<h3 id=\"4、递归定义\"><a href=\"#4、递归定义\" class=\"headerlink\" title=\"4、递归定义\"></a>4、递归定义</h3><p>一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做递归函数；每个递归定义必须至少有一个条件，满足时递归不再进行，即不再引用自身而是返回值退出</p>\n<h3 id=\"5、队列定义\"><a href=\"#5、队列定义\" class=\"headerlink\" title=\"5、队列定义\"></a>5、队列定义</h3><p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表；允许插入的一端称为队尾，允许删除的一端称为队头</p>\n<h3 id=\"6、队列的链式存储结构\"><a href=\"#6、队列的链式存储结构\" class=\"headerlink\" title=\"6、队列的链式存储结构\"></a>6、队列的链式存储结构</h3><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列；队头指针指向链队列的头结点，而队尾指针指向终端结点：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_156.png\" alt=\"\" width=\"400\"></div>\n\n<p>空队列时，front 和 rear 都指向头结点</p>\n<h3 id=\"7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列\"><a href=\"#7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列\" class=\"headerlink\" title=\"7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列\"></a>7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列</h3><h3 id=\"8、栈和队列的存储结构\"><a href=\"#8、栈和队列的存储结构\" class=\"headerlink\" title=\"8、栈和队列的存储结构\"></a>8、栈和队列的存储结构</h3><div align=\"center\"><img src=\"/images/hexo_post_295.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"9、关于栈和队列的人生感悟\"><a href=\"#9、关于栈和队列的人生感悟\" class=\"headerlink\" title=\"9、关于栈和队列的人生感悟\"></a>9、关于栈和队列的人生感悟</h3><p>人生，就像是一个很大的栈演变。出生时你赤条条地来到人世，慢慢地长大，渐渐地变老，最终还得赤条条地离开世间。<br>人生，又仿佛是一天一天小小的栈重现。童年父母每天抱你不断地进出家门，壮年你每天奔波于家与事业之间，老年你每天独自蹒跚于养老院的门里屋前。<br>人生，更需要有进栈出栈精神的体现。在哪里跌倒，就应该在哪里爬起来。无论陷入何等困境，只要抬头能仰望蓝天，就有希望，不断进取，你就可以让出头之日重现。困难不会永远存在，强者才能勇往直前。<br>人生，其实就是一个大大的队列演变。无知童年、快乐少年，稚傲青年，成熟中年，安逸晚年。<br>人生，又是一个又一个小小的队列重现。春夏秋冬轮回年年，早中晚夜循环天天。变化的是时间，不变的是你对未来执着的信念。<br>人生，更需要有队列精神的体现。南极到北极，不过是南纬90度到北纬90度的队列，如果你中途犹豫，临时转向，也许你就只能和企鹅相伴永远。可事实上，无论哪个方向，只要你坚持到底，你都可以到达终点。</p>\n<h2 id=\"四、串（字符串）\"><a href=\"#四、串（字符串）\" class=\"headerlink\" title=\"四、串（字符串）\"></a>四、串（字符串）</h2><h3 id=\"1、一首回文诗（李禺《两相思》）\"><a href=\"#1、一首回文诗（李禺《两相思》）\" class=\"headerlink\" title=\"1、一首回文诗（李禺《两相思》）\"></a>1、一首回文诗（李禺《两相思》）</h3><blockquote>\n<p>枯眼望遥山隔水，<br>往来曾见几心知？<br>壶空怕酌一杯酒，<br>笔下难成和韵诗。<br>途路阻人离别久，<br>讯音无雁寄回迟。<br>孤灯夜守长寥寂，<br>夫忆妻兮父忆儿。</p>\n</blockquote>\n<p>更多回文诗可以<a href=\"http://baike.baidu.com/link?url=VNTgFjBN0q2gekPkKqes9MWMtdOqf8_THZ-MuEh3vJTBKi88oJmvcrHNAkswt_oKY5pR58CL8C0CPKEHFfLFQpb6ZOQPU3W4G-P9z9gv6P2D4cO1CxwgyrBQNUg3fGfu\" target=\"_blank\" rel=\"noopener\">戳我一下</a></p>\n<h3 id=\"2、英语单词中的字符串\"><a href=\"#2、英语单词中的字符串\" class=\"headerlink\" title=\"2、英语单词中的字符串\"></a>2、英语单词中的字符串</h3><p>即使是 lover 也有个 over，即使是 friend 也有个 end，即使是 believe 也有个lie</p>\n<h3 id=\"3、关于字符串的一些概念\"><a href=\"#3、关于字符串的一些概念\" class=\"headerlink\" title=\"3、关于字符串的一些概念\"></a>3、关于字符串的一些概念</h3><p><strong>空格串</strong>：是只包含空格的串，空格串是有内容有长度的，而且可以不止一个空格<br>子串与主串：串中任意个数的连续字符组成的子序列称为该串的<strong>子串</strong>，相应地，包含子串的串称为<strong>主串</strong><br><strong>子串在主串中的位置</strong>：就是子串的第一个字符在主串中的序号</p>\n<h3 id=\"4、Unicode-和-ASCII-编码\"><a href=\"#4、Unicode-和-ASCII-编码\" class=\"headerlink\" title=\"4、Unicode 和 ASCII 编码\"></a>4、Unicode 和 ASCII 编码</h3><p>\b计算机中的常用字符是使用标准的 ASCII 编码，更准确一点，由 7 位二进制数表示一个字符，总共可以表示 128 个字符。后来发现一些特殊符号的出现，128 个不够用，于是扩展 ASCII 码由 8 位二进制数表示一个字符，总共可以表示 256 个字符；可是换做全世界估计要有成百上千种语言与文字，显然这 256 个字符是不够的，因此后来就有了 Unicode 编码，比较常用的是由 16 位的二进制数表示一个字符，这样总共就可以表示 216 个字符，约是 65 万多个字符，足够表示世界上所有语言的所有字符了。当然，为了和 ASCII 码兼容，Unicode 的前 256 个字符与 ASCII 码完全相同</p>\n<h3 id=\"5、两个字符串的比较\"><a href=\"#5、两个字符串的比较\" class=\"headerlink\" title=\"5、两个字符串的比较\"></a>5、两个字符串的比较</h3><p>给定两个串：s=”a1a2……an”，t=”b1b2……bm”，当满足以下条件之一时，s &lt; t</p>\n<ul>\n<li>n &lt; m，且 ai=bi（i=1，2，……n），例如当 s=”hap”，t=”happy”，就有 s &lt; t。因为 t 比 s 多出了两个字母</li>\n<li>存在某个 k ≤ min(m,n)，使得 ai = bi（i=1，2，……，,k-1），ak &lt; bk，例如当 s=”happen”，t=”happy”，因为两串的前 4 个字母均相同，而两串第 5 个字母（k 值），字母 e 的 ASCII 码是 101，而字母 y 的 ASCII 码是 121，显然 e &lt; y，所以 s &lt; t</li>\n</ul>\n<h2 id=\"五、树\"><a href=\"#五、树\" class=\"headerlink\" title=\"五、树\"></a>五、树</h2><h3 id=\"1、一些概念\"><a href=\"#1、一些概念\" class=\"headerlink\" title=\"1、一些概念\"></a>1、一些概念</h3><ul>\n<li>结点拥有的子树数称为结点的度（Degree）；</li>\n<li>度为 0 的结点称为叶节点（Leaf）或终端结点；</li>\n<li>度不为 0 的结点称为非终端结点或分支结点；</li>\n<li>除根结点之外，分支结点也成为内部结点树的度是树内各结点的度的最大值</li>\n<li>树中结点的最大层次称为树的深度（Depth）或高度</li>\n</ul>\n<h3 id=\"2、线性表与树的结构\"><a href=\"#2、线性表与树的结构\" class=\"headerlink\" title=\"2、线性表与树的结构\"></a>2、线性表与树的结构</h3><div align=\"center\"><img src=\"/images/hexo_post_158.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"3、双亲表示法\"><a href=\"#3、双亲表示法\" class=\"headerlink\" title=\"3、双亲表示法\"></a>3、双亲表示法</h3><p>以一组连续空间存储树的结点，同时在每个结点中，附设一个指示器指示其双亲结点到链表中的位置；由于根结点是没有双亲的，所以我们约定根结点的位置域设置为 -1：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_159.png\" alt=\"\" width=\"300\"></div>\n\n<p>这样的存储结构，我们可以根据结点的 parent 指针很容易找到它的双亲结点，知道 parent 为 -1 时，表示找到了树结点的根。可如果我们要知道结点的孩子是什么，需要遍历整个结构。</p>\n<h3 id=\"4、多重链表表示法\"><a href=\"#4、多重链表表示法\" class=\"headerlink\" title=\"4、多重链表表示法\"></a>4、多重链表表示法</h3><p>由于树中每个结点可能有多棵子树，可以考虑用多重链表，即每个结点有多个指针域，其中每个指针指向一棵子树的根节点，我们把这种方法叫做多重链表表示法；不过，树的每个结点的度，也就是孩子个数是不同的，所以可以设计两种方案来解决：</p>\n<h4 id=\"方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）\"><a href=\"#方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）\" class=\"headerlink\" title=\"方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）\"></a>方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）</h4><div align=\"center\"><img src=\"/images/hexo_post_160.png\" alt=\"\" width=\"500\"></div>\n\n<p>其中 data 是数据域，child1 到 childd 是指针域，用来指向该结点的孩子结点，这种方法对于树中各结点的度相差很大时，显然是很浪费空间的，因为有很多的结点，它的指针域都是空的</p>\n<h4 id=\"方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数\"><a href=\"#方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数\" class=\"headerlink\" title=\"方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数\"></a>方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数</h4><div align=\"center\"><img src=\"/images/hexo_post_296.png\" alt=\"\" width=\"500\"></div>\n\n<p>这种方法提升了空间利用率，但是由于各个结点的链表是不相同的结构，加上要维护结点的度的数值，在运算上就会带来时间上的损耗</p>\n<h3 id=\"5、孩子表示法\"><a href=\"#5、孩子表示法\" class=\"headerlink\" title=\"5、孩子表示法\"></a>5、孩子表示法</h3><p>把每个结点的孩子结点排列起来，以单链表作存储结构，则 n 个结点有 n 个孩子链表，如果是叶子结点则此单链表为空。然后 n 个头指针又组成一个线性表，采用顺序存储结构，存放进一个一维数组中：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_162.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"6、双亲孩子表示法\"><a href=\"#6、双亲孩子表示法\" class=\"headerlink\" title=\"6、双亲孩子表示法\"></a>6、双亲孩子表示法</h3><div align=\"center\"><img src=\"/images/hexo_post_163.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"7、孩子兄弟表示法\"><a href=\"#7、孩子兄弟表示法\" class=\"headerlink\" title=\"7、孩子兄弟表示法\"></a>7、孩子兄弟表示法</h3><p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_164.png\" alt=\"\" width=\"300\"></div>\n\n<p>data 是数据域，firstchild 为指针域，存储该结点的第一个孩子结点的存储地址，rightsib 是指针域，存储该结点的右兄弟结点的存储地址，这个表示法的最大好处是它把一棵复杂的树变成了一棵二叉树</p>\n<h3 id=\"8、二叉树特点\"><a href=\"#8、二叉树特点\" class=\"headerlink\" title=\"8、二叉树特点\"></a>8、二叉树特点</h3><ul>\n<li>每个结点最多有两棵子树，所以二叉树中不存在度大于 2 的结点（没有子树或者有一棵子树都是可以的）</li>\n<li>左子树和右子树是有顺序的，次序不能任意颠倒</li>\n<li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树</li>\n</ul>\n<h3 id=\"9、二叉树五种基本形态\"><a href=\"#9、二叉树五种基本形态\" class=\"headerlink\" title=\"9、二叉树五种基本形态\"></a>9、二叉树五种基本形态</h3><ol>\n<li>空二叉树</li>\n<li>只有一个根结点</li>\n<li>根结点只有左子树</li>\n<li>根结点只有右子树</li>\n<li>根结点既有左子树又有右子树</li>\n</ol>\n<h3 id=\"10、特殊二叉树\"><a href=\"#10、特殊二叉树\" class=\"headerlink\" title=\"10、特殊二叉树\"></a>10、特殊二叉树</h3><h4 id=\"斜树\"><a href=\"#斜树\" class=\"headerlink\" title=\"斜树\"></a>斜树</h4><p>所有的结点都只有左子树的二叉树叫左斜树，所有结点都是只有右子树的二叉树叫右斜树，这两者统称为斜树</p>\n<h4 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h4><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树</p>\n<h4 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h4><p>对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i（1≤i≤n）的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_165.png\" alt=\"\" width=\"400\"></div>\n\n<p><strong>完全二叉树的特点：</strong></p>\n<ul>\n<li>叶子结点只能出现在最下两层</li>\n<li>最下层的叶子一定集中在左部连续位置</li>\n<li>倒数二层，若有叶子结点，一定都在右部连续位置</li>\n<li>如果结点度为 1，则该节点只有左孩子，即不存在只有右子树的情况</li>\n<li>同样结点数的二叉树，完全二叉树的深度最小</li>\n</ul>\n<h3 id=\"11、二叉树的性质\"><a href=\"#11、二叉树的性质\" class=\"headerlink\" title=\"11、二叉树的性质\"></a>11、二叉树的性质</h3><ol>\n<li>在二叉树的第 i 层上至多有 <strong>2i-1</strong> 个结点（i ≥ 1）</li>\n<li>深度为 k 的二叉树至多有 <strong>2k-1</strong> 个结点（k ≥ 1）</li>\n<li>对任何一棵二叉树 T，如果其终端结点数为 <strong>n0</strong>，度为 2 的节点数为 <strong>n2</strong>，则 <strong>n0 = n2 + 1</strong>（解释见下图）</li>\n<li>具有 n 个结点的完全二叉树的深度为 <strong>⌊log2n⌋ + 1</strong>（⌊x⌋ 表示不大于 x 的最大整数）</li>\n<li>如果对一棵有 n 个结点的完全二叉树（其深度为 ⌊log2n⌋+1）的结点按层序编号（从第 1 层到第 ⌊log2n⌋ + 1 层，每层从左到右），对任一结点 i（1≤i≤n）有：</li>\n</ol>\n<ul>\n<li>如果 i = 1，则结点i是二叉树的根，无双亲；如果 i &gt; 1，则其双亲是结点 ⌊i / 2⌋</li>\n<li>如果 2i &gt; n，则结点 i 无左孩子（结点 i 为叶子结点）；否则其左结点是结点 2i</li>\n<li>如果 2i + 1 &gt; n，则结点 i 无右孩子；否则其右孩子是结点 2i + 1</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_166.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"12、二叉链表\"><a href=\"#12、二叉链表\" class=\"headerlink\" title=\"12、二叉链表\"></a>12、二叉链表</h3><p>二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表叫做二叉链表：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_167.png\" alt=\"\" width=\"300\"></div>\n\n<p>其中 data 是数据域，lchild 和 rchild 都是指针域，分别存放指向左孩子和右孩子的指针</p>\n<h3 id=\"13、二叉树遍历方法\"><a href=\"#13、二叉树遍历方法\" class=\"headerlink\" title=\"13、二叉树遍历方法\"></a>13、二叉树遍历方法</h3><h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树，遍历的顺序为：ABDGHCEIF</p>\n<div align=\"center\"><img src=\"/images/hexo_post_168.png\" alt=\"\" width=\"300\"></div>\n\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树，遍历的顺序为：GDHBAEICF</p>\n<div align=\"center\"><img src=\"/images/hexo_post_169.png\" alt=\"\" width=\"300\"></div>\n\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根结点，遍历的顺序为：GHDBIEFCA</p>\n<div align=\"center\"><img src=\"/images/hexo_post_170.png\" alt=\"\" width=\"300\"></div>\n\n<h4 id=\"层序遍历\"><a href=\"#层序遍历\" class=\"headerlink\" title=\"层序遍历\"></a>层序遍历</h4><p>若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序堆结点逐个访问，遍历的顺序为：ABCDEFGHI</p>\n<div align=\"center\"><img src=\"/images/hexo_post_171.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"14、两个二叉树遍历的性质\"><a href=\"#14、两个二叉树遍历的性质\" class=\"headerlink\" title=\"14、两个二叉树遍历的性质\"></a>14、两个二叉树遍历的性质</h3><ul>\n<li>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</li>\n<li>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</li>\n<li>但是已知前序和后序遍历，是不能确定一棵二叉树的</li>\n</ul>\n<h3 id=\"15、线索二叉树\"><a href=\"#15、线索二叉树\" class=\"headerlink\" title=\"15、线索二叉树\"></a>15、线索二叉树</h3><p>指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索二叉树</p>\n<div align=\"center\"><img src=\"/images/hexo_post_172.png\" alt=\"\" width=\"500\"></div>\n\n<p>通过上图（空心箭头实线为前驱，虚线黑箭头为后继），可以看出，其实线索二叉树，等于是把一棵二叉树转变成了一个双向链表；所以我们对二叉树以某种次序遍历使其变为线索二叉树的过程称做是线索化；但是，我们并不知道某一结点的 lchild 是指向它的左孩子还是指向前驱，所以需要一个区分标致；因此，我们在每个结点再增设两个标志域 ltag 和 rtag，这两个 tag 只是存放 0 或 1 数字的布尔型变量，其占用的内存空间要小于像 lchild 和 rchild 的指针变量，结点结构如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_173.png\" alt=\"\" width=\"400\"></div>\n\n<ul>\n<li>ltag 为 0 时指向该结点的左孩子，为 1 时指向该结点的前驱</li>\n<li>rtag 为 0 时指向该结点的右孩子，为 1 时指向该结点的后继</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_174.png\" alt=\"\" width=\"500\"></div>\n\n<p><strong>如果所用的二叉树需经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择</strong></p>\n<h3 id=\"16、树转换为二叉树\"><a href=\"#16、树转换为二叉树\" class=\"headerlink\" title=\"16、树转换为二叉树\"></a>16、树转换为二叉树</h3><ol>\n<li>加线，在所有兄弟结点之间加一条连线</li>\n<li>去线，对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线</li>\n<li>层次调整，以树的根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明，注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_175.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"17、森林转换为二叉树\"><a href=\"#17、森林转换为二叉树\" class=\"headerlink\" title=\"17、森林转换为二叉树\"></a>17、森林转换为二叉树</h3><ol>\n<li>把每个树转换为二叉树</li>\n<li>第一棵二叉树不动，从第二棵二叉树开始，以此把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来，当所有的二叉树连接起来后就得到了由森林转换来的二叉树</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_176.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"18、二叉树转换为树\"><a href=\"#18、二叉树转换为树\" class=\"headerlink\" title=\"18、二叉树转换为树\"></a>18、二叉树转换为树</h3><ol>\n<li>加线，若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结点……哈，反正就是左孩子的 n 个右孩子结点都作为此结点的孩子，将该结点与这些右孩子结点用线连接起来</li>\n<li>去线，删除原二叉树中所有结点与其右孩子结点的连线</li>\n<li>层次调整，使之结构层次分明</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_177.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"19、二叉树转换为森林\"><a href=\"#19、二叉树转换为森林\" class=\"headerlink\" title=\"19、二叉树转换为森林\"></a>19、二叉树转换为森林</h3><p>判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树</p>\n<ol>\n<li>从根结点开始，若右孩子存在，则把与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在，则连线删除……，直到所有右孩子连线都删除为止，得到分离的二叉树</li>\n<li>再将每棵分离后的二叉树转换为树即可</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_178.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"20、树的遍历\"><a href=\"#20、树的遍历\" class=\"headerlink\" title=\"20、树的遍历\"></a>20、树的遍历</h3><ol>\n<li>一种是先根遍历树，即先访问树的根结点，然后依次先根遍历根的每棵子树</li>\n<li>另一种是后根遍历，即先依次后根遍历每棵子树，然后再访问根结点</li>\n</ol>\n<h3 id=\"21、森林的遍历\"><a href=\"#21、森林的遍历\" class=\"headerlink\" title=\"21、森林的遍历\"></a>21、森林的遍历</h3><ol>\n<li>前序遍历：先访问森林中第一棵树的根结点，然后再依次先跟遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林</li>\n<li>后序遍历：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林</li>\n</ol>\n<p><strong>森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树中的中序遍历结果相同</strong></p>\n<h3 id=\"22、赫夫曼树算法描述\"><a href=\"#22、赫夫曼树算法描述\" class=\"headerlink\" title=\"22、赫夫曼树算法描述\"></a>22、赫夫曼树算法描述</h3><ol>\n<li>根据给定的n个权值 {w1，w2，···wn} 构成 n 棵二叉树的集合 F={T1，T2，···Tn}，其中每个二叉树 Ti 中只有一个带权为 wi 的根结点，其左右子树均为空。</li>\n<li>在 F 中选择两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且置新的二叉树的根结点的权值为其左、右子树上根结点的权值之和。</li>\n<li>在 F 中删除这两棵树，同时将新得到的二叉树加入 F 中。</li>\n<li>重复 2 和 3，直到 F 只含一棵树为止。这棵树便是赫夫曼树。</li>\n</ol>\n<h3 id=\"23、赫夫曼编码\"><a href=\"#23、赫夫曼编码\" class=\"headerlink\" title=\"23、赫夫曼编码\"></a>23、赫夫曼编码</h3><p>一般地，设需要编码的字符集为 {d1，d2，···dn}，各个字符在电文中出现的次数或频率集合为 {w1，w2，···wn}，以 d1，d2，···dn 作为叶子结点，以 w1，w2，···wn 作为相应叶子结点的权值来构造一棵赫夫曼树。规定赫夫曼树的左分支代表 0，右分支代表 1，则从根结点到叶子结点所经过的路径分支组成的 0 和 1 的序列便为该结点对应字符的编码，这就是赫夫曼编码</p>\n<h2 id=\"六、图\"><a href=\"#六、图\" class=\"headerlink\" title=\"六、图\"></a>六、图</h2><h3 id=\"1、图的定义\"><a href=\"#1、图的定义\" class=\"headerlink\" title=\"1、图的定义\"></a>1、图的定义</h3><p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V，E），其中，G 表示一个图，V 是图 G 中顶点的集合，E 是图 G 中边的集合</p>\n<h3 id=\"2、关于图的一些定义\"><a href=\"#2、关于图的一些定义\" class=\"headerlink\" title=\"2、关于图的一些定义\"></a>2、关于图的一些定义</h3><ul>\n<li><strong>无向边</strong>：若顶点 vi 到 vj 之间的边没有方向，则称这条边为无向边（Edge），用无需偶对（vi，vj）来表示</li>\n<li><p><strong>有向边</strong>：若从顶点 vi 到 vj 的边有方向，则称这条边为有向边，也成为弧（Arc）<br><strong>无向边用小括号 “()” 表示，而有向边则是用尖括号 “&lt;&gt;” 表示</strong></p>\n</li>\n<li><p>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为<strong>简单图</strong></p>\n</li>\n<li>在无向图中，如果任意两个顶点之间都存在边，则称该图为<strong>无向完全图</strong></li>\n<li>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为<strong>有向完全图</strong></li>\n<li>有很少条边或弧的图称为<strong>稀疏图</strong>，反之称为<strong>稠密图</strong></li>\n<li>这里稀疏和稠密是模糊的概念，是相对而言的 有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做<strong>权</strong>（Weight）</li>\n<li>带权的图通常称为<strong>网</strong>（Network）</li>\n<li>假设有两个图 G =（V，{E}）和G’ =（V’，{E’}），如果 V’ ⊆ V 且 E’ ⊆ E，则称 G’ 为 G 的<strong>子图</strong>（Subgraph）</li>\n<li>图中顶点间存在路径，两顶点存在路径则说明是连通的，如果路径最终回到起始点则称为环，当中不重复叫简单路径。</li>\n<li>若任意两顶点都是连通的，则图就是连通图，有向则称强连通图。</li>\n<li>图中有子图，若子图极大连通则就是连通分量，有向的则称强连通分量 无向图中连通且n个顶点n-1条边叫生成树。</li>\n<li>有向图中一顶点入度为0其余顶点入度为1的叫有向树。</li>\n<li>一个有向图由若干棵有向树构成生成森林</li>\n</ul>\n<blockquote>\n<p>由于定义实在太多，就不再叙述了，可以<a href=\"http://blog.csdn.net/luoweifu/article/details/9270439\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看关于图的其他定义</p>\n</blockquote>\n<h3 id=\"3、图的邻接矩阵\"><a href=\"#3、图的邻接矩阵\" class=\"headerlink\" title=\"3、图的邻接矩阵\"></a>3、图的邻接矩阵</h3><p>图的邻接矩阵（Adiacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息 n 个顶点和 e 条边的无向网图的创建，时间复杂度为 O（n+n2+e），其中对邻接矩阵的初始化需要耗费 O（n2）的时间</p>\n<h3 id=\"4、邻接表\"><a href=\"#4、邻接表\" class=\"headerlink\" title=\"4、邻接表\"></a>4、邻接表</h3><p>数组与链表相结合的存储方法称为邻接表 图中顶点用一个一维数组存储，当然，顶点也可以用单链表来存储，不过数组可以较容易地读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息 图中每个顶点 vi 的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点 vi 的边表，有向图则称为顶点 vi 作为弧尾的出边表</p>\n<div align=\"center\"><img src=\"/images/hexo_post_179.png\" alt=\"\" width=\"600\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_180.png\" alt=\"\" width=\"600\"></div>\n\n<p>若是有向图，邻接表结构是类似的，但我们是以顶点为弧尾来存储边表的，这样很容易就可以得到每个顶点的出度，但也有时为了便于确定顶点的入度或以顶点为弧头的弧，我们可以建立<strong>一个有向图的逆邻接表，即对每个顶点 vi 都建立一个链接为 vi 为弧头的表</strong> 对于带权值的网图，可以在边表结点定义中再<strong>增加一个 weight 的数据域</strong>，存储权值信息即可</p>\n<h3 id=\"5、图的遍历\"><a href=\"#5、图的遍历\" class=\"headerlink\" title=\"5、图的遍历\"></a>5、图的遍历</h3><p>从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做图的遍历（Traversing Graph）</p>\n<h3 id=\"6、深度优先遍历（DFS）\"><a href=\"#6、深度优先遍历（DFS）\" class=\"headerlink\" title=\"6、深度优先遍历（DFS）\"></a>6、深度优先遍历（DFS）</h3><p>从图中某个顶点 v 出发，访问此顶点，然后从 v 的未被访问的邻接点出发深度优先遍历图，直至图中所有和 v 有路径相通的顶点都被访问到，若图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止</p>\n<h3 id=\"7、广度优先遍历（BFS）\"><a href=\"#7、广度优先遍历（BFS）\" class=\"headerlink\" title=\"7、广度优先遍历（BFS）\"></a>7、广度优先遍历（BFS）</h3><p>如果说<strong>图的深度优先遍历类似树的前序遍历，那么图的广度优先遍历就类似于树的层序遍历</strong>了，如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_181.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"8、图的两种遍历方式的比较\"><a href=\"#8、图的两种遍历方式的比较\" class=\"headerlink\" title=\"8、图的两种遍历方式的比较\"></a>8、图的两种遍历方式的比较</h3><p>两者在时间复杂度上是一样的，不同之处仅仅在于对顶点访问的顺序不同，可见两者在全图遍历上是没有优劣之分的，只是视不同的情况选择不同的算法。不过，深度优先更适合目标比较明确，以找到目标为主要目的的情况，而广度优先更适合在不断扩大遍历范围时找到相对最优解的情况</p>\n<h3 id=\"9、最小生成树\"><a href=\"#9、最小生成树\" class=\"headerlink\" title=\"9、最小生成树\"></a>9、最小生成树</h3><p>我们把构造连通网的最小代价生成树称为<strong>最小生成树</strong>（Minimum Cost Spanning Tree）<br>找连通网的最小生成树，经典的有两种算法，<strong>普利姆算法</strong>和<strong>克鲁斯卡尔算法</strong></p>\n<h3 id=\"10、普利姆（Prim）算法\"><a href=\"#10、普利姆（Prim）算法\" class=\"headerlink\" title=\"10、普利姆（Prim）算法\"></a>10、普利姆（Prim）算法</h3><h4 id=\"算法思路：\"><a href=\"#算法思路：\" class=\"headerlink\" title=\"算法思路：\"></a>算法思路：</h4><p>以某顶点为起点，逐步找各顶点上最小权值的边来构建最小生成树</p>\n<h4 id=\"算法步骤：\"><a href=\"#算法步骤：\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><ol>\n<li>输入：一个加权连通图，其中顶点集合为 V，边集合为 E；</li>\n<li>初始化：Vnew = {x}，其中 x 为集合 V 中的任一节点（起始点），Enew = {}，为空；</li>\n<li>重复下列操作，直到 Vnew = V：</li>\n</ol>\n<ul>\n<li>在集合 E 中选取权值最小的边 <code>&lt;u, v&gt;</code>，其中 u 为集合 Vnew 中的元素，而 v 不在 <code>Vnew</code> 集合当中，并且 v∈V（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）；</li>\n<li>将 v 加入集合 Vnew 中，将 <code>&lt;u, v&gt;</code> 边加入集合 Enew 中；</li>\n</ul>\n<ol start=\"4\">\n<li>输出：使用集合 Vnew 和 Enew 来描述所得到的最小生成树。</li>\n</ol>\n<p>书中有非常详尽的解释，但是感觉解释的比较繁琐，建议去看一下<a href=\"http://baike.baidu.com/link?url=9SZQiA3Zm97fe1rIVtGuUCX0FszUTNnk2Qv5XwbPNZpFvjKgRfCL5PnqfPrEo2RdJQo1Asw2bdQx4RujLJL78X8AbfsvN6TUbVKl7w8a2CNQEADeXcqZydK4wrEmYFXybxEKUnpa83ksvSxsJS-zSbyMgjt-9r5Zx3aMquBsMJ26Qj_m2irhgVvsJsxw0QB8\" target=\"_blank\" rel=\"noopener\">百度百科</a>中的讲解</p>\n<h3 id=\"11、克鲁斯卡尔（Kruskal）算法\"><a href=\"#11、克鲁斯卡尔（Kruskal）算法\" class=\"headerlink\" title=\"11、克鲁斯卡尔（Kruskal）算法\"></a>11、克鲁斯卡尔（Kruskal）算法</h3><h4 id=\"算法思路：-1\"><a href=\"#算法思路：-1\" class=\"headerlink\" title=\"算法思路：\"></a>算法思路：</h4><p>因为权值是在边上，所以直接去找最小权值的边来构建生成树，只不过构建时要考虑是否会形成环路而已</p>\n<h4 id=\"算法步骤：-1\"><a href=\"#算法步骤：-1\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><p>先构造一个只含 n 个顶点、而边集为空的子图，把子图中各个顶点看成各棵树上的根结点，之后，从网的边集 E 中选取一条权值最小的边，若该条边的两个顶点分属不同的树，则将其加入子图，即把两棵树合成一棵树，反之，若该条边的两个顶点已落在同一棵树上，则不可取，而应该取下一条权值最小的边再试之。依次类推，直到森林中只有一棵树，也即子图中含有 n-1 条边为止。关于这个算法，百度百科上的讲解就不是很清楚了，如果感兴趣的话可以自行查阅其他资料</p>\n<h3 id=\"12、Prim-算法和-Kruskal-算法的对比\"><a href=\"#12、Prim-算法和-Kruskal-算法的对比\" class=\"headerlink\" title=\"12、Prim 算法和 Kruskal 算法的对比\"></a>12、Prim 算法和 Kruskal 算法的对比</h3><p>对比两个算法，克鲁斯卡尔算法主要是针对边来展开，边数少时效率会非常高，所以堆于稀疏图有很大的优势；而普利姆算法对于稠密图，即边数非常多的情况会更好一些</p>\n<h3 id=\"13、最短路径\"><a href=\"#13、最短路径\" class=\"headerlink\" title=\"13、最短路径\"></a>13、最短路径</h3><p>对于网图来说，最短路径，是指两顶点之间经过的边上权值之和最少的路径，并且我们称路径上的第一个顶点是源点，最后一个顶点是终点 主要有两种求最短路径的算法：迪杰斯特拉算法和</p>\n<h3 id=\"14、迪杰斯特拉（Dijkstra）算法\"><a href=\"#14、迪杰斯特拉（Dijkstra）算法\" class=\"headerlink\" title=\"14、迪杰斯特拉（Dijkstra）算法\"></a>14、迪杰斯特拉（Dijkstra）算法</h3><h4 id=\"算法步骤：-2\"><a href=\"#算法步骤：-2\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><p>G = {V,E}</p>\n<ol>\n<li>初始时令 S = {V0}, T = V - S = {其余顶点}，T 中顶点对应的距离值</li>\n</ol>\n<p>若存在 &lt;V0,Vi&gt;，d(V0,Vi) 为 &lt;V0,Vi&gt; 弧上的权值</p>\n<p>若不存在 &lt;V0,Vi&gt;，d(V0,Vi) 为 ∞</p>\n<ol start=\"2\">\n<li><p>从 T 中选取一个与 S 中顶点有关联边且权值最小的顶点 W，加入到 S 中</p>\n</li>\n<li><p>对其余 T 中顶点的距离值进行修改：若加进 W 作中间顶点，从 V0 到 Vi 的距离值缩短，则修改此距离值</p>\n</li>\n</ol>\n<p>重复上述步骤 2、3，直到 S 中包含所有顶点，即 W = Vi 为止</p>\n<h3 id=\"15、弗洛伊德（Floyd）算法\"><a href=\"#15、弗洛伊德（Floyd）算法\" class=\"headerlink\" title=\"15、弗洛伊德（Floyd）算法\"></a>15、弗洛伊德（Floyd）算法</h3><h4 id=\"算法步骤：-3\"><a href=\"#算法步骤：-3\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><ol>\n<li><p>从任意一条单边路径开始。所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大。</p>\n</li>\n<li><p>对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比已知的路径更短。如果是更新它。</p>\n</li>\n</ol>\n<p>把图用邻接矩阵 G 表示出来，如果从 Vi 到 Vj 有路可达，则 G[i][j] = d，d 表示该路的长度；否则 G[i][j] = 无穷大。定义一个矩阵D用来记录所插入点的信息，D[i][j] 表示从 Vi 到 Vj 需要经过的点，初始化 D[i][j] = j。把各个顶点插入图中，比较插点后的距离与原来的距离，G[i][j] = min( G[i][j], G[i][k]+G[k][j])，如果 G[i][j] 的值变小，则 D[i][j] = k。在 G 中包含有两点之间最短道路的信息，而在 D 中则包含了最短通路径的信息。</p>\n<p>比如，要寻找从 V5 到 V1 的路径。根据 D，假如 D(5,1) = 3 则说明从 V5 到 V1 经过 V3，路径为 {V5,V3,V1}，如果 D(5,3)=3，说明 V5 与 V3 直接相连，如果 D(3,1) = 1，说明 V3 与 V1 直接相连。</p>\n<h3 id=\"16、拓扑排序\"><a href=\"#16、拓扑排序\" class=\"headerlink\" title=\"16、拓扑排序\"></a>16、拓扑排序</h3><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为 <strong>AOV 网</strong>（Activity On Vertex Network）<br><strong>拓扑序列</strong>：设 G = (V,E)是一个具有 n 个顶点的有向图，V 中的顶点序列 V1，V2，……，Vn，满足若从顶点 Vi 到 Vj 有一条路径，则在顶点序列中顶点 Vi 必在顶点 Vj 之前。则我们称这样的顶点序列为一个<strong>拓扑序列</strong><br><strong>拓扑排序</strong>：其实就是对一个有向图构造拓扑序列的过程；构造时会有两个结果，如果此网的全部顶点都被输出，则说明它是不存在环（回路）的 AOV 网；如果输出顶点数少了，哪怕是少了一个，也说明这个网存在环（回路），不是 AOV 网。</p>\n<h3 id=\"17、拓扑排序算法\"><a href=\"#17、拓扑排序算法\" class=\"headerlink\" title=\"17、拓扑排序算法\"></a>17、拓扑排序算法</h3><p><strong>对 AOV 网进行拓扑排序的基本思路</strong>是：从 AOV 网中选择一个入度为 0 的顶点输出，然后删去此顶点，并删除以此顶点为尾的弧，继续重复此步骤，直到输出全部顶点或者 AOV 网中不存在入度为 0 的顶点为止</p>\n<h3 id=\"18、关键路径\"><a href=\"#18、关键路径\" class=\"headerlink\" title=\"18、关键路径\"></a>18、关键路径</h3><p>在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为 <strong>AOE 网</strong>（Activity On Edge Network）；我们把 AOE 网中没有入边的顶点称为始点或源点，没有出边的顶点称为终点或汇点；正常情况下，AOE 网只有一个源点一个汇点，我们把路径上各个活动所持续的时间之和称为<strong>路径长度</strong>，从源点到汇点具有最大长度的路径叫<strong>关键路径</strong>，在关键路径上的活动叫<strong>关键活动</strong></p>\n<h3 id=\"19、关键路径算法\"><a href=\"#19、关键路径算法\" class=\"headerlink\" title=\"19、关键路径算法\"></a>19、关键路径算法</h3><p>原理：我们只需要找到所有活动的最早开始时间和最晚开始时间，并且比较它们，如果相等就意味着此活动是关键活动，活动间的路径为关键路径。如果不等，则就不是。为此，我们需要定义如下几个参数：</p>\n<ol>\n<li>事件的<strong>最早发生时间etv</strong>（earliest time of vertex）：即顶点 Vk 的最早发生时间</li>\n<li>事件的<strong>最晚发生时间ltv</strong>（latest time of vertex）：即顶点 Vk 的最晚发生时间，也就是每个顶点对应的事件最晚需要开始的时间，超出此时间将会延误整个工期</li>\n<li>活动的<strong>最早开工时间ete</strong>（earliest time of edge）：即弧 ak 的最早发生时间</li>\n<li>活动的<strong>最晚开工时间lte</strong>（latest time of edge）：即弧 ak 的最晚发生时间，也就是不推迟工期的最晚开工时间</li>\n</ol>\n<p>我们是由 1 和 2 可以求得 3 和 4，然后再根据 ete[k] 是否与 lte[k] 相等来判断 ak 是否是关键活动</p>\n<h3 id=\"20、世界上最遥远的距离……\"><a href=\"#20、世界上最遥远的距离……\" class=\"headerlink\" title=\"20、世界上最遥远的距离……\"></a>20、世界上最遥远的距离……</h3><blockquote>\n<p>世界上最遥远的距离，不是从南极到北极，而是我在讲解算法为何如此精妙，你却能够安详在课堂上休息。<br>世界上最遥远的距离，不是珠峰与马里亚纳海沟的距离，而是我欲把古人的智慧全盘给你，你却不屑一顾毫不怜惜。<br>世界上最遥远的距离，不是牛 A 与牛 C 之间狭小空隙，而是你们当中，有人在通往牛逼的路上一路狂奔，而有人步入大学校园就学会放弃。</p>\n</blockquote>\n<h3 id=\"七、查找\"><a href=\"#七、查找\" class=\"headerlink\" title=\"七、查找\"></a>七、查找</h3><h4 id=\"1、查找概论\"><a href=\"#1、查找概论\" class=\"headerlink\" title=\"1、查找概论\"></a>1、查找概论</h4><ul>\n<li><strong>查找表</strong>（Search Table）是由同一类型的数据元素（或记录）构成的集合</li>\n<li><strong>关键字</strong>（Key）是数据元素中某个数据项的值，又称为<strong>键值</strong></li>\n<li>若此关键字可以唯一地标识一个记录，则称此关键字为<strong>主关键字</strong>（Primary Key）</li>\n<li>那些可以识别多个数据元素（或记录）的关键字，我们称为<strong>次关键字</strong>（Secondary Key）</li>\n<li><strong>查找</strong>（Searching）就是根据给定的某个值，在查找表中确定一个其关键字等于给定值得数据元素（或记录）</li>\n</ul>\n<h4 id=\"2、查找表操作方式\"><a href=\"#2、查找表操作方式\" class=\"headerlink\" title=\"2、查找表操作方式\"></a>2、查找表操作方式</h4><p>分为两大种：静态查找表和动态查找表 <strong>静态查找表</strong>（Static Search Table）：只作查找操作的查找表。它的主要操作有：</p>\n<ul>\n<li>查询某个“特定的”数据元素是否在查找表中</li>\n<li>检索某个“特定的”数据元素和各种属性</li>\n</ul>\n<p><strong>动态查找表</strong>（Dynamic Search Table）：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是两个：</p>\n<ul>\n<li>查找时插入数据元素</li>\n<li>查找时删除数据元素</li>\n</ul>\n<h4 id=\"3、顺序查找\"><a href=\"#3、顺序查找\" class=\"headerlink\" title=\"3、顺序查找\"></a>3、顺序查找</h4><p>顺序查找（Sequential Search）又叫线性查找，是最基本的查找技术，它的查找过程是： 从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功。</p>\n<h3 id=\"4、二分查找\"><a href=\"#4、二分查找\" class=\"headerlink\" title=\"4、二分查找\"></a>4、二分查找</h3><p>折半查找（Binary Search）技术，又称为二分查找。它的前提是线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须采用顺序存储。折半查找的基本思想是： 在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止</p>\n<h4 id=\"5、插值查找\"><a href=\"#5、插值查找\" class=\"headerlink\" title=\"5、插值查找\"></a>5、插值查找</h4><p>插值查找（Interpolation Search）是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法，其核心就在于插值的计算公式 (key-a[low])/(a[high]-a[low])，对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好得多</p>\n<h3 id=\"6、斐波那契查找算法\"><a href=\"#6、斐波那契查找算法\" class=\"headerlink\" title=\"6、斐波那契查找算法\"></a>6、斐波那契查找算法</h3><h4 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h4><ol>\n<li>当 key = a[mid] 时，查找就成功</li>\n<li>当 key &lt; a[mid] 时，新范围是第 low 个到第 mid - 1 个，此时范围个数为 F[k-1] - 1 个</li>\n<li>当 key &gt; a[mid] 时，新范围是第 m + 1 个到第 high 个，此时范围个数为 F[k-2] - 1 个</li>\n</ol>\n<h3 id=\"7、三种查找算法的比较\"><a href=\"#7、三种查找算法的比较\" class=\"headerlink\" title=\"7、三种查找算法的比较\"></a>7、三种查找算法的比较</h3><p>折半查找是进行加法与除法运算 (mid = (low + high) / 2)，插值查找进行复杂的四则运算(mid = low + (high - low) * (key - a[low]) / (a[high] - a[low]))，而斐波那契查找只是最简单加减法运算(mid = low + F[k-1] - 1)，在海量数据的查找过程中，这种细微的差别可能会影响最终的查找效率</p>\n<h3 id=\"8、线性索引\"><a href=\"#8、线性索引\" class=\"headerlink\" title=\"8、线性索引\"></a>8、线性索引</h3><p><strong>索引</strong>就是把一个关键字与它对应的记录相关联的过程 所谓<strong>线性索引</strong>就是将索引项集合组织为线性结构，也称为<strong>索引表</strong> 三种线性索引：稠密索引、分块索引和倒排索引</p>\n<h3 id=\"9、稠密索引\"><a href=\"#9、稠密索引\" class=\"headerlink\" title=\"9、稠密索引\"></a>9、稠密索引</h3><p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项</p>\n<div align=\"center\"><img src=\"/images/hexo_post_182.png\" alt=\"\" width=\"400\"></div>\n\n<p>对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列 索引项有序也就意味着，我们要查找关键字时，可以用到折半、插值、斐波那契等有序查找算法，大大提高了效率</p>\n<h3 id=\"10、分块索引\"><a href=\"#10、分块索引\" class=\"headerlink\" title=\"10、分块索引\"></a>10、分块索引</h3><p>分块有序，是把数据集的记录分成了若干块，并且这些块需要满足两个条件：</p>\n<ul>\n<li><strong>块内无序</strong>：当然如果能够让块内有序对查找来说更理想</li>\n<li><strong>块间有序</strong>：只有块间有序，才有可能在查找时带来效率</li>\n</ul>\n<h4 id=\"分块索引的索引项结构分三个数据项：\"><a href=\"#分块索引的索引项结构分三个数据项：\" class=\"headerlink\" title=\"分块索引的索引项结构分三个数据项：\"></a>分块索引的索引项结构分三个数据项：</h4><ul>\n<li><strong>最大关键码</strong>，它存储每一块中的最大关键字，这样的好处就是可以使得在它之后的下一块中的最小关键字也能比这一块最大的关键字要大</li>\n<li>存储了<strong>块中的记录个数</strong>，以便于循环时使用</li>\n<li>用于<strong>指向块首数据元素的指针</strong>，便于开始对这一块中记录进行遍历</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_183.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"分块索引表中查找的步骤：\"><a href=\"#分块索引表中查找的步骤：\" class=\"headerlink\" title=\"分块索引表中查找的步骤：\"></a>分块索引表中查找的步骤：</h4><ol>\n<li>在分块索引表中查找要查关键字所在的块，可以利用折半、插值等算法</li>\n<li>根据块首指针找到响应的块，并在块中顺序查找关键码。因为块中可以是无序的，因此只能顺序查找</li>\n</ol>\n<h3 id=\"11、倒排索引\"><a href=\"#11、倒排索引\" class=\"headerlink\" title=\"11、倒排索引\"></a>11、倒排索引</h3><p>记录号表存储具有相同次关键字的所有记录的记录号（可以是指向记录的指针或者是该记录的主关键字），这样的索引方法就是倒排索引（inverted index） 倒排索引的优点就是查找记录非常快，基本等于生成索引表后，查找时都不用去读取记录，就可以得到结果。但它的缺点是这个记录号不定长</p>\n<h3 id=\"12、二叉排序树\"><a href=\"#12、二叉排序树\" class=\"headerlink\" title=\"12、二叉排序树\"></a>12、二叉排序树</h3><p>二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树</p>\n<ul>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值</li>\n<li>它的左、右子树也分别为二叉排序树</li>\n</ul>\n<p>如果我们希望对一个集合按二叉排序树查找，最好是把它构建成一棵平衡的二叉排序树。</p>\n<h3 id=\"13、平衡二叉树\"><a href=\"#13、平衡二叉树\" class=\"headerlink\" title=\"13、平衡二叉树\"></a>13、平衡二叉树</h3><p>平衡二叉树（Self-Balancing Binary Search Tree或Height-Balanced Binary Search Tree），是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于 1；我们将二叉树上结点的左子树深度减去右子树深度的值称为<strong>平衡因子</strong>BF（Balance Factor），那么平衡二叉树上所有结点的平衡因子只可能是 -1，0，1</p>\n<h3 id=\"14、最小不平衡子树\"><a href=\"#14、最小不平衡子树\" class=\"headerlink\" title=\"14、最小不平衡子树\"></a>14、最小不平衡子树</h3><p>距离插入结点最近的，且平衡因子的绝对值大于 1 的结点为根的子树，我们称为<strong>最小不平衡子树</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_184.png\" alt=\"\" width=\"400\"></div>\n\n<p>如上图所示，当新插入结点 37 时，距离它最近的平衡因子绝对值超过 1 的结点是 58（即它的左子树高度 2 减去右子树高度 0），所以从 58 开始以下的子树为最小不平衡子树</p>\n<h3 id=\"15、平衡二叉树实现算法\"><a href=\"#15、平衡二叉树实现算法\" class=\"headerlink\" title=\"15、平衡二叉树实现算法\"></a>15、平衡二叉树实现算法</h3><h4 id=\"算法原理：\"><a href=\"#算法原理：\" class=\"headerlink\" title=\"算法原理：\"></a>算法原理：</h4><p>基本思想就是在构建二叉排序树的过程中，每当插入一个结点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应地旋转，使之成为新的平衡子树</p>\n<h4 id=\"右旋操作：\"><a href=\"#右旋操作：\" class=\"headerlink\" title=\"右旋操作：\"></a>右旋操作：</h4><div align=\"center\"><img src=\"/images/hexo_post_185.png\" alt=\"\" width=\"500\"></div>\n\n<p>左旋和右旋代码是对称的</p>\n<h3 id=\"16、多路查找树\"><a href=\"#16、多路查找树\" class=\"headerlink\" title=\"16、多路查找树\"></a>16、多路查找树</h3><p>多路查找树（multi-way search tree），其每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素</p>\n<h3 id=\"17、2-3-树\"><a href=\"#17、2-3-树\" class=\"headerlink\" title=\"17、2-3 树\"></a>17、2-3 树</h3><p>2-3 树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（我们称它为2结点）或三个孩子（我们称它为 3 结点）。</p>\n<ul>\n<li>一个 2 结点包含一个元素和两个孩子（或没有孩子），且与二叉排序树类似</li>\n<li>一个 3 结点包含一小一大两个元素和三个孩子（或没有孩子），左子树包含小于较小元素的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素</li>\n<li>2-3 树中所有的叶子都在同一层次上</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_186.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"18、2-3树的插入实现\"><a href=\"#18、2-3树的插入实现\" class=\"headerlink\" title=\"18、2-3树的插入实现\"></a>18、2-3树的插入实现</h3><p>可分为三种情况：</p>\n<ol>\n<li>对于空树，插入一个 2 结点即可，这很容易理解</li>\n<li>插入结点到一个 2 结点的叶子上。由于其本身就只有一个元素，所以只需要将其升级为 3 结点即可</li>\n<li>要往 3 结点中插入一个新元素。因为 3 结点本身已经是 2-3 树的结点最大容量（已经有两个元素），因此就需要将其拆分，且将树中两元素或插入元素的三者中选择其一向上移动一层</li>\n</ol>\n<h3 id=\"19、2-3-4树\"><a href=\"#19、2-3-4树\" class=\"headerlink\" title=\"19、2-3-4树\"></a>19、2-3-4树</h3><p>就是 2-3 树的概念扩展，包括了 4 结点的使用。一个4结点包含小中大三个元素和四个孩子（或没有孩子），一个 4 结点要么没有孩子，要么具有 4 个孩子。如果某个 4 结点有孩子的话，从左到右按照由小到大的顺序排列</p>\n<h3 id=\"20、B树\"><a href=\"#20、B树\" class=\"headerlink\" title=\"20、B树\"></a>20、B树</h3><p>B树（B-tree）是一种平衡的多路查找树，2-3树和 2-3-4树都是 B树的特例。结点最大的孩子数目称为 <strong>B树的阶</strong>（order），因此，2-3树是 3 阶 B树，2-3-4树是 4 阶 B树</p>\n<h4 id=\"一个-m-阶的-B-树具有如下属性：\"><a href=\"#一个-m-阶的-B-树具有如下属性：\" class=\"headerlink\" title=\"一个 m 阶的 B 树具有如下属性：\"></a>一个 m 阶的 B 树具有如下属性：</h4><ul>\n<li>如果根结点不是叶节点，则其至少有两棵子树</li>\n<li>每一个非根的分支结点都有 k-1 个元素和k个孩子，其中 ⌈m/2⌉ ≤ k ≤ m。每一个叶子节点 n 都有 k - 1 个元素，其中 ⌈m/2⌉ ≤ k ≤m</li>\n<li>所有叶子结点都位于同一层次</li>\n<li>所有分支结点包含下列信息数据（n,A0,K1,A1,K2,A2,…,Kn,An），其中：Ki(i=1,2,…,n) 为关键字，且 Ki&lt;Ki+1(i=1,2,…,n-1)；Ai(i=0,2,…,n) 为指向子树根结点的指针，且指针 A(i-1) 所指子树中所有结点的关键字均小于 Ki(i=1,2,…,n),An 所指子树中所有结点的关键字均大于 Kn，n·(⌈m/2⌉-1≤n≤m-1) 为关键字的个数（或 n + 1 为子树的个数）</li>\n</ul>\n<h3 id=\"21、B-树\"><a href=\"#21、B-树\" class=\"headerlink\" title=\"21、B+树\"></a>21、B+树</h3><p>在 B+树中，出现在分支结点中的元素会被当作它们在该分支结点位置的中序后继者（叶子节点）中再次列出。另外，每一个叶子结点都会保存一个指向后一叶子结点的指针</p>\n<div align=\"center\"><img src=\"/images/hexo_post_187.png\" alt=\"\" width=\"400\"></div>\n\n<p>一棵 m 阶的 B+树和 m 阶的 B树的差异在于：</p>\n<ul>\n<li>有 n 棵子树的结点中包含有 n 个关键字</li>\n<li>所有的叶子结点包含全部关键字的信息，及指向含这些关键字记录的指针，叶子结点本身依关键字的大小自小而大顺序链接</li>\n<li>所有分支结点可以看成是索引，结点中仅含有其子树中的最大（或最小）关键字</li>\n</ul>\n<p>如果我们是需要从最小关键字进行从小到大的顺序查找，我们就可以从最左侧的叶子结点出发，不经过分支结点，而是沿着指向下一叶子结点的指针就可遍历所有的关键字</p>\n<h3 id=\"22、散列表（哈希表）\"><a href=\"#22、散列表（哈希表）\" class=\"headerlink\" title=\"22、散列表（哈希表）\"></a>22、散列表（哈希表）</h3><p><strong>散列技术</strong>是在记录的存储位置和它的关键字之间建立一个确定的对应关系 f，使得每个关键字 key 对应一个存储位置 f(key)，散列技术既是一种存储方法，也是一种查找方法<br>散列技术最适合的求解问题是查找与给定值相等的记录 f称为散列函数，又称为<strong>哈希（Hash）函数</strong><br>采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为<strong>散列表或哈希表</strong>（Hash table）</p>\n<h4 id=\"散列过程有两步：\"><a href=\"#散列过程有两步：\" class=\"headerlink\" title=\"散列过程有两步：\"></a>散列过程有两步：</h4><ol>\n<li>在存储时，通过散列函数计算记录的散列地址，并按此散列地址存储该记录</li>\n<li>当查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录</li>\n</ol>\n<h3 id=\"23、散列函数构造方法\"><a href=\"#23、散列函数构造方法\" class=\"headerlink\" title=\"23、散列函数构造方法\"></a>23、散列函数构造方法</h3><h4 id=\"直接定址法\"><a href=\"#直接定址法\" class=\"headerlink\" title=\"直接定址法\"></a>直接定址法</h4><p>取关键字的某个线性函数值为散列地址</p>\n<h4 id=\"数字分析法\"><a href=\"#数字分析法\" class=\"headerlink\" title=\"数字分析法\"></a>数字分析法</h4><p>如果我们的关键字是位数较多的数字，可以对数字进行翻转、右环位移、左环位移、甚至前两数与后两数叠加等方法，合理地将关键字分配到散列表的各位置</p>\n<h4 id=\"平方取中法\"><a href=\"#平方取中法\" class=\"headerlink\" title=\"平方取中法\"></a>平方取中法</h4><p>假设关键字是 1234，那么它的平方就是 1522756，再抽取中间的 3 位就是 227，用做散列地址。平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况</p>\n<h4 id=\"折叠法\"><a href=\"#折叠法\" class=\"headerlink\" title=\"折叠法\"></a>折叠法</h4><p>将关键字从左到右分割成位数相等的几部分，然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址.折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况 比如我们的关键字是 9876543210，散列表表长为三位，我们将它分为四组，987|654|321|0，然后将它们叠加求和 987 + 654 + 321 + 0 = 1962，再求后 3 位得到散列地址为 962。</p>\n<h4 id=\"除留余数法\"><a href=\"#除留余数法\" class=\"headerlink\" title=\"除留余数法\"></a>除留余数法</h4><p>对关键字直接取模，也可在折叠、平方取中后再取模，对于散列表长为 m 的散列函数公式为：</p>\n<blockquote>\n<p>f(key)=key mod p(p≤m)</p>\n</blockquote>\n<p>根据前辈们的经验，若散列表表长为 m，通常 p 为小于或等于表长（最好接近 m）的最小质数或不包含小于 20 质因子的合数</p>\n<h4 id=\"随机数法\"><a href=\"#随机数法\" class=\"headerlink\" title=\"随机数法\"></a>随机数法</h4><p>选择一个随机数，取关键字的随机函数值为它的散列地址</p>\n<h3 id=\"24、采用不同的散列函数应该考虑的因素\"><a href=\"#24、采用不同的散列函数应该考虑的因素\" class=\"headerlink\" title=\"24、采用不同的散列函数应该考虑的因素\"></a>24、采用不同的散列函数应该考虑的因素</h3><ul>\n<li>计算散列地址所需的时间</li>\n<li>关键字的长度</li>\n<li>散列表的大小</li>\n<li>关键字的分布情况</li>\n<li>记录查找的频率</li>\n</ul>\n<h3 id=\"25、处理散列冲突的方法\"><a href=\"#25、处理散列冲突的方法\" class=\"headerlink\" title=\"25、处理散列冲突的方法\"></a>25、处理散列冲突的方法</h3><h4 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h4><p>一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入，公式是：</p>\n<blockquote>\n<p>fi(key)=（f(key)+di）MOD m(di=1,2,3,……,m-1)</p>\n</blockquote>\n<p>这种解决冲突的开放定址法称为<strong>线性探测法</strong><br>如果 di 改进为正负两类值，等于是可以双向寻找到可能的空位置，可以不让关键字都聚集在某一块区域。我们称这种方法为<strong>二次探测法</strong><br>如果 di 采用随机函数计算得到，我们称之为<strong>随机探测法</strong></p>\n<h4 id=\"再散列函数法\"><a href=\"#再散列函数法\" class=\"headerlink\" title=\"再散列函数法\"></a>再散列函数法</h4><p>我们事先准备多个散列函数，每当发生散列地址冲突时，就换一个散列函数计算，相信总会有一个可以把冲突解决掉</p>\n<h4 id=\"链地址法\"><a href=\"#链地址法\" class=\"headerlink\" title=\"链地址法\"></a>链地址法</h4><p>将所有关键字为同义词的记录存储在一个单链表红，我们称这种表尾同义词子表，在散列表中只存储所有同义词子表的头指针</p>\n<h4 id=\"公共溢出区法\"><a href=\"#公共溢出区法\" class=\"headerlink\" title=\"公共溢出区法\"></a>公共溢出区法</h4><p>凡是冲突的都将它们存储到溢出表中</p>\n<h2 id=\"八、排序\"><a href=\"#八、排序\" class=\"headerlink\" title=\"八、排序\"></a>八、排序</h2><p>关于排序，推荐我的另一篇文章：<a href=\"/20170318/js-implementation-of-ten-sorting-algorithms.html\">\b十大排序算法的Javascript实现</a>，这篇文章里有一些常见排序算法的实现步骤以及演示，是一个比较好的排序算法讲解</p>\n<h2 id=\"九、总结\"><a href=\"#九、总结\" class=\"headerlink\" title=\"九、总结\"></a>九、总结</h2><h3 id=\"1、数据结构和算法\"><a href=\"#1、数据结构和算法\" class=\"headerlink\" title=\"1、数据结构和算法\"></a>1、数据结构和算法</h3><p>数据结构和算法对于程序员的职业人生来说，那就是两个圆圈的交集部分，用心去掌握它，你的编程之路将会是坦途</p>\n<div align=\"center\"><img src=\"/images/hexo_post_188.png\" alt=\"\" width=\"350\"></div>","more":"<p>这本书我是在网上下载的电子版，所以可能会有一些错别字，但是无伤大雅；《大话数据结构》被誉为程序员面试必读书籍，我大概用了 3 天的时间详读了一遍，感觉作者的文笔很好，而且很擅长通过生活中的小故事总结相关知识和算法思路，对于计算机初级童鞋来说是一本很好的数据结构入门读物，而且作者对于代码的讲解很详尽，接近逐行解释了，和其他数据结构的书籍形成了鲜明的对比，总体评价五星吧；不过我是在刷完 Leetcode 的 easy 题才看的这本书，感觉先看这本书再刷题的话会好很多</p>\n<h2 id=\"一、数据结构与算法\"><a href=\"#一、数据结构与算法\" class=\"headerlink\" title=\"一、数据结构与算法\"></a>一、数据结构与算法</h2><h3 id=\"1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子\"><a href=\"#1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子\" class=\"headerlink\" title=\"1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子\"></a>1、如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子</h3><h3 id=\"2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科\"><a href=\"#2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科\" class=\"headerlink\" title=\"2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科\"></a>2、数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科</h3><h3 id=\"3、数据元素的存储结构形式有两种：顺序存储和链式存储\"><a href=\"#3、数据元素的存储结构形式有两种：顺序存储和链式存储\" class=\"headerlink\" title=\"3、数据元素的存储结构形式有两种：顺序存储和链式存储\"></a>3、数据元素的存储结构形式有两种：顺序存储和链式存储</h3><ul>\n<li>顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的（谁也别插谁的队）</li>\n<li>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的（需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置）</li>\n</ul>\n<h3 id=\"4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性\"><a href=\"#4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性\" class=\"headerlink\" title=\"4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性\"></a>4、算法具有五个基本特性：输入、输出、有穷性、确定性和可行性</h3><h3 id=\"5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征\"><a href=\"#5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征\" class=\"headerlink\" title=\"5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征\"></a>5、好的算法，应该具有正确性、可读性、健壮性、高效率和低存储量的特征</h3><h3 id=\"6、推导时间复杂度大-O-阶方法：\"><a href=\"#6、推导时间复杂度大-O-阶方法：\" class=\"headerlink\" title=\"6、推导时间复杂度大 O 阶方法：\"></a>6、推导时间复杂度大 O 阶方法：</h3><ol>\n<li>用常数 1 取代运行时间中的所有加法常数</li>\n<li>在修改后的运行次数函数中，只保留最高阶项</li>\n<li>如果最高阶项存在且不是1，则去除与这个项相乘的常数</li>\n</ol>\n<h3 id=\"7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数\"><a href=\"#7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数\" class=\"headerlink\" title=\"7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数\"></a>7、循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数</h3><h3 id=\"8、常见的时间复杂度所耗费的时间：\"><a href=\"#8、常见的时间复杂度所耗费的时间：\" class=\"headerlink\" title=\"8、常见的时间复杂度所耗费的时间：\"></a>8、常见的时间复杂度所耗费的时间：</h3><div align=\"center\"><img src=\"/images/hexo_post_147.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。\"><a href=\"#9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。\" class=\"headerlink\" title=\"9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。\"></a>9、最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。</h3><p>在应用中，这是一种最重要的需求，通常，除非特别制定，我们提到的运行时间都是最坏情况的运行时间 平均运行时间是所有情况中最有意义的，因为它是期望的运行时间</p>\n<h3 id=\"10、算法的空间复杂度\"><a href=\"#10、算法的空间复杂度\" class=\"headerlink\" title=\"10、算法的空间复杂度\"></a>10、算法的空间复杂度</h3><p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数</p>\n<h2 id=\"二、线性表\"><a href=\"#二、线性表\" class=\"headerlink\" title=\"二、线性表\"></a>二、线性表</h2><h3 id=\"1、描述顺序存储结构需要三个属性：\"><a href=\"#1、描述顺序存储结构需要三个属性：\" class=\"headerlink\" title=\"1、描述顺序存储结构需要三个属性：\"></a>1、描述顺序存储结构需要三个属性：</h3><ul>\n<li>存储空间的起始位置：数组 data，它的存储位置就是存储空间的存储位置</li>\n<li>线性表的最大存储容量：数组长度 MaxSize</li>\n<li>线性表的当前长度：length</li>\n</ul>\n<h3 id=\"2、插入算法的思路：\"><a href=\"#2、插入算法的思路：\" class=\"headerlink\" title=\"2、插入算法的思路：\"></a>2、插入算法的思路：</h3><ol>\n<li>如果插入位置不合理，抛出异常</li>\n<li>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量</li>\n<li>从最后一个元素开始向前遍历到第 i 个位置，分别将它们都向后移动一个位置</li>\n<li>将要插入元素填入位置 i 处</li>\n<li>表长加 1</li>\n</ol>\n<h3 id=\"3、删除算法的思路：\"><a href=\"#3、删除算法的思路：\" class=\"headerlink\" title=\"3、删除算法的思路：\"></a>3、删除算法的思路：</h3><ol>\n<li>如果删除位置不合理，抛出异常</li>\n<li>取出删除元素</li>\n<li>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置</li>\n<li>表长减 1</li>\n</ol>\n<h3 id=\"4、线性表的顺序存储结构的优缺点：\"><a href=\"#4、线性表的顺序存储结构的优缺点：\" class=\"headerlink\" title=\"4、线性表的顺序存储结构的优缺点：\"></a>4、线性表的顺序存储结构的优缺点：</h3><p><strong>优点：</strong></p>\n<ul>\n<li>无须为表示表中元素之间的逻辑关系而增加额外的存储空间</li>\n<li>可以快速地存取表中任一位置的元素</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>插入和删除操作需要移动大量元素</li>\n<li>当线性表长度变化较大时，难以确定存储空间的容量</li>\n<li>造成存储空间的“碎片”</li>\n</ul>\n<h3 id=\"5、单链表\"><a href=\"#5、单链表\" class=\"headerlink\" title=\"5、单链表\"></a>5、单链表</h3><p>n 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。单链表正是通过每个结点的指针域将线性表的数据元素按其逻辑次序链接在一起</p>\n<div align=\"center\"><img src=\"/images/hexo_post_148.png\" alt=\"\" width=\"400\"></div>\n\n<p>有时，为了更加方便地对链表进行操作，会在单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息，也可以存储如线性表的长度等附加信息，头结点的指针域存储指向第一个结点的指针：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_149.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"6、头指针与头结点的异同\"><a href=\"#6、头指针与头结点的异同\" class=\"headerlink\" title=\"6、头指针与头结点的异同\"></a>6、头指针与头结点的异同</h3><h4 id=\"头指针\"><a href=\"#头指针\" class=\"headerlink\" title=\"头指针\"></a>头指针</h4><ul>\n<li>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</li>\n<li>头指针具有标识作用，所以常用头指针冠以链表的名字</li>\n<li>无论链表是否为空，头指针均不为空。头指针式链表的必要元素</li>\n</ul>\n<h4 id=\"头结点\"><a href=\"#头结点\" class=\"headerlink\" title=\"头结点\"></a>头结点</h4><ul>\n<li>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）</li>\n<li>有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了</li>\n<li>头结点不一定是链表必须要素</li>\n</ul>\n<h3 id=\"7、获取链表第-i-个数据的算法思路\"><a href=\"#7、获取链表第-i-个数据的算法思路\" class=\"headerlink\" title=\"7、获取链表第 i 个数据的算法思路\"></a>7、获取链表第 i 个数据的算法思路</h3><ol>\n<li>声明一个结点 p 指向链表第一个结点，初始化 j 从 1 开始</li>\n<li>当 j &lt; i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1</li>\n<li>若到链表末尾 p 为空，则说明第 i 个元素不存在</li>\n<li>否则查找成功，返回结点 p 的数据</li>\n</ol>\n<h3 id=\"8、单链表第-i-个数据插入结点的算法思路\"><a href=\"#8、单链表第-i-个数据插入结点的算法思路\" class=\"headerlink\" title=\"8、单链表第 i 个数据插入结点的算法思路\"></a>8、单链表第 i 个数据插入结点的算法思路</h3><ol>\n<li>声明一结点 p 指向链表第一个结点，初始化 j 从 1 开始</li>\n<li>当 j &lt; i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1</li>\n<li>若到链表末尾 p 为空，则说明第 i 个元素不存在</li>\n<li>否则查找成功，在系统中生成一个空结点 s</li>\n<li>将数据元素 e 赋值给 s -&gt; data</li>\n<li>单链表的插入标准语句 s-&gt;next=p-&gt;next;p-&gt;next=s</li>\n<li>返回成功</li>\n</ol>\n<h3 id=\"9、单链表第-i-个数据删除结点的算法思路\"><a href=\"#9、单链表第-i-个数据删除结点的算法思路\" class=\"headerlink\" title=\"9、单链表第 i 个数据删除结点的算法思路\"></a>9、单链表第 i 个数据删除结点的算法思路</h3><ol>\n<li>声明一结点 p 指向链表第一个结点，初始化 j 从 1 开始</li>\n<li>当 j &lt; i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1</li>\n<li>若到链表末尾 p 为空，则说明第 i 个元素不存在</li>\n<li>否则查找成功，\b将欲删除的结点 p -&gt; next 赋值给 q</li>\n<li>单链表的删除标准语句 p-&gt;next=q-&gt;next</li>\n<li>将 q 结点中的数据赋值给 e，作为返回</li>\n<li>释放 q 结点</li>\n<li>返回成功</li>\n</ol>\n<h3 id=\"10、单链表整表创建的算法思路\"><a href=\"#10、单链表整表创建的算法思路\" class=\"headerlink\" title=\"10、单链表整表创建的算法思路\"></a>10、单链表整表创建的算法思路</h3><ol>\n<li>声明一结点 p 和计数器变量 i</li>\n<li>初始化一空链表 L</li>\n<li>让 L 的头结点的指针指向 NULL，即建立一个带头结点的单链表</li>\n<li>循环：</li>\n</ol>\n<ul>\n<li>生成一新结点赋值给 p</li>\n<li>随机生成一数字赋值给 p 的数据域 p-&gt;data</li>\n<li>将 p 插入到头结点与前一新节点之间</li>\n</ul>\n<h3 id=\"11、单链表的整表删除\"><a href=\"#11、单链表的整表删除\" class=\"headerlink\" title=\"11、单链表的整表删除\"></a>11、单链表的整表删除</h3><ol>\n<li>声明一结点 p 和 q</li>\n<li>将第一个结点赋值给 p</li>\n<li>循环：</li>\n</ol>\n<ul>\n<li>将下一结点赋值给 q</li>\n<li>释放 p</li>\n<li>将 q 赋值给 p</li>\n</ul>\n<h3 id=\"12、单链表结构和顺序存储结构做对比\"><a href=\"#12、单链表结构和顺序存储结构做对比\" class=\"headerlink\" title=\"12、单链表结构和顺序存储结构做对比\"></a>12、单链表结构和顺序存储结构做对比</h3><div align=\"center\"><img src=\"/images/hexo_post_150.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"13、所谓的成功男人就是-3-岁时不尿裤子，5-岁能自己吃饭……80-岁能自己吃饭，90-岁能不尿裤子\"><a href=\"#13、所谓的成功男人就是-3-岁时不尿裤子，5-岁能自己吃饭……80-岁能自己吃饭，90-岁能不尿裤子\" class=\"headerlink\" title=\"13、所谓的成功男人就是 3 岁时不尿裤子，5 岁能自己吃饭……80 岁能自己吃饭，90 岁能不尿裤子\"></a>13、所谓的成功男人就是 3 岁时不尿裤子，5 岁能自己吃饭……80 岁能自己吃饭，90 岁能不尿裤子</h3><h3 id=\"14、循环链表\"><a href=\"#14、循环链表\" class=\"headerlink\" title=\"14、循环链表\"></a>14、循环链表</h3><p>将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表（circular linked list）:</p>\n<div align=\"center\"><img src=\"/images/hexo_post_151.png\" alt=\"\" width=\"500\"></div>\n\n<p>循环链表和单链表的主要差异就在于循环的判断条件上，原来是判断 p-&gt;next 是否为空，现在则是 <strong>p-&gt;next 不等于头结点，则循环未结束</strong></p>\n<h3 id=\"15、合并两个循环链表\"><a href=\"#15、合并两个循环链表\" class=\"headerlink\" title=\"15、合并两个循环链表\"></a>15、合并两个循环链表</h3><div align=\"center\"><img src=\"/images/hexo_post_152.png\" alt=\"\" width=\"500\"></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p=rearA-&gt;next;                   /* 保存A表的头结点，即① */</span><br><span class=\"line\">rearA-&gt;next=rearB-&gt;next-&gt;next;   /* 将本是指向B表的第一个结点（不是头结点） */</span><br><span class=\"line\">                                 /* 赋值给rearA-&gt;next，即 ②*/</span><br><span class=\"line\">rearB-&gt;next=p;                   /* 将原A表的头结点赋值给rearB-&gt;next，即③ */</span><br><span class=\"line\">free(p);                         /* 释放p */</span><br></pre></td></tr></table></figure>\n<h3 id=\"16、双向链表\"><a href=\"#16、双向链表\" class=\"headerlink\" title=\"16、双向链表\"></a>16、双向链表</h3><p>双向链表（double linked list）是在单链表的每个结点中，再设置一个指向其前驱结点的指针域</p>\n<h3 id=\"17、双向链表的插入\"><a href=\"#17、双向链表的插入\" class=\"headerlink\" title=\"17、双向链表的插入\"></a>17、双向链表的插入</h3><p>假设存储元素 e 的结点为 s，要实现将结点 s 插入到结点 p 和 p-&gt;next 之间需要下面几步：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_153.png\" alt=\"\" width=\"400\"></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s-&gt;prior=p;           /* 把 p 赋值给 s 的前驱，如图中① */</span><br><span class=\"line\">s-&gt;next=p-&gt;next;      /* 把 p-&gt;next 赋值给 s 的后继，如图中② */</span><br><span class=\"line\">p-&gt;next-&gt;prior=s;     /* 把 s 赋值给 p-&gt;next 的前驱，如图中③ */</span><br><span class=\"line\">p-&gt;next=s;            /* 把 s 赋值给 p 的后继，如图中④ */</span><br></pre></td></tr></table></figure>\n<h3 id=\"18、线性表的总结\"><a href=\"#18、线性表的总结\" class=\"headerlink\" title=\"18、线性表的总结\"></a>18、线性表的总结</h3><div align=\"center\"><img src=\"/images/hexo_post_154.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"三、栈与队列\"><a href=\"#三、栈与队列\" class=\"headerlink\" title=\"三、栈与队列\"></a>三、栈与队列</h2><h3 id=\"1、栈的定义\"><a href=\"#1、栈的定义\" class=\"headerlink\" title=\"1、栈的定义\"></a>1、栈的定义</h3><p>栈（stack）是限定<strong>仅在表尾进行插入和删除操作</strong>的线性表，我们把允许插入和删除的一端称为<strong>栈顶</strong>（top），另一端称为<strong>栈底</strong>（bottom），不含任何数据元素的栈称为<strong>空栈</strong></p>\n<h3 id=\"2、当栈存在一个元素时，top-等于-0，因此通常把空栈的判定条件定位-top-等于-1（索引值从-0-开始）\"><a href=\"#2、当栈存在一个元素时，top-等于-0，因此通常把空栈的判定条件定位-top-等于-1（索引值从-0-开始）\" class=\"headerlink\" title=\"2、当栈存在一个元素时，top 等于 0，因此通常把空栈的判定条件定位 top 等于 -1（索引值从 0 开始）\"></a>2、当栈存在一个元素时，top 等于 0，因此通常把空栈的判定条件定位 top 等于 -1（索引值从 0 开始）</h3><h3 id=\"3、用一个数组来存储两个栈\"><a href=\"#3、用一个数组来存储两个栈\" class=\"headerlink\" title=\"3、用一个数组来存储两个栈\"></a>3、用一个数组来存储两个栈</h3><div align=\"center\"><img src=\"/images/hexo_post_155.png\" alt=\"\" width=\"700\"></div>\n\n<p>数组有两个端点，两个栈有两个栈底，让一个栈的栈底为数组的始端，即下标为 0 处，另一个栈为栈的末端，即下标为数组长度 n - 1 处。这样，如果两个栈增加元素，就是两端点向中间延伸</p>\n<p><strong>两个栈见面之时，也就是两个指针之间相差 1 时，即 top1 + 1 == top2为栈满</strong></p>\n<h3 id=\"4、递归定义\"><a href=\"#4、递归定义\" class=\"headerlink\" title=\"4、递归定义\"></a>4、递归定义</h3><p>一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做递归函数；每个递归定义必须至少有一个条件，满足时递归不再进行，即不再引用自身而是返回值退出</p>\n<h3 id=\"5、队列定义\"><a href=\"#5、队列定义\" class=\"headerlink\" title=\"5、队列定义\"></a>5、队列定义</h3><p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表；允许插入的一端称为队尾，允许删除的一端称为队头</p>\n<h3 id=\"6、队列的链式存储结构\"><a href=\"#6、队列的链式存储结构\" class=\"headerlink\" title=\"6、队列的链式存储结构\"></a>6、队列的链式存储结构</h3><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列；队头指针指向链队列的头结点，而队尾指针指向终端结点：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_156.png\" alt=\"\" width=\"400\"></div>\n\n<p>空队列时，front 和 rear 都指向头结点</p>\n<h3 id=\"7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列\"><a href=\"#7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列\" class=\"headerlink\" title=\"7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列\"></a>7、在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列</h3><h3 id=\"8、栈和队列的存储结构\"><a href=\"#8、栈和队列的存储结构\" class=\"headerlink\" title=\"8、栈和队列的存储结构\"></a>8、栈和队列的存储结构</h3><div align=\"center\"><img src=\"/images/hexo_post_295.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"9、关于栈和队列的人生感悟\"><a href=\"#9、关于栈和队列的人生感悟\" class=\"headerlink\" title=\"9、关于栈和队列的人生感悟\"></a>9、关于栈和队列的人生感悟</h3><p>人生，就像是一个很大的栈演变。出生时你赤条条地来到人世，慢慢地长大，渐渐地变老，最终还得赤条条地离开世间。<br>人生，又仿佛是一天一天小小的栈重现。童年父母每天抱你不断地进出家门，壮年你每天奔波于家与事业之间，老年你每天独自蹒跚于养老院的门里屋前。<br>人生，更需要有进栈出栈精神的体现。在哪里跌倒，就应该在哪里爬起来。无论陷入何等困境，只要抬头能仰望蓝天，就有希望，不断进取，你就可以让出头之日重现。困难不会永远存在，强者才能勇往直前。<br>人生，其实就是一个大大的队列演变。无知童年、快乐少年，稚傲青年，成熟中年，安逸晚年。<br>人生，又是一个又一个小小的队列重现。春夏秋冬轮回年年，早中晚夜循环天天。变化的是时间，不变的是你对未来执着的信念。<br>人生，更需要有队列精神的体现。南极到北极，不过是南纬90度到北纬90度的队列，如果你中途犹豫，临时转向，也许你就只能和企鹅相伴永远。可事实上，无论哪个方向，只要你坚持到底，你都可以到达终点。</p>\n<h2 id=\"四、串（字符串）\"><a href=\"#四、串（字符串）\" class=\"headerlink\" title=\"四、串（字符串）\"></a>四、串（字符串）</h2><h3 id=\"1、一首回文诗（李禺《两相思》）\"><a href=\"#1、一首回文诗（李禺《两相思》）\" class=\"headerlink\" title=\"1、一首回文诗（李禺《两相思》）\"></a>1、一首回文诗（李禺《两相思》）</h3><blockquote>\n<p>枯眼望遥山隔水，<br>往来曾见几心知？<br>壶空怕酌一杯酒，<br>笔下难成和韵诗。<br>途路阻人离别久，<br>讯音无雁寄回迟。<br>孤灯夜守长寥寂，<br>夫忆妻兮父忆儿。</p>\n</blockquote>\n<p>更多回文诗可以<a href=\"http://baike.baidu.com/link?url=VNTgFjBN0q2gekPkKqes9MWMtdOqf8_THZ-MuEh3vJTBKi88oJmvcrHNAkswt_oKY5pR58CL8C0CPKEHFfLFQpb6ZOQPU3W4G-P9z9gv6P2D4cO1CxwgyrBQNUg3fGfu\" target=\"_blank\" rel=\"noopener\">戳我一下</a></p>\n<h3 id=\"2、英语单词中的字符串\"><a href=\"#2、英语单词中的字符串\" class=\"headerlink\" title=\"2、英语单词中的字符串\"></a>2、英语单词中的字符串</h3><p>即使是 lover 也有个 over，即使是 friend 也有个 end，即使是 believe 也有个lie</p>\n<h3 id=\"3、关于字符串的一些概念\"><a href=\"#3、关于字符串的一些概念\" class=\"headerlink\" title=\"3、关于字符串的一些概念\"></a>3、关于字符串的一些概念</h3><p><strong>空格串</strong>：是只包含空格的串，空格串是有内容有长度的，而且可以不止一个空格<br>子串与主串：串中任意个数的连续字符组成的子序列称为该串的<strong>子串</strong>，相应地，包含子串的串称为<strong>主串</strong><br><strong>子串在主串中的位置</strong>：就是子串的第一个字符在主串中的序号</p>\n<h3 id=\"4、Unicode-和-ASCII-编码\"><a href=\"#4、Unicode-和-ASCII-编码\" class=\"headerlink\" title=\"4、Unicode 和 ASCII 编码\"></a>4、Unicode 和 ASCII 编码</h3><p>\b计算机中的常用字符是使用标准的 ASCII 编码，更准确一点，由 7 位二进制数表示一个字符，总共可以表示 128 个字符。后来发现一些特殊符号的出现，128 个不够用，于是扩展 ASCII 码由 8 位二进制数表示一个字符，总共可以表示 256 个字符；可是换做全世界估计要有成百上千种语言与文字，显然这 256 个字符是不够的，因此后来就有了 Unicode 编码，比较常用的是由 16 位的二进制数表示一个字符，这样总共就可以表示 216 个字符，约是 65 万多个字符，足够表示世界上所有语言的所有字符了。当然，为了和 ASCII 码兼容，Unicode 的前 256 个字符与 ASCII 码完全相同</p>\n<h3 id=\"5、两个字符串的比较\"><a href=\"#5、两个字符串的比较\" class=\"headerlink\" title=\"5、两个字符串的比较\"></a>5、两个字符串的比较</h3><p>给定两个串：s=”a1a2……an”，t=”b1b2……bm”，当满足以下条件之一时，s &lt; t</p>\n<ul>\n<li>n &lt; m，且 ai=bi（i=1，2，……n），例如当 s=”hap”，t=”happy”，就有 s &lt; t。因为 t 比 s 多出了两个字母</li>\n<li>存在某个 k ≤ min(m,n)，使得 ai = bi（i=1，2，……，,k-1），ak &lt; bk，例如当 s=”happen”，t=”happy”，因为两串的前 4 个字母均相同，而两串第 5 个字母（k 值），字母 e 的 ASCII 码是 101，而字母 y 的 ASCII 码是 121，显然 e &lt; y，所以 s &lt; t</li>\n</ul>\n<h2 id=\"五、树\"><a href=\"#五、树\" class=\"headerlink\" title=\"五、树\"></a>五、树</h2><h3 id=\"1、一些概念\"><a href=\"#1、一些概念\" class=\"headerlink\" title=\"1、一些概念\"></a>1、一些概念</h3><ul>\n<li>结点拥有的子树数称为结点的度（Degree）；</li>\n<li>度为 0 的结点称为叶节点（Leaf）或终端结点；</li>\n<li>度不为 0 的结点称为非终端结点或分支结点；</li>\n<li>除根结点之外，分支结点也成为内部结点树的度是树内各结点的度的最大值</li>\n<li>树中结点的最大层次称为树的深度（Depth）或高度</li>\n</ul>\n<h3 id=\"2、线性表与树的结构\"><a href=\"#2、线性表与树的结构\" class=\"headerlink\" title=\"2、线性表与树的结构\"></a>2、线性表与树的结构</h3><div align=\"center\"><img src=\"/images/hexo_post_158.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"3、双亲表示法\"><a href=\"#3、双亲表示法\" class=\"headerlink\" title=\"3、双亲表示法\"></a>3、双亲表示法</h3><p>以一组连续空间存储树的结点，同时在每个结点中，附设一个指示器指示其双亲结点到链表中的位置；由于根结点是没有双亲的，所以我们约定根结点的位置域设置为 -1：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_159.png\" alt=\"\" width=\"300\"></div>\n\n<p>这样的存储结构，我们可以根据结点的 parent 指针很容易找到它的双亲结点，知道 parent 为 -1 时，表示找到了树结点的根。可如果我们要知道结点的孩子是什么，需要遍历整个结构。</p>\n<h3 id=\"4、多重链表表示法\"><a href=\"#4、多重链表表示法\" class=\"headerlink\" title=\"4、多重链表表示法\"></a>4、多重链表表示法</h3><p>由于树中每个结点可能有多棵子树，可以考虑用多重链表，即每个结点有多个指针域，其中每个指针指向一棵子树的根节点，我们把这种方法叫做多重链表表示法；不过，树的每个结点的度，也就是孩子个数是不同的，所以可以设计两种方案来解决：</p>\n<h4 id=\"方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）\"><a href=\"#方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）\" class=\"headerlink\" title=\"方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）\"></a>方案一：指针域的个数就等于树的度（树的度是树各个结点度的最大值）</h4><div align=\"center\"><img src=\"/images/hexo_post_160.png\" alt=\"\" width=\"500\"></div>\n\n<p>其中 data 是数据域，child1 到 childd 是指针域，用来指向该结点的孩子结点，这种方法对于树中各结点的度相差很大时，显然是很浪费空间的，因为有很多的结点，它的指针域都是空的</p>\n<h4 id=\"方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数\"><a href=\"#方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数\" class=\"headerlink\" title=\"方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数\"></a>方案二：每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数</h4><div align=\"center\"><img src=\"/images/hexo_post_296.png\" alt=\"\" width=\"500\"></div>\n\n<p>这种方法提升了空间利用率，但是由于各个结点的链表是不相同的结构，加上要维护结点的度的数值，在运算上就会带来时间上的损耗</p>\n<h3 id=\"5、孩子表示法\"><a href=\"#5、孩子表示法\" class=\"headerlink\" title=\"5、孩子表示法\"></a>5、孩子表示法</h3><p>把每个结点的孩子结点排列起来，以单链表作存储结构，则 n 个结点有 n 个孩子链表，如果是叶子结点则此单链表为空。然后 n 个头指针又组成一个线性表，采用顺序存储结构，存放进一个一维数组中：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_162.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"6、双亲孩子表示法\"><a href=\"#6、双亲孩子表示法\" class=\"headerlink\" title=\"6、双亲孩子表示法\"></a>6、双亲孩子表示法</h3><div align=\"center\"><img src=\"/images/hexo_post_163.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"7、孩子兄弟表示法\"><a href=\"#7、孩子兄弟表示法\" class=\"headerlink\" title=\"7、孩子兄弟表示法\"></a>7、孩子兄弟表示法</h3><p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_164.png\" alt=\"\" width=\"300\"></div>\n\n<p>data 是数据域，firstchild 为指针域，存储该结点的第一个孩子结点的存储地址，rightsib 是指针域，存储该结点的右兄弟结点的存储地址，这个表示法的最大好处是它把一棵复杂的树变成了一棵二叉树</p>\n<h3 id=\"8、二叉树特点\"><a href=\"#8、二叉树特点\" class=\"headerlink\" title=\"8、二叉树特点\"></a>8、二叉树特点</h3><ul>\n<li>每个结点最多有两棵子树，所以二叉树中不存在度大于 2 的结点（没有子树或者有一棵子树都是可以的）</li>\n<li>左子树和右子树是有顺序的，次序不能任意颠倒</li>\n<li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树</li>\n</ul>\n<h3 id=\"9、二叉树五种基本形态\"><a href=\"#9、二叉树五种基本形态\" class=\"headerlink\" title=\"9、二叉树五种基本形态\"></a>9、二叉树五种基本形态</h3><ol>\n<li>空二叉树</li>\n<li>只有一个根结点</li>\n<li>根结点只有左子树</li>\n<li>根结点只有右子树</li>\n<li>根结点既有左子树又有右子树</li>\n</ol>\n<h3 id=\"10、特殊二叉树\"><a href=\"#10、特殊二叉树\" class=\"headerlink\" title=\"10、特殊二叉树\"></a>10、特殊二叉树</h3><h4 id=\"斜树\"><a href=\"#斜树\" class=\"headerlink\" title=\"斜树\"></a>斜树</h4><p>所有的结点都只有左子树的二叉树叫左斜树，所有结点都是只有右子树的二叉树叫右斜树，这两者统称为斜树</p>\n<h4 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h4><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树</p>\n<h4 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h4><p>对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i（1≤i≤n）的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_165.png\" alt=\"\" width=\"400\"></div>\n\n<p><strong>完全二叉树的特点：</strong></p>\n<ul>\n<li>叶子结点只能出现在最下两层</li>\n<li>最下层的叶子一定集中在左部连续位置</li>\n<li>倒数二层，若有叶子结点，一定都在右部连续位置</li>\n<li>如果结点度为 1，则该节点只有左孩子，即不存在只有右子树的情况</li>\n<li>同样结点数的二叉树，完全二叉树的深度最小</li>\n</ul>\n<h3 id=\"11、二叉树的性质\"><a href=\"#11、二叉树的性质\" class=\"headerlink\" title=\"11、二叉树的性质\"></a>11、二叉树的性质</h3><ol>\n<li>在二叉树的第 i 层上至多有 <strong>2i-1</strong> 个结点（i ≥ 1）</li>\n<li>深度为 k 的二叉树至多有 <strong>2k-1</strong> 个结点（k ≥ 1）</li>\n<li>对任何一棵二叉树 T，如果其终端结点数为 <strong>n0</strong>，度为 2 的节点数为 <strong>n2</strong>，则 <strong>n0 = n2 + 1</strong>（解释见下图）</li>\n<li>具有 n 个结点的完全二叉树的深度为 <strong>⌊log2n⌋ + 1</strong>（⌊x⌋ 表示不大于 x 的最大整数）</li>\n<li>如果对一棵有 n 个结点的完全二叉树（其深度为 ⌊log2n⌋+1）的结点按层序编号（从第 1 层到第 ⌊log2n⌋ + 1 层，每层从左到右），对任一结点 i（1≤i≤n）有：</li>\n</ol>\n<ul>\n<li>如果 i = 1，则结点i是二叉树的根，无双亲；如果 i &gt; 1，则其双亲是结点 ⌊i / 2⌋</li>\n<li>如果 2i &gt; n，则结点 i 无左孩子（结点 i 为叶子结点）；否则其左结点是结点 2i</li>\n<li>如果 2i + 1 &gt; n，则结点 i 无右孩子；否则其右孩子是结点 2i + 1</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_166.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"12、二叉链表\"><a href=\"#12、二叉链表\" class=\"headerlink\" title=\"12、二叉链表\"></a>12、二叉链表</h3><p>二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表叫做二叉链表：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_167.png\" alt=\"\" width=\"300\"></div>\n\n<p>其中 data 是数据域，lchild 和 rchild 都是指针域，分别存放指向左孩子和右孩子的指针</p>\n<h3 id=\"13、二叉树遍历方法\"><a href=\"#13、二叉树遍历方法\" class=\"headerlink\" title=\"13、二叉树遍历方法\"></a>13、二叉树遍历方法</h3><h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树，遍历的顺序为：ABDGHCEIF</p>\n<div align=\"center\"><img src=\"/images/hexo_post_168.png\" alt=\"\" width=\"300\"></div>\n\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树，遍历的顺序为：GDHBAEICF</p>\n<div align=\"center\"><img src=\"/images/hexo_post_169.png\" alt=\"\" width=\"300\"></div>\n\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根结点，遍历的顺序为：GHDBIEFCA</p>\n<div align=\"center\"><img src=\"/images/hexo_post_170.png\" alt=\"\" width=\"300\"></div>\n\n<h4 id=\"层序遍历\"><a href=\"#层序遍历\" class=\"headerlink\" title=\"层序遍历\"></a>层序遍历</h4><p>若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序堆结点逐个访问，遍历的顺序为：ABCDEFGHI</p>\n<div align=\"center\"><img src=\"/images/hexo_post_171.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"14、两个二叉树遍历的性质\"><a href=\"#14、两个二叉树遍历的性质\" class=\"headerlink\" title=\"14、两个二叉树遍历的性质\"></a>14、两个二叉树遍历的性质</h3><ul>\n<li>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</li>\n<li>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</li>\n<li>但是已知前序和后序遍历，是不能确定一棵二叉树的</li>\n</ul>\n<h3 id=\"15、线索二叉树\"><a href=\"#15、线索二叉树\" class=\"headerlink\" title=\"15、线索二叉树\"></a>15、线索二叉树</h3><p>指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索二叉树</p>\n<div align=\"center\"><img src=\"/images/hexo_post_172.png\" alt=\"\" width=\"500\"></div>\n\n<p>通过上图（空心箭头实线为前驱，虚线黑箭头为后继），可以看出，其实线索二叉树，等于是把一棵二叉树转变成了一个双向链表；所以我们对二叉树以某种次序遍历使其变为线索二叉树的过程称做是线索化；但是，我们并不知道某一结点的 lchild 是指向它的左孩子还是指向前驱，所以需要一个区分标致；因此，我们在每个结点再增设两个标志域 ltag 和 rtag，这两个 tag 只是存放 0 或 1 数字的布尔型变量，其占用的内存空间要小于像 lchild 和 rchild 的指针变量，结点结构如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_173.png\" alt=\"\" width=\"400\"></div>\n\n<ul>\n<li>ltag 为 0 时指向该结点的左孩子，为 1 时指向该结点的前驱</li>\n<li>rtag 为 0 时指向该结点的右孩子，为 1 时指向该结点的后继</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_174.png\" alt=\"\" width=\"500\"></div>\n\n<p><strong>如果所用的二叉树需经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择</strong></p>\n<h3 id=\"16、树转换为二叉树\"><a href=\"#16、树转换为二叉树\" class=\"headerlink\" title=\"16、树转换为二叉树\"></a>16、树转换为二叉树</h3><ol>\n<li>加线，在所有兄弟结点之间加一条连线</li>\n<li>去线，对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线</li>\n<li>层次调整，以树的根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明，注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_175.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"17、森林转换为二叉树\"><a href=\"#17、森林转换为二叉树\" class=\"headerlink\" title=\"17、森林转换为二叉树\"></a>17、森林转换为二叉树</h3><ol>\n<li>把每个树转换为二叉树</li>\n<li>第一棵二叉树不动，从第二棵二叉树开始，以此把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来，当所有的二叉树连接起来后就得到了由森林转换来的二叉树</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_176.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"18、二叉树转换为树\"><a href=\"#18、二叉树转换为树\" class=\"headerlink\" title=\"18、二叉树转换为树\"></a>18、二叉树转换为树</h3><ol>\n<li>加线，若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结点……哈，反正就是左孩子的 n 个右孩子结点都作为此结点的孩子，将该结点与这些右孩子结点用线连接起来</li>\n<li>去线，删除原二叉树中所有结点与其右孩子结点的连线</li>\n<li>层次调整，使之结构层次分明</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_177.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"19、二叉树转换为森林\"><a href=\"#19、二叉树转换为森林\" class=\"headerlink\" title=\"19、二叉树转换为森林\"></a>19、二叉树转换为森林</h3><p>判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树</p>\n<ol>\n<li>从根结点开始，若右孩子存在，则把与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在，则连线删除……，直到所有右孩子连线都删除为止，得到分离的二叉树</li>\n<li>再将每棵分离后的二叉树转换为树即可</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_178.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"20、树的遍历\"><a href=\"#20、树的遍历\" class=\"headerlink\" title=\"20、树的遍历\"></a>20、树的遍历</h3><ol>\n<li>一种是先根遍历树，即先访问树的根结点，然后依次先根遍历根的每棵子树</li>\n<li>另一种是后根遍历，即先依次后根遍历每棵子树，然后再访问根结点</li>\n</ol>\n<h3 id=\"21、森林的遍历\"><a href=\"#21、森林的遍历\" class=\"headerlink\" title=\"21、森林的遍历\"></a>21、森林的遍历</h3><ol>\n<li>前序遍历：先访问森林中第一棵树的根结点，然后再依次先跟遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林</li>\n<li>后序遍历：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林</li>\n</ol>\n<p><strong>森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树中的中序遍历结果相同</strong></p>\n<h3 id=\"22、赫夫曼树算法描述\"><a href=\"#22、赫夫曼树算法描述\" class=\"headerlink\" title=\"22、赫夫曼树算法描述\"></a>22、赫夫曼树算法描述</h3><ol>\n<li>根据给定的n个权值 {w1，w2，···wn} 构成 n 棵二叉树的集合 F={T1，T2，···Tn}，其中每个二叉树 Ti 中只有一个带权为 wi 的根结点，其左右子树均为空。</li>\n<li>在 F 中选择两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且置新的二叉树的根结点的权值为其左、右子树上根结点的权值之和。</li>\n<li>在 F 中删除这两棵树，同时将新得到的二叉树加入 F 中。</li>\n<li>重复 2 和 3，直到 F 只含一棵树为止。这棵树便是赫夫曼树。</li>\n</ol>\n<h3 id=\"23、赫夫曼编码\"><a href=\"#23、赫夫曼编码\" class=\"headerlink\" title=\"23、赫夫曼编码\"></a>23、赫夫曼编码</h3><p>一般地，设需要编码的字符集为 {d1，d2，···dn}，各个字符在电文中出现的次数或频率集合为 {w1，w2，···wn}，以 d1，d2，···dn 作为叶子结点，以 w1，w2，···wn 作为相应叶子结点的权值来构造一棵赫夫曼树。规定赫夫曼树的左分支代表 0，右分支代表 1，则从根结点到叶子结点所经过的路径分支组成的 0 和 1 的序列便为该结点对应字符的编码，这就是赫夫曼编码</p>\n<h2 id=\"六、图\"><a href=\"#六、图\" class=\"headerlink\" title=\"六、图\"></a>六、图</h2><h3 id=\"1、图的定义\"><a href=\"#1、图的定义\" class=\"headerlink\" title=\"1、图的定义\"></a>1、图的定义</h3><p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V，E），其中，G 表示一个图，V 是图 G 中顶点的集合，E 是图 G 中边的集合</p>\n<h3 id=\"2、关于图的一些定义\"><a href=\"#2、关于图的一些定义\" class=\"headerlink\" title=\"2、关于图的一些定义\"></a>2、关于图的一些定义</h3><ul>\n<li><strong>无向边</strong>：若顶点 vi 到 vj 之间的边没有方向，则称这条边为无向边（Edge），用无需偶对（vi，vj）来表示</li>\n<li><p><strong>有向边</strong>：若从顶点 vi 到 vj 的边有方向，则称这条边为有向边，也成为弧（Arc）<br><strong>无向边用小括号 “()” 表示，而有向边则是用尖括号 “&lt;&gt;” 表示</strong></p>\n</li>\n<li><p>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为<strong>简单图</strong></p>\n</li>\n<li>在无向图中，如果任意两个顶点之间都存在边，则称该图为<strong>无向完全图</strong></li>\n<li>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为<strong>有向完全图</strong></li>\n<li>有很少条边或弧的图称为<strong>稀疏图</strong>，反之称为<strong>稠密图</strong></li>\n<li>这里稀疏和稠密是模糊的概念，是相对而言的 有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做<strong>权</strong>（Weight）</li>\n<li>带权的图通常称为<strong>网</strong>（Network）</li>\n<li>假设有两个图 G =（V，{E}）和G’ =（V’，{E’}），如果 V’ ⊆ V 且 E’ ⊆ E，则称 G’ 为 G 的<strong>子图</strong>（Subgraph）</li>\n<li>图中顶点间存在路径，两顶点存在路径则说明是连通的，如果路径最终回到起始点则称为环，当中不重复叫简单路径。</li>\n<li>若任意两顶点都是连通的，则图就是连通图，有向则称强连通图。</li>\n<li>图中有子图，若子图极大连通则就是连通分量，有向的则称强连通分量 无向图中连通且n个顶点n-1条边叫生成树。</li>\n<li>有向图中一顶点入度为0其余顶点入度为1的叫有向树。</li>\n<li>一个有向图由若干棵有向树构成生成森林</li>\n</ul>\n<blockquote>\n<p>由于定义实在太多，就不再叙述了，可以<a href=\"http://blog.csdn.net/luoweifu/article/details/9270439\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看关于图的其他定义</p>\n</blockquote>\n<h3 id=\"3、图的邻接矩阵\"><a href=\"#3、图的邻接矩阵\" class=\"headerlink\" title=\"3、图的邻接矩阵\"></a>3、图的邻接矩阵</h3><p>图的邻接矩阵（Adiacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息 n 个顶点和 e 条边的无向网图的创建，时间复杂度为 O（n+n2+e），其中对邻接矩阵的初始化需要耗费 O（n2）的时间</p>\n<h3 id=\"4、邻接表\"><a href=\"#4、邻接表\" class=\"headerlink\" title=\"4、邻接表\"></a>4、邻接表</h3><p>数组与链表相结合的存储方法称为邻接表 图中顶点用一个一维数组存储，当然，顶点也可以用单链表来存储，不过数组可以较容易地读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息 图中每个顶点 vi 的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点 vi 的边表，有向图则称为顶点 vi 作为弧尾的出边表</p>\n<div align=\"center\"><img src=\"/images/hexo_post_179.png\" alt=\"\" width=\"600\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_180.png\" alt=\"\" width=\"600\"></div>\n\n<p>若是有向图，邻接表结构是类似的，但我们是以顶点为弧尾来存储边表的，这样很容易就可以得到每个顶点的出度，但也有时为了便于确定顶点的入度或以顶点为弧头的弧，我们可以建立<strong>一个有向图的逆邻接表，即对每个顶点 vi 都建立一个链接为 vi 为弧头的表</strong> 对于带权值的网图，可以在边表结点定义中再<strong>增加一个 weight 的数据域</strong>，存储权值信息即可</p>\n<h3 id=\"5、图的遍历\"><a href=\"#5、图的遍历\" class=\"headerlink\" title=\"5、图的遍历\"></a>5、图的遍历</h3><p>从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做图的遍历（Traversing Graph）</p>\n<h3 id=\"6、深度优先遍历（DFS）\"><a href=\"#6、深度优先遍历（DFS）\" class=\"headerlink\" title=\"6、深度优先遍历（DFS）\"></a>6、深度优先遍历（DFS）</h3><p>从图中某个顶点 v 出发，访问此顶点，然后从 v 的未被访问的邻接点出发深度优先遍历图，直至图中所有和 v 有路径相通的顶点都被访问到，若图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止</p>\n<h3 id=\"7、广度优先遍历（BFS）\"><a href=\"#7、广度优先遍历（BFS）\" class=\"headerlink\" title=\"7、广度优先遍历（BFS）\"></a>7、广度优先遍历（BFS）</h3><p>如果说<strong>图的深度优先遍历类似树的前序遍历，那么图的广度优先遍历就类似于树的层序遍历</strong>了，如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_181.png\" alt=\"\" width=\"450\"></div>\n\n<h3 id=\"8、图的两种遍历方式的比较\"><a href=\"#8、图的两种遍历方式的比较\" class=\"headerlink\" title=\"8、图的两种遍历方式的比较\"></a>8、图的两种遍历方式的比较</h3><p>两者在时间复杂度上是一样的，不同之处仅仅在于对顶点访问的顺序不同，可见两者在全图遍历上是没有优劣之分的，只是视不同的情况选择不同的算法。不过，深度优先更适合目标比较明确，以找到目标为主要目的的情况，而广度优先更适合在不断扩大遍历范围时找到相对最优解的情况</p>\n<h3 id=\"9、最小生成树\"><a href=\"#9、最小生成树\" class=\"headerlink\" title=\"9、最小生成树\"></a>9、最小生成树</h3><p>我们把构造连通网的最小代价生成树称为<strong>最小生成树</strong>（Minimum Cost Spanning Tree）<br>找连通网的最小生成树，经典的有两种算法，<strong>普利姆算法</strong>和<strong>克鲁斯卡尔算法</strong></p>\n<h3 id=\"10、普利姆（Prim）算法\"><a href=\"#10、普利姆（Prim）算法\" class=\"headerlink\" title=\"10、普利姆（Prim）算法\"></a>10、普利姆（Prim）算法</h3><h4 id=\"算法思路：\"><a href=\"#算法思路：\" class=\"headerlink\" title=\"算法思路：\"></a>算法思路：</h4><p>以某顶点为起点，逐步找各顶点上最小权值的边来构建最小生成树</p>\n<h4 id=\"算法步骤：\"><a href=\"#算法步骤：\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><ol>\n<li>输入：一个加权连通图，其中顶点集合为 V，边集合为 E；</li>\n<li>初始化：Vnew = {x}，其中 x 为集合 V 中的任一节点（起始点），Enew = {}，为空；</li>\n<li>重复下列操作，直到 Vnew = V：</li>\n</ol>\n<ul>\n<li>在集合 E 中选取权值最小的边 <code>&lt;u, v&gt;</code>，其中 u 为集合 Vnew 中的元素，而 v 不在 <code>Vnew</code> 集合当中，并且 v∈V（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）；</li>\n<li>将 v 加入集合 Vnew 中，将 <code>&lt;u, v&gt;</code> 边加入集合 Enew 中；</li>\n</ul>\n<ol start=\"4\">\n<li>输出：使用集合 Vnew 和 Enew 来描述所得到的最小生成树。</li>\n</ol>\n<p>书中有非常详尽的解释，但是感觉解释的比较繁琐，建议去看一下<a href=\"http://baike.baidu.com/link?url=9SZQiA3Zm97fe1rIVtGuUCX0FszUTNnk2Qv5XwbPNZpFvjKgRfCL5PnqfPrEo2RdJQo1Asw2bdQx4RujLJL78X8AbfsvN6TUbVKl7w8a2CNQEADeXcqZydK4wrEmYFXybxEKUnpa83ksvSxsJS-zSbyMgjt-9r5Zx3aMquBsMJ26Qj_m2irhgVvsJsxw0QB8\" target=\"_blank\" rel=\"noopener\">百度百科</a>中的讲解</p>\n<h3 id=\"11、克鲁斯卡尔（Kruskal）算法\"><a href=\"#11、克鲁斯卡尔（Kruskal）算法\" class=\"headerlink\" title=\"11、克鲁斯卡尔（Kruskal）算法\"></a>11、克鲁斯卡尔（Kruskal）算法</h3><h4 id=\"算法思路：-1\"><a href=\"#算法思路：-1\" class=\"headerlink\" title=\"算法思路：\"></a>算法思路：</h4><p>因为权值是在边上，所以直接去找最小权值的边来构建生成树，只不过构建时要考虑是否会形成环路而已</p>\n<h4 id=\"算法步骤：-1\"><a href=\"#算法步骤：-1\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><p>先构造一个只含 n 个顶点、而边集为空的子图，把子图中各个顶点看成各棵树上的根结点，之后，从网的边集 E 中选取一条权值最小的边，若该条边的两个顶点分属不同的树，则将其加入子图，即把两棵树合成一棵树，反之，若该条边的两个顶点已落在同一棵树上，则不可取，而应该取下一条权值最小的边再试之。依次类推，直到森林中只有一棵树，也即子图中含有 n-1 条边为止。关于这个算法，百度百科上的讲解就不是很清楚了，如果感兴趣的话可以自行查阅其他资料</p>\n<h3 id=\"12、Prim-算法和-Kruskal-算法的对比\"><a href=\"#12、Prim-算法和-Kruskal-算法的对比\" class=\"headerlink\" title=\"12、Prim 算法和 Kruskal 算法的对比\"></a>12、Prim 算法和 Kruskal 算法的对比</h3><p>对比两个算法，克鲁斯卡尔算法主要是针对边来展开，边数少时效率会非常高，所以堆于稀疏图有很大的优势；而普利姆算法对于稠密图，即边数非常多的情况会更好一些</p>\n<h3 id=\"13、最短路径\"><a href=\"#13、最短路径\" class=\"headerlink\" title=\"13、最短路径\"></a>13、最短路径</h3><p>对于网图来说，最短路径，是指两顶点之间经过的边上权值之和最少的路径，并且我们称路径上的第一个顶点是源点，最后一个顶点是终点 主要有两种求最短路径的算法：迪杰斯特拉算法和</p>\n<h3 id=\"14、迪杰斯特拉（Dijkstra）算法\"><a href=\"#14、迪杰斯特拉（Dijkstra）算法\" class=\"headerlink\" title=\"14、迪杰斯特拉（Dijkstra）算法\"></a>14、迪杰斯特拉（Dijkstra）算法</h3><h4 id=\"算法步骤：-2\"><a href=\"#算法步骤：-2\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><p>G = {V,E}</p>\n<ol>\n<li>初始时令 S = {V0}, T = V - S = {其余顶点}，T 中顶点对应的距离值</li>\n</ol>\n<p>若存在 &lt;V0,Vi&gt;，d(V0,Vi) 为 &lt;V0,Vi&gt; 弧上的权值</p>\n<p>若不存在 &lt;V0,Vi&gt;，d(V0,Vi) 为 ∞</p>\n<ol start=\"2\">\n<li><p>从 T 中选取一个与 S 中顶点有关联边且权值最小的顶点 W，加入到 S 中</p>\n</li>\n<li><p>对其余 T 中顶点的距离值进行修改：若加进 W 作中间顶点，从 V0 到 Vi 的距离值缩短，则修改此距离值</p>\n</li>\n</ol>\n<p>重复上述步骤 2、3，直到 S 中包含所有顶点，即 W = Vi 为止</p>\n<h3 id=\"15、弗洛伊德（Floyd）算法\"><a href=\"#15、弗洛伊德（Floyd）算法\" class=\"headerlink\" title=\"15、弗洛伊德（Floyd）算法\"></a>15、弗洛伊德（Floyd）算法</h3><h4 id=\"算法步骤：-3\"><a href=\"#算法步骤：-3\" class=\"headerlink\" title=\"算法步骤：\"></a>算法步骤：</h4><ol>\n<li><p>从任意一条单边路径开始。所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大。</p>\n</li>\n<li><p>对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比已知的路径更短。如果是更新它。</p>\n</li>\n</ol>\n<p>把图用邻接矩阵 G 表示出来，如果从 Vi 到 Vj 有路可达，则 G[i][j] = d，d 表示该路的长度；否则 G[i][j] = 无穷大。定义一个矩阵D用来记录所插入点的信息，D[i][j] 表示从 Vi 到 Vj 需要经过的点，初始化 D[i][j] = j。把各个顶点插入图中，比较插点后的距离与原来的距离，G[i][j] = min( G[i][j], G[i][k]+G[k][j])，如果 G[i][j] 的值变小，则 D[i][j] = k。在 G 中包含有两点之间最短道路的信息，而在 D 中则包含了最短通路径的信息。</p>\n<p>比如，要寻找从 V5 到 V1 的路径。根据 D，假如 D(5,1) = 3 则说明从 V5 到 V1 经过 V3，路径为 {V5,V3,V1}，如果 D(5,3)=3，说明 V5 与 V3 直接相连，如果 D(3,1) = 1，说明 V3 与 V1 直接相连。</p>\n<h3 id=\"16、拓扑排序\"><a href=\"#16、拓扑排序\" class=\"headerlink\" title=\"16、拓扑排序\"></a>16、拓扑排序</h3><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为 <strong>AOV 网</strong>（Activity On Vertex Network）<br><strong>拓扑序列</strong>：设 G = (V,E)是一个具有 n 个顶点的有向图，V 中的顶点序列 V1，V2，……，Vn，满足若从顶点 Vi 到 Vj 有一条路径，则在顶点序列中顶点 Vi 必在顶点 Vj 之前。则我们称这样的顶点序列为一个<strong>拓扑序列</strong><br><strong>拓扑排序</strong>：其实就是对一个有向图构造拓扑序列的过程；构造时会有两个结果，如果此网的全部顶点都被输出，则说明它是不存在环（回路）的 AOV 网；如果输出顶点数少了，哪怕是少了一个，也说明这个网存在环（回路），不是 AOV 网。</p>\n<h3 id=\"17、拓扑排序算法\"><a href=\"#17、拓扑排序算法\" class=\"headerlink\" title=\"17、拓扑排序算法\"></a>17、拓扑排序算法</h3><p><strong>对 AOV 网进行拓扑排序的基本思路</strong>是：从 AOV 网中选择一个入度为 0 的顶点输出，然后删去此顶点，并删除以此顶点为尾的弧，继续重复此步骤，直到输出全部顶点或者 AOV 网中不存在入度为 0 的顶点为止</p>\n<h3 id=\"18、关键路径\"><a href=\"#18、关键路径\" class=\"headerlink\" title=\"18、关键路径\"></a>18、关键路径</h3><p>在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为 <strong>AOE 网</strong>（Activity On Edge Network）；我们把 AOE 网中没有入边的顶点称为始点或源点，没有出边的顶点称为终点或汇点；正常情况下，AOE 网只有一个源点一个汇点，我们把路径上各个活动所持续的时间之和称为<strong>路径长度</strong>，从源点到汇点具有最大长度的路径叫<strong>关键路径</strong>，在关键路径上的活动叫<strong>关键活动</strong></p>\n<h3 id=\"19、关键路径算法\"><a href=\"#19、关键路径算法\" class=\"headerlink\" title=\"19、关键路径算法\"></a>19、关键路径算法</h3><p>原理：我们只需要找到所有活动的最早开始时间和最晚开始时间，并且比较它们，如果相等就意味着此活动是关键活动，活动间的路径为关键路径。如果不等，则就不是。为此，我们需要定义如下几个参数：</p>\n<ol>\n<li>事件的<strong>最早发生时间etv</strong>（earliest time of vertex）：即顶点 Vk 的最早发生时间</li>\n<li>事件的<strong>最晚发生时间ltv</strong>（latest time of vertex）：即顶点 Vk 的最晚发生时间，也就是每个顶点对应的事件最晚需要开始的时间，超出此时间将会延误整个工期</li>\n<li>活动的<strong>最早开工时间ete</strong>（earliest time of edge）：即弧 ak 的最早发生时间</li>\n<li>活动的<strong>最晚开工时间lte</strong>（latest time of edge）：即弧 ak 的最晚发生时间，也就是不推迟工期的最晚开工时间</li>\n</ol>\n<p>我们是由 1 和 2 可以求得 3 和 4，然后再根据 ete[k] 是否与 lte[k] 相等来判断 ak 是否是关键活动</p>\n<h3 id=\"20、世界上最遥远的距离……\"><a href=\"#20、世界上最遥远的距离……\" class=\"headerlink\" title=\"20、世界上最遥远的距离……\"></a>20、世界上最遥远的距离……</h3><blockquote>\n<p>世界上最遥远的距离，不是从南极到北极，而是我在讲解算法为何如此精妙，你却能够安详在课堂上休息。<br>世界上最遥远的距离，不是珠峰与马里亚纳海沟的距离，而是我欲把古人的智慧全盘给你，你却不屑一顾毫不怜惜。<br>世界上最遥远的距离，不是牛 A 与牛 C 之间狭小空隙，而是你们当中，有人在通往牛逼的路上一路狂奔，而有人步入大学校园就学会放弃。</p>\n</blockquote>\n<h3 id=\"七、查找\"><a href=\"#七、查找\" class=\"headerlink\" title=\"七、查找\"></a>七、查找</h3><h4 id=\"1、查找概论\"><a href=\"#1、查找概论\" class=\"headerlink\" title=\"1、查找概论\"></a>1、查找概论</h4><ul>\n<li><strong>查找表</strong>（Search Table）是由同一类型的数据元素（或记录）构成的集合</li>\n<li><strong>关键字</strong>（Key）是数据元素中某个数据项的值，又称为<strong>键值</strong></li>\n<li>若此关键字可以唯一地标识一个记录，则称此关键字为<strong>主关键字</strong>（Primary Key）</li>\n<li>那些可以识别多个数据元素（或记录）的关键字，我们称为<strong>次关键字</strong>（Secondary Key）</li>\n<li><strong>查找</strong>（Searching）就是根据给定的某个值，在查找表中确定一个其关键字等于给定值得数据元素（或记录）</li>\n</ul>\n<h4 id=\"2、查找表操作方式\"><a href=\"#2、查找表操作方式\" class=\"headerlink\" title=\"2、查找表操作方式\"></a>2、查找表操作方式</h4><p>分为两大种：静态查找表和动态查找表 <strong>静态查找表</strong>（Static Search Table）：只作查找操作的查找表。它的主要操作有：</p>\n<ul>\n<li>查询某个“特定的”数据元素是否在查找表中</li>\n<li>检索某个“特定的”数据元素和各种属性</li>\n</ul>\n<p><strong>动态查找表</strong>（Dynamic Search Table）：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是两个：</p>\n<ul>\n<li>查找时插入数据元素</li>\n<li>查找时删除数据元素</li>\n</ul>\n<h4 id=\"3、顺序查找\"><a href=\"#3、顺序查找\" class=\"headerlink\" title=\"3、顺序查找\"></a>3、顺序查找</h4><p>顺序查找（Sequential Search）又叫线性查找，是最基本的查找技术，它的查找过程是： 从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功。</p>\n<h3 id=\"4、二分查找\"><a href=\"#4、二分查找\" class=\"headerlink\" title=\"4、二分查找\"></a>4、二分查找</h3><p>折半查找（Binary Search）技术，又称为二分查找。它的前提是线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须采用顺序存储。折半查找的基本思想是： 在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止</p>\n<h4 id=\"5、插值查找\"><a href=\"#5、插值查找\" class=\"headerlink\" title=\"5、插值查找\"></a>5、插值查找</h4><p>插值查找（Interpolation Search）是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法，其核心就在于插值的计算公式 (key-a[low])/(a[high]-a[low])，对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好得多</p>\n<h3 id=\"6、斐波那契查找算法\"><a href=\"#6、斐波那契查找算法\" class=\"headerlink\" title=\"6、斐波那契查找算法\"></a>6、斐波那契查找算法</h3><h4 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h4><ol>\n<li>当 key = a[mid] 时，查找就成功</li>\n<li>当 key &lt; a[mid] 时，新范围是第 low 个到第 mid - 1 个，此时范围个数为 F[k-1] - 1 个</li>\n<li>当 key &gt; a[mid] 时，新范围是第 m + 1 个到第 high 个，此时范围个数为 F[k-2] - 1 个</li>\n</ol>\n<h3 id=\"7、三种查找算法的比较\"><a href=\"#7、三种查找算法的比较\" class=\"headerlink\" title=\"7、三种查找算法的比较\"></a>7、三种查找算法的比较</h3><p>折半查找是进行加法与除法运算 (mid = (low + high) / 2)，插值查找进行复杂的四则运算(mid = low + (high - low) * (key - a[low]) / (a[high] - a[low]))，而斐波那契查找只是最简单加减法运算(mid = low + F[k-1] - 1)，在海量数据的查找过程中，这种细微的差别可能会影响最终的查找效率</p>\n<h3 id=\"8、线性索引\"><a href=\"#8、线性索引\" class=\"headerlink\" title=\"8、线性索引\"></a>8、线性索引</h3><p><strong>索引</strong>就是把一个关键字与它对应的记录相关联的过程 所谓<strong>线性索引</strong>就是将索引项集合组织为线性结构，也称为<strong>索引表</strong> 三种线性索引：稠密索引、分块索引和倒排索引</p>\n<h3 id=\"9、稠密索引\"><a href=\"#9、稠密索引\" class=\"headerlink\" title=\"9、稠密索引\"></a>9、稠密索引</h3><p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项</p>\n<div align=\"center\"><img src=\"/images/hexo_post_182.png\" alt=\"\" width=\"400\"></div>\n\n<p>对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列 索引项有序也就意味着，我们要查找关键字时，可以用到折半、插值、斐波那契等有序查找算法，大大提高了效率</p>\n<h3 id=\"10、分块索引\"><a href=\"#10、分块索引\" class=\"headerlink\" title=\"10、分块索引\"></a>10、分块索引</h3><p>分块有序，是把数据集的记录分成了若干块，并且这些块需要满足两个条件：</p>\n<ul>\n<li><strong>块内无序</strong>：当然如果能够让块内有序对查找来说更理想</li>\n<li><strong>块间有序</strong>：只有块间有序，才有可能在查找时带来效率</li>\n</ul>\n<h4 id=\"分块索引的索引项结构分三个数据项：\"><a href=\"#分块索引的索引项结构分三个数据项：\" class=\"headerlink\" title=\"分块索引的索引项结构分三个数据项：\"></a>分块索引的索引项结构分三个数据项：</h4><ul>\n<li><strong>最大关键码</strong>，它存储每一块中的最大关键字，这样的好处就是可以使得在它之后的下一块中的最小关键字也能比这一块最大的关键字要大</li>\n<li>存储了<strong>块中的记录个数</strong>，以便于循环时使用</li>\n<li>用于<strong>指向块首数据元素的指针</strong>，便于开始对这一块中记录进行遍历</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_183.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"分块索引表中查找的步骤：\"><a href=\"#分块索引表中查找的步骤：\" class=\"headerlink\" title=\"分块索引表中查找的步骤：\"></a>分块索引表中查找的步骤：</h4><ol>\n<li>在分块索引表中查找要查关键字所在的块，可以利用折半、插值等算法</li>\n<li>根据块首指针找到响应的块，并在块中顺序查找关键码。因为块中可以是无序的，因此只能顺序查找</li>\n</ol>\n<h3 id=\"11、倒排索引\"><a href=\"#11、倒排索引\" class=\"headerlink\" title=\"11、倒排索引\"></a>11、倒排索引</h3><p>记录号表存储具有相同次关键字的所有记录的记录号（可以是指向记录的指针或者是该记录的主关键字），这样的索引方法就是倒排索引（inverted index） 倒排索引的优点就是查找记录非常快，基本等于生成索引表后，查找时都不用去读取记录，就可以得到结果。但它的缺点是这个记录号不定长</p>\n<h3 id=\"12、二叉排序树\"><a href=\"#12、二叉排序树\" class=\"headerlink\" title=\"12、二叉排序树\"></a>12、二叉排序树</h3><p>二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树</p>\n<ul>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值</li>\n<li>它的左、右子树也分别为二叉排序树</li>\n</ul>\n<p>如果我们希望对一个集合按二叉排序树查找，最好是把它构建成一棵平衡的二叉排序树。</p>\n<h3 id=\"13、平衡二叉树\"><a href=\"#13、平衡二叉树\" class=\"headerlink\" title=\"13、平衡二叉树\"></a>13、平衡二叉树</h3><p>平衡二叉树（Self-Balancing Binary Search Tree或Height-Balanced Binary Search Tree），是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于 1；我们将二叉树上结点的左子树深度减去右子树深度的值称为<strong>平衡因子</strong>BF（Balance Factor），那么平衡二叉树上所有结点的平衡因子只可能是 -1，0，1</p>\n<h3 id=\"14、最小不平衡子树\"><a href=\"#14、最小不平衡子树\" class=\"headerlink\" title=\"14、最小不平衡子树\"></a>14、最小不平衡子树</h3><p>距离插入结点最近的，且平衡因子的绝对值大于 1 的结点为根的子树，我们称为<strong>最小不平衡子树</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_184.png\" alt=\"\" width=\"400\"></div>\n\n<p>如上图所示，当新插入结点 37 时，距离它最近的平衡因子绝对值超过 1 的结点是 58（即它的左子树高度 2 减去右子树高度 0），所以从 58 开始以下的子树为最小不平衡子树</p>\n<h3 id=\"15、平衡二叉树实现算法\"><a href=\"#15、平衡二叉树实现算法\" class=\"headerlink\" title=\"15、平衡二叉树实现算法\"></a>15、平衡二叉树实现算法</h3><h4 id=\"算法原理：\"><a href=\"#算法原理：\" class=\"headerlink\" title=\"算法原理：\"></a>算法原理：</h4><p>基本思想就是在构建二叉排序树的过程中，每当插入一个结点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应地旋转，使之成为新的平衡子树</p>\n<h4 id=\"右旋操作：\"><a href=\"#右旋操作：\" class=\"headerlink\" title=\"右旋操作：\"></a>右旋操作：</h4><div align=\"center\"><img src=\"/images/hexo_post_185.png\" alt=\"\" width=\"500\"></div>\n\n<p>左旋和右旋代码是对称的</p>\n<h3 id=\"16、多路查找树\"><a href=\"#16、多路查找树\" class=\"headerlink\" title=\"16、多路查找树\"></a>16、多路查找树</h3><p>多路查找树（multi-way search tree），其每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素</p>\n<h3 id=\"17、2-3-树\"><a href=\"#17、2-3-树\" class=\"headerlink\" title=\"17、2-3 树\"></a>17、2-3 树</h3><p>2-3 树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（我们称它为2结点）或三个孩子（我们称它为 3 结点）。</p>\n<ul>\n<li>一个 2 结点包含一个元素和两个孩子（或没有孩子），且与二叉排序树类似</li>\n<li>一个 3 结点包含一小一大两个元素和三个孩子（或没有孩子），左子树包含小于较小元素的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素</li>\n<li>2-3 树中所有的叶子都在同一层次上</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_186.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"18、2-3树的插入实现\"><a href=\"#18、2-3树的插入实现\" class=\"headerlink\" title=\"18、2-3树的插入实现\"></a>18、2-3树的插入实现</h3><p>可分为三种情况：</p>\n<ol>\n<li>对于空树，插入一个 2 结点即可，这很容易理解</li>\n<li>插入结点到一个 2 结点的叶子上。由于其本身就只有一个元素，所以只需要将其升级为 3 结点即可</li>\n<li>要往 3 结点中插入一个新元素。因为 3 结点本身已经是 2-3 树的结点最大容量（已经有两个元素），因此就需要将其拆分，且将树中两元素或插入元素的三者中选择其一向上移动一层</li>\n</ol>\n<h3 id=\"19、2-3-4树\"><a href=\"#19、2-3-4树\" class=\"headerlink\" title=\"19、2-3-4树\"></a>19、2-3-4树</h3><p>就是 2-3 树的概念扩展，包括了 4 结点的使用。一个4结点包含小中大三个元素和四个孩子（或没有孩子），一个 4 结点要么没有孩子，要么具有 4 个孩子。如果某个 4 结点有孩子的话，从左到右按照由小到大的顺序排列</p>\n<h3 id=\"20、B树\"><a href=\"#20、B树\" class=\"headerlink\" title=\"20、B树\"></a>20、B树</h3><p>B树（B-tree）是一种平衡的多路查找树，2-3树和 2-3-4树都是 B树的特例。结点最大的孩子数目称为 <strong>B树的阶</strong>（order），因此，2-3树是 3 阶 B树，2-3-4树是 4 阶 B树</p>\n<h4 id=\"一个-m-阶的-B-树具有如下属性：\"><a href=\"#一个-m-阶的-B-树具有如下属性：\" class=\"headerlink\" title=\"一个 m 阶的 B 树具有如下属性：\"></a>一个 m 阶的 B 树具有如下属性：</h4><ul>\n<li>如果根结点不是叶节点，则其至少有两棵子树</li>\n<li>每一个非根的分支结点都有 k-1 个元素和k个孩子，其中 ⌈m/2⌉ ≤ k ≤ m。每一个叶子节点 n 都有 k - 1 个元素，其中 ⌈m/2⌉ ≤ k ≤m</li>\n<li>所有叶子结点都位于同一层次</li>\n<li>所有分支结点包含下列信息数据（n,A0,K1,A1,K2,A2,…,Kn,An），其中：Ki(i=1,2,…,n) 为关键字，且 Ki&lt;Ki+1(i=1,2,…,n-1)；Ai(i=0,2,…,n) 为指向子树根结点的指针，且指针 A(i-1) 所指子树中所有结点的关键字均小于 Ki(i=1,2,…,n),An 所指子树中所有结点的关键字均大于 Kn，n·(⌈m/2⌉-1≤n≤m-1) 为关键字的个数（或 n + 1 为子树的个数）</li>\n</ul>\n<h3 id=\"21、B-树\"><a href=\"#21、B-树\" class=\"headerlink\" title=\"21、B+树\"></a>21、B+树</h3><p>在 B+树中，出现在分支结点中的元素会被当作它们在该分支结点位置的中序后继者（叶子节点）中再次列出。另外，每一个叶子结点都会保存一个指向后一叶子结点的指针</p>\n<div align=\"center\"><img src=\"/images/hexo_post_187.png\" alt=\"\" width=\"400\"></div>\n\n<p>一棵 m 阶的 B+树和 m 阶的 B树的差异在于：</p>\n<ul>\n<li>有 n 棵子树的结点中包含有 n 个关键字</li>\n<li>所有的叶子结点包含全部关键字的信息，及指向含这些关键字记录的指针，叶子结点本身依关键字的大小自小而大顺序链接</li>\n<li>所有分支结点可以看成是索引，结点中仅含有其子树中的最大（或最小）关键字</li>\n</ul>\n<p>如果我们是需要从最小关键字进行从小到大的顺序查找，我们就可以从最左侧的叶子结点出发，不经过分支结点，而是沿着指向下一叶子结点的指针就可遍历所有的关键字</p>\n<h3 id=\"22、散列表（哈希表）\"><a href=\"#22、散列表（哈希表）\" class=\"headerlink\" title=\"22、散列表（哈希表）\"></a>22、散列表（哈希表）</h3><p><strong>散列技术</strong>是在记录的存储位置和它的关键字之间建立一个确定的对应关系 f，使得每个关键字 key 对应一个存储位置 f(key)，散列技术既是一种存储方法，也是一种查找方法<br>散列技术最适合的求解问题是查找与给定值相等的记录 f称为散列函数，又称为<strong>哈希（Hash）函数</strong><br>采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为<strong>散列表或哈希表</strong>（Hash table）</p>\n<h4 id=\"散列过程有两步：\"><a href=\"#散列过程有两步：\" class=\"headerlink\" title=\"散列过程有两步：\"></a>散列过程有两步：</h4><ol>\n<li>在存储时，通过散列函数计算记录的散列地址，并按此散列地址存储该记录</li>\n<li>当查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录</li>\n</ol>\n<h3 id=\"23、散列函数构造方法\"><a href=\"#23、散列函数构造方法\" class=\"headerlink\" title=\"23、散列函数构造方法\"></a>23、散列函数构造方法</h3><h4 id=\"直接定址法\"><a href=\"#直接定址法\" class=\"headerlink\" title=\"直接定址法\"></a>直接定址法</h4><p>取关键字的某个线性函数值为散列地址</p>\n<h4 id=\"数字分析法\"><a href=\"#数字分析法\" class=\"headerlink\" title=\"数字分析法\"></a>数字分析法</h4><p>如果我们的关键字是位数较多的数字，可以对数字进行翻转、右环位移、左环位移、甚至前两数与后两数叠加等方法，合理地将关键字分配到散列表的各位置</p>\n<h4 id=\"平方取中法\"><a href=\"#平方取中法\" class=\"headerlink\" title=\"平方取中法\"></a>平方取中法</h4><p>假设关键字是 1234，那么它的平方就是 1522756，再抽取中间的 3 位就是 227，用做散列地址。平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况</p>\n<h4 id=\"折叠法\"><a href=\"#折叠法\" class=\"headerlink\" title=\"折叠法\"></a>折叠法</h4><p>将关键字从左到右分割成位数相等的几部分，然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址.折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况 比如我们的关键字是 9876543210，散列表表长为三位，我们将它分为四组，987|654|321|0，然后将它们叠加求和 987 + 654 + 321 + 0 = 1962，再求后 3 位得到散列地址为 962。</p>\n<h4 id=\"除留余数法\"><a href=\"#除留余数法\" class=\"headerlink\" title=\"除留余数法\"></a>除留余数法</h4><p>对关键字直接取模，也可在折叠、平方取中后再取模，对于散列表长为 m 的散列函数公式为：</p>\n<blockquote>\n<p>f(key)=key mod p(p≤m)</p>\n</blockquote>\n<p>根据前辈们的经验，若散列表表长为 m，通常 p 为小于或等于表长（最好接近 m）的最小质数或不包含小于 20 质因子的合数</p>\n<h4 id=\"随机数法\"><a href=\"#随机数法\" class=\"headerlink\" title=\"随机数法\"></a>随机数法</h4><p>选择一个随机数，取关键字的随机函数值为它的散列地址</p>\n<h3 id=\"24、采用不同的散列函数应该考虑的因素\"><a href=\"#24、采用不同的散列函数应该考虑的因素\" class=\"headerlink\" title=\"24、采用不同的散列函数应该考虑的因素\"></a>24、采用不同的散列函数应该考虑的因素</h3><ul>\n<li>计算散列地址所需的时间</li>\n<li>关键字的长度</li>\n<li>散列表的大小</li>\n<li>关键字的分布情况</li>\n<li>记录查找的频率</li>\n</ul>\n<h3 id=\"25、处理散列冲突的方法\"><a href=\"#25、处理散列冲突的方法\" class=\"headerlink\" title=\"25、处理散列冲突的方法\"></a>25、处理散列冲突的方法</h3><h4 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h4><p>一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入，公式是：</p>\n<blockquote>\n<p>fi(key)=（f(key)+di）MOD m(di=1,2,3,……,m-1)</p>\n</blockquote>\n<p>这种解决冲突的开放定址法称为<strong>线性探测法</strong><br>如果 di 改进为正负两类值，等于是可以双向寻找到可能的空位置，可以不让关键字都聚集在某一块区域。我们称这种方法为<strong>二次探测法</strong><br>如果 di 采用随机函数计算得到，我们称之为<strong>随机探测法</strong></p>\n<h4 id=\"再散列函数法\"><a href=\"#再散列函数法\" class=\"headerlink\" title=\"再散列函数法\"></a>再散列函数法</h4><p>我们事先准备多个散列函数，每当发生散列地址冲突时，就换一个散列函数计算，相信总会有一个可以把冲突解决掉</p>\n<h4 id=\"链地址法\"><a href=\"#链地址法\" class=\"headerlink\" title=\"链地址法\"></a>链地址法</h4><p>将所有关键字为同义词的记录存储在一个单链表红，我们称这种表尾同义词子表，在散列表中只存储所有同义词子表的头指针</p>\n<h4 id=\"公共溢出区法\"><a href=\"#公共溢出区法\" class=\"headerlink\" title=\"公共溢出区法\"></a>公共溢出区法</h4><p>凡是冲突的都将它们存储到溢出表中</p>\n<h2 id=\"八、排序\"><a href=\"#八、排序\" class=\"headerlink\" title=\"八、排序\"></a>八、排序</h2><p>关于排序，推荐我的另一篇文章：<a href=\"/20170318/js-implementation-of-ten-sorting-algorithms.html\">\b十大排序算法的Javascript实现</a>，这篇文章里有一些常见排序算法的实现步骤以及演示，是一个比较好的排序算法讲解</p>\n<h2 id=\"九、总结\"><a href=\"#九、总结\" class=\"headerlink\" title=\"九、总结\"></a>九、总结</h2><h3 id=\"1、数据结构和算法\"><a href=\"#1、数据结构和算法\" class=\"headerlink\" title=\"1、数据结构和算法\"></a>1、数据结构和算法</h3><p>数据结构和算法对于程序员的职业人生来说，那就是两个圆圈的交集部分，用心去掌握它，你的编程之路将会是坦途</p>\n<div align=\"center\"><img src=\"/images/hexo_post_188.png\" alt=\"\" width=\"350\"></div>","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"数据结构","path":"api/tags/数据结构.json"}]}