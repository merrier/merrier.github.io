{"title":"简单聊一下服务端渲染","slug":"简单聊一下服务端渲染","date":"2018-09-18T08:07:53.000Z","updated":"2019-05-05T03:15:41.365Z","comments":true,"path":"api/articles/简单聊一下服务端渲染.json","excerpt":null,"covers":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p><code>Server Slide Rendering</code> 服务端渲染,又简写为 <code>SSR</code>，他一般被用在我们的 <code>SPA（Single-Page Application）</code> 中，即单页应用。</p>\n<h2 id=\"为什么要用SSR？\"><a href=\"#为什么要用SSR？\" class=\"headerlink\" title=\"为什么要用SSR？\"></a>为什么要用SSR？</h2><p>首先我们需要知道 SSR 对于 SPA 的<code>好处</code>，<code>优势</code>是什么。</p>\n<ul>\n<li>更好的 <code>SEO（Search Engine Optimization）</code>，<code>SEO</code> 是搜索引擎优化，简而言之就是针对百度这些搜索引擎，可以让他们搜索到我们的应用。这里可能会有误区，就是我也可以在 <code>index.html</code> 上写 <code>SEO</code> ，为什么会不起作用。因为 React、Vue 的原理是<strong>客户端渲染</strong>，通过浏览器去加载 js、css，有一个时间上的<code>延迟</code>，而搜索引擎不会管你的<code>延迟</code>，他就觉得你如果没加载出来就是没有的，所以是搜不到的。</li>\n<li>解决一开始的<code>白屏渲染</code>，上面讲了 React 的渲染原理，而<strong>SSR服务端渲染</strong>是通过服务端请求数据，因为服务端内网的请求快，性能好所以会更快的加载所有的文件，最后把下载渲染后的页面返回给客户端。</li>\n</ul>\n<h2 id=\"服务端渲染VS客户端渲染\"><a href=\"#服务端渲染VS客户端渲染\" class=\"headerlink\" title=\"服务端渲染VS客户端渲染\"></a>服务端渲染VS客户端渲染</h2><h3 id=\"客户端渲染路线：\"><a href=\"#客户端渲染路线：\" class=\"headerlink\" title=\"客户端渲染路线：\"></a>客户端渲染路线：</h3><ol>\n<li>请求一个 html</li>\n<li>服务端返回一个 html</li>\n<li>浏览器下载 html 里面的 js/css 文件</li>\n<li>等待 js 文件下载完成</li>\n<li>等待 js 加载并初始化完成</li>\n<li>js 代码终于可以运行，由js代码向后端请求数据( ajax/fetch )</li>\n<li>等待后端数据返回</li>\n<li>react-dom ( 客户端 )从无到完整地，把数据渲染为响应页面</li>\n</ol>\n<h3 id=\"服务端渲染路线：\"><a href=\"#服务端渲染路线：\" class=\"headerlink\" title=\"服务端渲染路线：\"></a>服务端渲染路线：</h3><ol>\n<li>请求一个 html</li>\n<li>服务端请求数据( 内网请求快 )</li>\n<li>服务器初始渲染（服务端性能好，较快）</li>\n<li>服务端返回已经有正确内容的页面</li>\n<li>客户端请求 js/css 文件</li>\n<li>等待 js 文件下载完成</li>\n<li>等待 js 加载并初始化完成</li>\n<li>react-dom ( 客户端 )把剩下一部分渲染完成( 内容小，渲染快 )</li>\n</ol>\n<p>从上面两者的渲染路线可以看到，其主要区别就在于，客户端从<code>无到有的</code>渲染，服务端是先在服务端<code>渲染一部分</code>，在再客户端<code>渲染一小部分</code>。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://juejin.im/post/5b55e6a96fb9a04fcf59d754\" target=\"_blank\" rel=\"noopener\">React服务端渲染+pm2自动化部署</a></p>\n","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p><code>Server Slide Rendering</code> 服务端渲染,又简写为 <code>SSR</code>，他一般被用在我们的 <code>SPA（Single-Page Application）</code> 中，即单页应用。</p>\n<h2 id=\"为什么要用SSR？\"><a href=\"#为什么要用SSR？\" class=\"headerlink\" title=\"为什么要用SSR？\"></a>为什么要用SSR？</h2><p>首先我们需要知道 SSR 对于 SPA 的<code>好处</code>，<code>优势</code>是什么。</p>\n<ul>\n<li>更好的 <code>SEO（Search Engine Optimization）</code>，<code>SEO</code> 是搜索引擎优化，简而言之就是针对百度这些搜索引擎，可以让他们搜索到我们的应用。这里可能会有误区，就是我也可以在 <code>index.html</code> 上写 <code>SEO</code> ，为什么会不起作用。因为 React、Vue 的原理是<strong>客户端渲染</strong>，通过浏览器去加载 js、css，有一个时间上的<code>延迟</code>，而搜索引擎不会管你的<code>延迟</code>，他就觉得你如果没加载出来就是没有的，所以是搜不到的。</li>\n<li>解决一开始的<code>白屏渲染</code>，上面讲了 React 的渲染原理，而<strong>SSR服务端渲染</strong>是通过服务端请求数据，因为服务端内网的请求快，性能好所以会更快的加载所有的文件，最后把下载渲染后的页面返回给客户端。</li>\n</ul>\n<h2 id=\"服务端渲染VS客户端渲染\"><a href=\"#服务端渲染VS客户端渲染\" class=\"headerlink\" title=\"服务端渲染VS客户端渲染\"></a>服务端渲染VS客户端渲染</h2><h3 id=\"客户端渲染路线：\"><a href=\"#客户端渲染路线：\" class=\"headerlink\" title=\"客户端渲染路线：\"></a>客户端渲染路线：</h3><ol>\n<li>请求一个 html</li>\n<li>服务端返回一个 html</li>\n<li>浏览器下载 html 里面的 js/css 文件</li>\n<li>等待 js 文件下载完成</li>\n<li>等待 js 加载并初始化完成</li>\n<li>js 代码终于可以运行，由js代码向后端请求数据( ajax/fetch )</li>\n<li>等待后端数据返回</li>\n<li>react-dom ( 客户端 )从无到完整地，把数据渲染为响应页面</li>\n</ol>\n<h3 id=\"服务端渲染路线：\"><a href=\"#服务端渲染路线：\" class=\"headerlink\" title=\"服务端渲染路线：\"></a>服务端渲染路线：</h3><ol>\n<li>请求一个 html</li>\n<li>服务端请求数据( 内网请求快 )</li>\n<li>服务器初始渲染（服务端性能好，较快）</li>\n<li>服务端返回已经有正确内容的页面</li>\n<li>客户端请求 js/css 文件</li>\n<li>等待 js 文件下载完成</li>\n<li>等待 js 加载并初始化完成</li>\n<li>react-dom ( 客户端 )把剩下一部分渲染完成( 内容小，渲染快 )</li>\n</ol>\n<p>从上面两者的渲染路线可以看到，其主要区别就在于，客户端从<code>无到有的</code>渲染，服务端是先在服务端<code>渲染一部分</code>，在再客户端<code>渲染一小部分</code>。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://juejin.im/post/5b55e6a96fb9a04fcf59d754\" target=\"_blank\" rel=\"noopener\">React服务端渲染+pm2自动化部署</a></p>\n","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"渲染","path":"api/tags/渲染.json"}]}