{"title":"Git工作区、暂存区和历史记录区","slug":"Git工作区、暂存区和历史记录区","date":"2017-06-28T12:13:42.000Z","updated":"2019-05-22T02:25:26.065Z","comments":true,"path":"api/articles/Git工作区、暂存区和历史记录区.json","excerpt":null,"covers":["/images/hexo_post_5.jpg","/images/hexo_post_6.png"],"content":"<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>可以将 git 简单的分为三个区域：</p>\n<ul>\n<li>工作区（working directory）</li>\n<li>暂存区（stage index）</li>\n<li>历史记录区（history）</li>\n</ul>\n<p>如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_5.jpg\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"简单解释\"><a href=\"#简单解释\" class=\"headerlink\" title=\"简单解释\"></a>简单解释</h2><p><strong>工作区</strong>：就是我们能看到的区域，也是我们经常修改代码的目录<br><strong>暂存区</strong>：文件在本地修改之后，需要提交到暂存区之后才能提交到版本库，作为过渡层；可以避免误操作和保护工作区和版本库<br><strong>历史记录区</strong>：可以理解为版本库，我们从暂存区提交之后的记录会保存在这里</p>\n<h2 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h2><p>当我们执行 <code>git add files</code> 时，我们把当前工作目录中的文件放入了暂存区域，这其实做了两件事：</p>\n<ol>\n<li>将本地文件的时间戳、长度，当前文档对象的id等信息保存到一个树形目录中去（index，即平时说的暂存区）</li>\n<li>将本地文件的内容做快照并保存到 Git 的对象库。</li>\n</ol>\n<p>所以，暂存区实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等），文件的内容并不存储其中，而是保存在 Git 对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_6.png\" alt=\"\" width=\"600\"></div>\n\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个“游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下</p>\n<h2 id=\"三个区域与-git-命令\"><a href=\"#三个区域与-git-命令\" class=\"headerlink\" title=\"三个区域与 git 命令\"></a>三个区域与 git 命令</h2><h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中</p>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><p>当执行 “git status” 命令扫描工作区改动的时候，先依据 .git/index 文件中记录的（工作区跟踪文件的）时间戳、长度等信息判断工作区文件是否改变。如果工作区的文件时间戳改变，说明文件的内容<strong>可能</strong>被改变了，需要打开文件，读取文件内容，和更改前的原始文件相比较（本地文件和与之对应的 object 库中的文件的内容进行对比），判断文件内容是否被更改。如果文件内容没有改变，则将该文件新的时间戳记录到 .git/index 文件中。因为判断文件是否更改，使用时间戳、文件长度等信息进行比较要比通过文件内容比较要快的多，所以 Git 这样的实现方式可以让工作区状态扫描更快速的执行，这也是 Git 高效的因素之一。</p>\n<h3 id=\"git-diff-files\"><a href=\"#git-diff-files\" class=\"headerlink\" title=\"git diff files\"></a>git diff files</h3><p>git diff files 用来进行具体文件的变动对比，通常用来进行工作区与暂存区之间的对比，实质上是用 git objects 库中的快照与工作区文件的内容的对比。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://josh-persistence.iteye.com/blog/2215214\" target=\"_blank\" rel=\"noopener\">详解Git工作区、暂存区、历史记录区以及git reset、git revert、git checkout等撤销命令的区别</a></li>\n</ul>\n","more":"<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>可以将 git 简单的分为三个区域：</p>\n<ul>\n<li>工作区（working directory）</li>\n<li>暂存区（stage index）</li>\n<li>历史记录区（history）</li>\n</ul>\n<p>如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_5.jpg\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"简单解释\"><a href=\"#简单解释\" class=\"headerlink\" title=\"简单解释\"></a>简单解释</h2><p><strong>工作区</strong>：就是我们能看到的区域，也是我们经常修改代码的目录<br><strong>暂存区</strong>：文件在本地修改之后，需要提交到暂存区之后才能提交到版本库，作为过渡层；可以避免误操作和保护工作区和版本库<br><strong>历史记录区</strong>：可以理解为版本库，我们从暂存区提交之后的记录会保存在这里</p>\n<h2 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h2><p>当我们执行 <code>git add files</code> 时，我们把当前工作目录中的文件放入了暂存区域，这其实做了两件事：</p>\n<ol>\n<li>将本地文件的时间戳、长度，当前文档对象的id等信息保存到一个树形目录中去（index，即平时说的暂存区）</li>\n<li>将本地文件的内容做快照并保存到 Git 的对象库。</li>\n</ol>\n<p>所以，暂存区实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等），文件的内容并不存储其中，而是保存在 Git 对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_6.png\" alt=\"\" width=\"600\"></div>\n\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个“游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下</p>\n<h2 id=\"三个区域与-git-命令\"><a href=\"#三个区域与-git-命令\" class=\"headerlink\" title=\"三个区域与 git 命令\"></a>三个区域与 git 命令</h2><h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中</p>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><p>当执行 “git status” 命令扫描工作区改动的时候，先依据 .git/index 文件中记录的（工作区跟踪文件的）时间戳、长度等信息判断工作区文件是否改变。如果工作区的文件时间戳改变，说明文件的内容<strong>可能</strong>被改变了，需要打开文件，读取文件内容，和更改前的原始文件相比较（本地文件和与之对应的 object 库中的文件的内容进行对比），判断文件内容是否被更改。如果文件内容没有改变，则将该文件新的时间戳记录到 .git/index 文件中。因为判断文件是否更改，使用时间戳、文件长度等信息进行比较要比通过文件内容比较要快的多，所以 Git 这样的实现方式可以让工作区状态扫描更快速的执行，这也是 Git 高效的因素之一。</p>\n<h3 id=\"git-diff-files\"><a href=\"#git-diff-files\" class=\"headerlink\" title=\"git diff files\"></a>git diff files</h3><p>git diff files 用来进行具体文件的变动对比，通常用来进行工作区与暂存区之间的对比，实质上是用 git objects 库中的快照与工作区文件的内容的对比。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://josh-persistence.iteye.com/blog/2215214\" target=\"_blank\" rel=\"noopener\">详解Git工作区、暂存区、历史记录区以及git reset、git revert、git checkout等撤销命令的区别</a></li>\n</ul>\n","categories":[{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}