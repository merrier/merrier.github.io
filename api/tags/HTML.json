{"name":"HTML","postlist":[{"title":"前端面试系列","slug":"前端面试系列","date":"2017-03-17T09:19:17.000Z","updated":"2019-02-02T10:19:58.050Z","comments":true,"path":"api/articles/前端面试系列.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先声明一下，这个系列的文章基本上都是摘抄自其他途径的，包括一些大牛小牛的博客、微信公众号或其他人的文章里，而且我会争取持续更新，最后形成一篇对前端基础薄弱的同学也友好的讲解文章，如果该系列中的任何一个知识点能够帮到你（我相信肯定会帮到我的，因为我也要开始找实习了。。），就达到我的目的了；而且该系列文章只会涉及到前端的技术点，像算法和智力题那种是不会涉及的，至于智力题的话，根据我的经验，只能 practice makes perfect (<em>^__^</em>) </p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"/20170318/new-features-of-html5.html\">HTML5新特性</a></li>\n<li><a href=\"/20170318/new-features-of-css3.html\">CSS3新特性</a></li>\n<li><a href=\"/20170319/new-features-of-http2.html\">HTTP2新特性</a></li>\n<li><a href=\"/20170403/css-selector.html\">CSS选择器</a></li>\n<li><a href=\"/20170403/css-box-model.html\">CSS盒子模型</a></li>\n<li><a href=\"/20170404/status-code-of-http-request.html\">HTTP请求的状态码</a></li>\n<li><a href=\"/20170404/session-and-cookie.html\">session&amp;cookie</a></li>\n<li><a href=\"/20170405/tcp-three-handshakes-and-four-breakups.html\">TCP的三次握手与四次分手</a></li>\n<li><a href=\"/20170405/js-implements-inheritance.html\">JS实现继承</a></li>\n<li><a href=\"/20170405/closure-in-js.html\">JS中的闭包</a></li>\n<li><a href=\"/20170412/the-difference-between-window.onload-and-document.read.html\">window.onload和document.ready的区别</a></li>\n<li><a href=\"/20170416/front-end-performance-optimization.html\">前端性能优化</a></li>\n</ul>\n<h2 id=\"其他面试题整理\"><a href=\"#其他面试题整理\" class=\"headerlink\" title=\"其他面试题整理\"></a>其他面试题整理</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000013325778\" target=\"_blank\" rel=\"noopener\">50道CSS基础面试题（附答案）</a></li>\n<li><a href=\"https://yuchengkai.cn/docs/\" target=\"_blank\" rel=\"noopener\">InterviewMap</a></li>\n<li><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"noopener\">前端工程师面试题汇总</a></li>\n<li><a href=\"http://blog.poetries.top/2017/03/12/front-end-interview-summary/\" target=\"_blank\" rel=\"noopener\">前端面试题整理</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008785931\" target=\"_blank\" rel=\"noopener\">20个必会的JavaScript面试题</a></li>\n<li><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"noopener\">Front End Developer Questions</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2EcqlN_lE2AbBmaBagrD0w\" target=\"_blank\" rel=\"noopener\">魔法哥 2013 前端笔试题曝光（附完整解答）</a></li>\n<li><a href=\"https://www.reddit.com/r/cscareerquestions/comments/20ahfq/heres_a_pretty_big_list_of_programming_interview/\" target=\"_blank\" rel=\"noopener\">关于4种数据结构的算法面试问题列表</a></li>\n<li><a href=\"https://www.nowcoder.com/discuss/35805\" target=\"_blank\" rel=\"noopener\">阿里巴巴2018秋招面经之前端岗(1~5面)</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PrHwzQBrQCEx_w_8HcSNgg\" target=\"_blank\" rel=\"noopener\">阿里-蚂蚁金服三轮面试总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/HzS7bPeLTbBwlJacNv7uSA\" target=\"_blank\" rel=\"noopener\">技术面试宝典：很全面的算法和数据结构知识（含代码实现）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011172965\" target=\"_blank\" rel=\"noopener\">18届校招求职面经及总结</a></li>\n</ul>\n","raw":null,"categories":[{"name":"series","path":"api/categories/series.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"JS","path":"api/tags/JS.json"},{"name":"HTML","path":"api/tags/HTML.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（1）——HTML5新特性","slug":"前端面试系列（1）——HTML5新特性","date":"2017-03-18T10:32:25.000Z","updated":"2019-02-02T10:19:58.050Z","comments":true,"path":"api/articles/前端面试系列（1）——HTML5新特性.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这道问题被问的比较少，因为在如今前端框架大行其道的趋势下，对于 HTML 的理解似乎已经变得不那么重要了，况且浏览器对 H5（是的，我们通常说的 H5 其实就是 HTML5，5 代表版本）的支持还不那么完美，但是了解一下还是有助于自己前端水平的提升的，在查阅资料的过程中我发现有些特性我也是第一次知道，不过有些特性已经显示了其强大之处，比如：canvas，高能预警，大量干货：</p>\n<h2 id=\"摒弃了旧特性\"><a href=\"#摒弃了旧特性\" class=\"headerlink\" title=\"摒弃了旧特性\"></a>摒弃了旧特性</h2><h3 id=\"1-原-HTML-声明方式将失效，将采用简单的声明方式\"><a href=\"#1-原-HTML-声明方式将失效，将采用简单的声明方式\" class=\"headerlink\" title=\"1. 原 HTML 声明方式将失效，将采用简单的声明方式\"></a>1. 原 HTML 声明方式将失效，将采用简单的声明方式</h3><p>原来：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" </span></span><br><span class=\"line\"><span class=\"meta\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-脚本和链接无需-type，在-HTML5-中，你只需要用简化的代码来给你的网页添加-CSS-和-JavaScript-文件，而不再需要指定类型属性\"><a href=\"#2-脚本和链接无需-type，在-HTML5-中，你只需要用简化的代码来给你的网页添加-CSS-和-JavaScript-文件，而不再需要指定类型属性\" class=\"headerlink\" title=\"2. 脚本和链接无需 type，在 HTML5 中，你只需要用简化的代码来给你的网页添加 CSS 和 JavaScript 文件，而不再需要指定类型属性\"></a>2. 脚本和链接无需 type，在 HTML5 中，你只需要用简化的代码来给你的网页添加 CSS 和 JavaScript 文件，而不再需要指定类型属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"path/to/stylesheet.css\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新的内容元素\"><a href=\"#新的内容元素\" class=\"headerlink\" title=\"新的内容元素\"></a>新的内容元素</h2><h3 id=\"1-figure\"><a href=\"#1-figure\" class=\"headerlink\" title=\"1. figure\"></a>1. figure</h3><p>可以更加语义化地表示带标题的图片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">”path/to/image”</span> <span class=\"attr\">alt</span>=<span class=\"string\">”About</span> <span class=\"attr\">image</span>” /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an image of something interesting. <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-hgroup\"><a href=\"#2-hgroup\" class=\"headerlink\" title=\"2. hgroup\"></a>2. hgroup</h3><p>一般在 header 里面用来将一组标题组合在一起</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span> Recall Fan Page <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Only for people who want the memory of a lifetime. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-mark\"><a href=\"#3-mark\" class=\"headerlink\" title=\"3. mark\"></a>3. mark</h3><p>高亮的作用，比如用户的搜索内容可以在文章中用 <code>&lt;mark&gt;</code> 进行修饰</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Search Results <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> They were interrupted, just after Quato said, <span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>”Open your Mind”<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span>. <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-output\"><a href=\"#4-output\" class=\"headerlink\" title=\"4. output\"></a>4. output</h3><p>用来显示计算结果，也有一个和 label 一样的 for 属性</p>\n<h3 id=\"5-small\"><a href=\"#5-small\" class=\"headerlink\" title=\"5. small\"></a>5. small</h3><p>重新定义了 <code>&lt;small&gt;</code>，现在被用来表示小的排版，如网站底部的版权声明</p>\n<h3 id=\"6-article\"><a href=\"#6-article\" class=\"headerlink\" title=\"6. article\"></a>6. article</h3><p>定义文章</p>\n<h3 id=\"7-footer\"><a href=\"#7-footer\" class=\"headerlink\" title=\"7. footer\"></a>7. footer</h3><p>定义尾部</p>\n<h3 id=\"8-header\"><a href=\"#8-header\" class=\"headerlink\" title=\"8. header\"></a>8. header</h3><p>定义头部</p>\n<h3 id=\"9-nav\"><a href=\"#9-nav\" class=\"headerlink\" title=\"9. nav\"></a>9. nav</h3><p>定义导航栏</p>\n<h3 id=\"10-section\"><a href=\"#10-section\" class=\"headerlink\" title=\"10. section\"></a>10. section</h3><p>定义 section 区域</p>\n<h2 id=\"新的属性：\"><a href=\"#新的属性：\" class=\"headerlink\" title=\"新的属性：\"></a>新的属性：</h2><h3 id=\"1-contenteditable\"><a href=\"#1-contenteditable\" class=\"headerlink\" title=\"1. contenteditable\"></a>1. contenteditable</h3><p>让你的内容可编辑</p>\n<h3 id=\"2-placeholder\"><a href=\"#2-placeholder\" class=\"headerlink\" title=\"2. placeholder\"></a>2. placeholder</h3><p>不必通过javascript就可以显示提示内容了</p>\n<h3 id=\"3-input-的-新type\"><a href=\"#3-input-的-新type\" class=\"headerlink\" title=\"3. input 的 新type\"></a>3. input 的 新type</h3><p>包括 email（如果给 input 的 type 设置为 email，浏览器就会验证这个输入是否是 email 类型）、range（可以创建滑块，它接受 min，max，step 和 value 属性）、color（颜色选择器）等等</p>\n<h3 id=\"4-input-的新属性\"><a href=\"#4-input-的新属性\" class=\"headerlink\" title=\"4. input 的新属性\"></a>4. input 的新属性</h3><p>包括 autocomplete（on / off，是否使用输入字段的自动完成功能）、autofocus（规定输入字段在页面加载时是否获得焦点，但不试用于 type=”hidden”）、required（指示输入字段的值是必须的）、form（规定输入字段所属的一个或多个表单）-&gt; 其实新属性还有很多，可以点击文末 w3c 官网链接进行查看</p>\n<h3 id=\"5-pattern-属性\"><a href=\"#5-pattern-属性\" class=\"headerlink\" title=\"5. pattern 属性\"></a>5. pattern 属性</h3><p>可以在 input 里直接使用正则表达式验证了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">”</span>\" <span class=\"attr\">method</span>=<span class=\"string\">”post”</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">”username”</span>&gt;</span>Create a Username: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">”text”</span> <span class=\"attr\">name</span>=<span class=\"string\">”username”</span> <span class=\"attr\">id</span>=<span class=\"string\">”username”</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">”4-10″</span> <span class=\"attr\">pattern</span>=<span class=\"string\">”\\[A-Za-z\\]&#123;4,10&#125;”</span> <span class=\"attr\">autofocus</span> <span class=\"attr\">required</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">”submit”</span>&gt;</span>Go <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新的重要的元素\"><a href=\"#新的重要的元素\" class=\"headerlink\" title=\"新的重要的元素\"></a>新的重要的元素</h2><h3 id=\"1-canvas\"><a href=\"#1-canvas\" class=\"headerlink\" title=\"1. canvas\"></a>1. canvas</h3><p>使用 Javascript 在网页上绘制图像，canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法；将在游戏、图表制作、banner 广告、模拟器、远程计算机控制、字体设计、图形编辑器、其他可嵌入网站的内容等方面大有可为；</p>\n<h4 id=\"SVG-与-Canvas-两者间的区别：\"><a href=\"#SVG-与-Canvas-两者间的区别：\" class=\"headerlink\" title=\"SVG 与 Canvas 两者间的区别：\"></a>SVG 与 Canvas 两者间的区别：</h4><ol>\n<li>SVG 是一种使用 XML 描述 2D 图形的语言。Canvas 通过 JavaScript 来绘制 2D 图形。</li>\n<li>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。</li>\n<li>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。Canvas 是逐像素进行渲染的。在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</li>\n</ol>\n<p>下表列出了 canvas 与 SVG 之间的一些不同之处：</p>\n<table>\n<thead>\n<tr>\n<th>Canvas</th>\n<th>SVG</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>依赖分辨率</td>\n<td>不依赖分辨率</td>\n</tr>\n<tr>\n<td>不支持事件处理器</td>\n<td>支持事件处理器</td>\n</tr>\n<tr>\n<td>弱的文本渲染能力</td>\n<td>最适合带有大型渲染区域的应用程序（比如谷歌地图）</td>\n</tr>\n<tr>\n<td>能够以 .png 或 .jpg 格式保存结果图像</td>\n<td>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</td>\n</tr>\n<tr>\n<td>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</td>\n<td>不适合游戏应用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-视频-video-元素\"><a href=\"#2-视频-video-元素\" class=\"headerlink\" title=\"2. 视频 video 元素\"></a>2. 视频 video 元素</h3><p>今天，大多数视频是通过插件（比如 Flash）来显示的。然而，并非所有浏览器都拥有同样的插件。通用的视频播放解决方案是 flash 和 flv（flash 从 9 开始支持 h.264 的 mp4）。但是随着 iOS 设备的流行，flash 已经不是万能药了，越来越多的视频网站提供多元的解决方案，而且偏向于 HTML5：也就是说，通过检测 agent 是否支持 html5 来决定使用 video 还是 flash。在面对 IE8 以下的浏览器时，flash 几乎是唯一的选择(silverlight 的接受度普遍不高)。</p>\n<h3 id=\"3-音频-audio-元素\"><a href=\"#3-音频-audio-元素\" class=\"headerlink\" title=\"3. 音频 audio 元素\"></a>3. 音频 audio 元素</h3><p>同理可见 video 元素</p>\n<h2 id=\"对本地离线存储的更好的支持\"><a href=\"#对本地离线存储的更好的支持\" class=\"headerlink\" title=\"对本地离线存储的更好的支持\"></a>对本地离线存储的更好的支持</h2><h3 id=\"1-Web-worker\"><a href=\"#1-Web-worker\" class=\"headerlink\" title=\"1. Web worker\"></a>1. Web worker</h3><p>运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p>\n<h3 id=\"2-Web-Storage\"><a href=\"#2-Web-Storage\" class=\"headerlink\" title=\"2. Web Storage\"></a>2. Web Storage</h3><p>将数据存储在本地，而不会和服务器发生任何交互，使得数据操作更加简便</p>\n<ul>\n<li>Web Storage 与 Cookie 相比存在不少的优势，概括为以下几点：存储空间更大，能提供 5MB 的存储空间（不同浏览器的提供的空间不同），Cookie 仅 4KB</li>\n<li>存储内容不会发送到服务器：当设置了 Cookie 后，Cookie 的内容会随着请求一并发送的服务器，这对于本地存储的数据是一种带宽浪费。而 Web Storage 中的数据则仅仅是存在本地，不会与服务器发生任何交互。</li>\n<li>更多丰富易用的接口：Web Storage 提供了一套更为丰富的接口，使得数据操作更为简便。(开发者的福利)</li>\n<li>独立的存储空间：每个域（包括子域）有独立的存储空间，各个存储空间是完全独立的，因此不会造成数据混乱。</li>\n</ul>\n<h3 id=\"3-Application-Cache\"><a href=\"#3-Application-Cache\" class=\"headerlink\" title=\"3. Application Cache\"></a>3. Application Cache</h3><p>使用 HTML5，通过创建 cache manifest 文件，可以轻松地创建 web 应用的离线版本，HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。应用程序缓存为应用带来三个优势：</p>\n<ul>\n<li>离线浏览 - 用户可在应用离线时使用它们</li>\n<li>速度 - 已缓存资源加载得更快</li>\n<li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。</li>\n</ul>\n<h2 id=\"地理位置-API\"><a href=\"#地理位置-API\" class=\"headerlink\" title=\"地理位置 API\"></a>地理位置 API</h2><p>Geolacation API 用于获得用户的地理位置，实例：</p>\n<ul>\n<li>更新本地信息</li>\n<li>显示用户周围的兴趣点</li>\n<li>交互式车载导航系统（GPS）</li>\n</ul>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://www.w3school.com.cn/html5/index.asp\" target=\"_blank\" rel=\"noopener\">HTML 5 教程</a></li>\n</ul>\n","raw":null,"categories":[{"name":"html","path":"api/categories/html.json"}],"tags":[{"name":"HTML","path":"api/tags/HTML.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"读书笔记系列（1）——HTML5移动Web开发指南","slug":"读书笔记系列（1）——HTML5移动Web开发指南","date":"2017-04-06T07:41:14.000Z","updated":"2019-02-02T10:19:58.054Z","comments":true,"path":"api/articles/读书笔记系列（1）——HTML5移动Web开发指南.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><h3 id=\"包含匹配选择器\"><a href=\"#包含匹配选择器\" class=\"headerlink\" title=\"包含匹配选择器\"></a>包含匹配选择器</h3><p>包含匹配比完全匹配范围更广。只要元素中的属性包含有指定的字符串，元素就使用该样式。其语法是：<code>[attribute*=value]</code>。</p>\n<p>其中 attribute 指的是属性名，value 指的是属性值，包含匹配采用 “ *=” 符号。</p>\n<h3 id=\"首字符匹配选择器\"><a href=\"#首字符匹配选择器\" class=\"headerlink\" title=\"首字符匹配选择器\"></a>首字符匹配选择器</h3><p>首字符匹配就是匹配属性值开头字符，只要开头字符符合匹配，则元素使用该样式。其语法是：<code>[attribute^=value]</code>。</p>\n<p>其中 attribute 指的是属性名，value 指的是属性值，首字符匹配采用“ ^=”符号。</p>\n<h3 id=\"尾字符匹配选择器\"><a href=\"#尾字符匹配选择器\" class=\"headerlink\" title=\"尾字符匹配选择器\"></a>尾字符匹配选择器</h3><p>尾字符匹配跟首字符匹配原理一样。尾字符只匹配结尾的字符串，只要结尾字符串符合匹配，则元素使用该样式。其语法是：<code>[attribute$=value]</code>。其中 attribute 指的是属性名，value 指的是属性值，尾字符匹配采用 “ $=”符号。</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h3><p>before 伪类元素选择器主要的作用是在选择某个元素之前插入内容，一般用于清除浮动。before 选择器的语法是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素标签<span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">\"插入的内容\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如，在 p 元素之前插入“文字”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.before</span>&#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"文字\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h3><p>after 伪类元素选择器和 before 伪类元素选择器原理一样，但 after 是在选择某个元素之后插入内容。after 选择器的语法是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素标签<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"插入的内容\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"first-child\"><a href=\"#first-child\" class=\"headerlink\" title=\"first-child\"></a>first-child</h3><p>指定元素列表中第一个元素的样式。语法：<code>li:first-child</code></p>\n<h3 id=\"last-child\"><a href=\"#last-child\" class=\"headerlink\" title=\"last-child\"></a>last-child</h3><p>和 first-child 是同类型的选择器。last-child 指定元素列表中最后一个元素的样式。语法：<code>li:last-child</code></p>\n<h3 id=\"nth-child-和-nth-last-child\"><a href=\"#nth-child-和-nth-last-child\" class=\"headerlink\" title=\"nth-child 和 nth-last-child\"></a>nth-child 和 nth-last-child</h3><p>指定某个元素的样式或从后数起某个元素的样式。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><h3 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h3><blockquote>\n<p>box-shadow: <code>&lt;length&gt; &lt;length&gt; &lt;length&gt;</code> || color</p>\n</blockquote>\n<p>第一个 length 值是阴影水平偏移值；第二个 length 值是阴影垂直偏移值；第三个 length 值是阴影模糊值。水平和垂直偏移值都可取正负值。</p>\n<p>基于 Webkit 的 Chrome 和 Safari 等浏览器：-webkit-box-shadow</p>\n<p>Firebox 浏览器：-moz-box-shadow</p>\n<h3 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h3><blockquote>\n<p>text-shadow: <code>&lt;length&gt; &lt;length&gt; &lt;length&gt;</code> || color</p>\n</blockquote>\n<p>第一个 length 值是阴影水平偏移值；第二个 length 值是阴影垂直偏移值；第三个 length 值是阴影模糊值。水平和垂直偏移值都可取正负值。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"background-size\"><a href=\"#background-size\" class=\"headerlink\" title=\"background-size**\"></a>background-size**</h3><p>背景图像的大小</p>\n<h3 id=\"background-clip\"><a href=\"#background-clip\" class=\"headerlink\" title=\"background-clip\"></a>background-clip</h3><p>背景的裁剪区域</p>\n<blockquote>\n<p>background-clip: border-box | padding-box | content-box | no-clip</p>\n</blockquote>\n<p>其中：</p>\n<ul>\n<li>border-box 是从 border 区域向外裁剪背景；</li>\n<li>padding-box 是从 padding 区域向外裁剪背景；</li>\n<li>content-box 是从内容区域向外裁剪背景；</li>\n<li>no-clip 是从 border 区域向外裁剪背景。</li>\n</ul>\n<h3 id=\"background-origin\"><a href=\"#background-origin\" class=\"headerlink\" title=\"background-origin\"></a>background-origin</h3><p>background-origin 属性是指定 background-position 属性的参考坐标的起始位置。 background-origin 属性有三种值可以选择，border 值指定从边框的左上角坐标开始；content 值指定从内容区域的左上角坐标开始；padding 值指定从 padding 区域开始。</p>\n<h3 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h3><p>可以使用 Webkit 的其中一种特性对背景采用颜色渐变，而非采用图片方式。</p>\n<blockquote>\n<p>-webkit-gradient(<code>&lt;type&gt;, &lt;port&gt;[, &lt;radius&gt;]?,&lt;point&gt; [, &lt;radius&gt;]? [, &lt;stop&gt;]*</code>)</p>\n</blockquote>\n<p>type 类型是指采用渐变类型，如线性渐变 linear 或径向渐变 radial。如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">-webkit-gradient</span>(<span class=\"selector-tag\">linear</span>, 0 0, 0 100%, <span class=\"selector-tag\">form</span>(<span class=\"selector-id\">#FFF</span>), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#000</span>));</span><br></pre></td></tr></table></figure>\n<p>上述代码的含义是定义一个渐变背景色，该渐变色是线性渐变并且是由白色向黑色渐变的。其中前两个 0 表示的是渐变开始 <strong>X</strong> 和 <strong>Y</strong> 坐标位置；0 和 100%表示的是渐变结束 <strong>X</strong> 和 <strong>Y</strong> 坐标位置。</p>\n<h2 id=\"Media-Queries-移动设备样式\"><a href=\"#Media-Queries-移动设备样式\" class=\"headerlink\" title=\"Media Queries 移动设备样式\"></a>Media Queries 移动设备样式</h2><h3 id=\"viewport设置适应移动设备屏幕大小\"><a href=\"#viewport设置适应移动设备屏幕大小\" class=\"headerlink\" title=\"viewport设置适应移动设备屏幕大小\"></a>viewport设置适应移动设备屏幕大小</h3><p>Android Browser 浏览器的默认值是 800 像素；IE 浏览器的默认值是 974 像素；Opera 浏览器的默认值是 850 像素。viewport 虚拟窗口是在 meta 元素中定义的，其主要作用是设置 Web 页面适应移动设备的屏幕大小。 如以下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码中的 content 属性内共定义三种参数。实际上 content 属性允许设置 6 种不同的 参数，分别如下：</p>\n<ul>\n<li>width：指定虚拟窗口的屏幕宽度大小。</li>\n<li>height：指定虚拟窗口的屏幕高度大小。</li>\n<li>initial-scale：指定初始缩放比例。</li>\n<li>maximum-scale：指定允许用户缩放的最大比例。</li>\n<li>minimum-scale：指定允许用户缩放的最小比例。</li>\n<li>user-scalable：指定是否允许手动缩放。</li>\n</ul>\n<h3 id=\"Media-Queries-如何工作\"><a href=\"#Media-Queries-如何工作\" class=\"headerlink\" title=\"Media Queries 如何工作\"></a>Media Queries 如何工作</h3><p>要实现 Media Queries 样式模块，需要在 head 标签内导入一个 CSS 样式文件，例如，下面代码使用 media 属性定义当前屏幕可视区域的宽度最大值是 600 像素时应用该样式文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen and(max-width:600px)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"small.css\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 small.css 样式文件内，需要定义 media 类型的样式，例如： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width:<span class=\"number\">600px</span>)&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.demo</span>&#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#CCC</span>; &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样也可以判断当移动设备（如 iPad）的方向发生变化时应用该样式。以下代码是当移动设备处于纵向（portrait）模式下时，应用 portrait 样式文件；当移动设备处于横向（landscape）模式下时，应用 landscape 样式文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all and(orientation:portrait)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"portrait.css\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all and(orientation:landscape)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"landscape.css\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Media-Queries-语法总结\"><a href=\"#Media-Queries-语法总结\" class=\"headerlink\" title=\"Media Queries 语法总结\"></a>Media Queries 语法总结</h3><p>Media Queries 的语法如下所示：</p>\n<blockquote>\n<p>@media [media_query] media_type and media_feature</p>\n</blockquote>\n<p>使用 Media Queries 样式模块时都必须以 “@media” 方式开头。media_query 表示查询关键字，在这里可以使用 not 关键字和 only 关键字。not 关键字表示对后面的样式表达式执行取反操作。例如如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not screen and (max-device-width:<span class=\"number\">480px</span>)</span><br></pre></td></tr></table></figure>\n<p>only 关键字的作用是，让不支持 Media Queries 的设备但能读取 Media Type 类型的浏览器忽略这个样式。例如如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (max-device-width:<span class=\"number\">480px</span>)</span><br></pre></td></tr></table></figure>\n<p>对于支持 Media Queries 的移动设备来说，如果存在 only 关键字，移动设备的 Web 浏览器会忽略 only 关键字并直接根据后面的表达式应用样式文件。对于不支持 Media Queries 的设备但能够读取 Media Type 类型的 Web 浏览器，遇到 only 关键字时会忽略这个样式文件。</p>\n<p>media_type 参数的作用是指定设备类型，通常称为媒体类型。实际上在 CSS2.1 版本时已经定义了该媒体类型。</p>\n<ul>\n<li><strong>all</strong>                 所有设备</li>\n<li><strong>aural</strong>               听觉设备</li>\n<li><strong>braille</strong>             点字触觉设备</li>\n<li><strong>handled</strong>             便携设备，如手机、平板电脑</li>\n<li><strong>print</strong>               打印预览图等</li>\n<li><strong>projection</strong>          投影设备</li>\n<li><strong>screen</strong>              显示器、笔记本、移动端等设备</li>\n<li><strong>tty</strong>                 如打字机或终端等设备</li>\n<li><strong>tv</strong>                  电视机等设备类型</li>\n<li><strong>embossed</strong>            盲文打印机</li>\n</ul>\n<p>media_feature 的主要作用是定义 CSS 中的设备特性，大部分移动设备特性都允许接受 min/max 的前缀。 例如，min-width 表示指定大于等于该值；max-width 表示指定小于等于该值。</p>\n","raw":null,"categories":[{"name":"html","path":"api/categories/html.json"}],"tags":[{"name":"HTML","path":"api/tags/HTML.json"},{"name":"笔记","path":"api/tags/笔记.json"}]},{"title":"读书笔记系列（5）——响应式Web设计-HTML5和CSS3实战","slug":"读书笔记系列（5）——响应式Web设计-HTML5和CSS3实战","date":"2017-04-06T09:17:52.000Z","updated":"2019-02-02T10:19:58.054Z","comments":true,"path":"api/articles/读书笔记系列（5）——响应式Web设计-HTML5和CSS3实战.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_297.png","content":"<h2 id=\"1-一句话概括响应式设计\"><a href=\"#1-一句话概括响应式设计\" class=\"headerlink\" title=\"1. 一句话概括响应式设计\"></a>1. 一句话概括响应式设计</h2><p>如果要用一句话概括响应式网页设计，我觉得它是针对任意设备对网页内容进行完美布局的一种显示机制.相反，如果需要根据不同设备提供特定的内容和功能，那就需要一个真正的“手机版”网站.这种情况下，手机版网站会提供与桌面版网站完全不同的用户体验.</p>\n<h2 id=\"2-CSS-reset-网站\"><a href=\"#2-CSS-reset-网站\" class=\"headerlink\" title=\"2. CSS reset 网站\"></a>2. CSS reset 网站</h2><ul>\n<li><a href=\"http://meyerweb.com/eric/tools/css/reset/\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/css/reset/</a>，Eric Meyer的原版，主要针对HTML4</li>\n<li><a href=\"http://meyerweb.com/eric/tools/css/reset/ http://necolas.github.com/normalize.css/\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/css/reset/ http://necolas.github.com/normalize.css/</a>，针对HTML5</li>\n</ul>\n<h2 id=\"3-CSS-网格系统\"><a href=\"#3-CSS-网格系统\" class=\"headerlink\" title=\"3. CSS 网格系统\"></a>3. CSS 网格系统</h2><div align=\"center\"><img src=\"/images/hexo_post_297.png\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"4-地标角色属性\"><a href=\"#4-地标角色属性\" class=\"headerlink\" title=\"4. 地标角色属性\"></a>4. 地标角色属性</h2><p>role=”” 针对文档结构的各部分分别有如下的地标角色：</p>\n<ul>\n<li>application：用来定义用作网页应用的区域；</li>\n<li>banner：用来定义一个站点级别(而不是某个特定文档的)的区域.如网站的头部和logo；</li>\n<li>complementary：一个对页面主要区域进行补充说明的区域；</li>\n<li>contentinfo：与页面主要内容相关的信息区域，例如页脚的网站版权信息区域；</li>\n<li>form：定义表单，但是如果表单用于搜索，请使用search来替代；</li>\n<li>main：页面的主体内容；</li>\n<li>navigation：链向当前文档或相关文档的导航链接；</li>\n<li>search：一个用于搜索的区域。</li>\n</ul>\n<h2 id=\"5-导航栏使用-table-显示模式\"><a href=\"#5-导航栏使用-table-显示模式\" class=\"headerlink\" title=\"5. 导航栏使用 table 显示模式\"></a>5. 导航栏使用 table 显示模式</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做可以保证如果有另外的列表项追加进来，同样会自动地调整它们之间的间距。最后，使用 CSS3 选择器将最后一个列表项的文字置为右对齐，将第一个列表项的文字置为左对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-在响应式设计中使用自定义-font-face-字体的注意事项\"><a href=\"#6-在响应式设计中使用自定义-font-face-字体的注意事项\" class=\"headerlink\" title=\"6. 在响应式设计中使用自定义 @font-face 字体的注意事项\"></a>6. 在响应式设计中使用自定义 @font-face 字体的注意事项</h2><p>唯一需要注意的，是在响应式设计中使用该技术时要考虑到字体文件大小。有些字体可能会非常庞大，如果你想保持网站的高性能，请注意控制自定义字体的文件尺寸。</p>\n<h2 id=\"7-浮雕文字效果\"><a href=\"#7-浮雕文字效果\" class=\"headerlink\" title=\"7. 浮雕文字效果\"></a>7. 浮雕文字效果</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 1<span class=\"selector-tag\">px</span> 0 <span class=\"selector-tag\">hsla</span>(0， 0%， 100%， 0<span class=\"selector-class\">.75</span>);</span><br></pre></td></tr></table></figure>\n<p>不要模糊，不要水平阴影，仅在垂直方向设置 1 或 2 像素的”白影”即可。</p>\n<h2 id=\"8-让整个屏幕飞舞\"><a href=\"#8-让整个屏幕飞舞\" class=\"headerlink\" title=\"8. 让整个屏幕飞舞\"></a>8. 让整个屏幕飞舞</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123; <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>; &#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_298.png\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"9-CSS3-实现-3D-变形效果\"><a href=\"#9-CSS3-实现-3D-变形效果\" class=\"headerlink\" title=\"9. CSS3 实现 3D 变形效果\"></a>9. CSS3 实现 3D 变形效果</h2><h3 id=\"在父级元素上设置透视，这样就开启了-3D-场景\"><a href=\"#在父级元素上设置透视，这样就开启了-3D-场景\" class=\"headerlink\" title=\"在父级元素上设置透视，这样就开启了 3D 场景\"></a>在父级元素上设置透视，这样就开启了 3D 场景</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123; <span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">200</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>透视的值越大，就表示你的视点与 3D 场景之间的景深越大。因此，如果想要一点隐约的 3D 效果，就增大透视值；如果想要非常明显的 3D 效果，则减小透视值。</p>\n<h3 id=\"延续父元素的透视\"><a href=\"#延续父元素的透视\" class=\"headerlink\" title=\"延续父元素的透视\"></a>延续父元素的透视</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.son</span>&#123; <span class=\"attribute\">-webkit-transform-style</span>: perserve-<span class=\"number\">3</span>d; <span class=\"attribute\">-webkit-transition</span>: <span class=\"number\">1s</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>.father 类中添加的透视声明只会应用到其第一个子元素上。因此，为了延续父元素的透视，我们给 .son 元素设定了 preserve-3d (这样可以设置一个 3D 场景)。</p>\n<h3 id=\"当鼠标悬停在-father-模块上时，我们给-son-这个-div-添加一个翻转效果\"><a href=\"#当鼠标悬停在-father-模块上时，我们给-son-这个-div-添加一个翻转效果\" class=\"headerlink\" title=\"当鼠标悬停在 .father 模块上时，我们给 .son 这个 div 添加一个翻转效果\"></a>当鼠标悬停在 .father 模块上时，我们给 .son 这个 div 添加一个翻转效果</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.son</span>&#123; <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg); &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"当海报翻转之后隐藏在其背面内容\"><a href=\"#当海报翻转之后隐藏在其背面内容\" class=\"headerlink\" title=\"当海报翻转之后隐藏在其背面内容\"></a>当海报翻转之后隐藏在其背面内容</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.face</span> &#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">-webkit-backface-visibility</span>: hidden; &#125;</span><br></pre></td></tr></table></figure>\n<p>.face 必须使用绝对定位，这样海报才能盖在 .back 这个 div 的上面</p>\n<h3 id=\"给-back-加上-rotateY\"><a href=\"#给-back-加上-rotateY\" class=\"headerlink\" title=\"给 .back 加上 rotateY\"></a>给 .back 加上 rotateY</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.back</span> &#123; <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg); &#125;</span><br></pre></td></tr></table></figure>\n<p>不加这句的话，.back 这个 div 就会显示在正面海报之上。最终的 HTML 结构以及 CSS 样式如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"Qcontainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"film\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"face front\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/goonies.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"The Goonies\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"face back\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>HOT!<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.Qcontainer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">28%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">800</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.film</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">15em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform-style</span>: preserve-<span class=\"number\">3</span>d;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Qcontainer</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.film</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-backface-visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.back</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">66%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">127%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#3b3b3b</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(top，</span><br><span class=\"line\">  rgba(0，0，0，0.65) <span class=\"number\">0%</span>，</span><br><span class=\"line\">  <span class=\"built_in\">rgba</span>(0，0，0，0) <span class=\"number\">100%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">15%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-list-及对应的-datalist-元素\"><a href=\"#10-list-及对应的-datalist-元素\" class=\"headerlink\" title=\"10. list(及对应的 datalist 元素)\"></a>10. list(及对应的 datalist 元素)</h2><p>list 属性以及对应的 datalist 元素可以让用户在输入框中开始输入值的时候，显示一组备选值。下面是一个包含在 div 中的使用 list 属性及对应 datalist 元素的代码示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"awardWon\"</span>&gt;</span>Award Won<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"awardWon\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"awardWon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">list</span>=<span class=\"string\">\"awards\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">datalist</span> <span class=\"attr\">id</span>=<span class=\"string\">\"awards\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Picture\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Director\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Adapted Screenplay\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Original Screenplay\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">datalist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>list 属性中的值（awards）同时也是 datalist 元素的 id。这样就可以让 datalist 与输入项关联起来。虽然将 option 包裹在 select 中不是必需的，但这样做便于为老版本浏览器提供降级方案。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_299.png\" alt=\"\" width=\"550\"></div>","raw":null,"categories":[{"name":"note","path":"api/categories/note.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"HTML","path":"api/tags/HTML.json"},{"name":"笔记","path":"api/tags/笔记.json"}]},{"title":"前端可以这样玩儿！","slug":"前端可以这样玩儿！","date":"2017-04-12T13:36:41.000Z","updated":"2019-02-02T10:19:58.050Z","comments":true,"path":"api/articles/前端可以这样玩儿！.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_40.png","content":"<p>本文总结了一些前端冷知识，相信看完之后的你一定会觉得前端为什么如此好玩儿？！（源自 Quora 上的一个帖子，同时又查阅了一些其他资料）</p>\n<h2 id=\"HTML-篇\"><a href=\"#HTML-篇\" class=\"headerlink\" title=\"HTML 篇\"></a>HTML 篇</h2><h3 id=\"浏览器地址栏运行-JavaScript-代码\"><a href=\"#浏览器地址栏运行-JavaScript-代码\" class=\"headerlink\" title=\"浏览器地址栏运行 JavaScript 代码\"></a>浏览器地址栏运行 JavaScript 代码</h3><p>这个相信很多人是知道的，在浏览器地址栏可以直接运行 JavaScript 代码，做法是以 javascript: 开头后跟要执行的语句。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:alert(<span class=\"string\">'hello \bMerrier :)'</span>);</span><br></pre></td></tr></table></figure>\n<p>将以上代码贴到浏览器地址栏回车后 alert 正常执行，一个弹窗神现。需要注意的是如果是通过 copy paste 代码到浏览器地址栏的话，IE 及 Chrome 会自动去掉代码开头的 javascript:，所以需要手动添加起来才能正确执行，而 Firefox 中虽然不会自动去掉，但它根本就不支持在地址栏运行 JS 代码，sigh~</p>\n<h3 id=\"浏览器地址栏运行-HTML-代码\"><a href=\"#浏览器地址栏运行-HTML-代码\" class=\"headerlink\" title=\"浏览器地址栏运行 HTML 代码\"></a>浏览器地址栏运行 HTML 代码</h3><p>如果说上面那条小秘密知道的人还算多的话，这条秘笈知道的人就要少一些了，在非 IE 内核的浏览器地址栏可以直接运行 HTML 代码！比如在地址栏输入以下代码然后回车运行，会出现指定的页面内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:text/html,<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_40.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"你造么，可以把浏览器当编辑器\"><a href=\"#你造么，可以把浏览器当编辑器\" class=\"headerlink\" title=\"你造么，可以把浏览器当编辑器\"></a>你造么，可以把浏览器当编辑器</h3><p>还是浏览器地址栏上做文章，将以下代码贴到地址栏运行后浏览器变成了一个原始而简单的编辑器，与 Windows 自带的 notepad 一样，吼吼。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:text/html, <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">contenteditable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_47.gif\" alt=\"\" width=\"500\"></div>\n\n<p>归根结底多亏了 HTML5 中新加的 contenteditable 属性，当元素指定了该属性后，元素的内容成为可编辑状态。</p>\n<h3 id=\"整个页面变得可编辑\"><a href=\"#整个页面变得可编辑\" class=\"headerlink\" title=\"整个页面变得可编辑\"></a>整个页面变得可编辑</h3><p>将以下代码放到 console 执行后，整个页面将变得可编辑，随意践踏吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.contentEditable=<span class=\"string\">'true'</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_45.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"利用-a-标签自动解析-URL\"><a href=\"#利用-a-标签自动解析-URL\" class=\"headerlink\" title=\"利用 a 标签自动解析 URL\"></a>利用 a 标签自动解析 URL</h3><p>很多时候我们有从一个 URL 中提取域名，查询关键字，变量参数值等的需要，而万万没想到可以让浏览器方便地帮我们完成这一任务而不用我们写正则去抓取。方法就在 JS 代码里先创建一个a标签然后将需要解析的 URL 赋值给 a 的 href 属性，然后就得到了一切我们想要的了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">a.href = <span class=\"string\">'http://www.cnblogs.com/wayou/p/'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.host);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_41.png\" alt=\"\" width=\"500\"></div>\n\n<p>利用这一原理，稍微扩展一下，就得到了一个更加健壮的解析 URL 各部分的通用方法了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =  <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    a.href = url;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        source: url,</span><br><span class=\"line\">        protocol: a.protocol.replace(<span class=\"string\">':'</span>,<span class=\"string\">''</span>),</span><br><span class=\"line\">        host: a.hostname,</span><br><span class=\"line\">        port: a.port,</span><br><span class=\"line\">        query: a.search,</span><br><span class=\"line\">        params: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ret = &#123;&#125;,</span><br><span class=\"line\">                seg = a.search.replace(<span class=\"regexp\">/^\\?/</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>),</span><br><span class=\"line\">                len = seg.length, i = <span class=\"number\">0</span>, s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;i&lt;len;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!seg[i]) &#123; <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">                s = seg[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">                ret[s[<span class=\"number\">0</span>]] = s[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;)(),</span><br><span class=\"line\">        file: (a.pathname.match(<span class=\"regexp\">/\\/([^\\/?#]+)$/i</span>) || [,<span class=\"string\">''</span>])[<span class=\"number\">1</span>],</span><br><span class=\"line\">        hash: a.hash.replace(<span class=\"string\">'#'</span>,<span class=\"string\">''</span>),</span><br><span class=\"line\">        path: a.pathname.replace(<span class=\"regexp\">/^([^\\/])/</span>,<span class=\"string\">'/$1'</span>),</span><br><span class=\"line\">        relative: (a.href.match(<span class=\"regexp\">/tps?:\\/\\/[^\\/]+(.+)/</span>) || [,<span class=\"string\">''</span>])[<span class=\"number\">1</span>],</span><br><span class=\"line\">        segments: a.pathname.replace(<span class=\"regexp\">/^\\//</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"页面拥有-ID-的元素会创建全局变量\"><a href=\"#页面拥有-ID-的元素会创建全局变量\" class=\"headerlink\" title=\"页面拥有 ID 的元素会创建全局变量\"></a>页面拥有 ID 的元素会创建全局变量</h3><p>在一张 HTML 页面中，所有设置了 ID 属性的元素会在 JavaScript 的执行环境中创建对应的全局变量，这意味着 document.getElementById 像人的阑尾一样显得多余了。但实际项目中最好老老实实该怎么写就怎么写，毕竟常规代码出乱子的机会要小得多。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sample\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(sample);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_42.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"加载-CDN-文件时，可以省掉-HTTP-标识\"><a href=\"#加载-CDN-文件时，可以省掉-HTTP-标识\" class=\"headerlink\" title=\"加载 CDN 文件时，可以省掉 HTTP 标识\"></a>加载 CDN 文件时，可以省掉 HTTP 标识</h3><p>现在很流行的 CDN 即从专门的服务器加载一些通用的 JS 和 CSS 文件，出于安全考虑有的 CDN 服务器使用 HTTPS 方式连接，而有的是传统的 HTTP，其实我们在使用时可以忽略掉这个，将它从 URL 中省去。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//domain.com/path/to/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-script-标签保存任意信息\"><a href=\"#利用-script-标签保存任意信息\" class=\"headerlink\" title=\"利用 script 标签保存任意信息\"></a>利用 script 标签保存任意信息</h3><p>将 script 标签设置为 type=’text’ 然后可以在里面保存任意信息，之后可以在 JavaScript 代码中很方便地获取。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This won't display<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'template'</span>).innerHTML</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-篇\"><a href=\"#CSS-篇\" class=\"headerlink\" title=\"CSS 篇\"></a>CSS 篇</h2><h3 id=\"我的鼠标呢？\"><a href=\"#我的鼠标呢？\" class=\"headerlink\" title=\"我的鼠标呢？\"></a>我的鼠标呢？</h3><p>相信你看完以下代码后能够预料到会出现什么效果。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: none<span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的文字模糊效果\"><a href=\"#简单的文字模糊效果\" class=\"headerlink\" title=\"简单的文字模糊效果\"></a>简单的文字模糊效果</h3><p>以下两行简单的 CSS3 代码可达到将文字模糊化处理的目的，出来的效果有点像使用 PS 的滤镜，so cool!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: transparent;</span><br><span class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">#111</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><p>当然你可以将容器设置为 display: table，然后将子元素也就是要垂直居中显示的元素设置为 display: table-cell，然后加上 vertical-align: middle 来实现，但此种实现往往会因为 display: table 而破坏整体布局，那还不如直接用 table 标签了呢。下面这个样式利用了 translate 来巧妙实现了垂直居中样式，需 IE9+。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center-vertical</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比而言，水平居中要简单得多，像上面提到的 text-align: center，经常用到的技巧还有 margin: 0 auto。但对于 margin 大法也只在子元素宽度小于容器宽度时管用，当子元素宽度大于容器宽度时此法失效。如法炮制，利用 left 和 transform 同样可实现水平居中，不过意义不大，毕竟 text-align 和 margin 差不多满足需求了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center-horizontal</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多重边框\"><a href=\"#多重边框\" class=\"headerlink\" title=\"多重边框\"></a>多重边框</h3><p>利用重复指定 box-shadow 来达到多个边框的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS Border with Box-Shadow Example */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">18px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">24px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_43.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"实时编辑-CSS\"><a href=\"#实时编辑-CSS\" class=\"headerlink\" title=\"实时编辑 CSS\"></a>实时编辑 CSS</h3><p>通过设置 style 标签的 display: block 样式可以让页面的 style 标签显示出来，并且加上 contentEditable 属性后可以让样式成为可编辑状态，更改后的样式效果也是实时更新呈现的。此技巧在 IE 下无效。拥有此技能者，逆天也！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:block\"</span> <span class=\"attr\">contentEditable</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        \t<span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">color</span>: blue &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_46.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"创建长宽比固定的元素\"><a href=\"#创建长宽比固定的元素\" class=\"headerlink\" title=\"创建长宽比固定的元素\"></a>创建长宽比固定的元素</h3><p>通过设置父级窗口的 padding-bottom 可以达到让容器保持一定的长度比的目的，这在响应式页面设计中比较有用，能够保持元素不变形。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; position: relative; padding-bottom: 20%;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute; left: 0; top: 0; right: 0; bottom: 0;background-color:yellow;\"</span>&gt;</span></span><br><span class=\"line\">        this content will have a constant aspect ratio that varies based on the width.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_48.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"CSS-中也可以做简单运算\"><a href=\"#CSS-中也可以做简单运算\" class=\"headerlink\" title=\"CSS 中也可以做简单运算\"></a>CSS 中也可以做简单运算</h3><p>通过 CSS 中的 calc 方法可以进行一些简单的运算，从而达到动态指定元素样式的目的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: <span class=\"built_in\">calc</span>(100% - 50px) <span class=\"built_in\">calc</span>(100% - 20px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-篇\"><a href=\"#JavaScript-篇\" class=\"headerlink\" title=\"JavaScript 篇\"></a>JavaScript 篇</h2><h3 id=\"生成随机字符串\"><a href=\"#生成随机字符串\" class=\"headerlink\" title=\"生成随机字符串\"></a>生成随机字符串</h3><p>利用 Math.random 和 toString 生成随机字符串，来自前一阵子看到的一篇<a href=\"http://flippinawesome.org/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/\" target=\"_blank\" rel=\"noopener\">博文</a>。这里的技巧是利用了 toString 方法可以接收一个基数作为参数的原理，这个基数从 2 到 36 封顶。如果不指定，默认基数是 10 进制。略屌！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateRandomAlphaNum</span>(<span class=\"params\">len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rdmString = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; rdmString.length &lt; len; )&#123;</span><br><span class=\"line\">        rdmString += <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">36</span>).substr(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdmString.substr(<span class=\"number\">0</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_44.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"整数的操作\"><a href=\"#整数的操作\" class=\"headerlink\" title=\"整数的操作\"></a>整数的操作</h3><p>JavaScript 中是没有整型概念的，但利用好位操作符可以轻松处理，同时获得效率上的提升。|0 和 ~~ 是很好的一个例子，使用这两者可以将浮点转成整型且效率方面要比同类的 parseInt, Math.round 要快。在处理像素及动画位移等效果的时候会很有用。性能比较<a href=\"http://jsperf.com/math-floor-vs-math-round-vs-parseint/42\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"number\">12.4</span> / <span class=\"number\">4.13</span>) | <span class=\"number\">0</span>; <span class=\"comment\">// 结果为3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = ~~(<span class=\"number\">12.4</span> / <span class=\"number\">4.13</span>); <span class=\"comment\">// 结果为3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重写原生浏览器方法以实现新功能\"><a href=\"#重写原生浏览器方法以实现新功能\" class=\"headerlink\" title=\"重写原生浏览器方法以实现新功能\"></a>重写原生浏览器方法以实现新功能</h3><p>下面的代码通过重写浏览器的 alert 让它可以记录弹窗的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldAlert = <span class=\"built_in\">window</span>.alert,</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.alert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        count ++;</span><br><span class=\"line\">        oldAlert(a + <span class=\"string\">\"\\n You've called alert \"</span> + count + <span class=\"string\">\" times now. Stop, it's evil!\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello World\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"console-显示图片以及为文字加样式\"><a href=\"#console-显示图片以及为文字加样式\" class=\"headerlink\" title=\"console 显示图片以及为文字加样式\"></a>console 显示图片以及为文字加样式</h3><p>在 Chrome 的开发者工具里，console 可以加样式，可以显示缤纷的颜色，甚至图片。简直爽翻了。具体来说，是可以对输出到 console 控制台的文字进行 CSS 控制。格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c需要输出的信息 \"</span>, <span class=\"string\">\"css 代码\"</span>);</span><br></pre></td></tr></table></figure>\n<p>下面是一些已经写好的 console 新玩法代码，可以在 chrome 控制台里面实测（关于 console 的更多玩法，推荐 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console#示例\" target=\"_blank\" rel=\"noopener\">MDN关于console的文档</a>）：</p>\n<h4 id=\"1-3D-Text\"><a href=\"#1-3D-Text\" class=\"headerlink\" title=\"1. 3D Text\"></a>1. 3D Text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c3D Text\"</span>,<span class=\"string\">\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,</span></span><br><span class=\"line\"><span class=\"string\">0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),</span></span><br><span class=\"line\"><span class=\"string\">0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Colorful-CSS\"><a href=\"#2-Colorful-CSS\" class=\"headerlink\" title=\"2. Colorful CSS\"></a>2. Colorful CSS</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%cColorful CSS\"</span>,<span class=\"string\">\"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));</span></span><br><span class=\"line\"><span class=\"string\">background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);</span></span><br><span class=\"line\"><span class=\"string\">filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Rainbow-Text\"><a href=\"#3-Rainbow-Text\" class=\"headerlink\" title=\"3. Rainbow Text\"></a>3. Rainbow Text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%cRainbow Text '</span>, <span class=\"string\">'background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-输出图片\"><a href=\"#4-输出图片\" class=\"headerlink\" title=\"4. 输出图片\"></a>4. 输出图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c\"</span>, <span class=\"string\">\"padding:50px 300px;line-height:120px;background:url('https://ss0.bdstatic.com/5aV1bjqh\\_Q23odCf/static/superman/img/logo/bd\\_logo1_31bdc765.png') no-repeat;\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"不声明第三个变量的值交换\"><a href=\"#不声明第三个变量的值交换\" class=\"headerlink\" title=\"不声明第三个变量的值交换\"></a>不声明第三个变量的值交换</h3><p>我们都知道交换两个变量值的常规做法，那就是声明一个中间变量来暂存。但鲜有人去挑战不声明中间变量的情况，下面的代码给出了这种实现。蛮有创意的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a= [b, b = a][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_49.jpg\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h3><p>在 JavaScript 的世界，万物皆对象。除了 null 和 undefined，其他基本类型数字，字符串和布尔值都有对应有包装对象。对象的一个特征是你可以在它身上直接调用方法。对于数字基本类型，当试图在其身上调用 toString 方法会失败，但用括号括起来后再调用就不会失败了，内部实现是用相应的包装对象将基本类型转为对象。所以 <strong>(1).toString()</strong> 相当于 <strong>new Number(1).toString()</strong>。因此，你的确可以把基本类型数字，字符串，布尔等当对象使用的，只是注意语法要得体。同时我们注意到，JavaScript 中数字是不分浮点和整形的，所有数字其实均是浮点类型，只是把小数点省略了而已，比如你看到的 1 可以写成 1.，这也就是为什么当你试图 1.toString() 时会报错，所以正确的写法应该是这样：<strong>1..toString()</strong>，或者如上面所述加上括号，这里括号的作用是纠正 JS 解析器，不要把 1 后面的点当成小数点。内部实现如上面所述，是将 1. 用包装对象转成对象再调用方法。</p>\n<h3 id=\"If-语句的变形\"><a href=\"#If-语句的变形\" class=\"headerlink\" title=\"If 语句的变形\"></a>If 语句的变形</h3><p>当你需要写一个 if 语句的时候，不妨尝试另一种更简便的方法，用 JavaScript 中的逻辑操作符来代替。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> day = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).getDay() === <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//传统if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (day) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Today is Sunday!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//运用逻辑与代替if</span></span><br><span class=\"line\">day &amp;&amp; alert(<span class=\"string\">'Today is Sunday!'</span>);</span><br></pre></td></tr></table></figure>\n<p>比如上面的代码，首先得到今天的日期，如果是星期天，则弹窗，否则什么也不做。我们知道逻辑操作存在短路的情况，对于逻辑与表达式，只有两者都真才结果才为真，如果前面的 day 变量被判断为假了，那么对于整个与表达式来说结果就是假，所以就不会继续去执行后面的 alert 了，如果前面 day 为真，则还要继续执行后面的代码来确定整个表达式的真假。利用这点达到了 if 的效果。</p>\n<h3 id=\"禁止别人以-iframe-加载你的页面\"><a href=\"#禁止别人以-iframe-加载你的页面\" class=\"headerlink\" title=\"禁止别人以 iframe 加载你的页面\"></a>禁止别人以 iframe 加载你的页面</h3><p>下面的代码已经不言自明了，没什么好多说的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.location != <span class=\"built_in\">window</span>.parent.location) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.parent.location = <span class=\"built_in\">window</span>.location;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.quora.com/Web-Development/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about?utm\\_source=html5weekly&amp;utm\\_medium=email\" target=\"_blank\" rel=\"noopener\">What are the most interesting HTML/JS/DOM/CSS hacks that most web developers don’t know about?</a></li>\n<li><a href=\"http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html\" target=\"_blank\" rel=\"noopener\">前端不为人知的一面–前端冷知识集锦</a></li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"技巧","path":"api/tags/技巧.json"},{"name":"JS","path":"api/tags/JS.json"},{"name":"HTML","path":"api/tags/HTML.json"}]}]}