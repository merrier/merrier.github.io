{"name":"内存","postlist":[{"title":"理解JS中的内存分配","slug":"理解JS中的内存分配","date":"2017-08-03T02:06:42.000Z","updated":"2019-01-27T13:15:42.899Z","comments":true,"path":"api/articles/理解JS中的内存分配.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_113.jpeg","content":"<h2 id=\"原始值和引用值\"><a href=\"#原始值和引用值\" class=\"headerlink\" title=\"原始值和引用值\"></a>原始值和引用值</h2><p>在 ECMAScript 中，变量可以存放两种类型的值，即原始值和引用值；原始值：原始数据类型（简单类型）的值，即undefined、null、Number、String、Boolean 类型所表示的值；引用值：复合数据类型（对象类型）的值，即Object、Function、Array 以及自定义对象等</p>\n<h2 id=\"栈和堆\"><a href=\"#栈和堆\" class=\"headerlink\" title=\"栈和堆\"></a>栈和堆</h2><p>与原始值和引用值对应存在两种结构的内存，即栈和堆</p>\n<h3 id=\"栈和原始值\"><a href=\"#栈和原始值\" class=\"headerlink\" title=\"栈和原始值\"></a>栈和原始值</h3><p>栈是一种后进先出的数据结构，在 JS 中可以通过 Array（数组）来模拟栈的行为 原始值是存储在栈中的简单数据，也就是说，它们的值直接存储在变量访问的位置</p>\n<h3 id=\"堆和引用值\"><a href=\"#堆和引用值\" class=\"headerlink\" title=\"堆和引用值\"></a>堆和引用值</h3><p>堆是基于散列算法的数据结构，在 JS 中，引用值是存放在堆中的 引用值是存储在堆中的对象，也就是说，存储在变量处的值（即指向对象的变量，存储在栈中）是一个指针，指向存储在堆中的实际对象</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>通过上面的讲解，我们可以得到如下简单的结论：</p>\n<ul>\n<li><strong>简单类型都放在栈里</strong></li>\n<li><strong>对象类型都放在堆里，指向对象的指针放在栈里</strong></li>\n</ul>\n<p>假如我们有如下几个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123; <span class=\"attr\">m</span>: <span class=\"number\">20</span> &#125;  <span class=\"comment\">//地址假设为0x0012ff7c</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = &#123; <span class=\"attr\">m</span>: <span class=\"number\">20</span> &#125;  <span class=\"comment\">//重新开辟一段内存空间假设为0x0012ff8f</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e==d);  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>它们在实际存储时的内存空间占用是这样的：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_113.jpeg\" alt=\"\" width=\"600\"></div>\n\n<p>看到这里，你可能会问：为什么引用值要放在堆中，而原始值要放在栈中，不都是在内存中吗，为什么不放在一起呢？接下来，让我们来探索问题的答案！ 首先，请允许我再举个栗子:）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">id, name, age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bol = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = \\[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>\\];</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"number\">100</span>,<span class=\"string\">\"笨蛋的座右铭\"</span>,<span class=\"number\">25</span>);</span><br></pre></td></tr></table></figure>\n<p>然后，我们来看一下分析图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_38.jpeg\" alt=\"\" width=\"400\"></div>\n\n<p>从上图我们可以看到，我们无法直接操纵堆中的数据，也就是说我们无法直接操纵对象，但我们可以通过栈中对对象的引用来操纵对象。</p>\n<h2 id=\"答案揭晓\"><a href=\"#答案揭晓\" class=\"headerlink\" title=\"答案揭晓\"></a>答案揭晓</h2><p>现在让我们来回答为什么引用值要放在堆中，而原始值要放在栈中的问题： 记住一句话：</p>\n<blockquote>\n<p>能量是守恒的，无非是时间换空间，空间换时间的问题</p>\n</blockquote>\n<p>堆比栈大，栈比堆的运算速度快,对象是一个复杂的结构，并且可以自由扩展，如：数组可以无限扩充，对象可以自由添加属性。将他们放在堆中是为了不影响栈的效率。而是通过引用的方式查找到堆中的实际对象再进行操作。相对于简单数据类型而言，简单数据类型就比较稳定，并且它只占据很小的内存。不将简单数据类型放在堆是因为通过引用到堆中查找实际对象是要花费时间的，而这个综合成本远大于直接从栈中取得实际值的成本。所以简单数据类型的值直接存放在栈中。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000008432611\" target=\"_blank\" rel=\"noopener\">从[]==![]为true来剖析JavaScript各种蛋疼的类型转换</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_8ecde0fe0102vy6e.html\" target=\"_blank\" rel=\"noopener\">理解js内存分配</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"内存","path":"api/tags/内存.json"}]}]}