{"name":"慕课网","postlist":[{"title":"Hybrid设计与浅析","slug":"Hybrid设计与浅析","date":"2017-12-01T14:19:00.000Z","updated":"2019-02-04T13:27:44.349Z","comments":true,"path":"api/articles/Hybrid设计与浅析.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_288.png","content":"<p>慕课网视频——<a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a>的学习笔记，同时加入了一些自己的理解，希望通过本篇文章能够让你理解什么是 Hybrid，以及 Hybrid 有什么特点，同时还会简单介绍一下 Hybrid 开发时的注意事项。</p>\n<h2 id=\"什么是-Hybrid\"><a href=\"#什么是-Hybrid\" class=\"headerlink\" title=\"什么是 Hybrid\"></a>什么是 Hybrid</h2><p>Hybrid 和普通前端代码没差别，只不过宿主不一样，Hybrid 就是在 app 中运行的前端代码。</p>\n<h2 id=\"业内的-Hybrid-App\"><a href=\"#业内的-Hybrid-App\" class=\"headerlink\" title=\"业内的 Hybrid App\"></a>业内的 Hybrid App</h2><ul>\n<li>携程</li>\n<li>百度糯米</li>\n<li>京东</li>\n<li>天猫</li>\n<li>微信</li>\n<li>QQ</li>\n<li>手机百度</li>\n<li>支付宝</li>\n</ul>\n<h3 id=\"一般地，APP-开发方式有以下几种方式：\"><a href=\"#一般地，APP-开发方式有以下几种方式：\" class=\"headerlink\" title=\"一般地，APP 开发方式有以下几种方式：\"></a>一般地，APP 开发方式有以下几种方式：</h3><ol>\n<li>Web App（浏览器网页）</li>\n<li>Native App（原生app）</li>\n<li>Hybrid App（ H5 混合app）</li>\n<li>超级Hybrid（React Native、Weex）</li>\n<li>微信/支付宝小程序（或内嵌页面）</li>\n</ol>\n<h2 id=\"Hybrid-相比-Native-和纯-Html5-的优缺点\"><a href=\"#Hybrid-相比-Native-和纯-Html5-的优缺点\" class=\"headerlink\" title=\"Hybrid 相比 Native 和纯 Html5 的优缺点\"></a>Hybrid 相比 Native 和纯 Html5 的优缺点</h2><div align=\"center\"><img src=\"/images/hexo_post_288.png\" alt=\"\"></div>\n\n<h2 id=\"Native-与-H5-的职责\"><a href=\"#Native-与-H5-的职责\" class=\"headerlink\" title=\"Native 与 H5 的职责\"></a>Native 与 H5 的职责</h2><ul>\n<li>H5 做业务</li>\n<li>Native 提供基础能力</li>\n<li>Native 做好必须 Native 做的业务</li>\n</ul>\n<h2 id=\"H5-与-Native-通信\"><a href=\"#H5-与-Native-通信\" class=\"headerlink\" title=\"H5 与 Native 通信\"></a>H5 与 Native 通信</h2><h3 id=\"JavascriptCore\"><a href=\"#JavascriptCore\" class=\"headerlink\" title=\"JavascriptCore\"></a>JavascriptCore</h3><p>和 JS Bridge 类似</p>\n<div align=\"center\"><img src=\"/images/hexo_post_104.png\" alt=\"\"></div>\n\n<h2 id=\"通过-URL-Schema-通信\"><a href=\"#通过-URL-Schema-通信\" class=\"headerlink\" title=\"通过 URL Schema 通信\"></a>通过 URL Schema 通信</h2><h3 id=\"App-主动与-H5-通信\"><a href=\"#App-主动与-H5-通信\" class=\"headerlink\" title=\"App 主动与 H5 通信\"></a>App 主动与 H5 通信</h3><div align=\"center\"><img src=\"/images/hexo_post_88.png\" alt=\"\"></div>\n\n<p>将一组 API 绑定在 webview 的 window 对象上，App 通过 iOS/Android 原生方法调用 window 对象中的 js 方法</p>\n<h3 id=\"H5-主动与-App-通信\"><a href=\"#H5-主动与-App-通信\" class=\"headerlink\" title=\"H5 主动与 App 通信\"></a>H5 主动与 App 通信</h3><div align=\"center\"><img src=\"/images/hexo_post_105.png\" alt=\"\"></div>\n\n<p>App 实现对 WebView URL 的观察者模式，H5 通过改变 URL 的哈希值，App 会通过解析哈希值的变化执行对应的操作</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"Hybrid","path":"api/tags/Hybrid.json"},{"name":"慕课网","path":"api/tags/慕课网.json"}]},{"title":"Promise入门","slug":"Promise入门","date":"2018-02-26T14:14:10.000Z","updated":"2019-02-04T13:27:44.349Z","comments":true,"path":"api/articles/Promise入门.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>幕课网上的视频——<a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a>笔记，Promise 作为 ES6 中最重要的特性之一，对其进行了解和学习是非常有必要的，课程的源码已经上传至<a href=\"https://github.com/merrier/imooc-promise-sample\" target=\"_blank\" rel=\"noopener\">我的github</a>。</p>\n<h2 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h2><h3 id=\"MDN\"><a href=\"#MDN\" class=\"headerlink\" title=\"MDN\"></a>MDN</h3><blockquote>\n<ul>\n<li>The Promise object is used for asynchronous computations.</li>\n<li>A Promise represents a value which may be available now, or in the future, or never.</li>\n</ul>\n</blockquote>\n<h3 id=\"MDN中文\"><a href=\"#MDN中文\" class=\"headerlink\" title=\"MDN中文\"></a>MDN中文</h3><blockquote>\n<ul>\n<li>Promise对象用于异步计算。</li>\n<li>一个Promise表示一个现在、将来或永不可能可用的值。</li>\n</ul>\n</blockquote>\n<h3 id=\"按照用途来解释\"><a href=\"#按照用途来解释\" class=\"headerlink\" title=\"按照用途来解释\"></a>按照用途来解释</h3><ul>\n<li>主要用于异步计算</li>\n<li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。</li>\n<li>可以在对象之间传递和操作Promise，帮助我们处理队列。</li>\n</ul>\n<h2 id=\"回调存在的问题\"><a href=\"#回调存在的问题\" class=\"headerlink\" title=\"回调存在的问题\"></a>回调存在的问题</h2><ol>\n<li>嵌套层次很深，难以维护</li>\n<li>无法正常使用 return 和 throw</li>\n<li>无法正常检索堆栈信息</li>\n<li>多个回调之间难以建立联系</li>\n</ol>\n<h2 id=\"Promise-详解\"><a href=\"#Promise-详解\" class=\"headerlink\" title=\"Promise 详解\"></a>Promise 详解</h2><ul>\n<li>Promise 是一个代理对象，它和原先要进行的操作并无关系</li>\n<li>它通过引入一个回调，避免更多的回调</li>\n</ul>\n<h3 id=\"Promise-有-3-个状态\"><a href=\"#Promise-有-3-个状态\" class=\"headerlink\" title=\"Promise 有 3 个状态\"></a>Promise 有 3 个状态</h3><ol>\n<li>pending[待定]——初始状态</li>\n<li>fulfilled[实现\\——操作成功</li>\n<li>rejected[被否决]——操作失败</li>\n</ol>\n<p>当 Promise 的状态发生改变，就会触发 .then() 里的响应函数处理后续步骤；Promise 状态一经改变，不会再变；只有在连续多个回调顺序执行的时候，Promise才会显示出其威力</p>\n<h3 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\".then()\"></a>.then()</h3><ul>\n<li>.then() 接受两个函数作为参数，分别代表 fulfilled 和 rejected</li>\n<li>.then() 返回一个新的 Promise 实例，所以它可以链式调用</li>\n<li>当前面的 Promise 状态改变时，.then() 根据其最终状态，选择特定的状态响应函数执行</li>\n<li>状态响应函数可以返回新的 Promise，或其它值</li>\n<li>如果返回新的 Promise，那么下一级 .then() 会在新的 Promise 状态改变之后执行</li>\n<li>如果返回其它任何值，则会立刻执行下一级 .then()</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>Promise 会自动捕获内部异常，并交给 rejected 响应函数处理 最好是在语句的最后通过 catch 捕获错误，因为 catch 可以捕获 resolve 回调中发生的错误，而 reject 回调无法捕获；catch 也会返回一个 Promise 实例，并且它返回的 Promise 实例如果没有错误的话也是 fulfilled 状态，所以 catch() 后面的 .then() 也都会触发，但是 catch() 后面的 .catch() 不会触发（<strong>如果在第一个catch()中没有抛出错误</strong>）</p>\n<p><strong>强烈建议在所有队列最后都加上.catch()，以避免漏掉错误处理造成意想不到的问题：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething()</span><br><span class=\"line\">  .doAnotherThing()</span><br><span class=\"line\">  .doMoreThing()</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现队列\"><a href=\"#实现队列\" class=\"headerlink\" title=\"实现队列\"></a>实现队列</h3><p>有时候我们不希望所有动作一起发生，而是按照一定顺序，逐个进行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = doSomething();</span><br><span class=\"line\">promise = promise.then(doSomethingElse);</span><br><span class=\"line\">promise = promise.then(doSomethingElse2);</span><br><span class=\"line\">promise = promise.then(doSomethingElse3);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-forEach\"><a href=\"#使用-forEach\" class=\"headerlink\" title=\"使用.forEach()\"></a>使用.forEach()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">things</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">  things.forEach( <span class=\"function\"><span class=\"params\">thing</span> =&gt;</span> &#123;</span><br><span class=\"line\">    promise = promise.then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        doThing(thing, () =&gt; &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue(\\[<span class=\"string\">'lots'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'things'</span>, ....\\]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-reduce\"><a href=\"#使用-reduce\" class=\"headerlink\" title=\"使用.reduce()\"></a>使用.reduce()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">things</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> things.reduce( <span class=\"function\">(<span class=\"params\">promise, thing</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promise = promise.then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        doThing(thing, () =&gt; &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue(\\[<span class=\"string\">'lots'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'things'</span>, ....\\]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise常用函数\"><a href=\"#Promise常用函数\" class=\"headerlink\" title=\"Promise常用函数\"></a>Promise常用函数</h2><h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>返回一个 fulfilled 的 Promise 实例，或原始 Promise 实例</p>\n<ul>\n<li>参数为空，返回一个状态为 fulfilled 的 Promise 实例</li>\n<li>参数是一个跟 Promise 无关的值，同上，不过 fulfilled 响应函数会得到这个参数</li>\n<li>参数为 Promise 实例，则返回该实例，不做任何修改</li>\n<li>参数为 thenable（有 then 方法），立刻执行它的 .then()</li>\n</ul>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>返回一个 rejected 的 Promise 实例</p>\n<ul>\n<li><strong>Promise.reject()不认thenable</strong></li>\n<li>其他和 Promise.resolve() 类似</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all(\\[p1, p2, p3, ...\\])</code> 用于将多个 Promise 实例包装成一个新的 Promise 实例 当所有子 Promise 都完成，该 Promise 完成，返回值是<strong>全部值的数组</strong>；有任何一个失败，该 Promise 失败，返回值是<strong>第一个失败的子Promise的结果</strong>，最常见的是和 .map() 连用</p>\n<p>###Promise.race()</p>\n<p>类似 Promise.all() ，区别在于它有任意一个完成就算完成。</p>\n<h3 id=\"常见用法：\"><a href=\"#常见用法：\" class=\"headerlink\" title=\"常见用法：\"></a>常见用法：</h3><ul>\n<li>把异步操作和定时器放在一起</li>\n<li>如果定时器先触发，就认为超时，告知用户</li>\n</ul>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>ES2017 新增运算符，新的语言元素</p>\n<ul>\n<li>赋予 JavaScript 以顺序手法编写异步脚本的能力！</li>\n<li>既保留异步运算的无阻赛特性，还继续使用同步写法。</li>\n<li>还能正常使用 return/try/catch</li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"ES6","path":"api/tags/ES6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"慕课网","path":"api/tags/慕课网.json"}]},{"title":"浅谈搜索引擎（SEO）","slug":"浅谈搜索引擎（SEO）","date":"2017-11-30T14:47:40.000Z","updated":"2019-02-04T13:27:44.357Z","comments":true,"path":"api/articles/浅谈搜索引擎（SEO）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这是一篇视频笔记，最近看了幕课网上的视频——<a href=\"https://www.imooc.com/learn/855\" target=\"_blank\" rel=\"noopener\">浅谈搜索引擎_SEO</a>，同时结合了之前有位公司的同事分享的关于 SEO 的一些内容，可以说是基本上包含了 SEO 的全部内容了~</p>\n<h2 id=\"SEO-与-SEM-的区别\"><a href=\"#SEO-与-SEM-的区别\" class=\"headerlink\" title=\"SEO 与 SEM 的区别\"></a>SEO 与 SEM 的区别</h2><p>SEO：Search Engine Optimization，搜索引擎优化，SEM：Search Engine Marketing，搜索引擎营销，因为价钱越高排名越靠前，所以也可以称为搜索引擎竞价</p>\n<ul>\n<li>SEO 免费，SEM 付费</li>\n<li>SEM 短，效益快、SEO 长期投入，增长慢</li>\n<li>新广告法颁布之后 SEM 广告位减少、竞争压力大</li>\n</ul>\n<h2 id=\"IP、PV、UV\"><a href=\"#IP、PV、UV\" class=\"headerlink\" title=\"IP、PV、UV\"></a>IP、PV、UV</h2><ul>\n<li><strong>IP</strong>：独立IP访问的用户</li>\n<li><strong>PV</strong>：页面浏览量或点击量</li>\n<li><strong>UV</strong>：独立访客数</li>\n</ul>\n<p>搜索引擎占有率工具：statcounter</p>\n<h2 id=\"SEO-的三个大方向\"><a href=\"#SEO-的三个大方向\" class=\"headerlink\" title=\"SEO 的三个大方向\"></a>SEO 的三个大方向</h2><ol>\n<li>优化网站的内容</li>\n<li>提升用户体验，吸引更多流量</li>\n<li>优化网站结构，帮助搜索引擎抓取</li>\n</ol>\n<p>虽然搜索引擎的算法，网站的技术不断更新，但是 SEO 的三个大的方向从未变过</p>\n<h2 id=\"SEO-优化最重要的三要素\"><a href=\"#SEO-优化最重要的三要素\" class=\"headerlink\" title=\"SEO 优化最重要的三要素\"></a>SEO 优化最重要的三要素</h2><ul>\n<li>标题（title，一般格式为内容-关键词-品牌词）</li>\n<li>关键词（keywords，一般不超过 100 个字符）</li>\n<li>描述（description，50-170 个字）</li>\n</ul>\n<p><code>title</code>:一般会作为搜索结果的标题中，<code>description</code>:可能会被引用为搜索结果，也可能不会，<code>keyowrds</code>:由于很多网站无法准确提取关键词，一些网站恶意堆砌关键词，关键词的重要性已经在降低。</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><h3 id=\"内链\"><a href=\"#内链\" class=\"headerlink\" title=\"内链\"></a>内链</h3><ul>\n<li>提升网站内部页面抓取率</li>\n<li>优化本站、提高流量</li>\n</ul>\n<p>经典的内链网站为百度百科</p>\n<h3 id=\"外链\"><a href=\"#外链\" class=\"headerlink\" title=\"外链\"></a>外链</h3><p>外链是指网站与网站之间的链接向导，外链是提升权重的方式，互联网是链接与链接实现的一条网络，灌水式外链会让人头疼</p>\n<h2 id=\"友情链接交换注意事项\"><a href=\"#友情链接交换注意事项\" class=\"headerlink\" title=\"友情链接交换注意事项\"></a>友情链接交换注意事项</h2><p>和内容相近的网站交换 链接交换形式多样</p>\n<ul>\n<li>单向链接：别人指向我或者我指向别人，而对方不指过来</li>\n<li>双向链接：网站与网站之间互相交换链接</li>\n</ul>\n<h2 id=\"SEO建议\"><a href=\"#SEO建议\" class=\"headerlink\" title=\"SEO建议\"></a>SEO建议</h2><ul>\n<li>经常更新</li>\n<li>质量</li>\n<li>原创</li>\n<li>关键词密度（2%~8%）</li>\n<li>图文并茂</li>\n</ul>\n<h2 id=\"和SEO相关的HTML标签\"><a href=\"#和SEO相关的HTML标签\" class=\"headerlink\" title=\"和SEO相关的HTML标签\"></a>和SEO相关的HTML标签</h2><h3 id=\"a-标签中的-nofollow\"><a href=\"#a-标签中的-nofollow\" class=\"headerlink\" title=\"a 标签中的 nofollow\"></a>a 标签中的 nofollow</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"nofollow\"</span>&gt;</span>链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作用：使链接指向的页面不影响本页权重，但不能保证搜索引擎不抓取，使用时机：</p>\n<ul>\n<li>搜索引擎不需要抓取的页面，如登录、注册、付费等；</li>\n<li>对页面没有正向权重的页面，如了解更多；</li>\n<li>页面中的重复链接。</li>\n</ul>\n<h3 id=\"meta-中-robots-设置\"><a href=\"#meta-中-robots-设置\" class=\"headerlink\" title=\"meta 中 robots 设置\"></a>meta 中 robots 设置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>noindex：不要索引此页面</li>\n<li>nofollow：不要关注此页面的链接</li>\n<li>noatchive：不要保存网页快照</li>\n<li>nosnippet：不要此页面的描述</li>\n</ul>\n<p>目前不是所有的搜索引擎都支持 robots，即使支持，也不是所有的字段都会遵守。</p>\n<h2 id=\"避免过度-SEO\"><a href=\"#避免过度-SEO\" class=\"headerlink\" title=\"避免过度 SEO\"></a>避免过度 SEO</h2><h3 id=\"不要尝试欺骗搜索引擎\"><a href=\"#不要尝试欺骗搜索引擎\" class=\"headerlink\" title=\"不要尝试欺骗搜索引擎\"></a>不要尝试欺骗搜索引擎</h3><ul>\n<li>采用图片遮盖、透明度等方式隐藏文字</li>\n<li>关键词、标题、描述和内容不符</li>\n</ul>\n<h3 id=\"避免抄袭\"><a href=\"#避免抄袭\" class=\"headerlink\" title=\"避免抄袭\"></a>避免抄袭</h3><ul>\n<li>避免机器采集</li>\n<li>有技巧的借鉴</li>\n</ul>\n<h3 id=\"购买外链，恶意交换友情链接\"><a href=\"#购买外链，恶意交换友情链接\" class=\"headerlink\" title=\"购买外链，恶意交换友情链接\"></a>购买外链，恶意交换友情链接</h3><ul>\n<li>保证适量的外链和友情链接</li>\n<li>不购买被百度惩罚了的网站的外链</li>\n</ul>\n<h3 id=\"移动端强引导下载\"><a href=\"#移动端强引导下载\" class=\"headerlink\" title=\"移动端强引导下载\"></a>移动端强引导下载</h3><p><code>冰心算法</code>是专门用来打击移动端的强引导下载。不下载 app 就无法阅读网页全部内容被百度认为是最严重影响用户体验的行为</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>《SEO实战密码》——堪称 SEO 必读书籍</li>\n<li>seoWhy——关于 seo 的一个论坛</li>\n<li>cnzz、百度统计、谷歌统计——流量统计网站</li>\n</ul>\n<p>本博客用的就是 cnzz，因为流量比较小，所以看不出来和百度统计、谷歌统计比有哪些好处，而且这三家统计网站好像统计的标准都不相同，所以最好的方案就是放三套统计代码。。</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"SEO","path":"api/tags/SEO.json"}]},{"title":"慕课网视频评分&推荐","slug":"慕课网视频评分&推荐","date":"2018-02-19T02:11:11.000Z","updated":"2019-02-04T13:27:44.357Z","comments":true,"path":"api/articles/慕课网视频评分&推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总有童鞋问我<a href=\"https://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">慕课网</a>上面有哪些视频比较好，我就索性写一篇文章总结一下我看过的慕课网上面的优秀的视频，绝大部分都是前端相关的，希望能够提升你的效率，节省时间。下面我会对这些视频从以下几个方面进行评分（单纯个人评分，不喜勿喷- -）：</p>\n<ul>\n<li><strong>难度系数</strong>：视频所讲内容的难度</li>\n<li><strong>实战系数</strong>：视频所讲内容的实际应用系数</li>\n<li><strong>版本系数</strong>：视频所讲内容中涉及到的框架/插件的版本是否是最新的</li>\n<li><strong>综合评分</strong>：综合评价</li>\n</ul>\n<p>推荐大家用 1.75 倍速播放，这样可以节省很多时间，同时也能听清- -</p>\n<h2 id=\"前端工具\"><a href=\"#前端工具\" class=\"headerlink\" title=\"前端工具\"></a>前端工具</h2><h3 id=\"前端内容的自动化构建\"><a href=\"#前端内容的自动化构建\" class=\"headerlink\" title=\"前端内容的自动化构建\"></a><a href=\"https://www.imooc.com/learn/922\" target=\"_blank\" rel=\"noopener\">前端内容的自动化构建</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程分为三个部分，第一部分讲解什么是构建，为什么需要自动化构建，后面两部分分别讲解如何使用 Gulp 进行 JavaScript 和 CSS 的构建。所讲内容比较简单，而且自动化构建在实际项目中经常会用到，不过 webpack 版本比较低，需要结合评论进行学习。。</p>\n<h3 id=\"webpack深入与实战\"><a href=\"#webpack深入与实战\" class=\"headerlink\" title=\"webpack深入与实战\"></a><a href=\"https://www.imooc.com/learn/802\" target=\"_blank\" rel=\"noopener\">webpack深入与实战</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍了如何在项目中使用 webpack 打包文件，处理各种资源，以及配置开发环境，上线环境等，通过实际的例子来讲解 webpack 的使用方法，带你探索 webpack 强大的功能。可以说是很全面了，作者讲解的也比较详细，想初步了解 webpack 如何使用的童鞋可以选择看一下该视频。</p>\n<h3 id=\"前端实时可视化开发工具体验\"><a href=\"#前端实时可视化开发工具体验\" class=\"headerlink\" title=\"前端实时可视化开发工具体验\"></a><a href=\"https://www.imooc.com/learn/718\" target=\"_blank\" rel=\"noopener\">前端实时可视化开发工具体验</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>前端开发中，我们常常需要频繁的修改 html，css，js，然后刷新页面，看效果，再调整，再刷新。该课程使用 liveStyle，liveReload，browserSync 工具实现修改代码后，立即体现效果的功能，使用可见即可得的开发模式，极大的提高前端开发效率。实时可视化在开发环境应用的比较多，会很大程度地提高工作效率，感兴趣的童鞋可以再自行搜索 hotreload，这样结合本视频观看食用效果更佳</p>\n<h3 id=\"前端性能优化-基础知识认知\"><a href=\"#前端性能优化-基础知识认知\" class=\"headerlink\" title=\"前端性能优化-基础知识认知\"></a><a href=\"https://www.imooc.com/learn/580\" target=\"_blank\" rel=\"noopener\">前端性能优化-基础知识认知</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程从前端优化目的，简单方法、分类开始，到如何优化，优化过程中的常见错误，业内公认的但是不适应所有方案。我们还可从这个课程中学习到当我们访问一个站点的时候，我们究竟做了什么以及怎么样才叫优化成功。性能优化是一个老生常谈的问题，如果你对该问题有一定的基础认知，想再深入了解相关知识的话，该课程你不容错过</p>\n<h2 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h2><h3 id=\"Hello，移动WEB\"><a href=\"#Hello，移动WEB\" class=\"headerlink\" title=\"Hello，移动WEB\"></a><a href=\"https://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">Hello，移动WEB</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍移动 web 的开发基础，高效的排版布局，常见的移动 web 问题，终端触摸交互，各种 bug 坑如何解决等多方面。虽然视频比较短，但是干货多多，对于移动端的适配布局这类问题进行了很详细的讲解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Promise入门\"><a href=\"#Promise入门\" class=\"headerlink\" title=\"Promise入门\"></a><a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>Promise 是 ES6 中最重要的特性之一，该课程为我们讲解了为什么会有 Promise，以及 Promise 的常见用法和注意事项，通过实际代码进行讲解清晰易懂，适合前端中级水平开发者，我对该课程进行了总结，笔记<a href=\"/20180226/introduction-to-promise.html\">在这里</a>可以查看得到。</p>\n<h3 id=\"ajax跨域完全讲解\"><a href=\"#ajax跨域完全讲解\" class=\"headerlink\" title=\"ajax跨域完全讲解\"></a><a href=\"https://www.imooc.com/learn/947\" target=\"_blank\" rel=\"noopener\">ajax跨域完全讲解</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>跨域是前端领域中经常遇到的问题，尤其是各种 CDN 服务兴起之后，而究竟什么情况下跨域，如何解决跨域问题更是笔试或面试时经常被问到的问题，该视频教程详细讲解了 jsonp 的工作机制，http 协议如何支持跨域，以及 http 服务器 nginx 和 apache 的 2 种不同解决思路，让大家知其然并知其所以然，是非常不错的跨域入门讲解课程</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS深入理解系列\"><a href=\"#CSS深入理解系列\" class=\"headerlink\" title=\"CSS深入理解系列\"></a><a href=\"https://www.imooc.com/search/course?words=css%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E5%BC%A0%E9%91%AB%E6%97%AD\" target=\"_blank\" rel=\"noopener\">CSS深入理解系列</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>该系列视频为张鑫旭老师对 CSS 相关属性的讲解，包括 margin、padding、position、z-index 等等基础属性，适合具备一定 CSS 基础知识的童鞋，张鑫旭老师的讲课风格很独特，也不知道是否符合你的口味，不过我是很喜欢啦~而且张鑫旭老师对于这些属性的讲解很深入，在实际项目中应用的很多，毕竟前端工程师一年写的 CSS 代码可以绕地球三圈啊（我对该系列视频的讲解进行了总结，在系列专栏中的<a href=\"/20170421/css-in-depth-understanding-series.html\">CSS深入理解系列</a>中可以看到）</p>\n<h3 id=\"如何用CSS进行网页布局\"><a href=\"#如何用CSS进行网页布局\" class=\"headerlink\" title=\"如何用CSS进行网页布局\"></a><a href=\"https://www.imooc.com/learn/57\" target=\"_blank\" rel=\"noopener\">如何用CSS进行网页布局</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程教你怎么制作一列布局、二列布局、三列布局当然还有最通用的混合布局，而且你还可以选择让它固定还是自适应。用 CSS 重新规划你的网页，让你的网页从此更美观、更友好。难度系数很低，而布局在实际项目中是很基本也是很重要的知识点</p>\n<h3 id=\"分页页码制作\"><a href=\"#分页页码制作\" class=\"headerlink\" title=\"分页页码制作\"></a><a href=\"https://www.imooc.com/learn/15\" target=\"_blank\" rel=\"noopener\">分页页码制作</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★☆☆☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>通过本课程的学习，我们可以学习到利用 HTML、CSS 样式技术制作出分页页码的效果。包括最简单的直角分页页码效果，修复行内元素之间的间隔 bug 问题分析，代码整理，为分页页码插入小图标。虽然一般不需要我们自己制作分页页码，但是如果你想自己写框架或者对这类知识比较好奇的话，该视频能够充分解答你的疑惑，最为关键的是<strong>提供源码</strong>啊~</p>\n<h2 id=\"JavaScript-1\"><a href=\"#JavaScript-1\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Hybrid设计\"><a href=\"#Hybrid设计\" class=\"headerlink\" title=\"Hybrid设计\"></a><a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程首先会告诉大家什么是 Hybrid，Hybrid 有什么特点，也会告诉大家业内有哪些常见的 Hybrid 应用以及 Hybrid 合理的应用场景。 然后，课程会简单介绍一个 Hybrid 架构的方方面面，包括 Hybrid 的发展，比如超级 Hybrid 方案 React Native 以及 Weex 学习该课程，大家会知道 Hybrid 中 H5 与 Native 如何交互，并且对 Hybrid 体验增强和 Hybrid 离线包有一些认识，是大家做混合 APP 的必备良药。</p>\n<h3 id=\"zepto设计和源码分析\"><a href=\"#zepto设计和源码分析\" class=\"headerlink\" title=\"zepto设计和源码分析\"></a><a href=\"https://www.imooc.com/learn/745\" target=\"_blank\" rel=\"noopener\">zepto设计和源码分析</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★☆☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>当熟练使用 zepto 的 API 之后，也应该解读一下 zepto 的源码，了解一下 zepto 的设计原理。该教程深入浅出的介绍了 zepto 最核心的设计原理，看完之后即能轻松解读 zepto 所有源码。就像 TJ 大神一样，有时候看别人写的代码会有不同寻常的收获</p>\n<h3 id=\"Web安全-XSS\"><a href=\"#Web安全-XSS\" class=\"headerlink\" title=\"Web安全-XSS\"></a><a href=\"https://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程从 Web 安全 XSS 的定义开始讲起，到深入剖析 XSS 攻击的原理和流程，了解常见 XSS 攻击的危害。同时通过项目实战针对性的分析如何应对 XSS 攻击做到安全的 XSS 防御措施。XSS 是最常见的一种 web 攻击，了解一些相关知识百利无一害= =</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"},{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"教程","path":"api/tags/教程.json"}]}]}