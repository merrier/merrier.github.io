{"name":"教程","postlist":[{"title":"慕课网视频评分&推荐","slug":"慕课网视频评分&推荐","date":"2018-02-19T02:11:11.000Z","updated":"2019-01-27T13:15:42.895Z","comments":true,"path":"api/articles/慕课网视频评分&推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总有童鞋问我<a href=\"https://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">慕课网</a>上面有哪些视频比较好，我就索性写一篇文章总结一下我看过的慕课网上面的优秀的视频，绝大部分都是前端相关的，希望能够提升你的效率，节省时间。下面我会对这些视频从以下几个方面进行评分（单纯个人评分，不喜勿喷- -）：</p>\n<ul>\n<li><strong>难度系数</strong>：视频所讲内容的难度</li>\n<li><strong>实战系数</strong>：视频所讲内容的实际应用系数</li>\n<li><strong>版本系数</strong>：视频所讲内容中涉及到的框架/插件的版本是否是最新的</li>\n<li><strong>综合评分</strong>：综合评价</li>\n</ul>\n<p>推荐大家用 1.75 倍速播放，这样可以节省很多时间，同时也能听清- -</p>\n<h2 id=\"前端工具\"><a href=\"#前端工具\" class=\"headerlink\" title=\"前端工具\"></a>前端工具</h2><h3 id=\"前端内容的自动化构建\"><a href=\"#前端内容的自动化构建\" class=\"headerlink\" title=\"前端内容的自动化构建\"></a><a href=\"https://www.imooc.com/learn/922\" target=\"_blank\" rel=\"noopener\">前端内容的自动化构建</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程分为三个部分，第一部分讲解什么是构建，为什么需要自动化构建，后面两部分分别讲解如何使用 Gulp 进行 JavaScript 和 CSS 的构建。所讲内容比较简单，而且自动化构建在实际项目中经常会用到，不过 webpack 版本比较低，需要结合评论进行学习。。</p>\n<h3 id=\"webpack深入与实战\"><a href=\"#webpack深入与实战\" class=\"headerlink\" title=\"webpack深入与实战\"></a><a href=\"https://www.imooc.com/learn/802\" target=\"_blank\" rel=\"noopener\">webpack深入与实战</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍了如何在项目中使用 webpack 打包文件，处理各种资源，以及配置开发环境，上线环境等，通过实际的例子来讲解 webpack 的使用方法，带你探索 webpack 强大的功能。可以说是很全面了，作者讲解的也比较详细，想初步了解 webpack 如何使用的童鞋可以选择看一下该视频。</p>\n<h3 id=\"前端实时可视化开发工具体验\"><a href=\"#前端实时可视化开发工具体验\" class=\"headerlink\" title=\"前端实时可视化开发工具体验\"></a><a href=\"https://www.imooc.com/learn/718\" target=\"_blank\" rel=\"noopener\">前端实时可视化开发工具体验</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>前端开发中，我们常常需要频繁的修改 html，css，js，然后刷新页面，看效果，再调整，再刷新。该课程使用 liveStyle，liveReload，browserSync 工具实现修改代码后，立即体现效果的功能，使用可见即可得的开发模式，极大的提高前端开发效率。实时可视化在开发环境应用的比较多，会很大程度地提高工作效率，感兴趣的童鞋可以再自行搜索 hotreload，这样结合本视频观看食用效果更佳</p>\n<h3 id=\"前端性能优化-基础知识认知\"><a href=\"#前端性能优化-基础知识认知\" class=\"headerlink\" title=\"前端性能优化-基础知识认知\"></a><a href=\"https://www.imooc.com/learn/580\" target=\"_blank\" rel=\"noopener\">前端性能优化-基础知识认知</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程从前端优化目的，简单方法、分类开始，到如何优化，优化过程中的常见错误，业内公认的但是不适应所有方案。我们还可从这个课程中学习到当我们访问一个站点的时候，我们究竟做了什么以及怎么样才叫优化成功。性能优化是一个老生常谈的问题，如果你对该问题有一定的基础认知，想再深入了解相关知识的话，该课程你不容错过</p>\n<h2 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h2><h3 id=\"Hello，移动WEB\"><a href=\"#Hello，移动WEB\" class=\"headerlink\" title=\"Hello，移动WEB\"></a><a href=\"https://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">Hello，移动WEB</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍移动 web 的开发基础，高效的排版布局，常见的移动 web 问题，终端触摸交互，各种 bug 坑如何解决等多方面。虽然视频比较短，但是干货多多，对于移动端的适配布局这类问题进行了很详细的讲解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Promise入门\"><a href=\"#Promise入门\" class=\"headerlink\" title=\"Promise入门\"></a><a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>Promise 是 ES6 中最重要的特性之一，该课程为我们讲解了为什么会有 Promise，以及 Promise 的常见用法和注意事项，通过实际代码进行讲解清晰易懂，适合前端中级水平开发者，我对该课程进行了总结，笔记<a href=\"/20180226/introduction-to-promise.html\">在这里</a>可以查看得到。</p>\n<h3 id=\"ajax跨域完全讲解\"><a href=\"#ajax跨域完全讲解\" class=\"headerlink\" title=\"ajax跨域完全讲解\"></a><a href=\"https://www.imooc.com/learn/947\" target=\"_blank\" rel=\"noopener\">ajax跨域完全讲解</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>跨域是前端领域中经常遇到的问题，尤其是各种 CDN 服务兴起之后，而究竟什么情况下跨域，如何解决跨域问题更是笔试或面试时经常被问到的问题，该视频教程详细讲解了 jsonp 的工作机制，http 协议如何支持跨域，以及 http 服务器 nginx 和 apache 的 2 种不同解决思路，让大家知其然并知其所以然，是非常不错的跨域入门讲解课程</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS深入理解系列\"><a href=\"#CSS深入理解系列\" class=\"headerlink\" title=\"CSS深入理解系列\"></a><a href=\"https://www.imooc.com/search/course?words=css%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E5%BC%A0%E9%91%AB%E6%97%AD\" target=\"_blank\" rel=\"noopener\">CSS深入理解系列</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>该系列视频为张鑫旭老师对 CSS 相关属性的讲解，包括 margin、padding、position、z-index 等等基础属性，适合具备一定 CSS 基础知识的童鞋，张鑫旭老师的讲课风格很独特，也不知道是否符合你的口味，不过我是很喜欢啦~而且张鑫旭老师对于这些属性的讲解很深入，在实际项目中应用的很多，毕竟前端工程师一年写的 CSS 代码可以绕地球三圈啊（我对该系列视频的讲解进行了总结，在系列专栏中的<a href=\"/20170421/css-in-depth-understanding-series.html\">CSS深入理解系列</a>中可以看到）</p>\n<h3 id=\"如何用CSS进行网页布局\"><a href=\"#如何用CSS进行网页布局\" class=\"headerlink\" title=\"如何用CSS进行网页布局\"></a><a href=\"https://www.imooc.com/learn/57\" target=\"_blank\" rel=\"noopener\">如何用CSS进行网页布局</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程教你怎么制作一列布局、二列布局、三列布局当然还有最通用的混合布局，而且你还可以选择让它固定还是自适应。用 CSS 重新规划你的网页，让你的网页从此更美观、更友好。难度系数很低，而布局在实际项目中是很基本也是很重要的知识点</p>\n<h3 id=\"分页页码制作\"><a href=\"#分页页码制作\" class=\"headerlink\" title=\"分页页码制作\"></a><a href=\"https://www.imooc.com/learn/15\" target=\"_blank\" rel=\"noopener\">分页页码制作</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★☆☆☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>通过本课程的学习，我们可以学习到利用 HTML、CSS 样式技术制作出分页页码的效果。包括最简单的直角分页页码效果，修复行内元素之间的间隔 bug 问题分析，代码整理，为分页页码插入小图标。虽然一般不需要我们自己制作分页页码，但是如果你想自己写框架或者对这类知识比较好奇的话，该视频能够充分解答你的疑惑，最为关键的是<strong>提供源码</strong>啊~</p>\n<h2 id=\"JavaScript-1\"><a href=\"#JavaScript-1\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Hybrid设计\"><a href=\"#Hybrid设计\" class=\"headerlink\" title=\"Hybrid设计\"></a><a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程首先会告诉大家什么是 Hybrid，Hybrid 有什么特点，也会告诉大家业内有哪些常见的 Hybrid 应用以及 Hybrid 合理的应用场景。 然后，课程会简单介绍一个 Hybrid 架构的方方面面，包括 Hybrid 的发展，比如超级 Hybrid 方案 React Native 以及 Weex 学习该课程，大家会知道 Hybrid 中 H5 与 Native 如何交互，并且对 Hybrid 体验增强和 Hybrid 离线包有一些认识，是大家做混合 APP 的必备良药。</p>\n<h3 id=\"zepto设计和源码分析\"><a href=\"#zepto设计和源码分析\" class=\"headerlink\" title=\"zepto设计和源码分析\"></a><a href=\"https://www.imooc.com/learn/745\" target=\"_blank\" rel=\"noopener\">zepto设计和源码分析</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★☆☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>当熟练使用 zepto 的 API 之后，也应该解读一下 zepto 的源码，了解一下 zepto 的设计原理。该教程深入浅出的介绍了 zepto 最核心的设计原理，看完之后即能轻松解读 zepto 所有源码。就像 TJ 大神一样，有时候看别人写的代码会有不同寻常的收获</p>\n<h3 id=\"Web安全-XSS\"><a href=\"#Web安全-XSS\" class=\"headerlink\" title=\"Web安全-XSS\"></a><a href=\"https://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程从 Web 安全 XSS 的定义开始讲起，到深入剖析 XSS 攻击的原理和流程，了解常见 XSS 攻击的危害。同时通过项目实战针对性的分析如何应对 XSS 攻击做到安全的 XSS 防御措施。XSS 是最常见的一种 web 攻击，了解一些相关知识百利无一害= =</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"},{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"网罗天下好教程","slug":"网罗天下好教程","date":"2017-08-27T07:56:15.000Z","updated":"2019-01-27T13:15:42.899Z","comments":true,"path":"api/articles/网罗天下好教程.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总结了一下我看过的好的教程，多数为系列文章，鉴于如今信息鱼龙混杂，这篇文章可以省去很多找好教程的时间。</p>\n<h2 id=\"入门级\"><a href=\"#入门级\" class=\"headerlink\" title=\"入门级\"></a>入门级</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><h4 id=\"手把手教你使用Hexo-Github-Pages搭建个人独立博客\"><a href=\"#手把手教你使用Hexo-Github-Pages搭建个人独立博客\" class=\"headerlink\" title=\"手把手教你使用Hexo + Github Pages搭建个人独立博客\"></a><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"noopener\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></h4><p>很完整很详细的 Hexo 搭建个人博客教程</p>\n<h4 id=\"从0到1搭建和部署个人博客\"><a href=\"#从0到1搭建和部署个人博客\" class=\"headerlink\" title=\"从0到1搭建和部署个人博客\"></a><a href=\"https://juejin.im/post/5ae170e1f265da0b7527d0dc\" target=\"_blank\" rel=\"noopener\">从0到1搭建和部署个人博客</a></h4><p>此教程会教你从 0 到 1 搭建一个完整的博客，包括前端展示页、后台管理系统、后端接口及接口文档、服务端部署整个完整流程。技术栈是 vue+express+mongodb</p>\n<h4 id=\"Hexo-主题开发指南\"><a href=\"#Hexo-主题开发指南\" class=\"headerlink\" title=\"Hexo 主题开发指南\"></a><a href=\"http://chensd.com/2016-06/hexo-theme-guide.html\" target=\"_blank\" rel=\"noopener\">Hexo 主题开发指南</a></h4><p>该文章包含的内容如下：</p>\n<ul>\n<li>主题的基本结构</li>\n<li>常见问题</li>\n<li>常用页面的实现</li>\n<li>基本工具</li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"CSS布局说——可能是最全的\"><a href=\"#CSS布局说——可能是最全的\" class=\"headerlink\" title=\"CSS布局说——可能是最全的\"></a><a href=\"https://segmentfault.com/a/1190000011358507\" target=\"_blank\" rel=\"noopener\">CSS布局说——可能是最全的</a></h4><p>其实很多时候，我们都会在布局上花费很多时间，尤其是遇到一个比较“严格”的设计师的时候，而 css 虽然语法简单（css 有语法？），但是真正用起来会有很多学问，而布局这种问题是老生常谈的问题了，这篇来自 SegmentFault的文章对 css 中的布局的相关知识进行了总结，满满的干货。</p>\n<h4 id=\"CSS-中重要的层叠概念\"><a href=\"#CSS-中重要的层叠概念\" class=\"headerlink\" title=\"CSS 中重要的层叠概念\"></a><a href=\"https://juejin.im/post/5ba4efe36fb9a05cf52ac192\" target=\"_blank\" rel=\"noopener\">CSS 中重要的层叠概念</a></h4><p>作者参考了很多关于层叠概念的文章，对这一经常迷糊的概念进行了全面总结，讲解的非常清晰全面，是我看过的讲层叠概念最好的文章，十分值得一看！</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><h4 id=\"JavaScript-标准参考教程（alpha）\"><a href=\"#JavaScript-标准参考教程（alpha）\" class=\"headerlink\" title=\"JavaScript 标准参考教程（alpha）\"></a><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程（alpha）</a></h4><p>阮一峰的 JS 教程，内容很多，而且讲解的很详细，很透彻，是一篇不错的 JS 入门教程。</p>\n<h4 id=\"如何定义一个高逼格的原生JS插件\"><a href=\"#如何定义一个高逼格的原生JS插件\" class=\"headerlink\" title=\"如何定义一个高逼格的原生JS插件\"></a><a href=\"https://juejin.im/entry/5ae033d86fb9a07ac76e7bcc\" target=\"_blank\" rel=\"noopener\">如何定义一个高逼格的原生JS插件</a></h4><p>作者通过很多实例介绍了如何定义自己的 JS 插件，包含了很多方面和技巧</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><h4 id=\"七天学会node-js\"><a href=\"#七天学会node-js\" class=\"headerlink\" title=\"七天学会node.js\"></a><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">七天学会node.js</a></h4><p>这是一篇比较详细的 node.js 入门教程，但是我确实没有七天就学会。。</p>\n<h4 id=\"node-js之fs模块\"><a href=\"#node-js之fs模块\" class=\"headerlink\" title=\"node.js之fs模块\"></a><a href=\"https://www.jianshu.com/p/5683c8a93511\" target=\"_blank\" rel=\"noopener\">node.js之fs模块</a></h4><p>fs 模块是 node.js 中一个很重要的模块，其提供了文件相关操作，包括打开、读取、写入和追加等等操作</p>\n<h4 id=\"Express-4-入门中文手册\"><a href=\"#Express-4-入门中文手册\" class=\"headerlink\" title=\"Express 4 入门中文手册\"></a><a href=\"https://www.zybuluo.com/bajian/note/444152\" target=\"_blank\" rel=\"noopener\">Express 4 入门中文手册</a></h4><p>最近在做 node  相关的项目，express 之前接触过，但是基本上一点印象都没有留下。。然后 express 的英文文档从布局和样式上就给人一种不想看的感觉，同时我的英语水平也很差，所以就在网上找了很久的中文文档，最终追根溯源找到了上面这篇，无法评价好坏，因为有就不错了嘛~</p>\n<h4 id=\"Redux中文文档\"><a href=\"#Redux中文文档\" class=\"headerlink\" title=\"Redux中文文档\"></a><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux中文文档</a></h4><p>在线 gitbook，有很多实例，是一个很不过的 redux 入门文档（我就是通过看这个文档入门的~）</p>\n<h4 id=\"Redux从设计到源码\"><a href=\"#Redux从设计到源码\" class=\"headerlink\" title=\"Redux从设计到源码\"></a><a href=\"https://tech.meituan.com/redux-design-code.html\" target=\"_blank\" rel=\"noopener\">Redux从设计到源码</a></h4><p>这也是一篇 Redux 入门教程，虽然比不上上面的教程，但是这篇文章里面的某些图片画的还是相当不错的，可以当做补充资料</p>\n<h4 id=\"react-starter-kit-入门（翻译）\"><a href=\"#react-starter-kit-入门（翻译）\" class=\"headerlink\" title=\"react-starter-kit 入门（翻译）\"></a><a href=\"http://www.jianshu.com/p/6c522c9a20cb\" target=\"_blank\" rel=\"noopener\">react-starter-kit 入门（翻译）</a></h4><p>starter-kit 的教程实在太少了，只找到了这一篇中文的，就先凑合看吧，具体写的好不好可以先睹为快，因为篇幅比较短，而且 starter-kit 本来就是一个脚手架，还是需要了解其他技术栈才能真正看懂</p>\n<h4 id=\"React-Router官方教程\"><a href=\"#React-Router官方教程\" class=\"headerlink\" title=\"React Router官方教程\"></a><a href=\"https://github.com/reactjs/react-router-tutorial\" target=\"_blank\" rel=\"noopener\">React Router官方教程</a></h4><p>官方给出的 react-router 入门文档，通过14个实例一步步进行讲解，由浅入深，由易到难，只需要一个多小时就可以跟着文档写完 14 个实例，同时在写的过程中还可以学习到 express 和 webpack 的相关知识。</p>\n<h4 id=\"Redux作者出的教学视频\"><a href=\"#Redux作者出的教学视频\" class=\"headerlink\" title=\"Redux作者出的教学视频\"></a><a href=\"https://egghead.io/instructors/dan-abramov\" target=\"_blank\" rel=\"noopener\">Redux作者出的教学视频</a></h4><p>Redux 作者自己在 egghead.io 上面上传了教学视频，墙裂推荐，不过全程英文讲解，可能会有点费劲- -：</p>\n<ul>\n<li>基础篇：<a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"noopener\">Getting Started with Redux</a></li>\n<li>进阶篇：<a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" target=\"_blank\" rel=\"noopener\">Building React Applications with Idiomatic Redux</a></li>\n</ul>\n<h4 id=\"从零开始学-ReactJS（ReactJS-101）\"><a href=\"#从零开始学-ReactJS（ReactJS-101）\" class=\"headerlink\" title=\"从零开始学 ReactJS（ReactJS 101）\"></a><a href=\"https://github.com/carlleton/reactjs101/tree/zh-CN\" target=\"_blank\" rel=\"noopener\">从零开始学 ReactJS（ReactJS 101）</a></h4><p>从零开始学 ReactJS（ReactJS 101）是一本希望让初学者一看就懂的 ReactJS 中文入门教学书，由浅入深学习 ReactJS 生态系 (Flux, Redux, React Router, ImmutableJS, React Native, Relay/GraphQL etc.)。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h4 id=\"入门Webpack，看这篇就够了\"><a href=\"#入门Webpack，看这篇就够了\" class=\"headerlink\" title=\"入门Webpack，看这篇就够了\"></a><a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></h4><p>进度条说明了一切，作者通过对比 gulp 和 webpack，详细的介绍了 webpack 的优缺点，同时还介绍了一些其他工具的用法，虽然篇幅较长，但是大部分都是代码，可以跟着作者自己敲一遍，相信敲完之后的你可以自信的说 webpack 我终(hai)于(shi)会(bu)了(hui)</p>\n<h4 id=\"webpack-2-打包实战\"><a href=\"#webpack-2-打包实战\" class=\"headerlink\" title=\"webpack 2 打包实战\"></a><a href=\"https://github.com/fenivana/webpack-in-action/\" target=\"_blank\" rel=\"noopener\">webpack 2 打包实战</a></h4><p>这是一篇对于 webpack 2 的讲解，作者通过追根溯源向我们阐述了为什么需要 webpack，作为历史的产物， webpack 具备哪些优势，文章篇幅较长，不过弥补了 webpack 官方文档写的很差的缺陷，是一篇比较不错的 webpack 入门文档</p>\n<h4 id=\"令人困惑的webpack之entry\"><a href=\"#令人困惑的webpack之entry\" class=\"headerlink\" title=\"令人困惑的webpack之entry\"></a><a href=\"https://segmentfault.com/a/1190000008288240\" target=\"_blank\" rel=\"noopener\">令人困惑的webpack之entry</a></h4><p>鉴于 webpack 的文档实在太差，而 webpack 本身又比较复杂，各种 loader，各种 plugin，各种配置，所以刚接触 webpack 的童鞋会感到很头疼，而 entry 作为 webpack 中最基础的配置，可以作为入门 webpack 的关键点，这篇文章非常详细的介绍了 entry 配置项的作用以及参数含义</p>\n<h4 id=\"用grunt搭建自动化的web前端开发环境-完整教程\"><a href=\"#用grunt搭建自动化的web前端开发环境-完整教程\" class=\"headerlink\" title=\"用grunt搭建自动化的web前端开发环境-完整教程\"></a><a href=\"http://developer.51cto.com/art/201506/479127.htm\" target=\"_blank\" rel=\"noopener\">用grunt搭建自动化的web前端开发环境-完整教程</a></h4><p>jQuery 在使用 grunt，bootstrap 在使用 grunt，百度 UEditor 在使用 grunt，你没有理由不学、不用！</p>\n<h4 id=\"Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\"><a href=\"#Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\" class=\"headerlink\" title=\"Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！\"></a><a href=\"http://www.iplaysoft.com/sublimetext.html\" target=\"_blank\" rel=\"noopener\">Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！</a></h4><p>这是一篇比较全的 sublime 介绍文章，作者介绍了很多 sublime 的特性和优点，同时还推荐了一些插件和使用技巧。</p>\n<h4 id=\"浅入浅出webpack\"><a href=\"#浅入浅出webpack\" class=\"headerlink\" title=\"浅入浅出webpack\"></a><a href=\"https://juejin.im/post/5afa9cd0f265da0b981b9af9\" target=\"_blank\" rel=\"noopener\">浅入浅出webpack</a></h4><p>webpack 作为一个非常流行的构建工具，其文档和使用一直为人所诟病，而当我真正的自己对 webpack 进行了了解和实战之后，发现其实 webpack 并不是那么难理解，而很多童鞋其实是因为 webpack 的功能太强大而对其产生了畏惧，这篇文章对这部分童鞋来说是一篇很好的教程，从基本使用的角度对 webpack 进行了介绍和讲解，除此之外还介绍一些高阶应用，如 TreeShaking、构建 PWA 应用等</p>\n<h4 id=\"iOS开发工具——网络封包分析工具Charles\"><a href=\"#iOS开发工具——网络封包分析工具Charles\" class=\"headerlink\" title=\"iOS开发工具——网络封包分析工具Charles\"></a><a href=\"http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles\" target=\"_blank\" rel=\"noopener\">iOS开发工具——网络封包分析工具Charles</a></h4><p><a href=\"http://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a> 是在 Mac 下常用的截取网络封包的工具。Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。作者在该教程中介绍了安装 Charles、安装SSL证书、将Charles设置成系统代理、过滤网络请求、截取 iPhone 上的网络封包、截取 SSL 信息、模拟慢速网络、修改网络请求内容等内容。</p>\n<h4 id=\"webpack-教程资源收集\"><a href=\"#webpack-教程资源收集\" class=\"headerlink\" title=\"webpack 教程资源收集\"></a><a href=\"https://github.com/kraaas/webpack-tutorial-collection\" target=\"_blank\" rel=\"noopener\">webpack 教程资源收集</a></h4><p>作者收集总结了关于 webpack 的各种教程，大概共有 50 篇文章。</p>\n<h4 id=\"运营小白带你5分钟入门谷歌分析-GA\"><a href=\"#运营小白带你5分钟入门谷歌分析-GA\" class=\"headerlink\" title=\"运营小白带你5分钟入门谷歌分析(GA)\"></a><a href=\"https://mp.weixin.qq.com/s/oJv0cOl71VfUW_Q2RUzChA\" target=\"_blank\" rel=\"noopener\">运营小白带你5分钟入门谷歌分析(GA)</a></h4><p>主要通过截图的方式简单介绍了如何使用 GA 进行数据分析，以及 GA 都有哪些功能。</p>\n<h4 id=\"全网最贴心的webpack4系列中文教程和配套代码\"><a href=\"#全网最贴心的webpack4系列中文教程和配套代码\" class=\"headerlink\" title=\"全网最贴心的webpack4系列中文教程和配套代码\"></a><a href=\"https://github.com/dongyuanxin/webpack-demos\" target=\"_blank\" rel=\"noopener\">全网最贴心的webpack4系列中文教程和配套代码</a></h4><p>作者花费了 3 个多月整理了这份教程，一共分成 16 节，每节都有讲解，并且准备了配套代码。</p>\n<h3 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h3><h4 id=\"同构-Isomorphic-web-是什么鬼？\"><a href=\"#同构-Isomorphic-web-是什么鬼？\" class=\"headerlink\" title=\"同构(Isomorphic) web 是什么鬼？\"></a><a href=\"http://www.jianshu.com/p/5ce23647e7e3\" target=\"_blank\" rel=\"noopener\">同构(Isomorphic) web 是什么鬼？</a></h4><p>同构这个概念最近比较火，相比 SPA，同构会有其独特的优势，作者用非常简短的语言介绍了同构产生的背景和如何将自己的网站改造为同构 web。</p>\n<h4 id=\"再不懂区块链，你就OUT了！\"><a href=\"#再不懂区块链，你就OUT了！\" class=\"headerlink\" title=\"再不懂区块链，你就OUT了！\"></a><a href=\"http://jingyan.baidu.com/zt/qukuailian/index.html\" target=\"_blank\" rel=\"noopener\">再不懂区块链，你就OUT了！</a></h4><p>区块链从 15 年到 17 年，但是你却任对区块链一知半解，百度经验联合火币网打造讲解区块链的系列小动画《区块链100问》 ，将抽象的区块链概念转化为100集轻松易懂的 1 分钟小动画，每集学懂一个知识点~</p>\n<h4 id=\"快乐的Linux命名行\"><a href=\"#快乐的Linux命名行\" class=\"headerlink\" title=\"快乐的Linux命名行\"></a><a href=\"http://billie66.github.io/TLCL/book/\" target=\"_blank\" rel=\"noopener\">快乐的Linux命名行</a></h4><p><a href=\"http://linuxcommand.org/\" target=\"_blank\" rel=\"noopener\">The Linux Command Line</a> 的中文版，一个文科生说他看完这个都会 Linux 了</p>\n<h4 id=\"HTTPS-的故事\"><a href=\"#HTTPS-的故事\" class=\"headerlink\" title=\"HTTPS 的故事\"></a><a href=\"https://juejin.im/post/5b10aa22e51d4506c5568f1d\" target=\"_blank\" rel=\"noopener\">HTTPS 的故事</a></h4><p>作者缘于在 Twitter 上看到的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fmedium.freecodecamp.org%2Fhttps-explained-with-carrier-pigeons-7029d2193351\" target=\"_blank\" rel=\"noopener\">HTTPS explained with carrier pigeons</a>，原作者用很简单的故事就把 HTTP / HTTPS 的传输过程讲解的很清楚。 借原文的意思，该作者重新写了这个故事，加上了一些配图和补充，很形象的解释了为什么要有https以及如何实现。</p>\n<h4 id=\"JS-函数式编程指南\"><a href=\"#JS-函数式编程指南\" class=\"headerlink\" title=\"JS 函数式编程指南\"></a><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></h4><p>这是<em><a href=\"https://github.com/DrBoolean/mostly-adequate-guide\" target=\"_blank\" rel=\"noopener\">mostly-adequate-guide</a></em>的中文版，可以说是最好的\b函数式编程书籍，作者还非常有心的提供了 EPUB 和 MOBI 格式的下载。</p>\n<h4 id=\"Bash-脚本-set-命令教程\"><a href=\"#Bash-脚本-set-命令教程\" class=\"headerlink\" title=\"Bash 脚本 set 命令教程\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/11/bash-set.html\" target=\"_blank\" rel=\"noopener\">Bash 脚本 set 命令教程</a></h4><p>阮一峰老师写的教程，也是一些大牛推荐的 set 命令教程，文章短小精悍，基本上把 set 命令相关的所有知识都涵盖了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"npm-scripts-使用指南\"><a href=\"#npm-scripts-使用指南\" class=\"headerlink\" title=\"npm scripts 使用指南\"></a><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener\">npm scripts 使用指南</a></h4><p>阮一峰讲解的 npm script 入门知识，关于 npm script 首推这篇文章</p>\n<h4 id=\"Linux大棚版Thrift入门教程\"><a href=\"#Linux大棚版Thrift入门教程\" class=\"headerlink\" title=\"Linux大棚版Thrift入门教程\"></a><a href=\"http://roclinux.cn/?p=3316\" target=\"_blank\" rel=\"noopener\">Linux大棚版Thrift入门教程</a></h4><p>thrift 作为一种 RPC 框架，其诞生以来就受到了广泛关注，虽然 RPC 框架有很多种，但是 thrift 还是有其独特优势的，这篇入门教程篇幅较长，作者介绍了 thrift 的基础概念，同时通过实例介绍了如何应用 thrift，比其他教程要详细很多。</p>\n<h4 id=\"Shell脚本编程30分钟入门\"><a href=\"#Shell脚本编程30分钟入门\" class=\"headerlink\" title=\"Shell脚本编程30分钟入门\"></a><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\" target=\"_blank\" rel=\"noopener\">Shell脚本编程30分钟入门</a></h4><p>前端工程师和 shell 打交道会比较少，但是知道一些往往会节省自己很多时间，比如定时备份、定时提交修改神马的，这篇文章虽然看上去有点“标题党”的意思，但是作者介绍的还算详细，同时作者还有一些其他类型的“30 分钟教程”，也可以看一看（作者是多么喜欢30分钟这个时间段啊。。）</p>\n<h4 id=\"Docker-入门\"><a href=\"#Docker-入门\" class=\"headerlink\" title=\"Docker 入门\"></a><a href=\"http://www.jianshu.com/p/d4f24f8012fd\" target=\"_blank\" rel=\"noopener\">Docker 入门</a></h4><p>Docker 是一个非常有趣的项目。它最大的作用就是隔绝了操作系统环境，类似于虚拟机，但是相对于虚拟机，他又拥有绝对的高效率、和通用性。相信看完这篇文章之后，你会对docker有一个直观的认识= =</p>\n<h4 id=\"图说设计模式\"><a href=\"#图说设计模式\" class=\"headerlink\" title=\"图说设计模式\"></a><a href=\"\bhttp://design-patterns.readthedocs.io/zh_CN/latest/index.html\">图说设计模式</a></h4><p>通过画图的方式理解设计模式，以一种轻松的姿势理解高深的学问。</p>\n<h4 id=\"Go-指南\"><a href=\"#Go-指南\" class=\"headerlink\" title=\"Go 指南\"></a><a href=\"https://tour.go-zh.org/list\" target=\"_blank\" rel=\"noopener\">Go 指南</a></h4><p>该指南介绍了 Go 的大部分重要特性，同时有一些练习进行巩固。</p>\n<h4 id=\"centos-6-7安装最新版-git\"><a href=\"#centos-6-7安装最新版-git\" class=\"headerlink\" title=\"centos 6.7安装最新版 git\"></a><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7安装最新版 git</a></h4><p>阿里云上的 ECS 很多人都会选择 CentOS 系统，而作为前端，可能需要安装 nvm，但是 CentOS 6.7 默认安装的 git 版本是比较低的 1.7.1 版本，所以需要重新安装最新版 git，这篇教程讲的很详细，我按照他的步骤很顺利的就安装成功了。</p>\n<h4 id=\"Jenkins-nginx-搭建前端构建环境\"><a href=\"#Jenkins-nginx-搭建前端构建环境\" class=\"headerlink\" title=\"Jenkins+nginx 搭建前端构建环境\"></a><a href=\"https://juejin.im/post/5b371678f265da599f68dfa2\" target=\"_blank\" rel=\"noopener\">Jenkins+nginx 搭建前端构建环境</a></h4><p>废话很少，直接上代码的方式我很喜欢，Jenkins 解决了很令人头疼的构建问题，所以如果想成为一名称职的前端工程师，这是一篇值得参考和手巧的教程，赶快跟着作者的手速敲起来吧！</p>\n<h4 id=\"技术胖-155-集前端视频教程\"><a href=\"#技术胖-155-集前端视频教程\" class=\"headerlink\" title=\"技术胖 155 集前端视频教程\"></a><a href=\"https://juejin.im/post/5a5bc8c36fb9a01ca26774eb\" target=\"_blank\" rel=\"noopener\">技术胖 155 集前端视频教程</a></h4><p>技术胖在 2017 年录制的 155 集视频教程，可以免费观看，其中包括 Vue2.x、Vue-cli、Vue-router、vuex、Vue实战、weex、ES6、React基础、React全家桶、Koa2.x、Fabric.js 和 CocosCreater 实战教程等。</p>\n<h2 id=\"进阶级\"><a href=\"#进阶级\" class=\"headerlink\" title=\"进阶级\"></a>进阶级</h2><h4 id=\"深入理解JSON\"><a href=\"#深入理解JSON\" class=\"headerlink\" title=\"深入理解JSON\"></a><a href=\"https://mp.weixin.qq.com/s/CQKFfecqy3_EgW0jLfEMIQ\" target=\"_blank\" rel=\"noopener\">深入理解JSON</a></h4><p>作者将 JSON 和 JS 中的 JSON 都梳理了一遍，也对里面的细节和注意点进行了一次遍历，从中我们能够知道 JSON 是一种语法上衍生于JS语言的一种轻量级的数据交换格式，也会明白 JSON 相对于一般的JS数据结构（尤其是对象）的差别；除此之外，作者更进一步地仔细讨论了 JS 中关于 JSON 处理的 3 个函数和细节。</p>\n<h4 id=\"通用-CSS-笔记、建议与指导\"><a href=\"#通用-CSS-笔记、建议与指导\" class=\"headerlink\" title=\"通用 CSS 笔记、建议与指导\"></a><a href=\"https://github.com/chadluo/CSS-Guidelines/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">通用 CSS 笔记、建议与指导</a></h4><p>作者总结了 CSS 的相关规范，但是建议下面腾讯 AlloyTeam 总结的那篇。。</p>\n<h4 id=\"前端规范总结-AlloyTeam\"><a href=\"#前端规范总结-AlloyTeam\" class=\"headerlink\" title=\"前端规范总结-AlloyTeam\"></a><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">前端规范总结-AlloyTeam</a></h4><p>腾讯 AlloyTeam 通过分析 github 代码库总结出来的工程师代码书写习惯，内容很全很详细，值得一看！</p>\n<h4 id=\"CSS进阶系列\"><a href=\"#CSS进阶系列\" class=\"headerlink\" title=\"CSS进阶系列\"></a><a href=\"http://www.cnblogs.com/coco1s/category/833837.html\" target=\"_blank\" rel=\"noopener\">CSS进阶系列</a></h4><p>通过作者的 github，可以看出来这是一位腾讯的大牛，作者通过 CSS 实现了很多复杂的效果，其中有些例子是《CSS揭秘》这本书里面的，这本书也是我之前强烈推荐大家看的一本 CSS 进阶书籍。</p>\n<h4 id=\"简书-前端基础进阶系列\"><a href=\"#简书-前端基础进阶系列\" class=\"headerlink\" title=\"简书-前端基础进阶系列\"></a><a href=\"http://www.jianshu.com/p/cd3fee40ef59\" target=\"_blank\" rel=\"noopener\">简书-前端基础进阶系列</a></h4><p>作者叫“波同学”，我之前是从来没有听说过作者大名的，但是读过作者这一系列的文章之后对作者的前端能力很是钦佩，同时作者的讲解能力也很强，将一些别人讲的晦涩难懂的原理讲的很透彻，十分推荐大家认真阅读一下作者这一系列的文章，我相信你看完之后你的前端水平会有很大的提升</p>\n<blockquote>\n<p>更新于2017-01-26：波同学将自己在简书上的文章都迁移到了<a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">自己的Gitbook</a>上</p>\n</blockquote>\n<h4 id=\"深入理解-JavaScript-系列\"><a href=\"#深入理解-JavaScript-系列\" class=\"headerlink\" title=\"深入理解 JavaScript 系列\"></a><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 系列</a></h4><p>汤姆大叔写的文章，文章内容实在是多。。而且感觉难度有点大，推荐大家先看一下上面简书的前端基础进阶系列，再来看汤姆大叔这一系列的文章，可能理解起来会更容易一些。</p>\n<h4 id=\"webshell-原理\"><a href=\"#webshell-原理\" class=\"headerlink\" title=\"webshell 原理\"></a><a href=\"http://www.jianshu.com/p/02aac12e459f\" target=\"_blank\" rel=\"noopener\">webshell 原理</a></h4><p>webshell，顾名思义：web 指的是在 web 服务器上，而 shell 是用脚本语言编写的脚本程序，webshell 就是就是 web 的一个管理工具，可以对 web 服务器进行操作的权限，也叫 webadmin。接触过集群的童鞋对这个概念肯定不会感到陌生，虽然一般人不会接触到 webshell，但是多了解一些总是没错的~</p>\n<h4 id=\"全自动科学上网方案分享\"><a href=\"#全自动科学上网方案分享\" class=\"headerlink\" title=\"全自动科学上网方案分享\"></a><a href=\"https://github.com/bestswifter/blog/commit/b68a7bbc413874c3883a66b6b065413f0f351156\" title=\"[Add] 全自动科学上网方案分享\" target=\"_blank\" rel=\"noopener\">全自动科学上网方案分享</a></h4><p>有些童鞋并不了解如何通过 VPS 实现科学上网，这篇文章介绍了如何利用 VPS 进行代理配置，以及实现自动切换，讲解的很详细。</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"一篇绝对能看懂的Git入门教程","slug":"一篇绝对能看懂的Git入门教程","date":"2017-04-17T13:35:16.000Z","updated":"2019-01-27T13:15:42.891Z","comments":true,"path":"api/articles/一篇绝对能看懂的Git入门教程.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_237.png","content":"<p>不管你是从事什么方面的程序猿，只要你属于这个神秘组织，就必须要对 SVN 或 Git 这种版本控制系统有所了解；和大部分人一样，当初项目负责人告诉我需要学 Git 的时候，只说了这样一句话：“网上很多教程，自己看着学吧”，当然，这句话直到今天我也无力反驳，因为对于一个新鲜的程序猿来说，只需要懂一些 Git 的基本指令就可以了，一些高端指令可能永远都用不到，所以，我就查阅了一些 Git 的教程和手册，整理出这篇对于新手很友好的 Git 入门教程</p>\n<h2 id=\"工作区与暂存区\"><a href=\"#工作区与暂存区\" class=\"headerlink\" title=\"工作区与暂存区\"></a>工作区与暂存区</h2><p>很多 Git 教程都把这一部分的讲解放到很靠后的位置，所以我当初学习的时候并没有把这一部分放在心上；但是现在我觉得，这一部分才是最需要明白的，因为这一部分是非常“真实”的，对于一个之前从来没接触过命令行或一直在 windows 上打游戏、看直播的程序猿来说，这一部分也是最容易理解的</p>\n<p><strong>工作区</strong>：通俗易懂的来说就是你电脑里面的能看到的目录，比如 learngit 的目录。<br><strong>版本库</strong>：工作区有一个隐藏的目录 .git，这是 Git 的版本库。版本库中存了很多东西，其中最重要的就是stage(index)的 <strong>暂存区</strong>。 下面这张图非常清晰的表明了这三者的关系，我就不多说了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_237.png\" alt=\"\" width=\"400\"></div>\n\n<p><strong>请牢牢记住这三\b个概念，因为下面会经常用到</strong></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"生成-ssh\"><a href=\"#生成-ssh\" class=\"headerlink\" title=\"生成 ssh\"></a>生成 ssh</h3><p>通过下面的指令可以生成 id_rsa 和 id_rsa.pub 两个文件，不同操作系统这两个文件所在位置不同，id_rsa.pub 里面的所有内容就是你的公钥，直接复制到 GitHub 的 Add SSH key 页面就可以愉快的进行玩耍了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ras -C <span class=\"string\">\"email@xxx\"</span></span><br></pre></td></tr></table></figure>\n<p>ssh 是一种协议，而 Git 目前支持<a href=\"http://www.cnblogs.com/lzxianren/p/git2.html\" target=\"_blank\" rel=\"noopener\">4种协议</a>——ssh协议，http/s协议，git 协议，本地协议，ssh 协议配置简单，权限管理也比较全面，更重要的是无需密码和 linux 内置（git 是 linus 写的软件，linus 是 linux的作者，所以你懂得），至于 ssh 究竟怎么做的就不在本文介绍了，可以去阮一峰的博客中查找相关资料</p>\n<h3 id=\"设置用户名\"><a href=\"#设置用户名\" class=\"headerlink\" title=\"设置用户名\"></a>设置用户名</h3><p>和现实世界类似，你想和别人进行数据通信，首先得让别人知道你是谁，你的联系方式吧，而和现实世界不同的是，这里的联系方式只能填写邮箱，填写微信或者 QQ 号是木有用的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"cc\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"cc@xx\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化当前目录的项目\"><a href=\"#初始化当前目录的项目\" class=\"headerlink\" title=\"初始化当前目录的项目\"></a>初始化当前目录的项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>还记得上面我们提到的三个概念吗，这里的初始化就是为了在本地目录中添加本地版本库，然后才可以后续的 git 操作。比如初始化之前你的目录是这样的（当前目录为空是因为我是在一个空文件夹的基础上进行初始化的，而实际情况是这里面会有你的项目文件）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_189.png\" alt=\"\" width=\"700\"></div>\n\n<p>而执行初始化操作之后：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_190.png\" alt=\"\" width=\"700\"></div>\n\n<p>从上图可以看到，当前目录中多了 .git 文件夹，这个文件夹就是你的本地的版本库了，里面存储着很多东西，其中包括暂存区；通过短短的一行命令，初始化操作就已经完成了，同时 Git 也为我们创建了第一个分支 master，和一个指向 master 的指针 HEAD，接下来就是一些常用的命令</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"查看工作区状态\"><a href=\"#查看工作区状态\" class=\"headerlink\" title=\"查看工作区状态\"></a>查看工作区状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>这是一条需要经常使用的命令，因为有时候工作区的改变可能会是“隐性”的，比如你的编辑器自己添加的文件或者其他类型的隐藏文件，而经常查看状态也是检验某些 git 命令是否执行的方法。通过执行这一命令，我们在终端中可能会看到：</p>\n<div align=\"center\"><img src=\"/images/QQ20170417-153116@2x.png\" alt=\"\" width=\"700\"></div>\n\n<p>从终端的第四行我们可以看到，当我们查看状态时，Git 告诉我们当前分支为 master；第八行的意思是我们没有什么可以 commit 的，说明我们在当前目录下并没有进行修改，所以我们需要进行修改之后再进行后续操作：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_192.png\" alt=\"\" width=\"700\"></div>\n\n<p>从上图我们可以看到，我在当前目录中新添加了一个文件 octocat.txt，然后我们再通过 <code>git status</code> 查看一下当前工作区的状态：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_193.png\" alt=\"\" width=\"700\"></div>\n\n<p>这次好像和上次不一样了，Git 告诉我们有一个文件 untracked files 叫做 octocat.txt，同时还提醒你通过 <code>git add &lt;file&gt;...</code> 进行提交，那这里就稍微提一下 git status 时可能看到的当前工作区的文件的状态</p>\n<ul>\n<li>staged：已经添加到暂存区，等待提交的文件</li>\n<li>unstaged：已经发生了改变，但是还没有提交</li>\n<li>untracked：Git 都不知道还有这个文件，所以说明这是一个新添加的文件（就像上面的 octocat.txt）</li>\n<li>deleted：已经从本地删除的文件</li>\n</ul>\n<h3 id=\"提交工作区修改到暂存区\"><a href=\"#提交工作区修改到暂存区\" class=\"headerlink\" title=\"提交工作区修改到暂存区\"></a>提交工作区修改到暂存区</h3><ul>\n<li>git add .  // 将工作区所有修改添加到暂存区</li>\n<li>git add filename // 将指定文件添加到暂存区</li>\n</ul>\n<p>还是一开始我们提到的那三个概念，我们在本地进行了修改（新建、修改、删除），但是此时还只是我们自己知道发生了哪些改变，Git 根本都不知道（本地的 Git 都不知道，更别提远程），所以需要进行提交；那么你可能有疑问了，为什么提交到暂存区？直接提交给远程不就完了吗？这里就是 Git 设计的巧妙之处，通过暂存区可以防止你的错误提交（事实证明，这一点很重要）。经过 git add 后，我们再通过 git status 查看一下状态：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_194.png\" alt=\"\" width=\"700\"></div>\n\n<p>Git 告诉我们它看到了一个新的文件 octocat.txt，并且 to be committed，那么你可能会问了，假如我当前的目录里有好多文件都需要 add 怎么办，难道一次次执行命令吗？当然不需要，从上面的代码块中可以看到，我们可以通过 <code>git add .</code> 提交所有修改，但是<strong>不推荐这种操作</strong>，因为有可能会将一些不想提交的隐藏文件也提交到暂存区了；假如我们当前目录下有很多 .txt 文件等待提交：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_195.png\" alt=\"\" width=\"700\"></div>\n\n<p>我们可以使用 “*.txt” 匹配到所有的 txt 文件，然后就可以将它们全部提交了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"string\">'*.txt'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将暂存区修改添加到本地仓库\"><a href=\"#将暂存区修改添加到本地仓库\" class=\"headerlink\" title=\"将暂存区修改添加到本地仓库\"></a>将暂存区修改添加到本地仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">'备注信息'</span></span><br></pre></td></tr></table></figure>\n<p>经过多次的 git add，此时的暂存区有好多本地的修改，通过上面的 commit 可以将所有的暂存区的修改添加到本地仓库，所以你可以简单理解为：需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<h3 id=\"push-到远程\"><a href=\"#push-到远程\" class=\"headerlink\" title=\"push 到远程\"></a>push 到远程</h3><p>经过上面的一顿折腾，仍然只有本地的 “Git” 知道了我们都做了些什么，如果想让远程仓库也知道，我们需要先和远程仓库建立联系：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/try-git/try_git.git</span><br></pre></td></tr></table></figure>\n<p>在这里遇到一个问题：每次 push 都要输入用户名和密码，原因是我们是通过 https 方式进行 push，解决方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin      // 移除</span><br><span class=\"line\">git remote add origin git@github.com:try-git/test.git       // 添加</span><br></pre></td></tr></table></figure>\n<p>此后就不用再输入用户名和密码了，同时我们和远程建立联系以后就不用再 git remote add 了，这就好比你去别人家串门，第一次可能需要你需要查一下地图，第二次的话就直接去找他就行了。接下来就是 push 到远程了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>第一次 push 是需要加 -u 参数的，这个参数是告诉远程我是谁（<a href=\"https://www.zhihu.com/question/20019419\" target=\"_blank\" rel=\"noopener\">git push的-u参数具体含义</a>），还是刚才串门的例子，第一次去别人家串门肯定需要表明身份的，第二次就不再需要了，因为已经知道你是谁了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"从远程-pull\"><a href=\"#从远程-pull\" class=\"headerlink\" title=\"从远程 pull\"></a>从远程 pull</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<p>如果别人提交了他们的修改到远程仓库，我们需要从远程 pull 修改到我们的本地，从而保证大家的进度保持同步，比如别人提交了一个 yellow_octocat.txt 文件到远程，我们 git pull 之后：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_197.png\" alt=\"\" width=\"700\"></div>\n\n<p>Git 告诉我们，你 pull 成功了，新增加了一个文件叫做 yellow_octocat.txt，此时我们的当前目录就多了一个 yellow_octocat.txt（.git 也就是本地版本库也知道了这个文件）</p>\n<div align=\"center\"><img src=\"/images/hexo_post_198.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"查看修改的内容\"><a href=\"#查看修改的内容\" class=\"headerlink\" title=\"查看修改的内容\"></a>查看修改的内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<p>有可能别人和我对同一文件进行了修改，所以在 pull 之后需要查看一下都发生了哪些修改:</p>\n<div align=\"center\"><img src=\"/images/hexo_post_199.png\" alt=\"\" width=\"700\"></div>\n\n<p>其实，git diff 的用法不仅只有这一种，还可以查看暂存区的修改都有哪些：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --staged</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><h4 id=\"丢弃工作区的修改\"><a href=\"#丢弃工作区的修改\" class=\"headerlink\" title=\"丢弃工作区的修改\"></a>丢弃工作区的修改</h4><p>假如我们对之前的一个文件 readme.txt 进行了修改，但是现在我发现对这个文件进行的修改都是错的（经常会发生），此时我不想要我对这个文件的修改了，就可以执行下面的命令，然后 readme.txt 就可以回退到我修改之前的样子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout readme.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"丢弃暂存区的修改\"><a href=\"#丢弃暂存区的修改\" class=\"headerlink\" title=\"丢弃暂存区的修改\"></a>丢弃暂存区的修改</h4><p>和刚才不一样的是，我已经将我的修改提交到暂存区了（也就是说已经执行了 git add readme.txt 命令），此时我想把这个文件的修改从暂存区放回到工作区，就需要执行下面的命令，然后此时的暂存区就不再有 readme.txt 的修改，就像没 git add 过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD readme.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支相关\"><a href=\"#分支相关\" class=\"headerlink\" title=\"分支相关\"></a>分支相关</h2><p>除了 Git，其他版本控制系统如 SVN 中也有分支管理，但是 Git 的分支是与众不同的，无论创建、切换和删除分支，Git 在 1 秒钟之内就能完成！无论你的版本库是 1 个文件还是 1 万个文件。每次提交，Git 都把它们串成一条时间线，这条时间线就是一个分支。但是截止到目前，只有一条时间线，在 Git 里，这个分支叫主分支，即<code>master</code> 分支。<code>HEAD</code> 严格来说不是指向提交，而是指向 <code>master</code>，<code>master</code> 才是指向提交的，所以，<strong><code>HEAD</code> 指向的就是当前分支</strong>。每次提交，<code>master</code> 分支都会向前移动一步，这样，随着你不断提交，<code>master</code> 分支的线也越来越长。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_1.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch clean_up</span><br></pre></td></tr></table></figure>\n<p>此时我们在本地创建了一个分支叫做 clean_up，对于 Git 来说，相当于新建了一个指针叫 clean_up，指向和 master 相同的提交，但是此时的 HEAD 仍然指向 master，因为此时我们只是新建了一个分支，并没有切换到 clean_up 分支</p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout clean_up</span><br></pre></td></tr></table></figure>\n<p>我们新创建了 clean_up 分支后，可以通过上面的命令将本地的分支切换到 clean_up，此时的 HEAD 就会指向 clean_up</p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>为了后面的分支命令展示，我们通过下面的命令将 .txt 文件（注意此时所在的分支仍然是 clean_up）删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm <span class=\"string\">'*.txt'</span></span><br></pre></td></tr></table></figure>\n<p>然后，我们将删除这些文件的修改进行提交（add + commit），此时本地的 clean_up 分支就没有这些 .txt 文件了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_200.png\" alt=\"\" width=\"700\"></div>\n\n<p>此时我们再切换到 master 分支（git checkout master）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_201.png\" alt=\"\" width=\"700\"></div>\n\n<p>通过上面两张图片，我们可以清晰的看到分支的作用，其实相当于两个平行世界（branch），而你所扮演的就是上帝的角色，想让哪个世界继续进行，就 checkout 哪个分支就可以了。此时如果我们想让\b clean_up 分支上做出的改变合并到 master 分支该怎么办呢？</p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge clean_up</span><br></pre></td></tr></table></figure>\n<p>上面这段命令执行的前提是你当前的分支是 master，而通过 git merge 某分支可以将某分支的改变合并到当前分支：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_202.png\" alt=\"\" width=\"700\"></div>\n\n<p>我们通过上面的结果可以看到此时的 master 分支已经没有了 .txt 文件</p>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d clean_up</span><br></pre></td></tr></table></figure>\n<p>既然我们已经把 clean_up 分支的改变合并到了 master 分支，所以此时我们就不再需要 clean_up 分支了，通过上面的命令可以将该分支删除</p>\n<h2 id=\"版本相关\"><a href=\"#版本相关\" class=\"headerlink\" title=\"版本相关\"></a>版本相关</h2><p>较为复杂的分支命令的介绍就告一段落了，下面介绍一下和版本相关的一些常用命令</p>\n<h3 id=\"查看提交的历史记录\"><a href=\"#查看提交的历史记录\" class=\"headerlink\" title=\"查看提交的历史记录\"></a>查看提交的历史记录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>我们可以通过 git log 查看提交的历史记录（每一次 commit 都是一次记录）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_196.png\" alt=\"\" width=\"700\"></div>\n\n<p>从上面的图片可以看到，我们有两次 commit 记录，他们的 id 是很长的黄色字符串，这个 id 和每次提交是一一对应的，同时也对应着相应的版本，而除了 commit id，我们还可以看到提交的作者、日期以及备注信息（这里就体现出了备注信息是多么的重要）</p>\n<h3 id=\"回退版本\"><a href=\"#回退版本\" class=\"headerlink\" title=\"回退版本\"></a>回退版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>通过上面的命令，我们可以回退到上个版本，<code>HEAD</code> 为当前版本，<code>HEAD^</code> 为上一个版本，<code>HEAD^^</code> 为上上个版本，如果有 100 个版本 <code>HEAD~100</code>。当然，我们也可以通过上面提到的 commit id 来回到过去的某个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n<p>是不是更感觉自己像是一个上帝了，在 Git 中，你可以随意控制平行世界的发展，需要做的只是输出一行命令而已</p>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><p>上面就是一些我们最常用的 Git 命令，但是 Git 的强大之处远不止这些，下面就简单介绍几种我们可能会用到的命令：</p>\n<h3 id=\"建立本地分支与远程分支的追踪关系\"><a href=\"#建立本地分支与远程分支的追踪关系\" class=\"headerlink\" title=\"建立本地分支与远程分支的追踪关系\"></a>建立本地分支与远程分支的追踪关系</h3><p>当在本地新建分支的时候，可能远程并没有这个分支，所以你需要建立追踪关系，这样你 push 的时候才不会 push 到别的分支上去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to=&lt;remote&gt;/branchName  // 建立本地分支与远程分支的追踪关系</span><br><span class=\"line\">git branch --track branchName [remote branch]   // 新建一个分支，并与远程建立追踪关系</span><br></pre></td></tr></table></figure>\n<h3 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h3><p>这是 Git 的又一神奇命令，它可以让你将任何一次 commit 的修改合并到当前分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick commitId  // 将与 commitId 对应的提交合进当前分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"bug-分支\"><a href=\"#bug-分支\" class=\"headerlink\" title=\"bug 分支\"></a>bug 分支</h3><p>当我们修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除分支；但是如果我们的手头工作没有完成呢，就需要暂时放弃当前没有提交的修改，然后去修复bug，修复完之后再回来恢复原样继续做刚才的工作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash     // 暂时放弃未提交的修改</span><br><span class=\"line\">git stash pop    // 恢复</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践步骤\"><a href=\"#实践步骤\" class=\"headerlink\" title=\"实践步骤\"></a>实践步骤</h2><table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>git操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>克隆代码</td>\n<td>git clone远端代码</td>\n</tr>\n<tr>\n<td>创建分支</td>\n<td>git checkout -b branch_name</td>\n</tr>\n<tr>\n<td>在分支中开发</td>\n<td>无</td>\n</tr>\n<tr>\n<td>review代码</td>\n<td>无</td>\n</tr>\n<tr>\n<td>第一轮测试</td>\n<td>无</td>\n</tr>\n<tr>\n<td>添加代码至分支</td>\n<td>git add somefile</td>\n</tr>\n<tr>\n<td>提交代码至分支</td>\n<td>“git commit -m “”本次提交注释”””</td>\n</tr>\n<tr>\n<td>切换至主分支</td>\n<td>git checkout master</td>\n</tr>\n<tr>\n<td>获取远端最新代码</td>\n<td>git pull origin master</td>\n</tr>\n<tr>\n<td>合并分支至master分支</td>\n<td>git merge branch_name</td>\n</tr>\n<tr>\n<td>解决合并时产生的冲突</td>\n<td></td>\n</tr>\n<tr>\n<td>第二轮测试</td>\n<td>无</td>\n</tr>\n<tr>\n<td>获取远端最新代码</td>\n<td>git pull origin master</td>\n</tr>\n<tr>\n<td>推送至master分支</td>\n<td>git push origin master</td>\n</tr>\n<tr>\n<td>若无问题，删除本地分支</td>\n<td>git branch -d branch_name</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰-Git教程</a></li>\n<li><a href=\"https://try.github.io/levels/1/challenges/1\" target=\"_blank\" rel=\"noopener\">在线练习git命令</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li>\n<li><a href=\"http://www.jianshu.com/p/50892fac6cbc\" target=\"_blank\" rel=\"noopener\">实用Git Workflow</a></li>\n<li><a href=\"http://gitbook.liuhui998.com/index.html\" target=\"_blank\" rel=\"noopener\">Git Community Book 中文版</a></li>\n</ul>\n<h2 id=\"另外一些关于-Git-Github-入门的文章\"><a href=\"#另外一些关于-Git-Github-入门的文章\" class=\"headerlink\" title=\"另外一些关于 Git / Github 入门的文章\"></a>另外一些关于 Git / Github 入门的文章</h2><ul>\n<li><a href=\"http://blog.jobbole.com/111187/\" target=\"_blank\" rel=\"noopener\">大白话解释 Git 和 GitHub</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/\" target=\"_blank\" rel=\"noopener\">git - the simple guide</a></li>\n<li><a href=\"https://www.pluralsight.com/blog/software-development/github-tutorial\" target=\"_blank\" rel=\"noopener\">GitHub: the beginner’s guide</a></li>\n</ul>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"教程","path":"api/tags/教程.json"}]}]}