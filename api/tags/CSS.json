{"name":"CSS","postlist":[{"title":"CSS布局问题总结","slug":"CSS布局问题总结","date":"2017-07-04T10:17:27.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS布局问题总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_22.png","content":"<p>本文主要对 CSS 中常见的布局问题进行了总结，同时提供了解决方案和一些参考链接，涉及到三栏式布局（圣杯、双飞翼），居中布局等等；感兴趣的童鞋可以点击来源链接查看原文，因为本文是基于原文进行整理的，所以内容会比原文精简。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ul>\n<li><a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a>（排版和配色比较舒服，简短不深入，适合入门）</li>\n<li><a href=\"http://www.barelyfitz.com/screencast/html-training/css/positioning/\" target=\"_blank\" rel=\"noopener\">10个文档学布局</a>（通过十个例子讲解布局，主要涉及相对布局，绝对布局和浮动）</li>\n</ul>\n<h2 id=\"三栏式布局\"><a href=\"#三栏式布局\" class=\"headerlink\" title=\"三栏式布局\"></a>三栏式布局</h2><p>涉及浮动和清除浮动，主要讲解“圣杯”和“双飞翼”两种解决方法。这两种方法实现的都是三栏布局，两边的盒子宽度固定，中间盒子自适应，它们实现的效果是一样的，差别在于其实现的思想：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_22.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>圣杯：父盒子包含三个子盒子（左，中，右）</p>\n<ul>\n<li>中间盒子的宽度设置为 <code>width: 100%;</code> 独占一行；</li>\n<li>使用负边距(均是 <code>margin-left</code>)把左右两边的盒子都拉上去和中间盒子同一行；<ul>\n<li><code>.left {margin-left:-100%;}</code> 把左边的盒子拉上去</li>\n<li><code>.right {margin-left：-右边盒子宽度px;}</code> 把右边的盒子拉上去</li>\n</ul>\n</li>\n<li>父盒子设置左右的 padding 来为左右盒子留位置；</li>\n<li>对左右盒子使用相对布局来占据 padding 的空白，避免中间盒子的内容被左右盒子覆盖；</li>\n</ul>\n<h4 id=\"HTML结构\"><a href=\"#HTML结构\" class=\"headerlink\" title=\"HTML结构\"></a>HTML结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 中间的div必须写在最前面 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span>中间内容区<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>左边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>右边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*左右栏通过添加负的margin放到正确的位置了，此段代码是为了摆正中间栏的位置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">180px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;<span class=\"comment\">/*左栏上去到第一行*/</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">180px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#0c9</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:-<span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#0c9</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:-<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h3><p>双飞翼：父盒子包含三个子盒子（左，中，右），中间的子盒子里再加一个子盒子。</p>\n<ul>\n<li>中间盒子的宽度设置为 <code>width: 100%;</code> 独占一行；</li>\n<li>使用负边距(均是 <code>margin-left</code>)把左右两边的盒子都拉上去和中间盒子同一行；</li>\n<li>在中间盒子里面再添加一个 div，然后对这个 div 设置 <code>margin-left</code> 和 <code>margin-right</code>来为左右盒子留位置；</li>\n</ul>\n<h4 id=\"HTML结构-1\"><a href=\"#HTML结构-1\" class=\"headerlink\" title=\"HTML结构\"></a>HTML结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 中间的div必须写在最前面 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle-inner\"</span>&gt;</span>中间弹性区<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>左边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>右边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.middle-inner</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">210px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(33, 114, 214, 0.8);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 82, 0, 0.8);</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(90, 243, 151, 0.8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"圣杯和双飞翼异同\"><a href=\"#圣杯和双飞翼异同\" class=\"headerlink\" title=\"圣杯和双飞翼异同\"></a>圣杯和双飞翼异同</h3><p>圣杯布局和双飞翼布局解决的问题是一样的，都是两边定宽，中间自适应的三栏布局，<strong>中间栏要在放在文档流前面以优先渲染</strong>。</p>\n<ul>\n<li>两种方法基本思路都相同：三栏全部 float 浮动。首先让中间盒子 100% 宽度占满同一高度的空间，在左右两个盒子被挤出中间盒子所在区域时，使用 margin-left 的负值将左右两个盒子拉回与中间盒子同一高度的空间。接下来进行一些调整避免中间盒子的内容被左右盒子遮挡。</li>\n<li>主要区别在于 <strong>如何使中间盒子的内容不被左右盒子遮挡</strong>：<ul>\n<li>圣杯布局的方法：设置父盒子的 padding 值为左右盒子留出空位，再利用相对布局对左右盒子调整位置占据 padding 出来的空位；</li>\n<li>双飞翼布局的方法：在中间盒子里再增加一个子盒子，直接设置这个子盒子的 margin 值来让出空位，而不用再调整左右盒子。</li>\n</ul>\n</li>\n</ul>\n<p>简单说起来就是<strong>双飞翼布局比圣杯布局多创建了一个 div，但不用相对布局了，少设置几个属性</strong>。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.w3cplus.com/blog/104.html\" target=\"_blank\" rel=\"noopener\">CSS三栏布局——中间固定两边自适应宽度</a>：w3cplus 的文章，使用了双飞翼和浮动实现两侧定宽、中间自适应，也实现了两侧自适应、中间定宽</li>\n<li><a href=\"http://www.jianshu.com/p/f9bcddb0e8b4\" target=\"_blank\" rel=\"noopener\">简书 - 圣杯布局和双飞翼布局（前端面试必看）</a>：只讲了圣杯，不过特别详细</li>\n<li><a href=\"https://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"noopener\">In Search of the Holy Grail</a>：圣杯布局的来源</li>\n<li><a href=\"http://ife.baidu.com/note/detail/id/1025\" target=\"_blank\" rel=\"noopener\">百度前端学院笔记 - 三栏式布局之双飞翼与圣杯</a>：百度前端学院学员的前端学习笔记</li>\n<li><a href=\"http://www.jianshu.com/p/549aaa5fabaa\" target=\"_blank\" rel=\"noopener\">简书 - margin为负值产生的影响和常见布局应用</a>：包括对自身的影响，对文档流的影响，以及一些在布局中的应用技巧(比如去除列表右边框，负边距+定位实现水平垂直居中，去除列表最后一个 li 元素的 border-bottom，多列等高)</li>\n</ul>\n<h2 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h2><p>强烈推荐<a href=\"https://css-tricks.com/centering-css-complete-guide/\" target=\"_blank\" rel=\"noopener\">Centering in CSS: A Complete Guide</a>这篇文章，非常全面的居中定位博客，包括各种情况下的水平居中，垂直居中和水平垂直居中方案。有展示示例及相应的 HTML 和 CSS 代码，这篇文章翻译总结如下：</p>\n<ul>\n<li>水平居中<ul>\n<li>对于行内元素(inline)：<code>text-align: center;</code></li>\n<li>对于块级元素(block)：设置宽度且 <code>marigin-left</code> 和 <code>margin-right</code> 是设成 auto</li>\n<li>对于多个块级元素：对父元素设置 <code>text-align: center;</code>，对子元素设置 <code>display: inline-block;</code>；或者使用 flex 布局</li>\n</ul>\n</li>\n<li>垂直居中<ul>\n<li>对于行内元素(inline)<ul>\n<li>单行：设置上下 pandding 相等；或者设置 <code>line-height</code> 和 <code>height</code> 相等</li>\n<li>多行：设置上下 pandding 相等；或者设置 <code>display: table-cell;</code> 和 <code>vertical-align: middle;</code>；或者使用 flex 布局；或者使用伪元素</li>\n</ul>\n</li>\n<li>对于块级元素(block)：下面前两种方案，父元素需使用相对布局<ul>\n<li>已知高度：子元素使用绝对布局 <code>top: 50%;</code>，再用负的 <code>margin-top</code> 把子元素往上拉一半的高度</li>\n<li>未知高度：子元素使用绝对布局 <code>position: absolute; top: 50%; transform: translateY(-50%);</code></li>\n<li>使用 Flexbox：选择方向，<code>justify-content: center;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>水平垂直居中<ul>\n<li>定高定宽：先用绝对布局 <code>top: 50%; left: 50%;</code>，再用和宽高的一半相等的负 margin 把子元素回拉</li>\n<li>高度和宽度未知：先用绝对布局 <code>top: 50%; left: 50%;</code>，再设置 <code>transform: translate(-50%, -50%);</code></li>\n<li>使用 Flexbox：<code>justify-content: center; align-items: center;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"https://segmentfault.com/a/1190000003931851\" target=\"_blank\" rel=\"noopener\">利用HTML和CSS实现常见的布局</a></p>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之absolute","slug":"CSS深入理解之absolute","date":"2017-04-21T13:11:24.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之absolute.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_64.png","content":"<h2 id=\"1-超越-overflow\"><a href=\"#1-超越-overflow\" class=\"headerlink\" title=\"1. 超越 overflow\"></a>1. 超越 overflow</h2><p>独立的 absolute 可以摆脱 overflow 的限制，无论是滚动还是隐藏</p>\n<h2 id=\"2-无依赖的-absolute\"><a href=\"#2-无依赖的-absolute\" class=\"headerlink\" title=\"2. 无依赖的 absolute\"></a>2. 无依赖的 absolute</h2><p>不受 relative 限制的 absolute 定位，行为表现上是不使用 top / right / bottom / left 任何一个属性或使用 auto 作为值</p>\n<h2 id=\"3-定位的行为表现\"><a href=\"#3-定位的行为表现\" class=\"headerlink\" title=\"3. 定位的行为表现\"></a>3. 定位的行为表现</h2><ul>\n<li>脱离文档流</li>\n<li>去浮动：absolute 生效的时候，float 是失效的</li>\n<li>位置跟随：原来是什么位置，绝对定位后依然是什么位置(元素是 block，absolute 之后依然是 block，inline 时 absolute 后依然是 inline)</li>\n<li>可以配合 margin 来精确定位</li>\n<li>注释 <code>&lt;!\\-\\- --&gt;</code> 可以消除换行后的空白，同时保持代码可读性</li>\n</ul>\n<h2 id=\"4-居中以及边缘对齐定位\"><a href=\"#4-居中以及边缘对齐定位\" class=\"headerlink\" title=\"4. 居中以及边缘对齐定位\"></a>4. 居中以及边缘对齐定位</h2><h3 id=\"居中\"><a href=\"#居中\" class=\"headerlink\" title=\"居中\"></a>居中</h3><p>采用 <code>text-align:center</code> 使 div 中的空格居中，利用 <code>absolute 的跟随性</code> 配合 <code>margin 负值自身宽度 50%</code> 实现居中。</p>\n<p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"course-loading-x\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://img.mukewang.com/5453077400015bba00010001.gif\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"course-loading\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"加载中...\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.course-loading-x</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center; </span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: -.<span class=\"number\">25em</span>; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.course-loading</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">26px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_64.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"边缘定位\"><a href=\"#边缘定位\" class=\"headerlink\" title=\"边缘定位\"></a>边缘定位</h3><p>采用 <code>text-align:right</code> 使 div 中的空格居右(fixed 是直接相对于窗口定位，而直接用 absolute 和 right，bottom 是会受到父级 relative 限制的。所以为了避免受到父级影响，使用fixed) </p>\n<p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"course-fixed-x\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"course-fixed\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.imooc.com/activity/diaocha\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"goto_top_diaocha\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.imooc.com/user/feedback\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"goto_top_feed\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.course-fixed-x</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.course-fixed</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_53.png\" alt=\"\" width=\"600\"></div>\n\n<h2 id=\"5-处理对齐、溢出技巧\"><a href=\"#5-处理对齐、溢出技巧\" class=\"headerlink\" title=\"5. 处理对齐、溢出技巧\"></a>5. 处理对齐、溢出技巧</h2><h3 id=\"处理文字前的星号\"><a href=\"#处理文字前的星号\" class=\"headerlink\" title=\"处理文字前的星号\"></a>处理文字前的星号</h3><p>将星号绝对定位后其不占据任何空间，方便后面的文字左对齐</p>\n<p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"regist-label\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"regist-star\"</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>登录密码</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.regist-star</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">1em</span>; </span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: simsun; </span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f30</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片与文字垂直对齐\"><a href=\"#图片与文字垂直对齐\" class=\"headerlink\" title=\"图片与文字垂直对齐\"></a>图片与文字垂直对齐</h3><p>对图标设置绝对定位，并设置 margin 为负值</p>\n<p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"regist-remark regist-warn\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-warn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>邮箱格式不准确（演示）</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.regist-warn</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#be3948</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.regist-warn</span> &gt; <span class=\"selector-class\">.icon-warn</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">20px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理文字溢出\"><a href=\"#处理文字溢出\" class=\"headerlink\" title=\"处理文字溢出\"></a>处理文字溢出</h3><p>利用 absolute 绝对定位使 span 不占据任何空间，从而使其不换行（注 <code>&lt;span&gt;</code> 必须紧跟前一个标签，不能有空格）</p>\n<p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"regist-remark\"</span>&gt;</span>请输入6-16位密码，区分大小写，不能使用空格<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.regist-remark</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">21px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">9px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-脱离文档流\"><a href=\"#6-脱离文档流\" class=\"headerlink\" title=\"6. 脱离文档流\"></a>6. 脱离文档流</h2><h3 id=\"回流与重绘\"><a href=\"#回流与重绘\" class=\"headerlink\" title=\"回流与重绘\"></a>回流与重绘</h3><p>由于回流与重绘的缘故，动画尽量作用在绝对定位元素上</p>\n<h3 id=\"垂直空间的等级\"><a href=\"#垂直空间的等级\" class=\"headerlink\" title=\"垂直空间的等级\"></a>垂直空间的等级</h3><p>z-index 潜在『误区』:绝对定位元素都需要 z-index 控制等级以确定其显示的位置</p>\n<h4 id=\"absolute-是-z-index-无依赖的：\"><a href=\"#absolute-是-z-index-无依赖的：\" class=\"headerlink\" title=\"absolute 是 z-index 无依赖的：\"></a>absolute 是 z-index 无依赖的：</h4><ol>\n<li>如果只有一个绝对定位元素，则会自动<strong>覆盖普通元素</strong></li>\n<li>如果有两个绝对定位，可以控制 DOM 流的前后顺序达到覆盖效果(<strong>后来居上</strong>)</li>\n<li>如果多个绝对定位交错（非常少见），则用 <strong>z-index：1 控制</strong></li>\n<li>如果非弹框类的绝对定位元素 <strong>z-index &gt; 2，必定 z-index 冗余</strong>，需要优化</li>\n</ol>\n<h2 id=\"7-absolute-的-top-right-bottom-left-和-width-height\"><a href=\"#7-absolute-的-top-right-bottom-left-和-width-height\" class=\"headerlink\" title=\"7. absolute 的 top / right / bottom / left 和 width / height\"></a>7. absolute 的 top / right / bottom / left 和 width / height</h2><h3 id=\"absolute-元素使用-top-right-bottom-left-可以让元素在容器内自由定位\"><a href=\"#absolute-元素使用-top-right-bottom-left-可以让元素在容器内自由定位\" class=\"headerlink\" title=\"absolute 元素使用 top / right / bottom / left 可以让元素在容器内自由定位\"></a>absolute 元素使用 top / right / bottom / left 可以让元素在容器内自由定位</h3><p>但是遇到属性为 <strong>position: relative / absolute / fixed / sticky</strong> 的 <code>&lt;div&gt;</code> 时，则只能到这一层为止，无法突破这一层。</p>\n<h3 id=\"使用-top-right-bottom-left-实现『拉伸』\"><a href=\"#使用-top-right-bottom-left-实现『拉伸』\" class=\"headerlink\" title=\"使用 top / right / bottom / left 实现『拉伸』\"></a>使用 top / right / bottom / left 实现『拉伸』</h3><p>当绝对定位的方向是『对立』的(如 left 和 right)，则不是瞬间位移，而是『拉伸』效果 『position: absolute;left: 0;top: 0;width: 50%』等价于『position: absolute;left: 0;top: 0;right: 50%』</p>\n<h4 id=\"没有宽度和高度声明实现的全屏自适应效果：\"><a href=\"#没有宽度和高度声明实现的全屏自适应效果：\" class=\"headerlink\" title=\"没有宽度和高度声明实现的全屏自适应效果：\"></a>没有宽度和高度声明实现的全屏自适应效果：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.overlay</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: .<span class=\"number\">5</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"高度自适应的九宫格效果\"><a href=\"#高度自适应的九宫格效果\" class=\"headerlink\" title=\"高度自适应的九宫格效果\"></a>高度自适应的九宫格效果</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list</span> &#123;\t</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">33.3%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.3%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"left-right-和-width-同时存在\"><a href=\"#left-right-和-width-同时存在\" class=\"headerlink\" title=\"left / right 和 width 同时存在\"></a>left / right 和 width 同时存在</h3><p>相互支持性：</p>\n<ul>\n<li>容器无需固定 width / height 值，内部元素亦可拉伸(可实现图片上一张 / 下一张的遮盖层效果)</li>\n<li>容器拉伸，内部元素支持百分比 width / height 值</li>\n</ul>\n<p><strong>优先级：width / height &gt; left / right</strong></p>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之border","slug":"CSS深入理解之border","date":"2017-04-23T14:39:19.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之border.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_205.png","content":"<h2 id=\"1-不支持百分比单位的属性\"><a href=\"#1-不支持百分比单位的属性\" class=\"headerlink\" title=\"1. 不支持百分比单位的属性\"></a>1. 不支持百分比单位的属性</h2><ul>\n<li>border-width</li>\n<li>outline</li>\n<li>box-shadow</li>\n<li>text-shadow</li>\n</ul>\n<h2 id=\"2-border-width-支持关键字\"><a href=\"#2-border-width-支持关键字\" class=\"headerlink\" title=\"2. border-width 支持关键字\"></a>2. border-width 支持关键字</h2><ul>\n<li>thin –&gt; 1px</li>\n<li>medium（默认值）–&gt; 3px</li>\n<li>thick –&gt; 5px</li>\n</ul>\n<h2 id=\"3-border-style\"><a href=\"#3-border-style\" class=\"headerlink\" title=\"3. border-style\"></a>3. border-style</h2><ul>\n<li>solid：实线</li>\n<li>dashed：虚线，但是 IE 和 Chrome / FireFox 的虚线比例不同，IE 会更密一些</li>\n<li>dotted：点线，Chrome / FireFox 下点线是方形，IE 下是圆形</li>\n<li>double：双线，宽度实现规律为双线宽度永远相等，而中间间隔 ±1</li>\n<li>inset：内凹，在 css 里很少用，基本上被淘汰了</li>\n<li>groove：沟槽</li>\n<li>ridge：山脊</li>\n</ul>\n<p>inset、groove、ridge 风格过时 + 兼容性差，所以基本上处于被淘汰的状态</p>\n<h2 id=\"4-利用-IE7-中的-border-style-dotted-实现圆角效果\"><a href=\"#4-利用-IE7-中的-border-style-dotted-实现圆角效果\" class=\"headerlink\" title=\"4. 利用 IE7 中的 border-style:dotted 实现圆角效果\"></a>4. 利用 IE7 中的 border-style:dotted 实现圆角效果</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.dotted</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">149px</span> dotted <span class=\"number\">#cd0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-利用-border-style-double-实现三道杠\"><a href=\"#5-利用-border-style-double-实现三道杠\" class=\"headerlink\" title=\"5. 利用 border-style:double 实现三道杠\"></a>5. 利用 border-style:double 实现三道杠</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.three</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">60px</span> double;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">20px</span> solid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-border-color-与-color\"><a href=\"#6-border-color-与-color\" class=\"headerlink\" title=\"6. border-color 与 color\"></a>6. border-color 与 color</h2><p>当没有指定 border-color 的时候，会使用 color 作为边框色，类似的还有 box-shadow、text-shadow 和 outline，都是默认使用 color 的颜色</p>\n<h2 id=\"7-border-与-background-position-定位\"><a href=\"#7-border-与-background-position-定位\" class=\"headerlink\" title=\"7. border 与 background-position 定位\"></a>7. border 与 background-position 定位</h2><p>background-position 默认相对于左上进行定位，所以如果想相对于右边进行定位的话，其中一个方法就是借助于 border（设置为 100% 默认不计算 border 区域）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-right</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 100% 40<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-border-color-的分配\"><a href=\"#8-border-color-的分配\" class=\"headerlink\" title=\"8. border-color 的分配\"></a>8. border-color 的分配</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.triangle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: red green blue orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果展示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_205.png\" alt=\"\" width=\"150\"></div>\n\n<h2 id=\"9-border-的应用\"><a href=\"#9-border-的应用\" class=\"headerlink\" title=\"9. border 的应用\"></a>9. border 的应用</h2><h3 id=\"透明边框优雅增加响应区域大小（复选框）\"><a href=\"#透明边框优雅增加响应区域大小（复选框）\" class=\"headerlink\" title=\"透明边框优雅增加响应区域大小（复选框）\"></a>透明边框优雅增加响应区域大小（复选框）</h3><p>原来视觉区域大小（不含边框）是 16px * 16px，经过使用透明边框，可以使复选框点击区域扩大到 20px * 20px 甚至更大</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.checkbox</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">1px</span>, inset <span class=\"number\">1px</span> <span class=\"number\">0</span>, inset -<span class=\"number\">1px</span> <span class=\"number\">0</span>, inset <span class=\"number\">0</span> -<span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#d0d0d5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现两栏等高布局\"><a href=\"#实现两栏等高布局\" class=\"headerlink\" title=\"实现两栏等高布局\"></a>实现两栏等高布局</h3><p>利用很长的 border 构造另外一个盒子，然后利用 margin 负值进行定位，但是不支持百分比宽度（margin 和 padding实现支持百分比宽度）</p>\n<p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>导航1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"module\"</span>&gt;</span>模块1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">300px</span> solid <span class=\"number\">#222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_206.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"绘制三角形\"><a href=\"#绘制三角形\" class=\"headerlink\" title=\"绘制三角形\"></a>绘制三角形</h3><p>根据上面 border-color 的分配，实现方案为将 border 的其中一个方向的颜色设置为预期颜色，将其余三个方向设置为透明，然后 border-width 就是三角形的大小</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.triangle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: red transparent transparent transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之float","slug":"CSS深入理解之float","date":"2017-04-21T13:41:31.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之float.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"1-float-的历史\"><a href=\"#1-float-的历史\" class=\"headerlink\" title=\"1. float 的历史\"></a>1. float 的历史</h2><p>浮动设计的初衷: 实现文字环绕</p>\n<h2 id=\"2-float-感性认知\"><a href=\"#2-float-感性认知\" class=\"headerlink\" title=\"2. float 感性认知\"></a>2. float 感性认知</h2><p>float 具有<strong>包裹性</strong>和<strong>破坏性</strong></p>\n<h3 id=\"具有包裹性的小伙伴\"><a href=\"#具有包裹性的小伙伴\" class=\"headerlink\" title=\"具有包裹性的小伙伴:\"></a>具有包裹性的小伙伴:</h3><ul>\n<li>display: inline-block / table-cell / …</li>\n<li>position: absolute(近亲) / fixed / sticky</li>\n<li>overflow: hidden / scroll</li>\n</ul>\n<h3 id=\"具有破坏性的小伙伴-父级元素容器塌陷，高度变为-0\"><a href=\"#具有破坏性的小伙伴-父级元素容器塌陷，高度变为-0\" class=\"headerlink\" title=\"具有破坏性的小伙伴: (父级元素容器塌陷，高度变为 0)\"></a>具有破坏性的小伙伴: (父级元素容器塌陷，高度变为 0)</h3><ul>\n<li>display: none</li>\n<li>position: absolute(近亲) / fixed / sticky</li>\n</ul>\n<h2 id=\"3-如何解决浮动让父元素高度塌陷的问题\"><a href=\"#3-如何解决浮动让父元素高度塌陷的问题\" class=\"headerlink\" title=\"3. 如何解决浮动让父元素高度塌陷的问题\"></a>3. 如何解决浮动让父元素高度塌陷的问题</h2><p>浮动的破坏性只是单纯为了实现文字环绕效果而已<br>关于<strong>浮动塌陷</strong>：给父元素设置了宽高，那么父元素不会塌陷；如果设置了宽度没有设置高度，会塌陷，宽度值还是设定的值，高度为0；如果没有设置宽高，发生塌陷，宽度为页面宽度，高度为0。</p>\n<h2 id=\"4-清除浮动\"><a href=\"#4-清除浮动\" class=\"headerlink\" title=\"4. 清除浮动\"></a>4. 清除浮动</h2><h3 id=\"底部插入-clear-both\"><a href=\"#底部插入-clear-both\" class=\"headerlink\" title=\"底部插入 clear:both\"></a>底部插入 <code>clear:both</code></h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">  *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更好的方法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">  *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-BFC\"><a href=\"#5-BFC\" class=\"headerlink\" title=\"5. BFC\"></a>5. BFC</h2><p>BFC：Block Formatting Context，<strong>块级格式化上下文</strong>，一个独立的块级渲染区域，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关</p>\n<h3 id=\"产生条件：\"><a href=\"#产生条件：\" class=\"headerlink\" title=\"产生条件：\"></a>产生条件：</h3><p>满足其一即可：</p>\n<ol>\n<li>html 根元素</li>\n<li>float 的值不为 none</li>\n<li>display 的值为 inline-block、table-cell、table-caption</li>\n<li>position 的值为 absolute 或 fix</li>\n</ol>\n<h3 id=\"约束规则：\"><a href=\"#约束规则：\" class=\"headerlink\" title=\"约束规则：\"></a>约束规则：</h3><ol>\n<li>生成 BFC 元素的子元素会一个接着一个防止垂直方向上他们的起点是一个包含块的顶部，两个相邻子元素之间的垂直距离取决于元素的 margin 特性。在 BFC 中相邻的块级元素外边距会折叠，同属一个 BFC 的两个相邻 Box 的 margin 会发生重叠。</li>\n<li>生成 BFC 元素的子元素中，每一个子元素左外边距与包含块的左边界接触，即使浮动元素也是如此（除非这个子元素自身也是一个浮动元素）。</li>\n<li>BFC 的区域不会与 float 的元素区域重叠。</li>\n<li>计算 BFC 高度时，浮动元素也参与计算。</li>\n<li>BFC 就是页面上一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。</li>\n</ol>\n<h2 id=\"6-浮动的优劣\"><a href=\"#6-浮动的优劣\" class=\"headerlink\" title=\"6. 浮动的优劣\"></a>6. 浮动的优劣</h2><h3 id=\"浮动的影响\"><a href=\"#浮动的影响\" class=\"headerlink\" title=\"浮动的影响\"></a>浮动的影响</h3><ul>\n<li>元素 block 块状化(砖头化)</li>\n<li>破坏性造成的紧密排列特性(去空格化，和 inline-block 不同)</li>\n</ul>\n<h3 id=\"浮动存在的问题\"><a href=\"#浮动存在的问题\" class=\"headerlink\" title=\"浮动存在的问题:\"></a>浮动存在的问题:</h3><ul>\n<li>容错性比较糟糕，容易出问题</li>\n<li>全部用固定尺寸，代码不易重用</li>\n<li>与 IE7 及以下版本不兼容</li>\n</ul>\n<h2 id=\"7-两侧自适应布局\"><a href=\"#7-两侧自适应布局\" class=\"headerlink\" title=\"7.两侧自适应布局\"></a>7.两侧自适应布局</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.left&#123;  // 左侧</span><br><span class=\"line\">  <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;  // 右侧</span><br><span class=\"line\">  <span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">max-width</span>;</span><br><span class=\"line\">  *<span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">table-cell</span>;</span><br><span class=\"line\">  *<span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline-block</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之line-height","slug":"CSS深入理解之line-height","date":"2017-04-21T08:56:36.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之line-height.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_89.png","content":"<h2 id=\"1-baseline-与-line-height\"><a href=\"#1-baseline-与-line-height\" class=\"headerlink\" title=\"1. baseline 与 line-height\"></a>1. baseline 与 line-height</h2><p>两条 baseline 之间的距离即为行高(不同的字体所在位置不同，可能偏离基线)</p>\n<div align=\"center\"><img src=\"/images/hexo_post_89.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"2-行内框盒子模型\"><a href=\"#2-行内框盒子模型\" class=\"headerlink\" title=\"2. 行内框盒子模型\"></a>2. 行内框盒子模型</h2><p>一共有 4 种模型：</p>\n<ol>\n<li><strong>内容区域</strong>(content area)，是一种围绕文字看不见的盒子。”内容区域”(content area)的大小与 font-size 的大小相关；</li>\n<li><strong>内联盒子</strong>(inline boxes)，内联盒子不会让内容成块显示，而是排成一行。如果外部含 inline 水平的标签(span，a，em等)，则属于内联盒子。如果是个光秃秃的文字，则属于匿名内联盒子；</li>\n<li><strong>行框盒子</strong>(line boxes)，每一行就是一个行框盒子，每个行框盒子又是由一个一个内联盒子组成；</li>\n<li><code>&lt;p&gt;</code> 标签所在的<strong>包含盒子</strong>(containing box)，此盒子由一行一行的行框盒子组成；</li>\n</ol>\n<h2 id=\"3-line-height-与内联元素的高度机制\"><a href=\"#3-line-height-与内联元素的高度机制\" class=\"headerlink\" title=\"3. line-height 与内联元素的高度机制\"></a>3. line-height 与内联元素的高度机制</h2><ul>\n<li><strong>内联元素的高度是由 line-height 决定的；</strong></li>\n<li>行高由于其继承性，影响无处不在，即使单行文本也不例外；</li>\n<li>行高只是幕后黑手，高度的表现不是行高，而是内容区域和行间距；</li>\n<li><strong>内容区域高度(content area) + 行间距(vertical spacing) = 行高(line-height)；</strong></li>\n<li>内容区域高度只与字号以及字体有关，与 line-height 没有任何关系；在 simsun 字体下，内容区域高度等于文字大小值；</li>\n<li>行间距上下拆分，就有了”半行间距”；</li>\n<li><strong>行高决定内联盒子高度;行间距墙头草，可大可小(甚至负值)，保证高度正好等同于行高；</strong></li>\n<li>含多个行框盒子的包含容器–多行文本的高度就是单行文本高度累加。</li>\n</ul>\n<h2 id=\"4-line-height-各类属性值\"><a href=\"#4-line-height-各类属性值\" class=\"headerlink\" title=\"4. line-height 各类属性值\"></a>4. line-height 各类属性值</h2><h3 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h3><p>默认属性值.跟着用户的浏览器走，且与元素字体关联</p>\n<h3 id=\"lt-number-gt\"><a href=\"#lt-number-gt\" class=\"headerlink\" title=\"&lt;number&gt;\"></a><code>&lt;number&gt;</code></h3><p>使用数值作为行高值，根据当前元素的 font-size 大小计算</p>\n<h3 id=\"lt-length-gt\"><a href=\"#lt-length-gt\" class=\"headerlink\" title=\"&lt;length&gt;\"></a><code>&lt;length&gt;</code></h3><p>使用具体长度值作为行高值，如 1.5em; 1.5rem; 20px; 20pt</p>\n<h3 id=\"lt-percent-gt\"><a href=\"#lt-percent-gt\" class=\"headerlink\" title=\"&lt;percent&gt;\"></a><code>&lt;percent&gt;</code></h3><p>相对于设置了该 line-height 属性的元素的 font-size 大小计算</p>\n<h3 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h3><p>继承，input 框等元素默认行高是 normal，使用 inherit 可以让文本框样式可控性更强</p>\n<h2 id=\"5-line-height-设置为-1-5-150-1-5em-有何区别\"><a href=\"#5-line-height-设置为-1-5-150-1-5em-有何区别\" class=\"headerlink\" title=\"5. line-height 设置为 1.5 / 150% / 1.5em 有何区别\"></a>5. line-height 设置为 1.5 / 150% / 1.5em 有何区别</h2><p>计算上无差别，但是 <strong>150% / 1.5em 是根据父元素的 font-size 计算的，1.5 是根据自身的 font-size 计算；也就是 150% / 1.5em 是会将行高继承给后代元素的，而 1.5 只会将比例继承给后代元素，后代元素会根据自己的 font-size 重新计算行高</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_83.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"6-body-全局数值行高使用经验\"><a href=\"#6-body-全局数值行高使用经验\" class=\"headerlink\" title=\"6. body 全局数值行高使用经验\"></a>6. body 全局数值行高使用经验</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: ?;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了方便心算，所以我们<strong>将行高设置为 20px</strong>，此时的 line-height 为：line-height = 20px / 14px ≈ 1.4287 -&gt; <strong>line-height: 1.4286</strong></p>\n<h2 id=\"7-line-height-与图片的表现\"><a href=\"#7-line-height-与图片的表现\" class=\"headerlink\" title=\"7. line-height 与图片的表现\"></a>7. line-height 与图片的表现</h2><h3 id=\"行高不会影响图片实际占据的高度\"><a href=\"#行高不会影响图片实际占据的高度\" class=\"headerlink\" title=\"行高不会影响图片实际占据的高度\"></a>行高不会影响图片实际占据的高度</h3><p>图片外面有隐藏的“幽灵”文本节点，所以 text-align: center 会使图片在p标签中居中</p>\n<div align=\"center\"><img src=\"/images/hexo_post_82.png\" alt=\"\" width=\"400\"></div>\n\n<p>内联元素的 vertical-align 默认为 baseline，所以文字的基线与图片的最下方对齐，但由于文字有行高，所以图片下方会有空隙：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_76.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"如何消除图片底部间隙\"><a href=\"#如何消除图片底部间隙\" class=\"headerlink\" title=\"如何消除图片底部间隙\"></a>如何消除图片底部间隙</h3><h4 id=\"图片块状化-无基线对齐\"><a href=\"#图片块状化-无基线对齐\" class=\"headerlink\" title=\"图片块状化-无基线对齐\"></a>图片块状化-无基线对齐</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123; <span class=\"attribute\">display</span>: block; &#125;</span><br></pre></td></tr></table></figure>\n<p>块状化的元素没有 vertical-align 属性</p>\n<h4 id=\"图片底线对齐\"><a href=\"#图片底线对齐\" class=\"headerlink\" title=\"图片底线对齐\"></a>图片底线对齐</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">vertical-align</span>: bottom&#125;</span><br></pre></td></tr></table></figure>\n<p>vertical-align 不再是 baseline，文本的最下方与图片的最下方对齐</p>\n<h4 id=\"行高足够小-基线位置上移\"><a href=\"#行高足够小-基线位置上移\" class=\"headerlink\" title=\"行高足够小-基线位置上移\"></a>行高足够小-基线位置上移</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123; <span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>基线位置上移到图片的最下方</p>\n<h3 id=\"小图片和大文字\"><a href=\"#小图片和大文字\" class=\"headerlink\" title=\"小图片和大文字\"></a>小图片和大文字</h3><p>基本上高度受行高控制</p>\n<h2 id=\"8-line-height-的实际应用\"><a href=\"#8-line-height-的实际应用\" class=\"headerlink\" title=\"8. line-height 的实际应用\"></a>8. line-height 的实际应用</h2><h3 id=\"图片水平垂直居中\"><a href=\"#图片水平垂直居中\" class=\"headerlink\" title=\"图片水平垂直居中\"></a>图片水平垂直居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&gt;<span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多行文本水平垂直居中\"><a href=\"#多行文本水平垂直居中\" class=\"headerlink\" title=\"多行文本水平垂直居中\"></a>多行文本水平垂直居中</h3><p>多行文字水平垂直居中实现的原理跟上一页图片的实现是一样的，区别在于要把多行文本所在的容器的 display 水平转换成和图片一样的，也就是 inline-block，以及重置外部继承的 text-align 和 line-height 属性值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&gt;<span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之margin","slug":"CSS深入理解之margin","date":"2017-04-20T14:58:44.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之margin.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_80.png","content":"<h2 id=\"1-margin-与容器的尺寸\"><a href=\"#1-margin-与容器的尺寸\" class=\"headerlink\" title=\"1. margin 与容器的尺寸\"></a>1. margin 与容器的尺寸</h2><ul>\n<li>适用于没有设定 width / height 的普通 block 水平元素(float 元素，absolute / fixed 元素，inline 水平，table-cell 元素虽然 block 化，但是不是普通的 block 水平元素)</li>\n<li>只适用于水平方向尺寸</li>\n<li>一侧定宽的自适应布局</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_80.png\" alt=\"\" width=\"400\"></div>\n\n<ul>\n<li>滚动容器内上下留白</li>\n</ul>\n<p>外部容器设置 padding 值，只有 chrome 才会有留白，此时可以在给内部容器设置 margin 值</p>\n<div align=\"center\"><img src=\"/images/hexo_post_59.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"2-margin-与百分比单位\"><a href=\"#2-margin-与百分比单位\" class=\"headerlink\" title=\"2. margin 与百分比单位\"></a>2. margin 与百分比单位</h2><h3 id=\"计算规则\"><a href=\"#计算规则\" class=\"headerlink\" title=\"计算规则\"></a>计算规则</h3><p>普通元素的百分比 margin 都是相对于容器的宽度计算的，绝对定位元素的百分比 margin 是相对于第一个定位祖先元素(relative / absolute / fixed)的宽度计算的</p>\n<h3 id=\"应用-宽度-2-1-自适应矩形\"><a href=\"#应用-宽度-2-1-自适应矩形\" class=\"headerlink\" title=\"应用-宽度 2:1 自适应矩形\"></a>应用-宽度 2:1 自适应矩形</h3><p>由于 margin 百分比的计算规则是相对于容器进行计算的，而 margin 又可以影响普通 block 水平元素的可视尺寸，所以当设置为 margin: 50% 时，由于 margin 重叠特性，所以会让元素的宽高始终保持 2:1 的比例</p>\n<div align=\"center\"><img src=\"/images/hexo_post_84.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"3-margin-重叠\"><a href=\"#3-margin-重叠\" class=\"headerlink\" title=\"3. margin 重叠\"></a>3. margin 重叠</h2><h3 id=\"通常特性\"><a href=\"#通常特性\" class=\"headerlink\" title=\"通常特性\"></a>通常特性</h3><p>发生在 block 水平元素（不包括 float 和 absolute 元素） 不考虑 writing-mode，只发生在垂直方向（margin-top / margin-bottom）</p>\n<h3 id=\"3-种情境\"><a href=\"#3-种情境\" class=\"headerlink\" title=\"3 种情境\"></a>3 种情境</h3><h4 id=\"相邻的兄弟元素\"><a href=\"#相邻的兄弟元素\" class=\"headerlink\" title=\"相邻的兄弟元素\"></a>相邻的兄弟元素</h4><div align=\"center\"><img src=\"/images/hexo_post_78.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"父级和第一个-最后一个子元素\"><a href=\"#父级和第一个-最后一个子元素\" class=\"headerlink\" title=\"父级和第一个 / 最后一个子元素\"></a>父级和第一个 / 最后一个子元素</h4><p>下面这3种书写形式的效果是相同的，都是子元素向下偏移了 80px，而父级的尺寸并没有改变</p>\n<div align=\"center\"><img src=\"/images/hexo_post_56.png\" alt=\"\" width=\"400\"></div>\n\n<p>父子 margin 重叠的其他条件</p>\n<p><strong>margin-top 重叠：</strong></p>\n<ol>\n<li>父元素非块状格式化上下文元素</li>\n<li>父元素没有 border-top 设置</li>\n<li>父元素没有 padding-top 值</li>\n<li>父元素和第一个子元素之间没有 inline 元素分隔</li>\n</ol>\n<p><strong>margin-bottom 重叠：</strong></p>\n<ol>\n<li>父元素非块状格式化上下文元素</li>\n<li>父元素没有 border-bottom 设置</li>\n<li>父元素没有 padding-bottom 值</li>\n<li>父元素没有和最后一个子元素之间没有 inline 元素分隔</li>\n<li>父元素没有 height，min-height，max-height 限制</li>\n</ol>\n<h4 id=\"空的-block-元素\"><a href=\"#空的-block-元素\" class=\"headerlink\" title=\"空的 block 元素\"></a>空的 block 元素</h4><div align=\"center\"><img src=\"/images/hexo_post_66.png\" alt=\"\" width=\"400\"></div>\n\n<p><strong>空的 block 元素 margin 重叠其他条件：</strong></p>\n<ol>\n<li>元素没有 border 设置</li>\n<li>元素没有 padding 值</li>\n<li>里面没有 inline 元素</li>\n<li>没有 height，或者 min-height</li>\n</ol>\n<h3 id=\"margin-重叠计算规则\"><a href=\"#margin-重叠计算规则\" class=\"headerlink\" title=\"margin 重叠计算规则\"></a>margin 重叠计算规则</h3><ul>\n<li>正正取大值：50 和 20 –&gt; 50</li>\n<li>正负值相加：50 和 -20 –&gt; 30</li>\n<li>负负最负值：-50 和 -30 –&gt; -50</li>\n</ul>\n<h3 id=\"margin-重叠的意义\"><a href=\"#margin-重叠的意义\" class=\"headerlink\" title=\"margin 重叠的意义\"></a>margin 重叠的意义</h3><ol>\n<li>连续段落或列表之类，如果没有 margin 重叠，首尾项间距会和其他兄弟标签 1:2 关系，排版不自然</li>\n<li>web 中任何地方嵌套或直接放入任何裸 div，都不会影响原来的布局</li>\n<li>遗落的空任意多个 <code>&lt;p&gt;</code> 元素，不要影响原来的阅读排版</li>\n</ol>\n<h3 id=\"善用-margin-重叠\"><a href=\"#善用-margin-重叠\" class=\"headerlink\" title=\"善用 margin 重叠\"></a>善用 margin 重叠</h3><div align=\"center\"><img src=\"/images/hexo_post_73.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"4-margin-auto\"><a href=\"#4-margin-auto\" class=\"headerlink\" title=\"4. margin auto\"></a>4. margin auto</h2><p>如果一侧定值，一侧 auto，auto 为剩余空间大小；如果两侧都是 auto，则平分剩余空间(居中显示)，但是不能计算负值</p>\n<h3 id=\"writing-mode-与垂直居中\"><a href=\"#writing-mode-与垂直居中\" class=\"headerlink\" title=\"writing-mode 与垂直居中\"></a>writing-mode 与垂直居中</h3><p>更改流为垂直方向，实现垂直方向的 margin: auto 居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">writing-mode</span>: vertical-lr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.son</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"absolut-与-margin-居中\"><a href=\"#absolut-与-margin-居中\" class=\"headerlink\" title=\"absolut 与 margin 居中\"></a>absolut 与 margin 居中</h3><p><code>top:0; right:0; bottom:0; left:0;</code> 会使子元素的宽度和高度拉伸到与父元素相同大小，当没有 width / height 属性时，absolute 元素自动填满了容器；但设置了 width / height 属性后，会限制 absolute 元素自动填满容器，此时 margin: auto 就会自动平分被变更的尺寸空间，从而实现子元素的水平垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.son</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-margin-负值定位\"><a href=\"#5-margin-负值定位\" class=\"headerlink\" title=\"5. margin 负值定位\"></a>5. margin 负值定位</h2><h3 id=\"margin-负值下的两端对齐\"><a href=\"#margin-负值下的两端对齐\" class=\"headerlink\" title=\"margin 负值下的两端对齐\"></a>margin 负值下的两端对齐</h3><p>margin 可以改变元素尺寸</p>\n<div align=\"center\"><img src=\"/images/hexo_post_118.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"margin-负值下的等高布局\"><a href=\"#margin-负值下的等高布局\" class=\"headerlink\" title=\"margin 负值下的等高布局\"></a>margin 负值下的等高布局</h3><p>margin 改变元素占据空间：给每个框设置大的底部内边距，然后用数值相似的负外边距消除这个高度。这会导致每一列溢出容器元素，如果把外包容器的 overflow 属性设为 hidden，列就在最高点被裁切</p>\n<div align=\"center\"><img src=\"/images/hexo_post_116.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"margin-负值下的两栏自适应布局\"><a href=\"#margin-负值下的两栏自适应布局\" class=\"headerlink\" title=\"margin 负值下的两栏自适应布局\"></a>margin 负值下的两栏自适应布局</h3><p>元素占据空间跟随 margin 移动</p>\n<div align=\"center\"><img src=\"/images/hexo_post_117.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"6-margin-无效情形解析\"><a href=\"#6-margin-无效情形解析\" class=\"headerlink\" title=\"6. margin 无效情形解析\"></a>6. margin 无效情形解析</h2><h3 id=\"inline-元素的垂直-margin-无效\"><a href=\"#inline-元素的垂直-margin-无效\" class=\"headerlink\" title=\"inline 元素的垂直 margin 无效\"></a>inline 元素的垂直 margin 无效</h3><p>前提：</p>\n<ul>\n<li>非替换元素：替换元素为 <code>&lt;img&gt;</code> <code>&lt;button&gt;</code> 元素</li>\n<li>正常书写模式</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_109.png\" alt=\"\" width=\"400\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_67.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"margin-重叠\"><a href=\"#margin-重叠\" class=\"headerlink\" title=\"margin 重叠\"></a>margin 重叠</h3><p>上面讲过了</p>\n<h3 id=\"display-table-cell-与-margin\"><a href=\"#display-table-cell-与-margin\" class=\"headerlink\" title=\"display: table-cell 与 margin\"></a>display: table-cell 与 margin</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin\" target=\"_blank\" rel=\"noopener\">MDN上的解释</a>：</p>\n<blockquote>\n<p>除了 display 为 table 相关类型（不包括 table-caption，table 以及 inline-table）的所有，甚至也可应用于 ::first-letter</p>\n</blockquote>\n<h3 id=\"position-absolute-与-margin\"><a href=\"#position-absolute-与-margin\" class=\"headerlink\" title=\"position: absolute 与 margin\"></a>position: absolute 与 margin</h3><p>绝对定位元素<strong>非定位方位</strong>的 margin 值”无效”，绝对定位的 margin 值一直有效，只是不像普通元素那样，可以和兄弟元素插科打诨!</p>\n<h3 id=\"鞭长莫及导致的-margin-无效\"><a href=\"#鞭长莫及导致的-margin-无效\" class=\"headerlink\" title=\"鞭长莫及导致的 margin 无效\"></a>鞭长莫及导致的 margin 无效</h3><p>浮动元素和绝对定位元素会破坏布局，此时的 margin-left 会从整个父容器的左侧开始算起，所以当 margin-left 值小于图片的宽度的时候，会看不到效果，但其实是有效的</p>\n<h3 id=\"内联特性导致的-margin-无效\"><a href=\"#内联特性导致的-margin-无效\" class=\"headerlink\" title=\"内联特性导致的 margin 无效\"></a>内联特性导致的 margin 无效</h3><p>内联元素默认基线对齐(vertical-align: baseline)，当 margin-top 是一个很大的负值的时候，由于字母 x (内敛元素)的拖累(x 没有添加任何样式，所以不会跑到父容器外面)，内联元素仍然在与 x 基线对齐的位置</p>\n<div align=\"center\"><img src=\"/images/hexo_post_69.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"7-margin-start-和-margin-end\"><a href=\"#7-margin-start-和-margin-end\" class=\"headerlink\" title=\"7. margin-start 和 margin-end\"></a>7. margin-start 和 margin-end</h2><p>正常流下：</p>\n<ul>\n<li>margin-start –&gt; margin-left</li>\n<li>margin-end –&gt; margin-right</li>\n<li>margin-before –&gt; margin-top</li>\n<li>margin-after –&gt; margin-bottom</li>\n</ul>\n<p>如果水平流是从右往左，margin-start 等同于 margin-right<br>在垂直流下（writing-mode: vertical-*），margin-start 等同于 margin-top</p>\n<h2 id=\"8-margin-collapse\"><a href=\"#8-margin-collapse\" class=\"headerlink\" title=\"8. margin-collapse\"></a>8. margin-collapse</h2><p>决定 margin 重叠时该如何表现</p>\n<blockquote>\n<p>-webkit-margin-collapse:<collapse> | <discard> | <separate></separate></discard></collapse></p>\n</blockquote>\n<ul>\n<li>collapse（默认-重叠）</li>\n<li>discard（取消）–&gt; 此时 margin 将变为 0</li>\n<li>separate（分隔）–&gt; 此时 margin 将不再重叠，而是相加</li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之padding","slug":"CSS深入理解之padding","date":"2017-04-20T12:30:24.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之padding.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_60.png","content":"<h2 id=\"1-padding-和元素尺寸的关系\"><a href=\"#1-padding-和元素尺寸的关系\" class=\"headerlink\" title=\"1. padding 和元素尺寸的关系\"></a>1. padding 和元素尺寸的关系</h2><h3 id=\"对于-block-水平元素\"><a href=\"#对于-block-水平元素\" class=\"headerlink\" title=\"对于 block 水平元素\"></a>对于 block 水平元素</h3><ul>\n<li>padding 太大时，一定会影响尺寸</li>\n<li>width 非 auto，padding 影响尺寸</li>\n<li>width 为 auto 或 box-sizing 为 border-box，同时 padding 值没有过大，此时不会影响尺寸</li>\n</ul>\n<h3 id=\"对于-inline-水平元素\"><a href=\"#对于-inline-水平元素\" class=\"headerlink\" title=\"对于 inline 水平元素\"></a>对于 inline 水平元素</h3><p>水平 padding 影响尺寸，垂直 padding 不影响尺寸，<strong>但是会影响背景色(占据空间)</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_60.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"inline-元素-padding-特性应用-gt-gt-高度可控的分割线\"><a href=\"#inline-元素-padding-特性应用-gt-gt-高度可控的分割线\" class=\"headerlink\" title=\"inline 元素 padding 特性应用 &gt;&gt; 高度可控的分割线\"></a>inline 元素 padding 特性应用 &gt;&gt; 高度可控的分割线</h3><ol>\n<li>直接使用字符：注册 | 退出登录</li>\n<li>inline-block 控制：注册丨退出登录</li>\n<li>使用 inline 和 padding：注册丨退出登录</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册<span class=\"tag\">&lt;<span class=\"name\">sapn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>退出登录</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">16px</span> <span class=\"number\">6px</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">2px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-padding-负值\"><a href=\"#2-padding-负值\" class=\"headerlink\" title=\"2. padding 负值\"></a>2. padding 负值</h2><p>padding 不支持任何形式的负值</p>\n<h2 id=\"3-padding-百分比值\"><a href=\"#3-padding-百分比值\" class=\"headerlink\" title=\"3. padding 百分比值\"></a>3. padding 百分比值</h2><p>padding 百分比均是相对于宽度计算的，所以可以用来实现一个正方形（<strong>padding: 50%</strong>）</p>\n<h3 id=\"inline-元素的-padding-百分比值\"><a href=\"#inline-元素的-padding-百分比值\" class=\"headerlink\" title=\"inline 元素的 padding 百分比值\"></a>inline 元素的 padding 百分比值</h3><ul>\n<li>同样相对于宽度计算</li>\n<li>默认的高度宽度细节有差异</li>\n<li>padding 会断行</li>\n</ul>\n<p>因为文字的换行导致表现诡异，当 padding 变小以至于文字不会换行时就会正常表现</p>\n<div align=\"center\"><img src=\"/images/hexo_post_61.png\" alt=\"\" width=\"400\"></div>\n\n<p>空 inline 元素 + padding 高度也不等(高度大于宽度)，此时如果设置 font-size: 0 就可以正常表现了</p>\n<p>原因：inline 元素的垂直 padding 会让”幽灵空白节点”显现，也就是规范中的 “strut” 出现</p>\n<h2 id=\"4-标签元素的内置-padding\"><a href=\"#4-标签元素的内置-padding\" class=\"headerlink\" title=\"4. 标签元素的内置 padding\"></a>4. 标签元素的内置 padding</h2><h3 id=\"ol-ul-列表\"><a href=\"#ol-ul-列表\" class=\"headerlink\" title=\"ol / ul 列表\"></a>ol / ul 列表</h3><ul>\n<li>ol / li 元素内置 padding-left，但是单位是 px 不是 em；</li>\n<li>例如 Chrome 浏览器下是 40px；</li>\n<li>如果字号很小，间距就会很开；</li>\n<li>如果字号很大，序号会爬到容器外面；</li>\n</ul>\n<h3 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h3><ul>\n<li>所有浏览器 input / textarea 输入框内置 padding</li>\n<li>所有浏览器 button 按钮内置 padding</li>\n<li>部分浏览器 select 下拉内置 padding，如 FireFox、IE8+ 可以设置 padding</li>\n<li>所有浏览器 radio / checkbox 单复选框无内置 padding</li>\n<li>button 按钮元素的 padding 最难控制</li>\n</ul>\n<h3 id=\"button按钮\"><a href=\"#button按钮\" class=\"headerlink\" title=\"button按钮\"></a>button按钮</h3><h4 id=\"Chrome-浏览器\"><a href=\"#Chrome-浏览器\" class=\"headerlink\" title=\"Chrome 浏览器\"></a>Chrome 浏览器</h4><p>可以完美设置 padding</p>\n<h4 id=\"FireFox-浏览器\"><a href=\"#FireFox-浏览器\" class=\"headerlink\" title=\"FireFox 浏览器\"></a>FireFox 浏览器</h4><p>设置 padding: 0 左右依然有 padding，只能通过：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">::-moz-focus-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE-浏览器\"><a href=\"#IE-浏览器\" class=\"headerlink\" title=\"IE 浏览器\"></a>IE 浏览器</h4><p>IE7 文字越多，左右 padding 逐渐变大，解决方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: visible;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-padding-与高度计算的不兼容\"><a href=\"#4-padding-与高度计算的不兼容\" class=\"headerlink\" title=\"4.padding 与高度计算的不兼容\"></a>4.padding 与高度计算的不兼容</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>IE7: 45px</li>\n<li>IE8+: 40px</li>\n<li>FireFox: 42px</li>\n<li>Chrome: 40px</li>\n</ul>\n<p>button 按钮会有以上的各种 bug，所以建议是<strong>通过 label 按钮模拟按钮</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"btn\"</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-padding-与图形绘制\"><a href=\"#5-padding-与图形绘制\" class=\"headerlink\" title=\"5. padding 与图形绘制\"></a>5. padding 与图形绘制</h2><h3 id=\"三道杠\"><a href=\"#三道杠\" class=\"headerlink\" title=\"三道杠\"></a>三道杠</h3><p>第一道杠用 border-top，第二道杠用 background-color，第三道杠用 border-bottom，中间空白用padding：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_72.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"白眼效果\"><a href=\"#白眼效果\" class=\"headerlink\" title=\"白眼效果\"></a>白眼效果</h3><p>中间大的圆用 background-color，最外面的环用 border，中间空白用 padding</p>\n<div align=\"center\"><img src=\"/images/hexo_post_52.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"6-padding-与布局\"><a href=\"#6-padding-与布局\" class=\"headerlink\" title=\"6. padding 与布局\"></a>6. padding 与布局</h2><h3 id=\"使用百分比单位构建固定比例布局结构\"><a href=\"#使用百分比单位构建固定比例布局结构\" class=\"headerlink\" title=\"使用百分比单位构建固定比例布局结构\"></a>使用百分比单位构建固定比例布局结构</h3><p>移动端 1:1 头图布局</p>\n<div align=\"center\"><img src=\"/images/hexo_post_75.png\" alt=\"\" width=\"200\"></div>\n\n<h3 id=\"配合-margin-等高布局\"><a href=\"#配合-margin-等高布局\" class=\"headerlink\" title=\"配合 margin 等高布局\"></a>配合 margin 等高布局</h3><div align=\"center\"><img src=\"/images/hexo_post_71.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"两栏自适应布局\"><a href=\"#两栏自适应布局\" class=\"headerlink\" title=\"两栏自适应布局\"></a>两栏自适应布局</h3><h4 id=\"padding-在容器上\"><a href=\"#padding-在容器上\" class=\"headerlink\" title=\"padding 在容器上\"></a>padding 在容器上</h4><div align=\"center\"><img src=\"/images/hexo_post_125.png\" alt=\"\" width=\"500\"></div>\n\n<h4 id=\"padding-在子元素上\"><a href=\"#padding-在子元素上\" class=\"headerlink\" title=\"padding 在子元素上\"></a>padding 在子元素上</h4><div align=\"center\"><img src=\"/images/hexo_post_126.png\" alt=\"\" width=\"500\"></div>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之overflow","slug":"CSS深入理解之overflow","date":"2017-04-21T13:29:13.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之overflow.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_124.png","content":"<h2 id=\"1-overflow-起作用的前提\"><a href=\"#1-overflow-起作用的前提\" class=\"headerlink\" title=\"1. overflow 起作用的前提\"></a>1. overflow 起作用的前提</h2><ol>\n<li>非 display:inline水 平</li>\n<li>对应方位的尺寸限制 .width / height / max-width / max-height / absolute 拉伸</li>\n<li>对于单元格 td 等，还需要 table 为 table-layout:fixed 状态才行</li>\n</ol>\n<p><strong>Tips</strong>: 如果 overflow-x，overflow-y 相同，则等同于 overflow；如果不同，其中一个为 visible，另外一个为 auto / hidden / scroll，则 visible 会重置为 auto</p>\n<h2 id=\"2-JS-与滚动高度\"><a href=\"#2-JS-与滚动高度\" class=\"headerlink\" title=\"2. JS 与滚动高度\"></a>2. JS 与滚动高度</h2><p>无论什么浏览器，默认滚动条均来自 <code>&lt;html&gt;</code>，而不是 <code>&lt;body&gt;</code> 标签.所以，如果想要去除页面默认滚动条，只需要 <strong>html{ overflow: hidden }</strong>，而没必要把 <code>&lt;body&gt;</code> 也拉下水。</p>\n<h3 id=\"关于scrollTop\"><a href=\"#关于scrollTop\" class=\"headerlink\" title=\"关于scrollTop\"></a>关于scrollTop</h3><p>Chrome 浏览器: document.body.scrollTop<br>其他浏览器: document.documentElement.scrollTop</p>\n<p>目前，两者不会同时存在，建议使用: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> st = <span class=\"built_in\">document</span>.body.scrollTop || <span class=\"built_in\">document</span>.documentElement.scrollTop</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-水平居中跳动问题的修复\"><a href=\"#3-水平居中跳动问题的修复\" class=\"headerlink\" title=\"3. 水平居中跳动问题的修复\"></a>3. 水平居中跳动问题的修复</h2><p>由于滚动条会使网页可用内容宽度变小，所以水平居中的页面出现滚动条时会有跳动的问题，解决方案： </p>\n<ol>\n<li>html{ overflow-y: scroll } // 滚动栏一直存在</li>\n<li>container{ padding-left: calc(100vw - 100%) } // <strong>100vw-浏览器宽度;100%-可用内容宽度</strong></li>\n</ol>\n<h2 id=\"4-iOS-原生滚动回调效果\"><a href=\"#4-iOS-原生滚动回调效果\" class=\"headerlink\" title=\"4. iOS 原生滚动回调效果:\"></a>4. iOS 原生滚动回调效果:</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-overflow-scrolling</span><span class=\"selector-pseudo\">:touch</span>;</span><br></pre></td></tr></table></figure>\n<p>会使滚动出现缓冲效果</p>\n<h2 id=\"5-overflow-与块状格式上下文\"><a href=\"#5-overflow-与块状格式上下文\" class=\"headerlink\" title=\"5. overflow 与块状格式上下文\"></a>5. overflow 与块状格式上下文</h2><h3 id=\"两栏自适应布局\"><a href=\"#两栏自适应布局\" class=\"headerlink\" title=\"两栏自适应布局\"></a>两栏自适应布局</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cell</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  width: 2000px; // IE8+ BFC特性</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline-block</span>;</span><br><span class=\"line\">  width: auto; // IE7- 伪BFC特性</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只适用于 block 属性的元素，之间的空隙推荐使用浮动元素的 margin 来实现</p>\n<h3 id=\"父元素设置-overflow-scroll-overflow-auto-overflow-hidden，可以解决父元素因内部浮动塌陷问题。\"><a href=\"#父元素设置-overflow-scroll-overflow-auto-overflow-hidden，可以解决父元素因内部浮动塌陷问题。\" class=\"headerlink\" title=\"父元素设置 overflow: scroll; overflow: auto; overflow:hidden，可以解决父元素因内部浮动塌陷问题。\"></a>父元素设置 overflow: scroll; overflow: auto; overflow:hidden，可以解决父元素因内部浮动塌陷问题。</h3><p>更多请参见：<a href=\"http://harttle.com/2016/05/11/block-formatting-context.html\" target=\"_blank\" rel=\"noopener\">overflow 与布局上下文（BFC）</a></p>\n<h2 id=\"6-overflow-与-absolute-绝对定位\"><a href=\"#6-overflow-与-absolute-绝对定位\" class=\"headerlink\" title=\"6. overflow 与 absolute 绝对定位\"></a>6. overflow 与 absolute 绝对定位</h2><p>overflow: hidden 在子元素绝对定位失效，可以理解成，父元素与子元素所在的层级不一样了，子元素完全脱离文档流了，因而无法被剪裁。而给父元素加上除 static 以外的定位属性（使之成为包含块），只不过是提高了父元素的层级，从而约束绝对定位的表现。使之可以被溢出隐藏</p>\n<h3 id=\"如何避免-overflow-失效\"><a href=\"#如何避免-overflow-失效\" class=\"headerlink\" title=\"如何避免 overflow 失效?\"></a>如何避免 overflow 失效?</h3><ol>\n<li>overflow 元素自身为包含块;</li>\n<li>overflow 元素的子元素为包含块;</li>\n<li>任意合法 transform 声明当作包含块;</li>\n</ol>\n<h4 id=\"overflow-元素自身-transform\"><a href=\"#overflow-元素自身-transform\" class=\"headerlink\" title=\"overflow 元素自身 transform:\"></a>overflow 元素自身 transform:</h4><ul>\n<li>IE9+/Firefox √</li>\n<li>Chrome/Safari(win)/Opera ×</li>\n</ul>\n<h4 id=\"overflow-子元素-transform\"><a href=\"#overflow-子元素-transform\" class=\"headerlink\" title=\"overflow 子元素 transform\"></a>overflow 子元素 transform</h4><ul>\n<li>IE9+/Firefox √</li>\n<li>Chrome/Safari(win)/Opera √</li>\n</ul>\n<p>动态渲染异常: Chrome 包含块重定位 / Opera 同，但点击重绘自修正 / Safari 非定位 overflow 元素左上角</p>\n<h3 id=\"overflow-失效妙用\"><a href=\"#overflow-失效妙用\" class=\"headerlink\" title=\"overflow 失效妙用\"></a>overflow 失效妙用</h3><p>右侧图片会紧挨左侧内容，并实现自适应跟随，<code>&amp;nbsp</code> 可以辅助将图片设置在右方；将 <code>&amp;nbsp</code> 的高度设置为 0 以及 overflow: hidden 可以让 <code>&amp;nbsp</code> 不影响布局，但图片是绝对定位，不会受 overflow: hidden 影响：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_124.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"7-依赖-overflow-的样式表现\"><a href=\"#7-依赖-overflow-的样式表现\" class=\"headerlink\" title=\"7. 依赖 overflow 的样式表现\"></a>7. 依赖 overflow 的样式表现</h2><h3 id=\"resize\"><a href=\"#resize\" class=\"headerlink\" title=\"resize\"></a>resize</h3><p>可以拉伸元素尺寸，但是，此声明要想起作用，元素的 overflow 属性值不能是 visible</p>\n<h3 id=\"text-overflow-ellipsis\"><a href=\"#text-overflow-ellipsis\" class=\"headerlink\" title=\"text-overflow:ellipsis\"></a>text-overflow:ellipsis</h3><p>文本溢出时用 … 代替，经常与 white-space: nowrap 一起使用，但是，<strong>不设置 overflow: hidden 属性，无法实现效果</strong></p>\n<h2 id=\"8-overflow-与锚点技术\"><a href=\"#8-overflow-与锚点技术\" class=\"headerlink\" title=\"8. overflow 与锚点技术\"></a>8. overflow 与锚点技术</h2><h3 id=\"锚点定位\"><a href=\"#锚点定位\" class=\"headerlink\" title=\"锚点定位:\"></a>锚点定位:</h3><p>寻找妹子5: <code>&lt;a href=&quot;#mm5&quot;&gt;</code></p>\n<h3 id=\"锚点定位实现的前提\"><a href=\"#锚点定位实现的前提\" class=\"headerlink\" title=\"锚点定位实现的前提:\"></a>锚点定位实现的前提:</h3><ul>\n<li>容器可滚动;</li>\n<li>锚点元素在容器内;</li>\n</ul>\n<h3 id=\"锚点定位的本质\"><a href=\"#锚点定位的本质\" class=\"headerlink\" title=\"锚点定位的本质\"></a>锚点定位的本质</h3><ol>\n<li>触发锚点定位;</li>\n<li>锚点元素通过 scrollTop 值改变向上偏移定位;</li>\n<li>锚元素的上边缘和可滚动容器上边缘对齐</li>\n</ol>\n<h3 id=\"锚点定位的触发\"><a href=\"#锚点定位的触发\" class=\"headerlink\" title=\"锚点定位的触发\"></a>锚点定位的触发</h3><ul>\n<li>url 地址中的锚链与锚点元素;</li>\n<li>可 focus 的锚点元素处于 focus 态</li>\n</ul>\n<h3 id=\"锚点定位的作用\"><a href=\"#锚点定位的作用\" class=\"headerlink\" title=\"锚点定位的作用\"></a>锚点定位的作用</h3><ul>\n<li>快速定位</li>\n<li>选项卡技术(有严重的不足)</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_68.png\" alt=\"\" width=\"400\"></div>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之relative","slug":"CSS深入理解之relative","date":"2017-04-21T07:33:18.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之relative.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"1-relative-和-absolute-的相煎关系\"><a href=\"#1-relative-和-absolute-的相煎关系\" class=\"headerlink\" title=\"1. relative 和 absolute 的相煎关系\"></a>1. relative 和 absolute 的相煎关系</h2><ol>\n<li>限制 left / top / right / bottom 定位；</li>\n<li>限制 z-index 层级：relative 中的 absolute 层级不起作用，只看 relative 层级；</li>\n<li>限制在 overflow 下的嚣张气焰：消除 absolute 不受 overflow 限制的能力</li>\n</ol>\n<h2 id=\"2-relative-和定位\"><a href=\"#2-relative-和定位\" class=\"headerlink\" title=\"2. relative 和定位\"></a>2. relative 和定位</h2><ol>\n<li>相对自身：top: 100px; left: 100px 为相对于自身原位置移动</li>\n<li>无侵入：不会影响到其他元素，可应用于自定义拖拽</li>\n<li>同时设置 top / bottom / left / right 的行为表现：绝对定位是拉伸，相对定位是斗争–top &gt; bottom，left &gt; right</li>\n</ol>\n<h2 id=\"3-relative-与-z-index\"><a href=\"#3-relative-与-z-index\" class=\"headerlink\" title=\"3. relative 与 z-index\"></a>3. relative 与 z-index</h2><ol>\n<li>提高层叠上下文</li>\n<li>新建层叠上下文与层级</li>\n</ol>\n<p>z-index：auto 是不会产生层叠上下文的</p>\n<h2 id=\"4-relative-的最小化影响原则\"><a href=\"#4-relative-的最小化影响原则\" class=\"headerlink\" title=\"4. relative 的最小化影响原则\"></a>4. relative 的最小化影响原则</h2><h3 id=\"尽量避免使用relative\"><a href=\"#尽量避免使用relative\" class=\"headerlink\" title=\"尽量避免使用relative\"></a>尽量避免使用relative</h3><p>absolute 定位不依赖使用 relative，不要为了使用 absolute 而设置 relative</p>\n<h3 id=\"最小化原则\"><a href=\"#最小化原则\" class=\"headerlink\" title=\"最小化原则\"></a>最小化原则</h3><p>如果必须要使用 relative，就把 absolute 定位的元素放进一个空 div 里，使 relative 的 div 只有定位为 absolute 的子元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:relative\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"pig_head.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;top:0;right:0;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之vertical-align","slug":"CSS深入理解之vertical-align","date":"2017-04-21T08:40:08.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之vertical-align.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_70.png","content":"<h2 id=\"1-vertical-align-支持的属性值\"><a href=\"#1-vertical-align-支持的属性值\" class=\"headerlink\" title=\"1. vertical-align 支持的属性值\"></a>1. vertical-align 支持的属性值</h2><ol>\n<li>线类：<strong>baseline</strong>，top，middle，bottom</li>\n<li>文本类：text-top，text-bottom</li>\n<li>上标下标类：sub，super</li>\n<li>数值百分比类：20px，2em，20%，…</li>\n</ol>\n<p>其中，默认为 baseline，百分之值是相对于 line-height 计算的</p>\n<h2 id=\"2-vertical-align-起作用的前提\"><a href=\"#2-vertical-align-起作用的前提\" class=\"headerlink\" title=\"2. vertical-align 起作用的前提\"></a>2. vertical-align 起作用的前提</h2><p>应用于 inline 水平和 table-cell 元素（图片，按钮，文字，单元格）</p>\n<h3 id=\"inline-水平：\"><a href=\"#inline-水平：\" class=\"headerlink\" title=\"inline 水平：\"></a>inline 水平：</h3><ul>\n<li>inline：<code>&lt;img&gt;</code>，<code>&lt;span&gt;</code>，<code>&lt;strong&gt;</code>，<code>&lt;em&gt;</code>，未知元素，…</li>\n<li>inline-block：<code>&lt;input&gt;</code>(IE8+)，<code>&lt;button&gt;</code>(IE8+)，…</li>\n</ul>\n<h3 id=\"table-cell-元素\"><a href=\"#table-cell-元素\" class=\"headerlink\" title=\"table-cell 元素\"></a>table-cell 元素</h3><ul>\n<li>table-cell：<code>&lt;td&gt;</code></li>\n</ul>\n<h2 id=\"3-个数不定文字与图片垂直对齐\"><a href=\"#3-个数不定文字与图片垂直对齐\" class=\"headerlink\" title=\"3. 个数不定文字与图片垂直对齐\"></a>3. 个数不定文字与图片垂直对齐</h2><p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"小公主.jpg\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test-list</span>&gt;<span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">210px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test-list</span>&gt;<span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-vertical-align-与-line-height\"><a href=\"#4-vertical-align-与-line-height\" class=\"headerlink\" title=\"4. vertical-align 与 line-height\"></a>4. vertical-align 与 line-height</h2><h3 id=\"任何内联元素都会受到-vertical-align-与-line-height-的影响\"><a href=\"#任何内联元素都会受到-vertical-align-与-line-height-的影响\" class=\"headerlink\" title=\"任何内联元素都会受到 vertical-align 与 line-height 的影响\"></a>任何内联元素都会受到 vertical-align 与 line-height 的影响</h3><div align=\"center\"><img src=\"/images/hexo_post_70.png\" alt=\"\" width=\"500\"></div>\n\n<p>图片没有居中显示，因为<strong>受到了 vertical-align 与 line-height 的影响</strong>，此时的默认属性为vertical-align: baseline;line-height: 1.5;font-size: 24px</p>\n<h3 id=\"如何消除这种影响\"><a href=\"#如何消除这种影响\" class=\"headerlink\" title=\"如何消除这种影响\"></a>如何消除这种影响</h3><ol>\n<li>消灭 vertical-align：display: block; margin: auto</li>\n<li>改变 vertical-align：vertical-align: top / middle / bottom</li>\n<li>改变 line-height：line-height: 0; font-size: 0;</li>\n</ol>\n<h3 id=\"inline-block-的基线\"><a href=\"#inline-block-的基线\" class=\"headerlink\" title=\"inline-block 的基线\"></a>inline-block 的基线</h3><p>inline-block 的基线是正常流中最后一个 line box 的基线，除非，这个 line box 里面既没有 line boxes 或者本身 ‘overflow’ 属性的计算值不是 ‘visible’，这种情况下基线是 margin 底边缘</p>\n<div align=\"center\"><img src=\"/images/hexo_post_108.png\" alt=\"\" width=\"400\"></div>\n\n<p>左边的元素基线为边框下边缘，右边的元素基线为 X 文字下边缘</p>\n<h2 id=\"5-vertical-align-线性类属性值表现\"><a href=\"#5-vertical-align-线性类属性值表现\" class=\"headerlink\" title=\"5. vertical-align 线性类属性值表现\"></a>5. vertical-align 线性类属性值表现</h2><h3 id=\"vertical-align-bottom\"><a href=\"#vertical-align-bottom\" class=\"headerlink\" title=\"vertical-align: bottom\"></a>vertical-align: bottom</h3><ol>\n<li>inline / inline-block元素: 元素底部和整行的底部对齐</li>\n<li>table-cell 元素: 单元格底 padding 边缘和表格行的底部对齐</li>\n</ol>\n<h3 id=\"vertical-align-top\"><a href=\"#vertical-align-top\" class=\"headerlink\" title=\"vertical-align: top\"></a>vertical-align: top</h3><ol>\n<li>inline / inline-block 元素: 元素顶部和整行的顶部对齐</li>\n<li>table-cell 元素: 单元格顶 padding 边缘和表格行的顶部对齐</li>\n</ol>\n<h3 id=\"vertical-align-middle\"><a href=\"#vertical-align-middle\" class=\"headerlink\" title=\"vertical-align: middle\"></a>vertical-align: middle</h3><ul>\n<li>inline / inline-block 元素: 元素垂直中心点和父元素基线上 1/2x - height 处对齐</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_63.png\" alt=\"\" width=\"500\"></div>\n\n<p>文字具有下沉的特性，而父容器的高度是由文字撑开的，所以父容器的中心点与元素垂直中心点是不重合的，可以设置 <strong>font-size: 0</strong> 解决这个问题</p>\n<ul>\n<li>table-cell 元素: 单元格填充盒子相对于外面的表格行居中对齐</li>\n</ul>\n<h2 id=\"6-vertical-align-文本类属性值\"><a href=\"#6-vertical-align-文本类属性值\" class=\"headerlink\" title=\"6. vertical-align 文本类属性值\"></a>6. vertical-align 文本类属性值</h2><h3 id=\"vertical-align-text-top\"><a href=\"#vertical-align-text-top\" class=\"headerlink\" title=\"vertical-align: text-top\"></a>vertical-align: text-top</h3><p>盒子的顶部和父级 content area 的顶部对齐</p>\n<h3 id=\"vertical-align-text-bottom\"><a href=\"#vertical-align-text-bottom\" class=\"headerlink\" title=\"vertical-align: text-bottom\"></a>vertical-align: text-bottom</h3><p>盒子的底部和父级 content area 的底部对齐</p>\n<div align=\"center\"><img src=\"/images/hexo_post_224.png\" alt=\"\" width=\"400\"></div>\n\n<ul>\n<li>vertical-align 垂直对齐的位置与前后的元素都没有关系;</li>\n<li>元素 vertical-align 垂直对齐的位置与行高 line-height 没有关系，只与字体大小 font-size 有关</li>\n</ul>\n<h2 id=\"7-vertical-align-前后不一致的行为表现\"><a href=\"#7-vertical-align-前后不一致的行为表现\" class=\"headerlink\" title=\"7. vertical-align 前后不一致的行为表现\"></a>7. vertical-align 前后不一致的行为表现</h2><p>关注当前元素和父级，因为前后并没有直接影响</p>\n<div align=\"center\"><img src=\"/images/hexo_post_62.png\" alt=\"\" width=\"400\"></div>\n\n<p>在 img 后面加一个内联元素，并且设置 vertical-align: middle 就可以实现图片的垂直居中</p>\n<h2 id=\"8-vertical-align-的实际应用\"><a href=\"#8-vertical-align-的实际应用\" class=\"headerlink\" title=\"8. vertical-align 的实际应用\"></a>8. vertical-align 的实际应用</h2><h3 id=\"小图片和文字对齐\"><a href=\"#小图片和文字对齐\" class=\"headerlink\" title=\"小图片和文字对齐\"></a>小图片和文字对齐</h3><p>vertical-align 设置为负值</p>\n<div align=\"center\"><img src=\"/images/hexo_post_79.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"不定尺寸图片和多行文字的垂直居中\"><a href=\"#不定尺寸图片和多行文字的垂直居中\" class=\"headerlink\" title=\"不定尺寸图片和多行文字的垂直居中\"></a>不定尺寸图片和多行文字的垂直居中</h3><p>三个步骤：</p>\n<ol>\n<li>主体元素 inline-block化;</li>\n<li>0 宽度 100% 高度辅助元素;</li>\n<li>vertical-align: middle;</li>\n</ol>\n<p>如果已经是 inline-block（img）水平元素，就不需要额外设置 display 属性</p>\n<div align=\"center\"><img src=\"/images/hexo_post_54.png\" alt=\"\" width=\"600\"></div>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解系列","slug":"CSS深入理解系列","date":"2017-04-21T13:52:56.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解系列.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>此系列的文章是我对张鑫旭的讲解的总结，张鑫旭作为很早入行前端的代表人物，其对 html 以及 css 的理解很深刻，所以他的系列文章“<a href=\"http://www.imooc.com/search/course?words=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3css\" target=\"_blank\" rel=\"noopener\">深入理解 CSS</a>”是一个不错的前端基础教材，虽然我将其讲解进行了总结，但是还是希望你有时间能够看一下他的视频，风趣幽默又不失教学性，一定会有所收获。</p>\n<ul>\n<li><a href=\"/20170421/line-height-of-css.html\">CSS深入理解之line-height</a></li>\n<li><a href=\"/20170420/margin-of-css.html\">CSS深入理解之margin</a></li>\n<li><a href=\"/20170420/padding-of-css.html\">CSS深入理解之padding</a></li>\n<li><a href=\"/20170420/z-index-of-css.html\">CSS深入理解之z-index</a></li>\n<li><a href=\"/20170421/relative-of-css.html\">CSS深入理解之relative</a></li>\n<li><a href=\"/20170421/vertical-align-of-css.html\">CSS深入理解之vertical-align</a></li>\n<li><a href=\"/20170421/absolute-of-css.html\">CSS深入理解之absolute</a></li>\n<li><a href=\"/20170421/overflow-of-css.html\">CSS深入理解之overflow</a></li>\n<li><a href=\"/20170421/float-of-css.html\">CSS深入理解之float</a></li>\n<li><a href=\"/20170423/border-of-css.html\">CSS深入理解之border</a></li>\n</ul>\n","raw":null,"categories":[{"name":"series","path":"api/categories/series.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之z-index","slug":"CSS深入理解之z-index","date":"2017-04-20T15:38:25.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS深入理解之z-index.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_85.png","content":"<h2 id=\"1-z-index-基础\"><a href=\"#1-z-index-基础\" class=\"headerlink\" title=\"1. z-index 基础\"></a>1. z-index 基础</h2><h3 id=\"z-index-含义\"><a href=\"#z-index-含义\" class=\"headerlink\" title=\"z-index 含义\"></a>z-index 含义</h3><p>z-index 属性指定了元素及其子元素的 [z顺序]，而 [z顺序] 可以决定当元素发生覆盖的时候，哪个元素在上面.通常一个较大 z-index 值的元素会覆盖较低的那一个</p>\n<h3 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a>属性值</h3><ul>\n<li><code>auto</code> –&gt; 默认值</li>\n<li><code>&lt;integer&gt;</code> –&gt; 整数值</li>\n<li><code>inherit</code> –&gt; 继承</li>\n</ul>\n<h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><ul>\n<li>支持负值</li>\n<li>支持 CSS3 animation 动画</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> zIndex &#123;</span><br><span class=\"line\">  0%&#123; <span class=\"attribute\">z-index</span>:-<span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">  100%&#123; <span class=\"attribute\">z-index</span>:<span class=\"number\">51</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 CSS2.1 时代，需要和定位元素配合使用</li>\n</ul>\n<p>如果不考虑 CSS3，只有定位元素(position:relative / absolute / fixed / sticky，没有 static)的 z-index 才有作用！在 CSS3 中有例外……</p>\n<h2 id=\"2-z-index-与定位元素\"><a href=\"#2-z-index-与定位元素\" class=\"headerlink\" title=\"2. z-index 与定位元素\"></a>2. z-index 与定位元素</h2><h3 id=\"如果定位元素-z-index-没有发生嵌套\"><a href=\"#如果定位元素-z-index-没有发生嵌套\" class=\"headerlink\" title=\"如果定位元素 z-index 没有发生嵌套\"></a>如果定位元素 z-index 没有发生嵌套</h3><ul>\n<li>后来居上</li>\n<li>哪个大，哪个在上面</li>\n</ul>\n<h3 id=\"如果定位元素发生嵌套\"><a href=\"#如果定位元素发生嵌套\" class=\"headerlink\" title=\"如果定位元素发生嵌套\"></a>如果定位元素发生嵌套</h3><p>祖先优先原则（前提：z-index 为数值，不是 auto）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_85.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"3-层叠上下文\"><a href=\"#3-层叠上下文\" class=\"headerlink\" title=\"3. 层叠上下文\"></a>3. 层叠上下文</h2><p>层叠上下文(stacking context)是 HTML 元素中的一个三维概念，表示元素在 z 轴上有了”可以高人一等”的能力，含义：</p>\n<ul>\n<li>皇帝(你)</li>\n<li>当官(层叠上下文元素)</li>\n<li>家族(嵌套)</li>\n</ul>\n<p>层叠上下文是表示普通老百姓 HTML 元素当官了，离皇帝更近了</p>\n<h3 id=\"产生层叠上下文：\"><a href=\"#产生层叠上下文：\" class=\"headerlink\" title=\"产生层叠上下文：\"></a>产生层叠上下文：</h3><ol>\n<li>页面根元素天生具有层叠上下文，称之为”根层叠上下文” –&gt; 皇亲国戚</li>\n<li>z-index 值为数值的定位元素也具有层叠上下文 –&gt; 科考入选</li>\n<li>其他属性 –&gt; 其他当官途径</li>\n</ol>\n<h3 id=\"层叠上下文特性\"><a href=\"#层叠上下文特性\" class=\"headerlink\" title=\"层叠上下文特性\"></a>层叠上下文特性</h3><ul>\n<li>层叠上下文可以嵌套，组合成一个分层次的层叠上下文</li>\n</ul>\n<p>一个家里，爸爸可以当官，孩子也是可以同时当官的。这个家族的官就当得比较有层次</p>\n<ul>\n<li>每个层叠上下文和兄弟元素独立: 当进行层叠变化或渲染的时候，只需要考虑后代元素</li>\n</ul>\n<p>自己当官，兄弟不沾光。有什么福利或者变故只会影响自己的孩子们</p>\n<ul>\n<li>每个层叠上下文是自成体系的: 当元素的内容被层叠后，整个元素被认为是在父层的层叠顺序中</li>\n</ul>\n<p>每个当官的都有属于自己的小团体。当子孙或属下发生的排辈摩擦什么的，都是自己宅院的事情，不会影响官员自己和皇帝之间的距离</p>\n<h2 id=\"4-层叠水平\"><a href=\"#4-层叠水平\" class=\"headerlink\" title=\"4. 层叠水平\"></a>4. 层叠水平</h2><p>层叠上下文中的每个元素都有一个层叠水平(stacking level)，决定了同一个层叠上下文中元素在 z 轴上的显示顺序，<strong>遵循”后来居上”和”谁大谁上”的层叠准则</strong> 层<strong>叠水平和 z-index 不是一个东西</strong>。普通元素也有层叠水平，每一个当官的家里儿孙啊，仆人什么的，都有一个论资排辈(即层叠水平)，决定了在一起的时候，谁排在前面，离官员更近。</p>\n<h2 id=\"5-层叠顺序\"><a href=\"#5-层叠顺序\" class=\"headerlink\" title=\"5. 层叠顺序\"></a>5. 层叠顺序</h2><p>元素发生层叠时候有着特定的垂直显示顺序，即内容 &gt; 布局 &gt; 装饰</p>\n<div align=\"center\"><img src=\"/images/hexo_post_3.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"6-z-index-与层叠上下文\"><a href=\"#6-z-index-与层叠上下文\" class=\"headerlink\" title=\"6. z-index 与层叠上下文\"></a>6. z-index 与层叠上下文</h2><ol>\n<li>定位元素默认 z-index: auto，同时可以看成是 z-index: 0;</li>\n<li>z-index 不为 auto 的定位元素会创建层叠上下文;</li>\n<li>z-index 层叠顺序的比较止步于父级层叠上下文;</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_294.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"7-其他-CSS-属性与层叠上下文\"><a href=\"#7-其他-CSS-属性与层叠上下文\" class=\"headerlink\" title=\"7. 其他 CSS 属性与层叠上下文\"></a>7. 其他 CSS 属性与层叠上下文</h2><p>其他参与层叠上下文的属性们</p>\n<ol>\n<li>z-index 值不为 auto 的 flex 项（父元素display：flex | inline-flex）</li>\n<li>元素的 opacity 值不是 1</li>\n<li>元素的 transform 值不是 none</li>\n<li>元素 mix-blend-mode 值不是 normal</li>\n<li>元素的 filter 值不是 none</li>\n<li>元素的 isolation 值是 isolate</li>\n<li>position: fixed 声明</li>\n<li>will-change 指定的属性值为上面任意一个</li>\n<li>元素的 -webkit-overflow-scrolling 设为 touch</li>\n</ol>\n<h2 id=\"8-z-index-与其他-CSS-属性层叠上下文\"><a href=\"#8-z-index-与其他-CSS-属性层叠上下文\" class=\"headerlink\" title=\"8. z-index 与其他 CSS 属性层叠上下文\"></a>8. z-index 与其他 CSS 属性层叠上下文</h2><h3 id=\"不支持-z-index-的层叠上下文元素的层叠顺序均是-z-index-auto-级别\"><a href=\"#不支持-z-index-的层叠上下文元素的层叠顺序均是-z-index-auto-级别\" class=\"headerlink\" title=\"不支持 z-index 的层叠上下文元素的层叠顺序均是 z-index: auto 级别\"></a>不支持 z-index 的层叠上下文元素的层叠顺序均是 z-index: auto 级别</h3><div align=\"center\"><img src=\"/images/hexo_post_57.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"依赖-z-index-值创建层叠上下文的情况\"><a href=\"#依赖-z-index-值创建层叠上下文的情况\" class=\"headerlink\" title=\"依赖 z-index 值创建层叠上下文的情况\"></a>依赖 z-index 值创建层叠上下文的情况</h3><ol>\n<li>position 值为 relative / absolute 或 fixed(部分浏览器)</li>\n<li>display: flex | inline-flex 容器的子 flex 项</li>\n</ol>\n<h2 id=\"9-z-index-相关实践\"><a href=\"#9-z-index-相关实践\" class=\"headerlink\" title=\"9. z-index 相关实践\"></a>9. z-index 相关实践</h2><h3 id=\"最小化影响原则\"><a href=\"#最小化影响原则\" class=\"headerlink\" title=\"最小化影响原则\"></a>最小化影响原则</h3><ul>\n<li>避免使用定位属性；</li>\n<li>定位属性从大容器平级分离为私有小容器</li>\n</ul>\n<h3 id=\"不犯二原则\"><a href=\"#不犯二原则\" class=\"headerlink\" title=\"不犯二原则\"></a>不犯二原则</h3><p>对于非浮层元素(浮层元素为弹框，蒙版之类)，避免设置 z-index 值，z-index 值没有任何道理需要超过 2–不犯二准则；</p>\n<h3 id=\"组件层级计数器\"><a href=\"#组件层级计数器\" class=\"headerlink\" title=\"组件层级计数器\"></a>组件层级计数器</h3><p>通过 js 获得 body 下子元素的最大 z-index 值</p>\n<h3 id=\"可访问性隐藏\"><a href=\"#可访问性隐藏\" class=\"headerlink\" title=\"可访问性隐藏\"></a>可访问性隐藏</h3><p>z-index 负值元素在层叠上下文的背景之上，其他元素之下</p>\n<div align=\"center\"><img src=\"/images/hexo_post_65.png\" alt=\"\" width=\"500\"></div>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"为什么随机字符串“chucknorris”会被识别为红色？","slug":"为什么随机字符串“chucknorris”会被识别为红色？","date":"2017-08-01T10:35:30.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/为什么随机字符串“chucknorris”会被识别为红色？.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_274.png","content":"<p>这个问题来源于 <a href=\"https://stackoverflow.com/questions/8318911/why-does-html-think-chucknorris-is-a-color\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>，就是有位学者无意中发现随机字符串会被 html 识别为特定的一些颜色，于是就在 stackoverflow 发起了讨论，这个问题也引起了我的兴趣，虽然是一个比较偏的知识点，但是了解一下还是没坏处的。</p>\n<h2 id=\"题目解释\"><a href=\"#题目解释\" class=\"headerlink\" title=\"题目解释\"></a>题目解释</h2><p>从下图我们可以看到，“chucknorris” 是一个随机的字符串，但是 body 却被渲染成了红色，是不是很有趣？</p>\n<div align=\"center\"><img src=\"/images/hexo_post_274.png\" alt=\"\" width=\"600\"></div>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>首先你需要知道 css 中的颜色值是十六进制的（比如最通常的白色：”#FFFFFF”，黑色：”#000000”），所以对于随机的字符串来说，其中有可能会包含不属于十六进制字母的那些字母（比如 h、u、k 等等），那么就会有如下的规则对“随机字符串颜色”进行替换（以随机字符串 “chucknorris” 为例）：</p>\n<h3 id=\"首先，用’0’替换所有的非十六进制字母\"><a href=\"#首先，用’0’替换所有的非十六进制字母\" class=\"headerlink\" title=\"首先，用’0’替换所有的非十六进制字母\"></a>首先，用’0’替换所有的非十六进制字母</h3><p>chucknorris -&gt; c00c0000000  </p>\n<h3 id=\"然后将替换后的字符串分为三组（从前往后进行划分，不能平分就在后面加-‘0’，比如上面的-“c00c0000000”-就只有-11-个字母，需要在尾部添加一个-‘0’）\"><a href=\"#然后将替换后的字符串分为三组（从前往后进行划分，不能平分就在后面加-‘0’，比如上面的-“c00c0000000”-就只有-11-个字母，需要在尾部添加一个-‘0’）\" class=\"headerlink\" title=\"然后将替换后的字符串分为三组（从前往后进行划分，不能平分就在后面加 ‘0’，比如上面的 “c00c0000000” 就只有 11 个字母，需要在尾部添加一个 ‘0’）\"></a>然后将替换后的字符串分为三组（从前往后进行划分，不能平分就在后面加 ‘0’，比如上面的 “c00c0000000” 就只有 11 个字母，需要在尾部添加一个 ‘0’）</h3><p>c00c 0000 0000  </p>\n<h3 id=\"最后，对于每一组内的字符串，只取前两位字母作为最终的-“R”、“G”、“B”-的值\"><a href=\"#最后，对于每一组内的字符串，只取前两位字母作为最终的-“R”、“G”、“B”-的值\" class=\"headerlink\" title=\"最后，对于每一组内的字符串，只取前两位字母作为最终的 “R”、“G”、“B” 的值\"></a>最后，对于每一组内的字符串，只取前两位字母作为最终的 “R”、“G”、“B” 的值</h3><p>c00c 0000 0000 -&gt; RGB(c0, 00, 00)</p>\n<p>所以，最终的结果是 #c00000/rgb(192,0,0),就是最开始那张图显示的深红色。</p>\n<h2 id=\"还没完\"><a href=\"#还没完\" class=\"headerlink\" title=\"还没完\"></a>还没完</h2><p>所以这个问题的答案就是一个歇后语：王八的屁股——规定！当然了，对于那种不足六个字母的颜色值来说，就会有额外的处理规则了：#aaa -&gt; #aaaaaa、#aaa3 -&gt; #aaa300、#aaa35 -&gt; #aaa350，有一个“很有想法”的哥们专门为这个转换做了一个网页，可以<a href=\"http://randomstringtocsscolor.com/\" target=\"_blank\" rel=\"noopener\">点击这里</a>试玩一下，输入任意的字符串可以看到背景颜色的变化，同时可以看到最终的颜色值</p>\n<div align=\"center\"><img src=\"/images/hexo_post_275.png\" alt=\"\" width=\"500\"></div>","raw":null,"categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"stackoverflow","path":"api/tags/stackoverflow.json"},{"name":"CSS","path":"api/tags/CSS.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"}]},{"title":"关于CSS Reset那些事","slug":"关于CSS Reset那些事","date":"2017-07-30T12:47:49.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/关于CSS Reset那些事.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"CSS-Reset\"><a href=\"#CSS-Reset\" class=\"headerlink\" title=\"CSS Reset\"></a>CSS Reset</h2><p>css reset，顾名思义，就是<strong>重置样式</strong>。那么为什么我们需要重置样式呢，这一切还要“归功于”前端领域的特点，就是跨平台、跨客户端；众所周知，现在所使用的主流浏览器对于一些标签的默认属性并没有做到统一，所以我们有时候会发现，某个页面在 chrome 浏览器上样式表现很正常，但是到了 firefox 上面却有着其他的样式表现（就更不用提IE了），这就是经常提到的“<strong>兼容性问题</strong>”，而 css reset 就是解决默认样式不兼容问题的办法之一</p>\n<h2 id=\"CSS-Reset发展历程\"><a href=\"#CSS-Reset发展历程\" class=\"headerlink\" title=\"CSS Reset发展历程\"></a>CSS Reset发展历程</h2><h3 id=\"第一份\"><a href=\"#第一份\" class=\"headerlink\" title=\"第一份\"></a>第一份</h3><p>查阅了一些资料，也看了一些大牛的博客，目前比较一致地认为最早的一份 CSS reset 来自<a href=\"http://tantek.com/log/2004/undohtml.css\" target=\"_blank\" rel=\"noopener\">Tantek 的 undohtml.css</a>，时间应该是 2004 年，很简单的代码（注释都比代码多），Tantek 根据自己的需要，对浏览器的默认样式进行了一些重置，同时从这一份 CSS reset 也可以窥探出“重置样式”需要考虑的标签有哪些。</p>\n<h3 id=\"YUI-团队\"><a href=\"#YUI-团队\" class=\"headerlink\" title=\"YUI 团队\"></a>YUI 团队</h3><p>业界领袖 YUI 团队在 Tantek 的基础上将 css reset 变得更加充实，当然代码的核心部分仍然是对样式进行重置，可以直接<a href=\"http://yui.yahooapis.com/3.18.1/build/cssreset-context/cssreset-context-min.css\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，YUI 团队 2014 年给出的 css reset 代码（随着 Yahoo 光荣不再，估计这份 css reset 的版本也会停留在 3.18.1 了吧），从代码中可以看出我们如果想引用这套 css reset，还需要加一个 yui3-cssreset 类，或者修改其源码，将 .yui3-cssreset 全部删掉。YUI 不仅支持 css reset，还配套了 cssfonts.css 和 cssbase.css。<code>cssreset.css</code> 只负责清除默认样式,而 <code>cssfonts.css</code> 和 <code>cssbase.css</code> 则负责将一些元素的默认样式再重设回来</p>\n<h3 id=\"Eric-Meyer\"><a href=\"#Eric-Meyer\" class=\"headerlink\" title=\"Eric Meyer\"></a>Eric Meyer</h3><p>相比 YUI 团队的 css reset 方案，<a href=\"http://meyerweb.com/eric/tools/css/reset/index.html\" target=\"_blank\" rel=\"noopener\">Eric Meyer 的方案</a>就显得有些繁重了，而且这套代码最新版本是 2011 年公开的，考虑到年代久远，就不予评论了。</p>\n<h3 id=\"html5reset\"><a href=\"#html5reset\" class=\"headerlink\" title=\"html5reset\"></a>html5reset</h3><p>相比前面的这些方案，<a href=\"https://github.com/murtaugh/HTML5-Reset\" target=\"_blank\" rel=\"noopener\">这个团队</a>给出的方案就更显臃肿了，而且也不太出名，当然了，css reset 并不是用来全盘照搬的，找到自己需要的才是最聪明的办法</p>\n<h2 id=\"国产-CSS-reset\"><a href=\"#国产-CSS-reset\" class=\"headerlink\" title=\"国产 CSS reset\"></a>国产 CSS reset</h2><p>以上都是国外的大牛或团队给出的 css reset 方案，那么作为互联网行业发展最突飞猛进的中国，就没有人或团队做过 css reset 方面的尝试吗？肯定有啊（要不然我这一部分怎么写？）：</p>\n<h3 id=\"阿里-Kissy-框架\"><a href=\"#阿里-Kissy-框架\" class=\"headerlink\" title=\"阿里 Kissy 框架\"></a>阿里 Kissy 框架</h3><p>阿里在 2009 年就已经给出了自己的 css reset 方案，这应该是国内的第一份 css reset，是玉伯和另外一位前辈完成的，向他们致敬。但是由于距离现在已经有将近十年了，源码的链接已经失效，我将各种版本的 css reset 代码都上传到了我的 github，可以<a href=\"http://merrier.github.io/CSS-Reset/kissy/reset.css\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看国内第一份 css reset。</p>\n<h3 id=\"张鑫旭的方案\"><a href=\"#张鑫旭的方案\" class=\"headerlink\" title=\"张鑫旭的方案\"></a>张鑫旭的方案</h3><p>我不希望你看到这个标题的第一感觉是：<a href=\"http://www.zhangxinxu.com\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>是谁。因为如果你连张鑫旭都不认识，前端界真是白混了！作为一位资深 css 研究学者，张鑫旭对于 css reset 也有自己独到的理解，下面就是他给出的方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1.4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>:arial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">textarea</span>,<span class=\"selector-tag\">select</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>:inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span>,<span class=\"selector-tag\">p</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">ol</span>,<span class=\"selector-tag\">form</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">ol</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>:<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/\\*image with no-border\\*/</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">border</span>:<span class=\"number\">0</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，非常的简短，当然了，对于这份方案，张鑫旭在<a href=\"http://www.zhangxinxu.com/wordpress/2010/07/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99css%E8%BF%9B%E8%A1%8C%E6%9E%B6%E6%9E%84%E7%9A%84/\" target=\"_blank\" rel=\"noopener\">他的文章</a>中也进行了解释</p>\n<h2 id=\"替代品-Normalize-css\"><a href=\"#替代品-Normalize-css\" class=\"headerlink\" title=\"替代品 Normalize.css\"></a>替代品 Normalize.css</h2><p>历史的车轮滚滚向前，时过境迁，中国的前端职位越发的火热，开发者们也变得更为专业，<code>CSS Reset</code> 泛滥使用逐渐淡出的前端的视野，被取而代之就是 <a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"noopener\"><code>Normalize.css</code></a>，关于对 <code>CSS Reset</code> 与 <code>Normalize.css</code> 的区别？可以引用知乎上<a href=\"http://www.zhihu.com/question/20094066\" target=\"_blank\" rel=\"noopener\">张小核桃</a>的一个回答：</p>\n<blockquote>\n<p>CSS Reset 是革命党，CSS Reset 里最激进那一派提倡不管你小子有用没用，通通给我脱了那身衣服，凭什么你 body 出生就穿一圈 margin，凭什么你姓 h 的比别人吃得胖，凭什么你 ul 戴一胳膊珠子。于是 *{margin:0;} 等等运动，把人家全拍扁了。看似是众生平等了，实则是浪费了资源又占不到便宜，有求于人家的时候还得贱贱地给加回去，实在需要人家的默认样式了怎么办？人家锅都扔炉子里烧了，自己看着办吧。</p>\n</blockquote>\n<p>所以，normalize.css 的产生是有一定历史原因的（css reset 的滥用），normalize.css 是<a href=\"https://twitter.com/necolas\" target=\"_blank\" rel=\"noopener\">@necolas</a>和<a href=\"https://twitter.com/jon_neal\" target=\"_blank\" rel=\"noopener\">@jon_neal</a> 两位大牛花了几百个小时来研究不同浏览器的默认样式的差异而得出的结晶，感谢前辈们的贡献。 关于 normalize.css 的更多内容，就不在本篇文章里过多赘述了，因为它不是主角啊！有兴趣的童鞋可以点击下面的链接查看：</p>\n<ul>\n<li><a href=\"https://github.com/necolas/normalize.css/\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li><a href=\"http://nicolasgallagher.com/about-normalize-css/\" target=\"_blank\" rel=\"noopener\">官方介绍</a></li>\n<li><a href=\"http://jerryzou.com/posts/aboutNormalizeCss/\" target=\"_blank\" rel=\"noopener\">官方介绍（中文）</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后引用张鑫旭文章中的一段话作为结束：</p>\n<blockquote>\n<p>武侠的最高境界是什么？ – 无招胜有招 设计的最高境界是什么？ – 减少设计 所以，最少的 CSS 代码，最少的渲染，最少的重置就是最好的CSS样式代码，这反应了您的 CSS 层次。说句不好听的话，CSS reset 是用来让那些 CSS 菜鸟，对 CSS 不太了解的人准备的。</p>\n</blockquote>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000003021766\" target=\"_blank\" rel=\"noopener\">关于CSS Reset 那些事（一）之 历史演变与Normalize.css</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2010/07/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99css%E8%BF%9B%E8%A1%8C%E6%9E%B6%E6%9E%84%E7%9A%84/\" target=\"_blank\" rel=\"noopener\">我是如何对网站CSS进行架构的</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2010/04/css-reset%E7%9A%84%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86-%E9%81%BF%E5%85%8D%E6%A0%B7%E5%BC%8F%E9%87%8D%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">CSS reset的重新审视 – 避免样式重置</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2010/08/html5-css-reset/\" target=\"_blank\" rel=\"noopener\">HTML5 css reset</a></li>\n<li><a href=\"http://www.jianshu.com/p/69ba47248774\" target=\"_blank\" rel=\"noopener\">CSS:认识 css reset</a></li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"性能优化","path":"api/tags/性能优化.json"},{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"前端面试系列","slug":"前端面试系列","date":"2017-03-17T09:19:17.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/前端面试系列.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先声明一下，这个系列的文章基本上都是摘抄自其他途径的，包括一些大牛小牛的博客、微信公众号或其他人的文章里，而且我会争取持续更新，最后形成一篇对前端基础薄弱的同学也友好的讲解文章，如果该系列中的任何一个知识点能够帮到你（我相信肯定会帮到我的，因为我也要开始找实习了。。），就达到我的目的了；而且该系列文章只会涉及到前端的技术点，像算法和智力题那种是不会涉及的，至于智力题的话，根据我的经验，只能 practice makes perfect (<em>^__^</em>) </p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"/20170318/new-features-of-html5.html\">HTML5新特性</a></li>\n<li><a href=\"/20170318/new-features-of-css3.html\">CSS3新特性</a></li>\n<li><a href=\"/20170319/new-features-of-http2.html\">HTTP2新特性</a></li>\n<li><a href=\"/20170403/css-selector.html\">CSS选择器</a></li>\n<li><a href=\"/20170403/css-box-model.html\">CSS盒子模型</a></li>\n<li><a href=\"/20170404/status-code-of-http-request.html\">HTTP请求的状态码</a></li>\n<li><a href=\"/20170404/session-and-cookie.html\">session&amp;cookie</a></li>\n<li><a href=\"/20170405/tcp-three-handshakes-and-four-breakups.html\">TCP的三次握手与四次分手</a></li>\n<li><a href=\"/20170405/js-implements-inheritance.html\">JS实现继承</a></li>\n<li><a href=\"/20170405/closure-in-js.html\">JS中的闭包</a></li>\n<li><a href=\"/20170412/the-difference-between-window.onload-and-document.read.html\">window.onload和document.ready的区别</a></li>\n<li><a href=\"/20170416/front-end-performance-optimization.html\">前端性能优化</a></li>\n</ul>\n<h2 id=\"其他面试题整理\"><a href=\"#其他面试题整理\" class=\"headerlink\" title=\"其他面试题整理\"></a>其他面试题整理</h2><ul>\n<li><a href=\"https://juejin.im/post/5cc59e41e51d456e62545b66\" target=\"_blank\" rel=\"noopener\">2019 CSS经典面试题（史上最全，持续更新中…）</a></li>\n<li><a href=\"https://juejin.im/post/5cd0bdfc6fb9a031f10ca08c\" target=\"_blank\" rel=\"noopener\">前端工程师面试必备（持续更新中）</a></li>\n<li><a href=\"https://github.com/Yangfan2016/learn-translate/blob/master/3-30secondsofinterviews_zh.md\" target=\"_blank\" rel=\"noopener\">【译】面试 30 秒</a></li>\n<li><a href=\"https://github.com/airuikun/Weekly-FE-Interview\" target=\"_blank\" rel=\"noopener\">每周十道前端大厂面试题</a></li>\n<li><a href=\"https://juejin.im/post/5c64d15d6fb9a049d37f9c20\" target=\"_blank\" rel=\"noopener\">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)</a></li>\n<li><a href=\"https://juejin.im/post/5c92f499f265da612647b754\" target=\"_blank\" rel=\"noopener\">(中篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂</a></li>\n<li><a href=\"https://juejin.im/post/5cc26dfef265da037b611738\" target=\"_blank\" rel=\"noopener\">(下篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000013325778\" target=\"_blank\" rel=\"noopener\">50道CSS基础面试题（附答案）</a></li>\n<li><a href=\"https://yuchengkai.cn/docs/\" target=\"_blank\" rel=\"noopener\">InterviewMap</a></li>\n<li><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"noopener\">前端工程师面试题汇总</a></li>\n<li><a href=\"http://blog.poetries.top/2017/03/12/front-end-interview-summary/\" target=\"_blank\" rel=\"noopener\">前端面试题整理</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008785931\" target=\"_blank\" rel=\"noopener\">20个必会的JavaScript面试题</a></li>\n<li><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"noopener\">Front End Developer Questions</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2EcqlN_lE2AbBmaBagrD0w\" target=\"_blank\" rel=\"noopener\">魔法哥 2013 前端笔试题曝光（附完整解答）</a></li>\n<li><a href=\"https://www.reddit.com/r/cscareerquestions/comments/20ahfq/heres_a_pretty_big_list_of_programming_interview/\" target=\"_blank\" rel=\"noopener\">关于4种数据结构的算法面试问题列表</a></li>\n<li><a href=\"https://www.nowcoder.com/discuss/35805\" target=\"_blank\" rel=\"noopener\">阿里巴巴2018秋招面经之前端岗(1~5面)</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PrHwzQBrQCEx_w_8HcSNgg\" target=\"_blank\" rel=\"noopener\">阿里-蚂蚁金服三轮面试总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/HzS7bPeLTbBwlJacNv7uSA\" target=\"_blank\" rel=\"noopener\">技术面试宝典：很全面的算法和数据结构知识（含代码实现）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011172965\" target=\"_blank\" rel=\"noopener\">18届校招求职面经及总结</a></li>\n</ul>\n","raw":null,"categories":[{"name":"series","path":"api/categories/series.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"HTML","path":"api/tags/HTML.json"},{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（2）——CSS3新特性","slug":"前端面试系列（2）——CSS3新特性","date":"2017-03-18T10:37:57.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/前端面试系列（2）——CSS3新特性.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_138.png","content":"<p>CSS3 是 CSS 的 v3 版本，这套新标准提供了更加丰富且实用的规范，如：盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等等；和 HTML5 不同，CSS3 的新特性基本上得到了广泛应用，而知道并熟练运用这些新特性已经成为前端人员的必修课：</p>\n<h2 id=\"更方便快捷的选择器\"><a href=\"#更方便快捷的选择器\" class=\"headerlink\" title=\"更方便快捷的选择器\"></a>更方便快捷的选择器</h2><blockquote>\n<p>:nth-child、:nth-last-child、:nth-of-type、:last-child、:only-child、:empty</p>\n</blockquote>\n<p>CSS3 新增的选择器有很多，就不一一介绍了，这里有一篇关于 CSS3 新增选择器的文章总结的很好：<a href=\"http://www.cnblogs.com/libingql/p/4375354.html\" target=\"_blank\" rel=\"noopener\">CSS系列：CSS3新增选择器</a></p>\n<h2 id=\"框模型\"><a href=\"#框模型\" class=\"headerlink\" title=\"框模型\"></a>框模型</h2><blockquote>\n<p>border-radius（圆角）、box-shadow（盒子阴影）、border-image（边框图片）</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><blockquote>\n<p>background-size（背景大小）、background-origin（背景的定位）、background-clip（背景的绘制区域）、支持多重背景图片（background-image: url(bg_flower.gif), url(bg_flower_2.gif);）</p>\n</blockquote>\n<h2 id=\"渐变效果\"><a href=\"#渐变效果\" class=\"headerlink\" title=\"渐变效果\"></a>渐变效果</h2><p>gradient 属性可以非常方便的实现渐变色，同时可以设置渐变的方向和渐变方式等，实现各种复杂的效果。文末有一篇讲解 gradient 的文章讲的很不错，感兴趣的可以去瞅瞅。</p>\n<h2 id=\"文本效果\"><a href=\"#文本效果\" class=\"headerlink\" title=\"文本效果\"></a>文本效果</h2><blockquote>\n<p>text-shadow（文本阴影）、word-break（规定非中日韩文本的换行规则）、word-wrap（允许对长的不可分割的单词进行分割并换行到下一行）</p>\n</blockquote>\n<p>CSS3 的文本属性比较多，还是用一张图片代替吧（来自 w3c）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_138.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h2><p>可以在网页中使用除默认字体之外的其他字体，先定义字体的名称，然后引入字体文件，在需要使用该字体的时候就通过 font-family 属性引用字体的名称</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"css\">@<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  font-family: myFirstFont;</span></span><br><span class=\"line\"><span class=\"undefined\">  src: url('Sansation_Light.ttf'),</span></span><br><span class=\"line\"><span class=\"undefined\">      url('Sansation_Light.eot'); /* IE9+ */</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">div&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  font-family: myFirstFont;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><p>我认为这是 CSS3 最“好用”的特性，也正是因为这个属性（当然，下面那个属性也功不可没），通过 CSS3 转换就可以能够堆元素进行移动、缩放、转动、拉长或拉伸；同时结合对持续时间和延迟时间的控制，可以“创造”出非常炫的动画效果，大大提升了网页的展示效果。同时分为 2D 和 3D 转换，由于内容繁多，就不一一介绍了，感兴趣的小伙伴可以点击文末的链接进行进一步的学习。</p>\n<h2 id=\"transtion\"><a href=\"#transtion\" class=\"headerlink\" title=\"transtion\"></a>transtion</h2><p>当元素从一种样式变换为另一种样式时为元素添加效果，使动画更加“圆润”流畅</p>\n<h2 id=\"keyframes\"><a href=\"#keyframes\" class=\"headerlink\" title=\"@keyframes\"></a>@keyframes</h2><p>这是个面试中会经常问到的属性，原因是其应用领域非常广泛，因为如今用户的时间非常宝贵，同时网络上的信息又是鱼龙混杂，如何在有限的时间内抓住用户眼球是一个重要的课题，而 @keyframes 就可以让自己的网页焕然一新并且与众不同，通过 @keyframes 规则可以创建关键帧动画，再结合 animation 就可以使元素“动”起来。</p>\n<h2 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h2><p>通过column-count（列数）、column-fill（如何填充列）、column-gap（列之间的间隔）、column-width（列的宽度）可以创建多个列来对文本进行布局，就像报纸那样。</p>\n<h2 id=\"用户界面\"><a href=\"#用户界面\" class=\"headerlink\" title=\"用户界面\"></a>用户界面</h2><ul>\n<li>resize：是否可由用户调整元素尺寸</li>\n<li>box-sizing：border-box / content-box，这个属性我也很喜欢，可以改变传统的“盒子模型”，方便进行布局</li>\n<li>outline-offset：对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓（轮廓不占用空间并且可能是非矩形，这两点和边框不同）</li>\n</ul>\n<h2 id=\"Flex-弹性布局\"><a href=\"#Flex-弹性布局\" class=\"headerlink\" title=\"Flex 弹性布局\"></a>Flex 弹性布局</h2><p>这个属性让开发者非常头疼的“居中”问题找到了一种十分简便的答案，可以非常方便地实现让一个或多个元素在其父元素中垂直居中，建议大家去看阮一峰对其的讲解，很全面并且简单易懂（链接在文末）。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://www.w3school.com.cn/css3/index.asp\" target=\"_blank\" rel=\"noopener\">CSS3 教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">Flex 布局教程：语法篇</a></li>\n<li><a href=\"http://www.w3cplus.com/css3/new-css3-radial-gradient.html\" target=\"_blank\" rel=\"noopener\">再说CSS3渐变——径向渐变</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（5）——CSS盒子模型","slug":"前端面试系列（5）——CSS盒子模型","date":"2017-04-03T12:20:11.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/前端面试系列（5）——CSS盒子模型.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_16.gif","content":"<p>盒子模型是 html + css 最核心的基础知识，理解了这个重要的概念才能更好的排版，进行页面布局；同时在前端面试或笔试中也经常遇到，所以深入理解盒子模型对自身前端水平的提升有很大帮助。</p>\n<h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>css 盒子模型又称为框模型（Box Model），包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素，如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_16.gif\" alt=\"\" width=\"400\"></div>\n\n<p>图中最内部的框是元素的实际内容，也就是元素框，紧挨着元素框外部的是内边距 padding，其次是边框（border），然后最外层是外边距（margin），整个构成了框模型。通常我们设置的背景显示区域，就是内容、内边距、边框这一块范围。下面是对这四个部分的说明：</p>\n<ul>\n<li><strong>Margin（外边距）</strong> - 边框外围区域。Margin 没有背景颜色，它是完全透明</li>\n<li><strong>Border（边框）</strong> - 边框周围的填充和内容。边框是受到盒子的背景颜色影响</li>\n<li><strong>Padding（内边距）</strong> - 清除内容周围的区域。会受到框中填充的背景颜色影响</li>\n<li><strong>Content（内容）</strong> - 盒子的内容，显示文本和图像</li>\n</ul>\n<p>那么，元素框的总宽度 = 元素（element）的 width + padding 的左边距和右边距的值 + margin 的左边距和右边距的值 + border 的左右宽度；<br>元素框的总高度 = 元素（element）的height + padding 的上下边距的值 + margin 的上下边距的值 ＋ border 的上下宽度。<br>所以，在 box-sizing 为 content-box 也就是上面所述盒子模型时，当我们指定了一个 CSS 元素的高度和宽度属性时，只是设置了内容区域的高度和宽度</p>\n<h2 id=\"盒子模型表现\"><a href=\"#盒子模型表现\" class=\"headerlink\" title=\"盒子模型表现\"></a>盒子模型表现</h2><h3 id=\"外边距合并（叠加）\"><a href=\"#外边距合并（叠加）\" class=\"headerlink\" title=\"外边距合并（叠加）\"></a>外边距合并（叠加）</h3><p>两个上下方向相邻的元素框垂直相遇时，外边距会合并，合并后的外边距的高度等于两个发生合并的外边距中较高的那个边距值，如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_17.png\" alt=\"\" width=\"500\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_18.png\" alt=\"\" width=\"500\"></div>\n\n<p>比较容易理解，所以在页面中有时候遇到实际情况是需要考虑这个因素的。当然外边距合并其实也有存在的意义，如下图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_19.png\" alt=\"\" width=\"500\"></div>\n\n<p>关于 margin 合并，其实还有很多不为人知的知识和问题，稍晚一些我会再专门针对 margin 合并写一篇文章（其实应该不算是“写”，因为是对张鑫旭的讲解的总结），感兴趣的童鞋可以直接搜索 “\bmargin 合并”查看</p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>box-sizing 属性是用户界面属性里的一种（CSS3），之所以介绍它，是因为这个属性跟盒子模型有关，而且在 css reset 中有可能会用到它。</p>\n<blockquote>\n<p>box-sizing: content-box | border-box | inherit; </p>\n</blockquote>\n<h3 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h3><p>默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的 width 只包含内容。</p>\n<p>即总宽度 = margin + border + padding + width</p>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><p>设置的 width 值其实是除 margin 外的 border + padding + element 的总宽度。盒子的 width 包含 border + padding + 内容</p>\n<p>即总宽度 = margin + width，关于 border-box 的使用：</p>\n<ol>\n<li>一个 box 宽度为 100%，又想要两边有内间距，这时候用就比较好</li>\n<li>全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度。</li>\n</ol>\n<h3 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h3><p>规定应从父元素继承 box-sizing 属性的值 下面两张图形象的展示了 box-sizing 为 content-box 和 border-box 时的区别：</p>\n<p>（1）标准的盒子模型（content-box）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_14.png\" alt=\"\" width=\"400\"></div>\n\n<p>（2）IE盒子模型（border-box）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_15.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"盒子模型应用\"><a href=\"#盒子模型应用\" class=\"headerlink\" title=\"盒子模型应用\"></a>盒子模型应用</h2><h3 id=\"用盒子模型画三角形\"><a href=\"#用盒子模型画三角形\" class=\"headerlink\" title=\"用盒子模型画三角形\"></a>用盒子模型画三角形</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width : 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            border : 100px solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border-top</span> : 100<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">blue</span>; <span class=\"comment\">/*这里可以设置border的top、bottom、left、right四个方向的三角*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>页面显示结果为：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_20.png\" alt=\"\" width=\"200\"></div>\n\n<h2 id=\"盒子模型产生的问题\"><a href=\"#盒子模型产生的问题\" class=\"headerlink\" title=\"盒子模型产生的问题\"></a>盒子模型产生的问题</h2><h3 id=\"margin-越界\"><a href=\"#margin-越界\" class=\"headerlink\" title=\"margin 越界\"></a>margin 越界</h3><p>即第一个子元素的 margin-top 和最后一个子元素的 margin-bottom 的越界问题，以第一个子元素的margin-top 为例：当父元素没有边框 border 时，设置第一个子元素的 margin-top 值的时候，会出现 margin-top 值加在父元素上的现象，解决方法有四个：</p>\n<ol>\n<li>给父元素加边框 border （副作用）</li>\n<li>给父元素设置 padding值  （副作用）</li>\n<li>父元素添加 overflow: hidden （副作用）</li>\n<li><strong>父元素加前置内容生成</strong>。（推荐）</li>\n</ol>\n<p>以第 4 种方法为例：</p>\n<p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">width </span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height </span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color </span>: red;       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> : <span class=\"selector-tag\">before</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">content </span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">     <span class=\"attribute\">display </span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">width </span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height </span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color </span>: green;</span><br><span class=\"line\">     <span class=\"attribute\">margin-top </span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器间的盒子模型\"><a href=\"#浏览器间的盒子模型\" class=\"headerlink\" title=\"浏览器间的盒子模型\"></a>浏览器间的盒子模型</h3><ol>\n<li>ul 标签在 Mozilla 中默认是有 padding 值的，而在 IE 中只有 margin 有值。</li>\n<li>标准盒子模型与 IE 模型之间的差异：标准的盒子模型就是上述介绍的那种，而 IE 模型更像是 box-sizing: border-box；其内容宽度还包含了 border 和 padding。解决办法就是：在 html 模板中加 doctype 声明。但是我自己在项目中已经很少考虑 IE 了，如果没有特殊要求的话，IE 基本上可以完全忽略了</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/clearsky/p/5696286.html\" target=\"_blank\" rel=\"noopener\">css 盒子模型理解</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"纯CSS实现自适应正方形","slug":"纯CSS实现自适应正方形","date":"2017-05-16T09:00:27.000Z","updated":"2019-07-16T08:17:01.920Z","comments":true,"path":"api/articles/纯CSS实现自适应正方形.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_231.png","content":"<p>首先，自适应正方形是指宽度和高度随着屏幕宽度（不管是移动端还是 PC 端）进行等比例变化的正方形，在处理移动端页面时，我们有时会需要将 banner 图做成与屏幕等宽的正方形以获得最佳的体验效果，如 <a href=\"http://flipboard.com/@news/\" target=\"_blank\" rel=\"noopener\">Flipbord的移动页面</a>，而在 PC 端，我们也可能需要实现一个随屏幕宽度变化的正方形，从而达到某些效果；那么应该怎么使用纯 CSS 制作出能够自适应大小的正方形呢？</p>\n<h2 id=\"方案一：CSS3-vw-单位\"><a href=\"#方案一：CSS3-vw-单位\" class=\"headerlink\" title=\"方案一：CSS3 vw 单位\"></a>方案一：CSS3 vw 单位</h2><p>CSS3 中新增了一组相对于可视区域百分比的长度单位 vw, vh, vmin, vmax。其中vw是相对于视口宽度百分比的单位，1vw = 1% viewport width，vh是相对于视口高度百分比的单位，1vh = 1% viewport height；vmin 是相对当前视口宽高中较小的一个的百分比单位，同理 vmax 是相对当前视口宽高中较大的一个的百分比单位。<a href=\"http://caniuse.com/#search=vw\" target=\"_blank\" rel=\"noopener\">该单位浏览器兼容性</a>如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_231.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"placeholder\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：简洁方便 缺点：浏览器兼容不好</p>\n<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#viewwidth\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"方法二：设置垂直方向的-padding-撑开容器\"><a href=\"#方法二：设置垂直方向的-padding-撑开容器\" class=\"headerlink\" title=\"方法二：设置垂直方向的 padding 撑开容器\"></a>方法二：设置垂直方向的 padding 撑开容器</h2><p>在 CSS 盒模型中，一个比较容易被忽略的就是 margin, padding 的百分比数值计算。按照规定，<strong>margin, padding 的百分比数值是相对父元素宽度的宽度计算的</strong>。由此可以发现只需将元素垂直方向的一个 padding 值设定为与 width 相同的百分比就可以制作出自适应正方形了：</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: bottom:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果正方形中没有内容（相当于只是一个几何里面的正方形，并没有展示其他任何内容），一切看起来都很正常；但是，如果正方形中有其他内容（这种情况会更常见一些，比如说有一些文本和图片），此时容器的高度就会被拉伸，因为<a href=\"/20170403/css-box-model.html\">盒子模型</a>中的 padding 是不包含在 content 中的，所以我们可以通过 height:0 解决这个问题；这种方案简洁明了，且兼容性好；但是除了填充内容后会出现问题以外，还有可能碰上<a href=\"https://idiotwu.me/study/responsive-square/#maxheight\" target=\"_blank\" rel=\"noopener\">max-height不收缩</a>，于是第三种方案来了：</p>\n<h2 id=\"方案三：利用伪元素的-margin-padding-top-撑开容器\"><a href=\"#方案三：利用伪元素的-margin-padding-top-撑开容器\" class=\"headerlink\" title=\"方案三：利用伪元素的 margin(padding)-top 撑开容器\"></a>方案三：利用伪元素的 margin(padding)-top 撑开容器</h2><p>在方案二中，我们利用百分比数值的 padding-bottom 属性撑开容器内部空间，但是这样做会导致在元素上设置的 max-height 属性失效；而失效的原因是 <a href=\"http://stackoverflow.com/questions/21750091/max-height-on-border-boxed-div-with-padding-is-not-set\" target=\"_blank\" rel=\"noopener\">max-height 属性只限制于 height</a>，也就是只会对元素的 content height 起作用。那么我们是不是能用一个子元素撑开 content 部分的高度，从而使 max-height 属性生效呢？我们来试试：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.placeholder</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/* margin 百分比相对父元素宽度计算 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一刷新页面，啊嘞？怎么什么也没有？ 这里就涉及到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing\" target=\"_blank\" rel=\"noopener\">margin collapse</a> 的概念了，由于容器与伪元素在垂直方向发生了外边距折叠，所以我们想象中的撑开父元素高度并没有出现。而应对的方法是在父元素上触发 BFC：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现效果-1\"><a href=\"#实现效果-1\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#margin\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是三种制作自适应正方形的方案，除去 CSS3 中的视口相对单位，主要利用到 margin, padding 的百分比数值相对父元素宽度的宽度计算得出来制作宽高相等、且相对视口宽度自适应的正方形。如果需求是制作相对视口高度自适应的正方形，估计就只能使用 vh 单位了吧~</p>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"读书笔记系列（5）——响应式Web设计-HTML5和CSS3实战","slug":"读书笔记系列（5）——响应式Web设计-HTML5和CSS3实战","date":"2017-04-06T09:17:52.000Z","updated":"2019-07-16T08:17:01.920Z","comments":true,"path":"api/articles/读书笔记系列（5）——响应式Web设计-HTML5和CSS3实战.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_297.png","content":"<h2 id=\"1-一句话概括响应式设计\"><a href=\"#1-一句话概括响应式设计\" class=\"headerlink\" title=\"1. 一句话概括响应式设计\"></a>1. 一句话概括响应式设计</h2><p>如果要用一句话概括响应式网页设计，我觉得它是针对任意设备对网页内容进行完美布局的一种显示机制.相反，如果需要根据不同设备提供特定的内容和功能，那就需要一个真正的“手机版”网站.这种情况下，手机版网站会提供与桌面版网站完全不同的用户体验.</p>\n<h2 id=\"2-CSS-reset-网站\"><a href=\"#2-CSS-reset-网站\" class=\"headerlink\" title=\"2. CSS reset 网站\"></a>2. CSS reset 网站</h2><ul>\n<li><a href=\"http://meyerweb.com/eric/tools/css/reset/\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/css/reset/</a>，Eric Meyer的原版，主要针对HTML4</li>\n<li><a href=\"http://meyerweb.com/eric/tools/css/reset/ http://necolas.github.com/normalize.css/\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/css/reset/ http://necolas.github.com/normalize.css/</a>，针对HTML5</li>\n</ul>\n<h2 id=\"3-CSS-网格系统\"><a href=\"#3-CSS-网格系统\" class=\"headerlink\" title=\"3. CSS 网格系统\"></a>3. CSS 网格系统</h2><div align=\"center\"><img src=\"/images/hexo_post_297.png\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"4-地标角色属性\"><a href=\"#4-地标角色属性\" class=\"headerlink\" title=\"4. 地标角色属性\"></a>4. 地标角色属性</h2><p>role=”” 针对文档结构的各部分分别有如下的地标角色：</p>\n<ul>\n<li>application：用来定义用作网页应用的区域；</li>\n<li>banner：用来定义一个站点级别(而不是某个特定文档的)的区域.如网站的头部和logo；</li>\n<li>complementary：一个对页面主要区域进行补充说明的区域；</li>\n<li>contentinfo：与页面主要内容相关的信息区域，例如页脚的网站版权信息区域；</li>\n<li>form：定义表单，但是如果表单用于搜索，请使用search来替代；</li>\n<li>main：页面的主体内容；</li>\n<li>navigation：链向当前文档或相关文档的导航链接；</li>\n<li>search：一个用于搜索的区域。</li>\n</ul>\n<h2 id=\"5-导航栏使用-table-显示模式\"><a href=\"#5-导航栏使用-table-显示模式\" class=\"headerlink\" title=\"5. 导航栏使用 table 显示模式\"></a>5. 导航栏使用 table 显示模式</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做可以保证如果有另外的列表项追加进来，同样会自动地调整它们之间的间距。最后，使用 CSS3 选择器将最后一个列表项的文字置为右对齐，将第一个列表项的文字置为左对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-在响应式设计中使用自定义-font-face-字体的注意事项\"><a href=\"#6-在响应式设计中使用自定义-font-face-字体的注意事项\" class=\"headerlink\" title=\"6. 在响应式设计中使用自定义 @font-face 字体的注意事项\"></a>6. 在响应式设计中使用自定义 @font-face 字体的注意事项</h2><p>唯一需要注意的，是在响应式设计中使用该技术时要考虑到字体文件大小。有些字体可能会非常庞大，如果你想保持网站的高性能，请注意控制自定义字体的文件尺寸。</p>\n<h2 id=\"7-浮雕文字效果\"><a href=\"#7-浮雕文字效果\" class=\"headerlink\" title=\"7. 浮雕文字效果\"></a>7. 浮雕文字效果</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 1<span class=\"selector-tag\">px</span> 0 <span class=\"selector-tag\">hsla</span>(0， 0%， 100%， 0<span class=\"selector-class\">.75</span>);</span><br></pre></td></tr></table></figure>\n<p>不要模糊，不要水平阴影，仅在垂直方向设置 1 或 2 像素的”白影”即可。</p>\n<h2 id=\"8-让整个屏幕飞舞\"><a href=\"#8-让整个屏幕飞舞\" class=\"headerlink\" title=\"8. 让整个屏幕飞舞\"></a>8. 让整个屏幕飞舞</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123; <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>; &#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_298.png\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"9-CSS3-实现-3D-变形效果\"><a href=\"#9-CSS3-实现-3D-变形效果\" class=\"headerlink\" title=\"9. CSS3 实现 3D 变形效果\"></a>9. CSS3 实现 3D 变形效果</h2><h3 id=\"在父级元素上设置透视，这样就开启了-3D-场景\"><a href=\"#在父级元素上设置透视，这样就开启了-3D-场景\" class=\"headerlink\" title=\"在父级元素上设置透视，这样就开启了 3D 场景\"></a>在父级元素上设置透视，这样就开启了 3D 场景</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span>&#123; <span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">200</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>透视的值越大，就表示你的视点与 3D 场景之间的景深越大。因此，如果想要一点隐约的 3D 效果，就增大透视值；如果想要非常明显的 3D 效果，则减小透视值。</p>\n<h3 id=\"延续父元素的透视\"><a href=\"#延续父元素的透视\" class=\"headerlink\" title=\"延续父元素的透视\"></a>延续父元素的透视</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.son</span>&#123; <span class=\"attribute\">-webkit-transform-style</span>: perserve-<span class=\"number\">3</span>d; <span class=\"attribute\">-webkit-transition</span>: <span class=\"number\">1s</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>.father 类中添加的透视声明只会应用到其第一个子元素上。因此，为了延续父元素的透视，我们给 .son 元素设定了 preserve-3d (这样可以设置一个 3D 场景)。</p>\n<h3 id=\"当鼠标悬停在-father-模块上时，我们给-son-这个-div-添加一个翻转效果\"><a href=\"#当鼠标悬停在-father-模块上时，我们给-son-这个-div-添加一个翻转效果\" class=\"headerlink\" title=\"当鼠标悬停在 .father 模块上时，我们给 .son 这个 div 添加一个翻转效果\"></a>当鼠标悬停在 .father 模块上时，我们给 .son 这个 div 添加一个翻转效果</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.son</span>&#123; <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg); &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"当海报翻转之后隐藏在其背面内容\"><a href=\"#当海报翻转之后隐藏在其背面内容\" class=\"headerlink\" title=\"当海报翻转之后隐藏在其背面内容\"></a>当海报翻转之后隐藏在其背面内容</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.face</span> &#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">-webkit-backface-visibility</span>: hidden; &#125;</span><br></pre></td></tr></table></figure>\n<p>.face 必须使用绝对定位，这样海报才能盖在 .back 这个 div 的上面</p>\n<h3 id=\"给-back-加上-rotateY\"><a href=\"#给-back-加上-rotateY\" class=\"headerlink\" title=\"给 .back 加上 rotateY\"></a>给 .back 加上 rotateY</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.back</span> &#123; <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg); &#125;</span><br></pre></td></tr></table></figure>\n<p>不加这句的话，.back 这个 div 就会显示在正面海报之上。最终的 HTML 结构以及 CSS 样式如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"Qcontainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"film\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"face front\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/goonies.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"The Goonies\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"face back\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>HOT!<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.Qcontainer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">28%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">800</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.film</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">15em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform-style</span>: preserve-<span class=\"number\">3</span>d;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Qcontainer</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.film</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-backface-visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.back</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">66%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">127%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#3b3b3b</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(top，</span><br><span class=\"line\">  rgba(0，0，0，0.65) <span class=\"number\">0%</span>，</span><br><span class=\"line\">  <span class=\"built_in\">rgba</span>(0，0，0，0) <span class=\"number\">100%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">15%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-list-及对应的-datalist-元素\"><a href=\"#10-list-及对应的-datalist-元素\" class=\"headerlink\" title=\"10. list(及对应的 datalist 元素)\"></a>10. list(及对应的 datalist 元素)</h2><p>list 属性以及对应的 datalist 元素可以让用户在输入框中开始输入值的时候，显示一组备选值。下面是一个包含在 div 中的使用 list 属性及对应 datalist 元素的代码示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"awardWon\"</span>&gt;</span>Award Won<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"awardWon\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"awardWon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">list</span>=<span class=\"string\">\"awards\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">datalist</span> <span class=\"attr\">id</span>=<span class=\"string\">\"awards\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Picture\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Director\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Adapted Screenplay\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Best Original Screenplay\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">datalist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>list 属性中的值（awards）同时也是 datalist 元素的 id。这样就可以让 datalist 与输入项关联起来。虽然将 option 包裹在 select 中不是必需的，但这样做便于为老版本浏览器提供降级方案。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_299.png\" alt=\"\" width=\"550\"></div>","raw":null,"categories":[{"name":"note","path":"api/categories/note.json"}],"tags":[{"name":"HTML","path":"api/tags/HTML.json"},{"name":"CSS","path":"api/tags/CSS.json"},{"name":"笔记","path":"api/tags/笔记.json"}]},{"title":"前端面试系列（4）——CSS选择器","slug":"前端面试系列（4）——CSS选择器","date":"2017-04-03T03:43:13.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/前端面试系列（4）——CSS选择器.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_92.png","content":"<p>这篇文章主要总结了 CSS 选择器的相关知识，CSS 的选择器是前端面试或者笔试中经常问到和用到的，同时对于开发来说也是必备基础知识</p>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><h3 id=\"不同级别\"><a href=\"#不同级别\" class=\"headerlink\" title=\"不同级别\"></a>不同级别</h3><p>级别依次递减：</p>\n<ol>\n<li>在属性后面使用 <code>!important</code> 会覆盖页面内任何位置定义的元素样式。</li>\n<li>作为 style 属性写在元素内的样式（简称为“内联样式”）</li>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器</li>\n<li>浏览器自定义</li>\n</ol>\n<p>另外，在《精彩绝伦的CSS》这本书中，作者用数字定量了选择器的优先级，具体规则为：</p>\n<ul>\n<li>每个元素描述符贡献 0，0，0，1</li>\n<li>每个类、伪类或者属性描述符贡献 0，0，1，0</li>\n<li>每个 ID 描述符贡献 0，1，0，0</li>\n<li>行内样式或内联样式贡献1 ，0，0，0</li>\n</ul>\n<p>可能看到这里你还比较糊涂，那请看下面的图片：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_92.png\" alt=\"\" width=\"400\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_93.png\" alt=\"\" width=\"400\"></div>\n\n<p>其实就是简单的加法，数字越大优先级越高（为何如此计算尚不得知，仅作为额外知识），!important 会覆盖任何没有 !important 的属性</p>\n<h3 id=\"同一级别\"><a href=\"#同一级别\" class=\"headerlink\" title=\"同一级别\"></a>同一级别</h3><p>同一级别中后写的会覆盖先写的样式</p>\n<h2 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h2><p>这几类是使用频率最高的几种，同时在各个版本的 reset.css 中也会经常出现</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>通用元素选择器，匹配页面任何元素（使用频率较低）</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>id 选择器，匹配特定 id 的元素</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>类选择器，匹配 class 包含（不是等于）特定类的元素</td>\n</tr>\n<tr>\n<td>element</td>\n<td>标签选择器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><p>这些选择器让我们的样式添加更加灵活，同时需要注意的是不只能写两层，理论上讲只要找得到可以写无限层，但是层数越多越影响性能，同时也会有优先级的麻烦，所以争取用最简短、最准确的选择器才是正道</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“E,F”</td>\n<td>多元素选择器，用 “”,”” 分隔，同时匹配元素 E 或元素 F</td>\n</tr>\n<tr>\n<td>“E F “</td>\n<td>后代选择器，用空格分隔，匹配 E 元素所有的后代元素F</td>\n</tr>\n<tr>\n<td>E&gt;F</td>\n<td>子元素选择器，用 “”&gt;”” 分隔，匹配 E 元素的所有直接子元素 F</td>\n</tr>\n<tr>\n<td>E+F</td>\n<td>直接相邻选择器，匹配 E 元素之后的相邻的同级元素 F</td>\n</tr>\n<tr>\n<td>E~F</td>\n<td>普通相邻选择器（弟弟选择器），匹配E元素之后的同级元素F（无论直接相邻与否）</td>\n</tr>\n<tr>\n<td>.class1.class2</td>\n<td>匹配类中既包含 class1 又包含 class2 的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><p>这一类的选择器用的比较少，因为其实用性并不是很高，同时在性能方面也会比较差，所以可以作为了解，如果真需要用属性去选择的时候知道 CSS 有属性选择器就可以了</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E[attr]</td>\n<td>匹配所有具有属性 attr 的元素，div[id] 就能取到所有有 id 属性的 div</td>\n</tr>\n<tr>\n<td>E[attr=value]</td>\n<td>匹配属性 attr 值为 value 的元素，div[id=test] 匹配 id 为 test 的 div</td>\n</tr>\n<tr>\n<td>E[attr~=value]</td>\n<td>匹配所有属性 attr 具有多个空格分隔、其中一个值等于 value 的元素</td>\n</tr>\n<tr>\n<td>E[attr&#124;=value]</td>\n<td>匹配所有 attr 属性具有多个 ”-” 分隔、其中一个值以 value 开头的元素，主要用于 lang 属性，比如“en”、“en-us”</td>\n</tr>\n<tr>\n<td>E[attr ^=value]</td>\n<td>匹配属性 attr 的值以 value 开头的元素</td>\n</tr>\n<tr>\n<td>E[attr $=value]</td>\n<td>匹配属性 attr 的值以 value 结尾的元素</td>\n</tr>\n<tr>\n<td>E[attr *=value]</td>\n<td>匹配属性 attr 的值包含 value 的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>这一类选择器大部分都是 CSS3 新增类型，可以更方便、更快捷地匹配到目标元素，所以以下这些选择器很重要，需要牢牢记住</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-child</td>\n<td>匹配元素E的第一个子元素</td>\n</tr>\n<tr>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>E:visited</td>\n<td>匹配所有已被点击的链接</td>\n</tr>\n<tr>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n</tr>\n<tr>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的 E 元素</td>\n</tr>\n<tr>\n<td>E:focus</td>\n<td>匹配获得当前焦点的 E 元素</td>\n</tr>\n<tr>\n<td>E:lang(c)</td>\n<td>匹配 lang 属性等于 c 的 E 元素</td>\n</tr>\n<tr>\n<td>E:enabled</td>\n<td>匹配表单中可用的元素</td>\n</tr>\n<tr>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>E:checked</td>\n<td>匹配表单中被选中的 radio 或 checkbox 元素</td>\n</tr>\n<tr>\n<td>E::selection</td>\n<td>匹配用户当前选中的元素</td>\n</tr>\n<tr>\n<td>E:root</td>\n<td>匹配文档的根元素，对于 HTML 文档，就是 HTML 元素</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配其父元素的第 n 个子元素，第一个编号为 1</td>\n</tr>\n<tr>\n<td>E:nth-last-child(n)</td>\n<td>匹配其父元素的倒数第 n 个子元素，第一个编号为 1</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>与 :nth-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:nth-last-of-type(n)</td>\n<td>与 :nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:last-child</td>\n<td>匹配父元素的最后一个子元素，等同于 :nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于 :nth-of-type(1)</td>\n</tr>\n<tr>\n<td>E:last-of-type</td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于 :nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:only-child</td>\n<td>匹配父元素下仅有的一个子元素，等同于 :first-child:last-child 或  :nth-child(1):nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:only-of-type</td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于 :first-of-type:last-of-type 或 :nth-of-type(1):nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:empty</td>\n<td>匹配一个不包含任何子元素的元素，文本节点也被看作子元素</td>\n</tr>\n<tr>\n<td>E:not(selector)</td>\n<td>匹配不符合当前选择器的任何元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h2><p>不得不说，:before 和 :after 选择器好用到爆（谁用谁知道），在一些悬停动画、箭头绘制以及 clearfix 样式里会经常见到</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-line</td>\n<td>匹配 E 元素内容的第一行</td>\n</tr>\n<tr>\n<td>E:first-letter</td>\n<td>匹配 E 元素内容的第一个字母</td>\n</tr>\n<tr>\n<td>E:before</td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>E:after</td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>CSS 的选择器是基础中的基础，而有些选择器使用频率是比较低的，但是一定要知道 CSS 的选择器都有哪些，遇到新的需求时会少很多麻烦。同时，不要经常使用多层选择器，这会使页面渲染负担加重，影响性能。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/dolphinX/p/3347713.html\" target=\"_blank\" rel=\"noopener\">十分钟搞定CSS选择器</a></li>\n<li><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\" target=\"_blank\" rel=\"noopener\">CSS 选择器参考手册</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"读书笔记系列（3）——精彩绝伦的CSS","slug":"读书笔记系列（3）——精彩绝伦的CSS","date":"2017-04-06T08:13:16.000Z","updated":"2019-07-16T08:17:01.920Z","comments":true,"path":"api/articles/读书笔记系列（3）——精彩绝伦的CSS.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_309.png","content":"<h2 id=\"1-特殊性\"><a href=\"#1-特殊性\" class=\"headerlink\" title=\"1. 特殊性\"></a>1. 特殊性</h2><p>特殊性是一个选择器“特殊程度”的数字表示，有 3 样东西经常被用来确定选择器的特殊性：</p>\n<ul>\n<li>每个元素描述符贡献 0，0，0，1；</li>\n<li>每个类、伪类或者属性描述符贡献 0，0，1，0；</li>\n<li>每个 ID 描述符贡献 0，1，0，0.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>权重</th>\n<th>描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>div ul ul li</td>\n<td>0,0,0,4</td>\n<td>4个元素描述符</td>\n</tr>\n<tr>\n<td>div.aside ul li</td>\n<td>0,0,1,3</td>\n<td>1个类描述符，3个元素描述符</td>\n</tr>\n<tr>\n<td>a:hover</td>\n<td>0,0,1,1</td>\n<td>1个伪类描述符，1个元素描述符</td>\n</tr>\n<tr>\n<td>div.navlinks a:hover</td>\n<td>0,0,2,2</td>\n<td>1个伪类描述符，1个类描述符，2个元素描述符</td>\n</tr>\n<tr>\n<td>#title em</td>\n<td>0,1,0,1</td>\n<td>1个ID描述符，1个元素描述符</td>\n</tr>\n<tr>\n<td>h1#title em</td>\n<td>0,1,0,2</td>\n<td>1个ID描述符，2个元素描述符</td>\n</tr>\n</tbody>\n</table>\n<p>当特殊性相等时后声明的规则会胜出。特殊性标识符第一位的 0 是用于行内样式的，且仅用于行内样式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: purple;  <span class=\"comment\">/* 0，1，0，0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: blue;\"</span>&gt;</span>  /* 1，0，0，0 */</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-重要性\"><a href=\"#2-重要性\" class=\"headerlink\" title=\"2. 重要性\"></a>2. 重要性</h2><p>任何标记为重要的声明都需要有自己的 <code>!important</code><br>任何重要的声明都会覆盖非重要的声明</p>\n<h2 id=\"3-通用选择\"><a href=\"#3-通用选择\" class=\"headerlink\" title=\"3. 通用选择\"></a>3. 通用选择</h2><p><code>*</code> 作用是选择文档中的全部元素并对其应用样式<br><code>div *</code> 作用是选择这个 div 中的全部子元素</p>\n<h2 id=\"4-简单的属性选择\"><a href=\"#4-简单的属性选择\" class=\"headerlink\" title=\"4. 简单的属性选择\"></a>4. 简单的属性选择</h2><p><code>a[href]</code> 会选择所有含有 href 属性的 a 元素<br><code>a[href=&quot;http://w3.org/&quot;]</code> 选择指向某个特定地址的全部超链接</p>\n<h2 id=\"5-部分属性值选择\"><a href=\"#5-部分属性值选择\" class=\"headerlink\" title=\"5. 部分属性值选择\"></a>5. 部分属性值选择</h2><p><code>a[href*=&quot;w3.org&quot;]</code> 属性值中包含该字符序列，应该区分属性值的大小写。</p>\n<p><code>img[src*=&quot;mainlogo.png&quot;]</code> 它会选择任何指向 mainlogo.png 文件的图像（img）元素，或者是 src 属性值中包含 mainlogo.png 这些字符的图像元素。因此，它将同时选择：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/img/2010/mainlogo.png.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"ConHugoCo Inc.\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/img/2010/mainlogo.pngdir/big.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"ConHugoCo Inc.\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-更多部分属性值选择\"><a href=\"#6-更多部分属性值选择\" class=\"headerlink\" title=\"6. 更多部分属性值选择\"></a>6. 更多部分属性值选择</h2><p>a[href^=”http”] 选取任何 href 属性值是以 http 开头的链接元素<br>a[href$=”.pdf”] 选择 href 属性值是以 .pdf 结尾的链接元素</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>选取对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a[href^=”https”]</td>\n<td>安全服务器链接</td>\n</tr>\n<tr>\n<td>a[href^=”mailto”]</td>\n<td>电子邮件联系链接</td>\n</tr>\n<tr>\n<td>a[href^=”aim”]</td>\n<td>AOL即时通信服务链接</td>\n</tr>\n<tr>\n<td>a[href^=”.doc”]</td>\n<td>微软Word文档</td>\n</tr>\n<tr>\n<td>a[href^=”.xls”]</td>\n<td>微软Excel文档</td>\n</tr>\n<tr>\n<td>a[href^=”.zip”]</td>\n<td>压缩文档</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"7-兄弟选择\"><a href=\"#7-兄弟选择\" class=\"headerlink\" title=\"7. 兄弟选择\"></a>7. 兄弟选择</h2><p>h2 + p 紧跟在 h2 后的 p 元素<br>h1 ~ ul 位于 h1 元素后面且与之共享父元素的 ul 元素，不包括直接相邻的兄弟元素</p>\n<h2 id=\"8-调整字体值的顺序\"><a href=\"#8-调整字体值的顺序\" class=\"headerlink\" title=\"8. 调整字体值的顺序\"></a>8. 调整字体值的顺序</h2><blockquote>\n<p>font: <code>&lt;font-size&gt; &lt;font-family&gt;</code>;</p>\n</blockquote>\n<p>必须同时包含这两个值并且按照既定的顺序进行书写。如果颠倒了顺序，或者漏掉了其中的一个，则任何现代浏览器都会完全忽略这条声明。此外，如果在声明中包含了其他关键字，则它们全部都得放在这两个必备的值前面。</p>\n<h2 id=\"9-玩转行高\"><a href=\"#9-玩转行高\" class=\"headerlink\" title=\"9. 玩转行高\"></a>9. 玩转行高</h2><blockquote>\n<p>font: 100%/2.5 Helvetica， sans-serif;</p>\n</blockquote>\n<p>为 font 声明添加行高值得操作总是可选的，但是如果已经包含了行高值，则它的放置位置就是固定的了，必须紧跟在字号后面加一个斜杠再加上行高值才行。</p>\n<h2 id=\"10-无单位的行高值\"><a href=\"#10-无单位的行高值\" class=\"headerlink\" title=\"10. 无单位的行高值\"></a>10. 无单位的行高值</h2><p>无单位的行高值表示后代元素所使用的一个换算系数（比如一个乘数）<br>所有继承了行高值为 1 的元素会把这个值同它们自身的字号计算值相乘。声明了 font-size: 10px 的列表项元素会有一个 10px 的计算后的行高值。</p>\n<h2 id=\"11-抑制元素的可见性\"><a href=\"#11-抑制元素的可见性\" class=\"headerlink\" title=\"11. 抑制元素的可见性\"></a>11. 抑制元素的可见性</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">span&#123; visibility：hidden； &#125;  /* 被设置成 visibility: hidden 的元素仍然参与页面布局 */</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-将元素移出屏幕\"><a href=\"#12-将元素移出屏幕\" class=\"headerlink\" title=\"12. 将元素移出屏幕\"></a>12. 将元素移出屏幕</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.hide</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">10000em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">10000em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">**已经从页面上移除，但是屏幕阅读器也能识别**</span><br><span class=\"line\"></span><br><span class=\"line\">## 13. 图像替换</span><br><span class=\"line\"></span><br><span class=\"line\">使用负的文本缩进把文本移到元素的左侧</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">css</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: -<span class=\"number\">9999px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(page-hader.gif);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们没有移动元素框的情况下将元素的文本内容移动到了屏幕之外。</p>\n<h2 id=\"14-打印样式\"><a href=\"#14-打印样式\" class=\"headerlink\" title=\"14. 打印样式\"></a>14. 打印样式</h2><p>有 3 种方式可以将打印样式关联到页面：</p>\n<ul>\n<li><code>&lt;style type=&quot;text/css&quot; media=&quot;print&quot;&gt;...&lt;/style&gt;</code></li>\n<li><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot; href=&quot;print.css&quot;&gt;</code></li>\n<li><code>@import url(print.css) print</code>;</li>\n</ul>\n<p>几乎所有人都会使用 link 的方式，这是因为在每个页面中都嵌入打印样式表的效率非常低。</p>\n<h2 id=\"15-凸排列表\"><a href=\"#15-凸排列表\" class=\"headerlink\" title=\"15. 凸排列表\"></a>15. 凸排列表</h2><p>使列表项的第一行悬挂在左侧，并使其他行保持在原位的一种技术。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_309.png\" alt=\"\" width=\"700\"></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: -<span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>list-style: none 这条规则很重要，如果没有这个的话，每个列表项的第一行就不会被凸排，并且文本会跟列表标记重合。因此，不要把凸排和列表标记混着用。</p>\n<h2 id=\"16-为列表添加标记\"><a href=\"#16-为列表添加标记\" class=\"headerlink\" title=\"16. 为列表添加标记\"></a>16. 为列表添加标记</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-sytle-image</span>: <span class=\"built_in\">url</span>(star.gif);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>潜在的缺点是你完全无法掌控图像的放置位置。可以将每个列表项的内容用一个元素包裹一下，这个元素可以是 div 或者 span。就可以定制列表标记的样式。</p>\n<h2 id=\"17-生成列表标记\"><a href=\"#17-生成列表标记\" class=\"headerlink\" title=\"17. 生成列表标记\"></a>17. 生成列表标记</h2><p>通过混合凸排和生成内容来实现的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">url</span>(star.gif);</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: -<span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"18-用轮廓代替边框\"><a href=\"#18-用轮廓代替边框\" class=\"headerlink\" title=\"18. 用轮廓代替边框\"></a>18. 用轮廓代替边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> dashed red; &#125;</span><br></pre></td></tr></table></figure>\n<p>边框是参与布局的，而轮廓并不参与。轮廓必然是环绕着元素的，并且在元素的四周永远保持一致。你不能只设置左轮廓或者上轮廓。<br>轮廓只有两种情况：环绕元素四周的简单轮廓，或者干脆没有轮廓。元素是可以同时具有边框和轮廓的。在这种情况下，轮廓会绘制在边框之外，所有轮廓的内边缘会紧挨着边框的外边缘。如果元素具有外边距的话，则轮廓将绘制在外边距所在区域之上，但是外边距并不会被轮廓改变或者替换掉。</p>\n<h2 id=\"19-框冲切\"><a href=\"#19-框冲切\" class=\"headerlink\" title=\"19. 框冲切\"></a>19. 框冲切</h2><p>是一种可以在视觉上将元素框的一部分移除的技术。它仅在单色或固定图像背景上起作用。框冲切的最简单形式就是把一个框放在另一个框的角落里，并确保它的背景与周围的内容一致，而不是与它的父元素一致。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_310.png\" alt=\"\" width=\"600\"></div>\n\n<h2 id=\"20-CSS-精灵\"><a href=\"#20-CSS-精灵\" class=\"headerlink\" title=\"20. CSS 精灵\"></a>20. CSS 精灵</h2><p>CSS 精灵(CSS sprite) 是一种可以实现快速悬停效果的技术，现在已经演变成了通过将装饰性的图片合并并下载，从而降低服务器负载的技术。CSS 精灵最基本的例子就是包含两种状态的图标，即一个挨着链接的正常显示版本，一个当链接被悬停时的”点亮”版本。</p>\n<h2 id=\"21-滑动门\"><a href=\"#21-滑动门\" class=\"headerlink\" title=\"21. 滑动门\"></a>21. 滑动门</h2><p>滑动门是一种可以使文本导航链接变成花哨的选项卡的技术。然而，通常的做法都只适用于效果而不试用于选项卡。</p>\n<h2 id=\"22-CSS-视差\"><a href=\"#22-CSS-视差\" class=\"headerlink\" title=\"22. CSS 视差\"></a>22. CSS 视差</h2><p>CSS 视差是一种很精巧的技术，它能让我们了解基于百分比的背景图像定位可以那么简单而直接地创造出意想不到的效果。首先，考虑一下百分比定位是怎么实现的。假设你把一个背景图像的位置设置为 50% 50%，那么它的中心将与背景区域的中心对齐。类似地，如果设置为 100% 100%，那么它的右下角就会和背景区域的右下角对齐。这就意味着背景图像位置的百分比值实际上被使用了两次。第一次用于找到背景区域中所定义的点，第二次用于找到图像本身中定义的点，然后再把这两个点对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(ice-1.png) -<span class=\"number\">75%</span> <span class=\"number\">0</span> repeat-x;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-id\">#main</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(ice-2.png) <span class=\"number\">75%</span> <span class=\"number\">0</span> repeat-x;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过这样的设置，当浏览器窗口变宽时图片看起来就会使朝着远离窗口中心的方向移动的，这会产生类似”放大”的效果。而当窗口变窄时，图片会朝着窗口的中心移动，类似”缩小”的效果。</p>\n<h2 id=\"23-图像的框\"><a href=\"#23-图像的框\" class=\"headerlink\" title=\"23. 图像的框\"></a>23. 图像的框</h2><p>有些关于图像的东西，大多数人至今都没有意识到：它们与其他元素拥有相同的盒模型，这意味着你可以对图像元素应用诸如背景和内边距等样式。你可以为图像设置背景图像，做出一些有趣的组合效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_311.png\" alt=\"\" width=\"700\"></div>\n\n<p>内边距也可以很简单地应用在图像上。事实上，通过背景色、边框以及内边距的组合，可以使图像看上去具有深浅不一的双层边框。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_312.png\" alt=\"\" width=\"700\"></div>\n\n<p>再加上轮廓的话，你就会得到类似三层边框的效果了。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_313.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"24-受限的图像\"><a href=\"#24-受限的图像\" class=\"headerlink\" title=\"24. 受限的图像\"></a>24. 受限的图像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123; <span class=\"attribute\">max-width</span>:<span class=\"number\">100%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>这条简单的规则会保证图像不会比包含它们的元素更宽，不过在父元素比这些图像宽的情况下，它们会保持原始尺寸。你可以通过把图像在其父元素中居中来进行强化，像这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下图展示了将同一个图像放在 3 个不同宽度父元素中的例子，其中两个父元素比图像还窄，一个比图像宽(父元素的边缘已通过边框标出)。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_314.png\" alt=\"\" width=\"400\"></div>\n\n<p>这很明显会使你的图像任由浏览器的缩放操作摆布，因为它们会缩小图像。</p>\n<h2 id=\"25-表头、主体和脚注\"><a href=\"#25-表头、主体和脚注\" class=\"headerlink\" title=\"25. 表头、主体和脚注\"></a>25. 表头、主体和脚注</h2><p>HTML 为表格定义了 3 个元素用于对行进行分组，它们是 thead(表头)，tbody(表格主体) 和 tfoot(脚注)。毫不奇怪，这些元素分别代表了表格的表头，主体部分以及脚注部分。</p>\n<h2 id=\"26-行标题\"><a href=\"#26-行标题\" class=\"headerlink\" title=\"26. 行标题\"></a>26. 行标题</h2><p>有一个 HTML 属性在当初设计的时候就是用来让你指定一个 th 元素是列标题还是行标题的。表格主体中的每一行都以 th 元素开头，那些就是行标题。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"col\"</span>&gt;</span>Pageviews<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"col\"</span>&gt;</span>Visitors<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"row\"</span>&gt;</span>January 2010<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1367234<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>326578<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"row\"</span>&gt;</span>February 2010<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1491262<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>349091<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>为 th 元素恰当地添加已赋值的 scope(作用域)属性，相当于明确地告诉浏览器 th 元素与它周围单元格的关系。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_315.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"27-多背景\"><a href=\"#27-多背景\" class=\"headerlink\" title=\"27. 多背景\"></a>27. 多背景</h2><p>CSS3 中真正时髦的东西之一，就是它对于给定元素支持多个背景图像。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(bg01.png) top left no-repeat,</span><br><span class=\"line\">              <span class=\"built_in\">url</span>(bg02.png) top right no-repeat,</span><br><span class=\"line\">              <span class=\"built_in\">url</span>(bg03.png) bottom right no-repeat,</span><br><span class=\"line\">              <span class=\"built_in\">url</span>(bg04.png) bottom left no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多背景的应用顺序是从“最高”到“最低”的，即以你观看页面的视角来看，是从最靠你的到离你最远的顺序应用。如果你把颜色放到第一个背景上，它就会位于其他背景的“上面”。这也意味着，如果你想让某种图案背景在所有背景的最后方，那么就需要把它放在最后一个并且确保把任何背景颜色的值也移到这个值中。</p>\n<h2 id=\"28-二维变换\"><a href=\"#28-二维变换\" class=\"headerlink\" title=\"28. 二维变换\"></a>28. 二维变换</h2><p>可以通过 <code>transform-origin</code> 改变旋转或缩放的原点</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform-origin</span>: <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">transform-origin</span>: 75% 0;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"笔记","path":"api/tags/笔记.json"}]},{"title":"CSS书写规范","slug":"CSS书写规范","date":"2017-04-04T13:12:45.000Z","updated":"2019-07-16T08:17:01.908Z","comments":true,"path":"api/articles/CSS书写规范.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_97.png","content":"<p>本篇文章转载自 cnblogs，我在看了原文章之后又搜了一些其他相关资料，就有了下面这些对于 CSS 书写规范的总结。CSS 作为前端语言中最好学的一种，很容易造成“不需要规范”的错觉，但其实 CSS 的书写也有很多规范，顺序、命名以及缩写等等，知道并且遵循这些规范不仅可以更容易让别人读懂你的代码，还能方便自己。</p>\n<h2 id=\"CSS-书写顺序\"><a href=\"#CSS-书写顺序\" class=\"headerlink\" title=\"CSS 书写顺序\"></a>CSS 书写顺序</h2><ol>\n<li>位置属性（position, top, right, z-index, display, float 等）</li>\n<li>大小（width, height, padding, margin）</li>\n<li>文字系列（font, line-height, letter-spacing, color- text-align 等）</li>\n<li>背景（background, border 等）</li>\n<li>其他（animation, transition 等）</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_97.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"CSS-书写规范\"><a href=\"#CSS-书写规范\" class=\"headerlink\" title=\"CSS 书写规范\"></a>CSS 书写规范</h2><h3 id=\"使用-CSS-缩写属性\"><a href=\"#使用-CSS-缩写属性\" class=\"headerlink\" title=\"使用 CSS 缩写属性\"></a>使用 CSS 缩写属性</h3><p>CSS 有些属性是可以缩写的，比如 padding, margin, font 等等，这样精简代码同时又能提高用户的阅读体验。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_87.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"去掉小数点前的-“0”\"><a href=\"#去掉小数点前的-“0”\" class=\"headerlink\" title=\"去掉小数点前的 “0”\"></a>去掉小数点前的 “0”</h3><div align=\"center\"><img src=\"/images/hexo_post_98.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"简写命名\"><a href=\"#简写命名\" class=\"headerlink\" title=\"简写命名\"></a>简写命名</h3><p>很多用户都喜欢简写类名，但前提是要让人看懂你的命名才能简写哦！</p>\n<div align=\"center\"><img src=\"/images/hexo_post_121.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"16-进制颜色代码缩写\"><a href=\"#16-进制颜色代码缩写\" class=\"headerlink\" title=\"16 进制颜色代码缩写\"></a>16 进制颜色代码缩写</h3><p>有些颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_94.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"连字符-CSS-选择器命名规范\"><a href=\"#连字符-CSS-选择器命名规范\" class=\"headerlink\" title=\"连字符 CSS 选择器命名规范\"></a>连字符 CSS 选择器命名规范</h3><ol>\n<li>长名称或词组可以使用中横线来为选择器命名。</li>\n<li>不建议使用 “_” 下划线来命名 CSS 选择器，为什么呢？</li>\n</ol>\n<ul>\n<li>输入的时候少按一个 <code>shift</code> 键；</li>\n<li>浏览器兼容问题 （比如使用 _tips 的选择器命名，在 IE6 是无效的）</li>\n<li>能良好区分 JavaScript 变量命名（JS 变量命名是用 “_”）</li>\n</ul>\n<p>这里有一篇破折号与下划线的详细讨论，英文：<a href=\"http://stackoverflow.com/questions/7560813/why-are-dashes-preferred-for-css-selectors-html-attributes\" target=\"_blank\" rel=\"noopener\">点击查看</a> 中文篇：<a href=\"http://www.cnblogs.com/kaiye/archive/2011/06/13/3039046.html\" target=\"_blank\" rel=\"noopener\">点击查看</a> <a href=\"https://book.douban.com/subject/26295140/\" target=\"_blank\" rel=\"noopener\">《CSS Secrets》</a>的译者张鹏对于使用 “_” 还是 “-“ 也阐述了自己的观点，比较了两者的优缺点，可以<a href=\"https://github.com/cssmagic/blog/issues/42\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看</p>\n<div align=\"center\"><img src=\"/images/hexo_post_317.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"不要随意使用-Id\"><a href=\"#不要随意使用-Id\" class=\"headerlink\" title=\"不要随意使用 Id\"></a>不要随意使用 Id</h3><p>id 在 JS 是唯一的，不能多次使用，而使用 class 类选择器却可以重复使用，另外 id 的优先级优先与 class，所以 id 应该按需使用，而不能滥用。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_96.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"为浏览器添加状态前缀\"><a href=\"#为浏览器添加状态前缀\" class=\"headerlink\" title=\"为浏览器添加状态前缀\"></a>为浏览器添加状态前缀</h3><p>有时候可以给选择器添加一个表示状态的前缀，让语义更明了，比如下图是添加了 “.is-” 前缀。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_221.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"CSS-命名规则\"><a href=\"#CSS-命名规则\" class=\"headerlink\" title=\"CSS 命名规则\"></a>CSS 命名规则</h2><p>可以按照功能、位置、结构进行命名，因为命名的出发点就是为了让自己和其他人都能看懂，所以越明白越好：</p>\n<ul>\n<li>一律小写;</li>\n<li>尽量用英文;</li>\n<li>不加中槓和下划线;</li>\n<li>尽量不缩写，除非一看就明白的单词。</li>\n</ul>\n<p>在译文<a href=\"http://jiongks.name/blog/naming-css-stuff-is-really-hard/?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">《CSS命名神马的真心难》</a>中，作者指出可以根据三类情况给定一个 class 名：</p>\n<ul>\n<li>功能性（positive-button、important-text、selected-tab）</li>\n<li>内容性（submit-button、intro-text、profile-photo）</li>\n<li>展示性（green-button、bit-text、sqiggle-border）</li>\n</ul>\n<p>其实，在我看来，命名的首要目的就是“语义化”，而“语义化”有两个方面：方便自己和方便别人，所以不一定所有的语义化都需要按照内容进行命名，class 名的语义化不同于 HTML，可以按照其背后的意义和开发者的意图进行命名</p>\n<p><strong>最常用主要命名</strong>：wrap（外套、最外层）、header（页眉、头部）、nav(导航条)、menu(菜单)、title(栏目标题、一般配合h1\\h2\\h3\\h4标签使用)、content (内容区)、footer(页脚、底部)、logo（标志、可以配合h1标签使用）、banner（广告条，一般在顶部）、copyRight（版权）</p>\n<h2 id=\"CSS-样式表文件命名\"><a href=\"#CSS-样式表文件命名\" class=\"headerlink\" title=\"CSS 样式表文件命名\"></a>CSS 样式表文件命名</h2><ul>\n<li>主要的 master.css</li>\n<li>模块 module.css</li>\n<li>基本共用 base.css</li>\n<li>布局、版面 layout.css</li>\n<li>主题 themes.css</li>\n<li>专栏 columns.css</li>\n<li>文字 font.css</li>\n<li>表单 forms.css</li>\n<li>补丁 mend.css</li>\n<li>打印 print.css</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/AllenChou/p/5911834.html\" target=\"_blank\" rel=\"noopener\">推荐大家使用的CSS书写规范、顺序</a></li>\n<li><a href=\"http://jiongks.name/blog/naming-css-stuff-is-really-hard/\" target=\"_blank\" rel=\"noopener\">CSS命名神马的真心难</a></li>\n<li><a href=\"http://nec.netease.com/standard/css-name.html\" target=\"_blank\" rel=\"noopener\">css命名方式</a></li>\n<li><a href=\"http://getbem.com/\" target=\"_blank\" rel=\"noopener\">BEM——一种css命名解决方案</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000391762\" target=\"_blank\" rel=\"noopener\">BEM —— 源自Yandex的CSS 命名方法论</a></li>\n<li><a href=\"http://blog.jobbole.com/76030/\" target=\"_blank\" rel=\"noopener\">CSS设计模式：OOCSS 和 SMACSS</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"前端可以这样玩儿！","slug":"前端可以这样玩儿！","date":"2017-04-12T13:36:41.000Z","updated":"2019-07-16T08:17:01.916Z","comments":true,"path":"api/articles/前端可以这样玩儿！.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_40.png","content":"<p>本文总结了一些前端冷知识，相信看完之后的你一定会觉得前端为什么如此好玩儿？！（源自 Quora 上的一个帖子，同时又查阅了一些其他资料）</p>\n<h2 id=\"HTML-篇\"><a href=\"#HTML-篇\" class=\"headerlink\" title=\"HTML 篇\"></a>HTML 篇</h2><h3 id=\"浏览器地址栏运行-JavaScript-代码\"><a href=\"#浏览器地址栏运行-JavaScript-代码\" class=\"headerlink\" title=\"浏览器地址栏运行 JavaScript 代码\"></a>浏览器地址栏运行 JavaScript 代码</h3><p>这个相信很多人是知道的，在浏览器地址栏可以直接运行 JavaScript 代码，做法是以 javascript: 开头后跟要执行的语句。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:alert(<span class=\"string\">'hello \bMerrier :)'</span>);</span><br></pre></td></tr></table></figure>\n<p>将以上代码贴到浏览器地址栏回车后 alert 正常执行，一个弹窗神现。需要注意的是如果是通过 copy paste 代码到浏览器地址栏的话，IE 及 Chrome 会自动去掉代码开头的 javascript:，所以需要手动添加起来才能正确执行，而 Firefox 中虽然不会自动去掉，但它根本就不支持在地址栏运行 JS 代码，sigh~</p>\n<h3 id=\"浏览器地址栏运行-HTML-代码\"><a href=\"#浏览器地址栏运行-HTML-代码\" class=\"headerlink\" title=\"浏览器地址栏运行 HTML 代码\"></a>浏览器地址栏运行 HTML 代码</h3><p>如果说上面那条小秘密知道的人还算多的话，这条秘笈知道的人就要少一些了，在非 IE 内核的浏览器地址栏可以直接运行 HTML 代码！比如在地址栏输入以下代码然后回车运行，会出现指定的页面内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:text/html,<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_40.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"你造么，可以把浏览器当编辑器\"><a href=\"#你造么，可以把浏览器当编辑器\" class=\"headerlink\" title=\"你造么，可以把浏览器当编辑器\"></a>你造么，可以把浏览器当编辑器</h3><p>还是浏览器地址栏上做文章，将以下代码贴到地址栏运行后浏览器变成了一个原始而简单的编辑器，与 Windows 自带的 notepad 一样，吼吼。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:text/html, <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">contenteditable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_47.gif\" alt=\"\" width=\"500\"></div>\n\n<p>归根结底多亏了 HTML5 中新加的 contenteditable 属性，当元素指定了该属性后，元素的内容成为可编辑状态。</p>\n<h3 id=\"整个页面变得可编辑\"><a href=\"#整个页面变得可编辑\" class=\"headerlink\" title=\"整个页面变得可编辑\"></a>整个页面变得可编辑</h3><p>将以下代码放到 console 执行后，整个页面将变得可编辑，随意践踏吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.contentEditable=<span class=\"string\">'true'</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_45.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"利用-a-标签自动解析-URL\"><a href=\"#利用-a-标签自动解析-URL\" class=\"headerlink\" title=\"利用 a 标签自动解析 URL\"></a>利用 a 标签自动解析 URL</h3><p>很多时候我们有从一个 URL 中提取域名，查询关键字，变量参数值等的需要，而万万没想到可以让浏览器方便地帮我们完成这一任务而不用我们写正则去抓取。方法就在 JS 代码里先创建一个a标签然后将需要解析的 URL 赋值给 a 的 href 属性，然后就得到了一切我们想要的了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">a.href = <span class=\"string\">'http://www.cnblogs.com/wayou/p/'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.host);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_41.png\" alt=\"\" width=\"500\"></div>\n\n<p>利用这一原理，稍微扩展一下，就得到了一个更加健壮的解析 URL 各部分的通用方法了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =  <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    a.href = url;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        source: url,</span><br><span class=\"line\">        protocol: a.protocol.replace(<span class=\"string\">':'</span>,<span class=\"string\">''</span>),</span><br><span class=\"line\">        host: a.hostname,</span><br><span class=\"line\">        port: a.port,</span><br><span class=\"line\">        query: a.search,</span><br><span class=\"line\">        params: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ret = &#123;&#125;,</span><br><span class=\"line\">                seg = a.search.replace(<span class=\"regexp\">/^\\?/</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>),</span><br><span class=\"line\">                len = seg.length, i = <span class=\"number\">0</span>, s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;i&lt;len;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!seg[i]) &#123; <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">                s = seg[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">                ret[s[<span class=\"number\">0</span>]] = s[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;)(),</span><br><span class=\"line\">        file: (a.pathname.match(<span class=\"regexp\">/\\/([^\\/?#]+)$/i</span>) || [,<span class=\"string\">''</span>])[<span class=\"number\">1</span>],</span><br><span class=\"line\">        hash: a.hash.replace(<span class=\"string\">'#'</span>,<span class=\"string\">''</span>),</span><br><span class=\"line\">        path: a.pathname.replace(<span class=\"regexp\">/^([^\\/])/</span>,<span class=\"string\">'/$1'</span>),</span><br><span class=\"line\">        relative: (a.href.match(<span class=\"regexp\">/tps?:\\/\\/[^\\/]+(.+)/</span>) || [,<span class=\"string\">''</span>])[<span class=\"number\">1</span>],</span><br><span class=\"line\">        segments: a.pathname.replace(<span class=\"regexp\">/^\\//</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"页面拥有-ID-的元素会创建全局变量\"><a href=\"#页面拥有-ID-的元素会创建全局变量\" class=\"headerlink\" title=\"页面拥有 ID 的元素会创建全局变量\"></a>页面拥有 ID 的元素会创建全局变量</h3><p>在一张 HTML 页面中，所有设置了 ID 属性的元素会在 JavaScript 的执行环境中创建对应的全局变量，这意味着 document.getElementById 像人的阑尾一样显得多余了。但实际项目中最好老老实实该怎么写就怎么写，毕竟常规代码出乱子的机会要小得多。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sample\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(sample);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_42.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"加载-CDN-文件时，可以省掉-HTTP-标识\"><a href=\"#加载-CDN-文件时，可以省掉-HTTP-标识\" class=\"headerlink\" title=\"加载 CDN 文件时，可以省掉 HTTP 标识\"></a>加载 CDN 文件时，可以省掉 HTTP 标识</h3><p>现在很流行的 CDN 即从专门的服务器加载一些通用的 JS 和 CSS 文件，出于安全考虑有的 CDN 服务器使用 HTTPS 方式连接，而有的是传统的 HTTP，其实我们在使用时可以忽略掉这个，将它从 URL 中省去。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//domain.com/path/to/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-script-标签保存任意信息\"><a href=\"#利用-script-标签保存任意信息\" class=\"headerlink\" title=\"利用 script 标签保存任意信息\"></a>利用 script 标签保存任意信息</h3><p>将 script 标签设置为 type=’text’ 然后可以在里面保存任意信息，之后可以在 JavaScript 代码中很方便地获取。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This won't display<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'template'</span>).innerHTML</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-篇\"><a href=\"#CSS-篇\" class=\"headerlink\" title=\"CSS 篇\"></a>CSS 篇</h2><h3 id=\"我的鼠标呢？\"><a href=\"#我的鼠标呢？\" class=\"headerlink\" title=\"我的鼠标呢？\"></a>我的鼠标呢？</h3><p>相信你看完以下代码后能够预料到会出现什么效果。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: none<span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的文字模糊效果\"><a href=\"#简单的文字模糊效果\" class=\"headerlink\" title=\"简单的文字模糊效果\"></a>简单的文字模糊效果</h3><p>以下两行简单的 CSS3 代码可达到将文字模糊化处理的目的，出来的效果有点像使用 PS 的滤镜，so cool!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: transparent;</span><br><span class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">#111</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><p>当然你可以将容器设置为 display: table，然后将子元素也就是要垂直居中显示的元素设置为 display: table-cell，然后加上 vertical-align: middle 来实现，但此种实现往往会因为 display: table 而破坏整体布局，那还不如直接用 table 标签了呢。下面这个样式利用了 translate 来巧妙实现了垂直居中样式，需 IE9+。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center-vertical</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比而言，水平居中要简单得多，像上面提到的 text-align: center，经常用到的技巧还有 margin: 0 auto。但对于 margin 大法也只在子元素宽度小于容器宽度时管用，当子元素宽度大于容器宽度时此法失效。如法炮制，利用 left 和 transform 同样可实现水平居中，不过意义不大，毕竟 text-align 和 margin 差不多满足需求了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center-horizontal</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多重边框\"><a href=\"#多重边框\" class=\"headerlink\" title=\"多重边框\"></a>多重边框</h3><p>利用重复指定 box-shadow 来达到多个边框的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS Border with Box-Shadow Example */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">18px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">24px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_43.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"实时编辑-CSS\"><a href=\"#实时编辑-CSS\" class=\"headerlink\" title=\"实时编辑 CSS\"></a>实时编辑 CSS</h3><p>通过设置 style 标签的 display: block 样式可以让页面的 style 标签显示出来，并且加上 contentEditable 属性后可以让样式成为可编辑状态，更改后的样式效果也是实时更新呈现的。此技巧在 IE 下无效。拥有此技能者，逆天也！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:block\"</span> <span class=\"attr\">contentEditable</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        \t<span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">color</span>: blue &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_46.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"创建长宽比固定的元素\"><a href=\"#创建长宽比固定的元素\" class=\"headerlink\" title=\"创建长宽比固定的元素\"></a>创建长宽比固定的元素</h3><p>通过设置父级窗口的 padding-bottom 可以达到让容器保持一定的长度比的目的，这在响应式页面设计中比较有用，能够保持元素不变形。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; position: relative; padding-bottom: 20%;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute; left: 0; top: 0; right: 0; bottom: 0;background-color:yellow;\"</span>&gt;</span></span><br><span class=\"line\">        this content will have a constant aspect ratio that varies based on the width.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_48.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"CSS-中也可以做简单运算\"><a href=\"#CSS-中也可以做简单运算\" class=\"headerlink\" title=\"CSS 中也可以做简单运算\"></a>CSS 中也可以做简单运算</h3><p>通过 CSS 中的 calc 方法可以进行一些简单的运算，从而达到动态指定元素样式的目的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: <span class=\"built_in\">calc</span>(100% - 50px) <span class=\"built_in\">calc</span>(100% - 20px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-篇\"><a href=\"#JavaScript-篇\" class=\"headerlink\" title=\"JavaScript 篇\"></a>JavaScript 篇</h2><h3 id=\"生成随机字符串\"><a href=\"#生成随机字符串\" class=\"headerlink\" title=\"生成随机字符串\"></a>生成随机字符串</h3><p>利用 Math.random 和 toString 生成随机字符串，来自前一阵子看到的一篇<a href=\"http://flippinawesome.org/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/\" target=\"_blank\" rel=\"noopener\">博文</a>。这里的技巧是利用了 toString 方法可以接收一个基数作为参数的原理，这个基数从 2 到 36 封顶。如果不指定，默认基数是 10 进制。略屌！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateRandomAlphaNum</span>(<span class=\"params\">len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rdmString = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; rdmString.length &lt; len; )&#123;</span><br><span class=\"line\">        rdmString += <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">36</span>).substr(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdmString.substr(<span class=\"number\">0</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_44.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"整数的操作\"><a href=\"#整数的操作\" class=\"headerlink\" title=\"整数的操作\"></a>整数的操作</h3><p>JavaScript 中是没有整型概念的，但利用好位操作符可以轻松处理，同时获得效率上的提升。|0 和 ~~ 是很好的一个例子，使用这两者可以将浮点转成整型且效率方面要比同类的 parseInt, Math.round 要快。在处理像素及动画位移等效果的时候会很有用。性能比较<a href=\"http://jsperf.com/math-floor-vs-math-round-vs-parseint/42\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"number\">12.4</span> / <span class=\"number\">4.13</span>) | <span class=\"number\">0</span>; <span class=\"comment\">// 结果为3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = ~~(<span class=\"number\">12.4</span> / <span class=\"number\">4.13</span>); <span class=\"comment\">// 结果为3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重写原生浏览器方法以实现新功能\"><a href=\"#重写原生浏览器方法以实现新功能\" class=\"headerlink\" title=\"重写原生浏览器方法以实现新功能\"></a>重写原生浏览器方法以实现新功能</h3><p>下面的代码通过重写浏览器的 alert 让它可以记录弹窗的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldAlert = <span class=\"built_in\">window</span>.alert,</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.alert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        count ++;</span><br><span class=\"line\">        oldAlert(a + <span class=\"string\">\"\\n You've called alert \"</span> + count + <span class=\"string\">\" times now. Stop, it's evil!\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello World\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"console-显示图片以及为文字加样式\"><a href=\"#console-显示图片以及为文字加样式\" class=\"headerlink\" title=\"console 显示图片以及为文字加样式\"></a>console 显示图片以及为文字加样式</h3><p>在 Chrome 的开发者工具里，console 可以加样式，可以显示缤纷的颜色，甚至图片。简直爽翻了。具体来说，是可以对输出到 console 控制台的文字进行 CSS 控制。格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c需要输出的信息 \"</span>, <span class=\"string\">\"css 代码\"</span>);</span><br></pre></td></tr></table></figure>\n<p>下面是一些已经写好的 console 新玩法代码，可以在 chrome 控制台里面实测（关于 console 的更多玩法，推荐 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console#示例\" target=\"_blank\" rel=\"noopener\">MDN关于console的文档</a>）：</p>\n<h4 id=\"1-3D-Text\"><a href=\"#1-3D-Text\" class=\"headerlink\" title=\"1. 3D Text\"></a>1. 3D Text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c3D Text\"</span>,<span class=\"string\">\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,</span></span><br><span class=\"line\"><span class=\"string\">0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),</span></span><br><span class=\"line\"><span class=\"string\">0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Colorful-CSS\"><a href=\"#2-Colorful-CSS\" class=\"headerlink\" title=\"2. Colorful CSS\"></a>2. Colorful CSS</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%cColorful CSS\"</span>,<span class=\"string\">\"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));</span></span><br><span class=\"line\"><span class=\"string\">background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);</span></span><br><span class=\"line\"><span class=\"string\">filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Rainbow-Text\"><a href=\"#3-Rainbow-Text\" class=\"headerlink\" title=\"3. Rainbow Text\"></a>3. Rainbow Text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%cRainbow Text '</span>, <span class=\"string\">'background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-输出图片\"><a href=\"#4-输出图片\" class=\"headerlink\" title=\"4. 输出图片\"></a>4. 输出图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c\"</span>, <span class=\"string\">\"padding:50px 300px;line-height:120px;background:url('https://ss0.bdstatic.com/5aV1bjqh\\_Q23odCf/static/superman/img/logo/bd\\_logo1_31bdc765.png') no-repeat;\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"不声明第三个变量的值交换\"><a href=\"#不声明第三个变量的值交换\" class=\"headerlink\" title=\"不声明第三个变量的值交换\"></a>不声明第三个变量的值交换</h3><p>我们都知道交换两个变量值的常规做法，那就是声明一个中间变量来暂存。但鲜有人去挑战不声明中间变量的情况，下面的代码给出了这种实现。蛮有创意的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a= [b, b = a][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_49.jpg\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h3><p>在 JavaScript 的世界，万物皆对象。除了 null 和 undefined，其他基本类型数字，字符串和布尔值都有对应有包装对象。对象的一个特征是你可以在它身上直接调用方法。对于数字基本类型，当试图在其身上调用 toString 方法会失败，但用括号括起来后再调用就不会失败了，内部实现是用相应的包装对象将基本类型转为对象。所以 <strong>(1).toString()</strong> 相当于 <strong>new Number(1).toString()</strong>。因此，你的确可以把基本类型数字，字符串，布尔等当对象使用的，只是注意语法要得体。同时我们注意到，JavaScript 中数字是不分浮点和整形的，所有数字其实均是浮点类型，只是把小数点省略了而已，比如你看到的 1 可以写成 1.，这也就是为什么当你试图 1.toString() 时会报错，所以正确的写法应该是这样：<strong>1..toString()</strong>，或者如上面所述加上括号，这里括号的作用是纠正 JS 解析器，不要把 1 后面的点当成小数点。内部实现如上面所述，是将 1. 用包装对象转成对象再调用方法。</p>\n<h3 id=\"If-语句的变形\"><a href=\"#If-语句的变形\" class=\"headerlink\" title=\"If 语句的变形\"></a>If 语句的变形</h3><p>当你需要写一个 if 语句的时候，不妨尝试另一种更简便的方法，用 JavaScript 中的逻辑操作符来代替。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> day = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).getDay() === <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//传统if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (day) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Today is Sunday!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//运用逻辑与代替if</span></span><br><span class=\"line\">day &amp;&amp; alert(<span class=\"string\">'Today is Sunday!'</span>);</span><br></pre></td></tr></table></figure>\n<p>比如上面的代码，首先得到今天的日期，如果是星期天，则弹窗，否则什么也不做。我们知道逻辑操作存在短路的情况，对于逻辑与表达式，只有两者都真才结果才为真，如果前面的 day 变量被判断为假了，那么对于整个与表达式来说结果就是假，所以就不会继续去执行后面的 alert 了，如果前面 day 为真，则还要继续执行后面的代码来确定整个表达式的真假。利用这点达到了 if 的效果。</p>\n<h3 id=\"禁止别人以-iframe-加载你的页面\"><a href=\"#禁止别人以-iframe-加载你的页面\" class=\"headerlink\" title=\"禁止别人以 iframe 加载你的页面\"></a>禁止别人以 iframe 加载你的页面</h3><p>下面的代码已经不言自明了，没什么好多说的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.location != <span class=\"built_in\">window</span>.parent.location) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.parent.location = <span class=\"built_in\">window</span>.location;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.quora.com/Web-Development/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about?utm\\_source=html5weekly&amp;utm\\_medium=email\" target=\"_blank\" rel=\"noopener\">What are the most interesting HTML/JS/DOM/CSS hacks that most web developers don’t know about?</a></li>\n<li><a href=\"http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html\" target=\"_blank\" rel=\"noopener\">前端不为人知的一面–前端冷知识集锦</a></li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"JS","path":"api/tags/JS.json"},{"name":"HTML","path":"api/tags/HTML.json"},{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"读书笔记系列（8）——CSS Secrets","slug":"读书笔记系列（8）——CSS Secrets","date":"2017-07-06T10:21:45.000Z","updated":"2019-07-16T08:17:01.920Z","comments":true,"path":"api/articles/读书笔记系列（8）——CSS Secrets.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_248.png","content":"<p>这本书被誉为近十年来最出色的一本 CSS 相关书籍，作者是被誉为 “CSS一姐” 的 Lea Verou，是 W3C CSS 工作组特邀专家，而我看的是这本书的译本（翻译为 CSS 揭秘），作者叫张鹏，是百姓网的前端架构师；译者翻译的不错，同时还加入了自己的注解，如果对这本书有任何疑问，可以<a href=\"http://book.cssmagic.net\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看译者的注解。作者通过示例介绍了 CSS 的 47 个技巧，并将其归类至 7 大类中，由于这本书的绝大部分内容都是很值得学习的，所以关于这本书的读书笔记可能会比较长，强烈推荐你认真阅读一下这本书，是一本不可多得的 CSS 进阶教材。</p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><h3 id=\"currentColor\"><a href=\"#currentColor\" class=\"headerlink\" title=\"currentColor\"></a>currentColor</h3><p>这是一个特殊的颜色关键字，它是 CSS 中有史以来的第一个变量，举个例子，加入我们想让所有的水平分割线（所有 <code>&lt;hr&gt;</code> 元素）自动与文本的颜色一致，可以这样写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">hr</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: .<span class=\"number\">5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>currentColor 其实不仅仅可以用到 background 属性，还可以用在 border-color、outline-color、text-shadow 和 box-shadow 等等</p>\n<h3 id=\"避免不必要的媒体查询\"><a href=\"#避免不必要的媒体查询\" class=\"headerlink\" title=\"避免不必要的媒体查询\"></a>避免不必要的媒体查询</h3><ul>\n<li>使用百分比长度来取代固定长度，如果实在做不到这一点，也应该尝试使用与视口相关的单位（vw、vh、vmin  和vmax）</li>\n<li>当你需要在较大分辨率下得到固定宽度时，使用 max-width 而不是 width，因为它可以适应较小的分辨率，而无需使用媒体查询。</li>\n<li>不要忘记为替换元素(比如 img、object、video、iframe 等)设置一个 max-width，值为 100%。</li>\n<li>假如背景图片需要完整地铺满一个容器，不管容器的尺寸如何变化，background-size: cover 这个属性都可以做到。但是，我们也要时刻牢记——带宽并不是无限的，因此在移动网页中通过 CSS 把一张大图缩小显示往往是不太明智的。</li>\n<li>当图片(或其他元素)以行列式进行布局时，让视口的宽度来决定列的数量。弹性盒布局(即 Flexbox)或者 display: inline-block 加上常规的文本折行行为，都可以实现这一点。</li>\n<li>在使用多列文本时，指定 column-width(列宽)而不是指定 column-count(列数)，这样它就可以在较小的屏幕上自动显示为单列布局。</li>\n</ul>\n<h3 id=\"合理使用简写\"><a href=\"#合理使用简写\" class=\"headerlink\" title=\"合理使用简写\"></a>合理使用简写</h3><p>以下两行 CSS 代码并不是等价的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rebeccapurple</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">rebeccapurple</span>;</span><br></pre></td></tr></table></figure>\n<p>前者是简写，它可以确保你得到 rebeccapurple 纯色背景 但是如果你用的是展开式的单个属性（background-color），那这个元素的背景最终有可能会显示为一个粉色的渐变图案、一张猫的图片或其他任何东西，因为同时可能会有一条 background-image 声明在起作用。所以展开式属性并不会帮助你清空所有相关的其他属性，从而有可能会被其他属性所干扰。</p>\n<h3 id=\"预处理器不是完美无缺的\"><a href=\"#预处理器不是完美无缺的\" class=\"headerlink\" title=\"预处理器不是完美无缺的\"></a>预处理器不是完美无缺的</h3><ul>\n<li>CSS 的<strong>文件体积</strong>和<strong>复杂度</strong>可能会失控</li>\n<li><strong>调试难度</strong>会增加（但是 SourceMap 正是为了解决这个痛点而生的，它会告诉浏览器哪些编译生成的 CSS 代码对应哪些预处理器 CSS 代码，精确到行号）</li>\n<li>预处理器在开发过程中引入了一定程度的<strong>延时</strong></li>\n<li><strong>学习成本</strong>变高</li>\n<li>预处理器是由人类写出来的，就像所有由 人类写出来的大型程序一样，<strong>它们有它们自己的 bug</strong></li>\n</ul>\n<h3 id=\"预处理器中不可能做到的变量玩法\"><a href=\"#预处理器中不可能做到的变量玩法\" class=\"headerlink\" title=\"预处理器中不可能做到的变量玩法\"></a>预处理器中不可能做到的变量玩法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123; <span class=\"attribute\">--accent-color</span>: purple; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123; <span class=\"attribute\">--accent-color</span>: rebeccapurple; &#125; </span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &#123; <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--accent-color); &#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的意图是：在有序列表中，列表项的背景色将是 rebeccapurple；但在无序列表中，列表项的背景色将是 purple</p>\n<h2 id=\"背景与边框\"><a href=\"#背景与边框\" class=\"headerlink\" title=\"背景与边框\"></a>背景与边框</h2><h3 id=\"半透明边框\"><a href=\"#半透明边框\" class=\"headerlink\" title=\"半透明边框\"></a>半透明边框</h3><p>假设我们想给一个容器设置一层白色背景和一道半透明白色边框，body 的背景会从它的半透明边框透上来。我们最开始的尝试可能是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.5</span>); </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">white</span>;</span><br></pre></td></tr></table></figure>\n<p>但实际上，上面这段代码让 body 的背景从半透明白色边框处透了上来，这实际上得到的效果跟纯白实色的边框看起来完全一样。 所以我们可以通过 background-clip 属性来调整上述默认行为所带来的不便，这个属性的初始值是 border-box，意味着背景会被元素的 border box(边框的外沿框)裁切掉。如果不希望背景侵入边框所在的范围，我们要做的就是把它的值设为 padding-box，这样浏览器就会用内边距的外沿来把背景裁切掉。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.5</span>); </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">white</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-clip</span>: <span class=\"selector-tag\">padding-box</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多重边框\"><a href=\"#多重边框\" class=\"headerlink\" title=\"多重边框\"></a>多重边框</h3><h4 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h4><p>box-shadow 还接受第四个参数（称作”扩张半径”），通过指定正值或负值，可以让投影面积加大或者减小。一个正值的扩张半径加上两个为零的偏移量以及为零的模糊值，得到的“投影”其实就像一道实线边框。这并没有什么了不起的，因为你完全可以用 border 属性来生成完全一样的边框效果。不过 box-shadow 的好处在于，<strong>它支持逗号分隔语法，我们可以创建任意数量的投影</strong>，但是多重投影方案有一些注意事项： 投影不会影响布局，也不会受到 box-sizing 属性的影响。不过，你可以通过<strong>内边距或外边距</strong>(这取决于投影是内嵌和还是外扩的)来额外模拟出边框所需要占据的空间。 通过 box-shadow 创建出的假”边框’出现在元素的外圈，它们并不会响应鼠标事件，比如悬停或点击。可以通过给 box-shadow 加上 inset 关键字，来使投影绘制在元素的内圈，此时还需要额外的内边距来腾出足够的空隙</p>\n<h4 id=\"ouline\"><a href=\"#ouline\" class=\"headerlink\" title=\"ouline\"></a>ouline</h4><p>在某些情况下，你可能只需要两层边框，那就可以先设置一层常规边框，再加上 outline(描边)属性来产生外层的边框。这种方法的优点在于边框样式十分灵活（box-shadow 无法产生虚线边框），而且可以通过 outline-offset 属性来控制它跟元素边缘之间的间距，但是同样有一些需要注意的地方：</p>\n<ul>\n<li>只适用于双层”边框”的场景，因为 outline 不接受逗号</li>\n<li>outline 产生的边框不一定会贴合 border-radius 产生的圆角</li>\n<li>对于 outline 的表现，各个浏览器可能会有所不同，最好在不同浏览器中完整地测试最终效果</li>\n</ul>\n<h3 id=\"灵活的背景定位\"><a href=\"#灵活的背景定位\" class=\"headerlink\" title=\"灵活的背景定位\"></a>灵活的背景定位</h3><h4 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h4><p>background-position 允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">code-pirate</span><span class=\"selector-class\">.svg</span>) <span class=\"selector-tag\">no-repeat</span> <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: <span class=\"selector-tag\">right</span> 20<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">bottom</span> 10<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"background-origin\"><a href=\"#background-origin\" class=\"headerlink\" title=\"background-origin\"></a>background-origin</h4><p>背景图片的 background-position 属性是默认相对于 padding box 的左上角的，但是 background-origin 可以改变这种行为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(\"<span class=\"selector-tag\">code-pirate</span><span class=\"selector-class\">.svg</span>\") <span class=\"selector-tag\">no-repeat</span> <span class=\"selector-id\">#58abottom</span> <span class=\"selector-tag\">right</span>; <span class=\"comment\">/* 或 100% 100% */</span> </span><br><span class=\"line\"><span class=\"selector-tag\">background-origin</span>: <span class=\"selector-tag\">content-box</span>;</span><br></pre></td></tr></table></figure>\n<p>此时，background-position 将以内容区的边缘作为基准，也就是此时图片距离边角的偏移量就跟内边距保持一致了</p>\n<h4 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc\"></a>calc</h4><p>把背景图片定位到距离底边 10px 且距离右边 20px 的位置。如果我们仍然以左上角偏移的思路来考虑，其实就是希望它有一个 100% - 20px 的水平偏移量，以及 100% - 10px 的垂直偏移量。calc() 函数可以完美地在 background-position 属性中使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(\"<span class=\"selector-tag\">code-pirate</span><span class=\"selector-class\">.svg</span>\") <span class=\"selector-tag\">no-repeat</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>) <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 10<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"边框内圆角\"><a href=\"#边框内圆角\" class=\"headerlink\" title=\"边框内圆角\"></a>边框内圆角</h3><p>有时我们需要一个容器，只在内侧有圆角，而边框或描边的四个角在外部仍然保持直角的形状，如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_248.png\" alt=\"\" width=\"400\"></div>\n\n<p>如果只需要达成简单地实色效果，我们可以只用一个元素：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">tan</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: <span class=\"selector-class\">.8em</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">padding</span>: 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 0 0 0 <span class=\"selector-class\">.6em</span> <span class=\"selector-id\">#655</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">outline</span>: <span class=\"selector-class\">.6em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#655</span>;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码产生的视觉效果如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_249.png\" alt=\"\" width=\"\"></div>\n\n<p>我们受益于两个事实：<strong>描边并不会跟着元素的圆角走(因而显示出直角)，但 box-shadow 却是会的</strong>。因此，如果我们把这两者叠加到一起，box-shadow 会刚好填补描边和容器圆角之间的空隙，这两者的组合达成了我们想要的效果。</p>\n<h3 id=\"条纹背景\"><a href=\"#条纹背景\" class=\"headerlink\" title=\"条纹背景\"></a>条纹背景</h3><p>假如我们有一条基本的垂直现行渐变，颜色从 #fb3 过渡到 #58a：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 20%, <span class=\"selector-id\">#58a</span> 80%);</span><br></pre></td></tr></table></figure>\n<h4 id=\"水平条纹\"><a href=\"#水平条纹\" class=\"headerlink\" title=\"水平条纹\"></a>水平条纹</h4><p>现在容器顶部的 20% 区域被填充为 #fb3 实色，而底部 20% 区域被 填充为 #58a 实色。真正的渐变只出现在容器 60% 的高度区域。如果我们把两个色标重合在一起（改为 50% 和 50%）， 会发生什么?</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 50%, <span class=\"selector-id\">#58a</span> 50%);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_250.png\" alt=\"\" width=\"\"></div>\n\n<p>所以，本质上，我们通过垂直线性渐变创建了两条巨大的水平条纹 我们还可以通过 background-size 来调整其尺寸，然后由于背景在默认情况下是重复平铺的，整个容器其实已经被填满了水平条纹：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 50%, <span class=\"selector-id\">#58a</span> 50%); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_251.png\" alt=\"\" width=\"\"></div>\n\n<p>还有一条规范是：如果某个色标的位置值比整个列表中在它之前的色标的位置值都要小，则该色标的位置值会被设置为它前面所有色标位置值的最大值。这意味着，如果我们把第二个色标的位置值设置为 0，那它的位置就总是会被浏览器调整为前一个色标的位置值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 30%, <span class=\"selector-id\">#58a</span> 0); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p>如果要创建超过两种颜色的条纹，也是很容易的。举例来说，下面的代码可以生成三种颜色的水平条纹：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 33<span class=\"selector-class\">.3</span>%,<span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 66<span class=\"selector-class\">.6</span>%, <span class=\"selector-tag\">yellowgreen</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 45<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"垂直条纹\"><a href=\"#垂直条纹\" class=\"headerlink\" title=\"垂直条纹\"></a>垂直条纹</h4><p>我们只需要在开头加上一个额外的参数来指定渐变的方向（但是我们还需要把 background-size 的值颠倒一下）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">right</span>, <span class=\"comment\">/* 或 90deg */</span> <span class=\"selector-id\">#fb3</span> 50%, <span class=\"selector-id\">#58a</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 100%;</span><br></pre></td></tr></table></figure>\n<h4 id=\"斜向条纹\"><a href=\"#斜向条纹\" class=\"headerlink\" title=\"斜向条纹\"></a>斜向条纹</h4><p>我们需要用单个贴片包包含四条条纹，而不是两条，只有这样才可能做到无缝拼接：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_252.png\" alt=\"\" width=\"\"></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>,<span class=\"selector-id\">#fb3</span> 25%, <span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 50%,<span class=\"selector-id\">#fb3</span> 0, <span class=\"selector-id\">#fb3</span> 75%, <span class=\"selector-id\">#58a</span> 0); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p>但是，如果我们想得到条纹宽度为 15px 的背景，则需要借助<strong>勾股定理</strong>进行计算，具体原理就不在赘述，看上面图应该能看出来</p>\n<h4 id=\"更好的斜向条纹\"><a href=\"#更好的斜向条纹\" class=\"headerlink\" title=\"更好的斜向条纹\"></a>更好的斜向条纹</h4><p>一个鲜为人知的真相是 linear-gradient() 和 radial-gradient() 还各有一个循环式的加强版：repeating-linear-gradient() 和 repeating-radial-gradient()。 它们的工作方式跟前两者类似，只有一点不同：<strong>色标是无限循环重复的，直到填满整个背景</strong>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">repeating-linear-gradient</span>(60<span class=\"selector-tag\">deg</span>,<span class=\"selector-id\">#fb3</span>, <span class=\"selector-id\">#fb3</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 30<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_253.png\" alt=\"\" width=\"\"></div>\n\n<p>在这个方法中，不论条纹的角度如何，我们在创建双色条纹时都需要用到四个色标</p>\n<h4 id=\"灵活的同色系条纹\"><a href=\"#灵活的同色系条纹\" class=\"headerlink\" title=\"灵活的同色系条纹\"></a>灵活的同色系条纹</h4><p>如果我们想要的条纹图案并不是由差异极大的几种颜色组成的，而是属于同一色系，只是在明度方面有轻微差异的话，我们可以<strong>把最深的颜色指定为背景色，同时把半透明白色的条纹叠加在背景色之上来得到浅色条纹</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">repeating-linear-gradient</span>(30<span class=\"selector-tag\">deg</span>,</span><br><span class=\"line\">                    <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.1</span>),</span><br><span class=\"line\">                    <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.1</span>) 15<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">                    <span class=\"selector-tag\">transparent</span> 0, <span class=\"selector-tag\">transparent</span> 30<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n<p>我们现在只需要修改一个地方就可以改变所有颜色了。我们还得到了一个额外的好处，对于那些不支持 CSS 渐变的浏览器来说，这里的背景色还起到了回退的作用</p>\n<h3 id=\"复杂的背景图案\"><a href=\"#复杂的背景图案\" class=\"headerlink\" title=\"复杂的背景图案\"></a>复杂的背景图案</h3><h4 id=\"网格\"><a href=\"#网格\" class=\"headerlink\" title=\"网格\"></a>网格</h4><p>做法：<strong>把水平和垂直的条纹叠加起来</strong>；在某些情况下，我们希望网格中每个格子的大小可以调整，而网格线条的粗细同时保持固定。此时可以使用长度而不是百分比作为色标。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span><span class=\"selector-pseudo\">:linear-gradient(white</span> 1<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0),<span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">white</span> 1<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"波点\"><a href=\"#波点\" class=\"headerlink\" title=\"波点\"></a>波点</h4><p>径向渐变能够创建的最简单的图案是圆点的阵列；我们可以生成两层圆点阵列图案，并把它们的背景定位错开，这样就可以得到真正的波点图案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: #655;</span><br><span class=\"line\">background-image: radial-gradient(tan 30%, transparent 0),radial-gradient(tan 30%, transparent 0); </span><br><span class=\"line\">background-size: 30px 30px;</span><br><span class=\"line\">background-position: 0 0, 15px 15px;</span><br></pre></td></tr></table></figure>\n<h4 id=\"棋盘\"><a href=\"#棋盘\" class=\"headerlink\" title=\"棋盘\"></a>棋盘</h4><p>棋盘图案是可以通过平铺生成的，平铺成这个图案的典型贴片包含两种不同颜色的方块，且相互间隔，这里的窍门在于用两个直角三角形来拼合出我们想要的方块</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#eee</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#bbb</span> 25%, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 75%, <span class=\"selector-id\">#bbb</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#bbb</span> 25%, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 75%, <span class=\"selector-id\">#bbb</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 0, 15<span class=\"selector-tag\">px</span> 15<span class=\"selector-tag\">px</span>,15<span class=\"selector-tag\">px</span> 15<span class=\"selector-tag\">px</span>, 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS3图案库\"><a href=\"#CSS3图案库\" class=\"headerlink\" title=\"CSS3图案库\"></a>CSS3图案库</h4><p><a href=\"http://lea.verou.me/css3patterns/\" target=\"_blank\" rel=\"noopener\">lea.verou.me/css3patterns</a>，展示了 CSS 渐变早在 2011 年就能够实现的效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_254.png\" alt=\"\" width=\"\"></div>\n\n<h4 id=\"SVG图案库\"><a href=\"#SVG图案库\" class=\"headerlink\" title=\"SVG图案库\"></a>SVG图案库</h4><p><a href=\"http://philbit.com/svgpatterns\" target=\"_blank\" rel=\"noopener\">philbit.com/svgpatterns</a>，这个网站是 CSS 图案库的 SVG 版实现</p>\n<h4 id=\"Bennett-Feely-的图案库\"><a href=\"#Bennett-Feely-的图案库\" class=\"headerlink\" title=\"Bennett Feely 的图案库\"></a>Bennett Feely 的图案库</h4><p><a href=\"http://bennettfeely.com/gradients\" target=\"_blank\" rel=\"noopener\">http://bennettfeely.com/gradients</a>，采用混合模式生成的 CSS 图案库</p>\n<h3 id=\"伪随机背景\"><a href=\"#伪随机背景\" class=\"headerlink\" title=\"伪随机背景\"></a>伪随机背景</h3><p>重现大自然的随机性是一个挑战，因为 CSS 本身没有提供任何随机功能。</p>\n<p>为了更真实地模拟条纹的随机性，我们接下来可能会想到，把这组条纹从一个平面拆散为多个图层:一种颜色作为底色，另三种颜色作为条纹，然后再让条纹以不同的间隔进行重复平铺：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(20, 40%, 90%); </span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#fb3</span> 10<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#ab4</span> 20<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#655</span> 20<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 80<span class=\"selector-tag\">px</span> 100%, 60<span class=\"selector-tag\">px</span> 100%, 40<span class=\"selector-tag\">px</span> 100%;</span><br></pre></td></tr></table></figure>\n<p>但是我们很容易发现：<strong>各层背景图像以不同间距重复数次后再次统一对齐，而贴片的尺寸实际上就是所有 background-size 的最小公倍数</strong>，而 40、60 和 80 的最小公倍数正是 240。 所以为了模拟随机，我们需要把贴片的尺寸最大化：<strong>为了让最小公倍数最大化，这些数字最好是“相对质数”。</strong>这个技巧被 Alex Walker 定名为“蝉原则”，他最先提出了通过质数来 增加随机真实性的想法。请注意这个方法不仅适用于背景，还可以用于其他 涉及有规律重复的情况：</p>\n<ul>\n<li>在照片图库中，为每幅图片应用细微的伪随机旋转效果时，可以使 用多个 :nth-child(a) 选择符，且让 a 是质数。</li>\n<li>如果要生成一个动画，而且想让它看起来不是按照明显的规律在 循环时，我们可以应用多个时长为质数的动画。</li>\n</ul>\n<h3 id=\"连续的图像边框\"><a href=\"#连续的图像边框\" class=\"headerlink\" title=\"连续的图像边框\"></a>连续的图像边框</h3><p>有时我们想把一幅图案或图片应用为边框，而不是背景，达到下面的展示效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_255.png\" alt=\"\" width=\"\"></div>\n\n<p>此时 border-image 是不可能做到的，因为它无法随着元素宽高和边框厚度的变化而变化。所以我们的思路是<strong>在石雕背景图片之上，再叠加一层纯白的实色背景</strong>。为了让下层的图片背景透过边框区域显示出来，我们需要给两层背景指定不同的 background-clip 值。最后一个要点在于，我们只能在多重背景的最底层设置背景色，因此需要用一道从白色过渡到白色的 CSS 渐变来模拟出纯白实色背景的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">white</span>),<span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">stone-art</span><span class=\"selector-class\">.jpg</span>); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">cover</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-clip</span>: <span class=\"selector-tag\">padding-box</span>, <span class=\"selector-tag\">border-box</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-origin</span>: <span class=\"selector-tag\">border-box</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"老式信封样式的边框\"><a href=\"#老式信封样式的边框\" class=\"headerlink\" title=\"老式信封样式的边框\"></a><a href=\"http://play.csssecrets.io/vintage-envelope\" target=\"_blank\" rel=\"noopener\">老式信封样式的边框</a></h4><p>将上面的技巧用在渐变图案上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">white</span>) <span class=\"selector-tag\">padding-box</span>,</span><br><span class=\"line\">            <span class=\"selector-tag\">repeating-linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>,</span><br><span class=\"line\">              <span class=\"selector-tag\">red</span> 0, <span class=\"selector-tag\">red</span> 12<span class=\"selector-class\">.5</span>%,</span><br><span class=\"line\">              <span class=\"selector-tag\">transparent</span> 0, <span class=\"selector-tag\">transparent</span> 25%,</span><br><span class=\"line\">              <span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 37<span class=\"selector-class\">.5</span>%,</span><br><span class=\"line\">              <span class=\"selector-tag\">transparent</span> 0, <span class=\"selector-tag\">transparent</span> 50%)</span><br><span class=\"line\">              0 / 5em 5em;</span><br></pre></td></tr></table></figure>\n<h4 id=\"蚂蚁行军边框\"><a href=\"#蚂蚁行军边框\" class=\"headerlink\" title=\"蚂蚁行军边框\"></a><a href=\"http://play.csssecrets.io/marching-ants\" target=\"_blank\" rel=\"noopener\">蚂蚁行军边框</a></h4><p>为了创建蚂蚁行军效果，我们将会用到“老式信封”技巧的一个变种。我们将把条纹转变为黑白两色，并把边框的宽度减少至 1px，然后再把 background-size 改为某个合适的值。最后，我们把 background-position 以动画的方式改变为 100%，就可以让它滚动起来了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> ants &#123; <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-position</span>: <span class=\"number\">100%</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.marching-ants</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent; <span class=\"attribute\">background</span>:</span><br><span class=\"line\">        <span class=\"built_in\">linear-gradient</span>(white, white) padding-box,</span><br><span class=\"line\">        <span class=\"built_in\">repeating-linear-gradient</span>(-45deg,</span><br><span class=\"line\">          black 0, black 25%, white 0, white 50%</span><br><span class=\"line\">        ) <span class=\"number\">0</span> / .<span class=\"number\">6em</span> .<span class=\"number\">6em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: ants <span class=\"number\">12s</span> linear infinite; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a><a href=\"http://play.csssecrets.io/footnote\" target=\"_blank\" rel=\"noopener\">脚注</a></h4><p>我们可以用 border-image 搭配渐变图案实现顶部边框被裁切的效果，就像一般的脚注那样，我们所需要的就是 border-image 属性再加上一条由渐变生成的垂直条纹，并把要裁切的长度在渐变中写好。边框线的粗细交给 border-width 来控制：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-top</span>: <span class=\"selector-class\">.2em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-image</span>: 100% 0 0 <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>,<span class=\"selector-tag\">currentColor</span> 4<span class=\"selector-tag\">em</span>,<span class=\"selector-tag\">transparent</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">padding-top</span>: 1<span class=\"selector-tag\">em</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h2><h3 id=\"自适应的椭圆\"><a href=\"#自适应的椭圆\" class=\"headerlink\" title=\"自适应的椭圆\"></a>自适应的椭圆</h3><p>我们想要达到这样效果：<strong>如果宽高相等，就显示为一个圆；如果宽高不等，就显示为一个椭圆</strong> border-radius 可以单独指定水平和垂直半径，用一个斜杠（/）分隔这两个值即可；同时，它不仅可以接受长度值，还可以接受百分比值，这个百分比值会基于元素的尺寸进行解析。这意味着相同的百分比可能会计算出不同的水平和垂直半径，因此可以这样实现自适应椭圆：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: 50%;</span><br></pre></td></tr></table></figure>\n<h3 id=\"半椭圆\"><a href=\"#半椭圆\" class=\"headerlink\" title=\"半椭圆\"></a>半椭圆</h3><div align=\"center\"><img src=\"/images/hexo_post_256.png\" alt=\"\" width=\"\"></div>\n\n<p>我们可以为四个角提供完全不同的水平和垂直半径，这意味着当 border-radius 的值为 10px / 5px 20px 时，其效果相当于 10px 10px 10px 10px / 5px 20px 5px 20px；所以我们很容易写出半椭圆的 CSS 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-radius: 50% / 100% 100% 0 0;</span><br></pre></td></tr></table></figure>\n<p>举一反三，沿纵轴劈开的半椭圆：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-radius: 100% 0 0 100% / 50%;</span><br></pre></td></tr></table></figure>\n<p>四分之一椭圆（其中一个角的水平和垂直半径值都需要是 100%，而其他三个角都不能设为圆角）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: 100% 0 0 0;</span><br></pre></td></tr></table></figure>\n<p>但是很遗憾，<strong>border-radius 是无法生成八分之一椭圆，三分之一椭圆的</strong>！</p>\n<h3 id=\"平行四边形\"><a href=\"#平行四边形\" class=\"headerlink\" title=\"平行四边形\"></a>平行四边形</h3><p>我们可以通过 skew() 的变形属性来对某个矩形进行斜向拉伸，但是这回导致它的内容也发生了斜向变形。所以我们的思路是<strong>把所有样式（背景、边框等）应用到伪元素上，然后再对伪元素进行变形</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    /\\* 其他的文字颜色、内边距等样式...... */</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>; <span class=\"comment\">/* 用伪元素来生成一个矩形 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>; <span class=\"comment\">/* 防止伪元素的背景遮住内容 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#58a</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(45deg); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个技巧<strong>适用于其他任何变形样式</strong>，当我们想<strong>变形一个元素而不想变形它的内容</strong>时就很有用：</p>\n<ul>\n<li>可以用<a href=\"http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/\" target=\"_blank\" rel=\"noopener\">在IE下实现多重背景</a></li>\n<li>实现“边框内圆角”效果</li>\n<li>可以用来为某一层“背景”<a href=\"http://nicolasgallagher.com/css-background-image-hacks\" target=\"_blank\" rel=\"noopener\">单独设置类似opacity这样的属性</a></li>\n<li>模拟多层边框</li>\n</ul>\n<h3 id=\"菱形图片\"><a href=\"#菱形图片\" class=\"headerlink\" title=\"菱形图片\"></a><a href=\"http://play.csssecrets.io/diamond-clip\" target=\"_blank\" rel=\"noopener\">菱形图片</a></h3><p>主要思路是使用 clip-path 属性，它最大的缺陷在于其浏览器支持程度还很有限。但是，它可以平稳退化（只是没有裁切效果而已），因此它至少有资格成为我们的备选方案 我们将会使用 polygon()（多边形）函数来指定一个菱形。实际上，它允许我们用一系列（以逗号分隔的）坐标点来指定任意的多边形。我们甚至可以使用百分比值，它们会解析为元素自身的尺寸：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">clip-path</span>: <span class=\"selector-tag\">polygon</span>(50% 0, 100% 50%, 50% 100%, 0 50%);</span><br></pre></td></tr></table></figure>\n<p>clip-path 所能创造的奇迹还不止于此。这个属性甚至可以参与动画，只要我们的动画是在同一种形状函数(比如这里是 polygon())之间进行的，而且点的数量是相同的。因此，如果我们希望图片在鼠标悬停时平滑地扩展为完整的面积，只需要这样做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clip-path</span>: <span class=\"built_in\">polygon</span>(50% 0, 100% 50%, 50% 100%, 0 50%);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span> clip-path;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clip-path</span>: <span class=\"built_in\">polygon</span>(0 0, 100% 0, 100% 100%,0 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MDN 关于 clip-path 的文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path</a></p>\n<h3 id=\"切角效果\"><a href=\"#切角效果\" class=\"headerlink\" title=\"切角效果\"></a>切角效果</h3><p>把角切掉不仅是为了省钱，它还是一种非常流行的设计风格，不论是在印刷媒介还是在网页设计中都是如此。</p>\n<h4 id=\"用渐变实现\"><a href=\"#用渐变实现\" class=\"headerlink\" title=\"用渐变实现\"></a>用渐变实现</h4><p>假设我们只需要一个角被切掉，以右下角为例，可以充分利用渐变的一大特性：渐变可以接受一个角度（比如 45deg）作为方向，而且色标的位置信息也可以是绝对的长度值，不受容器尺寸的影响；综上，我们需要一个线性渐变，把一个透明色标放在切角处，然后在相同位置设置另一个色标，并且把它的颜色设置为我们想要的背景色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0);</span><br></pre></td></tr></table></figure>\n<p><strong>左下角和右下角都有切角效果</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">                <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">            <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">                <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 50% 100%; </span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>四个角都有切角效果</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(135<span class=\"selector-tag\">deg</span>,  <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-135deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 50% 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的可维护性并不理想，使用<strong>预处理器的 mixin</strong> 可以帮助我们减少代码的重复度</p>\n<h4 id=\"弧形切角\"><a href=\"#弧形切角\" class=\"headerlink\" title=\"弧形切角\"></a>弧形切角</h4><p>很多人也把这种效果成为“内凹圆角”，因为它看起来就像是圆角的反向版本。唯一的区别在于，我们会用<strong>径向渐变</strong>来替代上述线性渐变：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_257.png\" alt=\"\" width=\"400\"></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 50% 50%; </span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clip-path-实现切角\"><a href=\"#clip-path-实现切角\" class=\"headerlink\" title=\"clip-path 实现切角\"></a>clip-path 实现切角</h4><p>裁切路径最神奇的地方在于我们<strong>可以同时使用百分比数值（它会以元素自身的宽高作为基数度进行换算）和绝对长度值</strong>，从而提供巨大的灵活性。举个例子，如果用裁切路径将一个元素切出 20px 大小的斜面切角，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">clip-path</span>: <span class=\"selector-tag\">polygon</span>(</span><br><span class=\"line\">    20<span class=\"selector-tag\">px</span> 0, <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>) 0, 100% 20<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">    100% <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>), <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>) 100%,</span><br><span class=\"line\">    20<span class=\"selector-tag\">px</span> 100%, 0 <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>), 0 20<span class=\"selector-tag\">px</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>但是它有一个很明显的缺点，就是<strong>当内边距不够宽时，它会裁切掉文本</strong>，因为它只能对元素做统一的裁切，并不能区分元素的各个部分</p>\n<h3 id=\"梯形标签页\"><a href=\"#梯形标签页\" class=\"headerlink\" title=\"梯形标签页\"></a><a href=\"http://play.csssecrets.io/trapezoid-tabs\" target=\"_blank\" rel=\"noopener\">梯形标签页</a></h3><p>一直以来，梯形都是众所周知难以用 CSS 生成的形状，网页开发者如果没有用精心设计的背景图片来实现梯形，那多半就是在用伪元素的边框来模拟梯形两侧的斜边，而我们的思路是通过 3D 变形，将矩形进行3D旋转，就可以创建一个梯形。但由于旋转之后，元素的尺寸会变小，同时会稍微下移，所以我们需要让其在3D空间旋转时固定底边（transform-origin），同时通过 scale() 方法改变它的尺寸：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scaleY</span>(1<span class=\"selector-class\">.3</span>) <span class=\"selector-tag\">perspective</span>(<span class=\"selector-class\">.5em</span>) <span class=\"selector-tag\">rotateX</span>(5<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">transform-origin</span>: <span class=\"selector-tag\">bottom</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_258.png\" alt=\"\" width=\"\"></div>\n\n<p>同时，我们只需要把 transform-origin 改成 bottom left 或 bottom right，就可以立即得到左侧倾斜或右侧倾斜的标签页</p>\n<h3 id=\"简单的饼图\"><a href=\"#简单的饼图\" class=\"headerlink\" title=\"简单的饼图\"></a>简单的饼图</h3><p>我们可以通过渐变来将一个圆形的左右两半设置为不同的颜色，然后通过伪元素的旋转不同角度来实现不同角度的简单饼图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_259.png\" alt=\"\" width=\"\"></div>\n\n<p>由于已经找到了实现任意比率的方法，我们甚至可以用 CSS 动画来实现一个饼图从 0 变化到 100% 的动画，从而得到一个<a href=\"http://play.csssecrets.io/pie-animated\" target=\"_blank\" rel=\"noopener\">炫酷的进度指示器</a>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> spin &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(.5turn); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> bg &#123;</span><br><span class=\"line\">    50% &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#655</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pie</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span> <span class=\"number\">100%</span> <span class=\"number\">100%</span> <span class=\"number\">0</span> / <span class=\"number\">50%</span>; </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: inherit; </span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: spin <span class=\"number\">3s</span> linear infinite, bg <span class=\"number\">6s</span> step-end infinite;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们需要一个静态的任意比率的饼图，可以利用<strong>负的动画延时</strong>来直接跳至动画中的任意时间 点，并且定格在那里。举例来说，如果动画持续时间定为 6s，我们只需要把 animation-delay 设置为 -1.2s，就能显示出 20% 的比率。最终的效果：<a href=\"http://play.csssecrets.io/pie-static\" target=\"_blank\" rel=\"noopener\">play.csssecrets.io/pie-static</a> 我们还可以通过 SVG 实现简单的饼图，与伪元素相比，SVG 的方案具有不少优点：</p>\n<ul>\n<li>增加第三种颜色非常容易</li>\n<li>不需要特别担心打印，因为 SVG 元素本身被视为页面内容</li>\n<li>可以用内联样式指定颜色这意味着我们可以通过脚本控制颜色</li>\n</ul>\n<p>SVG 方案实现的效果：<a href=\"http://play.csssecrets.io/pie-svg\" target=\"_blank\" rel=\"noopener\">play.csssecrets.io/pie-svg</a></p>\n<h2 id=\"视觉效果\"><a href=\"#视觉效果\" class=\"headerlink\" title=\"视觉效果\"></a>视觉效果</h2><h3 id=\"单侧投影\"><a href=\"#单侧投影\" class=\"headerlink\" title=\"单侧投影\"></a><a href=\"http://play.csssecrets.io/shadow-one-side\" target=\"_blank\" rel=\"noopener\">单侧投影</a></h3><p>解决方案来自 box-shadow 鲜为人知的第四个长度参数，称作扩张半径。这个参数会根据你指定的值去扩大或 (当指定负值时)缩小投影的尺寸。举例来说，一个 -5px 的扩张半径会把投影的宽度和高度各减少 10px(即每边各  5px)。如果给投影应用一个正的垂直偏移量，我们就会在元素的底部看到一道投影，而元素的另外三侧是没有投影的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 0 5<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-4px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"邻边投影\"><a href=\"#邻边投影\" class=\"headerlink\" title=\"邻边投影\"></a><a href=\"http://play.csssecrets.io/shadow-2-sides\" target=\"_blank\" rel=\"noopener\">邻边投影</a></h4><p>把一个 black、6px 的投影设置到右侧和底部可以这样做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 3<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> 6<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-3px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双侧投影\"><a href=\"#双侧投影\" class=\"headerlink\" title=\"双侧投影\"></a><a href=\"http://play.csssecrets.io/shadow-opposite-sides\" target=\"_blank\" rel=\"noopener\">双侧投影</a></h4><p>唯一的办法是用两块投影（每边各一块）来达到目的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 5<span class=\"selector-tag\">px</span> 0 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-5px</span> <span class=\"selector-tag\">black</span>, </span><br><span class=\"line\">            <span class=\"selector-tag\">-5px</span> 0 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-5px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不规则投影\"><a href=\"#不规则投影\" class=\"headerlink\" title=\"不规则投影\"></a>不规则投影</h3><p>当我们想给一个矩形或其他能用 border-radius 生成的形状加投影时，box-shadow 的表现都堪称完美。但是，当元素添加了一些伪元素或半透明的装饰之后，它就有些力不从心了，因为 border-radius 会无耻地忽视透明部分：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_260.png\" alt=\"\" width=\"\"></div>\n\n<p>我们的解决方案是利用 filter 的新属性来指定滤镜效果，比如上面的投影效果可以这样来写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">drop-shadow</span>(2<span class=\"selector-tag\">px</span> 2<span class=\"selector-tag\">px</span> 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.5</span>));</span><br></pre></td></tr></table></figure>\n<p>实现效果：<a href=\"http://play.csssecrets.io/drop-shadow\" target=\"_blank\" rel=\"noopener\">play.csssecrets.io/drop-shadow</a></p>\n<h3 id=\"染色效果\"><a href=\"#染色效果\" class=\"headerlink\" title=\"染色效果\"></a>染色效果</h3><p>首先可以去<a href=\"https://2014.cssconf.com/\" target=\"_blank\" rel=\"noopener\">CSSConf 官网</a>欣赏一下讲师照片的染色效果，当鼠标悬停或获得焦点时，照片将显示为全彩的样式</p>\n<h4 id=\"基于滤镜的方案\"><a href=\"#基于滤镜的方案\" class=\"headerlink\" title=\"基于滤镜的方案\"></a><a href=\"http://play.csssecrets.io/color-tint-filter\" target=\"_blank\" rel=\"noopener\">基于滤镜的方案</a></h4><p>filter 属性提供了多种关于色调调整的方法，下面的代码可以实现染色效果的过渡动画：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">5s</span> filter;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(1) <span class=\"built_in\">saturate</span>(4) <span class=\"built_in\">hue-rotate</span>(295deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:hover</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: none; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于混合模式的方案\"><a href=\"#基于混合模式的方案\" class=\"headerlink\" title=\"基于混合模式的方案\"></a><a href=\"http://play.csssecrets.io/color-tint\" target=\"_blank\" rel=\"noopener\">基于混合模式的方案</a></h4><p>使用 background-blend-mode 属性可以让每层背景跟它的下层背景进行混合：</p>\n<p>HTML 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tinted-image\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">style</span>=<span class=\"string\">\"background-image:url(tiger.jpg)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tinted-image</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">640px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">440px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover; </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">hsl</span>(335, 100%, 50%); </span><br><span class=\"line\">    <span class=\"attribute\">background-blend-mode</span>: luminosity; </span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">5s</span> background-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tinted-image</span><span class=\"selector-pseudo\">:hover</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"毛玻璃效果\"><a href=\"#毛玻璃效果\" class=\"headerlink\" title=\"毛玻璃效果\"></a><a href=\"http://play.csssecrets.io/frosted-glass\" target=\"_blank\" rel=\"noopener\">毛玻璃效果</a></h3><p>我们想要达到下面这种效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_261.png\" alt=\"\" width=\"\"></div>\n\n<p>我们的实现方案是利用伪元素实现模糊背景，但由于模糊效果在接近边缘处会逐渐消退，所以我们需要让伪元素相对其宿主元素的尺寸再向外扩大至少模糊半径的距离，然后再对宿主元素应用 overflow:hidden 来将多余的模糊区域裁切掉，最终代码如下所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">main</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"tiger.jpg\"</span>) <span class=\"number\">0</span> / cover fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsla</span>(0,0%,100%,.3); </span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(20px);</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: -<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"折角效果\"><a href=\"#折角效果\" class=\"headerlink\" title=\"折角效果\"></a>折角效果</h3><h4 id=\"45°折角的解决方案\"><a href=\"#45°折角的解决方案\" class=\"headerlink\" title=\"45°折角的解决方案\"></a><a href=\"http://play.csssecrets.io/folded-corner\" target=\"_blank\" rel=\"noopener\">45°折角的解决方案</a></h4><p>我们先根据“切角效果”一节中的渐变方案实现一个右上角的斜面切角，然后增加另一层渐变来生成一个三角形并将其定位在右上角，从而实现翻折效果，需要注意的是<strong>这个渐变的两个色标需要在正中央重合</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; <span class=\"comment\">/* 回退样式 */</span> </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">transparent</span> 50%, <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>) 0)</span><br><span class=\"line\">        no-repeat 100% 0 / 2em 2em,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-135deg</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">transparent</span> 1<span class=\"selector-class\">.5em</span>, <span class=\"selector-id\">#58a</span> 0);</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他角度的解决方案\"><a href=\"#其他角度的解决方案\" class=\"headerlink\" title=\"其他角度的解决方案\"></a><a href=\"http://play.csssecrets.io/folded-corner-realistic\" target=\"_blank\" rel=\"noopener\">其他角度的解决方案</a></h4><p>由于其他角度的切角需要旋转一定角度，所以我们需要借助伪元素来实现，同时还需要借助一些数学知识来计算角度和距离，具体实现过程比较复杂，大家可以看书中的解释或者直接看<a href=\"http://play.csssecrets.io/folded-corner-realistic\" target=\"_blank\" rel=\"noopener\">实现效果</a>，最终代码如下所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.note</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#58a</span>; <span class=\"comment\">/* 回退样式 */</span> </span><br><span class=\"line\"><span class=\"attribute\">background</span>:</span><br><span class=\"line\">        <span class=\"built_in\">linear-gradient</span>(-150deg,</span><br><span class=\"line\">            transparent 1.5em, #58a 0);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: .<span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.note</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to left bottom,</span><br><span class=\"line\">        transparent 50%, rgba(0,0,0,.2) <span class=\"number\">0</span>, <span class=\"built_in\">rgba</span>(0,0,0,.4))</span><br><span class=\"line\">        <span class=\"number\">100%</span> <span class=\"number\">0</span> no-repeat; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1.73em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-1.3em) <span class=\"built_in\">rotate</span>(-30deg); </span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: bottom right; </span><br><span class=\"line\">    <span class=\"attribute\">border-bottom-left-radius</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: -.<span class=\"number\">2em</span> .<span class=\"number\">2em</span> .<span class=\"number\">3em</span> -.<span class=\"number\">1em</span> <span class=\"built_in\">rgba</span>(0,0,0,.15);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字体排印\"><a href=\"#字体排印\" class=\"headerlink\" title=\"字体排印\"></a>字体排印</h2><h3 id=\"连字符断行\"><a href=\"#连字符断行\" class=\"headerlink\" title=\"连字符断行\"></a>连字符断行</h3><p>text-align:justify 可以实现两端对齐，但是对于英文字体来说，很容易出现“单词孤岛”现象，这样不仅看起来很糟糕，而且损伤了可读性。在打印媒介中，两端对齐总是和连字符断行相辅相成的，这样文本看起来就自然很多。 CSS 文本（第三版）引入了一个新的属性 hyphens：</p>\n<blockquote>\n<p>hyphens: none | manual | auto</p>\n</blockquote>\n<p>manual 是它的初始值，</p>\n<p>其行为正好对应了现有的工作方式：我们可以在任何时候手工插入软连字符，来实现断词折行的效果。很显然 hyphens: none; 会禁用这种行为；而最为神奇的是，只需这短短一行 CSS 就可以产生我们梦寐以求的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">hyphens</span>: <span class=\"selector-tag\">auto</span>;</span><br></pre></td></tr></table></figure>\n<p>为了确保它奏效，你需要在 HTML 标签的 lang 属性中指定合适的语言</p>\n<p>如果需要更细粒度地控制连字符的行为（比如在简短的引文中），你仍然可以通过一些软连字符（<code>&amp;shy;</code>）来辅助浏览器进行断词。这个 hyphens 属性会优先处理它们，然后再去计算其他可以断词的地方</p>\n<h3 id=\"插入换行\"><a href=\"#插入换行\" class=\"headerlink\" title=\"插入换行\"></a><a href=\"http://play.csssecrets.io/line-breaks\" target=\"_blank\" rel=\"noopener\">插入换行</a></h3><p>HTML代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Lea Verou<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>lea@verou.me<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Location:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Earth<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们想让 dt 和后面的 dd 在同一行，每个dt所在的内容都单独占一行。 有一个 Unicode 字符是专门代表换行符的:0x000A1。在 CSS 中， 这个字符可以写作 “\\000A”，或简化为 “\\A”。我们可以用它来作为 ::after 伪元素的内容，并将其添加到每个 <code>&lt;dd&gt;</code> 元素的尾部</p>\n<p>但是由于我们是在 HTML 代码中插入了换行符，所以这些换行符会和相邻的其他空白符进行合并，此时我们希望<strong>保留源代码中的这些空白符和换行，</strong>我们会用到 white-space:pre。然而如果你的结构代码在多个连续的 <code>&lt;dd&gt;</code> 之间包含了(未加注释的)空白符，那么逗号前面会有一个空格。有很多方法可以修复这个问题，但都不够完美。其中一种方法是利用<strong>负外边距</strong>。最终 CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dt</span>,<span class=\"selector-tag\">dd</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span> + <span class=\"selector-tag\">dt</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">'\\\\A'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: pre; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span> + <span class=\"selector-tag\">dd</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">', '</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -.<span class=\"number\">25em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文本行的斑马条纹\"><a href=\"#文本行的斑马条纹\" class=\"headerlink\" title=\"文本行的斑马条纹\"></a><a href=\"http://play.csssecrets.io/zebra-lines\" target=\"_blank\" rel=\"noopener\">文本行的斑马条纹</a></h3><p>我们可以通过 :nth-child() / :nth-of-type() 伪类来实现表格的“斑马条纹”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(even)</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0,0,0,.2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，这种实现方式无法应用到文本行。我们可以<strong>在 CSS 中用渐变直接生成背景图像</strong>，而且可以用 em 单位来设定背景尺寸，这样背景就可以<strong>自动适应 font-size 的变化</strong>了。水平条纹背景的 background-size 需要设置为 line-height 的两倍，因为每个背景贴片需要覆盖两行代码。同时我们希望让背景自动跟着内边距的宽度走，所以就需要 background-origin 告诉浏览器在解析 background-position 时以 content box 的外沿作为基准：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: <span class=\"selector-class\">.5em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">beige</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">auto</span> 3<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-origin</span>: <span class=\"selector-tag\">content-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.2</span>) 50%,</span><br><span class=\"line\">                                  <span class=\"selector-tag\">transparent</span> 0);</span><br></pre></td></tr></table></figure>\n<p>唯一可能破坏效果的情况可能就是在改变 line-height 时忘了相应地调整 background-size</p>\n<h3 id=\"调整tab的宽度\"><a href=\"#调整tab的宽度\" class=\"headerlink\" title=\"调整tab的宽度\"></a><a href=\"http://play.csssecrets.io/tab-size\" target=\"_blank\" rel=\"noopener\">调整tab的宽度</a></h3><p>我们通常使用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 元素来显示代码，但是<strong>浏览器会把 tab 的宽度显示为8个字符</strong>！ 而在 CSS 文本（第三版）中，一个新的 CSS 属性 tab-size 可以控制这个情况。这个属性接受一个数字(表示字符数)或者一个长度值(这个不那么实用)。我们通常希望把它设置为4(表示 4 个字符的宽度)或 2，后者是最近更为流行的缩进尺寸。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">pre</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">tab-size</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连字\"><a href=\"#连字\" class=\"headerlink\" title=\"连字\"></a><a href=\"http://play.csssecrets.io/ligatures\" target=\"_blank\" rel=\"noopener\">连字</a></h3><h4 id=\"什么是连字？（右侧为左侧连字写法）\"><a href=\"#什么是连字？（右侧为左侧连字写法）\" class=\"headerlink\" title=\"什么是连字？（右侧为左侧连字写法）\"></a>什么是连字？（右侧为左侧连字写法）</h4><p>i 的圆点往往会与 f 的升部发生冲突，导致两者都显示不清；为了缓解这个问题，字体设计师通常会在字体中包含一些额外的字形，称作连字。这些字形被设计为双字形或三字形的单一组合体，专门提供给排版软件使用，代为显示特定的字符组合：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_262.png\" alt=\"\" width=\"\"></div>\n\n<h4 id=\"支持连字解决方案\"><a href=\"#支持连字解决方案\" class=\"headerlink\" title=\"支持连字解决方案\"></a>支持连字解决方案</h4><p>在 CSS 字体（第三版）中，原有的 font- variant 被升级成了一个简写属性，由很多新的展开式属性组合而成。其中之一叫作 font-variant-ligatures，专门用来控制连字效果的开启和关闭。如果要启用所有可能的连字，需要同时指定这三个标识符:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-variant-ligatures</span>: <span class=\"selector-tag\">common-ligatures</span> </span><br><span class=\"line\">                        <span class=\"selector-tag\">discretionary-ligatures</span></span><br><span class=\"line\">                        <span class=\"selector-tag\">historical-ligatures</span>;</span><br></pre></td></tr></table></figure>\n<p>font-variant-ligatures 还接受 none 这个值，它会把所有的连字效果都关掉。千万不要使用 none，除非你绝对清楚自己是在做什么。如果要把 font-variant-ligatures 属性复位为初始值，应该使用 normal 而不是 none。</p>\n<h3 id=\"华丽的-amp-符号\"><a href=\"#华丽的-amp-符号\" class=\"headerlink\" title=\"华丽的 &amp; 符号\"></a><a href=\"http://play.csssecrets.io/ampersands\" target=\"_blank\" rel=\"noopener\">华丽的 &amp; 符号</a></h3><p>我们想要用另一种字体来单独美化某个特定字符（或是某个区间内的多个字符）： 首先，@font-face 规则中的 src 描述符是可以接受 local() 函数的，用于指定本地字体的名称：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Ampersand;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">'Baskerville'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Goudy Old Style'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Garamond'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Palatino'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，整段文本会都被应用为我们指定的字体，所以需要一个描述符来声明我们想用这款字体来显示哪些字符，这个描述符叫做 unicode-range；它是基于 “Unicode 码位”的，所以需要知道你想指定的字符的十六进制码位，你可以在控制台打印下面JS代码获取：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"&amp;\"</span>.charCodeAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>); <span class=\"comment\">// 返回26</span></span><br></pre></td></tr></table></figure>\n<p>还需要在前面加上 U+ 作为前缀，所以最终声明方式为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">unicode-range</span>: <span class=\"selector-tag\">U</span>+26;</span><br></pre></td></tr></table></figure>\n<p>如果你想指定一个字符区间，还是要加上 U+ 前缀，比如 U+400-4FF。实际上对于这个区间来说，你还可以使用通配符，以这样的方式来写：U+4??。同时指定多个字符或多个区间也是允许的，把它们用逗号隔开即可，比如 U+26, U+4??, U+2665-2670</p>\n<p>最后，为了指定某些字体的斜体版本，我们需要直接指定字体中我们想要的单个风格/字重所对应的 “PostScript 名称”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Ampersand;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">'Baskerville-Italic'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'GoudyOldStyleT-Italic'</span>), </span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Palatino-Italic'</span>), </span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'BookAntiqua-Italic'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">unicode-range</span>: U+<span class=\"number\">26</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Ampersand, Helvetica, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义下划线\"><a href=\"#自定义下划线\" class=\"headerlink\" title=\"自定义下划线\"></a>自定义下划线</h3><p>text-decoration:underline 实现的文本下划线不能够定制，同时<strong>在不同浏览器下的渲染效果大相径庭</strong>。所以为了得到更加定制化的下划线，我们可以通过 background-image 及其相关属性来实现（CSS 渐变）</p>\n<h4 id=\"实线下划线\"><a href=\"#实线下划线\" class=\"headerlink\" title=\"实线下划线\"></a>实线下划线</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">gray</span>, <span class=\"selector-tag\">gray</span>) <span class=\"selector-tag\">no-repeat</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 1<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 1<span class=\"selector-class\">.15em</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"防止下划线穿过文本的降部\"><a href=\"#防止下划线穿过文本的降部\" class=\"headerlink\" title=\"防止下划线穿过文本的降部\"></a>防止下划线穿过文本的降部</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">gray</span>, <span class=\"selector-tag\">gray</span>) <span class=\"selector-tag\">no-repeat</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 1<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 1<span class=\"selector-class\">.15em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: <span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">-</span><span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"虚线下划线\"><a href=\"#虚线下划线\" class=\"headerlink\" title=\"虚线下划线\"></a><a href=\"http://play.csssecrets.io/underlines\" target=\"_blank\" rel=\"noopener\">虚线下划线</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">gray</span> 66%, <span class=\"selector-tag\">transparent</span> 0) <span class=\"selector-tag\">repeat-x</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-class\">.2em</span> 2<span class=\"selector-tag\">px</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 1<span class=\"selector-tag\">em</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"波浪型的下划线（两层渐变）\"><a href=\"#波浪型的下划线（两层渐变）\" class=\"headerlink\" title=\"波浪型的下划线（两层渐变）\"></a><a href=\"http://play.csssecrets.io/wavy-underlines\" target=\"_blank\" rel=\"noopener\">波浪型的下划线（两层渐变）</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 40%, <span class=\"selector-tag\">red</span> 0, <span class=\"selector-tag\">red</span> 60%, <span class=\"selector-tag\">transparent</span> 0) 0 1<span class=\"selector-tag\">em</span>,</span><br><span class=\"line\">\t    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 40%, <span class=\"selector-tag\">red</span> 0, <span class=\"selector-tag\">red</span> 60%, <span class=\"selector-tag\">transparent</span> 0) <span class=\"selector-class\">.1em</span> 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">repeat-x</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-class\">.2em</span> <span class=\"selector-class\">.1em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: <span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">-</span><span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"现实中的文字效果\"><a href=\"#现实中的文字效果\" class=\"headerlink\" title=\"现实中的文字效果\"></a>现实中的文字效果</h3><h4 id=\"凸版印刷效果\"><a href=\"#凸版印刷效果\" class=\"headerlink\" title=\"凸版印刷效果\"></a><a href=\"http://play.csssecrets.io/letterpress\" target=\"_blank\" rel=\"noopener\">凸版印刷效果</a></h4><p>我们通过 text-shadow 使人产生物体从平面上凸起的错觉 <strong>当我们在浅色背景上使用深色文字时，在底部加上浅色投影通常效果最佳</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 60%);</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 30%);</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.8</span>);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_263.png\" alt=\"\" width=\"\"></div>\n\n<p><strong>当我们在深色背景上使用浅色文字时，在底部加上深色投影通常效果最佳</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 40%); </span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 75%); </span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 <span class=\"selector-tag\">-1px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_264.png\" alt=\"\" width=\"\"></div>\n\n<h4 id=\"空心字效果\"><a href=\"#空心字效果\" class=\"headerlink\" title=\"空心字效果\"></a><a href=\"http://play.csssecrets.io/stroked-text\" target=\"_blank\" rel=\"noopener\">空心字效果</a></h4><p>我们一般使用多个 text-shadow 来模拟文字描边：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">deeppink</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">white</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, <span class=\"selector-tag\">-1px</span> <span class=\"selector-tag\">-1px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-1px</span> <span class=\"selector-tag\">black</span>, <span class=\"selector-tag\">-1px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<p>但是，目前比较理想的方案是使用 SVG，HTML 代码可能是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"2em\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"1.2em\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#css\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">id</span>=<span class=\"string\">\"css\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"1em\"</span>&gt;</span>CSS<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">500%</span>/<span class=\"number\">1</span> Rockwell, serif; </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: deeppink;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">svg</span> &#123; <span class=\"attribute\">overflow</span>: visible &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">use</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-linejoin</span>: round;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文字外发光效果\"><a href=\"#文字外发光效果\" class=\"headerlink\" title=\"文字外发光效果\"></a><a href=\"http://play.csssecrets.io/glow\" target=\"_blank\" rel=\"noopener\">文字外发光效果</a></h4><p>文字外发光效果常用于凸显标题，或给链接添加鼠标悬停效果。它是最容易生成的文字美化效果之一。这种方法有一个最简单的版本:你只需要准备几层重叠的 text-shadow 即可，不需要考虑偏移量，颜色也只需跟文字保持一致：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#203</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#ffc</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 0 <span class=\"selector-class\">.1em</span>, 0 0 <span class=\"selector-class\">.3em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">或者使用<span class=\"selector-tag\">CSS</span>滤镜：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#203</span>; </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white; </span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(.1em); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文字凸起效果\"><a href=\"#文字凸起效果\" class=\"headerlink\" title=\"文字凸起效果\"></a><a href=\"http://play.csssecrets.io/extruded\" target=\"_blank\" rel=\"noopener\">文字凸起效果</a></h4><p>思路就是使用一长串累加的投影，不设模糊并以 1px 的跨度逐渐错开，使颜色逐渐变暗，然后在底部加一层强烈模糊的暗投影，从而模拟完整的立体效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: #58a;</span><br><span class=\"line\">color: white;</span><br><span class=\"line\">text-shadow: 0 1px hsl(0,0%,85%),</span><br><span class=\"line\">             0 2px hsl(0,0%,80%), </span><br><span class=\"line\">             0 3px hsl(0,0%,75%), </span><br><span class=\"line\">             0 4px hsl(0,0%,70%), </span><br><span class=\"line\">             0 5px hsl(0,0%,65%), </span><br><span class=\"line\">             0 5px 10px black;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟复古标志牌：\"><a href=\"#模拟复古标志牌：\" class=\"headerlink\" title=\"模拟复古标志牌：\"></a>模拟复古标志牌：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">white</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(0,50%,45%);</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 2<span class=\"selector-tag\">px</span> 2<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             3<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 6<span class=\"selector-tag\">px</span> 6<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             7<span class=\"selector-tag\">px</span> 7<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 8<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_265.png\" alt=\"\" width=\"\"></div>\n\n<h3 id=\"环形文字\"><a href=\"#环形文字\" class=\"headerlink\" title=\"环形文字\"></a><a href=\"http://play.csssecrets.io/circular-text\" target=\"_blank\" rel=\"noopener\">环形文字</a></h3><p>目前我们没有很好的纯 CSS 方案实现环形问题，只能借助内联 SVG 来实现这种效果；</p>\n<p>在 SVG 中，让文本按照路径排列的基本方法就是用一个 <code>&lt;textPath&gt;</code> 元素来包裹住这段文本，再把它们装进一个 <code>&lt;text&gt;</code> 元素中。这个 <code>&lt;textPath&gt;</code> 元素还需要在它的 ID 属性中引用一个 <code>&lt;path&gt;</code> 元素，然后就可以用这个 <code>&lt;path&gt;</code> 元素来定义我们想要的路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"circular\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 100 100\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M 0,50 a 50,50 0 1,1 0,1 z\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"circle\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个效果的实现比较复杂，所以直接点击上面标题链接查看吧。。</p>\n<h2 id=\"用户体验\"><a href=\"#用户体验\" class=\"headerlink\" title=\"用户体验\"></a>用户体验</h2><h3 id=\"选用合适的鼠标光标\"><a href=\"#选用合适的鼠标光标\" class=\"headerlink\" title=\"选用合适的鼠标光标\"></a>选用合适的鼠标光标</h3><p>在<a href=\"http://w3.org/TR/css3-ui/#cursor\" target=\"_blank\" rel=\"noopener\">CSS 基本UI 特性（第三版）</a>中，我们获得了一大批新的内建光标：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_266.png\" alt=\"\" width=\"\"></div>\n\n<h3 id=\"扩大可点击区域\"><a href=\"#扩大可点击区域\" class=\"headerlink\" title=\"扩大可点击区域\"></a><a href=\"http://play.csssecrets.io/hit-area\" target=\"_blank\" rel=\"noopener\">扩大可点击区域</a></h3><p><a href=\"http://simonwallner.at/ext/fitts/\" target=\"_blank\" rel=\"noopener\">Fitts法则</a>：人类移动到某个目标区域所需的最短时间是由目标距离与目标宽度之比所构成的对数函数；所以将可点击区域（热区）向外扩张往往可以带来可用性的提升，我们还需要了解：<strong>伪元素同样可以代表其宿主元素来响应鼠标交互</strong></p>\n<p>所以，我们可以在按钮的上层覆盖一层透明的伪元素，并让伪元素在四个方向上都比宿主元素大出 10px：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    /\\* \\[其余样式\\] */ </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">10px</span>; <span class=\"attribute\">right</span>: -<span class=\"number\">10px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: -<span class=\"number\">10px</span>; <span class=\"attribute\">left</span>: -<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个基于伪元素的解决方案极为灵活，我们基本上可以把热区设置为任何想要的尺寸、位置或形状，甚至可以脱离元素原有的位置!</p>\n<h3 id=\"自定义复选框\"><a href=\"#自定义复选框\" class=\"headerlink\" title=\"自定义复选框\"></a>自定义复选框</h3><p>知识点：伪类选择符 :checked 和属性选择符 [checked] 之间的区别是<strong>后者是不会根据用户的交互行为进行更新的，因为用户的交互并不会影响到 HTML 标签上的属性</strong>。 下面是作者实现的效果：</p>\n<ul>\n<li><a href=\"http://play.csssecrets.io/checkboxes\" target=\"_blank\" rel=\"noopener\">自定义复选框</a></li>\n<li><a href=\"http://play.csssecrets.io/toggle-buttons\" target=\"_blank\" rel=\"noopener\">开关式按钮</a></li>\n</ul>\n<h3 id=\"通过阴影来弱化背景\"><a href=\"#通过阴影来弱化背景\" class=\"headerlink\" title=\"通过阴影来弱化背景\"></a>通过阴影来弱化背景</h3><p>很多时候，我们需要通过一层半透明的遮罩层来把后面的一切整体调暗，以便凸显某个特定的 UI 元素，引导用户关注</p>\n<h4 id=\"伪元素方案\"><a href=\"#伪元素方案\" class=\"headerlink\" title=\"伪元素方案\"></a>伪元素方案</h4><p>我们可以通过伪元素来添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.dimmed</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed; </span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0,0,0,.8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>伪元素方案的缺点：<strong>伪元素无法绑定独立的JavaScript事件处理函数；</strong>同时 ::before 伪元素有可能已经被占用；还需要一点 JavaScript 来给 <code>&lt;body&gt;</code> 添加 dimmed 这个类</p>\n<h4 id=\"box-shadow方案\"><a href=\"#box-shadow方案\" class=\"headerlink\" title=\"box-shadow方案\"></a><a href=\"http://play.csssecrets.io/dimming-box-shadow\" target=\"_blank\" rel=\"noopener\">box-shadow方案</a></h4><p>box-shadow 的扩张参数可以把元素的投影向各个方向延伸放大。具体做法就是生成一个巨大的投影，不偏移也不模糊，简单而拙劣地模拟出遮罩层的效果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 0 0 0 50<span class=\"selector-tag\">vmax</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.8</span>);</span><br></pre></td></tr></table></figure>\n<p>但是它也存在两个非常严重的问题：当我们滚动页面时，遮罩层的边缘就露出来了；<strong>它只能在视觉上起到引导注意力的作用，却无法阻止鼠标交互</strong></p>\n<h4 id=\"backdrop-方案\"><a href=\"#backdrop-方案\" class=\"headerlink\" title=\"backdrop 方案\"></a><a href=\"http://play.csssecrets.io/native-modal\" target=\"_blank\" rel=\"noopener\">backdrop 方案</a></h4><p>\b如果你想引导用户关注元素就是一个模态的 <code>&lt;dialog&gt;</code> 元素，那么根据浏览器的默认样式，它会自带一个遮罩层。借助 ::backdrop 伪元素，这个原生的遮罩层也是可以设置样式的，比如可以把它变得更暗一些：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dialog</span><span class=\"selector-pseudo\">::backdrop</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, .8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一需要注意的地方在于，<strong>浏览器对它的支持还极为有限</strong></p>\n<h2 id=\"通过模糊来弱化背景\"><a href=\"#通过模糊来弱化背景\" class=\"headerlink\" title=\"通过模糊来弱化背景\"></a><a href=\"http://play.csssecrets.io/deemphasizing-blur\" target=\"_blank\" rel=\"noopener\">通过模糊来弱化背景</a></h2><p>我们需要一个额外的 HTML 元素来实现这个效果：需要把页面上除了关键元素之外的一切都包裹起来，这样就可以只对这个容器元素进行模糊处理了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span>Bacon Ipsum dolor sit amet...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dialog</span>&gt;</span></span><br><span class=\"line\">    O HAI, I'm a dialog. Click on me to dismiss.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dialog</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> 其他对话框都写在这里 <span class=\"attr\">--</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来，每当弹出一个对话框，都需要给 <code>&lt;main&gt;</code> 元素增加一个类，以便对它应用模糊滤镜：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span><span class=\"selector-class\">.de-emphasized</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(5px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"滚动提示\"><a href=\"#滚动提示\" class=\"headerlink\" title=\"滚动提示\"></a><a href=\"http://play.csssecrets.io/scrolling-hints\" target=\"_blank\" rel=\"noopener\">滚动提示</a></h3><p>我们需要实现的效果类似 Google Reader 中的一种用户体验模式：当侧边栏的容器还有更多内容时，一层淡淡的阴影会出现在容器的顶部和 / 或底部，用来提示侧边栏需要滚动才能看到完整的内容</p>\n<div align=\"center\"><img src=\"/images/hexo_post_267.png\" alt=\"\" width=\"\"></div>\n\n<p>我们可以用纯 CSS 实现这种效果，利用的就是 background-attachment 属性的一个关键字：local，但是<strong>我们需要两层背景</strong>：一层用来生成那条阴影，另一层基本上就是一个用来遮挡阴影的白色矩形，其作用类似于遮罩层。生成阴影的那层背景将具有默认的 background-attachment 值(scroll)，因为我们希望它总是保持在原位。我们把遮罩背景的 background-attachment 属性设置为 local，这样它就会在我们滚动到最顶部时盖住阴影，在向下滚动时跟着滚动，从而露出阴影。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">white</span> 30%, <span class=\"selector-tag\">transparent</span>), </span><br><span class=\"line\">            <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">at</span> 50% 0, <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.2</span>),<span class=\"selector-tag\">transparent</span> 70%); </span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 50<span class=\"selector-tag\">px</span>, 100% 15<span class=\"selector-tag\">px</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-attachment</span>: <span class=\"selector-tag\">local</span>, <span class=\"selector-tag\">scroll</span>;</span><br></pre></td></tr></table></figure>\n<p>但是为了完整地实现这个效果，我们<strong>还需要再用两层渐变来实现底部的阴影和它配套的遮罩</strong>，具体实现可以点击上面的链接查看</p>\n<h3 id=\"交互式的图片对比控件\"><a href=\"#交互式的图片对比控件\" class=\"headerlink\" title=\"交互式的图片对比控件\"></a>交互式的图片对比控件</h3><p>有时，我们需要展示两张图片的外观差异，通常是“之前和之后”形式的对比</p>\n<h4 id=\"CSS-resize方案\"><a href=\"#CSS-resize方案\" class=\"headerlink\" title=\"CSS resize方案\"></a><a href=\"http://play.csssecrets.io/image-slider\" target=\"_blank\" rel=\"noopener\">CSS resize方案</a></h4><p>resize 属性可以让某个元素的大小变得可调整，我们的第一个念头可能是列出两个 <code>&lt;img&gt;</code> 元素。但是，直接对一个 <code>&lt;img&gt;</code> 元素应用 resize 看起来会很怪异，因为直接调整图片大小会导致其变形失真。如果用一个 <code>&lt;div&gt;</code> 作为它的容器，再对这个容器应用 resize 属性，那就合理多了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"image-slider\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"adamcatlace-before.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Before\"</span> /&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"adamcatlace-after.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"After\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>resize 起作用的前提条件是它的 overflow 属性不是 visible；</strong>同时我们可以通过伪元素改变调节手柄的样式；最后，我们可以对这两张图片应用 user-select: none，这样即使用户在没有点中调节手柄的情况下拖动鼠标，也不会误选图片：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.image-slider</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image-slider</span> &gt; <span class=\"selector-tag\">div</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">resize</span>: horizontal; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image-slider</span> &gt; <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(-45deg, white 50%, transparent 0); </span><br><span class=\"line\">    <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: ew-resize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image-slider</span> <span class=\"selector-tag\">img</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"范围输入控件方案\"><a href=\"#范围输入控件方案\" class=\"headerlink\" title=\"范围输入控件方案\"></a>范围输入控件方案</h4><p>上面的 CSS resize 方案有一些不足之处：</p>\n<ul>\n<li>对键盘来说不可访问</li>\n<li>调整上层图片的唯一方法就是拖动</li>\n<li>用户只能在右下角进行调整大小的操作</li>\n</ul>\n<p>我们可以将原生的滑块控件（HTML 范围输入控件）覆盖在图片上，用它来控制上层图片的伸缩，这样就可以解决上述三个问题，同时为了让范围输入控件在视觉上与整个控件更加统一，可以用混合模式和滤镜来实现，最终实现效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_268.png\" alt=\"\" width=\"\"></div>\n\n<h2 id=\"结构与布局\"><a href=\"#结构与布局\" class=\"headerlink\" title=\"结构与布局\"></a>结构与布局</h2><h3 id=\"自适应内部元素\"><a href=\"#自适应内部元素\" class=\"headerlink\" title=\"自适应内部元素\"></a><a href=\"http://play.csssecrets.io/intrinsic-sizing\" target=\"_blank\" rel=\"noopener\">自适应内部元素</a></h3><p>众所周知，如果不给元素指定一个具体的 height，它就会自动适应其内容的高度。假如我们希望 width 也具有类似的行为，该怎么做呢?</p>\n<p>CSS 内部与外部尺寸模型（第三版）为 width 和 height 属性定义了一些新的关键字，其中最有用的应该就是 min-content 了。这个关键字将解析为这个容器内部最大的不可断行元素的宽度(即最宽的单词、图片或具有固定宽度的盒元素)。这正是我们梦寐以求的！为了给那些旧版浏览器提供一个平稳的回退样式，我们需要在使用这个技巧的同时，提供一个固定的 max-width 值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">figure</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">300px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: min-content; </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">figure</span> &gt; <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">max-width</span>: inherit; &#125;</span><br></pre></td></tr></table></figure>\n<p>关于 width 和 height 的新关键字，还有 max-content，它的行为类似于我们在前面看到的 display: inline-block；而 fit-content 的行为与浮动元素是相同的(和 min-content 的效果通常一致，但也有例外)。</p>\n<h3 id=\"精确控制表格列宽\"><a href=\"#精确控制表格列宽\" class=\"headerlink\" title=\"精确控制表格列宽\"></a><a href=\"http://play.csssecrets.io/table-column-widths\" target=\"_blank\" rel=\"noopener\">精确控制表格列宽</a></h3><p>对于不固定的内容来说，表格的布局是很难预测的，这是因为<strong>列宽根据其内容进行调整</strong>，即使我们显式地指定了 width。解决方案来自于 CSS 2.1 中一个鲜为人知的属性，叫做 table-layout，它的默认值是 auto，其行为模式被称作自动表格布局算法，也就是我们最为熟悉的表格布局行为。不过，它还接受另外一个值 <strong>fixed</strong>，这个值的行为要明显可控一些，使用也很简单：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">table-layout</span>: fixed; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据兄弟元素的数量来设置样式\"><a href=\"#根据兄弟元素的数量来设置样式\" class=\"headerlink\" title=\"根据兄弟元素的数量来设置样式\"></a><a href=\"http://play.csssecrets.io/styling-sibling-count\" target=\"_blank\" rel=\"noopener\">根据兄弟元素的数量来设置样式</a></h3><p>在某些场景下，我们需要根据兄弟元素的总数来为它们设置样式。</p>\n<p>对于只有一个列表项的特殊场景来说，解决方案显然就是 :only-child：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:only-child</span> &#123;</span><br><span class=\"line\">    /\\* 只有一个列表项时的样式 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上，:only-child 等效于 :first-child:last-child，道理就是：如果第一项也是最后一项，那它就是唯一的那一项；而 :first-child:nth-last-child(4) 会匹配到一个正好有四个列表项的列表中的第一个列表项，所以下面的选择符就相当于<strong>在这个列表正好包含四个列表项时，命中它的每一项</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(4)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(4)</span> ~ <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    /\\* 当列表正好包含四项时，命中所有列表项 */ </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用选择符的表达式，我们可以<strong>在列表项的总数是4或更多时选中所有列表项</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+4)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+4)</span> ~ <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    /\\* 当列表至少包含四项时，命中所有列表项 */ </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同理，-n+b 这种形式的表达式可以选中开头的 b 个元素。因此，我们可以<strong>在列表项的总数是 4 个或更少时选中所有列表项</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(-n+4)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(-n+4)</span> ~ <span class=\"selector-tag\">li</span> &#123; </span><br><span class=\"line\">    /\\* 当列表最多包含四项时，命中所有列表项 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，我们还可以把这两种技巧组合起来使用，不过代码也会变得更加复杂。假设我们希望<strong>在列表包含 2 ~ 6 个列表项时命中所有的列表项</strong>，可以这样写:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+2)</span><span class=\"selector-pseudo\">:nth-last-child(-n+6)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+2)</span><span class=\"selector-pseudo\">:nth-last-child(-n+6)</span> ~ <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    /\\* 当列表包含2~6项时，命中所有列表项 */ </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"满幅的背景，定宽的内容\"><a href=\"#满幅的背景，定宽的内容\" class=\"headerlink\" title=\"满幅的背景，定宽的内容\"></a><a href=\"http://play.csssecrets.io/fluid-fixed\" target=\"_blank\" rel=\"noopener\">满幅的背景，定宽的内容</a></h3><p>背景宽度满幅，内容宽度固定的设计手法在网页的页脚中经常看到：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_269.png\" alt=\"\" width=\"\"></div>\n\n<p>绝大多数的网页设计师/工程师都是用两层元素来实现的，那么能不能用一层元素实现呢？其实我们可以用 calc() 来实现内容的居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">1em</span>;  <span class=\"comment\">/* 回退样式 */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span> <span class=\"built_in\">calc</span>(50% - 450px); </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><blockquote>\n<p>44 年前我们就把人类送上月球了，但现在我们仍然无法在 CSS 中实现垂直居中 —— James Anderson</p>\n</blockquote>\n<h4 id=\"几种十分流行的技巧：\"><a href=\"#几种十分流行的技巧：\" class=\"headerlink\" title=\"几种十分流行的技巧：\"></a>几种十分流行的技巧：</h4><ul>\n<li>表格布局法</li>\n<li>行内块法</li>\n</ul>\n<p>Chris Coyier 写的<a href=\"http://css-tricks.com/centering-in-the-unknown\" target=\"_blank\" rel=\"noopener\">“不为人知的居中方法”</a>详细讲述了这两种技巧</p>\n<h4 id=\"基于绝对定位的解决方案\"><a href=\"#基于绝对定位的解决方案\" class=\"headerlink\" title=\"基于绝对定位的解决方案\"></a><a href=\"http://play.csssecrets.io/vertical-centering-abs\" target=\"_blank\" rel=\"noopener\">基于绝对定位的解决方案</a></h4><p>早期的垂直居中方法，它要求元素具有固定的宽度和高度：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">3em</span>; <span class=\"comment\">/* 6/2 = 3 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">9em</span>; <span class=\"comment\">/* 18/2 = 9 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">6em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CSS 领域有一个很常见的现象，真正的解决方案往往来自于我们最意想不到的地方。当我们在 translate() 变形函数中使用百分比值时，是以这个元素自身的宽度和高度为基准进行换算和移动的，所以就解除了对固定尺寸的依赖：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个方法有一些需要注意的地方：</p>\n<ul>\n<li>有时不能选用绝对定位</li>\n<li>如果需要居中的元素已经在高度上超过了视口，那它的顶部会被视口裁切掉</li>\n<li>在某些浏览器中，这个方法可能会导致元素的显示有一些模糊</li>\n</ul>\n<h4 id=\"基于视口单位的解决方案\"><a href=\"#基于视口单位的解决方案\" class=\"headerlink\" title=\"基于视口单位的解决方案\"></a><a href=\"http://play.csssecrets.io/vertical-centering-vh\" target=\"_blank\" rel=\"noopener\">基于视口单位的解决方案</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span> <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50vh</span> auto <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于-Flexbox-的解决方案\"><a href=\"#基于-Flexbox-的解决方案\" class=\"headerlink\" title=\"基于 Flexbox 的解决方案\"></a><a href=\"http://play.csssecrets.io/vertical-centering\" target=\"_blank\" rel=\"noopener\">基于 Flexbox 的解决方案</a></h4><p>这是毋庸置疑的最佳解决方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们使用 Flexbox 时，margin:auto 不仅在水平方向上将元素居中，垂直方向上也是如此</p>\n<h3 id=\"紧贴底部的页脚\"><a href=\"#紧贴底部的页脚\" class=\"headerlink\" title=\"紧贴底部的页脚\"></a>紧贴底部的页脚</h3><p>这是一个相当常见的问题：我们希望内容很长时，页脚在内容的尾部；而如果内容很短，页脚会在视口的底部。</p>\n<h4 id=\"一些解决方案（仍然有局限之处）：\"><a href=\"#一些解决方案（仍然有局限之处）：\" class=\"headerlink\" title=\"一些解决方案（仍然有局限之处）：\"></a>一些解决方案（仍然有局限之处）：</h4><ul>\n<li><a href=\"https://css-tricks.com/snippets/css/sticky-footer/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/snippets/css/sticky-footer/</a></li>\n<li><a href=\"https://pixelsvsbytes.com/2011/09/sticky-css-footers-the-flexible-way/\" target=\"_blank\" rel=\"noopener\">https://pixelsvsbytes.com/2011/09/sticky-css-footers-the-flexible-way/</a></li>\n</ul>\n<h4 id=\"固定高度的解决方案\"><a href=\"#固定高度的解决方案\" class=\"headerlink\" title=\"固定高度的解决方案\"></a><a href=\"http://play.csssecrets.io/sticky-footer-fixed\" target=\"_blank\" rel=\"noopener\">固定高度的解决方案</a></h4><p>我们可以通过计算给内容指定最小高度，然后就可以将页脚“固定”到底部：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"built_in\">calc</span>(100vh - 7em); <span class=\"comment\">/* 7em为页脚高度 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Flexbox-的解决方案\"><a href=\"#Flexbox-的解决方案\" class=\"headerlink\" title=\"Flexbox 的解决方案\"></a><a href=\"http://play.csssecrets.io/sticky-footer\" target=\"_blank\" rel=\"noopener\">Flexbox 的解决方案</a></h4><p>我们需要对 <code>&lt;body&gt;</code> 元素设置 display:flex，然后将其 min-height 属性指定为 100vh，这样它就至少会占据整个视口的高度；此时我们所期望的是，页头和页脚的高度由其内部元素来决定，而内容区块的高度应该可以自动伸展并占满所有的可用空间。我们只要给 <code>&lt;main&gt;</code> 这个容器的 flex 属性指定一个大于 0 的值(比如 1 即可)，就可以实现这个效果了:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-flow</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"过渡与动画\"><a href=\"#过渡与动画\" class=\"headerlink\" title=\"过渡与动画\"></a>过渡与动画</h2><h3 id=\"缓动效果\"><a href=\"#缓动效果\" class=\"headerlink\" title=\"缓动效果\"></a>缓动效果</h3><p>在现实世界中，物体从 A 点到 B 点的移动往往不是完全匀速的</p>\n<h4 id=\"弹跳动画\"><a href=\"#弹跳动画\" class=\"headerlink\" title=\"弹跳动画\"></a><a href=\"http://play.csssecrets.io/bounce\" target=\"_blank\" rel=\"noopener\">弹跳动画</a></h4><p>CSS 提供了一个 cubic-bezier() 函数，允许我们指定自定义的调速函数，借助该函数，我们可以近乎完美的实现回弹动画：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> bounce &#123; </span><br><span class=\"line\">    60%, 80%, <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(400px);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: ease; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    70% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(300px); &#125;</span><br><span class=\"line\">    90% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(360px); &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ball</span> &#123;</span><br><span class=\"line\">    /\\* 外观样式 */</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">bounce</span> 3<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">cubic-bezier</span>(<span class=\"selector-class\">.1</span>,<span class=\"selector-class\">.25</span>,1,<span class=\"selector-class\">.25</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"弹性过渡\"><a href=\"#弹性过渡\" class=\"headerlink\" title=\"弹性过渡\"></a><a href=\"http://play.csssecrets.io/elastic\" target=\"_blank\" rel=\"noopener\">弹性过渡</a></h4><p>同样是 cubic-bezier() 函数的使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0); </span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">25s</span> transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.callout</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">5s</span> <span class=\"built_in\">cubic-bezier</span>(.25,.1,.3,1.5) transform;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逐帧动画\"><a href=\"#逐帧动画\" class=\"headerlink\" title=\"逐帧动画\"></a><a href=\"http://play.csssecrets.io/frame-by-frame\" target=\"_blank\" rel=\"noopener\">逐帧动画</a></h4><p>在很多时候，我们需要一个很难（或不可能）只通过某些 CSS 属性的过渡来实现的动画。但由于 GIF 不具备透明的特性，所以下面的加载提示只能用CSS动画实现：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_270.png\" alt=\"\" width=\"\"></div>\n\n<p>而如何实现这种逐帧动画效果呢？秘诀就是 steps() 这个调速函数，steps() 函数会使整个动画在帧与帧之间硬切，所以只需把动画的代码修改为下面的形式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">loader</span> 1<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">infinite</span> <span class=\"selector-tag\">steps</span>(8);</span><br></pre></td></tr></table></figure>\n<h3 id=\"闪烁效果\"><a href=\"#闪烁效果\" class=\"headerlink\" title=\"闪烁效果\"></a><a href=\"http://play.csssecrets.io/blink\" target=\"_blank\" rel=\"noopener\">闪烁效果</a></h3><p>这里涉及到的知识点是 animation-direction 中的 alternate 属性，它的作用是反转第偶数个循环周期（包括调整函数）：</p>\n<blockquote>\n<p>animation-direction: normal | alternate | reverse | alternate-reverse</p>\n</blockquote>\n<div align=\"center\"><img src=\"/images/hexo_post_271.png\" alt=\"\" width=\"\"></div>\n\n<h3 id=\"打字动画\"><a href=\"#打字动画\" class=\"headerlink\" title=\"打字动画\"></a><a href=\"http://play.csssecrets.io/typing\" target=\"_blank\" rel=\"noopener\">打字动画</a></h3><p>CSS 值与单位规范引入了一个新单位，表示“0”字形的宽度，叫做 ch ；在等宽字体中，“0” 字形的宽度和其他所有字形的宽度是一样的，所以如果我们用 ch 单位来表达一段文本的宽度，那取值实际上就是字符的数量；最后，我们可以借助上面的闪烁动画的原理来实现文字后面闪烁的光标</p>\n<h3 id=\"状态平滑的动画\"><a href=\"#状态平滑的动画\" class=\"headerlink\" title=\"状态平滑的动画\"></a><a href=\"http://play.csssecrets.io/state-animations\" target=\"_blank\" rel=\"noopener\">状态平滑的动画</a></h3><p>我们需要根据用户的交互行为来暂停动画和继续之前的动画状态，从而避免生硬的跳回现象，而 animation-play-state 正是为这种暂停动画的需求专门设计的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> panoramic &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-position</span>: <span class=\"number\">100%</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.panoramic</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"img/naxos-greece.jpg\"</span>); </span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: auto <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: panoramic <span class=\"number\">10s</span> linear infinite alternate; </span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: paused;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.panoramic</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.panoramic</span><span class=\"selector-pseudo\">:focus</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: running;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"沿环形路径平移的动画\"><a href=\"#沿环形路径平移的动画\" class=\"headerlink\" title=\"沿环形路径平移的动画\"></a>沿环形路径平移的动画</h3><p>我们需要让一个元素沿着环形路径动起来，同时元素中的内容（图片、文字）不能发生旋转</p>\n<h4 id=\"需要两个元素的解决方案\"><a href=\"#需要两个元素的解决方案\" class=\"headerlink\" title=\"需要两个元素的解决方案\"></a><a href=\"http://play.csssecrets.io/circular-2elements\" target=\"_blank\" rel=\"noopener\">需要两个元素的解决方案</a></h4><p>我们让元素旋转，同时让其中的内容以相反的方向进行自转，从而可以抵消元素旋转的影响，由此可见，我们可以用 animation-direction 来实现这样的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> spin &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(1turn); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: spin <span class=\"number\">3s</span> infinite linear; </span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">50%</span> <span class=\"number\">150px</span>; <span class=\"comment\">/* 150px = 路径的半径 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.avatar</span> &gt; <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: inherit; </span><br><span class=\"line\">    <span class=\"attribute\">animation-direction</span>: reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"单个元素的解决方案\"><a href=\"#单个元素的解决方案\" class=\"headerlink\" title=\"单个元素的解决方案\"></a><a href=\"http://play.csssecrets.io/circular\" target=\"_blank\" rel=\"noopener\">单个元素的解决方案</a></h4><blockquote>\n<p>“transform-origin 只是一个语法糖而已。实际上你总是可以用 translate() 来代替它。” ——Aryeh Gregor</p>\n</blockquote>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}]}