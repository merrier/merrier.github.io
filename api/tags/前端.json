{"name":"前端","postlist":[{"title":"前端面试系列（12）——前端性能优化","slug":"前端面试系列（12）——前端性能优化","date":"2017-04-16T14:20:57.000Z","updated":"2019-02-10T15:06:51.074Z","comments":true,"path":"api/articles/前端面试系列（12）——前端性能优化.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>近几年的前端发展异常火爆，各种框架各种技术层出不穷，而所有的前端框架面临着同一个问题：怎样才能缩短首屏时间，让用户以最快的速度看到页面最想展现的内容；所以，前端性能优化这一问题成为所有前端开发人员需要考虑的需求。下面我将从 html、css、js 等方面介绍前端性能优化的一些方式，考虑到篇幅原因，只会以列表的形式进行简单概括，具体做法可以自行查阅，在这里强烈推荐<a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">雅虎军规</a>，Yahoo Rules 是对于前端性能优化的全面总结，有时间一定要看一看</p>\n<h2 id=\"HTML-的优化\"><a href=\"#HTML-的优化\" class=\"headerlink\" title=\"HTML 的优化\"></a>HTML 的优化</h2><h3 id=\"使用相对-URL\"><a href=\"#使用相对-URL\" class=\"headerlink\" title=\"使用相对 URL\"></a>使用相对 URL</h3><p>某些 href、src 属性如果与当前页面处于同一域名下，则使用相对 URL 能够节省至少一个域名的长度。</p>\n<h3 id=\"删除-HTTP-或者-HTTPS\"><a href=\"#删除-HTTP-或者-HTTPS\" class=\"headerlink\" title=\"删除 HTTP 或者 HTTPS\"></a>删除 HTTP 或者 HTTPS</h3><p>绝对 URL 都以 HTTP 或 HTTPS 等协议头开始，如果能确定 URL 的协议与当前页面 URL 的协议是一致的，或者说该 URL 在多种协议下均是可用的，则可以考虑删除这个协议头。</p>\n<h3 id=\"删除注释\"><a href=\"#删除注释\" class=\"headerlink\" title=\"删除注释\"></a>删除注释</h3><p>考虑不必要的 IE 条件注释和 CDATA 注释及自定义注释。</p>\n<h3 id=\"压缩空白符\"><a href=\"#压缩空白符\" class=\"headerlink\" title=\"压缩空白符\"></a>压缩空白符</h3><p>对于多数标签，可以通过删除多余的空白符来减少 HTML 体积，但是对于 pre 等是例外。</p>\n<h3 id=\"压缩-inline-css-amp-Javascript\"><a href=\"#压缩-inline-css-amp-Javascript\" class=\"headerlink\" title=\"压缩 inline css &amp; Javascript\"></a>压缩 inline css &amp; Javascript</h3><p>不管 inline 还是 external，都需要压缩，这是减小体积的最直接的方式。</p>\n<h3 id=\"CSS-amp-Javascript-尽量外链\"><a href=\"#CSS-amp-Javascript-尽量外链\" class=\"headerlink\" title=\"CSS &amp; Javascript 尽量外链\"></a>CSS &amp; Javascript 尽量外链</h3><p>不仅可以减少体积，还能够充分利用浏览器的缓存机制。</p>\n<h3 id=\"删除元素默认属性\"><a href=\"#删除元素默认属性\" class=\"headerlink\" title=\"删除元素默认属性\"></a>删除元素默认属性</h3><p>在 HTML 规范中，很多 HTML 元素的属性是有默认值的，对于这些默认值可以抹去不写。</p>\n<h3 id=\"避免使用-Iframe\"><a href=\"#避免使用-Iframe\" class=\"headerlink\" title=\"避免使用 Iframe\"></a>避免使用 Iframe</h3><p>创建 iframe 元素的开销要比创建其他类型的 DOM 元素高 1~2 个数量级</p>\n<h3 id=\"避免空链接属性\"><a href=\"#避免空链接属性\" class=\"headerlink\" title=\"避免空链接属性\"></a>避免空链接属性</h3><p>可以看做是上面“删除元素默认属性”的特例，即使图片的地址为空，浏览器依旧会以默认的规则去请求空地址</p>\n<h3 id=\"避免节点深层级嵌套\"><a href=\"#避免节点深层级嵌套\" class=\"headerlink\" title=\"避免节点深层级嵌套\"></a>避免节点深层级嵌套</h3><p>由于浏览器构建 DOM 文档的机制，深层级嵌套的节点在初始化构建时往往需要更多的内存占用，并且在遍历节点时也会更慢些</p>\n<h3 id=\"避免-Table-布局\"><a href=\"#避免-Table-布局\" class=\"headerlink\" title=\"避免 Table 布局\"></a>避免 Table 布局</h3><p>构建 table 的开销也很大</p>\n<h3 id=\"显示指定文档字符集\"><a href=\"#显示指定文档字符集\" class=\"headerlink\" title=\"显示指定文档字符集\"></a>显示指定文档字符集</h3><p>如果浏览器不能获知页面的编码字符集，一般都会在执行脚本和渲染页面前，把字节流缓存，然后再搜索可进行解析的字符集，或以默认的字符集来解析页面代码，这会导致消耗不必要的时间。为了避免浏览器把时间花费在搜寻合适的字符集来进行解码，所以最好在文档中总是显式的指定页面字符集。</p>\n<h2 id=\"CSS-的优化\"><a href=\"#CSS-的优化\" class=\"headerlink\" title=\"CSS 的优化\"></a>CSS 的优化</h2><h3 id=\"把-CSS-放到代码页上端\"><a href=\"#把-CSS-放到代码页上端\" class=\"headerlink\" title=\"把 CSS 放到代码页上端\"></a>把 CSS 放到代码页上端</h3><p>加快渲染</p>\n<h3 id=\"避免-CSS-表达式\"><a href=\"#避免-CSS-表达式\" class=\"headerlink\" title=\"避免 CSS 表达式\"></a>避免 CSS 表达式</h3><p>表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给 CSS 表达式增加一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到 10000 次以上的计算量。</p>\n<h3 id=\"使用-lt-link-gt-而不是-import\"><a href=\"#使用-lt-link-gt-而不是-import\" class=\"headerlink\" title=\"使用 &lt;link&gt; 而不是 @import\"></a>使用 <code>&lt;link&gt;</code> 而不是 <code>@import</code></h3><p>在外部的 CSS 文件中使用 @import 会使得页面在加载时增加额外的延迟。虽然规则允许在样式中调用 @import 来导入其它的 CSS，但浏览器不能并行下载样式，就会导致页面增添了额外的往返耗时。比如，第一个 CSS 文件 first.css 包含了以下内容：@import url(“second.css”)。那么浏览器就必须先把 first.css 下载、解析和执行后，才发现及处理第二个文件 second.css。</p>\n<h3 id=\"避免通配选择器\"><a href=\"#避免通配选择器\" class=\"headerlink\" title=\"避免通配选择器\"></a>避免通配选择器</h3><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免需要消耗更多匹配时间的选择器。比如这种反例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selected</span> * &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>由于 <strong>CSS 选择器从右到左匹配的机制</strong>，浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点，因此其匹配开销是非常大的，通常比开销最小的 ID 选择器高出 1~3 个数量级，所以应避免使用关键选择器是通配选择器的规则。</p>\n<h3 id=\"避免单规则的属性选择器\"><a href=\"#避免单规则的属性选择器\" class=\"headerlink\" title=\"避免单规则的属性选择器\"></a>避免单规则的属性选择器</h3><p>属性选择器根据元素的属性是否存在或其属性值进行匹配，如下例规则会把 herf 属性值等于 ”#index” 的链接元素设置为红色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selected</span> <span class=\"selector-attr\">[href=”#index”]</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>但其匹配开销是非常大的，浏览器先匹配所有的元素，检查其是否有 href 属性并且 herf 属性值等于 ”#index”， 然后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点。所以应避免使用关键选择器是单规则属性选择器的规则。</p>\n<h3 id=\"避免类正则的属性选择器\"><a href=\"#避免类正则的属性选择器\" class=\"headerlink\" title=\"避免类正则的属性选择器\"></a>避免类正则的属性选择器</h3><p>CSS3 添加了复杂的属性选择器，可以通过类正则表达式的方式对元素的属性值进行匹配。当然这些类型的选择器定是会影响性能的，正则表达式匹配会比基于类别的匹配会慢很多。大部分情况下我们应尽量避免使用 *=， |=， ^=， $=，和 ~= 语法的属性选择器。</p>\n<h2 id=\"JavaScript-的优化\"><a href=\"#JavaScript-的优化\" class=\"headerlink\" title=\"JavaScript 的优化\"></a>JavaScript 的优化</h2><h3 id=\"脚本放到-HTML-代码页底部\"><a href=\"#脚本放到-HTML-代码页底部\" class=\"headerlink\" title=\"脚本放到 HTML 代码页底部\"></a>脚本放到 HTML 代码页底部</h3><p>加快渲染，当然如果你的 js 会影响 dom 建立，那放在哪都是一样的了</p>\n<h3 id=\"移除重复脚本\"><a href=\"#移除重复脚本\" class=\"headerlink\" title=\"移除重复脚本\"></a>移除重复脚本</h3><p>封装方法是一个前端开发人员最基本的技能</p>\n<h3 id=\"减少-DOM-访问\"><a href=\"#减少-DOM-访问\" class=\"headerlink\" title=\"减少 DOM 访问\"></a>减少 DOM 访问</h3><p>使用 JavaScript 访问 DOM 元素是比较慢的，因此为了提升性能，应该做到：</p>\n<ul>\n<li>缓存已经查询过的元素；</li>\n<li>线下更新完节点之后再将它们添加到文档树中；</li>\n<li>避免使用 JavaScript 来修改页面布局；</li>\n</ul>\n<h3 id=\"使用事件代理\"><a href=\"#使用事件代理\" class=\"headerlink\" title=\"使用事件代理\"></a>使用事件代理</h3><p>有时候我们会感觉到页面反应迟钝，这是因为 DOM 树元素中附加了过多的事件句柄并且些事件句病被频繁地触发。这就是为什么说使用事件代理是一种好方法了。如果你在一个 div 中有 10 个按钮，你只需要在 div 上附加一次事件句柄就可以了，而不用去为每一个按钮增加一个句柄。事件冒泡时你可以捕捉到事件并判断出是哪个事件发出的。</p>\n<h3 id=\"缓存选择器查询结果\"><a href=\"#缓存选择器查询结果\" class=\"headerlink\" title=\"缓存选择器查询结果\"></a>缓存选择器查询结果</h3><p>选择器查询是开销很大的方法。所以，使用选择器的次数应该越少越好，并且尽可能缓存选中的结果，便于以后反复使用。 不要使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"string\">'#top'</span>).find(<span class=\"string\">'p.classA'</span>);</span><br><span class=\"line\">jQuery(<span class=\"string\">'#top'</span>).find(<span class=\"string\">'p.classB'</span>);</span><br></pre></td></tr></table></figure>\n<p>而是使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cached = jQuery(<span class=\"string\">'#top'</span>);</span><br><span class=\"line\">cached.find(<span class=\"string\">'p.classA'</span>);</span><br><span class=\"line\">cached.find(<span class=\"string\">'p.classB'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用微类库\"><a href=\"#使用微类库\" class=\"headerlink\" title=\"使用微类库\"></a>使用微类库</h3><p>通常开发者都会使用 JavaScript 类库，如 jQuery、Mootools、YUI、Dojo 等，但是开发者往往只是使用 JavaScript 类库中的部分功能。为了更大的提升性能，应尽量避免使用这类大而全的类库，而是按需使用微类库来辅助开发。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>[Absolute HTML Compressor](<a href=\"http://www.alentum.com/ahc/\" target=\"_blank\" rel=\"noopener\">http://www.alentum.com/ahc/</a> “Absolute HTML Compressor”）：HTML 的优化工具，压缩效果比较理想</li>\n<li><a href=\"https://book.douban.com/subject/3686503/\" target=\"_blank\" rel=\"noopener\">Even Faster Web Sites</a>：关于前端优化的书，本人没看过，但是豆瓣评分 8.6 的它应该还不错吧</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/news/2010/05/baidu-html-optimize\" target=\"_blank\" rel=\"noopener\">不应忽视的HTML优化</a> </li>\n<li><a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">Yahoo Rules</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007677580\" target=\"_blank\" rel=\"noopener\">前端性能优化黄金法则</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002418920\" target=\"_blank\" rel=\"noopener\">网站性能优化工具大全</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008829958\" target=\"_blank\" rel=\"noopener\">WEB前端性能优化常见方法</a></li>\n</ul>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"性能优化","path":"api/tags/性能优化.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"浏览器中输入url后发生了什么","slug":"浏览器中输入url后发生了什么","date":"2017-04-24T13:18:56.000Z","updated":"2019-02-10T15:06:51.078Z","comments":true,"path":"api/articles/浏览器中输入url后发生了什么.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_34.png","content":"<p>本文转载自<a href=\"http://www.jianshu.com/p/c1dfc6caa520\" target=\"_blank\" rel=\"noopener\">简书-浏览器中输入url后发生了什么</a>，其实这个问题在前端面试中经常遇到，所以网上有很多关于这个问题的文章，但是我感觉这篇文章是表达的最清晰的，感兴趣的童鞋可以点击上面的链接查看原文，不过在本文中，我又补充了一些其他文章中的相关内容，同时加入了一些我自己的理解，争取让初学者更容易看懂 先上一张思维导图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_34.png\" alt=\"\" width=\"900\"></div>\n\n<p>上面这张图用非常简练的语言总结了浏览器中输入 url 后发生的事情以及顺序，下面按照执行顺序分为六步进行描述：</p>\n<h2 id=\"1-DNS-域名解析\"><a href=\"#1-DNS-域名解析\" class=\"headerlink\" title=\"1. DNS 域名解析\"></a>1. DNS 域名解析</h2><ul>\n<li>在浏览器 DNS 缓存中搜索</li>\n<li>在操作系统 DNS 缓存中搜索</li>\n<li>读取系统 hosts 文件，查找其中是否有对应的 ip</li>\n<li>向本地配置的首选 DNS 服务器发起域名解析请求</li>\n</ul>\n<p>以上四个步骤其实都是 DNS 的解析过程，总结一下就是先看有没有缓存，如果没有就发起DNS域名解析请求，具体过程其实比较复杂，可以查看<a href=\"http://www.cnblogs.com/vincently/p/4670597.html\" target=\"_blank\" rel=\"noopener\">DNS原理及解析过程</a>进行更深入的了解</p>\n<h2 id=\"2-建立-TCP-连接\"><a href=\"#2-建立-TCP-连接\" class=\"headerlink\" title=\"2.建立 TCP 连接\"></a>2.建立 TCP 连接</h2><p>为了准确地传输数据，TCP 协议采用了三次握手策略。发送端首先发送一个带 SYN（synchronize）标志的数据包给接收方，接收方收到后，回传一个带有 SYN/ACK(acknowledegment) 标志的数据包以示传达确认信息。最后发送方再回传一个带 ACK 标志的数据包，代表握手结束。在这过程中若出现问题中断，TCP 会再次发送相同的数据包。TCP 是一个端到端的可靠的面向连接的协议，所以 HTTP 基于传输层 TCP 协议不用担心数据的传输的各种问题。当然，TCP 三次握手也是一个可以展开的问题，而且为什么使用三次握手也是大有学问，可以去我的另外一篇文章：<a href=\"/20170405/tcp-three-handshakes-and-four-breakups.html\">前端面试系列（8）——TCP的三次握手与四次分手</a>中寻找答案</p>\n<h2 id=\"3-发起-HTTP-请求\"><a href=\"#3-发起-HTTP-请求\" class=\"headerlink\" title=\"3. 发起 HTTP 请求\"></a>3. 发起 HTTP 请求</h2><p>HTTP 的请求方法（method）有以下几种：</p>\n<ul>\n<li>GET: 获取资源</li>\n<li>POST: 传输实体主体</li>\n<li>HEAD: 获取报文首部</li>\n<li>PUT: 传输文件</li>\n<li>DELETE: 删除文件</li>\n<li>OPTIONS: 询问支持的方法</li>\n<li>TRACE: 追踪路径</li>\n</ul>\n<p>其中最常用的就是 GET 和 POST 了，请求报文格式如下所示（HTTP/1.1）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_33.png\" alt=\"\" width=\"900\"></div>\n\n<h2 id=\"4-接受响应结果\"><a href=\"#4-接受响应结果\" class=\"headerlink\" title=\"4. 接受响应结果\"></a>4. 接受响应结果</h2><p>客户端在发出请求之后，服务器会在接收到请求之后返回客户端响应结果，该结果就是服务器告知客户端的当前状态，下面是状态码的分类，更多关于状态码的详细内容请移步<a href=\"/20170404/status-code-of-http-request.html\">前端面试系列（6）——HTTP请求的状态码</a>：</p>\n<ul>\n<li>1**：信息性状态码</li>\n<li>2**：成功状态码</li>\n<li>3**：重定向状态码</li>\n<li>4**：客户端错误状态码</li>\n<li>5**：服务器错误状态码</li>\n</ul>\n<p>响应报文：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_35.png\" alt=\"\" width=\"900\"></div>\n\n<h2 id=\"5-浏览器解析-html\"><a href=\"#5-浏览器解析-html\" class=\"headerlink\" title=\"5. 浏览器解析 html\"></a>5. 浏览器解析 html</h2><p>浏览器按顺序解析 html 文件，构建 DOM 树，在解析到外部的 css 和 js 文件时，向服务器发起请求下载资源，若是下载 css 文件，则解析器会在下载的同时继续解析后面的 html 来构建 DOM 树，但是在下载 js 文件和执行它时，解析器会停止对 html 的解析。这便出现了 js 阻塞问题。</p>\n<h3 id=\"预加载器：\"><a href=\"#预加载器：\" class=\"headerlink\" title=\"预加载器：\"></a>预加载器：</h3><p>当浏览器被脚本文件阻塞时，预加载器（一个轻量级的解析器）会继续解析后面的 html，寻找需要下载的资源。如果发现有需要下载的资源，预加载器在开始接收这些资源。预加载器只能检索 HTML 标签中的 URL，无法检测到使用脚本添加的 URL，这些资源要等脚本代码执行时才会获取。（注: 预解析并不改变 Dom 树，它将这个工作留给主解析过程），浏览器解析 css，形成 CSSOM 树，当 DOM 树构建完成后，浏览器引擎通过 DOM 树和 CSSOM 树构造出渲染树（Render 树）。渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head 元素和 display 值为 none 的元素）</p>\n<blockquote>\n<p>值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>\n</blockquote>\n<h2 id=\"6-浏览器布局渲染\"><a href=\"#6-浏览器布局渲染\" class=\"headerlink\" title=\"6. 浏览器布局渲染\"></a>6. 浏览器布局渲染</h2><ul>\n<li>布局（Layout）：通过计算得到每个渲染对象在可视区域中的具体位置信息（大小和位置），这是一个递归的过程。</li>\n<li>绘制（Paint）：将计算好的每个像素点信息绘制在屏幕上</li>\n</ul>\n<p>在页面显示的过程中会多次进行 Reflow 和 Repaint 操作，而 Reflow 的成本比 Repaint 的成本高得多的多。因为 Repaint 只是将某个部分进行重新绘制而不用改变页面的布局，如：改变了某个元素的背景颜色。而如果将元素的 display 属性由 block 改为 none 则需要 Reflow。如何减少 rpaint 和 reflow 也是<a href=\"/20170416/front-end-performance-optimization.html\">前端优化</a>需要考虑的问题：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_36.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.jianshu.com/p/c1dfc6caa520\" target=\"_blank\" rel=\"noopener\">浏览器中输入url后发生了什么</a></li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\" target=\"_blank\" rel=\"noopener\">浏览器的渲染原理简介</a></li>\n<li><a href=\"http://www.cnblogs.com/yuezk/archive/2013/01/11/2855698.html\" target=\"_blank\" rel=\"noopener\">了解html页面的渲染过程</a></li>\n<li><a href=\"https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/\" target=\"_blank\" rel=\"noopener\">老生常谈-从输入url到页面展示到底发生了什么</a></li>\n<li><a href=\"http://harttle.com/2016/05/18/async-javascript-loading.html\" target=\"_blank\" rel=\"noopener\">异步脚本载入提高页面性能</a></li>\n</ul>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://blog.codingplayboy.com/2017/03/29/webpage_render/\" target=\"_blank\" rel=\"noopener\">浅谈前端页面渲染机制</a></li>\n</ul>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]},{"title":"今日头条前端散招内推面试经验总结","slug":"今日头条前端散招内推面试经验总结","date":"2017-05-17T07:33:40.000Z","updated":"2019-02-10T15:06:51.070Z","comments":true,"path":"api/articles/今日头条前端散招内推面试经验总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><p>可能是内推的缘故，在面试之前前台工作人员给了一套前端的笔试题，然后就分配了一个小房间开始做题，虽然没有指明不可以手机搜索，但是为了保证最起码的诚信，我全程都没有看手机，完全凭自己的水平答题，虽然最后面试官把原题拿走了，但是我还是能靠记忆回想起一些题目，总结如下：</p>\n<h3 id=\"1-替换元素和非替换元素有哪些，它们的差异是什么？\"><a href=\"#1-替换元素和非替换元素有哪些，它们的差异是什么？\" class=\"headerlink\" title=\"1. 替换元素和非替换元素有哪些，它们的差异是什么？\"></a>1. 替换元素和非替换元素有哪些，它们的差异是什么？</h3><h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。 比如：<code>&lt;input type=&quot;text&quot;/&gt;</code>，这是一个文本输入框，换一个其他 type 的时候，浏览器显示就不一样，HTML 中的 <code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;object&gt;</code> 都是替换元素，这些元素都没有实际的内容。</p>\n<h4 id=\"非替换元素\"><a href=\"#非替换元素\" class=\"headerlink\" title=\"非替换元素\"></a>非替换元素</h4><p>HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。 比如 <code>&lt;p&gt;merrier.wang&lt;/p&gt;</code>、<code>&lt;label&gt;Merrier&lt;/label&gt;</code> 浏览器将把这段内容直接显示出来。</p>\n<h3 id=\"2-offsetWidth、clientWidth、scrollWidth-如何计算？\"><a href=\"#2-offsetWidth、clientWidth、scrollWidth-如何计算？\" class=\"headerlink\" title=\"2. offsetWidth、clientWidth、scrollWidth 如何计算？\"></a>2. offsetWidth、clientWidth、scrollWidth 如何计算？</h3><h4 id=\"offsetWidth\"><a href=\"#offsetWidth\" class=\"headerlink\" title=\"offsetWidth\"></a>offsetWidth</h4><ul>\n<li>无 <code>padding</code> 无滚动无 <code>border</code><ul>\n<li>offsetWidth = clientWidth = 盒子的宽度</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 无滚动有 <code>border</code><ul>\n<li>offsetWidth = 盒子的宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 边框宽度*2</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 有滚动，且滚动是显示的，有 <code>border</code><ul>\n<li>offsetWidth = 盒子宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 滚动轴宽度 + 边框宽度 * 2</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"clientWidth\"><a href=\"#clientWidth\" class=\"headerlink\" title=\"clientWidth\"></a>clientWidth</h4><ul>\n<li>无 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code></li>\n<li>有 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code> + 盒子的 <code>padding * 2</code></li>\n<li>有 <code>padding</code> 有滚动 ：<code>clientWidth</code> = 盒子和 <code>width</code> + 盒子的 <code>padding * 2</code> - 滚动轴宽度</li>\n</ul>\n<h4 id=\"scrollWidth\"><a href=\"#scrollWidth\" class=\"headerlink\" title=\"scrollWidth\"></a>scrollWidth</h4><p>无滚动轴时：</p>\n<ul>\n<li>scrollWidth = clientWidth = 盒子宽度 + 盒子 padding * 2</li>\n</ul>\n<p>有滚动轴时：</p>\n<ul>\n<li>scrollWidth = 实际内容的宽度 + padding * 2</li>\n<li>scrollHeight = 实际内容的高度 + padding * 2</li>\n</ul>\n<p>更多关于 JS 中的宽高可以狠狠的点击这里：<a href=\"/20170501/js-width-and-height.html\">JS 宽高的理解和应用</a></p>\n<h3 id=\"3-JS-中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\"><a href=\"#3-JS-中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\" class=\"headerlink\" title=\"3. JS 中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\"></a>3. JS 中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例</h3><p>DOM2 标准事件模型：每一个 DOM 元素所触发的事件都要经历三个阶段：</p>\n<ol>\n<li>捕获阶段</li>\n<li>目标对象本身的事件处理程序调用阶段</li>\n<li>冒泡阶段</li>\n</ol>\n<p>在 IE8 以上的版本以及其他的浏览器中通过 e.stopPropagation() 方式阻止事件的冒泡；在 IE8  以下的浏览器中通过 e.cancleBubble = true 阻止事件冒泡；jQ 中的 mouseenter 和 mouseleave 也是默认不冒泡</p>\n<h3 id=\"4-CSS-选择器的优先级是什么？\"><a href=\"#4-CSS-选择器的优先级是什么？\" class=\"headerlink\" title=\"4. CSS 选择器的优先级是什么？\"></a>4. CSS 选择器的优先级是什么？</h3><p>!important &gt; 内联 &gt; id &gt; class &gt; 标签(p、a、div) &gt; 通配符(*) &gt; 浏览器自定义</p>\n<p>更多关于 CSS 选择器的的内容：<a href=\"/20170403/css-selector.html\">前端面试系列（4）——CSS选择器</a></p>\n<h3 id=\"5-IFC-是什么？它的作用是什么？\"><a href=\"#5-IFC-是什么？它的作用是什么？\" class=\"headerlink\" title=\"5. IFC 是什么？它的作用是什么？\"></a>5. IFC 是什么？它的作用是什么？</h3><h4 id=\"What’s-FC？\"><a href=\"#What’s-FC？\" class=\"headerlink\" title=\"What’s FC？\"></a>What’s FC？</h4><p>FC 的全称是：Formatting Contexts，是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<h4 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h4><p>IFC(Inline Formatting Contexts) 直译为”内联格式化上下文”，IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding / margin 影响)，IFC 中的 line box 一般左右都贴紧整个 IFC，但是会因为 float 元素而扰乱。float 元素会位于 IFC 与 line box 之间，使得 line box 宽度缩短。 同个 IFC 下的多个 line box 高度会不同。IFC 中是不可能有块级元素的，当插入块级元素时（如 p 中插入 div），会产生两个匿名块与 div 分隔开，即产生两个 IFC，每个 IFC 对外表现为块级元素，与 div 垂直排列。</p>\n<p><strong>那么IFC一般有什么用呢？</strong></p>\n<ul>\n<li>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</li>\n<li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>\n</ul>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><p>BFC(Block Formatting Contexts) 直译为”块级格式化上下文”。Block Formatting Contexts 就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。 </p>\n<p><strong>如何产生 BFC？</strong></p>\n<ol>\n<li>float 的值不为 none。</li>\n<li>overflow 的值不为 visible。</li>\n<li>position 的值不为 relative 和 static。</li>\n<li>display 的值为 table-cell, table-caption, inline-block 中的任何一个。</li>\n</ol>\n<p><strong>那BFC 一般有什么用呢？</strong> </p>\n<p>比如常见的多栏布局，结合块级别元素浮动，里面的元素则是在一个相对隔离的环境里运行。 CSS2.1 中只有 BFC 和 IFC，CSS3 中才有 GFC 和 FFC，更多关于这些 FC 的内容可以查看：<a href=\"http://www.jshacker.com/note/3608\" target=\"_blank\" rel=\"noopener\">小科普：到底什么是BFC、IFC、GFC和FFC，次奥？</a></p>\n<h3 id=\"6-如何实现一个自适应正方形\"><a href=\"#6-如何实现一个自适应正方形\" class=\"headerlink\" title=\"6. 如何实现一个自适应正方形\"></a>6. 如何实现一个自适应正方形</h3><p>这个问题在我前不久的一篇文章里有总结过，可以<a href=\"/20170516/realization-of-adaptive-square-in-pure-css.html\">点击这里</a>查看</p>\n<h3 id=\"7-http-mp-toutiao-com-向-http-toutiao-com-发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\"><a href=\"#7-http-mp-toutiao-com-向-http-toutiao-com-发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\" class=\"headerlink\" title=\"7. http://mp.toutiao.com 向 http://toutiao.com 发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\"></a>7. <a href=\"http://mp.toutiao.com\" target=\"_blank\" rel=\"noopener\">http://mp.toutiao.com</a> 向 <a href=\"http://toutiao.com\" target=\"_blank\" rel=\"noopener\">http://toutiao.com</a> 发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？</h3><p>判断跨域的指标：域名、协议、端口，只要有其中一项不一致就会发生跨域</p>\n<h3 id=\"8-请介绍一下-XSS-和-CSRF-的区别，如何防御？\"><a href=\"#8-请介绍一下-XSS-和-CSRF-的区别，如何防御？\" class=\"headerlink\" title=\"8. 请介绍一下 XSS 和 CSRF 的区别，如何防御？\"></a>8. 请介绍一下 XSS 和 CSRF 的区别，如何防御？</h3><h4 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h4><p>XSS 全称“跨站脚本”（Cross-site scripting），是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>\n<h4 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h4><p>CSRF 的全称是“跨站请求伪造”（Cross-site request forgery），而 XSS 的全称是“跨站脚本”。看起来有点相似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户，但前面说了，它们的攻击类型是不同维度上的分类。CSRF 顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份（包括使用服务器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。 严格意义上来说，CSRF 不能分类为注入攻击，因为 CSRF 的实现途径远远不止 XSS 注入这一条。通过 XSS 来实现 CSRF 易如反掌，但对于设计不佳的网站，一条正常的链接都能造成 CSRF。</p>\n<h4 id=\"防御-XSS-攻击可以通过以下两方面操作：\"><a href=\"#防御-XSS-攻击可以通过以下两方面操作：\" class=\"headerlink\" title=\"防御 XSS 攻击可以通过以下两方面操作：\"></a>防御 XSS 攻击可以通过以下两方面操作：</h4><ol>\n<li>对用户表单输入的数据进行过滤，对 javascript 代码进行转义，然后再存入数据库；</li>\n<li>在信息的展示页面，也要进行转义，防止 javascript 在页面上执行。</li>\n</ol>\n<h4 id=\"CSRF-攻击的防御可以通过以下两方面操作：\"><a href=\"#CSRF-攻击的防御可以通过以下两方面操作：\" class=\"headerlink\" title=\"CSRF 攻击的防御可以通过以下两方面操作：\"></a>CSRF 攻击的防御可以通过以下两方面操作：</h4><ol>\n<li>所有需要用户登录之后才能执行的操作属于重要操作，这些操作传递参数应该使用 post 方式，更加安全；</li>\n<li>为防止跨站请求伪造，我们在某次请求的时候都要带上一个 csrf_token 参数，用于标识请求来源是否合法，csrf_token 参数由系统生成，存储在 SESSION 中。</li>\n</ol>\n<h4 id=\"更多关于-XSS-和-CSRF-的解释：\"><a href=\"#更多关于-XSS-和-CSRF-的解释：\" class=\"headerlink\" title=\"更多关于 XSS 和 CSRF 的解释：\"></a>更多关于 XSS 和 CSRF 的解释：</h4><ul>\n<li><a href=\"http://blog.csdn.net/koastal/article/details/52905358\" target=\"_blank\" rel=\"noopener\">浅析XSS和CSRF攻击及防御</a></li>\n<li><a href=\"https://www.zhihu.com/question/34445731?sort=created\" target=\"_blank\" rel=\"noopener\">如何用简洁生动的语言理清XSS和CSRF的区别？</a></li>\n</ul>\n<h3 id=\"9-JSBridge-是什么，它的作用是什么？\"><a href=\"#9-JSBridge-是什么，它的作用是什么？\" class=\"headerlink\" title=\"9. JSBridge 是什么，它的作用是什么？\"></a>9. JSBridge 是什么，它的作用是什么？</h3><p>在开发中我们经常需要 web 和 native 进行交互，也就是要用到经常听到的 “JSBridge”。由于我对这个东西也是停留在概念层面，所以推荐其他人的一篇文章吧：<a href=\"http://blog.csdn.net/jjx0224/article/details/52788922\" target=\"_blank\" rel=\"noopener\">理解JSBridge</a></p>\n<h3 id=\"10-TCP-和-UDP-的区别，以及如何进行拥塞控制？\"><a href=\"#10-TCP-和-UDP-的区别，以及如何进行拥塞控制？\" class=\"headerlink\" title=\"10. TCP 和 UDP 的区别，以及如何进行拥塞控制？\"></a>10. TCP 和 UDP 的区别，以及如何进行拥塞控制？</h3><ol>\n<li>TCP 面向连接（如打电话要先拨号建立连接）；UDP 是无连接的，即发送数据之前不需要建立连接</li>\n<li>TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP 尽最大努力交付，即不保证可靠交付</li>\n<li>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流；UDP 是面向报文的，UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）</li>\n<li>每一条 TCP 连接只能是点到点的；UDP 支持一对一，一对多，多对一和多对多的交互通信</li>\n<li>TCP 首部开销 20 字节；UDP 的首部开销小，只有 8 个字节</li>\n<li>TCP 的逻辑通信信道是全双工的可靠信道，UDP 则是不可靠信道</li>\n</ol>\n<p>更多关于 TCP 和 UDP 的区别：<a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">TCP和UDP的最完整的区别</a></p>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。<br><strong>几种拥塞控制方法</strong>：慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。 更多关于拥塞控制：<a href=\"http://blog.csdn.net/kinger0/article/details/48206999\" target=\"_blank\" rel=\"noopener\">TCP/IP详解–拥塞控制 &amp; 慢启动 快恢复 拥塞避免</a></p>\n<h3 id=\"11-有一无序数组，数组个数为-m，如何从这-m-个数里面找到-N-个数，使这-N-个数的和为-M；并阐述时间复杂度和空间复杂度\"><a href=\"#11-有一无序数组，数组个数为-m，如何从这-m-个数里面找到-N-个数，使这-N-个数的和为-M；并阐述时间复杂度和空间复杂度\" class=\"headerlink\" title=\"11. 有一无序数组，数组个数为 m，如何从这 m 个数里面找到 N 个数，使这 N 个数的和为 M；并阐述时间复杂度和空间复杂度\"></a>11. 有一无序数组，数组个数为 m，如何从这 m 个数里面找到 N 个数，使这 N 个数的和为 M；并阐述时间复杂度和空间复杂度</h3><p>这个属于比较经典的 <a href=\"http://baike.baidu.com/item/01%E8%83%8C%E5%8C%85\" target=\"_blank\" rel=\"noopener\">01背包问题</a>，网上有很多关于这种问题的求解方式，基本上包括递归、动态规划、无脑循环等方法，推荐以下比较靠谱的解法：<a href=\"http://www.cnblogs.com/iyangyuan/p/3908498.html\" target=\"_blank\" rel=\"noopener\">动态规划（JS）</a>、<a href=\"http://blog.csdn.net/min_jie/article/details/3966867\" target=\"_blank\" rel=\"noopener\">无脑循环</a></p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><p>一面的时间很长，大概有将近一个小时的感觉，所以问的问题涉及的领域和方面也比较多，所以我就想到什么写下什么了，另外也不赋答案了，实在有点多。。</p>\n<ol>\n<li>__proto__ 是什么意思</li>\n<li>JS 实现继承的方式</li>\n<li>object.defineproprety() 方法的参数和含义</li>\n<li>setTimeout(func,0) 中设置延时为 “0” 的目的</li>\n<li>jQuery 中对 Promise() 的 when() 方法的实现原理</li>\n<li>HTTP 和 TCP 的关系</li>\n<li>TCP 三次握手</li>\n<li>HTTP 如何达到在下一次连接时不用再 TCP 三次握手的</li>\n<li>如何实现一个自适应正方形</li>\n<li>浏览器渲染的过程</li>\n<li>重排和重绘的触发时机和区别</li>\n<li>层叠上下文起作用的前提</li>\n<li>前端路由和后端路由的区别</li>\n<li>首屏加载完毕之后 <code>&lt;script&gt;&lt;/script&gt;</code> 代码的加载顺序</li>\n<li>vue.js 的设计思想</li>\n<li>如果用 jQuery 实现双向数据绑定，应该如何实现</li>\n<li>当 content-length 过长时，应该如何传输数据</li>\n<li>JS 文件中的代码执行顺序</li>\n<li>详细讲解一下 JS 中宏任务和微任务的判断机制</li>\n<li>如果有别的库中也用到了 “$”，如何解决和 jQuery 的冲突</li>\n</ol>\n<h2 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h2><p>二面相对于一面来说，就简单随意了很多，问了一些项目的事情，还问了技术选型方面的问题，最后出了一道算法题让我做，我思考了大概 15 分钟，感觉真心写不出代码，就和面试官简单的讲了一下思路，面试官思考了一段时间之后就告诉我二面结束了，可以 hr 面了；至此，技术面就全部结束了。</p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"慕课网视频评分&推荐","slug":"慕课网视频评分&推荐","date":"2018-02-19T02:11:11.000Z","updated":"2019-02-10T15:06:51.074Z","comments":true,"path":"api/articles/慕课网视频评分&推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总有童鞋问我<a href=\"https://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">慕课网</a>上面有哪些视频比较好，我就索性写一篇文章总结一下我看过的慕课网上面的优秀的视频，绝大部分都是前端相关的，希望能够提升你的效率，节省时间。下面我会对这些视频从以下几个方面进行评分（单纯个人评分，不喜勿喷- -）：</p>\n<ul>\n<li><strong>难度系数</strong>：视频所讲内容的难度</li>\n<li><strong>实战系数</strong>：视频所讲内容的实际应用系数</li>\n<li><strong>版本系数</strong>：视频所讲内容中涉及到的框架/插件的版本是否是最新的</li>\n<li><strong>综合评分</strong>：综合评价</li>\n</ul>\n<p>推荐大家用 1.75 倍速播放，这样可以节省很多时间，同时也能听清- -</p>\n<h2 id=\"前端工具\"><a href=\"#前端工具\" class=\"headerlink\" title=\"前端工具\"></a>前端工具</h2><h3 id=\"前端内容的自动化构建\"><a href=\"#前端内容的自动化构建\" class=\"headerlink\" title=\"前端内容的自动化构建\"></a><a href=\"https://www.imooc.com/learn/922\" target=\"_blank\" rel=\"noopener\">前端内容的自动化构建</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程分为三个部分，第一部分讲解什么是构建，为什么需要自动化构建，后面两部分分别讲解如何使用 Gulp 进行 JavaScript 和 CSS 的构建。所讲内容比较简单，而且自动化构建在实际项目中经常会用到，不过 webpack 版本比较低，需要结合评论进行学习。。</p>\n<h3 id=\"webpack深入与实战\"><a href=\"#webpack深入与实战\" class=\"headerlink\" title=\"webpack深入与实战\"></a><a href=\"https://www.imooc.com/learn/802\" target=\"_blank\" rel=\"noopener\">webpack深入与实战</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍了如何在项目中使用 webpack 打包文件，处理各种资源，以及配置开发环境，上线环境等，通过实际的例子来讲解 webpack 的使用方法，带你探索 webpack 强大的功能。可以说是很全面了，作者讲解的也比较详细，想初步了解 webpack 如何使用的童鞋可以选择看一下该视频。</p>\n<h3 id=\"前端实时可视化开发工具体验\"><a href=\"#前端实时可视化开发工具体验\" class=\"headerlink\" title=\"前端实时可视化开发工具体验\"></a><a href=\"https://www.imooc.com/learn/718\" target=\"_blank\" rel=\"noopener\">前端实时可视化开发工具体验</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>前端开发中，我们常常需要频繁的修改 html，css，js，然后刷新页面，看效果，再调整，再刷新。该课程使用 liveStyle，liveReload，browserSync 工具实现修改代码后，立即体现效果的功能，使用可见即可得的开发模式，极大的提高前端开发效率。实时可视化在开发环境应用的比较多，会很大程度地提高工作效率，感兴趣的童鞋可以再自行搜索 hotreload，这样结合本视频观看食用效果更佳</p>\n<h3 id=\"前端性能优化-基础知识认知\"><a href=\"#前端性能优化-基础知识认知\" class=\"headerlink\" title=\"前端性能优化-基础知识认知\"></a><a href=\"https://www.imooc.com/learn/580\" target=\"_blank\" rel=\"noopener\">前端性能优化-基础知识认知</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程从前端优化目的，简单方法、分类开始，到如何优化，优化过程中的常见错误，业内公认的但是不适应所有方案。我们还可从这个课程中学习到当我们访问一个站点的时候，我们究竟做了什么以及怎么样才叫优化成功。性能优化是一个老生常谈的问题，如果你对该问题有一定的基础认知，想再深入了解相关知识的话，该课程你不容错过</p>\n<h2 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h2><h3 id=\"Hello，移动WEB\"><a href=\"#Hello，移动WEB\" class=\"headerlink\" title=\"Hello，移动WEB\"></a><a href=\"https://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">Hello，移动WEB</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍移动 web 的开发基础，高效的排版布局，常见的移动 web 问题，终端触摸交互，各种 bug 坑如何解决等多方面。虽然视频比较短，但是干货多多，对于移动端的适配布局这类问题进行了很详细的讲解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Promise入门\"><a href=\"#Promise入门\" class=\"headerlink\" title=\"Promise入门\"></a><a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>Promise 是 ES6 中最重要的特性之一，该课程为我们讲解了为什么会有 Promise，以及 Promise 的常见用法和注意事项，通过实际代码进行讲解清晰易懂，适合前端中级水平开发者，我对该课程进行了总结，笔记<a href=\"/20180226/introduction-to-promise.html\">在这里</a>可以查看得到。</p>\n<h3 id=\"ajax跨域完全讲解\"><a href=\"#ajax跨域完全讲解\" class=\"headerlink\" title=\"ajax跨域完全讲解\"></a><a href=\"https://www.imooc.com/learn/947\" target=\"_blank\" rel=\"noopener\">ajax跨域完全讲解</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>跨域是前端领域中经常遇到的问题，尤其是各种 CDN 服务兴起之后，而究竟什么情况下跨域，如何解决跨域问题更是笔试或面试时经常被问到的问题，该视频教程详细讲解了 jsonp 的工作机制，http 协议如何支持跨域，以及 http 服务器 nginx 和 apache 的 2 种不同解决思路，让大家知其然并知其所以然，是非常不错的跨域入门讲解课程</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS深入理解系列\"><a href=\"#CSS深入理解系列\" class=\"headerlink\" title=\"CSS深入理解系列\"></a><a href=\"https://www.imooc.com/search/course?words=css%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E5%BC%A0%E9%91%AB%E6%97%AD\" target=\"_blank\" rel=\"noopener\">CSS深入理解系列</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>该系列视频为张鑫旭老师对 CSS 相关属性的讲解，包括 margin、padding、position、z-index 等等基础属性，适合具备一定 CSS 基础知识的童鞋，张鑫旭老师的讲课风格很独特，也不知道是否符合你的口味，不过我是很喜欢啦~而且张鑫旭老师对于这些属性的讲解很深入，在实际项目中应用的很多，毕竟前端工程师一年写的 CSS 代码可以绕地球三圈啊（我对该系列视频的讲解进行了总结，在系列专栏中的<a href=\"/20170421/css-in-depth-understanding-series.html\">CSS深入理解系列</a>中可以看到）</p>\n<h3 id=\"如何用CSS进行网页布局\"><a href=\"#如何用CSS进行网页布局\" class=\"headerlink\" title=\"如何用CSS进行网页布局\"></a><a href=\"https://www.imooc.com/learn/57\" target=\"_blank\" rel=\"noopener\">如何用CSS进行网页布局</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程教你怎么制作一列布局、二列布局、三列布局当然还有最通用的混合布局，而且你还可以选择让它固定还是自适应。用 CSS 重新规划你的网页，让你的网页从此更美观、更友好。难度系数很低，而布局在实际项目中是很基本也是很重要的知识点</p>\n<h3 id=\"分页页码制作\"><a href=\"#分页页码制作\" class=\"headerlink\" title=\"分页页码制作\"></a><a href=\"https://www.imooc.com/learn/15\" target=\"_blank\" rel=\"noopener\">分页页码制作</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★☆☆☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>通过本课程的学习，我们可以学习到利用 HTML、CSS 样式技术制作出分页页码的效果。包括最简单的直角分页页码效果，修复行内元素之间的间隔 bug 问题分析，代码整理，为分页页码插入小图标。虽然一般不需要我们自己制作分页页码，但是如果你想自己写框架或者对这类知识比较好奇的话，该视频能够充分解答你的疑惑，最为关键的是<strong>提供源码</strong>啊~</p>\n<h2 id=\"JavaScript-1\"><a href=\"#JavaScript-1\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Hybrid设计\"><a href=\"#Hybrid设计\" class=\"headerlink\" title=\"Hybrid设计\"></a><a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程首先会告诉大家什么是 Hybrid，Hybrid 有什么特点，也会告诉大家业内有哪些常见的 Hybrid 应用以及 Hybrid 合理的应用场景。 然后，课程会简单介绍一个 Hybrid 架构的方方面面，包括 Hybrid 的发展，比如超级 Hybrid 方案 React Native 以及 Weex 学习该课程，大家会知道 Hybrid 中 H5 与 Native 如何交互，并且对 Hybrid 体验增强和 Hybrid 离线包有一些认识，是大家做混合 APP 的必备良药。</p>\n<h3 id=\"zepto设计和源码分析\"><a href=\"#zepto设计和源码分析\" class=\"headerlink\" title=\"zepto设计和源码分析\"></a><a href=\"https://www.imooc.com/learn/745\" target=\"_blank\" rel=\"noopener\">zepto设计和源码分析</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★☆☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>当熟练使用 zepto 的 API 之后，也应该解读一下 zepto 的源码，了解一下 zepto 的设计原理。该教程深入浅出的介绍了 zepto 最核心的设计原理，看完之后即能轻松解读 zepto 所有源码。就像 TJ 大神一样，有时候看别人写的代码会有不同寻常的收获</p>\n<h3 id=\"Web安全-XSS\"><a href=\"#Web安全-XSS\" class=\"headerlink\" title=\"Web安全-XSS\"></a><a href=\"https://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程从 Web 安全 XSS 的定义开始讲起，到深入剖析 XSS 攻击的原理和流程，了解常见 XSS 攻击的危害。同时通过项目实战针对性的分析如何应对 XSS 攻击做到安全的 XSS 防御措施。XSS 是最常见的一种 web 攻击，了解一些相关知识百利无一害= =</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"},{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"搜狐研究院前端散招面试题总结","slug":"搜狐研究院前端散招面试题总结","date":"2017-05-19T02:06:37.000Z","updated":"2019-02-10T15:06:51.074Z","comments":true,"path":"api/articles/搜狐研究院前端散招面试题总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先，搜狐媒体大厦还是蛮阔气的，但是门口的保安让我在沙发区稍等一会儿的时候，我看到那里有 5 个类似员工的人在打王者荣耀。。果然“大公司”的员工氛围就是不一样啊。。后来等了大概 10 分钟左右，一个挂有实习工作牌的女士把我带到了 9 楼，这里应该是搜狐员工办公的地方，两边都有比较大的办公区，然后中间有一块稍微小一点的地方用来面试和聊天，hr 姐姐首先让我做了一下搜狐的笔试题，然后说大概一个小时，如果做完了就给她打电话，然后就自己走开了（连杯水都没有倒，实习生就是这样的吗。。）， 做完了之后就有一位男士拿着我的简历过来了，整个面试的过程堪称尴尬，因为我的简历上写有“关注ES6”，所以这位年轻的面试官就开始各种问 ES6 相关的东西，还问我和 react 相关的东西，比如让我讲一下 react 的设计思想啊什么的。。难道这就是“关注ES6”想要表达的意思吗？后来他可能感觉也比较尴尬了，就问了一些 JS 相关的东西，比如 self 和 this 的区别啊什么的，但是我的水平实在有限，这位面试官的前端水平实在是在我之上太多，所以我也是基本上全程蒙蔽，更别提让我用 jQuery 实现一个 promise 对象了（对了，这位面试官连 jQ 的 when() 方法都不知道。。），就这样结束了一面，当然由于我的水平实在太低，所以就直接让我走人了（不过我也比较饿了，想回学校吃点东西了。。）</p>\n<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><h3 id=\"一、不定项选择题\"><a href=\"#一、不定项选择题\" class=\"headerlink\" title=\"一、不定项选择题\"></a>一、不定项选择题</h3><p>我不知道笔试题能不能拍照，但是我还是冒着被批评和留下不好印象的风险拍了一下，总体来说难度还是适中的，其中有些题还是蛮经典的，大家可以自行消化</p>\n<h4 id=\"1-以下元素为块级元素的有：\"><a href=\"#1-以下元素为块级元素的有：\" class=\"headerlink\" title=\"1. 以下元素为块级元素的有：\"></a>1. 以下元素为块级元素的有：</h4><ul>\n<li>p</li>\n<li>strong</li>\n<li>span</li>\n<li>section</li>\n</ul>\n<h4 id=\"2-以下可以使元素不可见的有：\"><a href=\"#2-以下可以使元素不可见的有：\" class=\"headerlink\" title=\"2. 以下可以使元素不可见的有：\"></a>2. 以下可以使元素不可见的有：</h4><ul>\n<li>display: none</li>\n<li>width:0; height:0; overflow:hidden</li>\n<li>visibility: hidden</li>\n<li>display: inline</li>\n</ul>\n<h4 id=\"3-以下正确的有：\"><a href=\"#3-以下正确的有：\" class=\"headerlink\" title=\"3. 以下正确的有：\"></a>3. 以下正确的有：</h4><ul>\n<li>Number.MIN_VALUE &gt; 0</li>\n<li>Number(1) == new Number(1)</li>\n<li>null == undefined</li>\n<li>NaN == NaN</li>\n</ul>\n<h4 id=\"4-以下会有错误发生的有：\"><a href=\"#4-以下会有错误发生的有：\" class=\"headerlink\" title=\"4. 以下会有错误发生的有：\"></a>4. 以下会有错误发生的有：</h4><ul>\n<li>9..toString()  //“9”</li>\n<li>alert(a)  //a is not defined</li>\n<li>eval(‘a’)  //a is not defined</li>\n<li>console.log(Number)</li>\n</ul>\n<h4 id=\"5-以下哪些情况会促发-BFC？\"><a href=\"#5-以下哪些情况会促发-BFC？\" class=\"headerlink\" title=\"5. 以下哪些情况会促发 BFC？\"></a>5. 以下哪些情况会促发 BFC？</h4><ul>\n<li>float 不为 none</li>\n<li>position 为 fixed</li>\n<li>display 为 static</li>\n<li>overflow 为 scroll</li>\n</ul>\n<h4 id=\"6-哪些元素会生成-BFC：\"><a href=\"#6-哪些元素会生成-BFC：\" class=\"headerlink\" title=\"6. 哪些元素会生成 BFC：\"></a>6. 哪些元素会生成 BFC：</h4><ol>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow 不为 visible</li>\n</ol>\n<h3 id=\"二、填空题\"><a href=\"#二、填空题\" class=\"headerlink\" title=\"二、填空题\"></a>二、填空题</h3><h4 id=\"1-一个-div-垂直居中于整个-body-的-css-代码：\"><a href=\"#1-一个-div-垂直居中于整个-body-的-css-代码：\" class=\"headerlink\" title=\"1. 一个 div 垂直居中于整个 body 的 css 代码：\"></a>1. 一个 div 垂直居中于整个 body 的 css 代码：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\"><a href=\"#2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\" class=\"headerlink\" title=\"2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10\"></a>2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-匹配邮箱的正则表达式：\"><a href=\"#3-匹配邮箱的正则表达式：\" class=\"headerlink\" title=\"3. 匹配邮箱的正则表达式：\"></a>3. 匹配邮箱的正则表达式：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\[a-z0<span class=\"number\">-9</span>\\]+(\\[._\\\\\\-\\]*\\[a-z0<span class=\"number\">-9</span>\\])*@(\\[a-z0<span class=\"number\">-9</span>\\]+\\[-a-z0<span class=\"number\">-9</span>\\]*\\[a-z0<span class=\"number\">-9</span>\\]+.)&#123;<span class=\"number\">1</span>,<span class=\"number\">63</span>&#125;\\[a-z0<span class=\"number\">-9</span>\\]+$</span><br></pre></td></tr></table></figure>\n<p>对于该正则表达式的解释：<a href=\"http://www.jb51.net/article/31182.htm\" target=\"_blank\" rel=\"noopener\">比较正宗的验证邮箱的正则表达式js代码详解</a></p>\n<h4 id=\"4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\"><a href=\"#4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\" class=\"headerlink\" title=\"4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值\"></a>4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleMin</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于数组 map() 方法的讲解：<a href=\"http://www.cnblogs.com/xuan52rock/p/4460949.html\" target=\"_blank\" rel=\"noopener\">js 数组 map方法</a></p>\n<h4 id=\"5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\"><a href=\"#5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\" class=\"headerlink\" title=\"5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]\"></a>5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> af = a.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bf = b.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(af.localeCompare(bf) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(af.localeCompare(bf) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、简答题\"><a href=\"#三、简答题\" class=\"headerlink\" title=\"三、简答题\"></a>三、简答题</h3><h4 id=\"1-实现：var-a-add-10-3-2-a打印结果为15\"><a href=\"#1-实现：var-a-add-10-3-2-a打印结果为15\" class=\"headerlink\" title=\"1. 实现：var a = add(10)(3)(2) // a打印结果为15\"></a>1. 实现：var a = add(10)(3)(2) // a打印结果为15</h4><p>这是一道关于类型转换的问题：<a href=\"http://web.jobbole.com/90654/\" target=\"_blank\" rel=\"noopener\">一道面试题引发的对 javascript 类型转换的思考</a></p>\n<h4 id=\"2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\"><a href=\"#2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\" class=\"headerlink\" title=\"2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）\"></a>2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）</h4><p>利用关键帧动画 @keyframes 就可以达到，网上有好多关于加载动画实现的文章，推荐一下类似这道题想要的效果的文章：<a href=\"http://www.cnblogs.com/zourong/p/4022729.html\" target=\"_blank\" rel=\"noopener\">CSS 实现加载动画之八-圆点旋转</a>、<a href=\"http://www.jq22.com/yanshi12864\" target=\"_blank\" rel=\"noopener\">6种CSS3加载动画</a></p>\n<h4 id=\"3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\"><a href=\"#3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\" class=\"headerlink\" title=\"3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解\"></a>3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解</h4><p>网站是如何记住用户信息的：<a href=\"http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">无状态协议中认证状态保持方案的一些思考</a></p>\n<h4 id=\"4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\"><a href=\"#4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\" class=\"headerlink\" title=\"4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；\"></a>4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；</h4><p>在 JS 中是没有类的，所以其实是用 function 来间接实现，这类实现在我的另一篇文章里大量提到：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS 实现复杂数据结构</a></p>\n<h4 id=\"5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\"><a href=\"#5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\" class=\"headerlink\" title=\"5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）\"></a>5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）</h4><p>在 css 中，通过 border 和旋转可以实现很多种图形，我在这个方面也是比较白痴的，所以推荐以下文章：<a href=\"http://www.2cto.com/kf/201604/500811.html\" target=\"_blank\" rel=\"noopener\">CSS3实现32种基本图形</a>、<a href=\"http://www.cnblogs.com/pigtail/archive/2013/02/17/2914119.html\" target=\"_blank\" rel=\"noopener\">利用css样式画各种图形–初步、进阶、高级（一）</a>（感觉这两篇文章的排版和图片都不是很好，找时间我会自己再总结一下）</p>\n<h4 id=\"6-简要回答你对跨域的理解，为什么要跨域，如何跨域\"><a href=\"#6-简要回答你对跨域的理解，为什么要跨域，如何跨域\" class=\"headerlink\" title=\"6. 简要回答你对跨域的理解，为什么要跨域，如何跨域\"></a>6. 简要回答你对跨域的理解，为什么要跨域，如何跨域</h4><p>跨域这种问题应该是老生常谈了，其实就是浏览器的一种“同源策略”，为了保证安全而采取的措施，具体大家自行搜索吧，关于跨域的文章实在是太多了</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><h3 id=\"1-localStorage-和-sessionStorage-的区别\"><a href=\"#1-localStorage-和-sessionStorage-的区别\" class=\"headerlink\" title=\"1. localStorage 和 sessionStorage 的区别\"></a>1. localStorage 和 sessionStorage 的区别</h3><ul>\n<li>localStorage 和 sessionStorage 一样都是用来存储客户端临时信息的对象。</li>\n<li>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</li>\n<li>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。</li>\n<li>sessionStorage 生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过 sessionStorage 存储的数据也就被清空了。</li>\n<li>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</li>\n</ul>\n<h3 id=\"2-JS中self和this的区别\"><a href=\"#2-JS中self和this的区别\" class=\"headerlink\" title=\"2. JS中self和this的区别\"></a>2. JS中self和this的区别</h3><p>不知道为什么面试官会问这个问题，因为 self 好像在 react 才会经常用到吧？。。但是我还是查了一下，网上对这两个的区别的解释很少，大致就是：self 指向本窗口，this 指向就比较广泛了</p>\n<h3 id=\"3-如何实现-JS-中的防抖动和节流阀\"><a href=\"#3-如何实现-JS-中的防抖动和节流阀\" class=\"headerlink\" title=\"3. 如何实现 JS 中的防抖动和节流阀\"></a>3. 如何实现 JS 中的防抖动和节流阀</h3><p>这个功能其实经常用到，但是面试官给我的答案是 underscore.js 源码中有，然后说 jQuery 的第三方库应该也有。。估计是这位面试官经常用 underscore.js 解决重复点击的问题，然后至于怎么实现的自己也不知道。。（我就没好意思再问了，以免造成尴尬的局面），推荐一下解释的很清楚的文章（这是一篇中文译文，英文原文可以点击下面这篇文章中的原文链接）：<a href=\"http://www.tuicool.com/articles/VfyMBrI\" target=\"_blank\" rel=\"noopener\">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></p>\n<h3 id=\"4-HTML5-使任何元素变为可编辑的属性\"><a href=\"#4-HTML5-使任何元素变为可编辑的属性\" class=\"headerlink\" title=\"4. HTML5 使任何元素变为可编辑的属性\"></a>4. HTML5 使任何元素变为可编辑的属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contenteditable=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\"><a href=\"#5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\" class=\"headerlink\" title=\"5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式\"></a>5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式</h3><p>在张鑫旭的慕课网讲解视频（深入理解 CSS 系列）中曾经讲到过这些单位的含义和作用，具体可以点击下面链接查看我对他的讲解的总结：<a href=\"/20170421/line-height-of-css.html\">CSS 深入理解之 line-height</a>，具体计算公式和作用如下：</p>\n<ul>\n<li>5rem：按照 html 的 font-size 进行计算</li>\n<li>5em：按照自身的 font-size 进行计算</li>\n<li>5px：相对长度单位，像素</li>\n<li>5pt：绝对长度单位，点 Points (1点 = 1/72英寸)</li>\n<li>500%：按照自身的 font-size 进行计算</li>\n<li>5：同样按照自身的 font-size 进行计算</li>\n</ul>\n<p>可以看出，line-height 的值如果不是具体数值，都是按照 font-size 进行计算的，同时 500%/5em/5 有什么区别呢？在张鑫旭的讲解中也提到了，500%/5em 会根据自身的 font-size 进行计算，得到具体数值后将行高继承给后代元素，而 5 只会将比例继承给后代元素，后代元素会根据自己的 font-size 重新计算行高</p>\n<blockquote>\n<p>更新自2017-10-11：突然发现小程序中有一个很有趣的长度单位 rpx，具体参见这篇文章：<a href=\"http://huang-jerryc.com/2017/05/21/talk-about-pixel-and-rpx/\" target=\"_blank\" rel=\"noopener\">谈谈像素以及微信小程序的 rpx</a></p>\n</blockquote>\n<h3 id=\"6-oninput-事件和-onchange-事件的区别\"><a href=\"#6-oninput-事件和-onchange-事件的区别\" class=\"headerlink\" title=\"6. oninput 事件和 onchange 事件的区别\"></a>6. oninput 事件和 onchange 事件的区别</h3><p>onchange 事件经常用到（图片、文件上传），但是 oninput 事件却没有用过了，推荐：<a href=\"http://blog.csdn.net/freshlover/article/details/39050609\" target=\"_blank\" rel=\"noopener\">总结oninput、onchange与onpropertychange事件的用法和区别</a></p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"网罗天下好教程","slug":"网罗天下好教程","date":"2017-08-27T07:56:15.000Z","updated":"2019-02-10T15:06:51.078Z","comments":true,"path":"api/articles/网罗天下好教程.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总结了一下我看过的好的教程，多数为系列文章，鉴于如今信息鱼龙混杂，这篇文章可以省去很多找好教程的时间。</p>\n<h2 id=\"入门级\"><a href=\"#入门级\" class=\"headerlink\" title=\"入门级\"></a>入门级</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><h4 id=\"手把手教你使用Hexo-Github-Pages搭建个人独立博客\"><a href=\"#手把手教你使用Hexo-Github-Pages搭建个人独立博客\" class=\"headerlink\" title=\"手把手教你使用Hexo + Github Pages搭建个人独立博客\"></a><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"noopener\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></h4><p>很完整很详细的 Hexo 搭建个人博客教程</p>\n<h4 id=\"从0到1搭建和部署个人博客\"><a href=\"#从0到1搭建和部署个人博客\" class=\"headerlink\" title=\"从0到1搭建和部署个人博客\"></a><a href=\"https://juejin.im/post/5ae170e1f265da0b7527d0dc\" target=\"_blank\" rel=\"noopener\">从0到1搭建和部署个人博客</a></h4><p>此教程会教你从 0 到 1 搭建一个完整的博客，包括前端展示页、后台管理系统、后端接口及接口文档、服务端部署整个完整流程。技术栈是 vue+express+mongodb</p>\n<h4 id=\"Hexo-主题开发指南\"><a href=\"#Hexo-主题开发指南\" class=\"headerlink\" title=\"Hexo 主题开发指南\"></a><a href=\"http://chensd.com/2016-06/hexo-theme-guide.html\" target=\"_blank\" rel=\"noopener\">Hexo 主题开发指南</a></h4><p>该文章包含的内容如下：</p>\n<ul>\n<li>主题的基本结构</li>\n<li>常见问题</li>\n<li>常用页面的实现</li>\n<li>基本工具</li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"CSS布局说——可能是最全的\"><a href=\"#CSS布局说——可能是最全的\" class=\"headerlink\" title=\"CSS布局说——可能是最全的\"></a><a href=\"https://segmentfault.com/a/1190000011358507\" target=\"_blank\" rel=\"noopener\">CSS布局说——可能是最全的</a></h4><p>其实很多时候，我们都会在布局上花费很多时间，尤其是遇到一个比较“严格”的设计师的时候，而 css 虽然语法简单（css 有语法？），但是真正用起来会有很多学问，而布局这种问题是老生常谈的问题了，这篇来自 SegmentFault的文章对 css 中的布局的相关知识进行了总结，满满的干货。</p>\n<h4 id=\"CSS-中重要的层叠概念\"><a href=\"#CSS-中重要的层叠概念\" class=\"headerlink\" title=\"CSS 中重要的层叠概念\"></a><a href=\"https://juejin.im/post/5ba4efe36fb9a05cf52ac192\" target=\"_blank\" rel=\"noopener\">CSS 中重要的层叠概念</a></h4><p>作者参考了很多关于层叠概念的文章，对这一经常迷糊的概念进行了全面总结，讲解的非常清晰全面，是我看过的讲层叠概念最好的文章，十分值得一看！</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><h4 id=\"JavaScript-标准参考教程（alpha）\"><a href=\"#JavaScript-标准参考教程（alpha）\" class=\"headerlink\" title=\"JavaScript 标准参考教程（alpha）\"></a><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程（alpha）</a></h4><p>阮一峰的 JS 教程，内容很多，而且讲解的很详细，很透彻，是一篇不错的 JS 入门教程。</p>\n<h4 id=\"如何定义一个高逼格的原生JS插件\"><a href=\"#如何定义一个高逼格的原生JS插件\" class=\"headerlink\" title=\"如何定义一个高逼格的原生JS插件\"></a><a href=\"https://juejin.im/entry/5ae033d86fb9a07ac76e7bcc\" target=\"_blank\" rel=\"noopener\">如何定义一个高逼格的原生JS插件</a></h4><p>作者通过很多实例介绍了如何定义自己的 JS 插件，包含了很多方面和技巧</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><h4 id=\"七天学会node-js\"><a href=\"#七天学会node-js\" class=\"headerlink\" title=\"七天学会node.js\"></a><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">七天学会node.js</a></h4><p>这是一篇比较详细的 node.js 入门教程，但是我确实没有七天就学会。。</p>\n<h4 id=\"node-js之fs模块\"><a href=\"#node-js之fs模块\" class=\"headerlink\" title=\"node.js之fs模块\"></a><a href=\"https://www.jianshu.com/p/5683c8a93511\" target=\"_blank\" rel=\"noopener\">node.js之fs模块</a></h4><p>fs 模块是 node.js 中一个很重要的模块，其提供了文件相关操作，包括打开、读取、写入和追加等等操作</p>\n<h4 id=\"Express-4-入门中文手册\"><a href=\"#Express-4-入门中文手册\" class=\"headerlink\" title=\"Express 4 入门中文手册\"></a><a href=\"https://www.zybuluo.com/bajian/note/444152\" target=\"_blank\" rel=\"noopener\">Express 4 入门中文手册</a></h4><p>最近在做 node  相关的项目，express 之前接触过，但是基本上一点印象都没有留下。。然后 express 的英文文档从布局和样式上就给人一种不想看的感觉，同时我的英语水平也很差，所以就在网上找了很久的中文文档，最终追根溯源找到了上面这篇，无法评价好坏，因为有就不错了嘛~</p>\n<h4 id=\"Redux中文文档\"><a href=\"#Redux中文文档\" class=\"headerlink\" title=\"Redux中文文档\"></a><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux中文文档</a></h4><p>在线 gitbook，有很多实例，是一个很不过的 redux 入门文档（我就是通过看这个文档入门的~）</p>\n<h4 id=\"Redux从设计到源码\"><a href=\"#Redux从设计到源码\" class=\"headerlink\" title=\"Redux从设计到源码\"></a><a href=\"https://tech.meituan.com/redux-design-code.html\" target=\"_blank\" rel=\"noopener\">Redux从设计到源码</a></h4><p>这也是一篇 Redux 入门教程，虽然比不上上面的教程，但是这篇文章里面的某些图片画的还是相当不错的，可以当做补充资料</p>\n<h4 id=\"react-starter-kit-入门（翻译）\"><a href=\"#react-starter-kit-入门（翻译）\" class=\"headerlink\" title=\"react-starter-kit 入门（翻译）\"></a><a href=\"http://www.jianshu.com/p/6c522c9a20cb\" target=\"_blank\" rel=\"noopener\">react-starter-kit 入门（翻译）</a></h4><p>starter-kit 的教程实在太少了，只找到了这一篇中文的，就先凑合看吧，具体写的好不好可以先睹为快，因为篇幅比较短，而且 starter-kit 本来就是一个脚手架，还是需要了解其他技术栈才能真正看懂</p>\n<h4 id=\"React-Router官方教程\"><a href=\"#React-Router官方教程\" class=\"headerlink\" title=\"React Router官方教程\"></a><a href=\"https://github.com/reactjs/react-router-tutorial\" target=\"_blank\" rel=\"noopener\">React Router官方教程</a></h4><p>官方给出的 react-router 入门文档，通过14个实例一步步进行讲解，由浅入深，由易到难，只需要一个多小时就可以跟着文档写完 14 个实例，同时在写的过程中还可以学习到 express 和 webpack 的相关知识。</p>\n<h4 id=\"Redux作者出的教学视频\"><a href=\"#Redux作者出的教学视频\" class=\"headerlink\" title=\"Redux作者出的教学视频\"></a><a href=\"https://egghead.io/instructors/dan-abramov\" target=\"_blank\" rel=\"noopener\">Redux作者出的教学视频</a></h4><p>Redux 作者自己在 egghead.io 上面上传了教学视频，墙裂推荐，不过全程英文讲解，可能会有点费劲- -：</p>\n<ul>\n<li>基础篇：<a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"noopener\">Getting Started with Redux</a></li>\n<li>进阶篇：<a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" target=\"_blank\" rel=\"noopener\">Building React Applications with Idiomatic Redux</a></li>\n</ul>\n<h4 id=\"从零开始学-ReactJS（ReactJS-101）\"><a href=\"#从零开始学-ReactJS（ReactJS-101）\" class=\"headerlink\" title=\"从零开始学 ReactJS（ReactJS 101）\"></a><a href=\"https://github.com/carlleton/reactjs101/tree/zh-CN\" target=\"_blank\" rel=\"noopener\">从零开始学 ReactJS（ReactJS 101）</a></h4><p>从零开始学 ReactJS（ReactJS 101）是一本希望让初学者一看就懂的 ReactJS 中文入门教学书，由浅入深学习 ReactJS 生态系 (Flux, Redux, React Router, ImmutableJS, React Native, Relay/GraphQL etc.)。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h4 id=\"入门Webpack，看这篇就够了\"><a href=\"#入门Webpack，看这篇就够了\" class=\"headerlink\" title=\"入门Webpack，看这篇就够了\"></a><a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></h4><p>进度条说明了一切，作者通过对比 gulp 和 webpack，详细的介绍了 webpack 的优缺点，同时还介绍了一些其他工具的用法，虽然篇幅较长，但是大部分都是代码，可以跟着作者自己敲一遍，相信敲完之后的你可以自信的说 webpack 我终(hai)于(shi)会(bu)了(hui)</p>\n<h4 id=\"webpack-2-打包实战\"><a href=\"#webpack-2-打包实战\" class=\"headerlink\" title=\"webpack 2 打包实战\"></a><a href=\"https://github.com/fenivana/webpack-in-action/\" target=\"_blank\" rel=\"noopener\">webpack 2 打包实战</a></h4><p>这是一篇对于 webpack 2 的讲解，作者通过追根溯源向我们阐述了为什么需要 webpack，作为历史的产物， webpack 具备哪些优势，文章篇幅较长，不过弥补了 webpack 官方文档写的很差的缺陷，是一篇比较不错的 webpack 入门文档</p>\n<h4 id=\"令人困惑的webpack之entry\"><a href=\"#令人困惑的webpack之entry\" class=\"headerlink\" title=\"令人困惑的webpack之entry\"></a><a href=\"https://segmentfault.com/a/1190000008288240\" target=\"_blank\" rel=\"noopener\">令人困惑的webpack之entry</a></h4><p>鉴于 webpack 的文档实在太差，而 webpack 本身又比较复杂，各种 loader，各种 plugin，各种配置，所以刚接触 webpack 的童鞋会感到很头疼，而 entry 作为 webpack 中最基础的配置，可以作为入门 webpack 的关键点，这篇文章非常详细的介绍了 entry 配置项的作用以及参数含义</p>\n<h4 id=\"用grunt搭建自动化的web前端开发环境-完整教程\"><a href=\"#用grunt搭建自动化的web前端开发环境-完整教程\" class=\"headerlink\" title=\"用grunt搭建自动化的web前端开发环境-完整教程\"></a><a href=\"http://developer.51cto.com/art/201506/479127.htm\" target=\"_blank\" rel=\"noopener\">用grunt搭建自动化的web前端开发环境-完整教程</a></h4><p>jQuery 在使用 grunt，bootstrap 在使用 grunt，百度 UEditor 在使用 grunt，你没有理由不学、不用！</p>\n<h4 id=\"Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\"><a href=\"#Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\" class=\"headerlink\" title=\"Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！\"></a><a href=\"http://www.iplaysoft.com/sublimetext.html\" target=\"_blank\" rel=\"noopener\">Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！</a></h4><p>这是一篇比较全的 sublime 介绍文章，作者介绍了很多 sublime 的特性和优点，同时还推荐了一些插件和使用技巧。</p>\n<h4 id=\"浅入浅出webpack\"><a href=\"#浅入浅出webpack\" class=\"headerlink\" title=\"浅入浅出webpack\"></a><a href=\"https://juejin.im/post/5afa9cd0f265da0b981b9af9\" target=\"_blank\" rel=\"noopener\">浅入浅出webpack</a></h4><p>webpack 作为一个非常流行的构建工具，其文档和使用一直为人所诟病，而当我真正的自己对 webpack 进行了了解和实战之后，发现其实 webpack 并不是那么难理解，而很多童鞋其实是因为 webpack 的功能太强大而对其产生了畏惧，这篇文章对这部分童鞋来说是一篇很好的教程，从基本使用的角度对 webpack 进行了介绍和讲解，除此之外还介绍一些高阶应用，如 TreeShaking、构建 PWA 应用等</p>\n<h4 id=\"iOS开发工具——网络封包分析工具Charles\"><a href=\"#iOS开发工具——网络封包分析工具Charles\" class=\"headerlink\" title=\"iOS开发工具——网络封包分析工具Charles\"></a><a href=\"http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles\" target=\"_blank\" rel=\"noopener\">iOS开发工具——网络封包分析工具Charles</a></h4><p><a href=\"http://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a> 是在 Mac 下常用的截取网络封包的工具。Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。作者在该教程中介绍了安装 Charles、安装SSL证书、将Charles设置成系统代理、过滤网络请求、截取 iPhone 上的网络封包、截取 SSL 信息、模拟慢速网络、修改网络请求内容等内容。</p>\n<h4 id=\"webpack-教程资源收集\"><a href=\"#webpack-教程资源收集\" class=\"headerlink\" title=\"webpack 教程资源收集\"></a><a href=\"https://github.com/kraaas/webpack-tutorial-collection\" target=\"_blank\" rel=\"noopener\">webpack 教程资源收集</a></h4><p>作者收集总结了关于 webpack 的各种教程，大概共有 50 篇文章。</p>\n<h4 id=\"运营小白带你5分钟入门谷歌分析-GA\"><a href=\"#运营小白带你5分钟入门谷歌分析-GA\" class=\"headerlink\" title=\"运营小白带你5分钟入门谷歌分析(GA)\"></a><a href=\"https://mp.weixin.qq.com/s/oJv0cOl71VfUW_Q2RUzChA\" target=\"_blank\" rel=\"noopener\">运营小白带你5分钟入门谷歌分析(GA)</a></h4><p>主要通过截图的方式简单介绍了如何使用 GA 进行数据分析，以及 GA 都有哪些功能。</p>\n<h4 id=\"全网最贴心的webpack4系列中文教程和配套代码\"><a href=\"#全网最贴心的webpack4系列中文教程和配套代码\" class=\"headerlink\" title=\"全网最贴心的webpack4系列中文教程和配套代码\"></a><a href=\"https://github.com/dongyuanxin/webpack-demos\" target=\"_blank\" rel=\"noopener\">全网最贴心的webpack4系列中文教程和配套代码</a></h4><p>作者花费了 3 个多月整理了这份教程，一共分成 16 节，每节都有讲解，并且准备了配套代码。</p>\n<h3 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h3><h4 id=\"同构-Isomorphic-web-是什么鬼？\"><a href=\"#同构-Isomorphic-web-是什么鬼？\" class=\"headerlink\" title=\"同构(Isomorphic) web 是什么鬼？\"></a><a href=\"http://www.jianshu.com/p/5ce23647e7e3\" target=\"_blank\" rel=\"noopener\">同构(Isomorphic) web 是什么鬼？</a></h4><p>同构这个概念最近比较火，相比 SPA，同构会有其独特的优势，作者用非常简短的语言介绍了同构产生的背景和如何将自己的网站改造为同构 web。</p>\n<h4 id=\"再不懂区块链，你就OUT了！\"><a href=\"#再不懂区块链，你就OUT了！\" class=\"headerlink\" title=\"再不懂区块链，你就OUT了！\"></a><a href=\"http://jingyan.baidu.com/zt/qukuailian/index.html\" target=\"_blank\" rel=\"noopener\">再不懂区块链，你就OUT了！</a></h4><p>区块链从 15 年到 17 年，但是你却任对区块链一知半解，百度经验联合火币网打造讲解区块链的系列小动画《区块链100问》 ，将抽象的区块链概念转化为100集轻松易懂的 1 分钟小动画，每集学懂一个知识点~</p>\n<h4 id=\"快乐的Linux命名行\"><a href=\"#快乐的Linux命名行\" class=\"headerlink\" title=\"快乐的Linux命名行\"></a><a href=\"http://billie66.github.io/TLCL/book/\" target=\"_blank\" rel=\"noopener\">快乐的Linux命名行</a></h4><p><a href=\"http://linuxcommand.org/\" target=\"_blank\" rel=\"noopener\">The Linux Command Line</a> 的中文版，一个文科生说他看完这个都会 Linux 了</p>\n<h4 id=\"HTTPS-的故事\"><a href=\"#HTTPS-的故事\" class=\"headerlink\" title=\"HTTPS 的故事\"></a><a href=\"https://juejin.im/post/5b10aa22e51d4506c5568f1d\" target=\"_blank\" rel=\"noopener\">HTTPS 的故事</a></h4><p>作者缘于在 Twitter 上看到的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fmedium.freecodecamp.org%2Fhttps-explained-with-carrier-pigeons-7029d2193351\" target=\"_blank\" rel=\"noopener\">HTTPS explained with carrier pigeons</a>，原作者用很简单的故事就把 HTTP / HTTPS 的传输过程讲解的很清楚。 借原文的意思，该作者重新写了这个故事，加上了一些配图和补充，很形象的解释了为什么要有https以及如何实现。</p>\n<h4 id=\"JS-函数式编程指南\"><a href=\"#JS-函数式编程指南\" class=\"headerlink\" title=\"JS 函数式编程指南\"></a><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></h4><p>这是<em><a href=\"https://github.com/DrBoolean/mostly-adequate-guide\" target=\"_blank\" rel=\"noopener\">mostly-adequate-guide</a></em>的中文版，可以说是最好的\b函数式编程书籍，作者还非常有心的提供了 EPUB 和 MOBI 格式的下载。</p>\n<h4 id=\"Bash-脚本-set-命令教程\"><a href=\"#Bash-脚本-set-命令教程\" class=\"headerlink\" title=\"Bash 脚本 set 命令教程\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/11/bash-set.html\" target=\"_blank\" rel=\"noopener\">Bash 脚本 set 命令教程</a></h4><p>阮一峰老师写的教程，也是一些大牛推荐的 set 命令教程，文章短小精悍，基本上把 set 命令相关的所有知识都涵盖了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"npm-scripts-使用指南\"><a href=\"#npm-scripts-使用指南\" class=\"headerlink\" title=\"npm scripts 使用指南\"></a><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener\">npm scripts 使用指南</a></h4><p>阮一峰讲解的 npm script 入门知识，关于 npm script 首推这篇文章</p>\n<h4 id=\"Linux大棚版Thrift入门教程\"><a href=\"#Linux大棚版Thrift入门教程\" class=\"headerlink\" title=\"Linux大棚版Thrift入门教程\"></a><a href=\"http://roclinux.cn/?p=3316\" target=\"_blank\" rel=\"noopener\">Linux大棚版Thrift入门教程</a></h4><p>thrift 作为一种 RPC 框架，其诞生以来就受到了广泛关注，虽然 RPC 框架有很多种，但是 thrift 还是有其独特优势的，这篇入门教程篇幅较长，作者介绍了 thrift 的基础概念，同时通过实例介绍了如何应用 thrift，比其他教程要详细很多。</p>\n<h4 id=\"Shell脚本编程30分钟入门\"><a href=\"#Shell脚本编程30分钟入门\" class=\"headerlink\" title=\"Shell脚本编程30分钟入门\"></a><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\" target=\"_blank\" rel=\"noopener\">Shell脚本编程30分钟入门</a></h4><p>前端工程师和 shell 打交道会比较少，但是知道一些往往会节省自己很多时间，比如定时备份、定时提交修改神马的，这篇文章虽然看上去有点“标题党”的意思，但是作者介绍的还算详细，同时作者还有一些其他类型的“30 分钟教程”，也可以看一看（作者是多么喜欢30分钟这个时间段啊。。）</p>\n<h4 id=\"Docker-入门\"><a href=\"#Docker-入门\" class=\"headerlink\" title=\"Docker 入门\"></a><a href=\"http://www.jianshu.com/p/d4f24f8012fd\" target=\"_blank\" rel=\"noopener\">Docker 入门</a></h4><p>Docker 是一个非常有趣的项目。它最大的作用就是隔绝了操作系统环境，类似于虚拟机，但是相对于虚拟机，他又拥有绝对的高效率、和通用性。相信看完这篇文章之后，你会对docker有一个直观的认识= =</p>\n<h4 id=\"图说设计模式\"><a href=\"#图说设计模式\" class=\"headerlink\" title=\"图说设计模式\"></a><a href=\"\bhttp://design-patterns.readthedocs.io/zh_CN/latest/index.html\">图说设计模式</a></h4><p>通过画图的方式理解设计模式，以一种轻松的姿势理解高深的学问。</p>\n<h4 id=\"Go-指南\"><a href=\"#Go-指南\" class=\"headerlink\" title=\"Go 指南\"></a><a href=\"https://tour.go-zh.org/list\" target=\"_blank\" rel=\"noopener\">Go 指南</a></h4><p>该指南介绍了 Go 的大部分重要特性，同时有一些练习进行巩固。</p>\n<h4 id=\"centos-6-7安装最新版-git\"><a href=\"#centos-6-7安装最新版-git\" class=\"headerlink\" title=\"centos 6.7安装最新版 git\"></a><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7安装最新版 git</a></h4><p>阿里云上的 ECS 很多人都会选择 CentOS 系统，而作为前端，可能需要安装 nvm，但是 CentOS 6.7 默认安装的 git 版本是比较低的 1.7.1 版本，所以需要重新安装最新版 git，这篇教程讲的很详细，我按照他的步骤很顺利的就安装成功了。</p>\n<h4 id=\"Jenkins-nginx-搭建前端构建环境\"><a href=\"#Jenkins-nginx-搭建前端构建环境\" class=\"headerlink\" title=\"Jenkins+nginx 搭建前端构建环境\"></a><a href=\"https://juejin.im/post/5b371678f265da599f68dfa2\" target=\"_blank\" rel=\"noopener\">Jenkins+nginx 搭建前端构建环境</a></h4><p>废话很少，直接上代码的方式我很喜欢，Jenkins 解决了很令人头疼的构建问题，所以如果想成为一名称职的前端工程师，这是一篇值得参考和手巧的教程，赶快跟着作者的手速敲起来吧！</p>\n<h4 id=\"技术胖-155-集前端视频教程\"><a href=\"#技术胖-155-集前端视频教程\" class=\"headerlink\" title=\"技术胖 155 集前端视频教程\"></a><a href=\"https://juejin.im/post/5a5bc8c36fb9a01ca26774eb\" target=\"_blank\" rel=\"noopener\">技术胖 155 集前端视频教程</a></h4><p>技术胖在 2017 年录制的 155 集视频教程，可以免费观看，其中包括 Vue2.x、Vue-cli、Vue-router、vuex、Vue实战、weex、ES6、React基础、React全家桶、Koa2.x、Fabric.js 和 CocosCreater 实战教程等。</p>\n<h2 id=\"进阶级\"><a href=\"#进阶级\" class=\"headerlink\" title=\"进阶级\"></a>进阶级</h2><h4 id=\"深入理解JSON\"><a href=\"#深入理解JSON\" class=\"headerlink\" title=\"深入理解JSON\"></a><a href=\"https://mp.weixin.qq.com/s/CQKFfecqy3_EgW0jLfEMIQ\" target=\"_blank\" rel=\"noopener\">深入理解JSON</a></h4><p>作者将 JSON 和 JS 中的 JSON 都梳理了一遍，也对里面的细节和注意点进行了一次遍历，从中我们能够知道 JSON 是一种语法上衍生于JS语言的一种轻量级的数据交换格式，也会明白 JSON 相对于一般的JS数据结构（尤其是对象）的差别；除此之外，作者更进一步地仔细讨论了 JS 中关于 JSON 处理的 3 个函数和细节。</p>\n<h4 id=\"通用-CSS-笔记、建议与指导\"><a href=\"#通用-CSS-笔记、建议与指导\" class=\"headerlink\" title=\"通用 CSS 笔记、建议与指导\"></a><a href=\"https://github.com/chadluo/CSS-Guidelines/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">通用 CSS 笔记、建议与指导</a></h4><p>作者总结了 CSS 的相关规范，但是建议下面腾讯 AlloyTeam 总结的那篇。。</p>\n<h4 id=\"前端规范总结-AlloyTeam\"><a href=\"#前端规范总结-AlloyTeam\" class=\"headerlink\" title=\"前端规范总结-AlloyTeam\"></a><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">前端规范总结-AlloyTeam</a></h4><p>腾讯 AlloyTeam 通过分析 github 代码库总结出来的工程师代码书写习惯，内容很全很详细，值得一看！</p>\n<h4 id=\"CSS进阶系列\"><a href=\"#CSS进阶系列\" class=\"headerlink\" title=\"CSS进阶系列\"></a><a href=\"http://www.cnblogs.com/coco1s/category/833837.html\" target=\"_blank\" rel=\"noopener\">CSS进阶系列</a></h4><p>通过作者的 github，可以看出来这是一位腾讯的大牛，作者通过 CSS 实现了很多复杂的效果，其中有些例子是《CSS揭秘》这本书里面的，这本书也是我之前强烈推荐大家看的一本 CSS 进阶书籍。</p>\n<h4 id=\"简书-前端基础进阶系列\"><a href=\"#简书-前端基础进阶系列\" class=\"headerlink\" title=\"简书-前端基础进阶系列\"></a><a href=\"http://www.jianshu.com/p/cd3fee40ef59\" target=\"_blank\" rel=\"noopener\">简书-前端基础进阶系列</a></h4><p>作者叫“波同学”，我之前是从来没有听说过作者大名的，但是读过作者这一系列的文章之后对作者的前端能力很是钦佩，同时作者的讲解能力也很强，将一些别人讲的晦涩难懂的原理讲的很透彻，十分推荐大家认真阅读一下作者这一系列的文章，我相信你看完之后你的前端水平会有很大的提升</p>\n<blockquote>\n<p>更新于2017-01-26：波同学将自己在简书上的文章都迁移到了<a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">自己的Gitbook</a>上</p>\n</blockquote>\n<h4 id=\"深入理解-JavaScript-系列\"><a href=\"#深入理解-JavaScript-系列\" class=\"headerlink\" title=\"深入理解 JavaScript 系列\"></a><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 系列</a></h4><p>汤姆大叔写的文章，文章内容实在是多。。而且感觉难度有点大，推荐大家先看一下上面简书的前端基础进阶系列，再来看汤姆大叔这一系列的文章，可能理解起来会更容易一些。</p>\n<h4 id=\"webshell-原理\"><a href=\"#webshell-原理\" class=\"headerlink\" title=\"webshell 原理\"></a><a href=\"http://www.jianshu.com/p/02aac12e459f\" target=\"_blank\" rel=\"noopener\">webshell 原理</a></h4><p>webshell，顾名思义：web 指的是在 web 服务器上，而 shell 是用脚本语言编写的脚本程序，webshell 就是就是 web 的一个管理工具，可以对 web 服务器进行操作的权限，也叫 webadmin。接触过集群的童鞋对这个概念肯定不会感到陌生，虽然一般人不会接触到 webshell，但是多了解一些总是没错的~</p>\n<h4 id=\"全自动科学上网方案分享\"><a href=\"#全自动科学上网方案分享\" class=\"headerlink\" title=\"全自动科学上网方案分享\"></a><a href=\"https://github.com/bestswifter/blog/commit/b68a7bbc413874c3883a66b6b065413f0f351156\" title=\"[Add] 全自动科学上网方案分享\" target=\"_blank\" rel=\"noopener\">全自动科学上网方案分享</a></h4><p>有些童鞋并不了解如何通过 VPS 实现科学上网，这篇文章介绍了如何利用 VPS 进行代理配置，以及实现自动切换，讲解的很详细。</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"iOS中采用AMP规范时的scroll和position:fixed带来的bug","slug":"iOS中采用AMP规范时的scroll和position:fixed带来的bug","date":"2017-08-26T12:23:20.000Z","updated":"2019-02-10T15:06:51.070Z","comments":true,"path":"api/articles/iOS中采用AMP规范时的scroll和position:fixed带来的bug.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>本文翻译自一位前辈的两篇文章，原文链接：</p>\n<ul>\n<li><a href=\"https://medium.com/@dvoytenko/amp-ios-scrolling-and-position-fixed-b854a5a0d451\" target=\"_blank\" rel=\"noopener\">AMP, iOS, Scrolling and Position Fixed</a></li>\n<li><a href=\"https://hackernoon.com/amp-ios-scrolling-and-position-fixed-redo-the-wrapper-approach-8874f0ee7876\" target=\"_blank\" rel=\"noopener\">AMP, iOS, Scrolling and Position Fixed Redo — the wrapper approach</a></li>\n</ul>\n<p>首先，你需要先了解一下 AMP，<a href=\"https://imququ.com/post/amp-project.html\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们对于 AMP 的目标是确保 document 文档在不同环境中都是可嵌入的，无论是单独查看还是在 webview 中或者在 iframe 中——总体而言，它在不同环境中的功能和行为表现都应该尽可能相同。我们将从一个简单的栗子开始，在这个栗子中，一个 AMP 文档通过 iframe 被嵌入了一个 web app。这听起来很正常，但是很实在的说，iframes 在最近已经很少有人用了。闲话少说，html 结构是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>I’m a Web App and I show AMP documents<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    iframe &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">      top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">iframe</span> … <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">scrolling</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.ampproject.org/c/pub1.com/doc1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面这段代码通常来说在移动设备上表现良好。然后我们有了一个新的想法，我们尝试将 iframe 调整到整个 document 的高度，同时使用 static 定位，从而将滚动委托给上一层的 window。然而，出于一些原因，我们放弃了这种方法：</p>\n<ul>\n<li>当视口高度等于文档高度时，在嵌入的AMP文档中设置<code>“position: fixed”</code>是不会起作用的</li>\n<li>计算文档高度容易出错，而且有延迟</li>\n</ul>\n<p>当然，我们最终没有很好的解决方案。主要是，设置了<code>“scrolling=yes”</code>的 iframe 会丢失一些移动设备的特性，比如滚动时隐藏地址栏。然而，我们仍然觉得这已经是一个很好的折衷方案了。除此之外，一些浏览器已经开始尝试将这些特性扩展到非 body 滚动的情况中。我们就这样美滋滋，直到我们遇到了 iOS。。</p>\n<h3 id=\"问题1：iOS-不支持-iframe-的-“scrollable-yes”\"><a href=\"#问题1：iOS-不支持-iframe-的-“scrollable-yes”\" class=\"headerlink\" title=\"问题1：iOS 不支持 iframe 的 “scrollable=yes”\"></a>问题1：iOS 不支持 iframe 的 <code>“scrollable=yes”</code></h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=149264\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=149264</a> 简单的说：<strong>ios中不能有可以滚动的iframe</strong>。然而，我们找到了解决这个 bug 的方法。参考这里<a href=\"https://github.com/ampproject/amphtml/blob/de7a14d/src/service/viewport-impl.js#L754\" target=\"_blank\" rel=\"noopener\">ViewportBindingNaturalIosEmbed_</a>。简短而言，我们让 document 中真正的<code>&lt;body&gt;</code>元素滚动。这样的话，即使 iframe 自身不滚动，它里面的内容也会滚动。 我们按照上面方案修改后的 AMP 文档如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们以为自己很牛逼，然而。。</p>\n<h3 id=\"问题2：现在-scrollTop，scrollLeft，scrollHeight，scrollWidth-不管用了\"><a href=\"#问题2：现在-scrollTop，scrollLeft，scrollHeight，scrollWidth-不管用了\" class=\"headerlink\" title=\"问题2：现在 scrollTop，scrollLeft，scrollHeight，scrollWidth 不管用了\"></a>问题2：现在 scrollTop，scrollLeft，scrollHeight，scrollWidth 不管用了</h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=106133\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=106133</a> 这是 webkit 中长期存在的一个 bug。scrollTop 和其他类似属性被分配给了 <code>“document.body”</code>，但是却委托给了<code>“document.documentElement”</code>。最终，当 “scrollingElement” 是文档里的大部分元素的时候，这个问题会被解决。同时，令人惊喜的是，这个 bug 不会对我们在问题1中提出的解决方案造成冲突。然而，<code>“scrollTop”</code> 将会一直是 0，从而导致其他连带属性也会受到影响，比如 <code>“window.pageYOffset”</code> 解决方案是添加一个滚动的元素到文档顶部。它的 <code>“getBoundingClientRect().top”</code> 就可以用来重新计算文档的滚动位置。 具体如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scroll-pos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        width: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        height: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        visibility: hidden;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们的 JS 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScrollTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 要对scrollPos.top取负值的原因是滚动位置在计算时，</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们的scrollPos元素会向上滚动，在视口范围外,</span></span><br><span class=\"line\">  <span class=\"comment\">// 此时它的top值是负的</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -scrollPos.getBoundingClientRect().top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，这个解决方案显得很蠢，但是它确实奏效了。类似的方法可用于“scrollLeft”，“scrollHeight” 以及剩余属性。 然而，我们又有了新的发现。。</p>\n<h3 id=\"问题3：“postion-fixed”-的元素在-“overflow-auto”-容器中会有很多-bug\"><a href=\"#问题3：“postion-fixed”-的元素在-“overflow-auto”-容器中会有很多-bug\" class=\"headerlink\" title=\"问题3：“postion: fixed” 的元素在 “overflow: auto” 容器中会有很多 bug\"></a>问题3：“postion: fixed” 的元素在 “overflow: auto” 容器中会有很多 bug</h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=154399\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=154399</a> 如果一个 “position: fixed” 元素在一个 “overflow: auto” 的容器中，它的表现会让你很失望：滚动的时候，“position: fixed” 元素会跳远和闪现。它看起来像是稍微滚动一点然而又跳回到正确的位置。这个效果很差，可以通过这个<a href=\"https://drive.google.com/file/d/0B_v8thsbiGyDMXZMZkRFZGFRbjA/view?usp=sharing\" target=\"_blank\" rel=\"noopener\">视频演示</a>看到这个 bug。 要哭了。我们通过各种 hack 解决了各种 bug，最后还是有一个 bug，我们如何解决这个？这里有一个很疯狂的 idea 貌似好使。我们可以添加一个虚拟元素到 “document.documentElement”（不是 “body”，所以它其实是 “body” 的兄弟元素）。我们把它叫做“<strong>固定层</strong>”。他将占据整个视口。我们将使用CSS来找到所有的可能是 “fixed” 的元素（希望不会有太多。。），如果在某些时候它们是确定 “fixed” 的，我们就通过正确的 “z-index” 属性将它们移动到“固定层” 你可能看晕了，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#fixed-element</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      position: fixed;</span></span><br><span class=\"line\"><span class=\"undefined\">      right: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">      top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-element\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      width: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      height: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当我们找到一个确实 “fixed” 的元素的时候，我们将它移动到“固定层”，像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-element\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"pointer-events: initial; z-index: 11;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此，我们可以根据某元素是否 “fixed” 来将它在 “\bbody” 中的原始位置和“固定层”之间移动。 这个方法就无懈可击了吗？很明显没有：</p>\n<ul>\n<li>\b这代码看都看不懂！</li>\n<li>计算 “z-index” 会相当痛苦</li>\n<li>我们将失去一些 CSS 祖先选择器</li>\n</ul>\n<p>但是它确实是有效的，可以看一下<a href=\"http://github.com/ampproject/amphtml/pull/2128\" target=\"_blank\" rel=\"noopener\">这条PR</a>。还有别的 idea 吗？ 准确来说是有的，下面是作者第二篇文章的译文：</p>\n<h2 id=\"回顾一下\"><a href=\"#回顾一下\" class=\"headerlink\" title=\"回顾一下\"></a>回顾一下</h2><p>简单回顾一下，AMP 文档经常在一个滚动的 iframe 中进行展示。它的 html 结构看起来像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>I'm a Web App and I show AMP documents<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      iframe &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">iframe</span> … <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">scrolling</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.ampproject.org/c/pub1.com/doc1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在大部分浏览器中，上面这段代码表现很正常。但是在 ios 中会有很多异常表现，我们尝试了很多方法，包括通过内容调整 iframe 大小和滚动主文档。但是他们都有一些性能问题，具体可以参见上面的问题描述。 根本而言，ios 的 safari 浏览器不支持滚动的 iframe。换句话说，<code>“scrolling=yes”</code> 这个属性被直接忽略了。<a href=\"http://jsbin.com/gugika/edit?html,css,output\" target=\"_blank\" rel=\"noopener\">看这个例子</a>。这个 bug 由来已久，可以<a href=\"https://bugs.webkit.org/show_bug.cgi?id=149264\" target=\"_blank\" rel=\"noopener\">在这里</a>发现。 我们在<a href=\"https://github.com/ampproject/amphtml/blob/de7a14d/src/service/viewport-impl.js#L754\" target=\"_blank\" rel=\"noopener\">之前提到的一篇文章</a>中发现了一个很原始的方案。简而言之，我们让真正的 “body” 元素滚动。于是，即使 iframe 它自身不滚动，iframe 中的内容也会滚动，AMP 文档如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们 iframe 可以滚动了！这个 AMP 中的解决方案我们用了一年。然而，随着时间的流逝，我们发现了一系列的问题，这些问题在上一篇文章中已经详细介绍过了，这里再简单罗列一下： 给“ body” 添加 “position: absolute” 属性是作者不想看到的，会影响原始布局。另外一个副作用是我们不没办法在 “body” 元素上设置 margin body 的 scrollTop，scrollLeft，scrollHeight 和 scrollWidth 将不起作用。这个 bug 通过上面介绍的注入虚拟 dom 元素可以解决。 “position: fixed” 在 “-webkit-overflow-scrolling: touch” 容器中会有各种 bug 抵消 header 和 footer 需要给 body 设置边框，这个代价很昂贵，因为它缩小了滚动区域，同时可能会打破现有布局。而隐藏头部又会造成 UI 视觉的隔断和滚动的间断 那我们如何解决这个问题呢，我们的主角就要登场了。。</p>\n<h3 id=\"新的解决方案——wrapper-元素\"><a href=\"#新的解决方案——wrapper-元素\" class=\"headerlink\" title=\"新的解决方案——wrapper 元素\"></a>新的解决方案——wrapper 元素</h3><p>这个方案已开源，可以<a href=\"https://github.com/ampproject/amphtml/blob/2d73ac0d9c451dee4c89ac1fa73329b69edca5a4/src/service/viewport-impl.js#L1404\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看源代码</p>\n<h3 id=\"DOM-结构\"><a href=\"#DOM-结构\" class=\"headerlink\" title=\"DOM 结构\"></a>DOM 结构</h3><p>通俗来讲，wrapper 元素和滚动的 “body” 元素是类似的。iframe 在 ios 的 safari 浏览器中依然无法滚动，所以我们需要让 iframe 中的内容滚动。因为让<code>&lt;body&gt;</code>滚动会有一系列问题，所以我们可以创建一个滚动的 wrapper，然后将它放在<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>中间。换句话说，我们将<code>&lt;body&gt;</code>元素包装在一个可滚动的容器中。 现在的 dom 结构类似这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i-amp-html-wrapper</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">i-amp-html-wrapper</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>毫无疑问，这看起来很怪，但是它确实解决了原来的问题——它让 iframe 在 ios 的 safari 浏览器中可以滚动。此外，它也解决了上面描述的许多问题：</p>\n<ul>\n<li>对于<code>&lt;body&gt;</code>元素没有任何强制要求：它仍然拥有原来的“position”属性，同时也可以拥有默认的“overflow: visible”属性。AMP 允许 dom 中的大多数 css 样式，这样可以减少对代码原作者样式的干扰</li>\n<li>可滚动的 wrapper 元素可以用来获取 scrollTop，scrollLeft，scrollHeight 和 scrollWidth 属性，于是之前介绍过的虚拟元素将不再需要</li>\n<li>不再需要给<code>&lt;body&gt;</code>设置边界来抵消 header 和 footer 了——只需要给 wrapper 元素添加 padding 就足够了</li>\n</ul>\n<p>然而，“position: fixed” 的问题仍然存在，我们稍后再谈。</p>\n<h3 id=\"两个-lt-html-gt-元素\"><a href=\"#两个-lt-html-gt-元素\" class=\"headerlink\" title=\"两个&lt;html&gt;元素\"></a>两个<code>&lt;html&gt;</code>元素</h3><p>我们采用了 wrapper 方案，然后很快就碰到了一个小问题。很多人喜欢 html&gt;body 选择器，而我们在 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code> 中间插入了 i-amp-html-wrapper 元素。为了解决这个问题，我们将 i-amp-html-wrapper 作为另外一个 <code>&lt;html&gt;</code> 元素，最终的 dom 结构长这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-html-wrapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>加倍奇怪，加倍好玩。总而言之现在 html&gt;body 选择器将正常起作用</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>AMP runtime 会在启动时尽可能早的创建 wrapper 元素。而现有的 <code>&lt;body&gt;</code> 元素会作为子元素放到新建 wrapper 里面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create wrapper.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'html'</span>);</span><br><span class=\"line\">wrapper.id = <span class=\"string\">'i-amp-html-wrapper'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Setup classes and styles.</span></span><br><span class=\"line\">wrapper.className = <span class=\"built_in\">document</span>.documentElement.className;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.className = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style = <span class=\"string\">'...'</span>;</span><br><span class=\"line\">wrapper.style = <span class=\"string\">'...'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Attach wrapper straight inside the document root.</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.appendChild(wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reparent the body.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">wrapper.appendChild(body);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">document</span>, <span class=\"string\">'body'</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> body,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这段代码很简单，不过有一个细节——将 body 移到 wrapper 里面会将 document.body 重置为 null，因此我们需要将 document.body 重写回初始的 <code>&lt;body&gt;</code> 元素，可以通过 Object.defineProperty 来实现</p>\n<h4 id=\"position-fixed问题\"><a href=\"#position-fixed问题\" class=\"headerlink\" title=\"position: fixed问题\"></a>position: fixed问题</h4><p>尽管 wrapper 方案能够解决大部分问题，但是 position: fixed 的问题仍然存在 这个问题在上面那篇文章已经详细介绍过了，有关 ios 的 safari 浏览器 bug 可以<a href=\"https://bugs.webkit.org/show_bug.cgi?id=154399\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看 简而言之，一个 position: fixed 元素在一个 -webkit-overflow-scrolling: touch 容器中滚动时会出现跳跃和闪现的问题。它看起来像是稍微滚动一点然而又跳回到正确的位置。可以通过这个<a href=\"https://drive.google.com/file/d/0B_v8thsbiGyDMXZMZkRFZGFRbjA/view?usp=sharing\" target=\"_blank\" rel=\"noopener\">视频演示</a>看到这个 bug。 在我们之前的解决方案中，我们将有 position: fixed 属性的元素放到了 <code>&lt;body&gt;</code> 外面，同时放到了一个虚拟“固定层”元素内部，这个“固定层”元素放在了 -webkit-overflow-scrolling: touch 容器外面 最终的 dom 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-html-wrapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">fixed</span> <span class=\"attr\">elements</span> <span class=\"attr\">reparented</span> <span class=\"attr\">here</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>于是，<strong>我们最终获得了两个<code>&lt;html&gt;</code>元素和两个<code>&lt;body&gt;</code>元素</strong>。看起来很疯狂，但是它确实解决了两个问题： iframe 不滚动和 position:fixed 元素闪现问题 很明显，我们将取得更好的效果如果存在已久的 ios safari 问题被修复。。</p>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"AMP","path":"api/tags/AMP.json"},{"name":"fixed","path":"api/tags/fixed.json"},{"name":"ios","path":"api/tags/ios.json"}]},{"title":"他山之石，可以攻玉，好文章推荐","slug":"他山之石，可以攻玉，好文章推荐","date":"2017-08-07T03:40:22.000Z","updated":"2019-02-10T15:06:51.074Z","comments":true,"path":"api/articles/他山之石，可以攻玉，好文章推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>经常看别人的博客或者文章，有时候闲暇时间也会刷一刷微信公众号神马的（但其实微信公众号上的文章也是转载其他人的博客），所以难免会碰到一些“不想关闭”的文章，放到收藏夹里又怕哪天消失了，所以就放到这里吧，也可以节省大家寻找好文章的时间。（这些文章有些难度会比较大，不太推荐将大量的时间花费在“纠结原理”上）</p>\n<h2 id=\"人工智能相关\"><a href=\"#人工智能相关\" class=\"headerlink\" title=\"人工智能相关\"></a>人工智能相关</h2><h3 id=\"深入浅出看懂AlphaGo元\"><a href=\"#深入浅出看懂AlphaGo元\" class=\"headerlink\" title=\"深入浅出看懂AlphaGo元\"></a><a href=\"https://charlesliuyx.github.io/2017/10/18/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9C%8B%E6%87%82AlphaGo%E5%85%83/\" target=\"_blank\" rel=\"noopener\">深入浅出看懂AlphaGo元</a></h3><p>前段时间关于阿法狗的一篇文章（《今日Nature: 人工智能从0到1, 无师自通完爆阿法狗100-0 | 深度解析》）火爆了微信朋友圈，而关于阿法元是如何自我学习的，这篇文章讲述的很明白。</p>\n<h3 id=\"浅谈人工智能：现状、任务、构架与统一-正本清源\"><a href=\"#浅谈人工智能：现状、任务、构架与统一-正本清源\" class=\"headerlink\" title=\"浅谈人工智能：现状、任务、构架与统一 | 正本清源\"></a><a href=\"https://mp.weixin.qq.com/s/-wSYLu-XvOrsST8_KEUa-Q\" target=\"_blank\" rel=\"noopener\">浅谈人工智能：现状、任务、构架与统一 | 正本清源</a></h3><p>“人工智能”这个名词在沉寂了近 30 年之后，最近两年“咸鱼翻身”，成为了科技公司公关的战场、网络媒体吸睛的风口，随后受到政府的重视和投资界的追捧。于是，新闻发布会、高峰论坛接踵而来，政府战略规划出台，各种新闻应接不暇，宣告一个“智能为王”时代的到来。 到底什么是人工智能？现在的研究处于什么阶段？今后如何发展？这是大家普遍关注的问题。这篇文章用大篇幅解释了这些问题，目录如下：</p>\n<ul>\n<li>第一节 现状：正视现实</li>\n<li>第二节 未来：一只乌鸦给我们的启示</li>\n<li>第三节 历史：从“春秋五霸”到“战国六雄”</li>\n<li>第四节 统一：“小数据、大任务”范式与认知构架</li>\n<li>第五节 学科一：计算视觉 — 从“深”到“暗”</li>\n<li>第六节 学科二：认知推理 — 走进内心世界</li>\n<li>第七节 学科三：语言通讯 — 沟通的认知基础</li>\n<li>第八节 学科四：博弈伦理 — 获取、共享人类的价值观</li>\n<li>第九节 学科五：机器人学 — 构建大任务平台</li>\n<li>第十节 学科六：机器学习 — 学习的终极极限与“停机问题”</li>\n<li>第十一节 总结：智能科学 — 牛顿与达尔文的统一</li>\n</ul>\n<h2 id=\"前端相关\"><a href=\"#前端相关\" class=\"headerlink\" title=\"前端相关\"></a>前端相关</h2><h3 id=\"玉伯《从前端技术到体验科技（附演讲视频）》\"><a href=\"#玉伯《从前端技术到体验科技（附演讲视频）》\" class=\"headerlink\" title=\"玉伯《从前端技术到体验科技（附演讲视频）》\"></a><a href=\"https://cnodejs.org/topic/5a54a8a4afa0a121784a8ab0\" target=\"_blank\" rel=\"noopener\">玉伯《从前端技术到体验科技（附演讲视频）》</a></h3><p>我想，玉伯大神应该不用过多介绍了吧，从之前的 seajs 到现在的 ant design，而玉伯大神也从一名前端工程师“进化”为一名架构师，这篇文章是玉伯大神在 SEE Conf 大会上的演讲记录，同时文章末尾还有演讲视频链接，不喜欢看文字的朋友可以直接看演讲视频。</p>\n<h3 id=\"哔哩哔哩（B站）的前端之路\"><a href=\"#哔哩哔哩（B站）的前端之路\" class=\"headerlink\" title=\"哔哩哔哩（B站）的前端之路\"></a><a href=\"https://zhuanlan.zhihu.com/p/32487533\" target=\"_blank\" rel=\"noopener\">哔哩哔哩（B站）的前端之路</a></h3><p>作者总结了 B站 的前端进阶之路，前端的轮子很多，作者介绍了 B站 是如何选型的以及遇到了哪些坑。</p>\n<h3 id=\"深入剖析-WebKit\"><a href=\"#深入剖析-WebKit\" class=\"headerlink\" title=\"深入剖析 WebKit\"></a><a href=\"http://www.starming.com/2017/10/11/deeply-analyse-webkit/\" target=\"_blank\" rel=\"noopener\">深入剖析 WebKit</a></h3><p>这篇文章和他的题目一样，真的很“深入”，因为你可以看到滚轮滑动的速度。。不过图文并茂的表现形式并不会让你产生“看不下去”的感觉，来张目录感受一下是不是干货：</p>\n<div align=\"center\"><img src=\"\" alt=\"/images/hexo_post_286.png\" width=\"400\"></div>\n\n<h3 id=\"前端文章-收藏集-掘金\"><a href=\"#前端文章-收藏集-掘金\" class=\"headerlink\" title=\"前端文章- 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000010452096\" target=\"_blank\" rel=\"noopener\">前端文章- 收藏集 - 掘金</a></h3><p>掘金上面关于前端的文章集合，闲暇时间看一下，可能会有意想不到的收获</p>\n<h3 id=\"前端工程——基础篇\"><a href=\"#前端工程——基础篇\" class=\"headerlink\" title=\"前端工程——基础篇\"></a><a href=\"https://github.com/fouber/blog/issues/10\" target=\"_blank\" rel=\"noopener\">前端工程——基础篇</a></h3><p>fis 作者张玉龙对于前端工程的理解，从组件化到资源管理都阐述了自己的观点，这是一篇 2015 年的文章，但是文中的某些观念到现在看来仍然是字字珠玑，相信看完之后的你可以对前端有更深层次的理解。</p>\n<h3 id=\"大公司里怎样开发和部署前端代码？\"><a href=\"#大公司里怎样开发和部署前端代码？\" class=\"headerlink\" title=\"大公司里怎样开发和部署前端代码？\"></a><a href=\"https://github.com/fouber/blog/issues/6\" target=\"_blank\" rel=\"noopener\">大公司里怎样开发和部署前端代码？</a></h3><p>又是张玉龙的文章，通过一个实际的场景一步步的告诉你大公司的前端代码是如何开发和部署上线的。</p>\n<h3 id=\"Web-前端知识体系精简\"><a href=\"#Web-前端知识体系精简\" class=\"headerlink\" title=\"Web 前端知识体系精简\"></a><a href=\"http://www.cnblogs.com/onepixel/p/7021506.html\" target=\"_blank\" rel=\"noopener\">Web 前端知识体系精简</a></h3><p>从前端三剑客：HTML、CSS、Javascript 的角度分析了前端的知识体系，涉及到的领域比较广泛，很适合前端新人开拓视野和寻找学习方向，同时总结的也很全面，是一篇不错的入门教材。</p>\n<h3 id=\"移动时代的前端加密\"><a href=\"#移动时代的前端加密\" class=\"headerlink\" title=\"移动时代的前端加密\"></a><a href=\"http://div.io/topic/1220\" target=\"_blank\" rel=\"noopener\">移动时代的前端加密</a></h3><p>这篇文章篇幅很长，对于前端来说，很多人感觉“加密”是莫须有的一种东西，其实这是一种误解，“加密”并不意味着绝对安全，这篇文章将从这个角度向你阐述前端加密的正确姿势。</p>\n<h3 id=\"前端疲劳\"><a href=\"#前端疲劳\" class=\"headerlink\" title=\"前端疲劳\"></a><a href=\"http://www.jianshu.com/p/a2eff3d721cb\" target=\"_blank\" rel=\"noopener\">前端疲劳</a></h3><p>有这么多不同的前端技术栈，不同的前端框架，不同的前端工具和库像水一样包裹着我，我不去学就不会，学了又学不完。在前端的海洋里越陷越深的我究竟该如何自救呢？这篇文章可能有你要的答案</p>\n<h3 id=\"精读前后端渲染之争\"><a href=\"#精读前后端渲染之争\" class=\"headerlink\" title=\"精读前后端渲染之争\"></a><a href=\"https://github.com/camsong/blog/issues/8\" target=\"_blank\" rel=\"noopener\">精读前后端渲染之争</a></h3><p>前后端渲染一直以来都是一个带有争议的话题，而该文章的作者对<a href=\"https://medium.freecodecamp.org/heres-why-client-side-rendering-won-46a349fadb52\" target=\"_blank\" rel=\"noopener\">国外一篇关于前后端渲染的文章</a>进行了精读，介绍了前后端渲染各自的优缺点，以及我们在实际项目中如何取舍。</p>\n<h3 id=\"技术雷达之「微前端」-将微服务理念扩展到前端开发\"><a href=\"#技术雷达之「微前端」-将微服务理念扩展到前端开发\" class=\"headerlink\" title=\"技术雷达之「微前端」- 将微服务理念扩展到前端开发\"></a><a href=\"https://zhuanlan.zhihu.com/p/32378432\" target=\"_blank\" rel=\"noopener\">技术雷达之「微前端」- 将微服务理念扩展到前端开发</a></h3><p>看标题就知道，这是一篇基本上看不懂的文章，不过图文并茂的形式让这篇文章生动了很多，内容很充实，覆盖面很广</p>\n<h3 id=\"理解-Web-路由\"><a href=\"#理解-Web-路由\" class=\"headerlink\" title=\"理解 Web 路由\"></a><a href=\"https://zhuanlan.zhihu.com/p/24814675\" target=\"_blank\" rel=\"noopener\">理解 Web 路由</a></h3><p>关于路由，其实是一个很抽象的概念，而这篇文章对经常提到的前端路由和后端路由的实现和区别进行了很详细很清晰的讲解，同时对动态路由和严格路由也进行了介绍。</p>\n<h3 id=\"一站到底—前端基础之网络\"><a href=\"#一站到底—前端基础之网络\" class=\"headerlink\" title=\"一站到底—前端基础之网络\"></a><a href=\"https://juejin.im/post/5b3357556fb9a00e5a4b63df\" target=\"_blank\" rel=\"noopener\">一站到底—前端基础之网络</a></h3><p>这篇文章算是近几年来我读过的信息量最大、知识点最全的文章了，作者从访问一个网址说起，为读者建立了一个健全的网络知识体系，该文章解答了以下问题：</p>\n<p><strong>必会：</strong></p>\n<ul>\n<li>http 报文都有哪些内容？</li>\n<li>HTTP 协议头含有哪些重要的部分，HTTP 状态码？</li>\n<li>HTTP 状态码状态码都有哪些？</li>\n<li>什么是强缓存？什么是弱缓存？</li>\n<li>浏览器的现缓存机制是什么？如何设置 HTTP 缓存？</li>\n<li>你知道有哪些 HTTP 方法？POST 和 PUT 有什么区别？</li>\n<li>如何对数据进行压缩（ZLIB），Gzip? 压缩的范围是什么，请求头会压缩吗？</li>\n<li>跨域，为什么 JS 会对跨域做出限制？如何允许跨域?</li>\n</ul>\n<p><strong>基础：</strong></p>\n<ul>\n<li>影响网速的原因有哪些？网络丢包的主要原因是什么？</li>\n<li>网络体系结构的五层参考模型都是什么？它们之间的关系是什么？</li>\n<li>我们常听到报文、段（分组）、数据报、帧、和数据包，它们有什么关系？</li>\n<li>Ajax 能发送 http 请求，它和 http 有什么样的关系？</li>\n<li>HTTP1.0 到 HTTP1.1 解决了什么问题？</li>\n<li>http2 有什么特性？</li>\n<li>http1.1 为什么会有队首阻塞？</li>\n<li>SSL 与 TLS 关系？HTTPS 协议如何实现？</li>\n</ul>\n<p><strong>补课与拓展：（慢慢更新）</strong></p>\n<ul>\n<li>常用的传输层协议有哪些？TCP 和 UDP 分别有什么特点？</li>\n<li>解释一下 TCP 的三次握手和四次挥手？</li>\n<li>为什么说 TCP 可能是网络通信的瓶颈？如何解决 TCP 队首阻塞？</li>\n<li>谷歌新出 QUIC 为什么要基于 UDP？</li>\n<li>QUIC 有哪些新特性，解决了什么问题？</li>\n</ul>\n<h3 id=\"WEB-服务器探究\"><a href=\"#WEB-服务器探究\" class=\"headerlink\" title=\"WEB 服务器探究\"></a><a href=\"https://wangzitian0.github.io/2017/06/27/WEB-server-explore/\" target=\"_blank\" rel=\"noopener\">WEB 服务器探究</a></h3><p>作者介绍了 web 服务器的基本概念，和常见的服务端演替路线。图文并茂的方式很容易理解，干货满满。</p>\n<h3 id=\"网站性能优化实战——从12-67s到1-06s的故事\"><a href=\"#网站性能优化实战——从12-67s到1-06s的故事\" class=\"headerlink\" title=\"网站性能优化实战——从12.67s到1.06s的故事\"></a><a href=\"http://imweb.io/topic/5b6fd3c13cb5a02f33c013bd\" target=\"_blank\" rel=\"noopener\">网站性能优化实战——从12.67s到1.06s的故事</a></h3><p>作者将<a href=\"http://jerryonlyzrj.com/resume/\" target=\"_blank\" rel=\"noopener\">自己的在线简历</a>进行了性能优化，首屏时间从 12.67s 降低到了 1.06s，这个过程中作者踩了很多坑，翻阅了很多书籍，最终总结出了这篇文章。文章涉及到的知识点比较全面，对性能优化进行了系统的介绍。</p>\n<h3 id=\"现代-Web-开发基础与工程实践\"><a href=\"#现代-Web-开发基础与工程实践\" class=\"headerlink\" title=\"现代 Web 开发基础与工程实践\"></a><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">现代 Web 开发基础与工程实践</a></h3><p>前端大牛@王下邀月熊的著作，对 Web 开发基础与工程实践的相关博客、示例代码与开源项目、整理成的系列书籍等内容进行了总结，信息量异常庞大，包含以下篇章：</p>\n<ul>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%AF%BC%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">导论篇</a>: Web 开发简史与运行机制，数据流驱动的界面，模块化与组件化，工具化与工程化，前后端分离与 GraphQL，大前端与 WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%9F%BA%E7%A1%80\" target=\"_blank\" rel=\"noopener\">基础篇</a>: 对于 HTML、CSS、DOM 等 Web 开发中涉及的基础知识与理念的总结介绍。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5\" target=\"_blank\" rel=\"noopener\">工程实践篇</a>: 构建工具，测试，安全，WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96%E7%AF%87\" target=\"_blank\" rel=\"noopener\">架构优化篇</a>: 组件化，状态管理，性能优化，PWA。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\" target=\"_blank\" rel=\"noopener\">React 篇</a>：近年来前端领域百花齐放，各种技术方案争妍斗艳，各领风骚。本书立足于其中的佼佼者 React，深入浅出的介绍 React、Webpack 、 ES6、Redux 、 MobX 等常见前端开发工具与开发库的用法，帮助初学者能够迅速成为一名合格前端工程师。而本书也不仅局限于工具使用的层面，探寻各种技术方案背后蕴含的设计思想与架构模式，从前端工程化的角度讨论前端开发者在进阶过程中需要掌握的工程实践、模块化与组件化、质量保障、性能优化等知识要点。最终帮助开发者在前端开发中能够因地制宜的指定合理方案，以尽可能快的速度实现可信赖的产品。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/Vue\" target=\"_blank\" rel=\"noopener\">Vue 篇</a>：本部分目前正逐步启动，笔者的初衷是希望能够保证本书章节与 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\" target=\"_blank\" rel=\"noopener\">React 与前端工程化实践</a>尽可能一致，从而更方便地去介绍不同技术栈下相通的设计理念；目前本书的目录只是拷贝自 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\" target=\"_blank\" rel=\"noopener\">React 与前端工程化实践</a>，未来笔者会逐步完善。</li>\n</ul>\n<h3 id=\"雅虎前端优化35条规则翻译\"><a href=\"#雅虎前端优化35条规则翻译\" class=\"headerlink\" title=\"雅虎前端优化35条规则翻译\"></a><a href=\"https://github.com/creeperyang/blog/issues/1\" target=\"_blank\" rel=\"noopener\">雅虎前端优化35条规则翻译</a></h3><p>本文是大名鼎鼎的雅虎前端优化规则（<strong>Yslow</strong>）的翻译。作者对其中的一些例子进行了精简。</p>\n<h3 id=\"前端知识体系目录\"><a href=\"#前端知识体系目录\" class=\"headerlink\" title=\"前端知识体系目录\"></a><a href=\"http://hao.jser.com/archive/5314/\" target=\"_blank\" rel=\"noopener\">前端知识体系目录</a></h3><p>从基础到进阶，从 HTML、CSS、JS 到 HTTP，简单的总结了前端领域需要了解的知识点，同时推荐了一些书籍，对于那些想要入坑前端的童鞋来说是一份不错的指引文档。</p>\n<h3 id=\"微前端的那些事儿\"><a href=\"#微前端的那些事儿\" class=\"headerlink\" title=\"微前端的那些事儿\"></a><a href=\"https://github.com/phodal/microfrontends\" target=\"_blank\" rel=\"noopener\">微前端的那些事儿</a></h3><blockquote>\n<p>微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为<strong>多个小型前端应用聚合为一的应用</strong>。各个前端应用还可以<strong>独立运行</strong>、<strong>独立开发</strong>、<strong>独立部署</strong>。</p>\n</blockquote>\n<p>这篇文章是 phodal 对于微前端的解读，包括其实现方式以及方案对比，而微服务与前端的结合会有多大的优势，值得期待。</p>\n<h3 id=\"2018-前端常见题汇总\"><a href=\"#2018-前端常见题汇总\" class=\"headerlink\" title=\"2018 前端常见题汇总\"></a><a href=\"https://github.com/qianbin01/frontend_train\" target=\"_blank\" rel=\"noopener\">2018 前端常见题汇总</a></h3><p>汇总了前端一些问题，作者不定时更新，建议收藏</p>\n<ol>\n<li><a href=\"https://github.com/qianbin01/frontend_train#html\" target=\"_blank\" rel=\"noopener\">HTML 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#css\" target=\"_blank\" rel=\"noopener\">CSS 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">JAVASCRIPT 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#dom\" target=\"_blank\" rel=\"noopener\">DOM 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#http\" target=\"_blank\" rel=\"noopener\">HTTP 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#vue\" target=\"_blank\" rel=\"noopener\">VUE 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">算法相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#web\" target=\"_blank\" rel=\"noopener\">网络安全相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#webpack\" target=\"_blank\" rel=\"noopener\">webpack 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#other\" target=\"_blank\" rel=\"noopener\">其他</a></li>\n</ol>\n<h3 id=\"InfoQ-趋势报告之-JavaScript-和-Web-开发\"><a href=\"#InfoQ-趋势报告之-JavaScript-和-Web-开发\" class=\"headerlink\" title=\"InfoQ 趋势报告之 JavaScript 和 Web 开发\"></a><a href=\"https://www.infoq.cn/article/TFXQXkWbPPM*cK5KFJrW\" target=\"_blank\" rel=\"noopener\">InfoQ 趋势报告之 JavaScript 和 Web 开发</a></h3><p>文章简单介绍了 Javascript 生态系统的现状和发展历程，文中提到了很多名词和框架，是一篇很不错的“扫盲”文章。</p>\n<h3 id=\"2019-Web开发技术指南和趋势\"><a href=\"#2019-Web开发技术指南和趋势\" class=\"headerlink\" title=\"2019 - Web开发技术指南和趋势\"></a><a href=\"https://www.jianshu.com/p/062c978d9f04\" target=\"_blank\" rel=\"noopener\">2019 - Web开发技术指南和趋势</a></h3><p>这是一个 2019 年你成为前端，后端或全栈开发者的进阶指南:</p>\n<ol>\n<li>你不需要学习所有的技术成为一个 web 开发者</li>\n<li>这个指南只是通过简单分类列出了技术选项</li>\n<li>我将从我的经验和参考中给出建议</li>\n<li>首选我们会介绍通用的知识, 最后介绍 2019 年的 Web 的一些趋势</li>\n</ol>\n<p>要想知道更多细节, 请看 Youtube 视频: <a href=\"https://www.youtube.com/watch?v=UnTQVlqmDQ0&amp;t=18s\" target=\"_blank\" rel=\"noopener\">Web Development in 2019</a></p>\n<h3 id=\"前端模块化详解-完整版\"><a href=\"#前端模块化详解-完整版\" class=\"headerlink\" title=\"前端模块化详解(完整版)\"></a><a href=\"https://juejin.im/post/5c17ad756fb9a049ff4e0a62\" target=\"_blank\" rel=\"noopener\">前端模块化详解(完整版)</a></h3><p>这篇文章内容主要有理解模块化，为什么要模块化，模块化的优缺点以及模块化规范，并且介绍下开发中最流行的 CommonJS, AMD, ES6、CMD 规范。作者试图站在小白的角度，用通俗易懂的笔调介绍这些枯燥无味的概念，希望屏幕前的你阅读后，对模块化编程有个全新的认识和理解！</p>\n<h3 id=\"2018-前端性能优化清单\"><a href=\"#2018-前端性能优化清单\" class=\"headerlink\" title=\"2018 前端性能优化清单\"></a><a href=\"https://cherryblog.site/front-end-performance-checklist-2018.html\" target=\"_blank\" rel=\"noopener\">2018 前端性能优化清单</a></h3><p>英文原文：<a href=\"https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/\" target=\"_blank\" rel=\"noopener\">https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/</a>，文章较长，需要比较长的时间才能读完，涉及到的地方非常全面，五星推荐。</p>\n<h3 id=\"列一份前端知识架构图\"><a href=\"#列一份前端知识架构图\" class=\"headerlink\" title=\"列一份前端知识架构图\"></a><a href=\"https://time.geekbang.org/column/article/77804\" target=\"_blank\" rel=\"noopener\">列一份前端知识架构图</a></h3><p>计算机之子“Winter”列的一份前端知识框架图</p>\n<h3 id=\"茴字的四种写法—移动适配方案的进化\"><a href=\"#茴字的四种写法—移动适配方案的进化\" class=\"headerlink\" title=\"茴字的四种写法—移动适配方案的进化\"></a><a href=\"https://segmentfault.com/a/1190000014309664\" target=\"_blank\" rel=\"noopener\">茴字的四种写法—移动适配方案的进化</a></h3><p>这是一篇一站式的文章，可以系统的了解前端适配的演进。</p>\n<h3 id=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"><a href=\"#现代前端开发路线图：从零开始，一步步成为前端工程师\" class=\"headerlink\" title=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"></a><a href=\"https://36kr.com/p/5128487.html\" target=\"_blank\" rel=\"noopener\">现代前端开发路线图：从零开始，一步步成为前端工程师</a></h3><p>很多人都想学编程。但是苦于没有具体的步骤和指导。比如想找份前端开发的工作，却不知道应该先学习什么再学习什么，也不知道该选择什么样的工具。因为经常被人问到类似的问题，全栈开发者Kamran Ahmed索性在github上制订了一份<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"noopener\">现代前端开发的路线图</a>，并且用<a href=\"https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c\" target=\"_blank\" rel=\"noopener\">一篇文章</a>对前端开发的整个学习过程进行了详细解释。感兴趣的初学者不容错过。</p>\n<p>而这篇文章的目的就是依次解释路线图的每一个步骤，对于前端初学者来说具有指引作用。</p>\n<h2 id=\"JS相关\"><a href=\"#JS相关\" class=\"headerlink\" title=\"JS相关\"></a>JS相关</h2><h3 id=\"统一回复《怎么学JavaScript？》\"><a href=\"#统一回复《怎么学JavaScript？》\" class=\"headerlink\" title=\"统一回复《怎么学JavaScript？》\"></a><a href=\"http://www.qdfuns.com/notes/17398/d3f6dd40e2d3ff15b209810dfa98be0b:storey-71.html\" target=\"_blank\" rel=\"noopener\">统一回复《怎么学JavaScript？》</a></h3><p>作者通过自己的经历告诉大家：如何学习前端。这是一篇很不错的前端入门文章，作者推荐了一些前端方面的书籍，同时还注明了这些书籍适合什么时候阅读以及适合怎样阅读，建议仍然不知道如何学前端的你好好看一下这篇文章</p>\n<h3 id=\"javascript-的-12-个怪癖（quirks）\"><a href=\"#javascript-的-12-个怪癖（quirks）\" class=\"headerlink\" title=\"javascript 的 12 个怪癖（quirks）\"></a><a href=\"http://justjavac.com/javascript/2013/04/08/12-javascript-quirks.html\" target=\"_blank\" rel=\"noopener\">javascript 的 12 个怪癖（quirks）</a></h3><p>实际上 javascript 是一个相当简洁的语言，但是也难免会有一些怪癖（quirks）。这是作者翻译的国外一个开发者的系列文章，同时在我发布之前（2017-8-7），作者还没有翻译团队，如果有英语比较好的前端小伙伴，欢迎加入翻译的队伍中，像我这种英语“战五渣”表示只能“拿来”了。。</p>\n<h3 id=\"80-应聘者都不及格的-JS-面试题\"><a href=\"#80-应聘者都不及格的-JS-面试题\" class=\"headerlink\" title=\"80% 应聘者都不及格的 JS 面试题\"></a><a href=\"https://juejin.im/post/58cf180b0ce4630057d6727c\" target=\"_blank\" rel=\"noopener\">80% 应聘者都不及格的 JS 面试题</a></h3><p>从最简单的 setTimeout() 执行队列，到自执行函数产生闭包，再到 ES6 中的 promise 以及 ES7 中的 async 和 await，作者通过一道不断延伸出来的js面试题讲解了在面试中经常遇到的问题，同时对以上的这些知识点进行了概括总结</p>\n<h3 id=\"翻译-We-have-a-problem-with-promises\"><a href=\"#翻译-We-have-a-problem-with-promises\" class=\"headerlink\" title=\"[翻译] We have a problem with promises\"></a><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">[翻译] We have a problem with promises</a></h3><p>promise 一直是被认为判断一名“前端工程师”是否仍然处在“初级”的利器，而这篇文章通过 promise 相关的四段代码对 promise 进行了深入剖析，这是一篇译文，英文原文可以<a href=\"http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看</p>\n<h3 id=\"学用-JavaScript-设计模式\"><a href=\"#学用-JavaScript-设计模式\" class=\"headerlink\" title=\"学用 JavaScript 设计模式\"></a><a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/constructor-mode.html\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式</a></h3><p>设计模式的概念很早之前就有了，而 JS 虽然之前一直被认为是“做网页”的语言，但是JS中也有设计模式的思想，相信看完这个系列的文章之后，你会对 JS 有更加深入的理解，该系列文章对于没有“面向对象”语言基础的童鞋来说可能会有些难度，建议在看的过程中及时查阅其他资料。</p>\n<h3 id=\"ajax跨域，这应该是最全的解决方案了\"><a href=\"#ajax跨域，这应该是最全的解决方案了\" class=\"headerlink\" title=\"ajax跨域，这应该是最全的解决方案了\"></a><a href=\"https://segmentfault.com/a/1190000012469713\" target=\"_blank\" rel=\"noopener\">ajax跨域，这应该是最全的解决方案了</a></h3><p>看题目就很屌，恩。。</p>\n<h3 id=\"jQuery的document-ready与-onload事件——你真的思考过吗？\"><a href=\"#jQuery的document-ready与-onload事件——你真的思考过吗？\" class=\"headerlink\" title=\"jQuery的document ready与 onload事件——你真的思考过吗？\"></a><a href=\"https://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></h3><p>虽然题目看似和 jQuery 关系很大，但其实作者探究了很多 JS 相关问题，包括加载顺序以及 load 事件的产生原因，内容短小精悍，值得一看。下面这些问题是作者在文中所阐述探索的：</p>\n<ol>\n<li>window.onload 到底是什么加载完触发？</li>\n<li>body 为什么会有 onload 事件？</li>\n<li>为什么是 window.onload，而不是 document.onload？</li>\n<li>document ready到底是什么 ready，DOM 渲染完成？</li>\n<li>jQuery 怎么实现 $(document).ready？</li>\n<li>jQuery 的 ready，还能 ready 什么？</li>\n<li>jQuery 的 document ready 就一定比 window.onload 快吗？</li>\n<li>为什么外部 script 文件放页面内容后面好，是一定的吗？</li>\n</ol>\n<h3 id=\"10-分钟了解-JS-堆、栈以及事件循环的概念\"><a href=\"#10-分钟了解-JS-堆、栈以及事件循环的概念\" class=\"headerlink\" title=\"10 分钟了解 JS 堆、栈以及事件循环的概念\"></a><a href=\"https://github.com/BooheeFE/weekly/issues/2\" target=\"_blank\" rel=\"noopener\">10 分钟了解 JS 堆、栈以及事件循环的概念</a></h3><p>作者通过 <code>JS的内存机制</code>以及<code>事件机制</code>和<code>大量的（例子）</code>来讲解栈、堆究竟是个什么玩意。概念比较多，不用死读，把所有的实例代码手敲一遍就很清楚了，作者讲的很透彻，该文章来自于<a href=\"https://github.com/BooheeFE/weekly\" target=\"_blank\" rel=\"noopener\">薄荷前端周刊</a>，该周刊发布的文章都蛮不错的，建议阅读~</p>\n<h3 id=\"7-分钟理解-JS-的节流、防抖及使用场景\"><a href=\"#7-分钟理解-JS-的节流、防抖及使用场景\" class=\"headerlink\" title=\"7 分钟理解 JS 的节流、防抖及使用场景\"></a><a href=\"https://juejin.im/post/5b8de829f265da43623c4261?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">7 分钟理解 JS 的节流、防抖及使用场景</a></h3><p>防抖和节流是两个很重要也经常会用到的知识点，这篇文章的重点并不是介绍它们的实现原理，而是着眼于它们的应用效果和应用场景，文中对于防抖和节流产生效果的总结很通俗易懂：</p>\n<blockquote>\n<p>函数防抖就是法师发技能的时候要读条，技能读条没完再按技能就会重新读条。<br>函数节流就是 fps 游戏的射速，就算一直按着鼠标射击，也只会在规定射速内射出子弹。</p>\n</blockquote>\n<h3 id=\"精读-The-Cost-of-JavaScript\"><a href=\"#精读-The-Cost-of-JavaScript\" class=\"headerlink\" title=\"精读 The Cost of JavaScript\"></a><a href=\"https://zhuanlan.zhihu.com/p/41292532\" target=\"_blank\" rel=\"noopener\">精读 The Cost of JavaScript</a></h3><p>Addy 在 <a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\" target=\"_blank\" rel=\"noopener\">The Cost of JavaScript In 2018</a>一文中分享了在保证用户友好交互体验的前提下如何高效分发 JavaScript 的开发经验，而我现在推荐的这篇文章是一篇导读文章，原文作者首先将全文的内容压缩成几条观点总结出来，之后从用户体验为 Web 带来的变化开始说起，到 JavaScript 的成本有哪些、它们为何如此高昂、如何降低开销以及持续集成，全文形成一个非常完整的优化流程：</p>\n<ol>\n<li>写在开头的话</li>\n<li>膨胀的 JavaScript 与 Web 现状</li>\n<li>JavaScript 的成本所在</li>\n<li>页面交互性解释与建议</li>\n<li>处理 JavaScript 成本为何如此昂贵</li>\n<li>千差万别的移动用户与应对策略</li>\n<li>分发更少 JavaScript 的常见技巧</li>\n<li>持续集成四部曲</li>\n</ol>\n<h3 id=\"深入理解javascript原型和闭包系列\"><a href=\"#深入理解javascript原型和闭包系列\" class=\"headerlink\" title=\"深入理解javascript原型和闭包系列\"></a><a href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包系列</a></h3><p>本系列有 16 篇文章，外加两篇后补的，一共 18 篇文章。将原型和闭包相关知识都进行了讲解，知识点很全，图文并茂。</p>\n<h3 id=\"JavaScript-模块化七日谈\"><a href=\"#JavaScript-模块化七日谈\" class=\"headerlink\" title=\"JavaScript 模块化七日谈\"></a><a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"noopener\">JavaScript 模块化七日谈</a></h3><p>作者以 slide 的形式讲解了 JS 模块化的发展历程，目录：</p>\n<ul>\n<li>第一日 上古时期 <em><strong>Module?</strong></em> 从设计模式说起</li>\n<li>第二日 石器时代 <em><strong>Script Loader</strong></em> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <em><strong>Module Loader</strong></em> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <em><strong>CommonJS</strong></em> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <em><strong>AMD/CMD</strong></em> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <em><strong>Browserify/Webpack</strong></em> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <em><strong>ES6 Module</strong></em> 最后的战役</li>\n</ul>\n<h3 id=\"写了-10-年-Javascript-未必全了解的连续赋值运算\"><a href=\"#写了-10-年-Javascript-未必全了解的连续赋值运算\" class=\"headerlink\" title=\"写了 10 年 Javascript 未必全了解的连续赋值运算\"></a><a href=\"https://yanhaijing.com/javascript/2012/04/05/javascript-continuous-assignment-operator/\" target=\"_blank\" rel=\"noopener\">写了 10 年 Javascript 未必全了解的连续赋值运算</a></h3><p><code>a.x = a = {n:2}</code> 是一个连续赋值表达式。 这个连续赋值表达式在引擎内部究竟发生了什么？是如何解释的？作者从这一问题出发，对 JS 中的变量定义规则进行了研究。</p>\n<h3 id=\"每个-JavaScript-工程师都应懂的33个概念\"><a href=\"#每个-JavaScript-工程师都应懂的33个概念\" class=\"headerlink\" title=\"每个 JavaScript 工程师都应懂的33个概念\"></a><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">每个 JavaScript 工程师都应懂的33个概念</a></h3><p>这篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。 由于原版资源都要翻墙，所以作者创立了一个中文版，附上关于 JS 中的 33 个概念在国内的一些文章和视频。所以这可以看做是一个文章 / 视频集合，闲来无事的时候可以看一下巩固一下基础概念。</p>\n<h3 id=\"前端网老姚浅谈：怎么学-JavaScript？\"><a href=\"#前端网老姚浅谈：怎么学-JavaScript？\" class=\"headerlink\" title=\"前端网老姚浅谈：怎么学 JavaScript？\"></a><a href=\"https://zhuanlan.zhihu.com/p/23265155\" target=\"_blank\" rel=\"noopener\">前端网老姚浅谈：怎么学 JavaScript？</a></h3><p>前端老姚对如何学习JS这一问题的解答，主要回答了以下几个问题：</p>\n<ul>\n<li>看书有啥好处</li>\n<li>看什么书</li>\n<li>怎么看书</li>\n<li>看书的层次</li>\n<li>利用源码进行学习</li>\n<li>时间、兴趣等问题</li>\n</ul>\n<h3 id=\"Effective-JavaScript\"><a href=\"#Effective-JavaScript\" class=\"headerlink\" title=\"Effective JavaScript\"></a><a href=\"https://github.com/dreamapplehappy/effective-javascript\" target=\"_blank\" rel=\"noopener\">Effective JavaScript</a></h3><p>关于原生 JS 的 68 个实例，理论上,实践过下面的 68 个项目之后,你的JS能力应该有一个质的飞跃</p>\n<h3 id=\"how-javascript-works\"><a href=\"#how-javascript-works\" class=\"headerlink\" title=\"how javascript works\"></a><a href=\"https://github.com/Troland/how-javascript-works\" target=\"_blank\" rel=\"noopener\">how javascript works</a></h3><p>本文是翻译介绍 JavaScript 的工作原理的，该系列原文还在更新中，原文见<a href=\"https://blog.sessionstack.com/tagged/tutorial\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"JavaScript-This-的六道坎\"><a href=\"#JavaScript-This-的六道坎\" class=\"headerlink\" title=\"JavaScript This 的六道坎\"></a><a href=\"https://blog.crimx.com/2016/05/12/understanding-this/\" target=\"_blank\" rel=\"noopener\">JavaScript This 的六道坎</a></h3><p>鉴于 this 风骚的运作方式，对 this 的理解是永不过时的话题，该文试图通过将其大卸六块来钉住这个磨人的妖精。通过六个成语对 this 进行了剖析讲解，非常清晰明了。</p>\n<h3 id=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"><a href=\"#从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\" class=\"headerlink\" title=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"></a><a href=\"http://www.dailichun.com/2018/01/21/js_singlethread_eventloop.html\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></h3><ol>\n<li>展现形式：由于是属于系统梳理型，就没有由浅入深了，而是从头到尾的梳理知识体系，重点是将关键节点的知识点串联起来，而不是仅仅剖析某一部分知识。</li>\n<li>内容是：从浏览器进程，再到浏览器内核运行，再到 JS 引擎单线程，再到 JS 事件循环机制，从头到尾系统的梳理一遍，摆脱碎片化，形成一个知识体系</li>\n<li>目标是：看完这篇文章后，对浏览器多进程，JS 单线程，JS 事件循环机制这些都能有一定理解，有一个知识体系骨架，而不是似懂非懂的感觉。</li>\n<li>另外，本文适合有一定经验的前端人员，<strong>新手请规避</strong>，避免受到过多的概念冲击。可以先存起来，有了一定理解后再看，也可以分成多批次观看，避免过度疲劳。</li>\n</ol>\n<p><strong>大纲</strong>：</p>\n<ul>\n<li>区分进程和线程</li>\n<li>浏览器是多进程的<ul>\n<li>浏览器都包含哪些进程？</li>\n<li>浏览器多进程的优势</li>\n<li>重点是浏览器内核（渲染进程）</li>\n<li>Browser进程和浏览器内核（Renderer进程）的通信过程</li>\n</ul>\n</li>\n<li>梳理浏览器内核中线程之间的关系<ul>\n<li>GUI渲染线程与JS引擎线程互斥</li>\n<li>JS阻塞页面加载</li>\n<li>WebWorker，JS的多线程？</li>\n<li>WebWorker与SharedWorker</li>\n</ul>\n</li>\n<li>简单梳理下浏览器渲染流程<ul>\n<li>load事件与DOMContentLoaded事件的先后</li>\n<li>css加载是否会阻塞dom树渲染？</li>\n<li>普通图层和复合图层</li>\n</ul>\n</li>\n<li>从Event Loop谈JS的运行机制<ul>\n<li>事件循环机制进一步补充</li>\n<li>单独说说定时器</li>\n<li>setTimeout而不是setInterval</li>\n</ul>\n</li>\n<li>事件循环进阶：macrotask与microtask</li>\n<li>写在最后的话</li>\n</ul>\n<h3 id=\"关于-Promise-的-9-个提示\"><a href=\"#关于-Promise-的-9-个提示\" class=\"headerlink\" title=\"关于 Promise 的 9 个提示\"></a><a href=\"https://mp.weixin.qq.com/s/1ILwZ6BecgBFA49c4YvTRQ\" target=\"_blank\" rel=\"noopener\">关于 Promise 的 9 个提示</a></h3><p>通过 9 个鲜活的案例，我们可以加深对 Promise 的理解</p>\n<h2 id=\"HTML相关\"><a href=\"#HTML相关\" class=\"headerlink\" title=\"HTML相关\"></a>HTML相关</h2><h3 id=\"常用的-HTML-头部标签\"><a href=\"#常用的-HTML-头部标签\" class=\"headerlink\" title=\"常用的 HTML 头部标签\"></a><a href=\"https://github.com/yisibl/blog/issues/1\" target=\"_blank\" rel=\"noopener\">常用的 HTML 头部标签</a></h3><p>曾几何时，我们已经不再手写 HTML 标签。Emmet、Markdown 等工具让我们「健步如飞」，但是我们真的了解这些标签了吗？这篇文章着重介绍了一些我们容易忽视和用错的头部标签，特别是 iOS 等针对移动设备的一些标签。这是一篇非常基础的标签索引，其中 iOS 设备部分对设计师也有参考作用。</p>\n<h3 id=\"H5-项目常见问题汇总及解决方案\"><a href=\"#H5-项目常见问题汇总及解决方案\" class=\"headerlink\" title=\"H5 项目常见问题汇总及解决方案\"></a><a href=\"https://github.com/FrontEndRoad/HTML5-FAQ\" target=\"_blank\" rel=\"noopener\">H5 项目常见问题汇总及解决方案</a></h3><p>这是一篇还算比较新的文章（2017-3-26），作者总结了一些前端开发过程中的常见问题，虽然有些问题可能不算是“常见”，但是看过一遍之后留下点印象也是可行的，到时候如果真遇到了不会解决的问题就知道去哪里找答案了~</p>\n<h3 id=\"HTML5-进阶系列：文件上传下载\"><a href=\"#HTML5-进阶系列：文件上传下载\" class=\"headerlink\" title=\"HTML5 进阶系列：文件上传下载\"></a><a href=\"https://juejin.im/post/59598ecf5188250d8d141fff\" target=\"_blank\" rel=\"noopener\">HTML5 进阶系列：文件上传下载</a></h3><p>HTML5 中提供的文件API在前端中有着丰富的应用，上传、下载、读取内容等在日常的交互中很常见。而且在各个浏览器的兼容也比较好，包括移动端。作者在该文中介绍了一些上传下载的 API，包括 FileList 对象和 file 对象、Blob 对象和 FileReader 对象等。</p>\n<h3 id=\"图片上传知识点梳理\"><a href=\"#图片上传知识点梳理\" class=\"headerlink\" title=\"图片上传知识点梳理\"></a><a href=\"https://juejin.im/post/5be023b651882516bc47762e\" target=\"_blank\" rel=\"noopener\">图片上传知识点梳理</a></h3><p>在日常项目开发中，图片上传是一个十分常见的场景。在这篇文章中，作者通过简单的代码，解析了图片上传的各个知识点，包括样式自定义、图片校验、图片上传预览、图片上传与上传进度展示和拖拽上传。</p>\n<h3 id=\"requestAnimationFrame-知多少？\"><a href=\"#requestAnimationFrame-知多少？\" class=\"headerlink\" title=\"requestAnimationFrame 知多少？\"></a><a href=\"www.cnblogs.com/onepixel/p/7078617.html\">requestAnimationFrame 知多少？</a></h3><p>html5 提供了一个专门用于请求动画的 API，即 requestAnimationFrame（rAF），顾名思义就是 “请求动画帧”。这篇文章就是带你深入理解 rAF 背后的原理。</p>\n<h2 id=\"CSS相关\"><a href=\"#CSS相关\" class=\"headerlink\" title=\"CSS相关\"></a>CSS相关</h2><h3 id=\"写-CSS-的姿势\"><a href=\"#写-CSS-的姿势\" class=\"headerlink\" title=\"写 CSS 的姿势\"></a><a href=\"https://www.w3cplus.com/css/css-evolution.html\" target=\"_blank\" rel=\"noopener\">写 CSS 的姿势</a></h3><p>作者-大漠，内容很丰富，放在第一位是有原因的。。</p>\n<h3 id=\"CSS-实现长宽比的几种方案\"><a href=\"#CSS-实现长宽比的几种方案\" class=\"headerlink\" title=\"CSS 实现长宽比的几种方案\"></a><a href=\"https://www.w3cplus.com/css/aspect-ratio.html\" target=\"_blank\" rel=\"noopener\">CSS 实现长宽比的几种方案</a></h3><p>作者是传说中的大漠孤秋，介绍了单纯用CSS实现定比例长宽图形的几种方案</p>\n<h3 id=\"实用的-CSS-—-贝塞尔曲线-cubic-bezier\"><a href=\"#实用的-CSS-—-贝塞尔曲线-cubic-bezier\" class=\"headerlink\" title=\"实用的 CSS — 贝塞尔曲线(cubic-bezier)\"></a><a href=\"http://joveyzheng.com/2016/03/16/css-cubic-bezier/\" target=\"_blank\" rel=\"noopener\">实用的 CSS — 贝塞尔曲线(cubic-bezier)</a></h3><p>贝塞尔曲线在 CSS 动画中应用较广，了解一下对于 CSS 动画效果会有更深的理解</p>\n<h3 id=\"探究-CSS-解析原理\"><a href=\"#探究-CSS-解析原理\" class=\"headerlink\" title=\"探究 CSS 解析原理\"></a><a href=\"http://jartto.wang/2017/11/13/Exploring-the-principle-of-CSS-parsing/index.html\" target=\"_blank\" rel=\"noopener\">探究 CSS 解析原理</a></h3><p>作者对浏览器的渲染过程和 CSS 的解析原理进行了详细解释，代码很多，干货满满</p>\n<h3 id=\"改变用户体验的滚动新特性\"><a href=\"#改变用户体验的滚动新特性\" class=\"headerlink\" title=\"改变用户体验的滚动新特性\"></a><a href=\"https://www.w3cplus.com/css/new-scroll-features-that-change-the-user-experience.html\" target=\"_blank\" rel=\"noopener\">改变用户体验的滚动新特性</a></h3><p>作者是大漠，他在文中介绍了时至今日，CSS 中为浏览器滚动提供的相关新特性究竟能给用户带来哪些新的体验。图片和代码较多，慎用流量</p>\n<h3 id=\"说说CSS学习中的瓶颈\"><a href=\"#说说CSS学习中的瓶颈\" class=\"headerlink\" title=\"说说CSS学习中的瓶颈\"></a><a href=\"https://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/\" target=\"_blank\" rel=\"noopener\">说说CSS学习中的瓶颈</a></h3><p>张鑫旭 2012 年的文章，虽然年代比较久远了，但是至今看来还是颇受启发，如果你有“CSS好难”、“为什么CSS那么多属性”、“怎么让它垂直居中啊”等疑问，推荐你看这篇文章。</p>\n<h3 id=\"「前端那些事儿」③-CSS-布局方案\"><a href=\"#「前端那些事儿」③-CSS-布局方案\" class=\"headerlink\" title=\"「前端那些事儿」③ CSS 布局方案\"></a><a href=\"https://juejin.im/post/5bd805e6f265da0acd2107d7\" target=\"_blank\" rel=\"noopener\">「前端那些事儿」③ CSS 布局方案</a></h3><p>作者几乎罗列了日常工作中遇到的所有类型的布局，并附上了详细的代码，其中包括：居中布局、多列布局、并排等分，单排对齐靠左布局和圣杯布局&amp;双飞翼布局等。源码传送门：<a href=\"https://github.com/willspace/css-layout/tree/master/demo-1\" target=\"_blank\" rel=\"noopener\">https://github.com/willspace/css-layout/tree/master/demo-1</a></p>\n<h3 id=\"深入了解-CSS3-新特性\"><a href=\"#深入了解-CSS3-新特性\" class=\"headerlink\" title=\"深入了解 CSS3 新特性\"></a><a href=\"https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/\" target=\"_blank\" rel=\"noopener\">深入了解 CSS3 新特性</a></h3><p>这篇文章介绍了 Web 开发中关于 CSS3 的一些内容，由浅入深的逐步引出 CSS3 的各种相关属性。基于各个 CSS3 属性的原理，通过实际的源代码介绍各个 CSS3 新特性的特点，使用方式以及使用中需要注意的地方</p>\n<h3 id=\"You-need-to-know-css\"><a href=\"#You-need-to-know-css\" class=\"headerlink\" title=\"You need to know css\"></a><a href=\"https://lhammer.cn/You-need-to-know-css/#/\" target=\"_blank\" rel=\"noopener\">You need to know css</a></h3><p>作者把自己的收获和工作中常用的一些 CSS 小样式总结成了这份文档，包含了 43 个 CSS 的小样式。</p>\n<h3 id=\"06期：前端布局基础概述\"><a href=\"#06期：前端布局基础概述\" class=\"headerlink\" title=\"06期：前端布局基础概述\"></a><a href=\"https://mp.weixin.qq.com/s/-LcNZWFFty2lWuND6uuNNA\" target=\"_blank\" rel=\"noopener\">06期：前端布局基础概述</a></h3><p>作者找到了W3C组织对初始化包含块的官方定义，为了让刚入前端圈的同学少走一些弯路，于是系统地分享一下，同时掺杂了作者本人在前端布局基础方面积累的经验。（因为是系统概述，所以篇幅会比较长，希望各位读者有心理准备）</p>\n<h3 id=\"在-css-中什么是好的注释？\"><a href=\"#在-css-中什么是好的注释？\" class=\"headerlink\" title=\"在 css 中什么是好的注释？\"></a><a href=\"https://mp.weixin.qq.com/s/963TnTMNAXstdIPYCTsrqQ\" target=\"_blank\" rel=\"noopener\">在 css 中什么是好的注释？</a></h3><blockquote>\n<p>注释就意味着代码无法自说明 —— Robert C. Martin</p>\n</blockquote>\n<p>Martin在文中详细讨论了代码注释，他的意思是，这些注释是注定会过时的。程序执行时会忽视注释，所以无法保证这些说明注释会准确的描述代码作用。所以最好的方式是让代码自说明，如此，按照代码逻辑，程序员和程序获取到的信息是一致的。读完这篇文章后，我们就知道该怎么写注释了。</p>\n<h2 id=\"框架相关\"><a href=\"#框架相关\" class=\"headerlink\" title=\"框架相关\"></a>框架相关</h2><h3 id=\"react-组件的生命周期\"><a href=\"#react-组件的生命周期\" class=\"headerlink\" title=\"react 组件的生命周期\"></a><a href=\"https://segmentfault.com/a/1190000003691119\" target=\"_blank\" rel=\"noopener\">react 组件的生命周期</a></h3><p>作者详细介绍了和 react 生命周期的一些函数执行时机以及它们的作用，通过实例的方式进行了讲解，个人感觉讲解的非常清晰</p>\n<h3 id=\"Gulp-和-Webpack-对比\"><a href=\"#Gulp-和-Webpack-对比\" class=\"headerlink\" title=\"Gulp 和 Webpack 对比\"></a><a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"noopener\">Gulp 和 Webpack 对比</a></h3><p>作者通过实际的代码对比了 gulp 和 webpack 在功能、原理以及模块化方面的优缺点</p>\n<h3 id=\"webpack-常用插件及其作用\"><a href=\"#webpack-常用插件及其作用\" class=\"headerlink\" title=\"webpack 常用插件及其作用\"></a><a href=\"http://www.monster1935.site/blog/2017/08/24/webpack%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">webpack 常用插件及其作用</a></h3><p>介绍了 webpack 经常用到的一些插件和它们的作用，美中不足的是没有具体代码以及介绍的插件有点少</p>\n<h3 id=\"webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\"><a href=\"#webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\" class=\"headerlink\" title=\"webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别\"></a><a href=\"http://www.monster1935.site/blog/2017/09/07/webpack%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-npm%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8Cwebpack%E4%B8%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%85%A5webpack%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8C%BA%E5%88%AB/\" target=\"_blank\" rel=\"noopener\">webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别</a></h3><p>虽然是一个小知识点，不过作者读源码的精神可嘉</p>\n<h3 id=\"webpack-收藏集-掘金\"><a href=\"#webpack-收藏集-掘金\" class=\"headerlink\" title=\"webpack - 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000009435832\" target=\"_blank\" rel=\"noopener\">webpack - 收藏集 - 掘金</a></h3><p>掘金上面的 webpack 相关文章，webpack 本身实在太复杂，还是需要一些文章差补缺漏的</p>\n<h3 id=\"Vue-js——60分钟快速入门\"><a href=\"#Vue-js——60分钟快速入门\" class=\"headerlink\" title=\"Vue.js——60分钟快速入门\"></a><a href=\"http://www.cnblogs.com/keepfool/p/5619070.html\" target=\"_blank\" rel=\"noopener\">Vue.js——60分钟快速入门</a></h3><p>vue 入门教程，还有另外两篇文章，文章最后有链接，个人认为是目前为止看到的最舒服的 vue 入门教程，排版配色都很不错</p>\n<h3 id=\"深入到源码：解读-redux-的设计思路与用法\"><a href=\"#深入到源码：解读-redux-的设计思路与用法\" class=\"headerlink\" title=\"深入到源码：解读 redux 的设计思路与用法\"></a><a href=\"https://github.com/Lucifier129/Lucifier129.github.io/issues/9\" target=\"_blank\" rel=\"noopener\">深入到源码：解读 redux 的设计思路与用法</a></h3><p>一直都没搞明白 redux，后来看了这篇文章，讲的很详细，而且讲解了一部分源码，推荐！（下面一段话取自该文章） 组织 <code>redux</code> 的流程莫过于：</p>\n<ul>\n<li>设计全局 state 的数据结构</li>\n<li>设计更改 state 数据的 actionTypes 常量以及其他跟视图展现相关的 actionTypes 常量</li>\n<li>根据 actionTypes 常量，书写 actionCreator 。</li>\n<li>根据各个 actionCreator 的返回值，涉及 reducer 做数据的最后处理</li>\n<li>在有了 reducer 函数之后，createStore(reducer, initState) 得到 store 对象</li>\n<li>用 bindActionCreators 函数将 actionCreators 和 store.dispatch 绑定起来，得到一组能修改全局状态的函数</li>\n<li>分发各个状态修改函数到各个 DOM 事件中。</li>\n</ul>\n<h3 id=\"Vue-生命周期深入\"><a href=\"#Vue-生命周期深入\" class=\"headerlink\" title=\"Vue 生命周期深入\"></a><a href=\"https://segmentfault.com/a/1190000014705819\" target=\"_blank\" rel=\"noopener\">Vue 生命周期深入</a></h3><p>这篇博客会从下面四个常见的应用诠释了组件的生命周期，以及各个生命周期应该干什么事，博主写的很不错，直观易懂，很适合接触 vue 不深的童鞋。</p>\n<ol>\n<li>单组件的生命周期</li>\n<li>父子组件的生命周期</li>\n<li>兄弟组件的生命周期</li>\n<li>宏 mixin 的生命周期</li>\n</ol>\n<h3 id=\"2019-年-Vue-学习路线图\"><a href=\"#2019-年-Vue-学习路线图\" class=\"headerlink\" title=\"2019 年 Vue 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/jGmJndL-oK3i5lYLiQROIg\" target=\"_blank\" rel=\"noopener\">2019 年 Vue 学习路线图</a></h3><p>作者我将在这篇文章中展示了一个高级“知识地图”，它包含了与 Vue 开发相关的关键领域，你可以使用这张地图作为 2019 年学习 Vue 的图鉴。英文原文：<a href=\"https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/\" target=\"_blank\" rel=\"noopener\">https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/</a></p>\n<h3 id=\"一口-很长的-气了解-babel\"><a href=\"#一口-很长的-气了解-babel\" class=\"headerlink\" title=\"一口(很长的)气了解 babel\"></a><a href=\"https://juejin.im/post/5c19c5e0e51d4502a232c1c6\" target=\"_blank\" rel=\"noopener\">一口(很长的)气了解 babel</a></h3><p>作者详细介绍了 babel 究竟是做什么的，以及 babel 的一些配套工具的作用，同时还介绍了如何争取地进行配置和使用 babel。</p>\n<h3 id=\"Which-of-the-635000-npm-modules-do-I-choose\"><a href=\"#Which-of-the-635000-npm-modules-do-I-choose\" class=\"headerlink\" title=\"Which of the 635000 npm modules do I choose?\"></a><a href=\"https://www.coreycleary.me/which-of-the-635000-npm-modules-do-i-choose/\" target=\"_blank\" rel=\"noopener\">Which of the 635000 npm modules do I choose?</a></h3><p>npm 现在已经有 60 多万个库，如何在如此繁杂的 module 中选择合适自己的感觉是件难事，而作者就基于此对一些比较大型使用比较多的库进行了横向比较，会对你在技术上的选择起到帮助作用。</p>\n<h3 id=\"2019-年-React-学习路线图\"><a href=\"#2019-年-React-学习路线图\" class=\"headerlink\" title=\"2019 年 React 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/PWSeeqDwu8QOcamlo_FJrA\" target=\"_blank\" rel=\"noopener\">2019 年 React 学习路线图</a></h3><p>和上面的 Vue 学习路线图类似，建议搭配食用，英文原文：<a href=\"https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02\" target=\"_blank\" rel=\"noopener\">https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02</a></p>\n<h3 id=\"细说-webpack-之流程篇\"><a href=\"#细说-webpack-之流程篇\" class=\"headerlink\" title=\"细说 webpack 之流程篇\"></a><a href=\"http://taobaofed.org/blog/2016/09/09/webpack-flow/\" target=\"_blank\" rel=\"noopener\">细说 webpack 之流程篇</a></h3><p>淘宝 FED 这篇博客，对 webpack 的整体流程梳理的非常清晰，以及 webpack 的基础架构讲解的很细致，对 compiler 和 complation 对象也做了很细致的剖析。</p>\n<h3 id=\"React-是怎样炼成的\"><a href=\"#React-是怎样炼成的\" class=\"headerlink\" title=\"React 是怎样炼成的\"></a><a href=\"https://segmentfault.com/a/1190000013365426\" target=\"_blank\" rel=\"noopener\">React 是怎样炼成的</a></h3><p>文章主要讲述 React 的诞生过程和优化思路。内容整理自 2014 年的 <a href=\"https://speakerdeck.com/vjeux/oscon-react-architecture\" target=\"_blank\" rel=\"noopener\">OSCON - React Architecture by vjeux</a>，虽然从今天来看可能会有点历史感，但仍然值得学习了解。以史为鉴，从中也可以管窥 Facebook 优秀的工程管理文化。</p>\n<h2 id=\"浏览器相关\"><a href=\"#浏览器相关\" class=\"headerlink\" title=\"浏览器相关\"></a>浏览器相关</h2><h3 id=\"js在微信、微博、QQ、Safari唤起App的解决方案\"><a href=\"#js在微信、微博、QQ、Safari唤起App的解决方案\" class=\"headerlink\" title=\"js在微信、微博、QQ、Safari唤起App的解决方案\"></a><a href=\"https://segmentfault.com/a/1190000012940046\" target=\"_blank\" rel=\"noopener\">js在微信、微博、QQ、Safari唤起App的解决方案</a></h3><p>一个全面的、最新（2018-01-22）的唤起方案，总结的很透彻，值得一读</p>\n<h3 id=\"浏览器进程？线程？傻傻分不清楚！\"><a href=\"#浏览器进程？线程？傻傻分不清楚！\" class=\"headerlink\" title=\"浏览器进程？线程？傻傻分不清楚！\"></a><a href=\"http://www.imweb.io/topic/58e3bfa845e5c13468f567d5\" target=\"_blank\" rel=\"noopener\">浏览器进程？线程？傻傻分不清楚！</a></h3><p>什么是多进程架构浏览器？为什么浏览器内核是多线程？Javascript 是单线程又是什么鬼？进程和线程是否分得清楚呢？文章干货和知识点比较多，需要查阅相关知识才能完全消化。</p>\n<h3 id=\"WebView-性能、体验分析与优化\"><a href=\"#WebView-性能、体验分析与优化\" class=\"headerlink\" title=\"WebView 性能、体验分析与优化\"></a><a href=\"https://tech.meituan.com/WebViewPerf.html\" target=\"_blank\" rel=\"noopener\">WebView 性能、体验分析与优化</a></h3><p>来自美团的技术文档，对 webview 的方方面面都进行了详细的介绍，同时指出了其存在的问题，相信看完之后对于 webview 会有更深层次的理解~</p>\n<h3 id=\"浅析-HTTP-缓存的机制-浏览器缓存\"><a href=\"#浅析-HTTP-缓存的机制-浏览器缓存\" class=\"headerlink\" title=\"浅析 HTTP 缓存的机制-浏览器缓存\"></a><a href=\"http://obkoro1.com/2018/06/09/%E6%B5%85%E6%9E%90HTTP%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%BA%E5%88%B6-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/\" target=\"_blank\" rel=\"noopener\">浅析 HTTP 缓存的机制-浏览器缓存</a></h3><p>在浏览器众多缓存中的 HTTP 缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的 magic，但是对此背后的原因可能不甚了解；作者结合状态码介绍了强缓存和弱缓存的区别和触发条件，篇幅短小精悍，值得一读。</p>\n<h3 id=\"深入理解-JSCore\"><a href=\"#深入理解-JSCore\" class=\"headerlink\" title=\"深入理解 JSCore\"></a><a href=\"https://juejin.im/post/5b7f6a27e51d4538b063f233?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">深入理解 JSCore</a></h3><p>目前业界流行的动态化方案，如 Facebook 的 React Native，阿里巴巴的 Weex 都采用了前端系的 DSL 方案，而它们在 iOS 系统上能够顺利的运行，都离不开一个背后的功臣：JavaScriptCore（以下简称 JSCore），它建立起了 Objective-C（以下简称OC）和 JavaScript（以下简称 JS）两门语言之间沟通的桥梁。作者从浏览器谈起，对 Webkit 内核的工作原理和组成进行了详细介绍，同时介绍了 JSCore 的组成部分：词法分析、语法分析和解释执行，后面还介绍了 iOS 中的 JSCore 的应用和一些机制，篇幅较长，但是干货满满，如果你对浏览器渲染引擎感兴趣，这篇文章值得一看~</p>\n<h3 id=\"H5-唤起-APP-指南-附开源唤端库\"><a href=\"#H5-唤起-APP-指南-附开源唤端库\" class=\"headerlink\" title=\"H5 唤起 APP 指南(附开源唤端库)\"></a><a href=\"https://juejin.im/post/5b7efb2ee51d45388b6af96c?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">H5 唤起 APP 指南(附开源唤端库)</a></h3><p>唤端的定义：引导已下载用户打开 APP，引导未下载用户下载 APP。对于用户留存来讲，唤起 App 是一种很重要的手段，这篇文章可以说把所有和唤端相关的知识点都介绍了，最后还给自己的工具打了一发广告。。</p>\n<h3 id=\"当···时发生了什么？\"><a href=\"#当···时发生了什么？\" class=\"headerlink\" title=\"当···时发生了什么？\"></a><a href=\"https://github.com/skyline75489/what-happens-when-zh_CN\" target=\"_blank\" rel=\"noopener\">当···时发生了什么？</a></h3><p>这个仓库试图回答一个古老的面试问题：当你在浏览器中输入 google.com 并且按下回车之后发生了什么？不过作者不再局限于平常的回答，而是想办法回答地尽可能具体，不遗漏任何细节。包括一些硬件知识也包含其中，我相信如果面试官问到你这道题，然后你的回答是这篇文章里面描述的话，面试官肯定会大吃一惊！</p>\n<h3 id=\"HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\"><a href=\"#HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\" class=\"headerlink\" title=\"HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事\"></a><a href=\"http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/\" target=\"_blank\" rel=\"noopener\">HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事</a></h3><p>作为一个经常和 web 打交道的程序员，了解这些协议是必须的，而这篇文章就向大家介绍了一下这些协议的区别和基本概念，文中不局限于前端知识，还包括一些运维，协议方面的知识。</p>\n<h3 id=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"><a href=\"#浏览器的工作原理：新式网络浏览器幕后揭秘\" class=\"headerlink\" title=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"></a><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality\" target=\"_blank\" rel=\"noopener\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></h3><p>这是一篇全面介绍 WebKit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数，并花了很多时间来研读网络浏览器的源代码。 网络浏览器很可能是使用最广的软件。在这篇入门文章中，作者将会介绍它们的幕后工作原理。我们会了解到，从在地址栏输入 <code>google.com</code> 直到在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。文章讲解的很详细，篇幅较长，需要比较大的耐心才能看下去。</p>\n<h3 id=\"HTTP-请求头中的-X-Forwarded-For\"><a href=\"#HTTP-请求头中的-X-Forwarded-For\" class=\"headerlink\" title=\"HTTP 请求头中的 X-Forwarded-For\"></a><a href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" target=\"_blank\" rel=\"noopener\">HTTP 请求头中的 X-Forwarded-For</a></h3><p>这篇文章对 HTTP 请求头中的 X-Forwarded-For（XFF）进行了详细的讲解，当我们需要取到用户的真实 IP 时，对这个请求头的理解和使用就显得尤为重要了，而从这个应用场景出发，作者还对请求头中的 x-real-ip 字段以及 Remote Address 进行了介绍。作者还有关于 HTTP 的其他文章，可以<a href=\"https://imququ.com/post/series.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看更多。</p>\n<h3 id=\"图解浏览器的基本工作原理\"><a href=\"#图解浏览器的基本工作原理\" class=\"headerlink\" title=\"图解浏览器的基本工作原理\"></a><a href=\"https://zhuanlan.zhihu.com/p/47407398\" target=\"_blank\" rel=\"noopener\">图解浏览器的基本工作原理</a></h3><p>可能每一个前端工程师都想要理解浏览器的工作原理。我们希望知道从在浏览器地址栏中输入 url 到页面展现的短短几秒内浏览器究竟做了什么；我们希望了解平时常常听说的各种代码优化方案是究竟为什么能起到优化的作用；我们希望更细化的了解浏览器的渲染流程。那么这篇文章就解答了上面的所有问题，文章较长，图文并茂。</p>\n<h3 id=\"Content-Security-Policy-An-Introduction\"><a href=\"#Content-Security-Policy-An-Introduction\" class=\"headerlink\" title=\"Content Security Policy - An Introduction\"></a><a href=\"https://scotthelme.co.uk/content-security-policy-an-introduction/\" target=\"_blank\" rel=\"noopener\">Content Security Policy - An Introduction</a></h3><p>一篇介绍 CSP 的文章，介绍了我们为什么需要 CSP，以及涉及到 CSP 的一些协议头等等相关信息。</p>\n<h3 id=\"认识-HTTP—-Cookie-和-Session-篇\"><a href=\"#认识-HTTP—-Cookie-和-Session-篇\" class=\"headerlink\" title=\"认识 HTTP—-Cookie 和 Session 篇\"></a><a href=\"https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892\" target=\"_blank\" rel=\"noopener\">认识 HTTP—-Cookie 和 Session 篇</a></h3><p>虽然内容大多来自《图解HTTP》一书，但是条理清楚分明，文笔很好，作者解释的很清晰。</p>\n<h3 id=\"图解基于-HTTPS-的-DNS\"><a href=\"#图解基于-HTTPS-的-DNS\" class=\"headerlink\" title=\"图解基于 HTTPS 的 DNS\"></a><a href=\"https://www.infoq.cn/article/a-cartoon-intro-to-dns-over-https\" target=\"_blank\" rel=\"noopener\">图解基于 HTTPS 的 DNS</a></h3><p>这是关于 dns 查询的过程讲解，配上插图和文字，可以对 dns 的查询过程有一个大概了解。</p>\n<h3 id=\"理解-WebKit-和-Chromium\"><a href=\"#理解-WebKit-和-Chromium\" class=\"headerlink\" title=\"理解 WebKit 和 Chromium\"></a><a href=\"https://blog.csdn.net/milado_nju/article/details/7216067\" target=\"_blank\" rel=\"noopener\">理解 WebKit 和 Chromium</a></h3><p>系统的描述了 Chrome 浏览器的信息，可以更加全面的了解 Chrome 浏览器，最给力的是有很多工具的使用介绍。</p>\n<h3 id=\"你真的了解回流和重绘吗\"><a href=\"#你真的了解回流和重绘吗\" class=\"headerlink\" title=\"你真的了解回流和重绘吗?\"></a><a href=\"https://github.com/chenjigeng/blog/blob/master/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E5%90%97.md\" target=\"_blank\" rel=\"noopener\">你真的了解回流和重绘吗?</a></h3><p>这篇文章主要讲了浏览器的渲染过程、浏览器的优化机制以及如何减少甚至避免回流和重绘，可以帮助读者更好的理解回流重绘。</p>\n<h3 id=\"这样使用GPU动画\"><a href=\"#这样使用GPU动画\" class=\"headerlink\" title=\"这样使用GPU动画\"></a><a href=\"https://www.w3cplus.com/animation/gpu-animation-doing-it-right.html\" target=\"_blank\" rel=\"noopener\">这样使用GPU动画</a></h3><p><a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">《GPU Animation: Doing It Right》</a>的译文，这篇文章能帮助你更好地了解浏览器如何使用GPU来渲染，这样你就可以创作能在所有设备上快速运行的令人印象深刻的网站。著作权归作者所有。</p>\n<h3 id=\"How-Blink-Works-中文译文\"><a href=\"#How-Blink-Works-中文译文\" class=\"headerlink\" title=\"How Blink Works 中文译文\"></a><a href=\"https://zhuanlan.zhihu.com/p/52918538\" target=\"_blank\" rel=\"noopener\">How Blink Works 中文译文</a></h3><p>Chromium 的工程师们写了两篇技术文章 <a href=\"https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit?pli=1#\" target=\"_blank\" rel=\"noopener\">How Blink Works</a> 和 <a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/how_cc_works.md\" target=\"_blank\" rel=\"noopener\">How cc Works</a>，分别介绍了 Chrome 浏览器内核内部的两个重要模块 Blink 和 cc 内部设计和实现的一些细节。对于想要了解 Chrome 内核内部实现的同学，这两篇文章提供了不错的入门指引。</p>\n<h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><h3 id=\"编码简介：utf8-utf16-以及其它\"><a href=\"#编码简介：utf8-utf16-以及其它\" class=\"headerlink\" title=\"编码简介：utf8, utf16 以及其它\"></a><a href=\"https://github.com/creeperyang/blog/issues/4\" target=\"_blank\" rel=\"noopener\">编码简介：utf8, utf16 以及其它</a></h3><p>作者对 utf8 和 utf16 以及其它相关知识进行了介绍，前端同学可能很少会关注到字符编码规则，但是有时候我们经常会遇到乱码等问题和 Bug，而在阅读完这篇文章之后，相信你对字符编码这类知识会有一个很深的理解。</p>\n<h3 id=\"可以说的秘密-那些我们该讨论的前端加密方法\"><a href=\"#可以说的秘密-那些我们该讨论的前端加密方法\" class=\"headerlink\" title=\"可以说的秘密-那些我们该讨论的前端加密方法\"></a><a href=\"https://juejin.im/entry/5bc93545e51d450e5f3dceff\" target=\"_blank\" rel=\"noopener\">可以说的秘密-那些我们该讨论的前端加密方法</a></h3><p>这篇文章介绍了前端开发中常用的加密方法并给出了其适用场景。包括 Base64 编码、哈希算法、加盐、慢哈希函数、密钥哈希、XOR 和加密（Encrypt）等加密方法，</p>\n<h3 id=\"一个由正则表达式引发的血案（解决版）\"><a href=\"#一个由正则表达式引发的血案（解决版）\" class=\"headerlink\" title=\"一个由正则表达式引发的血案（解决版）\"></a><a href=\"https://zhuanlan.zhihu.com/p/46294360\" target=\"_blank\" rel=\"noopener\">一个由正则表达式引发的血案（解决版）</a></h3><p>正则表达式一直以来是广大码农处理字符串的福音，但与此同时，也容易引发血案。这篇文章从一则实例出发，对正则表达式可能引发的 CPU 爆表问题进行了分析，同时作者还介绍了一种遗传算法，该算法解决了如下问题：</p>\n<blockquote>\n<p>给定一个正则引擎和一个正则表达式，为这个正则表达式找到一个攻击字符串，它可以最大化正则引擎的匹配时间。</p>\n</blockquote>\n<p>感兴趣的童鞋可以认真研究一下这篇文章，或者作者发表的论文。</p>\n<h3 id=\"计算的本质：赋值和流的杂谈\"><a href=\"#计算的本质：赋值和流的杂谈\" class=\"headerlink\" title=\"计算的本质：赋值和流的杂谈\"></a><a href=\"https://mp.weixin.qq.com/s/UYOy9dCCci5P_Cc7OVp5sg\" target=\"_blank\" rel=\"noopener\">计算的本质：赋值和流的杂谈</a></h3><p>写了这么久的程序，不少人肯定会有疑问，<strong>计算的本质</strong>是什么？对一台图灵机来说，那就是无限长的纸带和能够自如移动的读写头，但这太抽象了。作者换了一种方式去理解计算并总结出了这篇文章，稍微有一些晦涩难懂，不过看完大有裨益。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"漫画：什么是动态规划？\"><a href=\"#漫画：什么是动态规划？\" class=\"headerlink\" title=\"漫画：什么是动态规划？\"></a><a href=\"https://mp.weixin.qq.com/s/uHlSIPDrzwlyyGTwnkslbQ\" target=\"_blank\" rel=\"noopener\">漫画：什么是动态规划？</a></h3><p>以漫画的形式生动形象的解释了动态规划是什么，以及其解法。虽然篇幅较长，但是漫画看起来一点都不枯燥。</p>\n<h3 id=\"漫画：如何求根号2（爱奇艺面试题）\"><a href=\"#漫画：如何求根号2（爱奇艺面试题）\" class=\"headerlink\" title=\"漫画：如何求根号2（爱奇艺面试题）\"></a><a href=\"https://mp.weixin.qq.com/s/is7ffzf1pofMchpT3azsOg\" target=\"_blank\" rel=\"noopener\">漫画：如何求根号2（爱奇艺面试题）</a></h3><p>用漫画的形式讲解了二分法和牛顿迭代法，最后还给出了源码</p>\n<h3 id=\"2018汇总数据结构算法篇\"><a href=\"#2018汇总数据结构算法篇\" class=\"headerlink\" title=\"2018汇总数据结构算法篇\"></a><a href=\"https://mp.weixin.qq.com/s/7WweVX6j_ZMyaSnYr8q5Ug\" target=\"_blank\" rel=\"noopener\">2018汇总数据结构算法篇</a></h3><p>用图文的方式对一些数据结构进行了通俗易懂的解释，内容非常基础和全面。</p>\n<h2 id=\"服务层相关\"><a href=\"#服务层相关\" class=\"headerlink\" title=\"服务层相关\"></a>服务层相关</h2><h3 id=\"Node-定时器详解\"><a href=\"#Node-定时器详解\" class=\"headerlink\" title=\"Node 定时器详解\"></a><a href=\"http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html\" target=\"_blank\" rel=\"noopener\">Node 定时器详解</a></h3><p>作者：阮一峰，Node 的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库 <code>libuv</code> 做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。<br>至今为止，解释定时器最透彻的中文文章了</p>\n<h3 id=\"node-基础面试事件环？微任务、宏任务？一篇带你飞\"><a href=\"#node-基础面试事件环？微任务、宏任务？一篇带你飞\" class=\"headerlink\" title=\"node 基础面试事件环？微任务、宏任务？一篇带你飞\"></a><a href=\"https://juejin.im/post/5b35cdfa51882574c020d685\" target=\"_blank\" rel=\"noopener\">node 基础面试事件环？微任务、宏任务？一篇带你飞</a></h3><p>这是一篇很干货的文章，作者介绍了 node 的应用场景以及特性，同时还顺带着介绍了同步/异步、阻塞/非阻塞、微任务/宏任务这些 node 面试中经常遇到的知识点，虽然篇幅不是很长，但是涵盖的范围比较广，对于刚入门前端的童鞋来说有比较大的难度，不过对于那些已使用 node 一段时间的童鞋来说是一篇不错的总结类文章。</p>\n<h3 id=\"Error-Handling-in-Node-js\"><a href=\"#Error-Handling-in-Node-js\" class=\"headerlink\" title=\"Error Handling in Node.js\"></a><a href=\"https://www.joyent.com/node-js/production/design/errors\" target=\"_blank\" rel=\"noopener\">Error Handling in Node.js</a></h3><p>关于 NodeJS 中异常的种类，以及应该如何处理异常方面的设计文章，比较长，而且是英文的，但比较受益。（有没有大佬翻译一把？）</p>\n<h3 id=\"开发者需要了解的-nodejs-中-require-的机制\"><a href=\"#开发者需要了解的-nodejs-中-require-的机制\" class=\"headerlink\" title=\"开发者需要了解的 nodejs 中 require 的机制\"></a><a href=\"https://juejin.im/post/5bdea6b1518825170f50c485\" target=\"_blank\" rel=\"noopener\">开发者需要了解的 nodejs 中 require 的机制</a></h3><p>对 nodejs 中的模块加载进行了详细的讲解，同时对 exports 和 module.exports 的区别和正确使用方式也进行了讲解，是一篇非常不错的 nodejs 模块方面的文章，该文为译文，原文地址：<a href=\"https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8</a></p>\n<h3 id=\"CDN-技术详解\"><a href=\"#CDN-技术详解\" class=\"headerlink\" title=\"CDN 技术详解\"></a><a href=\"https://www.cnblogs.com/losbyday/p/5843960.html\" target=\"_blank\" rel=\"noopener\">CDN 技术详解</a></h3><p>《CDN技术详解》绝对是带你进入 CDN 行业的那盏最亮的明灯。因此，虽然只是纯粹的重点抄录，作者还是把《CDN技术详解》中的精华总结成了这篇文章。</p>\n<h3 id=\"漫画-从搬家到容器技术-Docker-应用场景解析\"><a href=\"#漫画-从搬家到容器技术-Docker-应用场景解析\" class=\"headerlink\" title=\"漫画 | 从搬家到容器技术 Docker 应用场景解析\"></a><a href=\"https://mp.weixin.qq.com/s/wHEVltlOOAffWILB1hqFjg\" target=\"_blank\" rel=\"noopener\">漫画 | 从搬家到容器技术 Docker 应用场景解析</a></h3><p>通过漫画的方式对 Docker 的原理和应用场景进行了比较详细的介绍和讲解</p>\n<h3 id=\"不仅仅是前端er——折腾服务器武装自己\"><a href=\"#不仅仅是前端er——折腾服务器武装自己\" class=\"headerlink\" title=\"不仅仅是前端er——折腾服务器武装自己\"></a><a href=\"https://segmentfault.com/a/1190000013242438\" target=\"_blank\" rel=\"noopener\">不仅仅是前端er——折腾服务器武装自己</a></h3><p>作者从购买服务器和购买域名讲起，将搭建网站的详细过程进行了介绍，同时还包括 nginx 配置文件的修改以及持续部署的配置。</p>\n<h2 id=\"Mac相关\"><a href=\"#Mac相关\" class=\"headerlink\" title=\"Mac相关\"></a>Mac相关</h2><h3 id=\"EffectiveMac\"><a href=\"#EffectiveMac\" class=\"headerlink\" title=\"EffectiveMac\"></a><a href=\"https://mac.bestswifter.com/\" target=\"_blank\" rel=\"noopener\">EffectiveMac</a></h3><p>作者是在今日头条任职的 iOS 高级工程师，在这篇文章里介绍了 Mac 的一些使用技巧以及配置指南，包括 Vim、Git、Zsh 等工具的使用方式，是截止到目前为止我看过的最全面、最实用的 Mac 教程，经常用 Mac 的童鞋一定要抽空看一看！</p>\n<h2 id=\"前沿\"><a href=\"#前沿\" class=\"headerlink\" title=\"前沿\"></a>前沿</h2><h3 id=\"GraphQL-and-Relay-浅析\"><a href=\"#GraphQL-and-Relay-浅析\" class=\"headerlink\" title=\"GraphQL and Relay 浅析\"></a><a href=\"https://zhuanlan.zhihu.com/p/20638731\" target=\"_blank\" rel=\"noopener\">GraphQL and Relay 浅析</a></h3><p>相信大部分人都没听说过 GraphQL 和 Relay 吧，这篇文章就对这两样东西进行了介绍，同时文章结尾还有一些扩展阅读链接</p>\n<h3 id=\"译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\"><a href=\"#译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\" class=\"headerlink\" title=\"译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫\"></a><a href=\"http://csbun.github.io/blog/2017/09/puppeteer/\" target=\"_blank\" rel=\"noopener\">译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫</a></h3><p><a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\"><code>Puppeteer</code></a> 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具。正因为这个官方声明，许多业内自动化测试库都已经停止维护，包括 <strong><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></strong>。<strong><a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/\" target=\"_blank\" rel=\"noopener\">Selenium IDE for Firefox</a></strong> 项目也因为缺乏维护者而终止。</p>\n<h3 id=\"初探-Headless-Chrome\"><a href=\"#初探-Headless-Chrome\" class=\"headerlink\" title=\"初探 Headless Chrome\"></a><a href=\"https://zhuanlan.zhihu.com/p/27100187\" target=\"_blank\" rel=\"noopener\">初探 Headless Chrome</a></h3><p>Headless Chrome 是 Chrome 浏览器的无界面形态，可以在不打开浏览器的前提下，使用所有 Chrome 支持的特性运行你的程序。相比于现代浏览器，Headless Chrome 更加方便测试 web 应用，获得网站的截图，做爬虫抓取信息等。相比于出道较早的 PhantomJS，SlimerJS 等，Headless Chrome 则更加贴近浏览器环境。</p>\n<h3 id=\"译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\"><a href=\"#译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\" class=\"headerlink\" title=\"[译] React Native vs. Cordova、PhoneGap、Ionic，等等\"></a>[译] React Native vs. Cordova、PhoneGap、Ionic，等等</h3><p>原文链接：<a href=\"https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc\" target=\"_blank\" rel=\"noopener\">https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc</a>，主要解释了以下几个问题：</p>\n<ul>\n<li>什么是原生应用？</li>\n<li>什么是 WebView UI ？</li>\n<li>更原生化的框架的优势和劣势分别是什么？原生化更少的框架呢？</li>\n<li>React Native 与 Cordova 相比如何？</li>\n</ul>\n<h2 id=\"求职\"><a href=\"#求职\" class=\"headerlink\" title=\"求职\"></a>求职</h2><h3 id=\"如何写面向互联网公司的求职简历\"><a href=\"#如何写面向互联网公司的求职简历\" class=\"headerlink\" title=\"如何写面向互联网公司的求职简历\"></a><a href=\"http://blog.devtang.com/2013/12/22/how-to-write-resume-for-it-company/\" title=\"如何写面向互联网公司的求职简历\" target=\"_blank\" rel=\"noopener\">如何写面向互联网公司的求职简历</a></h3><p>作者在 IT 公司工作了六年，有着三年面试官的经历。文章主要内容为：</p>\n<ul>\n<li>简历的页数不要超过两页（最好一页）<ul>\n<li>删掉不必要的信息</li>\n<li>如果你实在太牛逼，最多写 2 页</li>\n</ul>\n</li>\n<li>重要的信息写在最前面<ul>\n<li>你的联系方式</li>\n<li>你最重要的工作经历</li>\n</ul>\n</li>\n<li>不要简单罗列工作经历<ul>\n<li>列出你的工作中有价值的细节（有哪些技术上的困难等）</li>\n</ul>\n</li>\n<li>不要写任何虚假或夸大的信息<ul>\n<li>类似精通 java，精通 C/C++ 等</li>\n</ul>\n</li>\n<li>不要附加任何可能带来负面印象的信息<ul>\n<li>不要加照片</li>\n<li>不要写政治面貌</li>\n<li>不要写奇怪的爱好（打游戏，喝酒，抽烟）</li>\n<li>不要写参加过某某培训公司的 iOS 培训</li>\n<li>尽量用专业邮箱</li>\n<li>用 PDF 格式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"让-BAT-的-Offer-不再难拿\"><a href=\"#让-BAT-的-Offer-不再难拿\" class=\"headerlink\" title=\"让 BAT 的 Offer 不再难拿\"></a><a href=\"https://github.com/bestswifter/blog/commit/40885de8e065b774973ac52ef3f72de84cb19f69\" title=\"[Add] 让 BAT 的 Offer 不再难拿\" target=\"_blank\" rel=\"noopener\">让 BAT 的 Offer 不再难拿</a></h3><p>作者是软件工程专业，对 Web 前端感兴趣，目前从事 iOS 开发，对开发效率的提升以及工具的使用有很深入研究和思考，相信他总结的这篇面经一定不会让你失望。</p>\n<h3 id=\"一篇文章搞定前端面试\"><a href=\"#一篇文章搞定前端面试\" class=\"headerlink\" title=\"一篇文章搞定前端面试\"></a><a href=\"https://juejin.im/post/5bbaa549e51d450e827b6b13\" target=\"_blank\" rel=\"noopener\">一篇文章搞定前端面试</a></h3><p>这篇文章旨在用最通俗的语言讲述最枯燥的基本知识，文章提纲：</p>\n<ol>\n<li>TCP</li>\n<li>UDP</li>\n<li>套接字 socket</li>\n<li>HTTP 协议</li>\n<li>DNS 解析</li>\n<li>HTTP 请求发起和响应</li>\n<li>页面渲染的过程</li>\n<li>页面的性能优化</li>\n</ol>\n<h3 id=\"OpenDoc-前端简历评级标准\"><a href=\"#OpenDoc-前端简历评级标准\" class=\"headerlink\" title=\"OpenDoc - 前端简历评级标准\"></a><a href=\"https://zhuanlan.zhihu.com/p/27996237\" target=\"_blank\" rel=\"noopener\">OpenDoc - 前端简历评级标准</a></h3><p>美团团队从工作意向、工作经历、教育经历、技术栈、基础知识五个维度评价简历，仅供参考。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><h3 id=\"严选Redesign\"><a href=\"#严选Redesign\" class=\"headerlink\" title=\"严选Redesign\"></a><a href=\"https://www.zcool.com.cn/work/ZMjAxNjc4ODQ=.html\" target=\"_blank\" rel=\"noopener\">严选Redesign</a></h3><p>这篇文章来自站酷，介绍了网易严选的设计风格和思路，包括一些颜色规范、版面设计和图标选择\b等等。</p>\n<h3 id=\"移动端设计样式库-导航设计（二）\"><a href=\"#移动端设计样式库-导航设计（二）\" class=\"headerlink\" title=\"移动端设计样式库-导航设计（二）\"></a><a href=\"https://mp.weixin.qq.com/s/MVvh9dh0BGK1w2mnqnmURg\" target=\"_blank\" rel=\"noopener\">移动端设计样式库-导航设计（二）</a></h3><p>作者对移动端界面设计中另一个常见的导航模式-瞬时导航进行了介绍，对导航的实现方式以及优缺点进行了十分详细的介绍。</p>\n<h3 id=\"斗鱼5-0全新升级\"><a href=\"#斗鱼5-0全新升级\" class=\"headerlink\" title=\"斗鱼5.0全新升级\"></a><a href=\"https://www.zcool.com.cn/work/ZMzIxNDAxNjg=.html\" target=\"_blank\" rel=\"noopener\">斗鱼5.0全新升级</a></h3><p>来自站酷，文章篇幅较长，详细介绍了斗鱼 APP 和网页的设计思路。</p>\n<h3 id=\"有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）\"><a href=\"#有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）\" class=\"headerlink\" title=\"有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）\"></a><a href=\"https://mp.weixin.qq.com/s/-YTanYeFMuoPYrMG7F5RfA\" target=\"_blank\" rel=\"noopener\">有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）</a></h3><p>目录：</p>\n<ul>\n<li>为什么字体需要收费？</li>\n<li>有哪些免费商用字体？</li>\n<li>使用字体时需要注意什么？</li>\n</ul>\n<h3 id=\"PPT中的图片不会排版-给你这份超全设计模板\"><a href=\"#PPT中的图片不会排版-给你这份超全设计模板\" class=\"headerlink\" title=\"PPT中的图片不会排版?给你这份超全设计模板\"></a><a href=\"https://mp.weixin.qq.com/s/Mu9guK8ppCjIyJOikWilJA\" target=\"_blank\" rel=\"noopener\">PPT中的图片不会排版?给你这份超全设计模板</a></h3><p>关于PPT排版，每天都有很多人问，图片应该怎么排版？而这篇文章，就是为你展示这些图片排版的范例。文章非常详细的介绍了 PPT 中有不同数量的图片时的排版技巧，干货满满。</p>\n<h2 id=\"文章集合\"><a href=\"#文章集合\" class=\"headerlink\" title=\"文章集合\"></a>文章集合</h2><h3 id=\"奇文共欣赏，疑义相与析\"><a href=\"#奇文共欣赏，疑义相与析\" class=\"headerlink\" title=\"奇文共欣赏，疑义相与析\"></a><a href=\"https://github.com/jawil/blog/issues/6\" target=\"_blank\" rel=\"noopener\">奇文共欣赏，疑义相与析</a></h3><p>总结了很多不错的前端文章，领域包括ES6、前端基础、React、Webpack、TypeScript 等等，大概 100 篇左右，信息量很大。</p>\n<h3 id=\"年终回顾，为你汇总一份「前端技术清单」\"><a href=\"#年终回顾，为你汇总一份「前端技术清单」\" class=\"headerlink\" title=\"年终回顾，为你汇总一份「前端技术清单」\"></a><a href=\"https://juejin.im/post/5bdfb387e51d452c8e0aa902\" target=\"_blank\" rel=\"noopener\">年终回顾，为你汇总一份「前端技术清单」</a></h3><p>作者对前端基础相关好文以及前沿技术类文章进行了汇总，框架类的文章较少，期待作者继续补充完善。</p>\n<h3 id=\"微信网络技术的一些整理与思考\"><a href=\"#微信网络技术的一些整理与思考\" class=\"headerlink\" title=\"微信网络技术的一些整理与思考\"></a><a href=\"https://mp.weixin.qq.com/s/SHQay5wlz2fQ1xwQoh5eBA\" target=\"_blank\" rel=\"noopener\">微信网络技术的一些整理与思考</a></h3><p>在弱网情况下所有 app 中微信是几乎唯一一个能够正常工作的，大家都比较好奇为什么微信能够达到这样的效果。\b而作者收集了一些微信公开的网络优化相关的材料，特地分享于此。</p>\n<h3 id=\"五星推荐的系列文章清单\"><a href=\"#五星推荐的系列文章清单\" class=\"headerlink\" title=\"五星推荐的系列文章清单\"></a><a href=\"https://juejin.im/post/5c1f01fef265da61587723f4\" target=\"_blank\" rel=\"noopener\">五星推荐的系列文章清单</a></h3><p>大部分文章需要翻墙，文章有一些难度，需要一定的基础知识。</p>\n<h3 id=\"年度榜单！我整理了2018年所有文章和素材资源。\"><a href=\"#年度榜单！我整理了2018年所有文章和素材资源。\" class=\"headerlink\" title=\"年度榜单！我整理了2018年所有文章和素材资源。\"></a><a href=\"https://mp.weixin.qq.com/s/nKgeQ5guQJvmoeD5fTPdUA\" target=\"_blank\" rel=\"noopener\">年度榜单！我整理了2018年所有文章和素材资源。</a></h3><p>公众号【三顿】整理出的2018年这一年中全网值得一看的 PPT 文章。如果你对 PPT 感兴趣或者想寻找一些素材和创意，不妨在年末照着这份榜单，给自己充充电吧~</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"单点登录原理与简单实现\"><a href=\"#单点登录原理与简单实现\" class=\"headerlink\" title=\"单点登录原理与简单实现\"></a><a href=\"https://www.jianshu.com/p/a2c4b877be7d\" target=\"_blank\" rel=\"noopener\">单点登录原理与简单实现</a></h3><p>很多产品中都会有 SSO（单点登录）的实现，而本篇文章就十分详尽的介绍了 SSO 的原理，同时介绍了实现方式。</p>\n<h3 id=\"区块链，将如何重新定义世界？\"><a href=\"#区块链，将如何重新定义世界？\" class=\"headerlink\" title=\"区块链，将如何重新定义世界？\"></a><a href=\"https://mp.weixin.qq.com/s/ikPBVTsOhOWyyJKJBf021w\" target=\"_blank\" rel=\"noopener\">区块链，将如何重新定义世界？</a></h3><p>最近，区块链真的很火，同时区块链结束被认为是继蒸汽机、电力、互联网之后，下一代颠覆性的核心技术。在这篇文章里，作者用最容易理解的方式解答了以下 4 个问题：</p>\n<ol>\n<li>区块链的本质到底是什么？</li>\n<li>区块链技术带来的三大巨变。</li>\n<li>区块链面临的两大技术挑战。</li>\n<li>区块链技术未来的发展脉络。</li>\n</ol>\n<p>不过，文章篇幅较长，做好心理准备……</p>\n<h3 id=\"也许，这样理解-HTTPS-更容易\"><a href=\"#也许，这样理解-HTTPS-更容易\" class=\"headerlink\" title=\"也许，这样理解 HTTPS 更容易\"></a><a href=\"http://showme.codes/2017-02-20/understand-https/\" target=\"_blank\" rel=\"noopener\">也许，这样理解 HTTPS 更容易</a></h3><p>作者从一个经常遇到的例子开始介绍为什么我们需要 HTTPS，同时推荐一本书《HTTP权威指南》</p>\n<h3 id=\"做为技术人员为什么要写博客\"><a href=\"#做为技术人员为什么要写博客\" class=\"headerlink\" title=\"做为技术人员为什么要写博客\"></a><a href=\"http://www.cnblogs.com/zery/p/3343893.html\" target=\"_blank\" rel=\"noopener\">做为技术人员为什么要写博客</a></h3><p>技术人员写博客这件事本身就很据争议，有人认为真正的大牛是不需要写博客来博人眼球的，也有人认为水平不够还写博客就是个笑话。而这篇文章就为你解释了上面这两个问题，最后和这篇文章一样，附上一句名言：<strong>有些事情你现在不去做，可能以后都不会有机会了！</strong></p>\n<h3 id=\"从苹果公开-macOS-和-iOS-内核源码说起，分享一些开源知识\"><a href=\"#从苹果公开-macOS-和-iOS-内核源码说起，分享一些开源知识\" class=\"headerlink\" title=\"从苹果公开 macOS 和 iOS 内核源码说起，分享一些开源知识\"></a><a href=\"https://mp.weixin.qq.com/s/4ma3tHBBSC_pINOtcpQtYA\" target=\"_blank\" rel=\"noopener\">从苹果公开 macOS 和 iOS 内核源码说起，分享一些开源知识</a></h3><p>聊了聊开源精神、介绍了些开源社区，分享了点开源项目，仅此而已（还嫌不够？）</p>\n<h3 id=\"高质量文章精选-收藏集-掘金\"><a href=\"#高质量文章精选-收藏集-掘金\" class=\"headerlink\" title=\"高质量文章精选 - 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000010448008\" target=\"_blank\" rel=\"noopener\">高质量文章精选 - 收藏集 - 掘金</a></h3><p>掘金发到 segmentfault 上的高质量文章集合，涵盖了编程领域的各个方面</p>\n<h3 id=\"程序员字典：「牛逼」\"><a href=\"#程序员字典：「牛逼」\" class=\"headerlink\" title=\"程序员字典：「牛逼」\"></a><a href=\"https://zhuanlan.zhihu.com/p/25050829\" target=\"_blank\" rel=\"noopener\">程序员字典：「牛逼」</a></h3><p>作者通过他在招人时的“奇葩”条件展开阐述了到底如何定义一个“牛逼”的程序员，从作者的字里行间可以看出，作者是一名资深程序员，同时更是一名资深面试官和 team leader，所以这篇文章对于入门级程序员和骨灰级程序猿来说都是极好的</p>\n<h3 id=\"给网站加-HTTPS-完全指南\"><a href=\"#给网站加-HTTPS-完全指南\" class=\"headerlink\" title=\"给网站加 HTTPS 完全指南\"></a><a href=\"https://ksmx.me/letsencrypt-ssl-https/\" target=\"_blank\" rel=\"noopener\">给网站加 HTTPS 完全指南</a></h3><p>作者介绍了如何给自己的个人网站加 https，虽然具体是否可行我还没有尝试，但是如果你有这个需求，这篇文章也许会帮到你。</p>\n<h3 id=\"反击爬虫，前端工程师的脑洞可以有多大？\"><a href=\"#反击爬虫，前端工程师的脑洞可以有多大？\" class=\"headerlink\" title=\"反击爬虫，前端工程师的脑洞可以有多大？\"></a><a href=\"http://litten.me/2017/07/09/prevent-spiders/\" target=\"_blank\" rel=\"noopener\">反击爬虫，前端工程师的脑洞可以有多大？</a></h3><p>对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。 而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是<strong>爬虫与反爬虫</strong>这一话题的由来。 作为前端工程师，我们可以增加一下游戏难度，设计出一些<strong>很(sang)有(xin)意(bing)思(kuang)</strong>的反爬虫策略。</p>\n<h3 id=\"原创译文-2016年学习Javascript是一种什么样的体验？\"><a href=\"#原创译文-2016年学习Javascript是一种什么样的体验？\" class=\"headerlink\" title=\"[原创译文] 2016年学习Javascript是一种什么样的体验？\"></a><a href=\"https://mp.weixin.qq.com/s/sYFhD55nHsxtjN_f_wfPLA\" target=\"_blank\" rel=\"noopener\">[原创译文] 2016年学习Javascript是一种什么样的体验？</a></h3><p>与其说这是一篇好文章，还不如说这是一篇好吐槽，和上面那篇类似，作者想表达的都是“前端疲劳”这件事，只不过通过对话的形式让画风变得轻松愉快。</p>\n<h3 id=\"17-张程序员壁纸推荐\"><a href=\"#17-张程序员壁纸推荐\" class=\"headerlink\" title=\"17 张程序员壁纸推荐\"></a><a href=\"http://www.runoob.com/w3cnote/17-wallpaper-for-programmer.html\" target=\"_blank\" rel=\"noopener\">17 张程序员壁纸推荐</a></h3><p>不算是一篇好文章，但是这 17 张壁纸着实不错~</p>\n<h3 id=\"前后端分离实践（一）\"><a href=\"#前后端分离实践（一）\" class=\"headerlink\" title=\"前后端分离实践（一）\"></a><a href=\"https://segmentfault.com/a/1190000009329474\" target=\"_blank\" rel=\"noopener\">前后端分离实践（一）</a></h3><p>很多人都不理解甚至误解了“前后端分离”这一概念，相信这篇文章可以让你搞明白到底什么是前后端分离以及我们在什么业务场景下需要前后端分离和如何做才算前后端分离。</p>\n<h3 id=\"程序员怎么升职？\"><a href=\"#程序员怎么升职？\" class=\"headerlink\" title=\"程序员怎么升职？\"></a><a href=\"https://www.zhihu.com/question/20259295\" target=\"_blank\" rel=\"noopener\">程序员怎么升职？</a></h3><p>知乎上关于“程序员怎么升职”这个问题的回答，我认认真真的阅读了获得最高赞的那个回答，感觉说的很对，其中有很多道理是我一直保持认同的，希望每一位从事这个行业的人都可以花时间看一下并思考。</p>\n<h3 id=\"当你练习表达的时候，开场白是怎样去设计呢\"><a href=\"#当你练习表达的时候，开场白是怎样去设计呢\" class=\"headerlink\" title=\"当你练习表达的时候，开场白是怎样去设计呢\"></a><a href=\"http://www.jianshu.com/p/f76c540e3158\" target=\"_blank\" rel=\"noopener\">当你练习表达的时候，开场白是怎样去设计呢</a></h3><p>不管你从事什么职业，表达自己都是一项必备技能。而如何表达自己，如何吸引听众呢？这篇文章从生物学的角度阐述了开场白的重要性以及什么样的开场白才会吸引到听众，同时作者还有同一类型的其他文章，感兴趣的话可以多读读。</p>\n<h3 id=\"程序员的鄙视链\"><a href=\"#程序员的鄙视链\" class=\"headerlink\" title=\"程序员的鄙视链\"></a><a href=\"http://www.techug.com/post/look-down-chains-of-programmer.html\" target=\"_blank\" rel=\"noopener\">程序员的鄙视链</a></h3><p>如果你看了以上这些惨绝人寰的鄙视链之后，仍然没有击倒你想要学习 coding 的心，那我必须提醒你一件最重要的事：先去交一个女朋友，再来学写程序；因为一旦你成为软件工程师之后，就交不到女朋友了。</p>\n<h3 id=\"JavaScript-疲劳终极指南：我们行业的真相\"><a href=\"#JavaScript-疲劳终极指南：我们行业的真相\" class=\"headerlink\" title=\"JavaScript 疲劳终极指南：我们行业的真相\"></a><a href=\"http://www.zcfy.cc/article/3914\" target=\"_blank\" rel=\"noopener\">JavaScript 疲劳终极指南：我们行业的真相</a></h3><p>抱怨 JS 疲劳就像是在抱怨人类发明了太多解决问题的工具：从邮件到飞机到宇宙飞船。<strong>这篇文章的目的是希望改变你对软件工程行业的普遍的看法，助你在你可能工作的领域上一臂之力</strong>。</p>\n<h3 id=\"超大型-JavaScript-应用的设计哲学\"><a href=\"#超大型-JavaScript-应用的设计哲学\" class=\"headerlink\" title=\"超大型 JavaScript 应用的设计哲学\"></a><a href=\"https://zhuanlan.zhihu.com/p/35929167\" target=\"_blank\" rel=\"noopener\">超大型 JavaScript 应用的设计哲学</a></h3><p>这篇文章为译文，基于 <a href=\"https://link.zhihu.com/?target=https%3A//medium.com/%40cramforce\" target=\"_blank\" rel=\"noopener\">Malte Ubl</a> 在 JSConf Australia 的演讲速记稿和现场视频整理而来，<a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DZZmUwXEiPm4\" target=\"_blank\" rel=\"noopener\">你可以在 YouTube 上观看完整演讲</a>。这篇文章很长，文中讨论了前端领域很多热门的话题与技术，知识点很多很密集。</p>\n<h3 id=\"图解Git\"><a href=\"#图解Git\" class=\"headerlink\" title=\"图解Git\"></a><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></h3><p>图解 git 中的最常用命令。如果你稍微理解 git 的工作原理，这篇文章能够让你理解的更透彻。</p>\n<h3 id=\"如何成为一名优秀的全栈工程师\"><a href=\"#如何成为一名优秀的全栈工程师\" class=\"headerlink\" title=\"如何成为一名优秀的全栈工程师\"></a><a href=\"https://www.jianshu.com/p/f0d134ed7fd0\" target=\"_blank\" rel=\"noopener\">如何成为一名优秀的全栈工程师</a></h3><p>现在感觉“全栈工程师”已经成为了一个梗，然而，实际上全栈工程师是真实存在的，并且是一类对产品和业务发展起到很重要作用的工程师，该文章有点鸡汤，理论偏多。</p>\n<h3 id=\"路由器爱国上网、屏蔽广告与宽带提速\"><a href=\"#路由器爱国上网、屏蔽广告与宽带提速\" class=\"headerlink\" title=\"路由器爱国上网、屏蔽广告与宽带提速\"></a><a href=\"http://fullstack.blog/2018/03/27/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%88%B1%E5%9B%BD%E4%B8%8A%E7%BD%91%E3%80%81%E5%B1%8F%E8%94%BD%E5%B9%BF%E5%91%8A%E4%B8%8E%E5%AE%BD%E5%B8%A6%E6%8F%90%E9%80%9F/\" target=\"_blank\" rel=\"noopener\">路由器爱国上网、屏蔽广告与宽带提速</a></h3><p>作者介绍了利用小米路由器实现爱国上网的具体操作流程，而路由器经过改造之后，所有接入的终端就都可以实现爱国上网了，简直是一劳永逸，而且作者在文章末尾还介绍了宽带提速的方法，每月只要十几块钱，就可以享受 100M 网络了，效果非常明显。</p>\n<h3 id=\"中文文案排版指北\"><a href=\"#中文文案排版指北\" class=\"headerlink\" title=\"中文文案排版指北\"></a><a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">中文文案排版指北</a></h3><p>提供统一中文文案、排版的相关用法，降低团队成员之间的沟通成本。</p>\n<h3 id=\"前端开发工程师必读书籍有哪些值得推荐？\"><a href=\"#前端开发工程师必读书籍有哪些值得推荐？\" class=\"headerlink\" title=\"前端开发工程师必读书籍有哪些值得推荐？\"></a><a href=\"https://www.zhihu.com/question/22591993\" target=\"_blank\" rel=\"noopener\">前端开发工程师必读书籍有哪些值得推荐？</a></h3><p>来自知乎，书荒的童鞋不妨一看。</p>\n<h3 id=\"提问的智慧\"><a href=\"#提问的智慧\" class=\"headerlink\" title=\"提问的智慧\"></a><a href=\"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md\" target=\"_blank\" rel=\"noopener\">提问的智慧</a></h3><p>原文网址：<a href=\"http://www.catb.org/~esr/faqs/smart-questions.html\" target=\"_blank\" rel=\"noopener\">http://www.catb.org/~esr/faqs/smart-questions.html</a>，文章比较长，但是看完会很有收获，提问也是有很多需要注意的地方的，好的提问方式不仅能够更快的获得想要的答案，还可以提高自己的情商，获得他人的认可。</p>\n<h3 id=\"个人分享–web-前端学习资源分享\"><a href=\"#个人分享–web-前端学习资源分享\" class=\"headerlink\" title=\"个人分享–web 前端学习资源分享\"></a><a href=\"https://juejin.im/post/5a0c1956f265da430a501f51\" target=\"_blank\" rel=\"noopener\">个人分享–web 前端学习资源分享</a></h3><p>掘金-守候i分享的前端学习资源，包括一些不错的教程和文章、大牛博客、前端团队博客、推荐书籍、推荐社区、公众号、推荐关注项目和综合项目教程等等。</p>\n<h3 id=\"理解-OAuth-2-0\"><a href=\"#理解-OAuth-2-0\" class=\"headerlink\" title=\"理解 OAuth 2.0\"></a><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"noopener\">理解 OAuth 2.0</a></h3><p><a href=\"http://en.wikipedia.org/wiki/OAuth\" target=\"_blank\" rel=\"noopener\">OAuth</a>是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是 2.0 版。在这篇文章中，阮一峰对 OAuth 2.0 的设计思路和运行流程，做了一个简明通俗的解释。</p>\n<h3 id=\"以色列简史，简到崩溃，笑到流泪！\"><a href=\"#以色列简史，简到崩溃，笑到流泪！\" class=\"headerlink\" title=\"以色列简史，简到崩溃，笑到流泪！\"></a><a href=\"https://mp.weixin.qq.com/s/8Kvgu6sSU57U1q-1K1G-XA\" target=\"_blank\" rel=\"noopener\">以色列简史，简到崩溃，笑到流泪！</a></h3><p>以图文和人物对话的方式对巴以冲突的历史原因以及以色列的历史进行了介绍，风趣幽默，通过一种别样的方式了解历史，我很喜欢。</p>\n<h3 id=\"97-Things-Every-Programmer-Should-Know\"><a href=\"#97-Things-Every-Programmer-Should-Know\" class=\"headerlink\" title=\"97 Things Every Programmer Should Know\"></a><a href=\"https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/\" target=\"_blank\" rel=\"noopener\">97 Things Every Programmer Should Know</a></h3><p>同事推荐的文章，97 个程序员需要知道的理论，文章内容较长，读起来可能比较枯燥，而且暂时没有看到中文版本。。</p>\n<h3 id=\"为什么你统计-PV-的方式是错的？\"><a href=\"#为什么你统计-PV-的方式是错的？\" class=\"headerlink\" title=\"为什么你统计 PV 的方式是错的？\"></a><a href=\"https://juejin.im/post/58ef1fcc570c3500561c2e89\" target=\"_blank\" rel=\"noopener\">为什么你统计 PV 的方式是错的？</a></h3><p>翻译自 Google 工程师 Philip Walton 的<a href=\"https://philipwalton.com/articles/how-we-track-pageviews-is-all-wrong/\" target=\"_blank\" rel=\"noopener\">文章</a>。该文会帮你剖析为什么你常用的统计方式是错的？然后给出可行的解决方案。</p>\n<h3 id=\"编程语言拟人化\"><a href=\"#编程语言拟人化\" class=\"headerlink\" title=\"编程语言拟人化\"></a><a href=\"http://blog.jobbole.com/63311/\" target=\"_blank\" rel=\"noopener\">编程语言拟人化</a></h3><p>作者将各种语言都拟人化了，并赋予了他们一些特征，很有意思。</p>\n<h3 id=\"入门前端一周年总结-我是如何快速入门前端的知识分享\"><a href=\"#入门前端一周年总结-我是如何快速入门前端的知识分享\" class=\"headerlink\" title=\"入门前端一周年总结-我是如何快速入门前端的知识分享\"></a><a href=\"https://juejin.im/post/5c2c18116fb9a049fb43c32c\" target=\"_blank\" rel=\"noopener\">入门前端一周年总结-我是如何快速入门前端的知识分享</a></h3><p>作者虽然入门前端才一年，但是已经有 14K star 的开源项目，面试了几十人，拥有丰富的面试经验，在这篇总结里作者分享了一下自己的学习方式和资源，值得学习与研究。</p>\n<h3 id=\"从平面设计师到前端工程师：五个月的转变历程\"><a href=\"#从平面设计师到前端工程师：五个月的转变历程\" class=\"headerlink\" title=\"从平面设计师到前端工程师：五个月的转变历程\"></a><a href=\"https://mp.weixin.qq.com/s/JGADqRL56xfHM37Cix4VEw\" target=\"_blank\" rel=\"noopener\">从平面设计师到前端工程师：五个月的转变历程</a></h3><p>作者通过自己的转行经历对前端知识路线进行了概括，同时还提供了一些很好的自学资源，包括视频和文章。原文：<a href=\"https://medium.com/@vinceshao/graphic-designer-to-front-end-developer-ch-3e1ac681eea8\" target=\"_blank\" rel=\"noopener\">https://medium.com/@vinceshao/graphic-designer-to-front-end-developer-ch-3e1ac681eea8</a></p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"}]}]}