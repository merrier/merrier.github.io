{"name":"Mac","postlist":[{"title":"Mac下用Cron定时任务更新壁纸","slug":"Mac下用Cron定时任务更新壁纸","date":"2017-07-26T07:08:17.000Z","updated":"2019-05-05T03:32:55.316Z","comments":true,"path":"api/articles/Mac下用Cron定时任务更新壁纸.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这个技巧的原文来自<a href=\"https://www.macosxautomation.com/automator/apod/index.html\" target=\"_blank\" rel=\"noopener\">Set Desktop to NASA Astronomy Picture of the Day</a>，作者通过 Automator 脚本可以每天自动去 NASA（美国宇航局）下载“每日一图”，同时将其设置为桌面。是不是听起来很酷！当然了，我第一次看到的并不是上面那篇文章，而是另一位大神（harttle）的<a href=\"http://harttle.com/2015/11/20/crontab-desktop.html\" target=\"_blank\" rel=\"noopener\">用Cron定时任务更新壁纸</a>，harttle 并没有用 Automator 方式，而是通过 Cron 定时任务实现了这个功能。美中不足的是，harttle 是 Linux 系统，然后我就在自己的 Mac 上试了一下，下面就跟着我一起来实现一把吧！</p>\n<h2 id=\"下载壁纸的脚本\"><a href=\"#下载壁纸的脚本\" class=\"headerlink\" title=\"下载壁纸的脚本\"></a>下载壁纸的脚本</h2><p>首先，我们需要完成一个下载壁纸的脚本，在 Mac 环境下就是 shell 脚本了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/local/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载HTML到/tmp</span></span><br><span class=\"line\">base=<span class=\"string\">'http://apod.nasa.gov/apod/'</span></span><br><span class=\"line\">wget -O /tmp/nasa <span class=\"variable\">$&#123;base&#125;</span>astropix.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到其中的&lt;img&gt;标签的src参数</span></span><br><span class=\"line\">href=<span class=\"variable\">$&#123;base&#125;</span>\\`cat /tmp/nasa | grep -i <span class=\"string\">'&lt;img'</span> | awk -F <span class=\"string\">'\"'</span> <span class=\"string\">'&#123;print $2&#125;'</span>\\`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算src的文件后缀</span></span><br><span class=\"line\">ext=<span class=\"variable\">$&#123;href##*.&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算保存到的文件地址</span></span><br><span class=\"line\">file=/Users/\bYourMacName/Pictures/nasa/\\`date +<span class=\"string\">\"%Y-%m-%d\"</span>\\`.<span class=\"variable\">$ext</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载img</span></span><br><span class=\"line\">wget -O <span class=\"variable\">$file</span> <span class=\"variable\">$href</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>不能完全复制粘贴上面的代码，需要注意将 <code>YourMacName</code> 换成你的真实文件夹名</li>\n<li>需要提前安装 wget，可以通过 brew install wget 安装</li>\n<li>需要将脚本保存到 /usr/local/bin 这个目录下，命名就随便了，可以取名为 nasa-pic-of-day.sh，运行一下，如果在 /Users/\bYourMacName/Pictures/nasa/ 下有一张图片那说明这一步已经成功了！</li>\n</ul>\n<h2 id=\"Cron-定时任务\"><a href=\"#Cron-定时任务\" class=\"headerlink\" title=\"Cron 定时任务\"></a>Cron 定时任务</h2><p>Cron 是 Unix 系统中用于周期执行任务的守护进程，被定时的任务由 crontab 文件提供。我们来写一个自己的 crontab 文件，保存为 ~/bin/daily.cron：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/usr/<span class=\"built_in\">local</span>/bin/bash</span><br><span class=\"line\">30 8 * * * /usr/<span class=\"built_in\">local</span>/bin/nasa-pic-of-day.sh &gt;&gt; /usr/<span class=\"built_in\">local</span>/var/frontend/cron 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>其中 30 表示分钟，6 表示小时，后面的依次是日、月、星期。同时将输出重定向到 /var/harttle/cron（当然你需要确保这个目录存在）。2&gt;&amp;1 是将错误输出重定向至标准输出，这样我们的日志中将会同时包含标准输出和错误输出。 然后通过 crontab 命令载入我们的这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab /usr/<span class=\"built_in\">local</span>/bin/daily.cron</span><br></pre></td></tr></table></figure>\n<p>此后呢，我们的脚本就会在每天早上 8:30 执行。如果有问题我们可以查看日志文件 /usr/local/var/YourMacName/cron，这里有脚本的一切输出。</p>\n<h2 id=\"编辑-crontab\"><a href=\"#编辑-crontab\" class=\"headerlink\" title=\"编辑 crontab\"></a>编辑 crontab</h2><p>crontab 会把刚才载入的文件保存起来，以后我们可以通过 <code>crontab -e</code> 直接更改它（注意更改原文件是不起作用的）。在 Mac 上保存更改时会有错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab: temp file must be edited <span class=\"keyword\">in</span> place</span><br></pre></td></tr></table></figure>\n<p>可以在 ~/.vimrc 后面加一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autocmd filetype crontab setlocal nobackup nowritebackup</span><br></pre></td></tr></table></figure>\n<h2 id=\"Cron-运行环境\"><a href=\"#Cron-运行环境\" class=\"headerlink\" title=\"Cron 运行环境\"></a>Cron 运行环境</h2><p>Cron 运行脚本的环境和交互式 Shell 是不一样的，这一点需要注意。你的脚本可以在交互式 Shell 中正常运行，但 Cron 中可能会有错误。</p>\n<blockquote>\n<p>Cron always runs with a mostly empty environment. HOME, LOGNAME, and SHELL are set; and a very limited PATH.</p>\n</blockquote>\n<p>推荐的做法是在 Cron 运行的脚本中显式地声明那些环境变量：<code>source ~/.bashrc</code>，来手动设置需要的环境。比如在 Mac 上，你可能会需要这一项设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"Mac","path":"api/tags/Mac.json"}]}]}