{"name":"算法","postlist":[{"title":"八大排序算法的python实现","slug":"八大排序算法的python实现","date":"2017-03-18T14:17:57.000Z","updated":"2019-02-27T06:40:32.626Z","comments":true,"path":"api/articles/八大排序算法的python实现.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>其实我的 python 水平相当于初学者，但是由于要找实习，所以刷算法是必然的，而经常刷 leetcode 的小伙伴应该知道，用 javascript 实现各种复杂算法的人比较少（排序算法还好，尤其是那些比较知名的排序算法，想看 Javascript 代码实现排序算法的可以点下面那个链接），所以就导致没有思路的时候也看不到别人是如何用 JS 代码实现的，所以必须要懂其他一种语言才能行，而 python 同样作为一种脚本语言，其语法非常简单，也很适合算法的实现，所以就决定在学习 JS 的同时兼顾 python 的学习。<br>这篇文章当然不是我的原创，而是在逛伯乐在线的时候看到的，感觉总结的很好，代码也很规范，故转载至此处，如果作者不允许转载，将及时处理；如果没弄明白排序算法的步骤，想理解的更生动的话，可以查看我的另外一篇文章：<a href=\"/20170318/js-implementation-of-ten-sorting-algorithms.html\">十大排序算法的Javascript实现</a>。</p>\n<h2 id=\"1-插入排序\"><a href=\"#1-插入排序\" class=\"headerlink\" title=\"1. 插入排序\"></a>1. 插入排序</h2><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为 O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(lists)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 插入排序</span></span><br><span class=\"line\">    count = len(lists)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, count):</span><br><span class=\"line\">        key = lists[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[j] &gt; key:</span><br><span class=\"line\">                lists[j + <span class=\"number\">1</span>] = lists[j]</span><br><span class=\"line\">                lists[j] = key</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-希尔排序\"><a href=\"#2-希尔排序\" class=\"headerlink\" title=\"2. 希尔排序\"></a>2. 希尔排序</h2><p>希尔排序（Shell Sort）是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因 DL．Shell 于 1959 年提出而得名。<br>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span><span class=\"params\">(lists)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 希尔排序</span></span><br><span class=\"line\">    count = len(lists)</span><br><span class=\"line\">    step = <span class=\"number\">2</span></span><br><span class=\"line\">    group = count / step</span><br><span class=\"line\">    <span class=\"keyword\">while</span> group &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, group):</span><br><span class=\"line\">            j = i + group</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &lt; count:</span><br><span class=\"line\">                k = j - group</span><br><span class=\"line\">                key = lists[j]</span><br><span class=\"line\">                <span class=\"keyword\">while</span> k &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> lists[k] &gt; key:</span><br><span class=\"line\">                        lists[k + group] = lists[k]</span><br><span class=\"line\">                        lists[k] = key</span><br><span class=\"line\">                    k -= group</span><br><span class=\"line\">                j += group</span><br><span class=\"line\">        group /= step</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-冒泡排序\"><a href=\"#3-冒泡排序\" class=\"headerlink\" title=\"3. 冒泡排序\"></a>3. 冒泡排序</h2><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(lists)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 冒泡排序</span></span><br><span class=\"line\">    count = len(lists)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, count):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[i] &gt; lists[j]:</span><br><span class=\"line\">                lists[i], lists[j] = lists[j], lists[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a>4. 快速排序</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(lists, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 快速排序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">    key = lists[left]</span><br><span class=\"line\">    low = left</span><br><span class=\"line\">    high = right</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[right] &gt;= key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        lists[left] = lists[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[left] &lt;= key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        lists[right] = lists[left]</span><br><span class=\"line\">    lists[right] = key</span><br><span class=\"line\">    quick_sort(lists, low, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(lists, left + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-直接选择排序\"><a href=\"#5-直接选择排序\" class=\"headerlink\" title=\"5. 直接选择排序\"></a>5. 直接选择排序</h2><p>基本思想：第 1 趟，在待排序记录 r1 ~ r[n] 中选出最小的记录，将它与 r1 交换；第 2 趟，在待排序记录 r2 ~ r[n] 中选出最小的记录，将它与 r2 交换；以此类推，第 i 趟在待排序记录 r[i] ~ r[n] 中选出最小的记录，将它与 r[i] 交换，使有序序列不断增长直到全部排序完毕。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(lists)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 选择排序</span></span><br><span class=\"line\">    count = len(lists)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, count):</span><br><span class=\"line\">        min = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, count):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> lists[min] &gt; lists[j]:</span><br><span class=\"line\">                min = j</span><br><span class=\"line\">        lists[min], lists[i] = lists[i], lists[min]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-堆排序\"><a href=\"#6-堆排序\" class=\"headerlink\" title=\"6. 堆排序\"></a>6. 堆排序</h2><p>堆排序（Heapsort）是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即 A[PARENT[i]] &gt;= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adjust_heap</span><span class=\"params\">(lists, i, size)</span>:</span></span><br><span class=\"line\">    lchild = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    rchild = <span class=\"number\">2</span> * i + <span class=\"number\">2</span></span><br><span class=\"line\">    max = i</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &lt; size / <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lchild &lt; size <span class=\"keyword\">and</span> lists[lchild] &gt; lists[max]:</span><br><span class=\"line\">            max = lchild</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rchild &lt; size <span class=\"keyword\">and</span> lists[rchild] &gt; lists[max]:</span><br><span class=\"line\">            max = rchild</span><br><span class=\"line\">        <span class=\"keyword\">if</span> max != i:</span><br><span class=\"line\">            lists[max], lists[i] = lists[i], lists[max]</span><br><span class=\"line\">            adjust_heap(lists, max, size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_heap</span><span class=\"params\">(lists, size)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, (size/<span class=\"number\">2</span>))[::<span class=\"number\">-1</span>]:</span><br><span class=\"line\">        adjust_heap(lists, i, size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(lists)</span>:</span></span><br><span class=\"line\">    size = len(lists)</span><br><span class=\"line\">    build_heap(lists, size)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, size)[::<span class=\"number\">-1</span>]:</span><br><span class=\"line\">        lists[<span class=\"number\">0</span>], lists[i] = lists[i], lists[<span class=\"number\">0</span>]</span><br><span class=\"line\">        adjust_heap(lists, <span class=\"number\">0</span>, i)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-归并排序\"><a href=\"#7-归并排序\" class=\"headerlink\" title=\"7. 归并排序\"></a>7. 归并排序</h2><p>归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br>归并过程为：比较 a[i] 和 a[j] 的大小，若 a[i] ≤ a[j]，则将第一个有序表中的元素 a[i] 复制到 r[k] 中，并令 i 和 k 分别加上 1；否则将第二个有序表中的元素 a[j] 复制到 r[k] 中，并令 j 和 k 分别加上 1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到 r 中从下标 k 到下标 t 的单元。归并排序的算法我们通常用递归实现，先把待排序区间 [s,t] 以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间 [s,t]。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(left, right)</span>:</span></span><br><span class=\"line\">    i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(left) <span class=\"keyword\">and</span> j &lt; len(right):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left[i] &lt;= right[j]:</span><br><span class=\"line\">            result.append(left[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result.append(right[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    result += left[i:]</span><br><span class=\"line\">    result += right[j:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(lists)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 归并排序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(lists) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">    num = len(lists) / <span class=\"number\">2</span></span><br><span class=\"line\">    left = merge_sort(lists[:num])</span><br><span class=\"line\">    right = merge_sort(lists[num:])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(left, right)</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-基数排序\"><a href=\"#8-基数排序\" class=\"headerlink\" title=\"8. 基数排序\"></a>8. 基数排序</h2><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或 bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为 O(nlog(r)m)，其中 r 为所采取的基数，而 m 为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">radix_sort</span><span class=\"params\">(lists, radix=<span class=\"number\">10</span>)</span>:</span></span><br><span class=\"line\">    k = int(math.ceil(math.log(max(lists), radix)))</span><br><span class=\"line\">    bucket = [[] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(radix)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, k+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> lists:</span><br><span class=\"line\">            bucket[j/(radix**(i<span class=\"number\">-1</span>)) % (radix**i)].append(j)</span><br><span class=\"line\">        <span class=\"keyword\">del</span> lists[:]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> z <span class=\"keyword\">in</span> bucket:</span><br><span class=\"line\">            lists += z</span><br><span class=\"line\">            <span class=\"keyword\">del</span> z[:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"algorithm","path":"api/categories/algorithm.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"排序","path":"api/tags/排序.json"},{"name":"算法","path":"api/tags/算法.json"}]},{"title":"Leetcode的JS实现——Easy篇（上）","slug":"Leetcode的JS实现——Easy篇（上）","date":"2017-03-31T09:24:05.000Z","updated":"2019-02-27T06:40:32.622Z","comments":true,"path":"api/articles/Leetcode的JS实现——Easy篇（上）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>由于要找实习，所以最近几周一直在刷 leetcode（打算先把 easy 刷完，大概一天 10 道左右）；而作为一个前端码农，也就只能用 JS 实现算法了，但是众所周知，JS 在算法实现方面是真的不如其他知名语言（java、python、c++），所以绝大多数题都没有 JS 的标准答案，这让我刷 leetcode 的过程变得异常艰难；为了方便和我一样用 JS 刷 leetcode 的小伙伴，打算写一篇纯干货（代码）的文章，对如何用 JS 实现 leetcode 算法题进行总结。（鉴于我水平有限和 JS 本身的局限性，有好多题目我虽然看到了，但是最终没有用 JS 实现，如果你知道某些题目的 JS 实现或有更优解法，请通过网站中的联系方式联系我，O(∩_∩)O谢谢）</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>leetcode 地址：<a href=\"https://leetcode.com/problemset/algorithms/，本文章不会贴出题目，可以点击标题链接查看原题目\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problemset/algorithms/，本文章不会贴出题目，可以点击标题链接查看原题目</a></p>\n<p>排序方式：按照\b本难度中题目的 accepted 统计</p>\n<h2 id=\"JS代码实现\"><a href=\"#JS代码实现\" class=\"headerlink\" title=\"JS代码实现\"></a>JS代码实现</h2><h3 id=\"461-Hamming-distance\"><a href=\"#461-Hamming-distance\" class=\"headerlink\" title=\"461-Hamming distance\"></a><a href=\"https://leetcode.com/problems/hamming-distance/#/description\" target=\"_blank\" rel=\"noopener\">461-Hamming distance</a></h3><h4 id=\"方法一：利用-replace-方法\"><a href=\"#方法一：利用-replace-方法\" class=\"headerlink\" title=\"方法一：利用 replace() 方法\"></a>方法一：利用 replace() 方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; y</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x^y).toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">\"\"</span>).length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用异或\"><a href=\"#方法二：利用异或\" class=\"headerlink\" title=\"方法二：利用异或\"></a>方法二：利用异或</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; y</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xor = x ^ y, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">32</span>;i++) count += (xor &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"476-Number-Complement\"><a href=\"#476-Number-Complement\" class=\"headerlink\" title=\"476-Number Complement\"></a><a href=\"https://leetcode.com/problems/number-complement/#/description\" target=\"_blank\" rel=\"noopener\">476-Number Complement</a></h3><h4 id=\"方法一：利用二进制\"><a href=\"#方法一：利用二进制\" class=\"headerlink\" title=\"方法一：利用二进制\"></a>方法一：利用二进制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findComplement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num^(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,(num.toString(<span class=\"number\">2</span>).length))<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用位运算中的移位\"><a href=\"#方法二：利用位运算中的移位\" class=\"headerlink\" title=\"方法二：利用位运算中的移位\"></a>方法二：利用位运算中的移位</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findComplement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mask = num;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num ^ mask;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"500-Keyboard-Row\"><a href=\"#500-Keyboard-Row\" class=\"headerlink\" title=\"500-Keyboard Row\"></a><a href=\"https://leetcode.com/problems/keyboard-row/#/description\" target=\"_blank\" rel=\"noopener\">500-Keyboard Row</a></h3><p>暂无</p>\n<h3 id=\"412-Fizz-Buzz\"><a href=\"#412-Fizz-Buzz\" class=\"headerlink\" title=\"412-Fizz Buzz\"></a><a href=\"https://leetcode.com/problems/fizz-buzz/#/description\" target=\"_blank\" rel=\"noopener\">412-Fizz Buzz</a></h3><h4 id=\"方法一：各种-if\"><a href=\"#方法一：各种-if\" class=\"headerlink\" title=\"方法一：各种 if\"></a>方法一：各种 if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fizzBuzz = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%<span class=\"number\">15</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"FizzBuzz\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i%<span class=\"number\">5</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"Buzz\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i%<span class=\"number\">3</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"Fizz\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"\"</span> + i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"344-Reverse-String\"><a href=\"#344-Reverse-String\" class=\"headerlink\" title=\"344-Reverse String\"></a><a href=\"https://leetcode.com/problems/reverse-string/#/description\" target=\"_blank\" rel=\"noopener\">344-Reverse String</a></h3><h4 id=\"方法一：从后往前遍历\"><a href=\"#方法一：从后往前遍历\" class=\"headerlink\" title=\"方法一：从后往前遍历\"></a>方法一：从后往前遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>,n=s.length;i&lt;n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        str += s[n-i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：递归\"><a href=\"#方法二：递归\" class=\"headerlink\" title=\"方法二：递归\"></a>方法二：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftStr = s.substring(<span class=\"number\">0</span>, length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightStr = s.substring(length / <span class=\"number\">2</span>, length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reverseString(rightStr) + reverseString(leftStr);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"496-Next-Greater-Element-I\"><a href=\"#496-Next-Greater-Element-I\" class=\"headerlink\" title=\"496-Next Greater Element I\"></a><a href=\"https://leetcode.com/problems/next-greater-element-i/#/description\" target=\"_blank\" rel=\"noopener\">496-Next Greater Element I</a></h3><p>暂无</p>\n<h3 id=\"463-Island-Perimeter\"><a href=\"#463-Island-Perimeter\" class=\"headerlink\" title=\"463-Island Perimeter\"></a><a href=\"https://leetcode.com/problems/island-perimeter/#/description\" target=\"_blank\" rel=\"noopener\">463-Island Perimeter</a></h3><h4 id=\"方法一：每块陆地都加-4，遇到有相邻陆地时减-2\"><a href=\"#方法一：每块陆地都加-4，遇到有相邻陆地时减-2\" class=\"headerlink\" title=\"方法一：每块陆地都加 4，遇到有相邻陆地时减 2\"></a>方法一：每块陆地都加 4，遇到有相邻陆地时减 2</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[][]&#125; grid</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> islandPerimeter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=grid.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,m=grid[<span class=\"number\">0</span>].length;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grid[i][j] ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                result +=<span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; grid[i<span class=\"number\">-1</span>][j] == <span class=\"number\">1</span>)&#123;result -=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; grid[i][j<span class=\"number\">-1</span>] ==<span class=\"number\">1</span> )&#123;result -=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"292-Nim-Game\"><a href=\"#292-Nim-Game\" class=\"headerlink\" title=\"292-Nim Game\"></a><a href=\"https://leetcode.com/problems/nim-game/#/description\" target=\"_blank\" rel=\"noopener\">292-Nim Game</a></h3><h4 id=\"方法一：只要数字能被-4-整除就赢不了\"><a href=\"#方法一：只要数字能被-4-整除就赢不了\" class=\"headerlink\" title=\"方法一：只要数字能被 4 整除就赢不了\"></a>方法一：只要数字能被 4 整除就赢不了</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canWinNim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(n%<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"485-Max-Consecutive-Ones\"><a href=\"#485-Max-Consecutive-Ones\" class=\"headerlink\" title=\"485-Max Consecutive Ones\"></a><a href=\"https://leetcode.com/problems/max-consecutive-ones/#/description\" target=\"_blank\" rel=\"noopener\">485-Max Consecutive Ones</a></h3><h4 id=\"方法一：看到-0-时就将-max-置为-0，否则-max-加-1\"><a href=\"#方法一：看到-0-时就将-max-置为-0，否则-max-加-1\" class=\"headerlink\" title=\"方法一：看到 0 时就将 max 置为 0，否则 max 加 1\"></a>方法一：看到 0 时就将 max 置为 0，否则 max 加 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findMaxConsecutiveOnes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.max(result,num =(nums[i]==<span class=\"number\">0</span>) ? <span class=\"number\">0</span>: num+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"136-Single-Number\"><a href=\"#136-Single-Number\" class=\"headerlink\" title=\"136-Single Number\"></a><a href=\"https://leetcode.com/problems/single-number/#/description\" target=\"_blank\" rel=\"noopener\">136-Single Number</a></h3><h4 id=\"方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为-0）\"><a href=\"#方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为-0）\" class=\"headerlink\" title=\"方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为 0）\"></a>方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为 0）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        result ^= nums[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"448-Find-All-Numbers-Disappeared-in-an-Array\"><a href=\"#448-Find-All-Numbers-Disappeared-in-an-Array\" class=\"headerlink\" title=\"448-Find All Numbers Disappeared in an Array\"></a><a href=\"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/#/description\" target=\"_blank\" rel=\"noopener\">448-Find All Numbers Disappeared in an Array</a></h3><h4 id=\"方法一：利用哈希表将看到的数字变为负数\"><a href=\"#方法一：利用哈希表将看到的数字变为负数\" class=\"headerlink\" title=\"方法一：利用哈希表将看到的数字变为负数\"></a>方法一：利用哈希表将看到的数字变为负数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findDisappearedNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n= nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"built_in\">Math</span>.abs(nums[i]) <span class=\"number\">-1</span>;</span><br><span class=\"line\">        nums[j] = -<span class=\"built_in\">Math</span>.abs(nums[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>; k&lt;n;k++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[k]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result.push(k+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"520-Detect-Capital\"><a href=\"#520-Detect-Capital\" class=\"headerlink\" title=\"520-Detect Capital\"></a><a href=\"https://leetcode.com/problems/detect-capital/#/description\" target=\"_blank\" rel=\"noopener\">520-Detect Capital</a></h3><h4 id=\"方法一：巧用-indexOf\"><a href=\"#方法一：巧用-indexOf\" class=\"headerlink\" title=\"方法一：巧用 indexOf\"></a>方法一：巧用 indexOf</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; word</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> detectCapitalUse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(word.indexOf(word.toUpperCase()) &amp;&amp; word.indexOf(word.toLowerCase()) &amp;&amp; word.indexOf(word.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>).toUpperCase() + word.substring(<span class=\"number\">1</span>).toLowerCase()))</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：正则\"><a href=\"#方法二：正则\" class=\"headerlink\" title=\"方法二：正则\"></a>方法二：正则</h4><p>暂无</p>\n<h3 id=\"104-Maximum-Depth-of-Binary-Tree\"><a href=\"#104-Maximum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"104-Maximum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">104-Maximum Depth of Binary Tree</a></h3><h4 id=\"方法一：递归，其实很容易发现规律\"><a href=\"#方法一：递归，其实很容易发现规律\" class=\"headerlink\" title=\"方法一：递归，其实很容易发现规律\"></a>方法一：递归，其实很容易发现规律</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxDepth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root === <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : <span class=\"built_in\">Math</span>.max(maxDepth(root.left), maxDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"389-Find-the-Difference\"><a href=\"#389-Find-the-Difference\" class=\"headerlink\" title=\"389-Find the Difference\"></a><a href=\"https://leetcode.com/problems/find-the-difference/#/description\" target=\"_blank\" rel=\"noopener\">389-Find the Difference</a></h3><h4 id=\"方法一：依然是-replace\"><a href=\"#方法一：依然是-replace\" class=\"headerlink\" title=\"方法一：依然是 replace()\"></a>方法一：依然是 replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;character&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findTheDifference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        t = t.replace(s[i],<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：位运算\"><a href=\"#方法二：位运算\" class=\"headerlink\" title=\"方法二：位运算\"></a>方法二：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;character&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findTheDifference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = t.length,c = t.charCodeAt(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\tc ^= s.charCodeAt(i);</span><br><span class=\"line\">\t\tc ^= t.charCodeAt(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.fromCharCode(c);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"371-Sum-of-Two-Integers\"><a href=\"#371-Sum-of-Two-Integers\" class=\"headerlink\" title=\"371-Sum of Two Integers\"></a><a href=\"https://leetcode.com/problems/sum-of-two-integers/#/description\" target=\"_blank\" rel=\"noopener\">371-Sum of Two Integers</a></h3><h4 id=\"方法一：位运算\"><a href=\"#方法一：位运算\" class=\"headerlink\" title=\"方法一：位运算\"></a>方法一：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; a</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; b</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b==<span class=\"number\">0</span>? a:getSum(a^b, (a&amp;b)&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"226-Invert-Binary-Tree\"><a href=\"#226-Invert-Binary-Tree\" class=\"headerlink\" title=\"226-Invert Binary Tree\"></a><a href=\"https://leetcode.com/problems/invert-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">226-Invert Binary Tree</a></h3><h4 id=\"方法一：二叉树基本上都是递归，只不过这次规律很容易发现\"><a href=\"#方法一：二叉树基本上都是递归，只不过这次规律很容易发现\" class=\"headerlink\" title=\"方法一：二叉树基本上都是递归，只不过这次规律很容易发现\"></a>方法一：二叉树基本上都是递归，只不过这次规律很容易发现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;TreeNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> invertTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = root.left,</span><br><span class=\"line\">        right = root.right;</span><br><span class=\"line\">        </span><br><span class=\"line\">    root.left = invertTree(right);</span><br><span class=\"line\">    root.right = invertTree(left);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"492-Construct-the-Rectangle\"><a href=\"#492-Construct-the-Rectangle\" class=\"headerlink\" title=\"492-Construct the Rectangle\"></a><a href=\"https://leetcode.com/problems/construct-the-rectangle\" target=\"_blank\" rel=\"noopener\">492-Construct the Rectangle</a></h3><h4 id=\"方法一：越和正方形相似越好，所以需要先求根值确定大致范围\"><a href=\"#方法一：越和正方形相似越好，所以需要先求根值确定大致范围\" class=\"headerlink\" title=\"方法一：越和正方形相似越好，所以需要先求根值确定大致范围\"></a>方法一：越和正方形相似越好，所以需要先求根值确定大致范围</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; area</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> constructRectangle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">area</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.sqrt(area));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (area % w !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    w--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [area/w,w];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"283-Move-Zeroes\"><a href=\"#283-Move-Zeroes\" class=\"headerlink\" title=\"283-Move Zeroes\"></a><a href=\"https://leetcode.com/problems/move-zeroes\" target=\"_blank\" rel=\"noopener\">283-Move Zeroes</a></h3><h4 id=\"方法一：碰到-0-就先去掉再-push-进数组\"><a href=\"#方法一：碰到-0-就先去掉再-push-进数组\" class=\"headerlink\" title=\"方法一：碰到 0 就先去掉再 push 进数组\"></a>方法一：碰到 0 就先去掉再 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,m=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[m] === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            nums.splice(m,<span class=\"number\">1</span>);</span><br><span class=\"line\">            nums.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            m++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：类似于冒泡\"><a href=\"#方法二：类似于冒泡\" class=\"headerlink\" title=\"方法二：类似于冒泡\"></a>方法二：类似于冒泡</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = nums[j];</span><br><span class=\"line\">            nums[j] = nums[i];</span><br><span class=\"line\">            nums[i] = temp;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：用一个变量记录当前多少个元素不为-0\"><a href=\"#方法三：用一个变量记录当前多少个元素不为-0\" class=\"headerlink\" title=\"方法三：用一个变量记录当前多少个元素不为 0\"></a>方法三：用一个变量记录当前多少个元素不为 0</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums === <span class=\"literal\">null</span> || nums.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;        </span><br><span class=\"line\">    <span class=\"keyword\">var</span> insertPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] !== <span class=\"number\">0</span>) nums[insertPos++] = nums[i];</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (insertPos &lt; nums.length) &#123;</span><br><span class=\"line\">        nums[insertPos++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"530-Minimum-Absolute-Difference-in-BST\"><a href=\"#530-Minimum-Absolute-Difference-in-BST\" class=\"headerlink\" title=\"530-Minimum Absolute Difference in BST\"></a><a href=\"https://leetcode.com/problems/minimum-absolute-difference-in-bst\" target=\"_blank\" rel=\"noopener\">530-Minimum Absolute Difference in BST</a></h3><p>暂无</p>\n<h3 id=\"506-Relative-Ranks\"><a href=\"#506-Relative-Ranks\" class=\"headerlink\" title=\"506-Relative Ranks\"></a><a href=\"https://leetcode.com/problems/relative-ranks\" target=\"_blank\" rel=\"noopener\">506-Relative Ranks</a></h3><p>暂无</p>\n<h3 id=\"167-Two-Sum-II-Input-array-is-sorted\"><a href=\"#167-Two-Sum-II-Input-array-is-sorted\" class=\"headerlink\" title=\"167-Two Sum II - Input array is sorted\"></a><a href=\"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted\" target=\"_blank\" rel=\"noopener\">167-Two Sum II - Input array is sorted</a></h3><h4 id=\"方法一：两个指针\"><a href=\"#方法一：两个指针\" class=\"headerlink\" title=\"方法一：两个指针\"></a>方法一：两个指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; numbers</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numbers === <span class=\"literal\">null</span> || numbers.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>, right = numbers.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = numbers[left] + numbers[right];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>[left+<span class=\"number\">1</span>,right+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v &gt; target) &#123;</span><br><span class=\"line\">            right --;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找\"><a href=\"#方法二：二分查找\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; numbers</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(numbers.length&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;numbers.length<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> start=i+<span class=\"number\">1</span>, end=numbers.length<span class=\"number\">-1</span>, gap=target-numbers[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt;= end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> m = <span class=\"built_in\">Math</span>.floor(start+(end-start)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numbers[m] == gap) <span class=\"keyword\">return</span> [i+<span class=\"number\">1</span>,m+<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(numbers[m] &gt; gap) end=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> start=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"455-Assign-Cookies\"><a href=\"#455-Assign-Cookies\" class=\"headerlink\" title=\"455-Assign Cookies\"></a><a href=\"https://leetcode.com/problems/assign-cookies\" target=\"_blank\" rel=\"noopener\">455-Assign Cookies</a></h3><h4 id=\"方法一：Just-assign-the-cookies-starting-from-the-child-with-less-greediness-to-maximize-the-number-of-happy-children\"><a href=\"#方法一：Just-assign-the-cookies-starting-from-the-child-with-less-greediness-to-maximize-the-number-of-happy-children\" class=\"headerlink\" title=\"方法一：Just assign the cookies starting from the child with less greediness to maximize the number of happy children .\"></a>方法一：Just assign the cookies starting from the child with less greediness to maximize the number of happy children .</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; g</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findContentChildren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">g, s</span>) </span>&#123;</span><br><span class=\"line\">    g.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">    s.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,m=g.length,n=s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;n&amp;&amp;i&lt;m;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g[i]&lt;=s[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"453-Minimum-Moves-to-Equal-Array-Elements\"><a href=\"#453-Minimum-Moves-to-Equal-Array-Elements\" class=\"headerlink\" title=\"453-Minimum Moves to Equal Array Elements\"></a><a href=\"https://leetcode.com/problems/minimum-moves-to-equal-array-elements\" target=\"_blank\" rel=\"noopener\">453-Minimum Moves to Equal Array Elements</a></h3><h4 id=\"方法一：每次让-n-1-个元素-1，其实可以理解为每次让-1-个元素减-1，知道都等于数组中的最小元素为止\"><a href=\"#方法一：每次让-n-1-个元素-1，其实可以理解为每次让-1-个元素减-1，知道都等于数组中的最小元素为止\" class=\"headerlink\" title=\"方法一：每次让 n-1 个元素 +1，其实可以理解为每次让 1 个元素减 1，知道都等于数组中的最小元素为止\"></a>方法一：每次让 n-1 个元素 +1，其实可以理解为每次让 1 个元素减 1，知道都等于数组中的最小元素为止</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minMoves = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, nums),n=nums.length,result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        result += nums[i] -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"383-Ransom-Note\"><a href=\"#383-Ransom-Note\" class=\"headerlink\" title=\"383-Ransom Note\"></a><a href=\"https://leetcode.com/problems/ransom-note\" target=\"_blank\" rel=\"noopener\">383-Ransom Note</a></h3><h4 id=\"方法一：用一个数组作为字典表（其实应该是哈希表，在-JS-中就是数组）\"><a href=\"#方法一：用一个数组作为字典表（其实应该是哈希表，在-JS-中就是数组）\" class=\"headerlink\" title=\"方法一：用一个数组作为字典表（其实应该是哈希表，在 JS 中就是数组）\"></a>方法一：用一个数组作为字典表（其实应该是哈希表，在 JS 中就是数组）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; ransomNote</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; magazine</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canConstruct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ransomNote, magazine</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = ransomNote.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = ransomNote[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(magazine.indexOf(s) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            magazine = magazine.replace(s,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(magazine.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"404-Sum-of-Left-Leaves\"><a href=\"#404-Sum-of-Left-Leaves\" class=\"headerlink\" title=\"404-Sum of Left Leaves\"></a><a href=\"https://leetcode.com/problems/sum-of-left-leaves\" target=\"_blank\" rel=\"noopener\">404-Sum of Left Leaves</a></h3><h4 id=\"方法一：将叶子节点区分出来就可以了\"><a href=\"#方法一：将叶子节点区分出来就可以了\" class=\"headerlink\" title=\"方法一：将叶子节点区分出来就可以了\"></a>方法一：将叶子节点区分出来就可以了</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumOfLeftLeaves = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left.left === <span class=\"literal\">null</span> &amp;&amp; root.left.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ans += root.left.val;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans += sumOfLeftLeaves(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans += sumOfLeftLeaves(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"349-Intersection-of-Two-Arrays\"><a href=\"#349-Intersection-of-Two-Arrays\" class=\"headerlink\" title=\"349-Intersection of Two Arrays\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-arrays\" target=\"_blank\" rel=\"noopener\">349-Intersection of Two Arrays</a></h3><h4 id=\"方法一：两个指针进行遍历（哈希表，复杂度为-O-n-）\"><a href=\"#方法一：两个指针进行遍历（哈希表，复杂度为-O-n-）\" class=\"headerlink\" title=\"方法一：两个指针进行遍历（哈希表，复杂度为 O(n)）\"></a>方法一：两个指针进行遍历（哈希表，复杂度为 O(n)）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">        nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">        nums2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">            j = <span class=\"number\">0</span>,</span><br><span class=\"line\">            result = [];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; nums1.length &amp;&amp; j &lt; nums2.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.indexOf(nums1[i]) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                    result.push(nums1[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找（复杂度为-O-nlgn-）\"><a href=\"#方法二：二分查找（复杂度为-O-nlgn-）\" class=\"headerlink\" title=\"方法二：二分查找（复杂度为 O(nlgn)）\"></a>方法二：二分查找（复杂度为 O(nlgn)）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    nums2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;nums1.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (binarySearch(nums2, nums1[i]) &amp;&amp; result.indexOf(nums1[i]) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            result.push(nums1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> binarySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums,target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>,high = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor(low + (high - low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"122-Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#122-Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"122-Best Time to Buy and Sell Stock II\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\" target=\"_blank\" rel=\"noopener\">122-Best Time to Buy and Sell Stock II</a></h3><h4 id=\"方法一：只要第二天价格比第一天价格高，就卖掉\"><a href=\"#方法一：只要第二天价格比第一天价格高，就卖掉\" class=\"headerlink\" title=\"方法一：只要第二天价格比第一天价格高，就卖掉\"></a>方法一：只要第二天价格比第一天价格高，就卖掉</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"number\">0</span>,n=prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices[i]&lt;prices[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            result += prices[i+<span class=\"number\">1</span>] - prices[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"387-First-Unique-Character-in-a-String\"><a href=\"#387-First-Unique-Character-in-a-String\" class=\"headerlink\" title=\"387-First Unique Character in a String\"></a><a href=\"https://leetcode.com/problems/first-unique-character-in-a-string\" target=\"_blank\" rel=\"noopener\">387-First Unique Character in a String</a></h3><h4 id=\"方法一：用一个数组记录字符出现的位置及次数（哈希表）\"><a href=\"#方法一：用一个数组记录字符出现的位置及次数（哈希表）\" class=\"headerlink\" title=\"方法一：用一个数组记录字符出现的位置及次数（哈希表）\"></a>方法一：用一个数组记录字符出现的位置及次数（哈希表）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> freq = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">'a'</span>.charCodeAt();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (freq [s[i].charCodeAt() - a] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            freq [s[i].charCodeAt() - a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            freq [s[i].charCodeAt() - a]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; s.length; k ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(freq [s[k].charCodeAt() - a] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"171-Excel-Sheet-Column-Number\"><a href=\"#171-Excel-Sheet-Column-Number\" class=\"headerlink\" title=\"171-Excel Sheet Column Number\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-number\" target=\"_blank\" rel=\"noopener\">171-Excel Sheet Column Number</a></h3><h4 id=\"方法一：很容易发现规律，类似二进制转换成-10-进制\"><a href=\"#方法一：很容易发现规律，类似二进制转换成-10-进制\" class=\"headerlink\" title=\"方法一：很容易发现规律，类似二进制转换成 10 进制\"></a>方法一：很容易发现规律，类似二进制转换成 10 进制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> titleToNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        result += <span class=\"built_in\">Math</span>.pow(<span class=\"number\">26</span>,n-i<span class=\"number\">-1</span>)*(s[i].charCodeAt() - <span class=\"number\">64</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"504-Base-7\"><a href=\"#504-Base-7\" class=\"headerlink\" title=\"504-Base 7\"></a><a href=\"https://leetcode.com/problems/base-7\" target=\"_blank\" rel=\"noopener\">504-Base 7</a></h3><h4 id=\"方法一：递归取余，很经典的一道题和解法，用的比较多\"><a href=\"#方法一：递归取余，很经典的一道题和解法，用的比较多\" class=\"headerlink\" title=\"方法一：递归取余，很经典的一道题和解法，用的比较多\"></a>方法一：递归取余，很经典的一道题和解法，用的比较多</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertToBase7 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num&gt;=<span class=\"number\">0</span> ? <span class=\"string\">\"\"</span> + (num&gt;=<span class=\"number\">7</span> ? convertToBase7(<span class=\"built_in\">Math</span>.floor(num/<span class=\"number\">7</span>)) + <span class=\"string\">\"\"</span> + num%<span class=\"number\">7</span> : num) : <span class=\"string\">'-'</span>+convertToBase7(-num);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"237-Delete-Node-in-a-Linked-List\"><a href=\"#237-Delete-Node-in-a-Linked-List\" class=\"headerlink\" title=\"237-Delete Node in a Linked List\"></a><a href=\"https://leetcode.com/problems/delete-node-in-a-linked-list\" target=\"_blank\" rel=\"noopener\">237-Delete Node in a Linked List</a></h3><h4 id=\"方法一：很智障的一道题\"><a href=\"#方法一：很智障的一道题\" class=\"headerlink\" title=\"方法一：很智障的一道题\"></a>方法一：很智障的一道题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; node</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify node in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"100-Same-Tree\"><a href=\"#100-Same-Tree\" class=\"headerlink\" title=\"100-Same Tree\"></a><a href=\"https://leetcode.com/problems/same-tree\" target=\"_blank\" rel=\"noopener\">100-Same Tree</a></h3><h4 id=\"方法一：递归，相等的依据除了值相等之外还有不能为-null\"><a href=\"#方法一：递归，相等的依据除了值相等之外还有不能为-null\" class=\"headerlink\" title=\"方法一：递归，相等的依据除了值相等之外还有不能为 null\"></a>方法一：递归，相等的依据除了值相等之外还有不能为 null</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; p</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; q</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSameTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p === <span class=\"literal\">null</span> &amp;&amp; q === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p !== <span class=\"literal\">null</span> &amp;&amp; q !== <span class=\"literal\">null</span> &amp;&amp; p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"169-Maiority-Element\"><a href=\"#169-Maiority-Element\" class=\"headerlink\" title=\"169-Maiority Element\"></a><a href=\"https://leetcode.com/problems/majority-element\" target=\"_blank\" rel=\"noopener\">169-Maiority Element</a></h3><h4 id=\"方法一：每找出两个不同的-element，就成对删除即-count–，最终剩下的一定就是所求的（O-n-）\"><a href=\"#方法一：每找出两个不同的-element，就成对删除即-count–，最终剩下的一定就是所求的（O-n-）\" class=\"headerlink\" title=\"方法一：每找出两个不同的 element，就成对删除即 count–，最终剩下的一定就是所求的（O(n)）\"></a>方法一：每找出两个不同的 element，就成对删除即 count–，最终剩下的一定就是所求的（O(n)）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> major=nums[<span class=\"number\">0</span>], count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>,n=nums.length; i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                major=nums[i];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(major==nums[i])&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：哈希表\"><a href=\"#方法二：哈希表\" class=\"headerlink\" title=\"方法二：哈希表\"></a>方法二：哈希表</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counts = [],n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(counts[nums[i]] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            counts[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(counts[nums[i]] + <span class=\"number\">1</span>&gt; <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">2</span>)) &#123; <span class=\"keyword\">return</span> nums[i];&#125;</span><br><span class=\"line\">            counts[nums[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：Since-the-majority-element-appears-more-than-n-2-times-the-n-2-th-element-in-the-sorted-nums-must-be-the-majority-element\"><a href=\"#方法三：Since-the-majority-element-appears-more-than-n-2-times-the-n-2-th-element-in-the-sorted-nums-must-be-the-majority-element\" class=\"headerlink\" title=\"方法三：Since the majority element appears more than n / 2 times, the n / 2-th element in the sorted nums must be the majority element.\"></a>方法三：Since the majority element appears more than <code>n / 2</code> times, the <code>n / 2</code>-th element in the sorted <code>nums</code> must be the majority element.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"built_in\">Math</span>.floor(nums.length/<span class=\"number\">2</span>)];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：随机挑选一个元素，然后看它是否是多数元素\"><a href=\"#方法四：随机挑选一个元素，然后看它是否是多数元素\" class=\"headerlink\" title=\"方法四：随机挑选一个元素，然后看它是否是多数元素\"></a>方法四：随机挑选一个元素，然后看它是否是多数元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> idx = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*n),candidate = nums[idx],counts = <span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == candidate) &#123;counts++;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counts &gt; n / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> candidate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：摩尔投票算法\"><a href=\"#方法五：摩尔投票算法\" class=\"headerlink\" title=\"方法五：摩尔投票算法\"></a>方法五：<a href=\"https://www.zhihu.com/question/44213758?sort=created\" target=\"_blank\" rel=\"noopener\">摩尔投票算法</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> major, counts = <span class=\"number\">0</span>, n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!counts) &#123;</span><br><span class=\"line\">            major = nums[i];</span><br><span class=\"line\">            counts = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> counts += (nums[i] == major) ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法六：位运算，The-key-lies-in-how-to-count-the-number-of-1‘s-on-a-specific-bit-Specifically-you-need-a-mask-with-a-1-on-the-i-the-bit-and-0-otherwise-to-get-the-i-th-bit-of-each-element-in-nums\"><a href=\"#方法六：位运算，The-key-lies-in-how-to-count-the-number-of-1‘s-on-a-specific-bit-Specifically-you-need-a-mask-with-a-1-on-the-i-the-bit-and-0-otherwise-to-get-the-i-th-bit-of-each-element-in-nums\" class=\"headerlink\" title=\"方法六：位运算，The key lies in how to count the number of 1‘s on a specific bit. Specifically, you need a mask with a 1 on the i-the bit and 0 otherwise to get the i-th bit of each element in nums\"></a>方法六：位运算，The key lies in how to count the number of <code>1</code>‘s on a specific bit. Specifically, you need a <code>mask</code> with a <code>1</code> on the <code>i</code>-the bit and <code>0</code> otherwise to get the <code>i</code>-th bit of each element in <code>nums</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> major = <span class=\"number\">0</span>, n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, mask = <span class=\"number\">1</span>; i &lt; <span class=\"number\">32</span>; i++, mask &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bitCounts = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] &amp; mask) bitCounts++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitCounts &gt; n / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                major |= mask;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"242-Valid-Anagram\"><a href=\"#242-Valid-Anagram\" class=\"headerlink\" title=\"242-Valid Anagram\"></a><a href=\"https://leetcode.com/problems/valid-anagram\" target=\"_blank\" rel=\"noopener\">242-Valid Anagram</a></h3><h4 id=\"方法一：用一个数组作为桶，s-中的字符用来加-1，t-中的字符用来减-1；如果最后桶中没有元素就返回-true\"><a href=\"#方法一：用一个数组作为桶，s-中的字符用来加-1，t-中的字符用来减-1；如果最后桶中没有元素就返回-true\" class=\"headerlink\" title=\"方法一：用一个数组作为桶，s 中的字符用来加 1，t 中的字符用来减 1；如果最后桶中没有元素就返回 true\"></a>方法一：用一个数组作为桶，s 中的字符用来加 1，t 中的字符用来减 1；如果最后桶中没有元素就返回 true</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s===<span class=\"string\">\"\"</span>&amp;&amp;t===<span class=\"string\">\"\"</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alphabet = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m=<span class=\"number\">0</span>;m&lt;alphabet.length;m++)&#123;</span><br><span class=\"line\">            alphabet[m] =<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            alphabet[s[i].charCodeAt() - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; t.length; j++) &#123;</span><br><span class=\"line\">            alphabet[t[j].charCodeAt() - <span class=\"number\">97</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;alphabet.length;k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (alphabet[k]!== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"409-Longest-Palindrome\"><a href=\"#409-Longest-Palindrome\" class=\"headerlink\" title=\"409-Longest Palindrome\"></a><a href=\"https://leetcode.com/problems/longest-palindrome\" target=\"_blank\" rel=\"noopener\">409-Longest Palindrome</a></h3><h4 id=\"方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况\"><a href=\"#方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况\" class=\"headerlink\" title=\"方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况\"></a>方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> even = <span class=\"number\">0</span>,odd = <span class=\"number\">0</span>,arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = s[i].charCodeAt() - <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[c] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr[c]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[c]%<span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            even += <span class=\"number\">2</span>;</span><br><span class=\"line\">            odd--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            odd++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> even + (odd===<span class=\"number\">0</span>? <span class=\"number\">0</span> :<span class=\"number\">1</span>); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"541-Reverse-String-II\"><a href=\"#541-Reverse-String-II\" class=\"headerlink\" title=\"541-Reverse String II\"></a><a href=\"https://leetcode.com/problems/reverse-string-ii\" target=\"_blank\" rel=\"noopener\">541-Reverse String II</a></h3><p>暂无</p>\n<h3 id=\"401-Binary-Watch\"><a href=\"#401-Binary-Watch\" class=\"headerlink\" title=\"401-Binary Watch\"></a><a href=\"https://leetcode.com/problems/binary-watch\" target=\"_blank\" rel=\"noopener\">401-Binary Watch</a></h3><h4 id=\"方法一：从结果出发，满足条件时-push-进数组\"><a href=\"#方法一：从结果出发，满足条件时-push-进数组\" class=\"headerlink\" title=\"方法一：从结果出发，满足条件时 push 进数组\"></a>方法一：从结果出发，满足条件时 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readBinaryWatch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> h=<span class=\"number\">0</span>;h&lt;<span class=\"number\">12</span>;h++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m=<span class=\"number\">0</span>;m&lt;<span class=\"number\">60</span>;m++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((h.toString(<span class=\"number\">2</span>) + m.toString(<span class=\"number\">2</span>)).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">\"\"</span>).length == num)&#123;</span><br><span class=\"line\">                m = m&gt;<span class=\"number\">9</span> ? m : <span class=\"string\">\"0\"</span> + m;</span><br><span class=\"line\">                item = h + <span class=\"string\">\":\"</span> + m;</span><br><span class=\"line\">                result.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"217-Contains-Duplicate\"><a href=\"#217-Contains-Duplicate\" class=\"headerlink\" title=\"217-Contains Duplicate\"></a><a href=\"https://leetcode.com/problems/contains-duplicate\" target=\"_blank\" rel=\"noopener\">217-Contains Duplicate</a></h3><h4 id=\"方法一：哈希表\"><a href=\"#方法一：哈希表\" class=\"headerlink\" title=\"方法一：哈希表\"></a>方法一：哈希表</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length===<span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opt = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[nums[i]])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            opt[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先将数组排序，然后只需要比较相邻元素\"><a href=\"#方法二：先将数组排序，然后只需要比较相邻元素\" class=\"headerlink\" title=\"方法二：先将数组排序，然后只需要比较相邻元素\"></a>方法二：先将数组排序，然后只需要比较相邻元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> ind = <span class=\"number\">1</span>; ind &lt; nums.length; ind++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[ind] == nums[ind - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-Roman-to-Integer\"><a href=\"#13-Roman-to-Integer\" class=\"headerlink\" title=\"13-Roman to Integer\"></a><a href=\"https://leetcode.com/problems/roman-to-integer\" target=\"_blank\" rel=\"noopener\">13-Roman to Integer</a></h3><h4 id=\"方法一：知道罗马数字的规则之后就好写了\"><a href=\"#方法一：知道罗马数字的规则之后就好写了\" class=\"headerlink\" title=\"方法一：知道罗马数字的规则之后就好写了\"></a>方法一：知道罗马数字的规则之后就好写了</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opt = &#123;<span class=\"string\">'M'</span>: <span class=\"number\">1000</span>,<span class=\"string\">'D'</span>: <span class=\"number\">500</span> ,<span class=\"string\">'C'</span>: <span class=\"number\">100</span>,<span class=\"string\">'L'</span>: <span class=\"number\">50</span>,<span class=\"string\">'X'</span>: <span class=\"number\">10</span>,<span class=\"string\">'V'</span>: <span class=\"number\">5</span>,<span class=\"string\">'I'</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        z = <span class=\"number\">0</span>,</span><br><span class=\"line\">        n=s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[s[i]] &lt; opt[s[i+<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">            z -= opt[s[i]];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            z += opt[s[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> z + opt[s[n<span class=\"number\">-1</span>]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"206-Reverse-Linked-List\"><a href=\"#206-Reverse-Linked-List\" class=\"headerlink\" title=\"206-Reverse Linked List\"></a><a href=\"https://leetcode.com/problems/reverse-linked-list\" target=\"_blank\" rel=\"noopener\">206-Reverse Linked List</a></h3><h4 id=\"方法一：反转的条件就是-head-next-next-head-和-head-next-null\"><a href=\"#方法一：反转的条件就是-head-next-next-head-和-head-next-null\" class=\"headerlink\" title=\"方法一：反转的条件就是 head.next.next = head 和 head.next = null\"></a>方法一：反转的条件就是 head.next.next = head 和 head.next = null</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head || !(head.next)) &#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = reverseList(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"350-Intersection-of-Two-Arrays-II\"><a href=\"#350-Intersection-of-Two-Arrays-II\" class=\"headerlink\" title=\"350-Intersection of Two Arrays II\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-arrays-ii\" target=\"_blank\" rel=\"noopener\">350-Intersection of Two Arrays II</a></h3><h4 id=\"方法一：先对-nums1-遍历，生成哈希表，然后对-nums2-遍历\"><a href=\"#方法一：先对-nums1-遍历，生成哈希表，然后对-nums2-遍历\" class=\"headerlink\" title=\"方法一：先对 nums1 遍历，生成哈希表，然后对 nums2 遍历\"></a>方法一：先对 nums1 遍历，生成哈希表，然后对 nums2 遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [],result=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums1.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> numi = arr[nums1[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numi)&#123;</span><br><span class=\"line\">            arr[nums1[i]]++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr[nums1[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,m=nums2.length;j&lt;m;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> numj = arr[nums2[j]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numj)&#123;</span><br><span class=\"line\">            result.push(nums2[j]);</span><br><span class=\"line\">            arr[nums2[j]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先进行排序，然后用两个指针遍历\"><a href=\"#方法二：先进行排序，然后用两个指针遍历\" class=\"headerlink\" title=\"方法二：先进行排序，然后用两个指针遍历\"></a>方法二：先进行排序，然后用两个指针遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    nums2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n1 = nums1.length, n2 = nums2.length,i1 = <span class=\"number\">0</span>, i2 = <span class=\"number\">0</span>,res = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i1 &lt; n1 &amp;&amp; i2 &lt; n2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums1[i1] == nums2[i2]) &#123;</span><br><span class=\"line\">            res.push(nums1[i1]);</span><br><span class=\"line\">            i1++;</span><br><span class=\"line\">            i2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[i1] &gt; nums2[i2])&#123;</span><br><span class=\"line\">            i2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            i1++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"268-Missing-Number\"><a href=\"#268-Missing-Number\" class=\"headerlink\" title=\"268-Missing Number\"></a><a href=\"https://leetcode.com/problems/missing-number\" target=\"_blank\" rel=\"noopener\">268-Missing Number</a></h3><h4 id=\"方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断\"><a href=\"#方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断\" class=\"headerlink\" title=\"方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断\"></a>方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sort = nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">    &#125;),n=nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sort[i] != i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：位运算，利用异或\"><a href=\"#方法二：位运算，利用异或\" class=\"headerlink\" title=\"方法二：位运算，利用异或\"></a>方法二：位运算，利用异或</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xor = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">\t\txor = xor ^ i ^ nums[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> xor ^ i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字\"><a href=\"#方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字\" class=\"headerlink\" title=\"方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字\"></a>方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.length,sum = (<span class=\"number\">0</span>+len)*(len+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;len; i++)&#123;</span><br><span class=\"line\">        sum-=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：二分查找\"><a href=\"#方法四：二分查找\" class=\"headerlink\" title=\"方法四：二分查找\"></a>方法四：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>, right = nums.length, mid= <span class=\"built_in\">Math</span>.floor((left + right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((left + right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid]&gt;mid) &#123;right = mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"447-Number-of-Boomerangs\"><a href=\"#447-Number-of-Boomerangs\" class=\"headerlink\" title=\"447-Number of Boomerangs\"></a><a href=\"https://leetcode.com/problems/number-of-boomerangs\" target=\"_blank\" rel=\"noopener\">447-Number of Boomerangs</a></h3><p>暂无</p>\n<h3 id=\"543-Diameter-of-Binary-Tree\"><a href=\"#543-Diameter-of-Binary-Tree\" class=\"headerlink\" title=\"543-Diameter of Binary Tree\"></a><a href=\"https://leetcode.com/problems/diameter-of-binary-tree\" target=\"_blank\" rel=\"noopener\">543-Diameter of Binary Tree</a></h3><p>暂无</p>\n<h3 id=\"415-Add-Strings\"><a href=\"#415-Add-Strings\" class=\"headerlink\" title=\"415-Add Strings\"></a><a href=\"https://leetcode.com/problems/add-strings\" target=\"_blank\" rel=\"noopener\">415-Add Strings</a></h3><h4 id=\"方法一：遍历，用一个变量记录当前位进位情况\"><a href=\"#方法一：遍历，用一个变量记录当前位进位情况\" class=\"headerlink\" title=\"方法一：遍历，用一个变量记录当前位进位情况\"></a>方法一：遍历，用一个变量记录当前位进位情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; num1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; num2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> carry=<span class=\"number\">0</span>,str = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=num1.length<span class=\"number\">-1</span>,j=num2.length<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>||j&gt;=<span class=\"number\">0</span>||carry==<span class=\"number\">1</span>;i--,j--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n1 = num1[i] ? num1[i] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            n2 = num2[j] ? num2[j] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = (n1 + n2 + carry)%<span class=\"number\">10</span>;</span><br><span class=\"line\">            carry = <span class=\"built_in\">Math</span>.floor((n1 + n2 + carry)/<span class=\"number\">10</span>);</span><br><span class=\"line\">        str = sum + str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"108-Convert-Sorted-Array-to-Binary-Search-Tree\"><a href=\"#108-Convert-Sorted-Array-to-Binary-Search-Tree\" class=\"headerlink\" title=\"108-Convert Sorted Array to Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree\" target=\"_blank\" rel=\"noopener\">108-Convert Sorted Array to Binary Search Tree</a></h3><p>暂无</p>\n<h3 id=\"405-Convert-a-Number-to-Hexadecimal\"><a href=\"#405-Convert-a-Number-to-Hexadecimal\" class=\"headerlink\" title=\"405-Convert a Number to Hexadecimal\"></a><a href=\"https://leetcode.com/problems/convert-a-number-to-hexadecimal\" target=\"_blank\" rel=\"noopener\">405-Convert a Number to Hexadecimal</a></h3><p>暂无</p>\n","raw":null,"categories":[{"name":"algorithm","path":"api/categories/algorithm.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"leetcode","path":"api/tags/leetcode.json"}]},{"title":"十大排序算法的Javascript实现","slug":"十大排序算法的Javascript实现","date":"2017-03-18T15:13:55.000Z","updated":"2019-02-27T06:40:32.630Z","comments":true,"path":"api/articles/十大排序算法的Javascript实现.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_220.png","content":"<p>我是在微信公众号-前端大全上面看到这篇文章的，大概过去半年时间了，之前看过好多关于排序算法的 JS 版，但是这篇文章是内容最全的，而且还有动图演示，对于算法“白痴”来说理解起来会更容易，所以强烈推荐这篇文章；前端开发者也可以关注一下这个微信公众号，基本上每天都会更新，而且有很多原创的文章，其中不乏面试经验以及关于 JS 和 CSS 的技巧规范以及前端未来发展趋势等等，是一个很好的前端学习工具。 原作者是伯乐在线专栏作者，而十大排序算法的 JS 代码在作者的 github 上也有一个库，想看源码的可以<a href=\"https://github.com/damonare/Sorts\" target=\"_blank\" rel=\"noopener\">戳这里</a>，配合文章会加深对这些排序算法的理解</p>\n<h2 id=\"排序算法说明\"><a href=\"#排序算法说明\" class=\"headerlink\" title=\"排序算法说明\"></a>排序算法说明</h2><h3 id=\"对于评述算法优劣术语的说明\"><a href=\"#对于评述算法优劣术语的说明\" class=\"headerlink\" title=\"对于评述算法优劣术语的说明\"></a>对于评述算法优劣术语的说明</h3><p><strong>稳定</strong>：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面；<br><strong>不稳定</strong>：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面；<br><strong>内排序</strong>：所有排序操作都在内存中完成；<br><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；<br><strong>时间复杂度</strong>: 一个算法执行所耗费的时间。<br><strong>空间复杂度</strong>: 运行完一个程序所需内存的大小。</p>\n<h3 id=\"排序算法图片总结\"><a href=\"#排序算法图片总结\" class=\"headerlink\" title=\"排序算法图片总结\"></a>排序算法图片总结</h3><div align=\"center\"><img src=\"/images/hexo_post_220.png\" alt=\"\" width=\"550\"></div>\n\n<p>图片名词解释：</p>\n<ul>\n<li>n：数据规模</li>\n<li>k：“桶”的个数</li>\n<li>In-place：占用常熟内存，不占用额外内存</li>\n<li>Out-place：占用额外内存</li>\n</ul>\n<h3 id=\"排序分类\"><a href=\"#排序分类\" class=\"headerlink\" title=\"排序分类\"></a>排序分类</h3><div align=\"center\"><img src=\"/images/hexo_post_139.png\" alt=\"\" width=\"450\"></div>\n\n<h2 id=\"1-冒泡排序（bubble-Sort）\"><a href=\"#1-冒泡排序（bubble-Sort）\" class=\"headerlink\" title=\"1. 冒泡排序（bubble Sort）\"></a>1. 冒泡排序（bubble Sort）</h2><h3 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h3 id=\"算法具体描述\"><a href=\"#算法具体描述\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>重复步骤 1~3，直到排序完成。</li>\n</ol>\n<h3 id=\"动画演示\"><a href=\"#动画演示\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_90.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码\"><a href=\"#Javascript-源代码\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">   参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\">   说明：该方法为原始算法*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">//相邻元素两两对比</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j+<span class=\"number\">1</span>];        <span class=\"comment\">//元素交换</span></span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort(arr1));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：该方法为改进算法（设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。）*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort2</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'改进后冒泡排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = arr.length<span class=\"number\">-1</span>;  <span class=\"comment\">//初始时,最后位置保持不变</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( i&gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pos= <span class=\"number\">0</span>; <span class=\"comment\">//每趟开始时,无记录交换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j= <span class=\"number\">0</span>; j&lt; i; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j]&gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                pos= j; <span class=\"comment\">//记录交换的位置</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> tmp = arr[j]; arr[j]=arr[j+<span class=\"number\">1</span>];arr[j+<span class=\"number\">1</span>]=tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        i= pos; <span class=\"comment\">//为下一趟排序作准备</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'改进后冒泡排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort2(arr2));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：该方法为改进算法（传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。）*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort3</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> high= arr.length<span class=\"number\">-1</span>; <span class=\"comment\">//设置变量的初始值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp,j;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'2.改进后冒泡排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j= low; j&lt; high; ++j) <span class=\"comment\">//正向冒泡,找到最大者</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j]&gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                tmp = arr[j]; arr[j]=arr[j+<span class=\"number\">1</span>];arr[j+<span class=\"number\">1</span>]=tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        --high;                 <span class=\"comment\">//修改high值, 前移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=high; j&gt;low; --j) <span class=\"comment\">//反向冒泡,找到最小者</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j]&lt;arr[j<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                tmp = arr[j]; arr[j]=arr[j<span class=\"number\">-1</span>];arr[j<span class=\"number\">-1</span>]=tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++low;                  <span class=\"comment\">//修改low值,后移一位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'2.改进后冒泡排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort3(arr3));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析\"><a href=\"#算法复杂度分析\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n)=O(n) =&gt; 当输入的数据已经是正序时</li>\n<li>最差情况：T(n)=O(n2) =&gt; 当输入的数据是反序时</li>\n<li>平均情况：T(n)=O(n2)</li>\n</ul>\n<h2 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2. 选择排序\"></a>2. 选择排序</h2><h3 id=\"算法简介-1\"><a href=\"#算法简介-1\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>选择排序（Selection-sort）是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<h3 id=\"算法具体描述-1\"><a href=\"#算法具体描述-1\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>初始状态：无序区为 R[1..n]，有序区为空；</li>\n<li>第 i 趟排序 (i=1,2,3…n-1) 开始时，当前有序区和无序区分别为 R[1..i-1] 和 R(i..n）。该趟排序从当前无序区中选出关键字最小的记录 R[k]，将它与无序区的第 1 个记录 R 交换，使 R[1..i] 和 R[i+1..n) 分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；</li>\n<li>n-1 趟结束，数组有序化了。</li>\n</ol>\n<h3 id=\"动画演示-1\"><a href=\"#动画演示-1\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_219.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-1\"><a href=\"#Javascript-源代码-1\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：选择排序</span></span><br><span class=\"line\"><span class=\"comment\">   参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\">   说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'选择排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">//寻找最小的数</span></span><br><span class=\"line\">                minIndex = j;                 <span class=\"comment\">//将最小数的索引保存</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'选择排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(selectionSort(arr));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度排序\"><a href=\"#算法复杂度排序\" class=\"headerlink\" title=\"算法复杂度排序\"></a>算法复杂度排序</h3><ul>\n<li>最佳情况：T(n)=O(n2)</li>\n<li>最差情况：T(n)=O(n2)</li>\n<li>平均情况：T(n)=O(n2)</li>\n</ul>\n<h2 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3. 插入排序\"></a>3. 插入排序</h2><h3 id=\"算法简介-2\"><a href=\"#算法简介-2\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1) 的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<h3 id=\"算法具体描述-2\"><a href=\"#算法具体描述-2\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤 2~5。</li>\n</ol>\n<h3 id=\"动画演示-2\"><a href=\"#动画演示-2\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_110.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-2\"><a href=\"#Javascript-源代码-2\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：插入排序</span></span><br><span class=\"line\"><span class=\"comment\">   参数：array-排序数组</span></span><br><span class=\"line\"><span class=\"comment\">   说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(array).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.time(<span class=\"string\">'插入排序耗时：'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> key = array[i];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; array[j] &gt; key) &#123;</span><br><span class=\"line\">                array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            array[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'插入排序耗时：'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'array is not an Array!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(arr1));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：array-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：改进后的算法（查找插入位置时使用二分查找的方式）*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binaryInsertionSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(array).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.time(<span class=\"string\">'二分插入排序耗时：'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> key = array[i], left = <span class=\"number\">0</span>, right = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> middle = <span class=\"built_in\">parseInt</span>((left + right) / <span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key &lt; array[middle]) &#123;</span><br><span class=\"line\">                    right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>; j &gt;= left; j--) &#123;</span><br><span class=\"line\">                array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            array[left] = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'二分插入排序耗时：'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'array is not an Array!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binaryInsertionSort(arr2));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-1\"><a href=\"#算法复杂度分析-1\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n)=O(n) =&gt; 输入数组按升序排列</li>\n<li>最差情况：T(n)=O(n2) =&gt; 输入数组按降序排列</li>\n<li>平均情况：T(n)=O(n2)</li>\n</ul>\n<h2 id=\"4-希尔排序\"><a href=\"#4-希尔排序\" class=\"headerlink\" title=\"4. 希尔排序\"></a>4. 希尔排序</h2><h3 id=\"算法简介-3\"><a href=\"#算法简介-3\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版》的合著者 Robert Sedgewick 提出的。</p>\n<h3 id=\"算法具体描述-3\"><a href=\"#算法具体描述-3\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>选择一个增量序列 t1，t2，…，tk，其中 ti&gt;tj，tk=1；</li>\n<li>按增量序列个数 k，对序列进行 k 趟排序；</li>\n<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>\n</ol>\n<h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><div align=\"center\"><img src=\"/images/hexo_post_225.jpeg\" alt=\"\" width=\"550\"></div>\n\n<h3 id=\"Javascript-源代码-3\"><a href=\"#Javascript-源代码-3\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：希尔排序</span></span><br><span class=\"line\"><span class=\"comment\">   参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\">   说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        temp,</span><br><span class=\"line\">        gap = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'希尔排序耗时:'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gap &lt; len/<span class=\"number\">5</span>) &#123;          <span class=\"comment\">//动态定义间隔序列</span></span><br><span class=\"line\">        gap =gap*<span class=\"number\">5</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (gap; gap &gt; <span class=\"number\">0</span>; gap = <span class=\"built_in\">Math</span>.floor(gap/<span class=\"number\">5</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i-gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</span><br><span class=\"line\">                arr[j+gap] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j+gap] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'希尔排序耗时:'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(shellSort(arr));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-2\"><a href=\"#算法复杂度分析-2\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n) = O(nlog2n)</li>\n<li>最差情况：T(n) = O(nlog2n)</li>\n<li>平均情况：T(n) = O(nlogn)</li>\n</ul>\n<h2 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a>5. 归并排序</h2><h3 id=\"算法简介-4\"><a href=\"#算法简介-4\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为 2-路归并。</p>\n<h3 id=\"算法具体描述-4\"><a href=\"#算法具体描述-4\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>把长度为 n 的输入序列分成两个长度为 n/2 的子序列；</li>\n<li>对这两个子序列分别采用归并排序；</li>\n<li>将两个排序好的子序列合并成一个最终的排序序列。</li>\n</ol>\n<h3 id=\"动画演示-3\"><a href=\"#动画演示-3\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_119.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-4\"><a href=\"#Javascript-源代码-4\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：归并排序</span></span><br><span class=\"line\"><span class=\"comment\">   参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\">   说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>) </span>&#123;  <span class=\"comment\">//采用自上而下的递归方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>),</span><br><span class=\"line\">        left = arr.slice(<span class=\"number\">0</span>, middle),</span><br><span class=\"line\">        right = arr.slice(middle);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left, right</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'归并排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length)</span><br><span class=\"line\">        result.push(left.shift());</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right.length)</span><br><span class=\"line\">        result.push(right.shift());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'归并排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">3</span>,<span class=\"number\">44</span>,<span class=\"number\">38</span>,<span class=\"number\">5</span>,<span class=\"number\">47</span>,<span class=\"number\">15</span>,<span class=\"number\">36</span>,<span class=\"number\">26</span>,<span class=\"number\">27</span>,<span class=\"number\">2</span>,<span class=\"number\">46</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">50</span>,<span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mergeSort(arr));</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-3\"><a href=\"#算法复杂度分析-3\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n)=O(n)</li>\n<li>最差情况：T(n)=O(nlogn)</li>\n<li>平均情况：T(n)=O(nlogn)</li>\n</ul>\n<h2 id=\"6-快速排序\"><a href=\"#6-快速排序\" class=\"headerlink\" title=\"6. 快速排序\"></a>6. 快速排序</h2><h3 id=\"算法简介-5\"><a href=\"#算法简介-5\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>\n<h3 id=\"算法具体描述-5\"><a href=\"#算法具体描述-5\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>\n</ol>\n<h3 id=\"动画演示-4\"><a href=\"#动画演示-4\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_217.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-5\"><a href=\"#Javascript-源代码-5\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><h4 id=\"方法一-2\"><a href=\"#方法一-2\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：快速排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：方法一*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">array, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'1.快速排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(array).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span> &amp;&amp; <span class=\"keyword\">typeof</span> left === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"keyword\">typeof</span> right === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = array[right],</span><br><span class=\"line\">                i = left - <span class=\"number\">1</span>,</span><br><span class=\"line\">                temp;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = left; j &lt;= right; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &lt;= x) &#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                    temp = array[i];</span><br><span class=\"line\">                    array[i] = array[j];</span><br><span class=\"line\">                    array[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            quickSort(array, left, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            quickSort(array, i - <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'1.快速排序耗时'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'array is not an Array or left or right is not a number!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-2\"><a href=\"#方法二-2\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：快速排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：方法二*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort2</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'2.快速排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'2.快速排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort2(left).concat([pivot], quickSort2(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort2(arr));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-4\"><a href=\"#算法复杂度分析-4\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n)=O(nlogn)</li>\n<li>最差情况：T(n)=O(n2)</li>\n<li>平均情况：T(n)=O(nlogn)</li>\n</ul>\n<h2 id=\"7-堆排序\"><a href=\"#7-堆排序\" class=\"headerlink\" title=\"7. 堆排序\"></a>7. 堆排序</h2><h3 id=\"算法简介-6\"><a href=\"#算法简介-6\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>\n<h3 id=\"算法具体描述-6\"><a href=\"#算法具体描述-6\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>将初始待排序关键字序列 (R1,R2….Rn) 构建成大顶堆，此堆为初始的无序区；</li>\n<li>将堆顶元素 R[1] 与最后一个元素 R[n] 交换，此时得到新的无序区 (R1,R2,……Rn-1) 和新的有序区 (Rn),且满足 R[1,2…n-1]&lt;=R[n]；</li>\n<li>由于交换后新的堆顶 R[1] 可能违反堆的性质，因此需要对当前无序区 R1,R2,……Rn-1) 调整为新堆，然后再次将 R[1] 与无序区最后一个元素交换，得到新的无序区 (R1,R2….Rn-2) 和新的有序区 (Rn-1,Rn)。不断重复此过程直到有序区的元素个数为 n-1，则整个排序过程完成。</li>\n</ol>\n<h3 id=\"动画演示-5\"><a href=\"#动画演示-5\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_106.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-6\"><a href=\"#Javascript-源代码-6\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：堆排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：array-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'堆排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(array).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//建堆</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> heapSize = array.length, temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"built_in\">Math</span>.floor(heapSize / <span class=\"number\">2</span>) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            heaping(array, i, heapSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//堆排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = heapSize - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">1</span>; j--) &#123;</span><br><span class=\"line\">            temp = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">            array[<span class=\"number\">0</span>] = array[j];</span><br><span class=\"line\">            array[j] = temp;</span><br><span class=\"line\">            heaping(array, <span class=\"number\">0</span>, --heapSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'堆排序耗时'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'array is not an Array!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法说明：维护堆的性质</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：array-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> x-数组下标</span></span><br><span class=\"line\"><span class=\"comment\"> len-堆大小</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heaping</span>(<span class=\"params\">arr, x, len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(arr).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span> &amp;&amp; <span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> l = <span class=\"number\">2</span> * x + <span class=\"number\">1</span>,</span><br><span class=\"line\">            r = <span class=\"number\">2</span> * x + <span class=\"number\">2</span>,</span><br><span class=\"line\">            largest = x,</span><br><span class=\"line\">            temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt; len &amp;&amp; arr[l] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &lt; len &amp;&amp; arr[r] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != x) &#123;</span><br><span class=\"line\">            temp = arr[x];</span><br><span class=\"line\">            arr[x] = arr[largest];</span><br><span class=\"line\">            arr[largest] = temp;</span><br><span class=\"line\">            heaping(arr, largest, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'arr is not an Array or x is not a number!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(heapSort(arr));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-5\"><a href=\"#算法复杂度分析-5\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n)=O(nlogn)</li>\n<li>最差情况：T(n)=O(nlogn)</li>\n<li>平均情况：T(n)=O(nlogn)</li>\n</ul>\n<h2 id=\"8-计数排序\"><a href=\"#8-计数排序\" class=\"headerlink\" title=\"8. 计数排序\"></a>8. 计数排序</h2><h3 id=\"算法简介-7\"><a href=\"#算法简介-7\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置。它只能对整数进行排序。</p>\n<h3 id=\"算法具体描述-7\"><a href=\"#算法具体描述-7\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>找出待排序的数组中最大和最小的元素；</li>\n<li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li>\n<li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i) 项，每放一个元素就将 C(i) 减去 1。</li>\n</ol>\n<h3 id=\"动画演示-6\"><a href=\"#动画演示-6\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_95.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-7\"><a href=\"#Javascript-源代码-7\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：计数排序</span></span><br><span class=\"line\"><span class=\"comment\">   参数：array-排序数组</span></span><br><span class=\"line\"><span class=\"comment\">   说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = array.length,</span><br><span class=\"line\">        B = [],</span><br><span class=\"line\">        C = [],</span><br><span class=\"line\">        min = array[<span class=\"number\">0</span>],</span><br><span class=\"line\">        max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'计数排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">        min= min&lt;=array[i] ? min:array[i];</span><br><span class=\"line\">        max = max &gt;=array[i] ? max : array[i];</span><br><span class=\"line\">        C[array[i]] = C[array[i]] ? C[array[i]] +<span class=\"number\">1</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = min; j&lt; max;j++)&#123;</span><br><span class=\"line\">        C[j+<span class=\"number\">1</span>] = (C[j+<span class=\"number\">1</span>] || <span class=\"number\">0</span>) + (C[j] || <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = len <span class=\"number\">-1</span> ;k &gt;=<span class=\"number\">0</span>; k--)&#123;</span><br><span class=\"line\">        B[C[array[k]] - <span class=\"number\">1</span>] = array[k];</span><br><span class=\"line\">        C[array[k]] --;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'计数排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(countingSort(arr));<span class=\"comment\">//[1,1,2,2,2,2,2,2,2,2,3,3,4,4,6,7,7,8,8,9,9]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-6\"><a href=\"#算法复杂度分析-6\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组 C 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>\n<ul>\n<li>最佳情况：T(n)=O(n+k)</li>\n<li>最差情况：T(n)=O(n+k)</li>\n<li>平均情况：T(n)=O(n+k)</li>\n</ul>\n<h2 id=\"9-桶排序\"><a href=\"#9-桶排序\" class=\"headerlink\" title=\"9. 桶排序\"></a>9. 桶排序</h2><h3 id=\"算法简介-8\"><a href=\"#算法简介-8\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>桶排序（Bucket sort）的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。</p>\n<h3 id=\"算法具体描述-8\"><a href=\"#算法具体描述-8\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>设置一个定量的数组当作空桶；</li>\n<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>\n<li>对每个不是空的桶进行排序；</li>\n<li>从不是空的桶里把排好序的数据拼接起来。</li>\n</ol>\n<h3 id=\"图示-1\"><a href=\"#图示-1\" class=\"headerlink\" title=\"图示\"></a>图示</h3><div align=\"center\"><img src=\"/images/hexo_post_318.jpeg\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-8\"><a href=\"#Javascript-源代码-8\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：桶排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> num-桶的数量</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：无*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bucketSort</span>(<span class=\"params\">array, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = array.length,</span><br><span class=\"line\">        buckets = [],</span><br><span class=\"line\">        result = [],</span><br><span class=\"line\">        min = array[<span class=\"number\">0</span>],</span><br><span class=\"line\">        max = array[<span class=\"number\">0</span>],</span><br><span class=\"line\">        regex = <span class=\"string\">'/^[1-9]+[0-9]*$/'</span>,</span><br><span class=\"line\">        space,</span><br><span class=\"line\">        n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    num = num || ((num &gt; <span class=\"number\">1</span> &amp;&amp; regex.test(num)) ? num : <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'桶排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        min = min &lt;= array[i] ? min : array[i];</span><br><span class=\"line\">        max = max &gt;= array[i] ? max : array[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    space = (max - min + <span class=\"number\">1</span>) / num;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"built_in\">Math</span>.floor((array[j] - min) / space);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buckets[index]) &#123; <span class=\"comment\">//非空桶，插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> k = buckets[index].length - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; buckets[index][k] &gt; array[j]) &#123;</span><br><span class=\"line\">                buckets[index][k + <span class=\"number\">1</span>] = buckets[index][k];</span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            buckets[index][k + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//空桶，初始化</span></span><br><span class=\"line\">            buckets[index] = [];</span><br><span class=\"line\">            buckets[index].push(array[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; num) &#123;</span><br><span class=\"line\">        result = result.concat(buckets[n]);</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'桶排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bucketSort(arr));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-7\"><a href=\"#算法复杂度分析-7\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><p>桶排序最好情况下使用线性时间 O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为 O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p>\n<ul>\n<li>最佳情况：T(n)=O(n+k)</li>\n<li>最差情况：T(n)=O(n+k)</li>\n<li>平均情况：T(n)=O(n2)</li>\n</ul>\n<h2 id=\"10-基数排序\"><a href=\"#10-基数排序\" class=\"headerlink\" title=\"10. 基数排序\"></a>10. 基数排序</h2><h3 id=\"算法简介-9\"><a href=\"#算法简介-9\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p>\n<h3 id=\"算法具体描述-9\"><a href=\"#算法具体描述-9\" class=\"headerlink\" title=\"算法具体描述\"></a>算法具体描述</h3><ol>\n<li>取得数组中的最大数，并取得位数；</li>\n<li>arr 为原始数组，从最低位开始取每个位组成 radix 数组；</li>\n<li>对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；</li>\n</ol>\n<h3 id=\"动画演示-7\"><a href=\"#动画演示-7\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h3><div align=\"center\"><img src=\"/images/hexo_post_218.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Javascript-源代码-9\"><a href=\"#Javascript-源代码-9\" class=\"headerlink\" title=\"Javascript 源代码\"></a>Javascript 源代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 方法说明：基数排序</span></span><br><span class=\"line\"><span class=\"comment\"> 参数：arr-排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> maxDigit-最大位数</span></span><br><span class=\"line\"><span class=\"comment\"> 说明：基数排序适用于：</span></span><br><span class=\"line\"><span class=\"comment\"> （1）数据范围较小，建议小于1000</span></span><br><span class=\"line\"><span class=\"comment\"> （2）每个数值都要大于等于0*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radixSort</span>(<span class=\"params\">arr, maxDigit</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mod = <span class=\"number\">10</span>,</span><br><span class=\"line\">        dev = <span class=\"number\">1</span>,</span><br><span class=\"line\">        counter = [];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'基数排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; maxDigit; i++, dev *= <span class=\"number\">10</span>, mod *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bucket = <span class=\"built_in\">parseInt</span>((arr[j] % mod) / dev);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (counter[bucket] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                counter[bucket] = [];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            counter[bucket].push(arr[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; counter.length; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter[k] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((value = counter[k].shift()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                arr[pos++] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'基数排序耗时'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(radixSort(arr));<span class=\"comment\">//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算法复杂度分析-8\"><a href=\"#算法复杂度分析-8\" class=\"headerlink\" title=\"算法复杂度分析\"></a>算法复杂度分析</h3><ul>\n<li>最佳情况：T(n)=O(n*k)</li>\n<li>最差情况：T(n)=O(n*k)</li>\n<li>平均情况：T(n)=O(n*k)</li>\n</ul>\n","raw":null,"categories":[{"name":"algorithm","path":"api/categories/algorithm.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"排序","path":"api/tags/排序.json"},{"name":"算法","path":"api/tags/算法.json"}]},{"title":"Leetcode的JS实现——Easy篇（下）","slug":"Leetcode的JS实现——Easy篇（下）","date":"2017-03-26T04:40:52.000Z","updated":"2019-02-27T06:40:32.622Z","comments":true,"path":"api/articles/Leetcode的JS实现——Easy篇（下）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这是 Leetcode 的 JS 实现——Easy 篇的后半部分，前半部分可以<a href=\"/20170326/js-implementation-of-leetcode-easy-part1.html\">点击这里</a>查看</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Leetcode 地址：<a href=\"https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目</a></p>\n<p>排序方式：按照\b本难度中题目的 accepted 统计</p>\n<h2 id=\"JS-代码实现\"><a href=\"#JS-代码实现\" class=\"headerlink\" title=\"JS 代码实现\"></a>JS 代码实现</h2><h3 id=\"121-Best-Time-to-Buy-and-Sell-Stock\"><a href=\"#121-Best-Time-to-Buy-and-Sell-Stock\" class=\"headerlink\" title=\"121-Best Time to Buy and Sell Stock\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description\" target=\"_blank\" rel=\"noopener\">121-Best Time to Buy and Sell Stock</a></h3><h4 id=\"方法一：动态规划\"><a href=\"#方法一：动态规划\" class=\"headerlink\" title=\"方法一：动态规划\"></a>方法一：动态规划</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxPro = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minPrice = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ,n = prices.length; i&lt;n;i++)&#123;</span><br><span class=\"line\">        minPrice = <span class=\"built_in\">Math</span>.min(minPrice, prices[i]);</span><br><span class=\"line\">        maxPro = <span class=\"built_in\">Math</span>.max(maxPro, prices[i] - minPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxPro;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：Kadane’s-Algorithm\"><a href=\"#方法二：Kadane’s-Algorithm\" class=\"headerlink\" title=\"方法二：Kadane’s Algorithm\"></a>方法二：Kadane’s Algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = functon(pris)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxCur = <span class=\"number\">0</span>, maxSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>,n = prices.length;i&lt;n; i++) &#123;</span><br><span class=\"line\">        maxCur = <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, maxCur += prices[i] - prices[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">        maxSoFar = <span class=\"built_in\">Math</span>.max(maxCur, maxSoFar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSoFar;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"202-Happy-Number\"><a href=\"#202-Happy-Number\" class=\"headerlink\" title=\"202-Happy Number\"></a><a href=\"https://leetcode.com/problems/happy-number/#/description\" target=\"_blank\" rel=\"noopener\">202-Happy Number</a></h3><h4 id=\"方法一：Floyd-Cycle-detection-algorithm\"><a href=\"#方法一：Floyd-Cycle-detection-algorithm\" class=\"headerlink\" title=\"方法一：Floyd Cycle detection algorithm\"></a>方法一：Floyd Cycle detection algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> slow, fast;</span><br><span class=\"line\">    slow = fast = n;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        slow = digitSquareSum(slow);</span><br><span class=\"line\">        fast = digitSquareSum(fast);</span><br><span class=\"line\">        fast = digitSquareSum(fast);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(slow != fast);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> digitSquareSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：O-1-space，如果快-慢，证明陷入了死循环\"><a href=\"#方法二：O-1-space，如果快-慢，证明陷入了死循环\" class=\"headerlink\" title=\"方法二：O(1)space，如果快 = 慢，证明陷入了死循环\"></a>方法二：O(1)space，如果快 = 慢，证明陷入了死循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = n,y = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        x = cal(x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">        y = cal(cal(y));            </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==y) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\"><a href=\"#方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\" class=\"headerlink\" title=\"方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)\"></a>方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">            next+=(n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>); </span><br><span class=\"line\">            n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"326-Power-of-Three\"><a href=\"#326-Power-of-Three\" class=\"headerlink\" title=\"326-Power of Three\"></a><a href=\"https://leetcode.com/problems/power-of-three/#/description\" target=\"_blank\" rel=\"noopener\">326-Power of Three</a></h3><h4 id=\"方法一：递归\"><a href=\"#方法一：递归\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">3</span>===<span class=\"number\">0</span> &amp;&amp; isPowerOfThree(n/<span class=\"number\">3</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代\"><a href=\"#方法二：迭代\" class=\"headerlink\" title=\"方法二：迭代\"></a>方法二：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n%<span class=\"number\">3</span>===<span class=\"number\">0</span>) &#123;n /= <span class=\"number\">3</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：int-型数字中最大的-3-的幂为-1162261467\"><a href=\"#方法三：int-型数字中最大的-3-的幂为-1162261467\" class=\"headerlink\" title=\"方法三：int 型数字中最大的 3 的幂为 1162261467\"></a>方法三：int 型数字中最大的 3 的幂为 1162261467</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1162261467</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：对-n-取根值\"><a href=\"#方法四：对-n-取根值\" class=\"headerlink\" title=\"方法四：对 n 取根值\"></a>方法四：对 n 取根值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">Math</span>.log10(n) / <span class=\"built_in\">Math</span>.log10(<span class=\"number\">3</span>)) % <span class=\"number\">1</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：正则表达式\"><a href=\"#方法五：正则表达式\" class=\"headerlink\" title=\"方法五：正则表达式\"></a>方法五：正则表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^10*$\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(n.toString(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"327-Power-of-Two\"><a href=\"#327-Power-of-Two\" class=\"headerlink\" title=\"327-Power of Two\"></a><a href=\"https://leetcode.com/problems/power-of-two/#/description\" target=\"_blank\" rel=\"noopener\">327-Power of Two</a></h3><h4 id=\"方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\"><a href=\"#方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\" class=\"headerlink\" title=\"方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case\"></a>方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(n&amp;(n<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\"><a href=\"#方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\" class=\"headerlink\" title=\"方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目\"></a>方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; n.toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">''</span>).length == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：迭代\"><a href=\"#方法三：迭代\" class=\"headerlink\" title=\"方法三：迭代\"></a>方法三：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n%<span class=\"number\">2</span>===<span class=\"number\">0</span>) n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n==<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：递归\"><a href=\"#方法四：递归\" class=\"headerlink\" title=\"方法四：递归\"></a>方法四：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">2</span>===<span class=\"number\">0</span> &amp;&amp; isPowerOfTwo(n/<span class=\"number\">2</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：利用-int-型数字中最大的-2-的幂\"><a href=\"#方法五：利用-int-型数字中最大的-2-的幂\" class=\"headerlink\" title=\"方法五：利用 int 型数字中最大的 2 的幂\"></a>方法五：利用 int 型数字中最大的 2 的幂</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1073741824</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"83-Remove-Duplicates-from-Sorted-List\"><a href=\"#83-Remove-Duplicates-from-Sorted-List\" class=\"headerlink\" title=\"83-Remove Duplicates from Sorted List\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/#/description\" target=\"_blank\" rel=\"noopener\">83-Remove Duplicates from Sorted List</a></h3><h4 id=\"方法一：递归-1\"><a href=\"#方法一：递归-1\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span> || head.next === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    head.next = deleteDuplicates(head.next);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.val == head.next.val ? head.next : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"70-Climbing-Stairs\"><a href=\"#70-Climbing-Stairs\" class=\"headerlink\" title=\"70-Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/#/description\" target=\"_blank\" rel=\"noopener\">70-Climbing Stairs</a></h3><h4 id=\"方法一：斐波那契数列\"><a href=\"#方法一：斐波那契数列\" class=\"headerlink\" title=\"方法一：斐波那契数列\"></a>方法一：斐波那契数列</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> one_step_before = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> two_steps_before = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> all_ways = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">    \tall_ways = one_step_before + two_steps_before;</span><br><span class=\"line\">    \ttwo_steps_before = one_step_before;</span><br><span class=\"line\">        one_step_before = all_ways;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> all_ways;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\"><a href=\"#方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\" class=\"headerlink\" title=\"方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数\"></a>方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    a = b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">        a = (b += a) - a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53-Maximum Subarray\"></a><a href=\"https://leetcode.com/problems/maximum-subarray/#/description\" target=\"_blank\" rel=\"noopener\">53-Maximum Subarray</a></h3><h4 id=\"方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\"><a href=\"#方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\" class=\"headerlink\" title=\"方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.\"></a>方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans=nums[<span class=\"number\">0</span>],i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        sum+=nums[i];            </span><br><span class=\"line\">        ans=<span class=\"built_in\">Math</span>.max(sum,ans);</span><br><span class=\"line\">        sum=<span class=\"built_in\">Math</span>.max(sum,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：动态规划\"><a href=\"#方法二：动态规划\" class=\"headerlink\" title=\"方法二：动态规划\"></a>方法二：动态规划</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp = [];<span class=\"comment\">//dp[i] means the maximum subarray ending with nums[i];</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = nums[i] + (dp[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span> ? dp[i - <span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">        max = <span class=\"built_in\">Math</span>.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"437-Path-Sum-III\"><a href=\"#437-Path-Sum-III\" class=\"headerlink\" title=\"437-Path Sum III\"></a><a href=\"https://leetcode.com/problems/path-sum-iii/#/description\" target=\"_blank\" rel=\"noopener\">437-Path Sum III</a></h3><h4 id=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"><a href=\"#方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\" class=\"headerlink\" title=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"></a>方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; sum</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = [];</span><br><span class=\"line\">    map[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  <span class=\"comment\">//Default sum = 0 has one count</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> backtrack(root, <span class=\"number\">0</span>, sum, map); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> backtrack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root,sum,target,map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    sum += root.val;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = map[sum-target] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum-target];<span class=\"comment\">//See if there is a subarray sum equals to target</span></span><br><span class=\"line\">    map[sum] = (map[sum] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum])+<span class=\"number\">1</span>;<span class=\"comment\">//Extend to left and right child</span></span><br><span class=\"line\">    res += backtrack(root.left, sum, target, map) + backtrack(root.right, sum, target, map);</span><br><span class=\"line\">    map[sum]--;   <span class=\"comment\">//Remove the current node so it wont affect other path</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\"><a href=\"#方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\" class=\"headerlink\" title=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解\"></a>方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; sum</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sumUp(root, <span class=\"number\">0</span>, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumUp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node,pre,sum</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = pre + node.val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cur == sum) + sumUp(node.left, cur, sum) + sumUp(node.right, cur, sum);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"501-Find-Mode-in-Binary-Search-Tree\"><a href=\"#501-Find-Mode-in-Binary-Search-Tree\" class=\"headerlink\" title=\"501-Find Mode in Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/find-mode-in-binary-search-tree/#/description\" target=\"_blank\" rel=\"noopener\">501-Find Mode in Binary Search Tree</a></h3><h4 id=\"方法一：Morris-traversal（二叉树遍历方法，参考链接）\"><a href=\"#方法一：Morris-traversal（二叉树遍历方法，参考链接）\" class=\"headerlink\" title=\"方法一：Morris traversal（二叉树遍历方法，参考链接）\"></a>方法一：Morris traversal（二叉树遍历方法，<a href=\"http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currVal,</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    maxCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modes = []; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    inorder(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(modeCount);</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    inorder(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val != currVal) &#123;</span><br><span class=\"line\">        currVal = val;</span><br><span class=\"line\">        currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currCount;</span><br><span class=\"line\">        modeCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">            modes[modeCount] = currVal;</span><br><span class=\"line\">        modeCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inorder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                handleValue(node.val);</span><br><span class=\"line\">                node = node.right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> prev = node.left;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (prev.right !== <span class=\"literal\">null</span> &amp;&amp; prev.right != node)</span><br><span class=\"line\">                    prev = prev.right;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (prev.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    prev.right = node;</span><br><span class=\"line\">                    node = node.left;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    prev.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    handleValue(node.val);</span><br><span class=\"line\">                    node = node.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\"><a href=\"#方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\" class=\"headerlink\" title=\"方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度\"></a>方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modes = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    helper(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(currentModes);</span><br><span class=\"line\">    currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    helper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> helper = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    helper(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val != currentValue) &#123;</span><br><span class=\"line\">        currentCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        currentValue = root.val;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        currentCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currentCount;</span><br><span class=\"line\">        currentModes = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            modes[currentModes] = root.val;</span><br><span class=\"line\">            currentModes++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    helper(root.right);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"191-Number-of-1-Bits\"><a href=\"#191-Number-of-1-Bits\" class=\"headerlink\" title=\"191-Number of 1 Bits\"></a><a href=\"https://leetcode.com/problems/number-of-1-bits/#/description\" target=\"_blank\" rel=\"noopener\">191-Number of 1 Bits</a></h3><h4 id=\"方法一：利用-toString-2-和-replace\"><a href=\"#方法一：利用-toString-2-和-replace\" class=\"headerlink\" title=\"方法一：利用 toString(2) 和 replace()\"></a>方法一：利用 toString(2) 和 replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n.toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">''</span>).length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用-n-n-amp-n-1\"><a href=\"#方法二：利用-n-n-amp-n-1\" class=\"headerlink\" title=\"方法二：利用 n=n&amp;(n-1)\"></a>方法二：利用 n=n&amp;(n-1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;n!==<span class=\"number\">0</span>;n = n &amp; (n<span class=\"number\">-1</span>))</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：位运算\"><a href=\"#方法三：位运算\" class=\"headerlink\" title=\"方法三：位运算\"></a>方法三：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ones = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \tones = ones + (n &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    \tn = n&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ones;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"35-Search Insert Position\"></a><a href=\"https://leetcode.com/problems/search-insert-position/#/description\" target=\"_blank\" rel=\"noopener\">35-Search Insert Position</a></h3><h4 id=\"方法一：按部就班遍历\"><a href=\"#方法一：按部就班遍历\" class=\"headerlink\" title=\"方法一：按部就班遍历\"></a>方法一：按部就班遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target&lt;=nums[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找\"><a href=\"#方法二：二分查找\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = nums.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;<span class=\"keyword\">return</span> mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &gt; target) &#123;high = mid<span class=\"number\">-1</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;low = mid+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"107-Binary-Tree-Level-Order-Traversal-II\"><a href=\"#107-Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"107-Binary Tree Level Order Traversal II\"></a><a href=\"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/#/description\" target=\"_blank\" rel=\"noopener\">107-Binary Tree Level Order Traversal II</a></h3><p>暂无</p>\n<h3 id=\"263-Ugly-Number\"><a href=\"#263-Ugly-Number\" class=\"headerlink\" title=\"263-Ugly Number\"></a><a href=\"https://leetcode.com/problems/ugly-number/#/description\" target=\"_blank\" rel=\"noopener\">263-Ugly Number</a></h3><h4 id=\"方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\"><a href=\"#方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\" class=\"headerlink\" title=\"方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。\"></a>方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isUgly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">of</span> [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &amp;&amp; num % p === <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"459-Repeated-Substring-Pattern\"><a href=\"#459-Repeated-Substring-Pattern\" class=\"headerlink\" title=\"459-Repeated Substring Pattern\"></a><a href=\"https://leetcode.com/problems/repeated-substring-pattern/#/description\" target=\"_blank\" rel=\"noopener\">459-Repeated Substring Pattern</a></h3><h4 id=\"方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\"><a href=\"#方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\" class=\"headerlink\" title=\"方法一：The idea is that when we see a character in str that matches the very first character of str, we can start to hoping that str is a built by copies of the substring composed by all characters before the reappearance of the its first character.\"></a>方法一：The idea is that when we see a character in <em>str</em> that matches the very first character of <em>str</em>, we can start to hoping that <em>str</em> is a built by copies of the substring composed by all characters before the reappearance of the its first character.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> repeatedSubstringPattern = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sb = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = s.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    sb += first;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= l / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = s.charAt(i++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == first &amp;&amp; isCopies(s, sb)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb += c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isCopies = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str,substr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.length % substr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = substr.length; i &lt; str.length; i += substr.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.substring(i).slice(<span class=\"number\">0</span>,substr.length) !== substr)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其他方法仍在思考实现中</p>\n<h3 id=\"21-Merge-Two-Sorted-Lists\"><a href=\"#21-Merge-Two-Sorted-Lists\" class=\"headerlink\" title=\"21-Merge Two Sorted Lists\"></a><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/#/solutions\" target=\"_blank\" rel=\"noopener\">21-Merge Two Sorted Lists</a></h3><h4 id=\"方法一：递归-2\"><a href=\"#方法一：递归-2\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.next = mergeTwoLists(l2.next, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\"><a href=\"#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\" class=\"headerlink\" title=\"235-Lowest Common Ancestor of a Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/#/description\" target=\"_blank\" rel=\"noopener\">235-Lowest Common Ancestor of a Binary Search Tree</a></h3><h4 id=\"方法一：递归-3\"><a href=\"#方法一：递归-3\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><p>因为这是一棵二叉搜索数，所以两个节点分别与共同的祖先节点相减所得的差应该是异号或等于0的，否则就根据节点与当前根节点的大小比较对其左子树或右子树进行递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; p</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; q</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;TreeNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((root.val - p.val) * (root.val - q.val) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        root = p.val &lt; root.val ? root.left : root.right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代，和递归类似，只不过代码更加简化\"><a href=\"#方法二：迭代，和递归类似，只不过代码更加简化\" class=\"headerlink\" title=\"方法二：迭代，和递归类似，只不过代码更加简化\"></a>方法二：迭代，和递归类似，只不过代码更加简化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; p</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; q</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;TreeNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (root.val - p.val) * (root.val - q.val) &lt; <span class=\"number\">1</span> ? root :</span><br><span class=\"line\">           lowestCommonAncestor(p.val &lt; root.val ? root.left : root.right, p, q);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"198-House-Robber\"><a href=\"#198-House-Robber\" class=\"headerlink\" title=\"198-House Robber\"></a><a href=\"https://leetcode.com/problems/house-robber/#/description\" target=\"_blank\" rel=\"noopener\">198-House Robber</a></h3><h4 id=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"><a href=\"#方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\" class=\"headerlink\" title=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"></a>方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律</h4><blockquote>\n<p>f(0) = nums[0] f(1) = max(num[0], num[1]) f(k) = max( f(k-2) + nums[k], f(k-1) )</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">        b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span>===<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a = <span class=\"built_in\">Math</span>.max(a+nums[i], b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b = <span class=\"built_in\">Math</span>.max(a, b+nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"342-Power-of-Four\"><a href=\"#342-Power-of-Four\" class=\"headerlink\" title=\"342-Power of Four\"></a><a href=\"https://leetcode.com/problems/power-of-four/#/description\" target=\"_blank\" rel=\"noopener\">342-Power of Four</a></h3><h4 id=\"方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\"><a href=\"#方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\" class=\"headerlink\" title=\"方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上\"></a>方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num&amp;(num<span class=\"number\">-1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num &amp; <span class=\"number\">0x55555555</span>) !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：很好用的-replace-length\"><a href=\"#方法二：很好用的-replace-length\" class=\"headerlink\" title=\"方法二：很好用的 replace().length\"></a>方法二：很好用的 replace().length</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">''</span>).length === <span class=\"number\">1</span> &amp;&amp; num.toString(<span class=\"number\">2</span>).length%<span class=\"number\">2</span> ===<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\"><a href=\"#方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\" class=\"headerlink\" title=\"方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性\"></a>方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num &amp; (num - <span class=\"number\">1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num - <span class=\"number\">1</span>) % <span class=\"number\">3</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"345-Reverse-Vowels-of-a-String\"><a href=\"#345-Reverse-Vowels-of-a-String\" class=\"headerlink\" title=\"345-Reverse Vowels of a String\"></a><a href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/#/solutions\" target=\"_blank\" rel=\"noopener\">345-Reverse Vowels of a String</a></h3><h4 id=\"方法一：利用二分法和替代数组\"><a href=\"#方法一：利用二分法和替代数组\" class=\"headerlink\" title=\"方法一：利用二分法和替代数组\"></a>方法一：利用二分法和替代数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseVowels = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.length &lt;= <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> s;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'u'</span>,<span class=\"string\">'A'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'I'</span>,<span class=\"string\">'O'</span>,<span class=\"string\">'U'</span>],</span><br><span class=\"line\">        res = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(s.length);</span><br><span class=\"line\">        left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = s.length <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.indexOf(s[left]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.indexOf(s[right]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[right] = s[right];</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.indexOf(s[left]) &gt;=<span class=\"number\">0</span> &amp;&amp; arr.indexOf(s[right]) &gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[right];</span><br><span class=\"line\">            res[right] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"367-Valid-Perfect-Square\"><a href=\"#367-Valid-Perfect-Square\" class=\"headerlink\" title=\"367-Valid Perfect Square\"></a><a href=\"https://leetcode.com/problems/valid-perfect-square/#/description\" target=\"_blank\" rel=\"noopener\">367-Valid Perfect Square</a></h3><h4 id=\"方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\"><a href=\"#方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\" class=\"headerlink\" title=\"方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))\"></a>方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; num &gt; <span class=\"number\">0</span>; i += <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        num -= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找，O-logN\"><a href=\"#方法二：二分查找，O-logN\" class=\"headerlink\" title=\"方法二：二分查找，O(logN)\"></a>方法二：二分查找，O(logN)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>, right = num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = mid * mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &gt; num) &#123;</span><br><span class=\"line\">          right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; num) &#123;</span><br><span class=\"line\">          left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法，O-1\"><a href=\"#方法三：牛顿迭代法，O-1\" class=\"headerlink\" title=\"方法三：牛顿迭代法，O(1)\"></a>方法三：<a href=\"https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\" target=\"_blank\" rel=\"noopener\">牛顿迭代法</a>，O(1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t * t &gt; num) &#123;</span><br><span class=\"line\">        t = <span class=\"built_in\">Math</span>.floor((t + num / t) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t * t == num || num === <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"27-Remove-Element\"><a href=\"#27-Remove-Element\" class=\"headerlink\" title=\"27-Remove Element\"></a><a href=\"https://leetcode.com/problems/remove-element/#/description\" target=\"_blank\" rel=\"noopener\">27-Remove Element</a></h3><h4 id=\"方法一：在获得剩余长度的同时生成新数组\"><a href=\"#方法一：在获得剩余长度的同时生成新数组\" class=\"headerlink\" title=\"方法一：在获得剩余长度的同时生成新数组\"></a>方法一：在获得剩余长度的同时生成新数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; nums.length ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val)</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums[i-cnt] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length-cnt;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：既短又快\"><a href=\"#方法二：既短又快\" class=\"headerlink\" title=\"方法二：既短又快\"></a>方法二：既短又快</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">            nums[i--] = nums[l-- <span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"101-Symmetric-Tree\"><a href=\"#101-Symmetric-Tree\" class=\"headerlink\" title=\"101-Symmetric Tree\"></a><a href=\"https://leetcode.com/problems/symmetric-tree/#/description\" target=\"_blank\" rel=\"noopener\">101-Symmetric Tree</a></h3><h4 id=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"><a href=\"#方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\" class=\"headerlink\" title=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"></a>方法一：通过另外一个方法判断其左右子树是否都是”镜像数”</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root===<span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMirror(root.left,root.right);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isMirror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p,q</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> &amp;&amp; q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> || q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p.val==q.val) &amp;&amp; isMirror(p.left,q.right) &amp;&amp; isMirror(p.right,q.left);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：通过队列（在-JS-中通过数组模拟）\"><a href=\"#方法二：通过队列（在-JS-中通过数组模拟）\" class=\"headerlink\" title=\"方法二：通过队列（在 JS 中通过数组模拟）\"></a>方法二：通过队列（在 JS 中通过数组模拟）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> q = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.push(root.left);</span><br><span class=\"line\">    q.push(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = q.shift(),</span><br><span class=\"line\">            right = q.shift();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span>&amp;&amp; right === <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span> ^ right === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left.val != right.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        q.push(left.left);</span><br><span class=\"line\">        q.push(right.right);</span><br><span class=\"line\">        q.push(left.right);</span><br><span class=\"line\">        q.push(right.left);            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"66-Plus-One\"><a href=\"#66-Plus-One\" class=\"headerlink\" title=\"66-Plus One\"></a><a href=\"https://leetcode.com/problems/plus-one/#/description\" target=\"_blank\" rel=\"noopener\">66-Plus One</a></h3><h4 id=\"方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\"><a href=\"#方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\" class=\"headerlink\" title=\"方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位\"></a>方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; digits</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> plusOne = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">digits</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n=digits.length,i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        k = i==n<span class=\"number\">-1</span> ? <span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = digits[i];</span><br><span class=\"line\">        digits[i] = (old + j + k)%<span class=\"number\">10</span>;</span><br><span class=\"line\">        j = <span class=\"built_in\">Math</span>.floor((old + j + k)/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        digits.unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"118-Pascal’s-Triangle\"><a href=\"#118-Pascal’s-Triangle\" class=\"headerlink\" title=\"118-Pascal’s Triangle\"></a><a href=\"https://leetcode.com/problems/pascals-triangle/#/description\" target=\"_blank\" rel=\"noopener\">118-Pascal’s Triangle</a></h3><h4 id=\"方法一：单独用一个方法生成某一行，再-push-进数组\"><a href=\"#方法一：单独用一个方法生成某一行，再-push-进数组\" class=\"headerlink\" title=\"方法一：单独用一个方法生成某一行，再 push 进数组\"></a>方法一：单独用一个方法生成某一行，再 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; numRows</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = f(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        arr.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(f(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = f(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            a[i+<span class=\"number\">1</span>] = arr[i]+arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[n<span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：直接对二维数组进行赋值\"><a href=\"#方法二：直接对二维数组进行赋值\" class=\"headerlink\" title=\"方法二：直接对二维数组进行赋值\"></a>方法二：直接对二维数组进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; numRows</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;numRows;k++)&#123;    </span><br><span class=\"line\">        r[k]= [];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">        r[i][<span class=\"number\">0</span>] = r[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">            r[i][j] = r[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + r[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"434-Number-of-Segments-in-a-String\"><a href=\"#434-Number-of-Segments-in-a-String\" class=\"headerlink\" title=\"434. Number of Segments in a String\"></a><a href=\"https://leetcode.com/problems/number-of-segments-in-a-string/#/description\" target=\"_blank\" rel=\"noopener\">434. Number of Segments in a String</a></h3><h4 id=\"方法一：先去掉首尾空格再将非空格替换成空字符\"><a href=\"#方法一：先去掉首尾空格再将非空格替换成空字符\" class=\"headerlink\" title=\"方法一：先去掉首尾空格再将非空格替换成空字符\"></a>方法一：先去掉首尾空格再将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = s.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.length === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : str.replace(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">' '</span>).replace(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">''</span>).length +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"><a href=\"#方法二：先在首尾加一个空格，然后将非空格替换成空字符\" class=\"headerlink\" title=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"></a>方法二：先在首尾加一个空格，然后将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">\" \"</span> + s + <span class=\"string\">\" \"</span>).replace(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">' '</span>).replace(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">''</span>).length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"110-Balanced-Binary-Tree\"><a href=\"#110-Balanced-Binary-Tree\" class=\"headerlink\" title=\"110. Balanced Binary Tree\"></a><a href=\"https://leetcode.com/problems/balanced-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">110. Balanced Binary Tree</a></h3><h4 id=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\"><a href=\"#方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\" class=\"headerlink\" title=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)\"></a>方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=depth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right=depth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(left - right) &lt;= <span class=\"number\">1</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> depth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(depth(root.left), depth (root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从底部向上遍历，O-N\"><a href=\"#方法二：从底部向上遍历，O-N\" class=\"headerlink\" title=\"方法二：从底部向上遍历，O(N)\"></a>方法二：从底部向上遍历，O(N)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfsHeight(root) != <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dfsHeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftHeight = dfsHeight (root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftHeight == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightHeight = dfsHeight(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightHeight == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(leftHeight - rightHeight) &gt; <span class=\"number\">1</span>)  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(leftHeight, rightHeight) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"257-Binary-Tree-Paths\"><a href=\"#257-Binary-Tree-Paths\" class=\"headerlink\" title=\"257-Binary Tree Paths\"></a><a href=\"https://leetcode.com/problems/binary-tree-paths/#/description\" target=\"_blank\" rel=\"noopener\">257-Binary Tree Paths</a></h3><p>暂无</p>\n<h3 id=\"441-Arranging-Coins\"><a href=\"#441-Arranging-Coins\" class=\"headerlink\" title=\"441-Arranging Coins\"></a><a href=\"https://leetcode.com/problems/arranging-coins/#/description\" target=\"_blank\" rel=\"noopener\">441-Arranging Coins</a></h3><h4 id=\"方法一：根据公式直接求解-x-x-1-2-lt-n\"><a href=\"#方法一：根据公式直接求解-x-x-1-2-lt-n\" class=\"headerlink\" title=\"方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n\"></a>方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(((<span class=\"number\">-1</span> + <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> + <span class=\"number\">8</span> *n)) / <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先根据根值确定大致范围，然后二分查找\"><a href=\"#方法二：先根据根值确定大致范围，然后二分查找\" class=\"headerlink\" title=\"方法二：先根据根值确定大致范围，然后二分查找\"></a>方法二：先根据根值确定大致范围，然后二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">        end = n,</span><br><span class=\"line\">        mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end)&#123;</span><br><span class=\"line\">        mid = (start + end) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"number\">0.5</span> * mid * mid + <span class=\"number\">0.5</span> * mid ) &lt;= n)&#123;</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"119-Pascal’s-Triangle-II\"><a href=\"#119-Pascal’s-Triangle-II\" class=\"headerlink\" title=\"119-Pascal’s Triangle II\"></a><a href=\"https://leetcode.com/problems/pascals-triangle-ii/#/description\" target=\"_blank\" rel=\"noopener\">119-Pascal’s Triangle II</a></h3><h4 id=\"方法一：递归，直接计算\"><a href=\"#方法一：递归，直接计算\" class=\"headerlink\" title=\"方法一：递归，直接计算\"></a>方法一：递归，直接计算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; rowIndex</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = [];</span><br><span class=\"line\">    A[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;rowIndex+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i; j&gt;=<span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j]))&#123;</span><br><span class=\"line\">                A[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j<span class=\"number\">-1</span>]))&#123;</span><br><span class=\"line\">                A[j<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[j] += A[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\"><a href=\"#方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\" class=\"headerlink\" title=\"方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现\"></a>方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; rowIndex</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rowIndex === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> A=[];  </span><br><span class=\"line\">    A[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    A[<span class=\"number\">1</span>]=rowIndex;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;=rowIndex;i++) &#123;  </span><br><span class=\"line\">        A[i]=<span class=\"built_in\">Math</span>.floor(A[i<span class=\"number\">-1</span>]*(rowIndex-(i<span class=\"number\">-1</span>))/i); <span class=\"comment\">//in case of overflow  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232-Implement Queue using Stacks\"></a><a href=\"https://leetcode.com/problems/implement-queue-using-stacks/#/description\" target=\"_blank\" rel=\"noopener\">232-Implement Queue using Stacks</a></h3><p>参见我的另外一篇文章：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"141-Linked-List-Cycle\"><a href=\"#141-Linked-List-Cycle\" class=\"headerlink\" title=\"141-Linked List Cycle\"></a><a href=\"https://leetcode.com/problems/linked-list-cycle/#/description\" target=\"_blank\" rel=\"noopener\">141-Linked List Cycle</a></h3><h4 id=\"方法一：一个快指针，一个慢指针\"><a href=\"#方法一：一个快指针，一个慢指针\" class=\"headerlink\" title=\"方法一：一个快指针，一个慢指针\"></a>方法一：一个快指针，一个慢指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> walker = head,runner = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(runner.next!==<span class=\"literal\">null</span> &amp;&amp; runner.next.next!==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        walker = walker.next;</span><br><span class=\"line\">        runner = runner.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(walker==runner) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"26-Remove-Duplicates-from-Sorted-Array\"><a href=\"#26-Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"26-Remove Duplicates from Sorted Array\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description\" target=\"_blank\" rel=\"noopener\">26-Remove Duplicates from Sorted Array</a></h3><h4 id=\"方法一：遇到不同的元素时才进行赋值\"><a href=\"#方法一：遇到不同的元素时才进行赋值\" class=\"headerlink\" title=\"方法一：遇到不同的元素时才进行赋值\"></a>方法一：遇到不同的元素时才进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length===<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i]!=nums[j]) nums[++j]=nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++j;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个变量记录当前重复元素数量\"><a href=\"#方法二：用一个变量记录当前重复元素数量\" class=\"headerlink\" title=\"方法二：用一个变量记录当前重复元素数量\"></a>方法二：用一个变量记录当前重复元素数量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == nums[i<span class=\"number\">-1</span>]) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> nums[i-count] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length-count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"172-Factorial-Trailing-Zeroes\"><a href=\"#172-Factorial-Trailing-Zeroes\" class=\"headerlink\" title=\"172-Factorial Trailing Zeroes\"></a><a href=\"https://leetcode.com/problems/factorial-trailing-zeroes/#/description\" target=\"_blank\" rel=\"noopener\">172-Factorial Trailing Zeroes</a></h3><h4 id=\"方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\"><a href=\"#方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\" class=\"headerlink\" title=\"方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的\"></a>方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trailingZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">5</span>) + trailingZeroes(n / <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-Palindrome-Number\"><a href=\"#9-Palindrome-Number\" class=\"headerlink\" title=\"9-Palindrome Number\"></a><a href=\"https://leetcode.com/problems/palindrome-number/#/description\" target=\"_blank\" rel=\"noopener\">9-Palindrome Number</a></h3><h4 id=\"方法一：二分查找\"><a href=\"#方法一：二分查找\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span> + x,left=<span class=\"number\">0</span>,right=str.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right-left&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[left] == str[right])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：比较前一半数字和后一半数字是否相等\"><a href=\"#方法二：比较前一半数字和后一半数字是否相等\" class=\"headerlink\" title=\"方法二：比较前一半数字和后一半数字是否相等\"></a>方法二：比较前一半数字和后一半数字是否相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span> || (x!==<span class=\"number\">0</span> &amp;&amp; x%<span class=\"number\">10</span>===<span class=\"number\">0</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x&gt;rev)&#123;</span><br><span class=\"line\">    \trev = rev*<span class=\"number\">10</span> + x%<span class=\"number\">10</span>;</span><br><span class=\"line\">    \tx = <span class=\"built_in\">Math</span>.floor(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x==rev || x==<span class=\"built_in\">Math</span>.floor(rev/<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"374-Guess-Number-Higher-or-Lower\"><a href=\"#374-Guess-Number-Higher-or-Lower\" class=\"headerlink\" title=\"374-Guess Number Higher or Lower\"></a><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower/#/description\" target=\"_blank\" rel=\"noopener\">374-Guess Number Higher or Lower</a></h3><h4 id=\"方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\"><a href=\"#方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\" class=\"headerlink\" title=\"方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）\"></a>方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forward declaration of guess API.</span></span><br><span class=\"line\"><span class=\"comment\">// @param n, your guess</span></span><br><span class=\"line\"><span class=\"comment\">// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> guessNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor(low + (n-low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> res = guess(mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            n = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438-Find All Anagrams in a String\"></a><a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/#/description\" target=\"_blank\" rel=\"noopener\">438-Find All Anagrams in a String</a></h3><p>暂无</p>\n<h3 id=\"112-Path-Sum\"><a href=\"#112-Path-Sum\" class=\"headerlink\" title=\"112-Path Sum\"></a><a href=\"https://leetcode.com/problems/path-sum/#/description\" target=\"_blank\" rel=\"noopener\">112-Path Sum</a></h3><h4 id=\"方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\"><a href=\"#方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\" class=\"headerlink\" title=\"方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val\"></a>方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; sum</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasPathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == sum &amp;&amp; root.left === <span class=\"literal\">null</span> &amp;&amp; root.right === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"38-Count-and-Say\"><a href=\"#38-Count-and-Say\" class=\"headerlink\" title=\"38-Count and Say\"></a><a href=\"https://leetcode.com/problems/count-and-say/#/description\" target=\"_blank\" rel=\"noopener\">38-Count and Say</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countAndSay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">'1'</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = countAndSay(n<span class=\"number\">-1</span>),res=<span class=\"string\">''</span>,a=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=s.length;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i+<span class=\"number\">1</span>] == s[i])&#123;</span><br><span class=\"line\">                a++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res += a + s[i];</span><br><span class=\"line\">                a=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"250-Isomorphic-Strings\"><a href=\"#250-Isomorphic-Strings\" class=\"headerlink\" title=\"250-Isomorphic Strings\"></a><a href=\"https://leetcode.com/problems/isomorphic-strings/#/solutions\" target=\"_blank\" rel=\"noopener\">250-Isomorphic Strings</a></h3><h4 id=\"方法一：用哈希表判断重复出现的位置\"><a href=\"#方法一：用哈希表判断重复出现的位置\" class=\"headerlink\" title=\"方法一：用哈希表判断重复出现的位置\"></a>方法一：用哈希表判断重复出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> phic(s,t) &amp;&amp; phic(t,s);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s,t</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> code = s[i].charCodeAt() - <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[code] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[code] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i] != t[arr[code]])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个数组保存重复元素第一次出现的位置\"><a href=\"#方法二：用一个数组保存重复元素第一次出现的位置\" class=\"headerlink\" title=\"方法二：用一个数组保存重复元素第一次出现的位置\"></a>方法二：用一个数组保存重复元素第一次出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m[s.charCodeAt(i)] != m[t.charCodeAt(i)+<span class=\"number\">256</span>]) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">        m[s.charCodeAt(i)] = m[t.charCodeAt(i)+<span class=\"number\">256</span>] = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20-Valid Parentheses\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/#/description\" target=\"_blank\" rel=\"noopener\">20-Valid Parentheses</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> q = <span class=\"string\">\"()&#123;&#125;[]\"</span>.indexOf(s.substring(i, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.length === <span class=\"number\">0</span> || p.shift() != q - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> p.unshift(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !p.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"111-Minimum-Depth-of-Binary-Tree\"><a href=\"#111-Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"111-Minimum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">111-Minimum Depth of Binary Tree</a></h3><h4 id=\"方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\"><a href=\"#方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\" class=\"headerlink\" title=\"方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.\"></a>方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minDepth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> L = minDepth(root.left), R = minDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + (<span class=\"built_in\">Math</span>.min(L, R) || <span class=\"built_in\">Math</span>.max(L, R));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"290-Word-Pattern\"><a href=\"#290-Word-Pattern\" class=\"headerlink\" title=\"290-Word Pattern\"></a><a href=\"https://leetcode.com/problems/word-pattern/#/description\" target=\"_blank\" rel=\"noopener\">290-Word Pattern</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; pattern</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; str</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wordPattern = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pattern, str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">\" \"</span>),mid = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=pattern.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> char = pattern[i].charCodeAt() - <span class=\"number\">97</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid[char] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(inArray(arr[i],mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                mid[char] = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid[char] != arr[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> &amp;&amp; (pattern.length == arr.length);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=arr.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] === item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"234-Palindrome-Linked-List\"><a href=\"#234-Palindrome-Linked-List\" class=\"headerlink\" title=\"234-Palindrome Linked List\"></a><a href=\"https://leetcode.com/problems/palindrome-linked-list/#/description\" target=\"_blank\" rel=\"noopener\">234-Palindrome Linked List</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = head,p2 = head,p3 = p1.next,pre = p1;</span><br><span class=\"line\">    <span class=\"comment\">//find mid pointer, and reverse head half part</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p2.next !== <span class=\"literal\">null</span> &amp;&amp; p2.next.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p2 = p2.next.next;</span><br><span class=\"line\">        pre = p1;</span><br><span class=\"line\">        p1 = p3;</span><br><span class=\"line\">        p3 = p3.next;</span><br><span class=\"line\">        p1.next = pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//odd number of elements, need left move p1 one step</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//even number of elements, do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//compare from mid to head/tail</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p3 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1.val != p3.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        p3 = p3.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1.Two Sum\"></a><a href=\"https://leetcode.com/problems/two-sum/#/description\" target=\"_blank\" rel=\"noopener\">1.Two Sum</a></h3><h4 id=\"方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\"><a href=\"#方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\" class=\"headerlink\" title=\"方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）\"></a>方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[j]) == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"219-Contains-Duplicate-II\"><a href=\"#219-Contains-Duplicate-II\" class=\"headerlink\" title=\"219-Contains Duplicate II\"></a><a href=\"https://leetcode.com/problems/contains-duplicate-ii/#/description\" target=\"_blank\" rel=\"noopener\">219-Contains Duplicate II</a></h3><h4 id=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"><a href=\"#方法一：只要读懂题意就差不多了，哈希表及时更新\" class=\"headerlink\" title=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"></a>方法一：只要读懂题意就差不多了，哈希表及时更新</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsNearbyDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [],res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[item] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(arr[item] - i) &lt;= k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225-Implement Stack using Queues\"></a><a href=\"https://leetcode.com/problems/implement-stack-using-queues/#/description\" target=\"_blank\" rel=\"noopener\">225-Implement Stack using Queues</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"88-Merge-Sorted-Array\"><a href=\"#88-Merge-Sorted-Array\" class=\"headerlink\" title=\"88.Merge Sorted Array\"></a><a href=\"https://leetcode.com/problems/merge-sorted-array/#/description\" target=\"_blank\" rel=\"noopener\">88.Merge Sorted Array</a></h3><h4 id=\"方法一：模仿归并排序，从后往前比较\"><a href=\"#方法一：模仿归并排序，从后往前比较\" class=\"headerlink\" title=\"方法一：模仿归并排序，从后往前比较\"></a>方法一：模仿归并排序，从后往前比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; m</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>) nums1[m+n<span class=\"number\">-1</span>] = (m===<span class=\"number\">0</span>||nums2[n<span class=\"number\">-1</span>] &gt; nums1[m<span class=\"number\">-1</span>]) ? nums2[--n] : nums1[--m];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"203-Remove-Linked-List-Elements\"><a href=\"#203-Remove-Linked-List-Elements\" class=\"headerlink\" title=\"203-Remove Linked List Elements\"></a><a href=\"https://leetcode.com/problems/remove-linked-list-elements/#/solutions\" target=\"_blank\" rel=\"noopener\">203-Remove Linked List Elements</a></h3><h4 id=\"方法一：递归-4\"><a href=\"#方法一：递归-4\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElements = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    head.next = removeElements(head.next, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.val == val ? head.next : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"58-Length-of-Last-Word\"><a href=\"#58-Length-of-Last-Word\" class=\"headerlink\" title=\"58.Length of Last Word\"></a><a href=\"https://leetcode.com/problems/length-of-last-word/#/description\" target=\"_blank\" rel=\"noopener\">58.Length of Last Word</a></h3><h4 id=\"方法一：利用-split，需要提前去掉前后空格\"><a href=\"#方法一：利用-split，需要提前去掉前后空格\" class=\"headerlink\" title=\"方法一：利用 split，需要提前去掉前后空格\"></a>方法一：利用 split，需要提前去掉前后空格</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLastWord = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  s.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>).split(<span class=\"string\">' '</span>)[s.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>).split(<span class=\"string\">' '</span>).length - <span class=\"number\">1</span>].length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"507-Perfect-Number\"><a href=\"#507-Perfect-Number\" class=\"headerlink\" title=\"507-Perfect Number\"></a><a href=\"https://leetcode.com/problems/perfect-number/#/solutions\" target=\"_blank\" rel=\"noopener\">507-Perfect Number</a></h3><h4 id=\"方法一：先求根值，因为根值是遍历的界限\"><a href=\"#方法一：先求根值，因为根值是遍历的界限\" class=\"headerlink\" title=\"方法一：先求根值，因为根值是遍历的界限\"></a>方法一：先求根值，因为根值是遍历的界限</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sqrt = <span class=\"built_in\">Math</span>.sqrt(num),res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=sqrt;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res += i+ num/i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num&gt;<span class=\"number\">1</span> &amp;&amp; res==<span class=\"number\">2</span>*num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"67-Add-Binary\"><a href=\"#67-Add-Binary\" class=\"headerlink\" title=\"67-Add Binary\"></a><a href=\"https://leetcode.com/problems/add-binary/#/description\" target=\"_blank\" rel=\"noopener\">67-Add Binary</a></h3><h4 id=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"><a href=\"#方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\" class=\"headerlink\" title=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"></a>方法一：对两个字符串循环遍历，同时用一个变量保存进位情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; a</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; b</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addBinary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">0</span>, i = a.length - <span class=\"number\">1</span>, j = b.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span> || c == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c += i &gt;= <span class=\"number\">0</span> ? a[i --] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        c += j &gt;= <span class=\"number\">0</span> ? b[j --] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        s = c % <span class=\"number\">2</span> + s;</span><br><span class=\"line\">        c = <span class=\"built_in\">Math</span>.floor(c / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-Longest-Common-Prefix\"><a href=\"#14-Longest-Common-Prefix\" class=\"headerlink\" title=\"14-Longest Common Prefix\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/#/description\" target=\"_blank\" rel=\"noopener\">14-Longest Common Prefix</a></h3><h4 id=\"方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\"><a href=\"#方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\" class=\"headerlink\" title=\"方法一：对数组进行遍历，用 indexOf 判断字符串的前缀\"></a>方法一：对数组进行遍历，用 indexOf 判断字符串的前缀</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[]&#125; strs</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestCommonPrefix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strs === <span class=\"literal\">null</span> || strs.length === <span class=\"number\">0</span>)    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pre = strs[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; strs.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(strs[i].indexOf(pre) !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            pre = pre.substring(<span class=\"number\">0</span>,pre.length<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"160-Intersection-of-Two-Linked-Lists\"><a href=\"#160-Intersection-of-Two-Linked-Lists\" class=\"headerlink\" title=\"160-Intersection of Two Linked Lists\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/#/description\" target=\"_blank\" rel=\"noopener\">160-Intersection of Two Linked Lists</a></h3><h4 id=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"><a href=\"#方法一：用两个指针进行遍历，循环结束条件为指针相等\" class=\"headerlink\" title=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"></a>方法一：用两个指针进行遍历，循环结束条件为指针相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; headA</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; headB</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur1 = headA,cur2 = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur1 != cur2)&#123;</span><br><span class=\"line\">        cur1 = cur1?cur1.next:headB;</span><br><span class=\"line\">        cur2 = cur2?cur2.next:headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur1;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"400-Nth-Digit\"><a href=\"#400-Nth-Digit\" class=\"headerlink\" title=\"400-Nth Digit\"></a><a href=\"https://leetcode.com/problems/nth-digit/#/description\" target=\"_blank\" rel=\"noopener\">400-Nth Digit</a></h3><h4 id=\"方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\"><a href=\"#方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\" class=\"headerlink\" title=\"方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数\"></a>方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findNthDigit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> digits = <span class=\"number\">1</span>, first = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">9</span> / first / digits) &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        n -= <span class=\"number\">9</span> * first * digits;</span><br><span class=\"line\">        digits++;</span><br><span class=\"line\">        first *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (first + <span class=\"built_in\">Math</span>.floor(n/digits) + <span class=\"string\">\"\"</span>).charAt(n%digits) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"475-Heaters\"><a href=\"#475-Heaters\" class=\"headerlink\" title=\"475. Heaters**\"></a><a href=\"https://leetcode.com/problems/heaters/#/description\" target=\"_blank\" rel=\"noopener\">475. Heaters</a>**</h3><h4 id=\"方法一：在对房子进行循环的过程中移动加热器的指针\"><a href=\"#方法一：在对房子进行循环的过程中移动加热器的指针\" class=\"headerlink\" title=\"方法一：在对房子进行循环的过程中移动加热器的指针\"></a>方法一：在对房子进行循环的过程中移动加热器的指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; houses</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; heaters</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRadius = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">houses, heaters</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> house = houses.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        heater= heaters.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        i = <span class=\"number\">0</span>, </span><br><span class=\"line\">        res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,n=house.length;j&lt;n;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; heater.length - <span class=\"number\">1</span> &amp;&amp; heater[i] + heater[i + <span class=\"number\">1</span>] &lt;= house[j] * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = <span class=\"built_in\">Math</span>.max(res, <span class=\"built_in\">Math</span>.abs(heater[i] - house[j]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"190-Reverse-Bits\"><a href=\"#190-Reverse-Bits\" class=\"headerlink\" title=\"190-Reverse Bits\"></a><a href=\"https://leetcode.com/problems/reverse-bits/#/description\" target=\"_blank\" rel=\"noopener\">190-Reverse Bits</a></h3><h4 id=\"方法一：利用数组的-reverse-进行反转\"><a href=\"#方法一：利用数组的-reverse-进行反转\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 进行反转\"></a>方法一：利用数组的 reverse() 进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125; - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseBits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zero = <span class=\"number\">32</span>- n.toString(<span class=\"number\">2</span>).length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bit = n.toString(<span class=\"number\">2</span>).split(<span class=\"string\">\"\"</span>).reverse().join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(zero&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        bit += <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        zero--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(bit,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"303-Range-Sum-Query-Immutable\"><a href=\"#303-Range-Sum-Query-Immutable\" class=\"headerlink\" title=\"303-Range Sum Query - Immutable\"></a><a href=\"https://leetcode.com/problems/range-sum-query-immutable/#/description\" target=\"_blank\" rel=\"noopener\">303-Range Sum Query - Immutable</a></h3><h4 id=\"方法一：用一个数组保存前面元素之和\"><a href=\"#方法一：用一个数组保存前面元素之和\" class=\"headerlink\" title=\"方法一：用一个数组保存前面元素之和\"></a>方法一：用一个数组保存前面元素之和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> NumArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">        nums[i] += nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nums = nums;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; i </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; j</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">NumArray.prototype.sumRange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nums[j];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nums[j] - <span class=\"keyword\">this</span>.nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = Object.create(NumArray).createNew(nums)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.sumRange(i,j)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"28-Implement-strStr\"><a href=\"#28-Implement-strStr\" class=\"headerlink\" title=\"28-Implement strStr()\"></a><a href=\"https://leetcode.com/problems/implement-strstr/#/description\" target=\"_blank\" rel=\"noopener\">28-Implement strStr()</a></h3><h4 id=\"方法一：利用-JS-中的-indexOf\"><a href=\"#方法一：利用-JS-中的-indexOf\" class=\"headerlink\" title=\"方法一：利用 JS 中的 indexOf()\"></a>方法一：利用 JS 中的 indexOf()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; haystack</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; needle</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> haystack.indexOf(needle);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：老老实实遍历\"><a href=\"#方法二：老老实实遍历\" class=\"headerlink\" title=\"方法二：老老实实遍历\"></a>方法二：老老实实遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; haystack</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; needle</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; ; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j == needle.length) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i + j == haystack.length) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (needle.charAt(j) != haystack.charAt(i + j)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"69-Sqrt-x\"><a href=\"#69-Sqrt-x\" class=\"headerlink\" title=\"69-Sqrt(x)\"></a><a href=\"https://leetcode.com/problems/sqrtx/#/description\" target=\"_blank\" rel=\"noopener\">69-Sqrt(x)</a></h3><h4 id=\"方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"><a href=\"#方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\" class=\"headerlink\" title=\"方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"></a>方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Math</span>.floor(x/<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t*t&gt;x &amp;&amp; t&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        t--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x==<span class=\"number\">1</span> ? <span class=\"number\">1</span> : t;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找-1\"><a href=\"#方法二：二分查找-1\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> begin = <span class=\"number\">0</span>,end = x,result = <span class=\"number\">1</span>,mid = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">Math</span>.abs(result-x) &gt; <span class=\"number\">0.000001</span>)&#123;  </span><br><span class=\"line\">        mid = (begin+end)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">        result = mid*mid;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result &gt; x)   &#123;end = mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;begin = mid; &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(mid);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法\"><a href=\"#方法三：牛顿迭代法\" class=\"headerlink\" title=\"方法三：牛顿迭代法\"></a>方法三：<a href=\"https://www.zhihu.com/question/20690553\" target=\"_blank\" rel=\"noopener\">牛顿迭代法</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    r = x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r*r &gt; x)</span><br><span class=\"line\">        r = ((r + x/r) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"155-Min-Stack\"><a href=\"#155-Min-Stack\" class=\"headerlink\" title=\"155-Min Stack\"></a><a href=\"https://leetcode.com/problems/min-stack/#/description\" target=\"_blank\" rel=\"noopener\">155-Min Stack</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"414-Third-Maximum-Number\"><a href=\"#414-Third-Maximum-Number\" class=\"headerlink\" title=\"414-Third Maximum Number\"></a><a href=\"https://leetcode.com/problems/third-maximum-number/#/description\" target=\"_blank\" rel=\"noopener\">414-Third Maximum Number</a></h3><h4 id=\"方法一：遍历比较\"><a href=\"#方法一：遍历比较\" class=\"headerlink\" title=\"方法一：遍历比较\"></a>方法一：遍历比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max1 = <span class=\"literal\">null</span>,max2 = <span class=\"literal\">null</span>,max3 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=nums.length;i&lt;len;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max1 || n == max2 || n == max3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max1 === <span class=\"literal\">null</span> || n &gt; max1) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = max1;</span><br><span class=\"line\">            max1 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max2 === <span class=\"literal\">null</span> || n &gt; max2) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max3 === <span class=\"literal\">null</span> || n &gt; max3) &#123;</span><br><span class=\"line\">            max3 = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">null</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先将数组排序再遍历\"><a href=\"#方法二：先将数组排序再遍历\" class=\"headerlink\" title=\"方法二：先将数组排序再遍历\"></a>方法二：先将数组排序再遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b-a;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    max1 = nums[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>,j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] == max1&amp;&amp;nums[i] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max2 = nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[j] == max2&amp;&amp;nums[j] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max3 = nums[j];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">undefined</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"532-K-diff-Pairs-in-an-Array\"><a href=\"#532-K-diff-Pairs-in-an-Array\" class=\"headerlink\" title=\"532-K-diff Pairs in an Array\"></a><a href=\"https://leetcode.com/problems/k-diff-pairs-in-an-array/#/description\" target=\"_blank\" rel=\"noopener\">532-K-diff Pairs in an Array</a></h3><h4 id=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"><a href=\"#方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\" class=\"headerlink\" title=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"></a>方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"built_in\">Math</span>.max(j, i + <span class=\"number\">1</span>); j &lt; nums.length &amp;&amp; nums[j] - nums[i] &lt; k; j++) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; nums.length &amp;&amp;  nums[j] - nums[i] == k) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i + <span class=\"number\">1</span> &lt; nums.length &amp;&amp; nums[i] == nums[i + <span class=\"number\">1</span>]) &#123;i++;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"204-Count-Primes\"><a href=\"#204-Count-Primes\" class=\"headerlink\" title=\"204-Count Primes\"></a><a href=\"https://leetcode.com/problems/count-primes/#/description\" target=\"_blank\" rel=\"noopener\">204-Count Primes</a></h3><h4 id=\"方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\"><a href=\"#方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\" class=\"headerlink\" title=\"方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数\"></a>方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countPrimes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = [],count = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">3</span>; i * i &lt; n; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[i]) &#123;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i * i; j &lt; n; j += <span class=\"number\">2</span> * i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!f[j]) &#123;</span><br><span class=\"line\">                --count;</span><br><span class=\"line\">                f[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"125-Valid-Palindrome\"><a href=\"#125-Valid-Palindrome\" class=\"headerlink\" title=\"125-Valid Palindrome\"></a><a href=\"https://leetcode.com/problems/valid-palindrome/#/description\" target=\"_blank\" rel=\"noopener\">125-Valid Palindrome</a></h3><h4 id=\"方法一：二分查找-1\"><a href=\"#方法一：二分查找-1\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s === <span class=\"string\">''</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = s.replace(<span class=\"regexp\">/\\W/g</span>,<span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(low);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=<span class=\"number\">0</span>,right=low.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(low[left] != low[right])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"168-Excel-Sheet-Column-Title\"><a href=\"#168-Excel-Sheet-Column-Title\" class=\"headerlink\" title=\"168-Excel Sheet Column Title\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-title/#/description\" target=\"_blank\" rel=\"noopener\">168-Excel Sheet Column Title</a></h3><h4 id=\"方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\"><a href=\"#方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\" class=\"headerlink\" title=\"方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1\"></a>方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertToTitle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        res =  <span class=\"built_in\">String</span>.fromCharCode(n % <span class=\"number\">26</span> + <span class=\"number\">65</span>)+res;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">26</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"278-First-Bad-Version\"><a href=\"#278-First-Bad-Version\" class=\"headerlink\" title=\"278-First Bad Version\"></a><a href=\"https://leetcode.com/problems/first-bad-version/#/description\" target=\"_blank\" rel=\"noopener\">278-First Bad Version</a></h3><h4 id=\"方法一：很常用的二分查找\"><a href=\"#方法一：很常用的二分查找\" class=\"headerlink\" title=\"方法一：很常用的二分查找\"></a>方法一：很常用的二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;integer&#125; version number</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125; whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;function&#125; isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;function&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;integer&#125; n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;integer&#125; The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>,right=n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.floor((left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isBadVersion(min))&#123;</span><br><span class=\"line\">                right = min;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left=min+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7-Reverse Integer\"></a><a href=\"https://leetcode.com/problems/reverse-integer/#/description\" target=\"_blank\" rel=\"noopener\">7-Reverse Integer</a></h3><h4 id=\"方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\"><a href=\"#方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理\"></a>方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">Math</span>.floor((<span class=\"string\">''</span> + <span class=\"built_in\">Math</span>.abs(x)).split(<span class=\"string\">''</span>).reverse().join().replace(<span class=\"regexp\">/,/g</span>,<span class=\"string\">''</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res &gt; (<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>)<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? res : <span class=\"number\">0</span>- res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用数学计算进行反转\"><a href=\"#方法二：利用数学计算进行反转\" class=\"headerlink\" title=\"方法二：利用数学计算进行反转\"></a>方法二：利用数学计算进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev= <span class=\"number\">0</span>,pos = <span class=\"built_in\">Math</span>.abs(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( pos !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        rev= rev*<span class=\"number\">10</span> + pos % <span class=\"number\">10</span>;</span><br><span class=\"line\">        pos= <span class=\"built_in\">Math</span>.floor(pos/<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(rev)&gt;<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>)<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.floor(rev) : <span class=\"number\">0</span>- <span class=\"built_in\">Math</span>.floor(rev);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"189-Rotate-Array\"><a href=\"#189-Rotate-Array\" class=\"headerlink\" title=\"189-Rotate Array\"></a><a href=\"https://leetcode.com/problems/rotate-array/#/description\" target=\"_blank\" rel=\"noopener\">189-Rotate Array</a></h3><p>方法一：利用数组的 pop() 和 unshift() 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        nums.unshift(nums.pop());</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：三次反转\"><a href=\"#方法二：三次反转\" class=\"headerlink\" title=\"方法二：三次反转\"></a>方法二：三次反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    k %= nums.length;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, k, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums,start,end</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"><a href=\"#方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\" class=\"headerlink\" title=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"></a>方法三：非常巧妙的一种方式，看不懂的可以<a href=\"https://discuss.leetcode.com/topic/11349/my-three-way-to-solve-this-problem-the-first-way-is-interesting-java\" target=\"_blank\" rel=\"noopener\">点击这里</a>看作者的解释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//step each time to move</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = k % nums.length;</span><br><span class=\"line\">    <span class=\"comment\">//find GCD between nums length and step</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gcd = findGcd(nums.length, step),position, count;</span><br><span class=\"line\">    <span class=\"comment\">//gcd path to finish movie</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; gcd; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//beginning position of each path</span></span><br><span class=\"line\">        position = i;</span><br><span class=\"line\">        <span class=\"comment\">//count is the number we need swap each path</span></span><br><span class=\"line\">        count = <span class=\"built_in\">Math</span>.floor(nums.length / gcd) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; count; j++)&#123;</span><br><span class=\"line\">            position = (position + step) % nums.length;</span><br><span class=\"line\">            <span class=\"comment\">//swap index value in index i and position</span></span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">            nums[position] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> findGcd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a === <span class=\"number\">0</span> || b === <span class=\"number\">0</span>) ? a + b : findGcd(b, a % b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"algorithm","path":"api/categories/algorithm.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"leetcode","path":"api/tags/leetcode.json"}]}]}