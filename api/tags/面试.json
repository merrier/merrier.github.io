{"name":"面试","postlist":[{"title":"JS中的传值与传址","slug":"JS中的传值与传址","date":"2017-04-25T12:36:04.000Z","updated":"2019-02-28T12:34:16.852Z","comments":true,"path":"api/articles/JS中的传值与传址.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_21.jpg","content":"<p>在 JS 中，有两种不同的方式可以操作数据的值，这两种技术分别叫做<strong>传值</strong>和<strong>传址</strong>。</p>\n<h2 id=\"数据值的操作\"><a href=\"#数据值的操作\" class=\"headerlink\" title=\"数据值的操作\"></a>数据值的操作</h2><p>要知道传址跟传址，首先我们先了解下数据值的操作。</p>\n<ol>\n<li><strong>复制</strong>：可以把它赋值给一个新的变量</li>\n<li><strong>传递</strong>：可以将他传递给一个函数或者方法</li>\n<li><strong>比较</strong>：可以与另外一个值比较，判断是否相等</li>\n</ol>\n<h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p><strong>传值</strong>：在赋值过程中，首先对值进行了一份拷贝，而后将这份拷贝存储到一个变量、对象属性或数组元素中。拷贝的值和原始的值是完全独立、互不影响的。当一份数据通过值传递给一个函数，实际上被传递的不是数据本身，而是数据的一份拷贝。因此，如果函数修改了这个值，影响到的只是数据的那份拷贝，而并不影响数据本身。</p>\n<p><strong>传址</strong>：在赋值过程中，变量实际上存储的是数据的地址（对数据的引用），而不是原始数据或者是数据的拷贝。如果值通过一个地址发生了改变，这个改变也会通过原始地址表现出来。</p>\n<h2 id=\"参阅对比表\"><a href=\"#参阅对比表\" class=\"headerlink\" title=\"参阅对比表\"></a>参阅对比表</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>传值</th>\n<th>传址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>复制</td>\n<td>实际复制的是值，存在于两个不同的独立拷贝</td>\n<td>复制的只是对数值的引用，即地址，如果通过这个新的引用修改了数值，这个改变对最初的引用也是可见的</td>\n</tr>\n<tr>\n<td>传递</td>\n<td>传递给函数的值是一个独立的拷贝，对它的改变函数外没有影响</td>\n<td>传递给函数的是对数值的一个引用。如果通过这个新的引用修改了数值，这个改变对最初的引用也是可见的</td>\n</tr>\n<tr>\n<td>比较</td>\n<td>比较两个独立的值，判断是否相同</td>\n<td>比较的是两个的引用，判断引用是否是同一个数值。对两个不同数值的引用不相等，即使这两个数值相等</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>根据操作数据方式的不同，我们可以把数据类型分为两类：<strong>基础类型</strong>和<strong>引用类型</strong>。</p>\n<ul>\n<li>基础类型主要有：数字(Number)、布尔类型(Boolean)；其操作方式为传值。</li>\n<li>引用类型主要有：对象(Object) —— 数组(Array)、函数(Function)；其操作方式为传址。</li>\n</ul>\n<p>数字和布尔类型是基础类型，它们是由很小的，固定数目字节组成，所以可以通过传值来操作；而数组和函数，是对象的特殊类型，也是引用类型。由于对象没有固定大小，所以无法通过传值进行操作。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传值（赋值操作）\"><a href=\"#传值（赋值操作）\" class=\"headerlink\" title=\"传值（赋值操作）\"></a>传值（赋值操作）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = a, a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"a=\"</span> + a + <span class=\"string\">\",b=\"</span> + b);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_21.jpg\" alt=\"\" width=\"400\"></div>\n\n<p>a 先是被赋值为 1，接着把 a 的值赋给 b，这时会进行值的拷贝，因此b = 1；然后又把 a 赋值为 2。在没有执行 a = 2 之前，我们试试下列代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b);  <span class=\"comment\">// 输出为true. 可见它们在内存中是指向同一个位置的。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传值（基础类型）\"><a href=\"#传值（基础类型）\" class=\"headerlink\" title=\"传值（基础类型）\"></a>传值（基础类型）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;            <span class=\"comment\">// 将a复制给b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">x,y</span>) </span>&#123;     <span class=\"comment\">// 函数修改参数的值</span></span><br><span class=\"line\">  x = x + y;              <span class=\"comment\">// 虽然这个里面将值进行相加，但是仅仅是值的独立拷贝，进行相加，在函数外面没有影响</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add1(a,b);                <span class=\"comment\">// 数字类型为传值</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">\"a:\"</span> + a + <span class=\"string\">\"n\"</span> + <span class=\"string\">\"b:\"</span> + b);      <span class=\"comment\">// a为1，b为1  </span></span><br><span class=\"line\">(a == b) ? c = <span class=\"string\">\"true\"</span> : c = <span class=\"string\">\"false\"</span>;  </span><br><span class=\"line\">alert(c);         <span class=\"comment\">// c = \"true\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传址（引用类型）\"><a href=\"#传址（引用类型）\" class=\"headerlink\" title=\"传址（引用类型）\"></a>传址（引用类型）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];      <span class=\"comment\">// 定义数组，引用类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;                           <span class=\"comment\">// 将a复制给b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;           <span class=\"comment\">// 函数修改参数的值</span></span><br><span class=\"line\">  x[<span class=\"number\">0</span>] = <span class=\"string\">\"tt\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(b);             <span class=\"comment\">// 数组对象为传址  </span></span><br><span class=\"line\">alert(<span class=\"string\">\"a:\"</span> + a[<span class=\"number\">0</span>] + a[<span class=\"number\">1</span>] + a[<span class=\"number\">2</span>] + a[<span class=\"number\">3</span>] + <span class=\"string\">\"n\"</span> + <span class=\"string\">\"b:\"</span> + b[<span class=\"number\">0</span>] + b[<span class=\"number\">1</span>] + b[<span class=\"number\">2</span>] + b[<span class=\"number\">3</span>]);  <span class=\"comment\">// b对象修改，则a也会修改，传址</span></span><br><span class=\"line\">(a == b) ? q = <span class=\"string\">\"true\"</span> : q = <span class=\"string\">\"false\"</span>;    <span class=\"comment\">// 判断 a=b  ，返回true</span></span><br><span class=\"line\">alert(q);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];</span><br><span class=\"line\">(a == b) ? q = <span class=\"string\">\"true\"</span> : q = <span class=\"string\">\"false\"</span>;     <span class=\"comment\">// 这里定义了两个对象，虽然值一样，但是不是同样的地址，所以为false</span></span><br><span class=\"line\">alert(q);    <span class=\"comment\">// 输出\"false\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数内的特殊引用\"><a href=\"#函数内的特殊引用\" class=\"headerlink\" title=\"函数内的特殊引用\"></a>函数内的特殊引用</h3><p>按值传递一个参数给函数就是制作该参数的一个独立复本，即一个只存在于该函数内的复本。即使按引用传递对象和数组时，如果直接在函数中用新值覆盖原先的值，在函数外并不反映新值。只有在对象的属性或者数组的元素改变时，在函数外才可以看出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newa = <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  newa[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] + b;</span><br><span class=\"line\">  newa[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>] + b;</span><br><span class=\"line\">  newa[<span class=\"number\">2</span>] = a[<span class=\"number\">2</span>] + b;</span><br><span class=\"line\">  a = newa;     <span class=\"comment\">// 重新覆盖了引用，所以外部是不可见的</span></span><br><span class=\"line\">  alert(a[<span class=\"number\">0</span>]);  <span class=\"comment\">// 11</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(a1, <span class=\"number\">10</span>);   </span><br><span class=\"line\">alert(a1[<span class=\"number\">0</span>]);     <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><p>前面看了这么多类型，一直都没有介绍字符串类型，它不好直接分为基础类型和引用类型，因为字符串\b可以是任意的长度，看上去应该是引用类型，可是他却不是对象，所以也不可作为引用类型；总结一下，<strong>字符串是按引用(即地址)复制和传递的，但是是按值来比较的。</strong></p>\n<p>请注意，假如有两个 String 对象（用 new String(“something”) 创建的），按引用比较它们，但是，如果其中一个或者两者都是字符串值的话，按值比较它们</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>复制</th>\n<th>传递</th>\n<th>比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数字</td>\n<td>传值</td>\n<td>传值</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>传值</td>\n<td>传值</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>不可变</td>\n<td>不可变</td>\n<td>传值</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>传址</td>\n<td>传址</td>\n<td>传址</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/joe2014/archive/2014/06/28/3813919.html\" target=\"_blank\" rel=\"noopener\">JS 基础知识2 传值和传址</a></li>\n<li><a href=\"http://www.cnblogs.com/idayln/p/3346242.html\" target=\"_blank\" rel=\"noopener\">图解JS的传值与传址</a></li>\n<li><a href=\"http://lxneliu.iteye.com/blog/1567205\" target=\"_blank\" rel=\"noopener\">JS 传值与传址</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列","slug":"前端面试系列","date":"2017-03-17T09:19:17.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/前端面试系列.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先声明一下，这个系列的文章基本上都是摘抄自其他途径的，包括一些大牛小牛的博客、微信公众号或其他人的文章里，而且我会争取持续更新，最后形成一篇对前端基础薄弱的同学也友好的讲解文章，如果该系列中的任何一个知识点能够帮到你（我相信肯定会帮到我的，因为我也要开始找实习了。。），就达到我的目的了；而且该系列文章只会涉及到前端的技术点，像算法和智力题那种是不会涉及的，至于智力题的话，根据我的经验，只能 practice makes perfect (<em>^__^</em>) </p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"/20170318/new-features-of-html5.html\">HTML5新特性</a></li>\n<li><a href=\"/20170318/new-features-of-css3.html\">CSS3新特性</a></li>\n<li><a href=\"/20170319/new-features-of-http2.html\">HTTP2新特性</a></li>\n<li><a href=\"/20170403/css-selector.html\">CSS选择器</a></li>\n<li><a href=\"/20170403/css-box-model.html\">CSS盒子模型</a></li>\n<li><a href=\"/20170404/status-code-of-http-request.html\">HTTP请求的状态码</a></li>\n<li><a href=\"/20170404/session-and-cookie.html\">session&amp;cookie</a></li>\n<li><a href=\"/20170405/tcp-three-handshakes-and-four-breakups.html\">TCP的三次握手与四次分手</a></li>\n<li><a href=\"/20170405/js-implements-inheritance.html\">JS实现继承</a></li>\n<li><a href=\"/20170405/closure-in-js.html\">JS中的闭包</a></li>\n<li><a href=\"/20170412/the-difference-between-window.onload-and-document.read.html\">window.onload和document.ready的区别</a></li>\n<li><a href=\"/20170416/front-end-performance-optimization.html\">前端性能优化</a></li>\n</ul>\n<h2 id=\"其他面试题整理\"><a href=\"#其他面试题整理\" class=\"headerlink\" title=\"其他面试题整理\"></a>其他面试题整理</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000013325778\" target=\"_blank\" rel=\"noopener\">50道CSS基础面试题（附答案）</a></li>\n<li><a href=\"https://yuchengkai.cn/docs/\" target=\"_blank\" rel=\"noopener\">InterviewMap</a></li>\n<li><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"noopener\">前端工程师面试题汇总</a></li>\n<li><a href=\"http://blog.poetries.top/2017/03/12/front-end-interview-summary/\" target=\"_blank\" rel=\"noopener\">前端面试题整理</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008785931\" target=\"_blank\" rel=\"noopener\">20个必会的JavaScript面试题</a></li>\n<li><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"noopener\">Front End Developer Questions</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2EcqlN_lE2AbBmaBagrD0w\" target=\"_blank\" rel=\"noopener\">魔法哥 2013 前端笔试题曝光（附完整解答）</a></li>\n<li><a href=\"https://www.reddit.com/r/cscareerquestions/comments/20ahfq/heres_a_pretty_big_list_of_programming_interview/\" target=\"_blank\" rel=\"noopener\">关于4种数据结构的算法面试问题列表</a></li>\n<li><a href=\"https://www.nowcoder.com/discuss/35805\" target=\"_blank\" rel=\"noopener\">阿里巴巴2018秋招面经之前端岗(1~5面)</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PrHwzQBrQCEx_w_8HcSNgg\" target=\"_blank\" rel=\"noopener\">阿里-蚂蚁金服三轮面试总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/HzS7bPeLTbBwlJacNv7uSA\" target=\"_blank\" rel=\"noopener\">技术面试宝典：很全面的算法和数据结构知识（含代码实现）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011172965\" target=\"_blank\" rel=\"noopener\">18届校招求职面经及总结</a></li>\n</ul>\n","raw":null,"categories":[{"name":"series","path":"api/categories/series.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"CSS","path":"api/tags/CSS.json"},{"name":"HTML","path":"api/tags/HTML.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（12）——前端性能优化","slug":"前端面试系列（12）——前端性能优化","date":"2017-04-16T14:20:57.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/前端面试系列（12）——前端性能优化.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>近几年的前端发展异常火爆，各种框架各种技术层出不穷，而所有的前端框架面临着同一个问题：怎样才能缩短首屏时间，让用户以最快的速度看到页面最想展现的内容；所以，前端性能优化这一问题成为所有前端开发人员需要考虑的需求。下面我将从 html、css、js 等方面介绍前端性能优化的一些方式，考虑到篇幅原因，只会以列表的形式进行简单概括，具体做法可以自行查阅，在这里强烈推荐<a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">雅虎军规</a>，Yahoo Rules 是对于前端性能优化的全面总结，有时间一定要看一看</p>\n<h2 id=\"HTML-的优化\"><a href=\"#HTML-的优化\" class=\"headerlink\" title=\"HTML 的优化\"></a>HTML 的优化</h2><h3 id=\"使用相对-URL\"><a href=\"#使用相对-URL\" class=\"headerlink\" title=\"使用相对 URL\"></a>使用相对 URL</h3><p>某些 href、src 属性如果与当前页面处于同一域名下，则使用相对 URL 能够节省至少一个域名的长度。</p>\n<h3 id=\"删除-HTTP-或者-HTTPS\"><a href=\"#删除-HTTP-或者-HTTPS\" class=\"headerlink\" title=\"删除 HTTP 或者 HTTPS\"></a>删除 HTTP 或者 HTTPS</h3><p>绝对 URL 都以 HTTP 或 HTTPS 等协议头开始，如果能确定 URL 的协议与当前页面 URL 的协议是一致的，或者说该 URL 在多种协议下均是可用的，则可以考虑删除这个协议头。</p>\n<h3 id=\"删除注释\"><a href=\"#删除注释\" class=\"headerlink\" title=\"删除注释\"></a>删除注释</h3><p>考虑不必要的 IE 条件注释和 CDATA 注释及自定义注释。</p>\n<h3 id=\"压缩空白符\"><a href=\"#压缩空白符\" class=\"headerlink\" title=\"压缩空白符\"></a>压缩空白符</h3><p>对于多数标签，可以通过删除多余的空白符来减少 HTML 体积，但是对于 pre 等是例外。</p>\n<h3 id=\"压缩-inline-css-amp-Javascript\"><a href=\"#压缩-inline-css-amp-Javascript\" class=\"headerlink\" title=\"压缩 inline css &amp; Javascript\"></a>压缩 inline css &amp; Javascript</h3><p>不管 inline 还是 external，都需要压缩，这是减小体积的最直接的方式。</p>\n<h3 id=\"CSS-amp-Javascript-尽量外链\"><a href=\"#CSS-amp-Javascript-尽量外链\" class=\"headerlink\" title=\"CSS &amp; Javascript 尽量外链\"></a>CSS &amp; Javascript 尽量外链</h3><p>不仅可以减少体积，还能够充分利用浏览器的缓存机制。</p>\n<h3 id=\"删除元素默认属性\"><a href=\"#删除元素默认属性\" class=\"headerlink\" title=\"删除元素默认属性\"></a>删除元素默认属性</h3><p>在 HTML 规范中，很多 HTML 元素的属性是有默认值的，对于这些默认值可以抹去不写。</p>\n<h3 id=\"避免使用-Iframe\"><a href=\"#避免使用-Iframe\" class=\"headerlink\" title=\"避免使用 Iframe\"></a>避免使用 Iframe</h3><p>创建 iframe 元素的开销要比创建其他类型的 DOM 元素高 1~2 个数量级</p>\n<h3 id=\"避免空链接属性\"><a href=\"#避免空链接属性\" class=\"headerlink\" title=\"避免空链接属性\"></a>避免空链接属性</h3><p>可以看做是上面“删除元素默认属性”的特例，即使图片的地址为空，浏览器依旧会以默认的规则去请求空地址</p>\n<h3 id=\"避免节点深层级嵌套\"><a href=\"#避免节点深层级嵌套\" class=\"headerlink\" title=\"避免节点深层级嵌套\"></a>避免节点深层级嵌套</h3><p>由于浏览器构建 DOM 文档的机制，深层级嵌套的节点在初始化构建时往往需要更多的内存占用，并且在遍历节点时也会更慢些</p>\n<h3 id=\"避免-Table-布局\"><a href=\"#避免-Table-布局\" class=\"headerlink\" title=\"避免 Table 布局\"></a>避免 Table 布局</h3><p>构建 table 的开销也很大</p>\n<h3 id=\"显示指定文档字符集\"><a href=\"#显示指定文档字符集\" class=\"headerlink\" title=\"显示指定文档字符集\"></a>显示指定文档字符集</h3><p>如果浏览器不能获知页面的编码字符集，一般都会在执行脚本和渲染页面前，把字节流缓存，然后再搜索可进行解析的字符集，或以默认的字符集来解析页面代码，这会导致消耗不必要的时间。为了避免浏览器把时间花费在搜寻合适的字符集来进行解码，所以最好在文档中总是显式的指定页面字符集。</p>\n<h2 id=\"CSS-的优化\"><a href=\"#CSS-的优化\" class=\"headerlink\" title=\"CSS 的优化\"></a>CSS 的优化</h2><h3 id=\"把-CSS-放到代码页上端\"><a href=\"#把-CSS-放到代码页上端\" class=\"headerlink\" title=\"把 CSS 放到代码页上端\"></a>把 CSS 放到代码页上端</h3><p>加快渲染</p>\n<h3 id=\"避免-CSS-表达式\"><a href=\"#避免-CSS-表达式\" class=\"headerlink\" title=\"避免 CSS 表达式\"></a>避免 CSS 表达式</h3><p>表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给 CSS 表达式增加一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到 10000 次以上的计算量。</p>\n<h3 id=\"使用-lt-link-gt-而不是-import\"><a href=\"#使用-lt-link-gt-而不是-import\" class=\"headerlink\" title=\"使用 &lt;link&gt; 而不是 @import\"></a>使用 <code>&lt;link&gt;</code> 而不是 <code>@import</code></h3><p>在外部的 CSS 文件中使用 @import 会使得页面在加载时增加额外的延迟。虽然规则允许在样式中调用 @import 来导入其它的 CSS，但浏览器不能并行下载样式，就会导致页面增添了额外的往返耗时。比如，第一个 CSS 文件 first.css 包含了以下内容：@import url(“second.css”)。那么浏览器就必须先把 first.css 下载、解析和执行后，才发现及处理第二个文件 second.css。</p>\n<h3 id=\"避免通配选择器\"><a href=\"#避免通配选择器\" class=\"headerlink\" title=\"避免通配选择器\"></a>避免通配选择器</h3><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免需要消耗更多匹配时间的选择器。比如这种反例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selected</span> * &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>由于 <strong>CSS 选择器从右到左匹配的机制</strong>，浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点，因此其匹配开销是非常大的，通常比开销最小的 ID 选择器高出 1~3 个数量级，所以应避免使用关键选择器是通配选择器的规则。</p>\n<h3 id=\"避免单规则的属性选择器\"><a href=\"#避免单规则的属性选择器\" class=\"headerlink\" title=\"避免单规则的属性选择器\"></a>避免单规则的属性选择器</h3><p>属性选择器根据元素的属性是否存在或其属性值进行匹配，如下例规则会把 herf 属性值等于 ”#index” 的链接元素设置为红色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selected</span> <span class=\"selector-attr\">[href=”#index”]</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>但其匹配开销是非常大的，浏览器先匹配所有的元素，检查其是否有 href 属性并且 herf 属性值等于 ”#index”， 然后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点。所以应避免使用关键选择器是单规则属性选择器的规则。</p>\n<h3 id=\"避免类正则的属性选择器\"><a href=\"#避免类正则的属性选择器\" class=\"headerlink\" title=\"避免类正则的属性选择器\"></a>避免类正则的属性选择器</h3><p>CSS3 添加了复杂的属性选择器，可以通过类正则表达式的方式对元素的属性值进行匹配。当然这些类型的选择器定是会影响性能的，正则表达式匹配会比基于类别的匹配会慢很多。大部分情况下我们应尽量避免使用 *=， |=， ^=， $=，和 ~= 语法的属性选择器。</p>\n<h2 id=\"JavaScript-的优化\"><a href=\"#JavaScript-的优化\" class=\"headerlink\" title=\"JavaScript 的优化\"></a>JavaScript 的优化</h2><h3 id=\"脚本放到-HTML-代码页底部\"><a href=\"#脚本放到-HTML-代码页底部\" class=\"headerlink\" title=\"脚本放到 HTML 代码页底部\"></a>脚本放到 HTML 代码页底部</h3><p>加快渲染，当然如果你的 js 会影响 dom 建立，那放在哪都是一样的了</p>\n<h3 id=\"移除重复脚本\"><a href=\"#移除重复脚本\" class=\"headerlink\" title=\"移除重复脚本\"></a>移除重复脚本</h3><p>封装方法是一个前端开发人员最基本的技能</p>\n<h3 id=\"减少-DOM-访问\"><a href=\"#减少-DOM-访问\" class=\"headerlink\" title=\"减少 DOM 访问\"></a>减少 DOM 访问</h3><p>使用 JavaScript 访问 DOM 元素是比较慢的，因此为了提升性能，应该做到：</p>\n<ul>\n<li>缓存已经查询过的元素；</li>\n<li>线下更新完节点之后再将它们添加到文档树中；</li>\n<li>避免使用 JavaScript 来修改页面布局；</li>\n</ul>\n<h3 id=\"使用事件代理\"><a href=\"#使用事件代理\" class=\"headerlink\" title=\"使用事件代理\"></a>使用事件代理</h3><p>有时候我们会感觉到页面反应迟钝，这是因为 DOM 树元素中附加了过多的事件句柄并且些事件句病被频繁地触发。这就是为什么说使用事件代理是一种好方法了。如果你在一个 div 中有 10 个按钮，你只需要在 div 上附加一次事件句柄就可以了，而不用去为每一个按钮增加一个句柄。事件冒泡时你可以捕捉到事件并判断出是哪个事件发出的。</p>\n<h3 id=\"缓存选择器查询结果\"><a href=\"#缓存选择器查询结果\" class=\"headerlink\" title=\"缓存选择器查询结果\"></a>缓存选择器查询结果</h3><p>选择器查询是开销很大的方法。所以，使用选择器的次数应该越少越好，并且尽可能缓存选中的结果，便于以后反复使用。 不要使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"string\">'#top'</span>).find(<span class=\"string\">'p.classA'</span>);</span><br><span class=\"line\">jQuery(<span class=\"string\">'#top'</span>).find(<span class=\"string\">'p.classB'</span>);</span><br></pre></td></tr></table></figure>\n<p>而是使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cached = jQuery(<span class=\"string\">'#top'</span>);</span><br><span class=\"line\">cached.find(<span class=\"string\">'p.classA'</span>);</span><br><span class=\"line\">cached.find(<span class=\"string\">'p.classB'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用微类库\"><a href=\"#使用微类库\" class=\"headerlink\" title=\"使用微类库\"></a>使用微类库</h3><p>通常开发者都会使用 JavaScript 类库，如 jQuery、Mootools、YUI、Dojo 等，但是开发者往往只是使用 JavaScript 类库中的部分功能。为了更大的提升性能，应尽量避免使用这类大而全的类库，而是按需使用微类库来辅助开发。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>[Absolute HTML Compressor](<a href=\"http://www.alentum.com/ahc/\" target=\"_blank\" rel=\"noopener\">http://www.alentum.com/ahc/</a> “Absolute HTML Compressor”）：HTML 的优化工具，压缩效果比较理想</li>\n<li><a href=\"https://book.douban.com/subject/3686503/\" target=\"_blank\" rel=\"noopener\">Even Faster Web Sites</a>：关于前端优化的书，本人没看过，但是豆瓣评分 8.6 的它应该还不错吧</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/news/2010/05/baidu-html-optimize\" target=\"_blank\" rel=\"noopener\">不应忽视的HTML优化</a> </li>\n<li><a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">Yahoo Rules</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007677580\" target=\"_blank\" rel=\"noopener\">前端性能优化黄金法则</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002418920\" target=\"_blank\" rel=\"noopener\">网站性能优化工具大全</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008829958\" target=\"_blank\" rel=\"noopener\">WEB前端性能优化常见方法</a></li>\n</ul>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"性能优化","path":"api/tags/性能优化.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（1）——HTML5新特性","slug":"前端面试系列（1）——HTML5新特性","date":"2017-03-18T10:32:25.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（1）——HTML5新特性.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_320.jpeg","content":"<p>这道问题被问的比较少，因为在如今前端框架大行其道的趋势下，对于 HTML 的理解似乎已经变得不那么重要了，况且浏览器对 H5（是的，我们通常说的 H5 其实就是 HTML5，5 代表版本）的支持还不那么完美，但是了解一下还是有助于自己前端水平的提升的，在查阅资料的过程中我发现有些特性我也是第一次知道，不过有些特性已经显示了其强大之处，比如：canvas，高能预警，大量干货：</p>\n<h2 id=\"摒弃了旧特性\"><a href=\"#摒弃了旧特性\" class=\"headerlink\" title=\"摒弃了旧特性\"></a>摒弃了旧特性</h2><h3 id=\"1-原-HTML-声明方式将失效，将采用简单的声明方式\"><a href=\"#1-原-HTML-声明方式将失效，将采用简单的声明方式\" class=\"headerlink\" title=\"1. 原 HTML 声明方式将失效，将采用简单的声明方式\"></a>1. 原 HTML 声明方式将失效，将采用简单的声明方式</h3><p>原来：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" </span></span><br><span class=\"line\"><span class=\"meta\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-脚本和链接无需-type，在-HTML5-中，你只需要用简化的代码来给你的网页添加-CSS-和-JavaScript-文件，而不再需要指定类型属性\"><a href=\"#2-脚本和链接无需-type，在-HTML5-中，你只需要用简化的代码来给你的网页添加-CSS-和-JavaScript-文件，而不再需要指定类型属性\" class=\"headerlink\" title=\"2. 脚本和链接无需 type，在 HTML5 中，你只需要用简化的代码来给你的网页添加 CSS 和 JavaScript 文件，而不再需要指定类型属性\"></a>2. 脚本和链接无需 type，在 HTML5 中，你只需要用简化的代码来给你的网页添加 CSS 和 JavaScript 文件，而不再需要指定类型属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"path/to/stylesheet.css\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新的内容元素\"><a href=\"#新的内容元素\" class=\"headerlink\" title=\"新的内容元素\"></a>新的内容元素</h2><h3 id=\"1-figure\"><a href=\"#1-figure\" class=\"headerlink\" title=\"1. figure\"></a>1. figure</h3><p>可以更加语义化地表示带标题的图片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">”path/to/image”</span> <span class=\"attr\">alt</span>=<span class=\"string\">”About</span> <span class=\"attr\">image</span>” /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an image of something interesting. <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-hgroup\"><a href=\"#2-hgroup\" class=\"headerlink\" title=\"2. hgroup\"></a>2. hgroup</h3><p>一般在 header 里面用来将一组标题组合在一起</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span> Recall Fan Page <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Only for people who want the memory of a lifetime. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">hgroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-mark\"><a href=\"#3-mark\" class=\"headerlink\" title=\"3. mark\"></a>3. mark</h3><p>高亮的作用，比如用户的搜索内容可以在文章中用 <code>&lt;mark&gt;</code> 进行修饰</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Search Results <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> They were interrupted, just after Quato said, <span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>”Open your Mind”<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span>. <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-output\"><a href=\"#4-output\" class=\"headerlink\" title=\"4. output\"></a>4. output</h3><p>用来显示计算结果，也有一个和 label 一样的 for 属性</p>\n<h3 id=\"5-small\"><a href=\"#5-small\" class=\"headerlink\" title=\"5. small\"></a>5. small</h3><p>重新定义了 <code>&lt;small&gt;</code>，现在被用来表示小的排版，如网站底部的版权声明</p>\n<h3 id=\"6-article\"><a href=\"#6-article\" class=\"headerlink\" title=\"6. article\"></a>6. article</h3><p>定义文章</p>\n<h3 id=\"7-footer\"><a href=\"#7-footer\" class=\"headerlink\" title=\"7. footer\"></a>7. footer</h3><p>定义尾部</p>\n<h3 id=\"8-header\"><a href=\"#8-header\" class=\"headerlink\" title=\"8. header\"></a>8. header</h3><p>定义头部</p>\n<h3 id=\"9-nav\"><a href=\"#9-nav\" class=\"headerlink\" title=\"9. nav\"></a>9. nav</h3><p>定义导航栏</p>\n<h3 id=\"10-section\"><a href=\"#10-section\" class=\"headerlink\" title=\"10. section\"></a>10. section</h3><p>定义 section 区域</p>\n<h2 id=\"新的属性：\"><a href=\"#新的属性：\" class=\"headerlink\" title=\"新的属性：\"></a>新的属性：</h2><h3 id=\"1-contenteditable\"><a href=\"#1-contenteditable\" class=\"headerlink\" title=\"1. contenteditable\"></a>1. contenteditable</h3><p>让你的内容可编辑</p>\n<h3 id=\"2-placeholder\"><a href=\"#2-placeholder\" class=\"headerlink\" title=\"2. placeholder\"></a>2. placeholder</h3><p>不必通过javascript就可以显示提示内容了</p>\n<h3 id=\"3-input-的-新type\"><a href=\"#3-input-的-新type\" class=\"headerlink\" title=\"3. input 的 新type\"></a>3. input 的 新type</h3><p>包括 email（如果给 input 的 type 设置为 email，浏览器就会验证这个输入是否是 email 类型）、range（可以创建滑块，它接受 min，max，step 和 value 属性）、color（颜色选择器）等等</p>\n<h3 id=\"4-input-的新属性\"><a href=\"#4-input-的新属性\" class=\"headerlink\" title=\"4. input 的新属性\"></a>4. input 的新属性</h3><p>包括 autocomplete（on / off，是否使用输入字段的自动完成功能）、autofocus（规定输入字段在页面加载时是否获得焦点，但不试用于 type=”hidden”）、required（指示输入字段的值是必须的）、form（规定输入字段所属的一个或多个表单）-&gt; 其实新属性还有很多，可以点击文末 w3c 官网链接进行查看</p>\n<h3 id=\"5-pattern-属性\"><a href=\"#5-pattern-属性\" class=\"headerlink\" title=\"5. pattern 属性\"></a>5. pattern 属性</h3><p>可以在 input 里直接使用正则表达式验证了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">”</span>\" <span class=\"attr\">method</span>=<span class=\"string\">”post”</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">”username”</span>&gt;</span>Create a Username: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">”text”</span> <span class=\"attr\">name</span>=<span class=\"string\">”username”</span> <span class=\"attr\">id</span>=<span class=\"string\">”username”</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">”4-10″</span> <span class=\"attr\">pattern</span>=<span class=\"string\">”\\[A-Za-z\\]&#123;4,10&#125;”</span> <span class=\"attr\">autofocus</span> <span class=\"attr\">required</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">”submit”</span>&gt;</span>Go <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新的重要的元素\"><a href=\"#新的重要的元素\" class=\"headerlink\" title=\"新的重要的元素\"></a>新的重要的元素</h2><h3 id=\"1-canvas\"><a href=\"#1-canvas\" class=\"headerlink\" title=\"1. canvas\"></a>1. canvas</h3><p>使用 Javascript 在网页上绘制图像，canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法；将在游戏、图表制作、banner 广告、模拟器、远程计算机控制、字体设计、图形编辑器、其他可嵌入网站的内容等方面大有可为；</p>\n<h4 id=\"SVG-与-Canvas-两者间的区别：\"><a href=\"#SVG-与-Canvas-两者间的区别：\" class=\"headerlink\" title=\"SVG 与 Canvas 两者间的区别：\"></a>SVG 与 Canvas 两者间的区别：</h4><ol>\n<li>SVG 是一种使用 XML 描述 2D 图形的语言。Canvas 通过 JavaScript 来绘制 2D 图形。</li>\n<li>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。</li>\n<li>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。Canvas 是逐像素进行渲染的。在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</li>\n</ol>\n<p>下表列出了 canvas 与 SVG 之间的一些不同之处：</p>\n<table>\n<thead>\n<tr>\n<th>Canvas</th>\n<th>SVG</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>依赖分辨率</td>\n<td>不依赖分辨率</td>\n</tr>\n<tr>\n<td>不支持事件处理器</td>\n<td>支持事件处理器</td>\n</tr>\n<tr>\n<td>弱的文本渲染能力</td>\n<td>最适合带有大型渲染区域的应用程序（比如谷歌地图）</td>\n</tr>\n<tr>\n<td>能够以 .png 或 .jpg 格式保存结果图像</td>\n<td>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</td>\n</tr>\n<tr>\n<td>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</td>\n<td>不适合游戏应用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-视频-video-元素\"><a href=\"#2-视频-video-元素\" class=\"headerlink\" title=\"2. 视频 video 元素\"></a>2. 视频 video 元素</h3><p>今天，大多数视频是通过插件（比如 Flash）来显示的。然而，并非所有浏览器都拥有同样的插件。通用的视频播放解决方案是 flash 和 flv（flash 从 9 开始支持 h.264 的 mp4）。但是随着 iOS 设备的流行，flash 已经不是万能药了，越来越多的视频网站提供多元的解决方案，而且偏向于 HTML5：也就是说，通过检测 agent 是否支持 html5 来决定使用 video 还是 flash。在面对 IE8 以下的浏览器时，flash 几乎是唯一的选择(silverlight 的接受度普遍不高)。</p>\n<h3 id=\"3-音频-audio-元素\"><a href=\"#3-音频-audio-元素\" class=\"headerlink\" title=\"3. 音频 audio 元素\"></a>3. 音频 audio 元素</h3><p>同理可见 video 元素</p>\n<h2 id=\"对本地离线存储的更好的支持\"><a href=\"#对本地离线存储的更好的支持\" class=\"headerlink\" title=\"对本地离线存储的更好的支持\"></a>对本地离线存储的更好的支持</h2><h3 id=\"1-Web-worker\"><a href=\"#1-Web-worker\" class=\"headerlink\" title=\"1. Web worker\"></a>1. Web worker</h3><p>运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p>\n<h3 id=\"2-Web-Storage\"><a href=\"#2-Web-Storage\" class=\"headerlink\" title=\"2. Web Storage\"></a>2. Web Storage</h3><p>将数据存储在本地，而不会和服务器发生任何交互，使得数据操作更加简便</p>\n<ul>\n<li>Web Storage 与 Cookie 相比存在不少的优势，概括为以下几点：存储空间更大，能提供 5MB 的存储空间（不同浏览器的提供的空间不同），Cookie 仅 4KB</li>\n<li>存储内容不会发送到服务器：当设置了 Cookie 后，Cookie 的内容会随着请求一并发送的服务器，这对于本地存储的数据是一种带宽浪费。而 Web Storage 中的数据则仅仅是存在本地，不会与服务器发生任何交互。</li>\n<li>更多丰富易用的接口：Web Storage 提供了一套更为丰富的接口，使得数据操作更为简便。(开发者的福利)</li>\n<li>独立的存储空间：每个域（包括子域）有独立的存储空间，各个存储空间是完全独立的，因此不会造成数据混乱。</li>\n</ul>\n<h3 id=\"3-Application-Cache\"><a href=\"#3-Application-Cache\" class=\"headerlink\" title=\"3. Application Cache\"></a>3. Application Cache</h3><p>使用 HTML5，通过创建 cache manifest 文件，可以轻松地创建 web 应用的离线版本，HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。应用程序缓存为应用带来三个优势：</p>\n<ul>\n<li>离线浏览 - 用户可在应用离线时使用它们</li>\n<li>速度 - 已缓存资源加载得更快</li>\n<li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。</li>\n</ul>\n<h2 id=\"地理位置-API\"><a href=\"#地理位置-API\" class=\"headerlink\" title=\"地理位置 API\"></a>地理位置 API</h2><p>Geolacation API 用于获得用户的地理位置，实例：</p>\n<ul>\n<li>更新本地信息</li>\n<li>显示用户周围的兴趣点</li>\n<li>交互式车载导航系统（GPS）</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>下面一张图展示了这些新特性的应用场景和可用玩法：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_320.jpeg\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://www.w3school.com.cn/html5/index.asp\" target=\"_blank\" rel=\"noopener\">HTML 5 教程</a></li>\n</ul>\n","raw":null,"categories":[{"name":"html","path":"api/categories/html.json"}],"tags":[{"name":"HTML","path":"api/tags/HTML.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（2）——CSS3新特性","slug":"前端面试系列（2）——CSS3新特性","date":"2017-03-18T10:37:57.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（2）——CSS3新特性.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_138.png","content":"<p>CSS3 是 CSS 的 v3 版本，这套新标准提供了更加丰富且实用的规范，如：盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等等；和 HTML5 不同，CSS3 的新特性基本上得到了广泛应用，而知道并熟练运用这些新特性已经成为前端人员的必修课：</p>\n<h2 id=\"更方便快捷的选择器\"><a href=\"#更方便快捷的选择器\" class=\"headerlink\" title=\"更方便快捷的选择器\"></a>更方便快捷的选择器</h2><blockquote>\n<p>:nth-child、:nth-last-child、:nth-of-type、:last-child、:only-child、:empty</p>\n</blockquote>\n<p>CSS3 新增的选择器有很多，就不一一介绍了，这里有一篇关于 CSS3 新增选择器的文章总结的很好：<a href=\"http://www.cnblogs.com/libingql/p/4375354.html\" target=\"_blank\" rel=\"noopener\">CSS系列：CSS3新增选择器</a></p>\n<h2 id=\"框模型\"><a href=\"#框模型\" class=\"headerlink\" title=\"框模型\"></a>框模型</h2><blockquote>\n<p>border-radius（圆角）、box-shadow（盒子阴影）、border-image（边框图片）</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><blockquote>\n<p>background-size（背景大小）、background-origin（背景的定位）、background-clip（背景的绘制区域）、支持多重背景图片（background-image: url(bg_flower.gif), url(bg_flower_2.gif);）</p>\n</blockquote>\n<h2 id=\"渐变效果\"><a href=\"#渐变效果\" class=\"headerlink\" title=\"渐变效果\"></a>渐变效果</h2><p>gradient 属性可以非常方便的实现渐变色，同时可以设置渐变的方向和渐变方式等，实现各种复杂的效果。文末有一篇讲解 gradient 的文章讲的很不错，感兴趣的可以去瞅瞅。</p>\n<h2 id=\"文本效果\"><a href=\"#文本效果\" class=\"headerlink\" title=\"文本效果\"></a>文本效果</h2><blockquote>\n<p>text-shadow（文本阴影）、word-break（规定非中日韩文本的换行规则）、word-wrap（允许对长的不可分割的单词进行分割并换行到下一行）</p>\n</blockquote>\n<p>CSS3 的文本属性比较多，还是用一张图片代替吧（来自 w3c）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_138.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h2><p>可以在网页中使用除默认字体之外的其他字体，先定义字体的名称，然后引入字体文件，在需要使用该字体的时候就通过 font-family 属性引用字体的名称</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"css\">@<span class=\"keyword\">font-face</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  font-family: myFirstFont;</span></span><br><span class=\"line\"><span class=\"undefined\">  src: url('Sansation_Light.ttf'),</span></span><br><span class=\"line\"><span class=\"undefined\">      url('Sansation_Light.eot'); /* IE9+ */</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">div&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  font-family: myFirstFont;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><p>我认为这是 CSS3 最“好用”的特性，也正是因为这个属性（当然，下面那个属性也功不可没），通过 CSS3 转换就可以能够堆元素进行移动、缩放、转动、拉长或拉伸；同时结合对持续时间和延迟时间的控制，可以“创造”出非常炫的动画效果，大大提升了网页的展示效果。同时分为 2D 和 3D 转换，由于内容繁多，就不一一介绍了，感兴趣的小伙伴可以点击文末的链接进行进一步的学习。</p>\n<h2 id=\"transtion\"><a href=\"#transtion\" class=\"headerlink\" title=\"transtion\"></a>transtion</h2><p>当元素从一种样式变换为另一种样式时为元素添加效果，使动画更加“圆润”流畅</p>\n<h2 id=\"keyframes\"><a href=\"#keyframes\" class=\"headerlink\" title=\"@keyframes\"></a>@keyframes</h2><p>这是个面试中会经常问到的属性，原因是其应用领域非常广泛，因为如今用户的时间非常宝贵，同时网络上的信息又是鱼龙混杂，如何在有限的时间内抓住用户眼球是一个重要的课题，而 @keyframes 就可以让自己的网页焕然一新并且与众不同，通过 @keyframes 规则可以创建关键帧动画，再结合 animation 就可以使元素“动”起来。</p>\n<h2 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h2><p>通过column-count（列数）、column-fill（如何填充列）、column-gap（列之间的间隔）、column-width（列的宽度）可以创建多个列来对文本进行布局，就像报纸那样。</p>\n<h2 id=\"用户界面\"><a href=\"#用户界面\" class=\"headerlink\" title=\"用户界面\"></a>用户界面</h2><ul>\n<li>resize：是否可由用户调整元素尺寸</li>\n<li>box-sizing：border-box / content-box，这个属性我也很喜欢，可以改变传统的“盒子模型”，方便进行布局</li>\n<li>outline-offset：对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓（轮廓不占用空间并且可能是非矩形，这两点和边框不同）</li>\n</ul>\n<h2 id=\"Flex-弹性布局\"><a href=\"#Flex-弹性布局\" class=\"headerlink\" title=\"Flex 弹性布局\"></a>Flex 弹性布局</h2><p>这个属性让开发者非常头疼的“居中”问题找到了一种十分简便的答案，可以非常方便地实现让一个或多个元素在其父元素中垂直居中，建议大家去看阮一峰对其的讲解，很全面并且简单易懂（链接在文末）。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://www.w3school.com.cn/css3/index.asp\" target=\"_blank\" rel=\"noopener\">CSS3 教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">Flex 布局教程：语法篇</a></li>\n<li><a href=\"http://www.w3cplus.com/css3/new-css3-radial-gradient.html\" target=\"_blank\" rel=\"noopener\">再说CSS3渐变——径向渐变</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（6）——HTTP请求的状态码","slug":"前端面试系列（6）——HTTP请求的状态码","date":"2017-04-04T13:38:16.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（6）——HTTP请求的状态码.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先说一下 HTTP，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言（HTML）文档从 Web 服务器传送到客户端的浏览器；而状态码在 Response 消息中的第一行（状态行），用来告诉 HTTP 客户端，HTTP 服务器是否产生了预期的 Response</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><p>HTTP/1.1 中定义了 5 类状态码，状态码由三位数字组成，第一个数字定义了响应的类别</p>\n<ul>\n<li>1XX  提示信息 - 表示请求已被成功接收，继续处理</li>\n<li>2XX  成功 - 表示请求已被成功接收，理解，接受</li>\n<li>3XX  重定向 - 要完成请求必须进行更进一步的处理</li>\n<li>4XX  客户端错误 - 请求有语法错误或请求无法实现</li>\n<li>5XX  服务器端错误 - 服务器未能实现合法的请求</li>\n</ul>\n<h2 id=\"状态码含义\"><a href=\"#状态码含义\" class=\"headerlink\" title=\"状态码含义\"></a>状态码含义</h2><p><strong>粗体为常见状态码，需要多留意</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">英文解释</th>\n<th style=\"text-align:left\">中文解释</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">Continue</td>\n<td style=\"text-align:left\">初始的请求已经接受，客户应当继续发送请求的其余部分</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\">Switching Protocols</td>\n<td style=\"text-align:left\">服务器将遵从客户的请求转换到另外一种协议</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>200</strong></td>\n<td style=\"text-align:center\"><strong>OK</strong></td>\n<td style=\"text-align:left\"><strong>一切正常，对GET和POST请求的应答文档跟在后面</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201</td>\n<td style=\"text-align:center\">Created</td>\n<td style=\"text-align:left\">服务器已经创建了文档，Location头给出了它的URL</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">202</td>\n<td style=\"text-align:center\">Accepted</td>\n<td style=\"text-align:left\">已经接受请求，但处理尚未完成</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">203</td>\n<td style=\"text-align:center\">Non-Authoritative Information</td>\n<td style=\"text-align:left\">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">204</td>\n<td style=\"text-align:center\">No Content</td>\n<td style=\"text-align:left\">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而 Servlet 可以确定用户文档足够新，这个状态代码是很有用的</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">205</td>\n<td style=\"text-align:center\">Reset Content</td>\n<td style=\"text-align:left\">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">206</td>\n<td style=\"text-align:center\">Partial Content</td>\n<td style=\"text-align:left\">客户发送了一个带有Range头的GET请求，服务器完成了它</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300</td>\n<td style=\"text-align:center\">Multiple Choices</td>\n<td style=\"text-align:left\">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>301</strong></td>\n<td style=\"text-align:center\"><strong>Moved Permanently</strong></td>\n<td style=\"text-align:left\"><strong>客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>302</strong></td>\n<td style=\"text-align:center\"><strong>Found</strong></td>\n<td style=\"text-align:left\"><strong>类似于 301，但新的URL应该被视为临时性的替代，而不是永久性的</strong></td>\n<td style=\"text-align:left\"><strong>在 HTTP1.0 中对应的状态信息是 “Moved Temporatily”</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">303</td>\n<td style=\"text-align:center\">See Other</td>\n<td style=\"text-align:left\">类似于301/302，不同之处在于，如果原来的请求是 POST，Location 头指定的重定向目标文档应该通过 GET 提取</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>304</strong></td>\n<td style=\"text-align:center\"><strong>Not Modified</strong></td>\n<td style=\"text-align:left\"><strong>客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">305</td>\n<td style=\"text-align:center\">Use Proxy</td>\n<td style=\"text-align:left\">客户请求的文档应该通过 Location 头所指明的代理服务器提取</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">307</td>\n<td style=\"text-align:center\">Temporary Redirect</td>\n<td style=\"text-align:left\">和 302 相同。许多浏览器会错误地响应 302 应答进行重定向，即使原来的请求是 POST，即使它实际上只能在 POST 请求的应答是 303 时才能重定向。由于这个原因，HTTP 1.1 新增了 307，以便更加清除地区分几个状态代码：当出现 303 应答时，浏览器可以跟随重定向的 GET 和 POST 请求；如果是 307 应答，则浏览器只能跟随对 GET 请求的重定向</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">Bad Request</td>\n<td style=\"text-align:left\">请求出现语法错误</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">401</td>\n<td style=\"text-align:center\">Unauthorized</td>\n<td style=\"text-align:left\">客户试图未经授权访问受密码保护的页面。应答中会包含一个 WWW-Authenticate 头，浏览器据此显示用户名字/密码对话框，然后在填写合适的 Authorization 头后再次发出请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>403</strong></td>\n<td style=\"text-align:center\"><strong>Forbidden</strong></td>\n<td style=\"text-align:left\"><strong>资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>404</strong></td>\n<td style=\"text-align:center\"><strong>Not Found</strong></td>\n<td style=\"text-align:left\"><strong>无法找到指定位置的资源。这也是一个常用的应答</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">405</td>\n<td style=\"text-align:center\">Method Not Allowed</td>\n<td style=\"text-align:left\">请求方法（GET、POST、HEAD、Delete、PUT、TRACE 等）对指定的资源不适用。</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">406</td>\n<td style=\"text-align:center\">Not Acceptable</td>\n<td style=\"text-align:left\">指定的资源已经找到，但它的 MIME 类型和客户在 Accpet 头中所指定的不兼容</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">407</td>\n<td style=\"text-align:center\">Proxy Authentication Required</td>\n<td style=\"text-align:left\">类似于 401，表示客户必须先经过代理服务器的授权</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">408</td>\n<td style=\"text-align:center\">Request Timeout</td>\n<td style=\"text-align:left\">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">409</td>\n<td style=\"text-align:center\">Conflict</td>\n<td style=\"text-align:left\">通常和 PUT 请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">410</td>\n<td style=\"text-align:center\">Gone</td>\n<td style=\"text-align:left\">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">411</td>\n<td style=\"text-align:center\">Length Required</td>\n<td style=\"text-align:left\">服务器不能处理请求，除非客户发送一个 Content-Length 头</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">412</td>\n<td style=\"text-align:center\">Precondition Failed</td>\n<td style=\"text-align:left\">请求头中指定的一些前提条件失败</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">413</td>\n<td style=\"text-align:center\">Request Entity Too Large</td>\n<td style=\"text-align:left\">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个 Retry-After 头</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">414</td>\n<td style=\"text-align:center\">Request URI Too Long</td>\n<td style=\"text-align:left\">URI 太长</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">500</td>\n<td style=\"text-align:center\">Internal Server Error</td>\n<td style=\"text-align:left\">服务器遇到了意料不到的情况，不能完成客户的请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">501</td>\n<td style=\"text-align:center\">Not Implemented</td>\n<td style=\"text-align:left\">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>502</strong></td>\n<td style=\"text-align:center\"><strong>Bad Gateway</strong></td>\n<td style=\"text-align:left\"><strong>服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>503</strong></td>\n<td style=\"text-align:center\"><strong>Service Unavailable</strong></td>\n<td style=\"text-align:left\"><strong>服务器由于维护或者负载过重未能应答。例如，Servlet 可能在数据库连接池已满的情况下返回503。服务器返回 503 时可以提供一个 Retry-After 头</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>504</strong></td>\n<td style=\"text-align:center\"><strong>Gateway Timeout</strong></td>\n<td style=\"text-align:left\"><strong>由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</strong></td>\n<td style=\"text-align:left\"><strong>HTTP 1.1 新</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">505</td>\n<td style=\"text-align:center\">HTTP Version Not Supported</td>\n<td style=\"text-align:left\">服务器不支持请求中所指明的 HTTP 版本</td>\n<td style=\"text-align:left\">HTTP 1.1 新</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>[一篇学习HTTP状态码的神文]（<a href=\"http://www.codeceo.com/article/http-code.html）\" target=\"_blank\" rel=\"noopener\">http://www.codeceo.com/article/http-code.html）</a></li>\n</ul>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"面试","path":"api/tags/面试.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]},{"title":"前端面试系列（7）——session&cookie","slug":"前端面试系列（7）——session&cookie","date":"2017-04-04T14:05:42.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（7）——session&cookie.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>本篇文章参考了一些开发者对于 session 和 cookie 的讲解，对这些内容进行了筛选和合并，同时加入了我的理解，争取用最短的篇幅给大家讲清楚这两个概念，因为在前端面试或笔试中会经常碰到这两个问题，同时在很多项目中也会用到</p>\n<h2 id=\"session-的概念\"><a href=\"#session-的概念\" class=\"headerlink\" title=\"session 的概念\"></a>session 的概念</h2><p>Web 应用程序是使用 HTTP 协议传输数据的。<strong>HTTP 协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话</strong>。即用户 A 购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户 A 的会话还是用户 B 的会话了。要跟踪该会话，必须引入一种机制。<br>当浏览器第一次发送请求时，服务器自动生成了一个 Session 和一个 Session ID 用来唯一标识这个 Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的 Session ID 放在请求中一并发送到服务器上，服务器从请求中提取出 Session ID，并和保存的所有 Session ID 进行对比，找到这个用户对应的 Session。一般情况下，服务器会在一定时间内（默认 30 分钟）保存这个 Session，过了时间限制，就会销毁这个 Session。在销毁之前，程序员可以将用户的一些数据以 Key 和 Value 的形式暂时存放在这个 Session 中。当然，也有使用数据库将这个 Session 序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。</p>\n<h2 id=\"session-的客户端实现形式\"><a href=\"#session-的客户端实现形式\" class=\"headerlink\" title=\"session 的客户端实现形式\"></a>session 的客户端实现形式</h2><p>即 session ID 的保存方法，一般浏览器提供了两种方式来保存，还有一种是程序员使用 html 隐藏域的方式自定义实现：</p>\n<h3 id=\"使用-Cookie-来保存\"><a href=\"#使用-Cookie-来保存\" class=\"headerlink\" title=\"使用 Cookie 来保存\"></a>使用 Cookie 来保存</h3><p>这是最常见的方法，\b比如“记住我的登录状态”功能的实现正式基于这种方式的。服务器通过设置 Cookie 的方式将 Session ID 发送到浏览器。如果我们不设置这个过期时间，那么这个 Cookie 将不存放在硬盘上，当浏览器关闭的时候，Cookie 就消失了，这个 Session ID 就丢失了。如果我们设置这个时间为若干天之后，那么这个 Cookie 会保存在客户端硬盘中，即使浏览器关闭，这个值仍然存在，下次访问相应网站时，同样会发送到服务器上。</p>\n<h3 id=\"使用-URL-附加信息的方式\"><a href=\"#使用-URL-附加信息的方式\" class=\"headerlink\" title=\"使用 URL 附加信息的方式\"></a>使用 URL 附加信息的方式</h3><p>也就是像我们经常看到 JSP 网站会有 aaa.jsp?JSESSIONID=* 一样的。这种方式和第一种方式里面不设置 Cookie 过期时间是一样的。</p>\n<h3 id=\"第三种方式是在页面表单里面增加隐藏域\"><a href=\"#第三种方式是在页面表单里面增加隐藏域\" class=\"headerlink\" title=\"第三种方式是在页面表单里面增加隐藏域\"></a>第三种方式是在页面表单里面增加隐藏域</h3><p>这种方式实际上和第二种方式一样，只不过前者通过 GET 方式发送数据，后者使用 POST 方式发送数据。但是明显后者比较麻烦。</p>\n<h2 id=\"cookie-的局限性\"><a href=\"#cookie-的局限性\" class=\"headerlink\" title=\"cookie 的局限性\"></a>cookie 的局限性</h2><p>Session 是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的 SessionID，用该 SessionID 为标识符来存取服务器端的 Session 存储空间。而 SessionID 这一数据则是保存到客户端，用 Cookie 保存的，用户提交页面时，会将这一 SessionID 提交到服务器端，来存取 Session 数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用 Cookie，那么 Session 也会失效。服务器也可以通过 URL 重写的方式来传递 SessionID 的值，因此不是完全依赖 Cookie。如果客户端 Cookie 禁用，则服务器可以自动通过重写URL的方式来保存 Session 的值，并且这个过程对程序员透明。可以试一下，即使不写 Cookie，在使用 request.getCookies(); 时取出的 Cookie 数组的长度也是 1，而这个 Cookie 的名字就是 JSESSIONID，还有一个很长的二进制的字符串，是 SessionID 的值。</p>\n<h2 id=\"cookie-的性质\"><a href=\"#cookie-的性质\" class=\"headerlink\" title=\"cookie 的性质\"></a>cookie 的性质</h2><ul>\n<li>不可跨域</li>\n<li>保存中文只能编码（UTF-8）</li>\n</ul>\n<h2 id=\"cookie-的应用\"><a href=\"#cookie-的应用\" class=\"headerlink\" title=\"cookie 的应用\"></a>cookie 的应用</h2><ol>\n<li>判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除 cookie，则每次登录必须从新填写登录的相关信息。</li>\n<li>另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入 cookie，在最后付款时从 cookie 中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。</li>\n<li>记录用户访问次数，服务器可以通过操作 Cookie 类对象对客户端 Cookie 进行操作</li>\n</ol>\n<h2 id=\"cookie-和-session-的区别和联系\"><a href=\"#cookie-和-session-的区别和联系\" class=\"headerlink\" title=\"cookie 和 session 的区别和联系\"></a>cookie 和 session 的区别和联系</h2><ol>\n<li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li>\n<li>cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗；考虑到安全应当使用session。</li>\n<li>session 会在一定时间内保存在服务器的一个文件里（不是内存）。当访问增多，会比较占用你服务器的性能；考虑到减轻服务器性能方面，应当使用 COOKIE。</li>\n<li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li>\n<li>session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li>\n<li>Session 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中； Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。</li>\n<li>如果说 <strong>Cookie 机制是通过检查客户身上的“通行证”来确定客户身份的话，那么 Session 机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session 相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</strong></li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/shiyangxt/archive/2008/10/07/1305506.html\" target=\"_blank\" rel=\"noopener\">cookie 和session 的区别详解</a></li>\n<li><a href=\"https://www.zhihu.com/question/19786827\" target=\"_blank\" rel=\"noopener\">COOKIE和SESSION有什么区别</a></li>\n<li><a href=\"http://blog.csdn.net/duan1078774504/article/details/51912868\" target=\"_blank\" rel=\"noopener\">浅谈Session与Cookie的区别与联系</a></li>\n<li><a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954\" target=\"_blank\" rel=\"noopener\">Cookie/Session机制详解</a></li>\n</ul>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（9）——JS实现继承","slug":"前端面试系列（9）——JS实现继承","date":"2017-04-05T13:11:07.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（9）——JS实现继承.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_316.jpg","content":"<p>JS 虽然声称面向对象，但是其很多特性与真正的“面向对象”仍有一定差距；面向对象的一大特性就是可以继承，所以如何在 JS 这种弱类型语言中实现继承就成为了前端面试中的常见问题，下面我就总结一下在 JS 中实现继承的几种方式：</p>\n<h2 id=\"定义父类\"><a href=\"#定义父类\" class=\"headerlink\" title=\"定义父类\"></a>定义父类</h2><p>既然要实现继承，首先得有一个父类：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Animal'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在睡觉！'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法</span></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'正在吃：'</span> + food);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1、原型链继承\"><a href=\"#1、原型链继承\" class=\"headerlink\" title=\"1、原型链继承\"></a>1、原型链继承</h2><p><strong>核心</strong>：将父类的实例作为子类的原型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">Cat.prototype.name = <span class=\"string\">'cat'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//　Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.eat(<span class=\"string\">'fish'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">//true </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li>\n<li>父类新增原型方法 / 原型属性，子类都能访问到</li>\n<li>简单，易于实现</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>要想为子类新增属性和方法，必须要在 <code>new Animal()</code> 这样的语句之后执行，不能放到构造器中</li>\n<li>无法实现多继承</li>\n<li>来自原型对象的引用属性是所有实例共享的</li>\n<li>创建子类实例时，无法向父类构造函数传参</li>\n</ol>\n<p><strong>推荐指数</strong>：★★（3、4 两大致命缺陷）</p>\n<h2 id=\"2、构造继承\"><a href=\"#2、构造继承\" class=\"headerlink\" title=\"2、构造继承\"></a>2、构造继承</h2><p><strong>核心</strong>：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型） 除了 call 方法，也可以用 apply()，由于篇幅原因，就不再详细介绍这两种方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>解决了 1 中，子类实例共享父类引用属性的问题</li>\n<li>创建子类实例时，可以向父类传递参数</li>\n<li>可以实现多继承（call 多个父类对象）</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>实例并不是父类的实例，只是子类的实例</li>\n<li>只能继承父类的实例属性和方法，不能继承原型属性 / 方法</li>\n<li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li>\n</ol>\n<p><strong>推荐指数</strong>：★★（缺点3）</p>\n<h2 id=\"3、实例继承\"><a href=\"#3、实例继承\" class=\"headerlink\" title=\"3、实例继承\"></a>3、实例继承</h2><p><strong>核心：</strong>：为父类实例添加新特性，作为子类实例返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">  instance.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>不限制调用方式，不管是 <code>new 子类()</code>还是<code>子类()</code>，返回的对象具有相同的效果</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>实例是父类的实例，不是子类的实例</li>\n<li>不支持多继承</li>\n</ol>\n<p><strong>推荐指数</strong>：★★</p>\n<h2 id=\"4、拷贝继承\"><a href=\"#4、拷贝继承\" class=\"headerlink\" title=\"4、拷贝继承\"></a>4、拷贝继承</h2><p><strong>特点</strong>：使用 for in 将父类实例中的方法赋给子类实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> animal)&#123;</span><br><span class=\"line\">    Cat.prototype[p] = animal[p];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Cat.prototype.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>支持多继承</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>效率较低，内存占用高（因为要拷贝父类的属性）</li>\n<li>无法获取父类不可枚举的方法（不可枚举方法，不能使用 for in 访问到）</li>\n</ol>\n<p><strong>推荐指数</strong>：★（缺点 1）</p>\n<h2 id=\"5、组合继承\"><a href=\"#5、组合继承\" class=\"headerlink\" title=\"5、组合继承\"></a>5、组合继承</h2><p><strong>核</strong>：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>弥补了方式 2 的缺陷，可以继承实例属性 / 方法，也可以继承原型属性 / 方法</li>\n<li>既是子类的实例，也是父类的实例</li>\n<li>不存在引用属性共享问题</li>\n<li>可传参</li>\n<li>函数可复用</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li>\n</ol>\n<p><strong>推荐指数</strong>：★★★★（仅仅多消耗了一点内存，也是最常用的一种继承方式）</p>\n<h2 id=\"6、寄生组合继承\"><a href=\"#6、寄生组合继承\" class=\"headerlink\" title=\"6、寄生组合继承\"></a>6、寄生组合继承</h2><p><strong>核心</strong>：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法 / 属性，避免的组合继承的缺点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个没有实例方法的类</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Super = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">  Super.prototype = Animal.prototype;</span><br><span class=\"line\">  <span class=\"comment\">//将实例作为子类的原型</span></span><br><span class=\"line\">  Cat.prototype = <span class=\"keyword\">new</span> Super();</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test Code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat.sleep());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Animal); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat <span class=\"keyword\">instanceof</span> Cat); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>堪称完美</li>\n</ol>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>实现较为复杂</li>\n</ol>\n<p><strong>推荐指数</strong>：★★★★（实现复杂，扣掉一颗星）</p>\n<h2 id=\"7、六种继承方式的联系\"><a href=\"#7、六种继承方式的联系\" class=\"headerlink\" title=\"7、六种继承方式的联系\"></a>7、六种继承方式的联系</h2><div align=\"center\"><img src=\"/images/hexo_post_316.jpg\" alt=\"\" width=\"300\"></div>\n\n<p>PS：虚线表示辅助作用，实现表示决定性作用</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/humin/p/4556820.html\" target=\"_blank\" rel=\"noopener\">JS继承的实现方式</a></li>\n<li><a href=\"http://www.cnblogs.com/ayqy/p/4471638.html\" target=\"_blank\" rel=\"noopener\">重新理解JS的6种继承方式</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（5）——CSS盒子模型","slug":"前端面试系列（5）——CSS盒子模型","date":"2017-04-03T12:20:11.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（5）——CSS盒子模型.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_16.gif","content":"<p>盒子模型是 html + css 最核心的基础知识，理解了这个重要的概念才能更好的排版，进行页面布局；同时在前端面试或笔试中也经常遇到，所以深入理解盒子模型对自身前端水平的提升有很大帮助。</p>\n<h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>css 盒子模型又称为框模型（Box Model），包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素，如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_16.gif\" alt=\"\" width=\"400\"></div>\n\n<p>图中最内部的框是元素的实际内容，也就是元素框，紧挨着元素框外部的是内边距 padding，其次是边框（border），然后最外层是外边距（margin），整个构成了框模型。通常我们设置的背景显示区域，就是内容、内边距、边框这一块范围。下面是对这四个部分的说明：</p>\n<ul>\n<li><strong>Margin（外边距）</strong> - 边框外围区域。Margin 没有背景颜色，它是完全透明</li>\n<li><strong>Border（边框）</strong> - 边框周围的填充和内容。边框是受到盒子的背景颜色影响</li>\n<li><strong>Padding（内边距）</strong> - 清除内容周围的区域。会受到框中填充的背景颜色影响</li>\n<li><strong>Content（内容）</strong> - 盒子的内容，显示文本和图像</li>\n</ul>\n<p>那么，元素框的总宽度 = 元素（element）的 width + padding 的左边距和右边距的值 + margin 的左边距和右边距的值 + border 的左右宽度；<br>元素框的总高度 = 元素（element）的height + padding 的上下边距的值 + margin 的上下边距的值 ＋ border 的上下宽度。<br>所以，在 box-sizing 为 content-box 也就是上面所述盒子模型时，当我们指定了一个 CSS 元素的高度和宽度属性时，只是设置了内容区域的高度和宽度</p>\n<h2 id=\"盒子模型表现\"><a href=\"#盒子模型表现\" class=\"headerlink\" title=\"盒子模型表现\"></a>盒子模型表现</h2><h3 id=\"外边距合并（叠加）\"><a href=\"#外边距合并（叠加）\" class=\"headerlink\" title=\"外边距合并（叠加）\"></a>外边距合并（叠加）</h3><p>两个上下方向相邻的元素框垂直相遇时，外边距会合并，合并后的外边距的高度等于两个发生合并的外边距中较高的那个边距值，如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_17.png\" alt=\"\" width=\"500\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_18.png\" alt=\"\" width=\"500\"></div>\n\n<p>比较容易理解，所以在页面中有时候遇到实际情况是需要考虑这个因素的。当然外边距合并其实也有存在的意义，如下图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_19.png\" alt=\"\" width=\"500\"></div>\n\n<p>关于 margin 合并，其实还有很多不为人知的知识和问题，稍晚一些我会再专门针对 margin 合并写一篇文章（其实应该不算是“写”，因为是对张鑫旭的讲解的总结），感兴趣的童鞋可以直接搜索 “\bmargin 合并”查看</p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>box-sizing 属性是用户界面属性里的一种（CSS3），之所以介绍它，是因为这个属性跟盒子模型有关，而且在 css reset 中有可能会用到它。</p>\n<blockquote>\n<p>box-sizing: content-box | border-box | inherit; </p>\n</blockquote>\n<h3 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h3><p>默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的 width 只包含内容。</p>\n<p>即总宽度 = margin + border + padding + width</p>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><p>设置的 width 值其实是除 margin 外的 border + padding + element 的总宽度。盒子的 width 包含 border + padding + 内容</p>\n<p>即总宽度 = margin + width，关于 border-box 的使用：</p>\n<ol>\n<li>一个 box 宽度为 100%，又想要两边有内间距，这时候用就比较好</li>\n<li>全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度。</li>\n</ol>\n<h3 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h3><p>规定应从父元素继承 box-sizing 属性的值 下面两张图形象的展示了 box-sizing 为 content-box 和 border-box 时的区别：</p>\n<p>（1）标准的盒子模型（content-box）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_14.png\" alt=\"\" width=\"400\"></div>\n\n<p>（2）IE盒子模型（border-box）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_15.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"盒子模型应用\"><a href=\"#盒子模型应用\" class=\"headerlink\" title=\"盒子模型应用\"></a>盒子模型应用</h2><h3 id=\"用盒子模型画三角形\"><a href=\"#用盒子模型画三角形\" class=\"headerlink\" title=\"用盒子模型画三角形\"></a>用盒子模型画三角形</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width : 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            border : 100px solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border-top</span> : 100<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">blue</span>; <span class=\"comment\">/*这里可以设置border的top、bottom、left、right四个方向的三角*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>页面显示结果为：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_20.png\" alt=\"\" width=\"200\"></div>\n\n<h2 id=\"盒子模型产生的问题\"><a href=\"#盒子模型产生的问题\" class=\"headerlink\" title=\"盒子模型产生的问题\"></a>盒子模型产生的问题</h2><h3 id=\"margin-越界\"><a href=\"#margin-越界\" class=\"headerlink\" title=\"margin 越界\"></a>margin 越界</h3><p>即第一个子元素的 margin-top 和最后一个子元素的 margin-bottom 的越界问题，以第一个子元素的margin-top 为例：当父元素没有边框 border 时，设置第一个子元素的 margin-top 值的时候，会出现 margin-top 值加在父元素上的现象，解决方法有四个：</p>\n<ol>\n<li>给父元素加边框 border （副作用）</li>\n<li>给父元素设置 padding值  （副作用）</li>\n<li>父元素添加 overflow: hidden （副作用）</li>\n<li><strong>父元素加前置内容生成</strong>。（推荐）</li>\n</ol>\n<p>以第 4 种方法为例：</p>\n<p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">width </span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height </span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color </span>: red;       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> : <span class=\"selector-tag\">before</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">content </span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">     <span class=\"attribute\">display </span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">width </span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height </span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color </span>: green;</span><br><span class=\"line\">     <span class=\"attribute\">margin-top </span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器间的盒子模型\"><a href=\"#浏览器间的盒子模型\" class=\"headerlink\" title=\"浏览器间的盒子模型\"></a>浏览器间的盒子模型</h3><ol>\n<li>ul 标签在 Mozilla 中默认是有 padding 值的，而在 IE 中只有 margin 有值。</li>\n<li>标准盒子模型与 IE 模型之间的差异：标准的盒子模型就是上述介绍的那种，而 IE 模型更像是 box-sizing: border-box；其内容宽度还包含了 border 和 padding。解决办法就是：在 html 模板中加 doctype 声明。但是我自己在项目中已经很少考虑 IE 了，如果没有特殊要求的话，IE 基本上可以完全忽略了</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/clearsky/p/5696286.html\" target=\"_blank\" rel=\"noopener\">css 盒子模型理解</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"JS中的==、===和Object.is","slug":"JS中的==、===和Object.is","date":"2017-08-02T12:07:47.000Z","updated":"2019-02-28T12:34:16.852Z","comments":true,"path":"api/articles/JS中的==、===和Object.is.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_51.png","content":"<p>在查阅了很多资料之后，我将在这篇文章对于 JS 中的 ==、===、Object.is 进行详细的讲解，所以这很有可能是一篇很长很长的“唠叨文”，但是我相信你一定可以从这篇文章中收货很多，所以抖擞精神，往下看吧！</p>\n<h2 id=\"比较操作\"><a href=\"#比较操作\" class=\"headerlink\" title=\"比较操作\"></a>比较操作</h2><p>首先，你需要知道 JavaScript 提供了三种不同的值比较操作：</p>\n<ul>\n<li>严格相等（’triple equals’或’identity’），即 “===”</li>\n<li>宽松相等（’double equals’），即 “==”</li>\n<li>Object.js（ECMAScript 2015/ES6 新特性）</li>\n</ul>\n<p>现在考虑表达式 x==y，当 x 和 y 的类型相同时，x==y 可以转化为 x===y，而对于后者是很简单的，因为不涉及到类型转换，只需要注意：</p>\n<ul>\n<li>+0 ==(=) -0  //true</li>\n<li>NaN ==(=) NaN  //false</li>\n</ul>\n<p>对于上面这两种，你可以理解为 JavaScript 设计的问题（其实还是那句老话，王八的屁股——规定！），所以只需要死记硬背就可以了，当然还有两个长得像的 Object 也不相等，表现在：</p>\n<ul>\n<li>[] ==(=) []  //false</li>\n<li>{} ==(=) {}  //false</li>\n</ul>\n<p>之所以两个长得像的对象和数组都不相等，是因为在JS中，数组和对象是复杂数据类型，所以其实比较的是引用值，所以任意两个长得像的对象都不相等，具体参见：<a href=\"/20170803/understanding-memory-allocation-in-js.html\">理解JS中的内存分配</a>。ES6 中新增了 Object.is() 方法，它和 “===” 是基本相同的，除了下面这两种情况：</p>\n<ul>\n<li>Object.is(+0, -0)  //false</li>\n<li>Object.is(NaN, NaN)  //true</li>\n</ul>\n<p>所以你可以理解为 Object.is() 其实是对 “===” 的修正。“===” 和 Object.is() 介绍完了，下面就着重介绍一下 “==”（因为 JS 中的 “==” 会将等号两边进行类型转换，所以情况比较复杂）</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"==\"></a>==</h2><p>“==” 在比较前会将比较的值转换为相同类型，在转换后（等式的一边或两边都可能被转换），最终的比较方式就等同于全等操作符 “===”。同时请注意，“===” 满足交换律，但是 “==” 不满足交换律（比如![]和{}）。先来看一张吊炸天的图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_51.png\" alt=\"\" width=\"600\"></div>\n\n<p><strong>我们接下来的讲解都建立在这张图上面：</strong></p>\n<h3 id=\"有和无\"><a href=\"#有和无\" class=\"headerlink\" title=\"有和无\"></a>有和无</h3><p>从这张图我们可以明显的看出，它们被分成了两个阵营：</p>\n<ul>\n<li>String、Number、Boolean 和 Object（对应左侧）</li>\n<li>undefined 和 null（对应右侧）</li>\n</ul>\n<p>分组的依据是什么呢？就是左侧是一个存在的世界，右侧是一个空的世界。所以就有如下规则：</p>\n<ul>\n<li>左侧任意 == 右侧任意  // false</li>\n</ul>\n<p>也就是左右两个世界中的任意值做 “==” 比较的结果都是 false</p>\n<h3 id=\"空和空\"><a href=\"#空和空\" class=\"headerlink\" title=\"空和空\"></a>空和空</h3><p>JavaScript 中的 undefined 和 null 是另一个经常让我们崩溃的地方。通常它被认为是一个设计缺陷，这一点我们不去深究。不过我曾听说，JavaScript 的作者最初是这样想的：</p>\n<blockquote>\n<p>假如你打算把一个变量赋予对象类型的值，但是现在还没有赋值，那么你可以用 null 表示此时的状态(证据之一就是 typeof null 的结果是 ‘object’)；相反，假如你打算把一个变量赋予原始类型的值，但是现在还没有赋值，那么你可以用 undefined 表示此时的状态。</p>\n</blockquote>\n<p>不管这个传闻是否可信，它们两者做 == 比较的结果是 true 是很合理的。(见上图中右侧垂直线上标的 true，也就是 <code>undefined == null</code>)</p>\n<h3 id=\"P和N\"><a href=\"#P和N\" class=\"headerlink\" title=\"P和N\"></a>P和N</h3><p>依然是上面那张图，从图中可以看到两个符号：大写字母 N 和 P：N 表示 ToNumber 操作，即将操作数转为数字。它是规范中的抽象操作，但我们可以用 JS 中的 Number() 函数来等价替代；P 表示 ToPrimitive 操作，即将操作数转为原始类型的值。它也是规范中的抽象操作，同样也可以翻译成等价的 JS 代码，但是会比 ToNumber 复杂一些，所以我们后面会详细解释。  </p>\n<h4 id=\"ToPrimitive\"><a href=\"#ToPrimitive\" class=\"headerlink\" title=\"ToPrimitive\"></a>ToPrimitive</h4><p>我们先讲 ToPrimitive，因为 ToNumber 中会用到 ToPrimitive，下面是关于 ToPrimitive 的规范：</p>\n<blockquote>\n<p>ToPrimitive 运算符接受一个值和一个可选的期望类型作参数。ToPrimitive 运算符把其值参数转换为非对象类型。如果对象有能力被转换为不止一种原始类型，可以使用可选的期望类型来暗示那个类型。根据下表完成转换：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>输入类型</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>结果等于输入的参数（不转换）</td>\n</tr>\n<tr>\n<td>null</td>\n<td>结果等于输入的参数（不转换）</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>结果等于输入的参数（不转换）</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>结果等于输入的参数（不转换）</td>\n</tr>\n<tr>\n<td>String</td>\n<td>结果等于输入的参数（不转换）</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>返回该对象的默认值。对象的默认值由把期望类型传入作为hint参数调用对象的内部方法 <code>[[DefaultValue]]</code> 得到</td>\n</tr>\n</tbody>\n</table>\n<p>对于 Object 这种输入类型，上面的表格中的描述不够清楚，我查了一些资料，概括如下：MDN 上对于 ToPrimitive 的语法规范定位为：</p>\n<blockquote>\n<p>ToPrimitive(obj, preferredType)</p>\n</blockquote>\n<p><strong>在执行 ToPrimitive(obj, preferredType) 时如果第二个参数为空并且 obj 为 Date 的实例时，此时 preferredType 会被设置为 String，其他情况下 preferredType 都会被设置为 Number</strong>。如果 preferredType 为 Number，ToPrimitive 执行过程如下：</p>\n<ol>\n<li>如果 obj 为原始值，直接返回；</li>\n<li>否则调用 obj.valueOf()，如果执行结果是原始值，返回之；</li>\n<li>否则调用 obj.toString()，如果执行结果是原始值，返回之；</li>\n<li>否则抛异常。</li>\n</ol>\n<p>如果 preferredType 为 String，将上面的第 2 步和第 3 步调换，即：</p>\n<ol>\n<li>如果 obj 为原始值，直接返回；</li>\n<li>否则调用 obj.toString()，如果执行结果是原始值，返回之；</li>\n<li>否则调用 obj.valueOf()，如果执行结果是原始值，返回之；</li>\n<li>否则抛异常。</li>\n</ol>\n<p>接下来我们就开始介绍v alueOf() 和 toString() 以及原始值了：</p>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><p>valueOf 方法返回对象的原始值，可能是字符串、数值或 bool 值等，看具体的对象。还是看具体的例子吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"obj\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.valueOf());<span class=\"comment\">//Object &#123;name: \"obj\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = \\[<span class=\"number\">1</span>\\];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.valueOf());<span class=\"comment\">//\\[1\\]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf());<span class=\"comment\">//1456638436303</span></span><br><span class=\"line\"><span class=\"comment\">//如代码所示，三个不同的对象实例调用valueOf返回不同的数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>toString 方法用来返回对象的字符串表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());<span class=\"comment\">//\\[object Object\\]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = \\[\\];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.toString());<span class=\"comment\">//\"\"，即空字符串</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.toString());<span class=\"comment\">//Sun Feb 28 2016 13:40:36 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n<p>这个方法具体的运行机制是个比较复杂的过程，我之后会专门写一篇文章讲解这两个方法，可以尝试搜索一下。（当然，也可以自己在控制台敲一下，加深印象）</p>\n<h3 id=\"原始值（Primitive）\"><a href=\"#原始值（Primitive）\" class=\"headerlink\" title=\"原始值（Primitive）\"></a>原始值（Primitive）</h3><p>“原始值”这三个字虽然听上去很高大上，其实很容易理解，就是指 null、undefined、String、Boolean、Number 这五种基本数据类型之一。 花了这么大力气终于把 ToPrimitive 介绍完了，下面我们介绍一下 ToNumber：</p>\n<h3 id=\"ToNumber\"><a href=\"#ToNumber\" class=\"headerlink\" title=\"ToNumber\"></a>ToNumber</h3><p>ToNumber 运算符根据下表将其参数转换为数值类型的值：</p>\n<table>\n<thead>\n<tr>\n<th>输入类型</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>null</td>\n<td>+0</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>如果参数是true，结果为1。如果参数是false，结果为+0</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>结果等于输入的参数（不转换）</td>\n</tr>\n<tr>\n<td>String</td>\n<td>下面会介绍</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>“应用下列步骤：1.设原始值为ToPrimitive(输入参数，暗示数值类型)；2.返回ToNumber(上面的原始值)”</td>\n</tr>\n</tbody>\n</table>\n<p>上面表格已经很清楚了，但是还有个 ToNumber(String 类型)没有介绍：</p>\n<h4 id=\"字符转数字\"><a href=\"#字符转数字\" class=\"headerlink\" title=\"字符转数字\"></a>字符转数字</h4><p>字符转数字的规则是这样的：把字符串两边的空白字符去掉，然后把两边的引号去掉，看它能否组成一个合法的数字。如果能，转化结果就是这个数字，否则结果就是 NaN。举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123'</span>) <span class=\"comment\">//结果123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'1.2e3'</span>) <span class=\"comment\">//结果1200</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123abc'</span>) <span class=\"comment\">//结果NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'\\\\r\\\\n\\\\t123\\\\v\\\\f'</span>) <span class=\"comment\">//结果123</span></span><br></pre></td></tr></table></figure>\n<p>当然也有例外，比如空白字符串转换为数字的结果是 0。即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">''</span>) <span class=\"comment\">// 结果+0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'\\\\r\\\\n\\\\t \\\\v\\\\f'</span>) <span class=\"comment\">// 结果+0</span></span><br></pre></td></tr></table></figure>\n<p>到目前为止，我们介绍完了 ToPrimitive 和 ToNumber，所以上面那张图的内容基本上就介绍完了。但是还有个运算符没有讲，就是 “!” 取非操作，下面就介绍一下这个看似简单的取非操作：</p>\n<h3 id=\"ToBoolean\"><a href=\"#ToBoolean\" class=\"headerlink\" title=\"ToBoolean\"></a>ToBoolean</h3><p>取非其实是执行了 ToBoolean 运算符之后再取反，ToBoolean 运算符根据下表将其参数转换为布尔值类型的值：</p>\n<table>\n<thead>\n<tr>\n<th>输入类型</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>结果等于输入的参数</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>如果参数是+0，-0或NaN，结果为false；否则结果为true</td>\n</tr>\n<tr>\n<td>String</td>\n<td>如果参数时空字符串（长度为零），结果为false；否则为true</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"没图你说个\"><a href=\"#没图你说个\" class=\"headerlink\" title=\"没图你说个**\"></a>没图你说个**</h3><p>相等操作符 (==) 对于不同类型的值，进行的比较如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_276.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"万物皆数\"><a href=\"#万物皆数\" class=\"headerlink\" title=\"万物皆数\"></a>万物皆数</h2><p>我们再来看上面那张图，里面标有 N 或 P 的那几条连线是没有方向的。假如我们在这些线上表上箭头，使得连线从标有 N 或 P 的那一端指向另一端，那么就会得到：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_50.png\" alt=\"\" width=\"300\"></div>\n\n<p>聪明的你肯定发现了，在 == 运算过程中，所有类型的值都有一种向数字类型转化的趋势。毕竟有这样一句名言：</p>\n<blockquote>\n<p>万物皆数</p>\n</blockquote>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><p>前面废话一堆，还不如举个实例来的痛快：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] == ![]</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">首先你需要明确的是上面这段代码执行的顺序，这就涉及到运算符的优先级了：`</span>! &gt; ==<span class=\"string\">`。所以 ! 取反运算符的优先级会高于 ==，那让我们先来看等号右边的 “!\\[\\]”，根据上面的 ToBoolean，**\\[\\]是一个对象**，那么 ToBoolean(\\[\\]) 就是 true，!\\[\\] 就是 false 了 然后，我们根据上面那张图，等号左边的 \\[\\] 是 Object，等号右边的 !\\[\\] 是一个 Boolean 值，所以最终就成为了 ToPrimitive(\\[\\]) == ToNumber(false) 了；而 ToPrimitive 默认调用 toString 方法，于是 ToPrimitive(\\[\\]) 就是空字符串，而 ToNumber(false) 就是 0；那么最后就成为了 \"\" == 0，这种形态，此时是 String 和 Number 之间的比较，很明显就是 toNumber(\"\") == 0 的比较了，根据 ToNumber 的转换规则，toNumber(\"\")=0，于是 \\[\\] == !\\[\\] 最后成了 0 == 0 的问题，答案显而易见为 true。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 总结一下</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">最后，我们总结一下 == 运算的规则：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* undefined == null，结果是 true。且它俩与所有其他值比较的结果都是 false。</span></span><br><span class=\"line\"><span class=\"string\">* String == Boolean，需要两个操作数同时转为 Number。</span></span><br><span class=\"line\"><span class=\"string\">* String/Boolean == Number，需要 String/Boolean 转为 Number。</span></span><br><span class=\"line\"><span class=\"string\">* Object == Primitive，需要 Object 转为 Primitive(具体通过 valueOf 和 toString方法)。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">所以，其实只有 4 条规则！只要我们完全理解了这四条规则，以后再遇到 == 就不会头疼了！</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 一些经典题目</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">\\[\\]==\\[\\]  <span class=\"comment\">//false</span></span><br><span class=\"line\">&#123;&#125;==&#123;&#125;  <span class=\"comment\">//false</span></span><br><span class=\"line\">\\[\\]==!\\[\\]  <span class=\"comment\">//true</span></span><br><span class=\"line\">&#123;&#125;==!&#123;&#125;  <span class=\"comment\">//false</span></span><br><span class=\"line\">&#123;&#125;==!\\[\\]  <span class=\"comment\">//VM1896:1 Uncaught SyntaxError: Unexpected token ==</span></span><br><span class=\"line\">!\\[\\]==&#123;&#125;  <span class=\"comment\">//false</span></span><br><span class=\"line\">\\[\\]==!&#123;&#125;  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>==<span class=\"literal\">null</span>  <span class=\"comment\">//true</span></span><br><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span>  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> !== <span class=\"literal\">false</span>  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更新自2017-8-4：根据<a href=\"https://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric\" target=\"_blank\" rel=\"noopener\">stackoverflow上的一个讨论</a>，我发现还有如下规则：2e308 === Infinity，原因是<strong>2e308 &gt; Number.MAX_VALUE</strong>，所以其相当于是无穷大，负无穷大同理。</p>\n</blockquote>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener\">JavaScript 中的相等性判断</a></li>\n<li><a href=\"http://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\" rel=\"noopener\">JS比较表</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008432611\" target=\"_blank\" rel=\"noopener\">从[]==![]为true来剖析JavaScript各种蛋疼的类型转换</a></li>\n<li><a href=\"http://www.admin10000.com/document/9242.html\" target=\"_blank\" rel=\"noopener\">通过一张简单的图，让你彻底地、永久地搞懂JS的==运算</a></li>\n<li><a href=\"https://www.zhihu.com/question/31442029\" target=\"_blank\" rel=\"noopener\">Javascript 中 == 和 === 区别是什么？</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"面试","path":"api/tags/面试.json"},{"name":"运算符","path":"api/tags/运算符.json"}]},{"title":"今日头条前端散招内推面试经验总结","slug":"今日头条前端散招内推面试经验总结","date":"2017-05-17T07:33:40.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/今日头条前端散招内推面试经验总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><p>可能是内推的缘故，在面试之前前台工作人员给了一套前端的笔试题，然后就分配了一个小房间开始做题，虽然没有指明不可以手机搜索，但是为了保证最起码的诚信，我全程都没有看手机，完全凭自己的水平答题，虽然最后面试官把原题拿走了，但是我还是能靠记忆回想起一些题目，总结如下：</p>\n<h3 id=\"1-替换元素和非替换元素有哪些，它们的差异是什么？\"><a href=\"#1-替换元素和非替换元素有哪些，它们的差异是什么？\" class=\"headerlink\" title=\"1. 替换元素和非替换元素有哪些，它们的差异是什么？\"></a>1. 替换元素和非替换元素有哪些，它们的差异是什么？</h3><h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。 比如：<code>&lt;input type=&quot;text&quot;/&gt;</code>，这是一个文本输入框，换一个其他 type 的时候，浏览器显示就不一样，HTML 中的 <code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;object&gt;</code> 都是替换元素，这些元素都没有实际的内容。</p>\n<h4 id=\"非替换元素\"><a href=\"#非替换元素\" class=\"headerlink\" title=\"非替换元素\"></a>非替换元素</h4><p>HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。 比如 <code>&lt;p&gt;merrier.wang&lt;/p&gt;</code>、<code>&lt;label&gt;Merrier&lt;/label&gt;</code> 浏览器将把这段内容直接显示出来。</p>\n<h3 id=\"2-offsetWidth、clientWidth、scrollWidth-如何计算？\"><a href=\"#2-offsetWidth、clientWidth、scrollWidth-如何计算？\" class=\"headerlink\" title=\"2. offsetWidth、clientWidth、scrollWidth 如何计算？\"></a>2. offsetWidth、clientWidth、scrollWidth 如何计算？</h3><h4 id=\"offsetWidth\"><a href=\"#offsetWidth\" class=\"headerlink\" title=\"offsetWidth\"></a>offsetWidth</h4><ul>\n<li>无 <code>padding</code> 无滚动无 <code>border</code><ul>\n<li>offsetWidth = clientWidth = 盒子的宽度</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 无滚动有 <code>border</code><ul>\n<li>offsetWidth = 盒子的宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 边框宽度*2</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 有滚动，且滚动是显示的，有 <code>border</code><ul>\n<li>offsetWidth = 盒子宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 滚动轴宽度 + 边框宽度 * 2</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"clientWidth\"><a href=\"#clientWidth\" class=\"headerlink\" title=\"clientWidth\"></a>clientWidth</h4><ul>\n<li>无 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code></li>\n<li>有 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code> + 盒子的 <code>padding * 2</code></li>\n<li>有 <code>padding</code> 有滚动 ：<code>clientWidth</code> = 盒子和 <code>width</code> + 盒子的 <code>padding * 2</code> - 滚动轴宽度</li>\n</ul>\n<h4 id=\"scrollWidth\"><a href=\"#scrollWidth\" class=\"headerlink\" title=\"scrollWidth\"></a>scrollWidth</h4><p>无滚动轴时：</p>\n<ul>\n<li>scrollWidth = clientWidth = 盒子宽度 + 盒子 padding * 2</li>\n</ul>\n<p>有滚动轴时：</p>\n<ul>\n<li>scrollWidth = 实际内容的宽度 + padding * 2</li>\n<li>scrollHeight = 实际内容的高度 + padding * 2</li>\n</ul>\n<p>更多关于 JS 中的宽高可以狠狠的点击这里：<a href=\"/20170501/js-width-and-height.html\">JS 宽高的理解和应用</a></p>\n<h3 id=\"3-JS-中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\"><a href=\"#3-JS-中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\" class=\"headerlink\" title=\"3. JS 中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\"></a>3. JS 中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例</h3><p>DOM2 标准事件模型：每一个 DOM 元素所触发的事件都要经历三个阶段：</p>\n<ol>\n<li>捕获阶段</li>\n<li>目标对象本身的事件处理程序调用阶段</li>\n<li>冒泡阶段</li>\n</ol>\n<p>在 IE8 以上的版本以及其他的浏览器中通过 e.stopPropagation() 方式阻止事件的冒泡；在 IE8  以下的浏览器中通过 e.cancleBubble = true 阻止事件冒泡；jQ 中的 mouseenter 和 mouseleave 也是默认不冒泡</p>\n<h3 id=\"4-CSS-选择器的优先级是什么？\"><a href=\"#4-CSS-选择器的优先级是什么？\" class=\"headerlink\" title=\"4. CSS 选择器的优先级是什么？\"></a>4. CSS 选择器的优先级是什么？</h3><p>!important &gt; 内联 &gt; id &gt; class &gt; 标签(p、a、div) &gt; 通配符(*) &gt; 浏览器自定义</p>\n<p>更多关于 CSS 选择器的的内容：<a href=\"/20170403/css-selector.html\">前端面试系列（4）——CSS选择器</a></p>\n<h3 id=\"5-IFC-是什么？它的作用是什么？\"><a href=\"#5-IFC-是什么？它的作用是什么？\" class=\"headerlink\" title=\"5. IFC 是什么？它的作用是什么？\"></a>5. IFC 是什么？它的作用是什么？</h3><h4 id=\"What’s-FC？\"><a href=\"#What’s-FC？\" class=\"headerlink\" title=\"What’s FC？\"></a>What’s FC？</h4><p>FC 的全称是：Formatting Contexts，是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<h4 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h4><p>IFC(Inline Formatting Contexts) 直译为”内联格式化上下文”，IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding / margin 影响)，IFC 中的 line box 一般左右都贴紧整个 IFC，但是会因为 float 元素而扰乱。float 元素会位于 IFC 与 line box 之间，使得 line box 宽度缩短。 同个 IFC 下的多个 line box 高度会不同。IFC 中是不可能有块级元素的，当插入块级元素时（如 p 中插入 div），会产生两个匿名块与 div 分隔开，即产生两个 IFC，每个 IFC 对外表现为块级元素，与 div 垂直排列。</p>\n<p><strong>那么IFC一般有什么用呢？</strong></p>\n<ul>\n<li>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</li>\n<li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>\n</ul>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><p>BFC(Block Formatting Contexts) 直译为”块级格式化上下文”。Block Formatting Contexts 就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。 </p>\n<p><strong>如何产生 BFC？</strong></p>\n<ol>\n<li>float 的值不为 none。</li>\n<li>overflow 的值不为 visible。</li>\n<li>position 的值不为 relative 和 static。</li>\n<li>display 的值为 table-cell, table-caption, inline-block 中的任何一个。</li>\n</ol>\n<p><strong>那BFC 一般有什么用呢？</strong> </p>\n<p>比如常见的多栏布局，结合块级别元素浮动，里面的元素则是在一个相对隔离的环境里运行。 CSS2.1 中只有 BFC 和 IFC，CSS3 中才有 GFC 和 FFC，更多关于这些 FC 的内容可以查看：<a href=\"http://www.jshacker.com/note/3608\" target=\"_blank\" rel=\"noopener\">小科普：到底什么是BFC、IFC、GFC和FFC，次奥？</a></p>\n<h3 id=\"6-如何实现一个自适应正方形\"><a href=\"#6-如何实现一个自适应正方形\" class=\"headerlink\" title=\"6. 如何实现一个自适应正方形\"></a>6. 如何实现一个自适应正方形</h3><p>这个问题在我前不久的一篇文章里有总结过，可以<a href=\"/20170516/realization-of-adaptive-square-in-pure-css.html\">点击这里</a>查看</p>\n<h3 id=\"7-http-mp-toutiao-com-向-http-toutiao-com-发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\"><a href=\"#7-http-mp-toutiao-com-向-http-toutiao-com-发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\" class=\"headerlink\" title=\"7. http://mp.toutiao.com 向 http://toutiao.com 发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\"></a>7. <a href=\"http://mp.toutiao.com\" target=\"_blank\" rel=\"noopener\">http://mp.toutiao.com</a> 向 <a href=\"http://toutiao.com\" target=\"_blank\" rel=\"noopener\">http://toutiao.com</a> 发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？</h3><p>判断跨域的指标：域名、协议、端口，只要有其中一项不一致就会发生跨域</p>\n<h3 id=\"8-请介绍一下-XSS-和-CSRF-的区别，如何防御？\"><a href=\"#8-请介绍一下-XSS-和-CSRF-的区别，如何防御？\" class=\"headerlink\" title=\"8. 请介绍一下 XSS 和 CSRF 的区别，如何防御？\"></a>8. 请介绍一下 XSS 和 CSRF 的区别，如何防御？</h3><h4 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h4><p>XSS 全称“跨站脚本”（Cross-site scripting），是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>\n<h4 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h4><p>CSRF 的全称是“跨站请求伪造”（Cross-site request forgery），而 XSS 的全称是“跨站脚本”。看起来有点相似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户，但前面说了，它们的攻击类型是不同维度上的分类。CSRF 顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份（包括使用服务器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。 严格意义上来说，CSRF 不能分类为注入攻击，因为 CSRF 的实现途径远远不止 XSS 注入这一条。通过 XSS 来实现 CSRF 易如反掌，但对于设计不佳的网站，一条正常的链接都能造成 CSRF。</p>\n<h4 id=\"防御-XSS-攻击可以通过以下两方面操作：\"><a href=\"#防御-XSS-攻击可以通过以下两方面操作：\" class=\"headerlink\" title=\"防御 XSS 攻击可以通过以下两方面操作：\"></a>防御 XSS 攻击可以通过以下两方面操作：</h4><ol>\n<li>对用户表单输入的数据进行过滤，对 javascript 代码进行转义，然后再存入数据库；</li>\n<li>在信息的展示页面，也要进行转义，防止 javascript 在页面上执行。</li>\n</ol>\n<h4 id=\"CSRF-攻击的防御可以通过以下两方面操作：\"><a href=\"#CSRF-攻击的防御可以通过以下两方面操作：\" class=\"headerlink\" title=\"CSRF 攻击的防御可以通过以下两方面操作：\"></a>CSRF 攻击的防御可以通过以下两方面操作：</h4><ol>\n<li>所有需要用户登录之后才能执行的操作属于重要操作，这些操作传递参数应该使用 post 方式，更加安全；</li>\n<li>为防止跨站请求伪造，我们在某次请求的时候都要带上一个 csrf_token 参数，用于标识请求来源是否合法，csrf_token 参数由系统生成，存储在 SESSION 中。</li>\n</ol>\n<h4 id=\"更多关于-XSS-和-CSRF-的解释：\"><a href=\"#更多关于-XSS-和-CSRF-的解释：\" class=\"headerlink\" title=\"更多关于 XSS 和 CSRF 的解释：\"></a>更多关于 XSS 和 CSRF 的解释：</h4><ul>\n<li><a href=\"http://blog.csdn.net/koastal/article/details/52905358\" target=\"_blank\" rel=\"noopener\">浅析XSS和CSRF攻击及防御</a></li>\n<li><a href=\"https://www.zhihu.com/question/34445731?sort=created\" target=\"_blank\" rel=\"noopener\">如何用简洁生动的语言理清XSS和CSRF的区别？</a></li>\n</ul>\n<h3 id=\"9-JSBridge-是什么，它的作用是什么？\"><a href=\"#9-JSBridge-是什么，它的作用是什么？\" class=\"headerlink\" title=\"9. JSBridge 是什么，它的作用是什么？\"></a>9. JSBridge 是什么，它的作用是什么？</h3><p>在开发中我们经常需要 web 和 native 进行交互，也就是要用到经常听到的 “JSBridge”。由于我对这个东西也是停留在概念层面，所以推荐其他人的一篇文章吧：<a href=\"http://blog.csdn.net/jjx0224/article/details/52788922\" target=\"_blank\" rel=\"noopener\">理解JSBridge</a></p>\n<h3 id=\"10-TCP-和-UDP-的区别，以及如何进行拥塞控制？\"><a href=\"#10-TCP-和-UDP-的区别，以及如何进行拥塞控制？\" class=\"headerlink\" title=\"10. TCP 和 UDP 的区别，以及如何进行拥塞控制？\"></a>10. TCP 和 UDP 的区别，以及如何进行拥塞控制？</h3><ol>\n<li>TCP 面向连接（如打电话要先拨号建立连接）；UDP 是无连接的，即发送数据之前不需要建立连接</li>\n<li>TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP 尽最大努力交付，即不保证可靠交付</li>\n<li>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流；UDP 是面向报文的，UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）</li>\n<li>每一条 TCP 连接只能是点到点的；UDP 支持一对一，一对多，多对一和多对多的交互通信</li>\n<li>TCP 首部开销 20 字节；UDP 的首部开销小，只有 8 个字节</li>\n<li>TCP 的逻辑通信信道是全双工的可靠信道，UDP 则是不可靠信道</li>\n</ol>\n<p>更多关于 TCP 和 UDP 的区别：<a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">TCP和UDP的最完整的区别</a></p>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。<br><strong>几种拥塞控制方法</strong>：慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。 更多关于拥塞控制：<a href=\"http://blog.csdn.net/kinger0/article/details/48206999\" target=\"_blank\" rel=\"noopener\">TCP/IP详解–拥塞控制 &amp; 慢启动 快恢复 拥塞避免</a></p>\n<h3 id=\"11-有一无序数组，数组个数为-m，如何从这-m-个数里面找到-N-个数，使这-N-个数的和为-M；并阐述时间复杂度和空间复杂度\"><a href=\"#11-有一无序数组，数组个数为-m，如何从这-m-个数里面找到-N-个数，使这-N-个数的和为-M；并阐述时间复杂度和空间复杂度\" class=\"headerlink\" title=\"11. 有一无序数组，数组个数为 m，如何从这 m 个数里面找到 N 个数，使这 N 个数的和为 M；并阐述时间复杂度和空间复杂度\"></a>11. 有一无序数组，数组个数为 m，如何从这 m 个数里面找到 N 个数，使这 N 个数的和为 M；并阐述时间复杂度和空间复杂度</h3><p>这个属于比较经典的 <a href=\"http://baike.baidu.com/item/01%E8%83%8C%E5%8C%85\" target=\"_blank\" rel=\"noopener\">01背包问题</a>，网上有很多关于这种问题的求解方式，基本上包括递归、动态规划、无脑循环等方法，推荐以下比较靠谱的解法：<a href=\"http://www.cnblogs.com/iyangyuan/p/3908498.html\" target=\"_blank\" rel=\"noopener\">动态规划（JS）</a>、<a href=\"http://blog.csdn.net/min_jie/article/details/3966867\" target=\"_blank\" rel=\"noopener\">无脑循环</a></p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><p>一面的时间很长，大概有将近一个小时的感觉，所以问的问题涉及的领域和方面也比较多，所以我就想到什么写下什么了，另外也不赋答案了，实在有点多。。</p>\n<ol>\n<li>__proto__ 是什么意思</li>\n<li>JS 实现继承的方式</li>\n<li>object.defineproprety() 方法的参数和含义</li>\n<li>setTimeout(func,0) 中设置延时为 “0” 的目的</li>\n<li>jQuery 中对 Promise() 的 when() 方法的实现原理</li>\n<li>HTTP 和 TCP 的关系</li>\n<li>TCP 三次握手</li>\n<li>HTTP 如何达到在下一次连接时不用再 TCP 三次握手的</li>\n<li>如何实现一个自适应正方形</li>\n<li>浏览器渲染的过程</li>\n<li>重排和重绘的触发时机和区别</li>\n<li>层叠上下文起作用的前提</li>\n<li>前端路由和后端路由的区别</li>\n<li>首屏加载完毕之后 <code>&lt;script&gt;&lt;/script&gt;</code> 代码的加载顺序</li>\n<li>vue.js 的设计思想</li>\n<li>如果用 jQuery 实现双向数据绑定，应该如何实现</li>\n<li>当 content-length 过长时，应该如何传输数据</li>\n<li>JS 文件中的代码执行顺序</li>\n<li>详细讲解一下 JS 中宏任务和微任务的判断机制</li>\n<li>如果有别的库中也用到了 “$”，如何解决和 jQuery 的冲突</li>\n</ol>\n<h2 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h2><p>二面相对于一面来说，就简单随意了很多，问了一些项目的事情，还问了技术选型方面的问题，最后出了一道算法题让我做，我思考了大概 15 分钟，感觉真心写不出代码，就和面试官简单的讲了一下思路，面试官思考了一段时间之后就告诉我二面结束了，可以 hr 面了；至此，技术面就全部结束了。</p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"函数声明VS函数表达式","slug":"函数声明VS函数表达式","date":"2017-08-02T07:16:07.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/函数声明VS函数表达式.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>本篇文章译自某大牛的文章：<a href=\"https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/\" target=\"_blank\" rel=\"noopener\">Function Declarations vs. Function Expressions</a>，推荐英语不是很差的童鞋点击前面链接看原文。首先先做个小测验，下面四个例子的 alert 输出分别是什么？</p>\n<p><strong>例子一：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(foo());</span><br></pre></td></tr></table></figure>\n<p><strong>例子二：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(foo());</span><br></pre></td></tr></table></figure>\n<p><strong>例子三：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(foo());</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>例子四：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(foo());</span><br></pre></td></tr></table></figure>\n<p>我就直接公布答案了：8，3，3 和 [Type Error:bar is not a function]。如果你没有完全答对或者直接翻到这里看答案，那你可以继续往下看了。</p>\n<h2 id=\"什么是函数声明-function-declaration\"><a href=\"#什么是函数声明-function-declaration\" class=\"headerlink\" title=\"什么是函数声明(function declaration)\"></a>什么是函数声明(function declaration)</h2><p>函数声明定义了一个命名的函数变量，而不需要变量赋值。函数声明是一种独特的结构，并且不能嵌套在非函数体中。我们可以将函数声明看做是变量声明的另一种形式，就像变量声明必须以 “var” 开头一样，函数声明必须以 “function” 关键字开头。下面就是一个很简单的函数声明实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ECMA 5(13.0) 中对于函数声明的定义：</p>\n<blockquote>\n<p>function_Identifier_ ( _FormalParameterList_opt ) { <em>FunctionBody</em> }</p>\n</blockquote>\n<p>需要注意的是，函数名在它本身的作用于以及它的父级作用域都是可见的（这是一个很不错的规则，因为不然的话在外面将无法访问到该函数）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">bar() <span class=\"comment\">//3</span></span><br><span class=\"line\">bar  <span class=\"comment\">//function</span></span><br><span class=\"line\">bar === <span class=\"built_in\">window</span>.bar  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"什么是函数表达式-function-expression\"><a href=\"#什么是函数表达式-function-expression\" class=\"headerlink\" title=\"什么是函数表达式(function expression)\"></a>什么是函数表达式(function expression)</h2><p>函数表达式将一个函数定义为一个很长的表达式的一部分（通常是一个变量赋值表达式）。以“函数表达式”方式命名的函数可以是命名的也可以是匿名函数。<strong>函数表达式不能以 “function” 关键字开头</strong>（所以下面的第三个表达式需要用 “()” 包裹）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//匿名函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//命名函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自调用函数表达式</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hello!\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>和函数声明相反，<strong>函数表达式的函数名（如果有的话）在它的作用域之外是不可见的</strong></p>\n<h2 id=\"那函数语句-function-statement-又是什么呢？\"><a href=\"#那函数语句-function-statement-又是什么呢？\" class=\"headerlink\" title=\"那函数语句(function statement)又是什么呢？\"></a>那函数语句(function statement)又是什么呢？</h2><p>函数语句有时候只是函数声明的另一种叫法。然而，按照<a href=\"http://yura.thinkweb2.com/named-function-expressions/#function-statements\" target=\"_blank\" rel=\"noopener\">Kangax的说法</a>，Mozilla 认为函数语句是对于函数声明的扩展，它允许在任何允许使用语句的地方使用函数声明这种语法。但是，这是非行业标准，所以不推荐用于生产环境。</p>\n<h2 id=\"好像忘了上面四个例子\"><a href=\"#好像忘了上面四个例子\" class=\"headerlink\" title=\"好像忘了上面四个例子\"></a>好像忘了上面四个例子</h2><p>让我们回到文章开头那四个例子 首先，<strong>例子一是两个函数声明，所以这两个函数声明被“提升”了</strong></p>\n<h3 id=\"等一下，什么叫做被“提升”？\"><a href=\"#等一下，什么叫做被“提升”？\" class=\"headerlink\" title=\"等一下，什么叫做被“提升”？\"></a>等一下，什么叫做被“提升”？</h3><p>援引 <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\" target=\"_blank\" rel=\"noopener\">Ben Cherry文章</a>中的一段话：</p>\n<blockquote>\n<p>Function declarations and function variables are always moved (‘hoisted’) to the top of their JavaScript scope by the JavaScript interpreter</p>\n</blockquote>\n<p>翻译一下就是：函数声明和函数变量总会被 Javascript 解释器移动（提升）到它们的 JavaScript 作用域的顶端（我希望你能够认认真真的理解一下上面这句话，如果还是不理解，没关系，继续向下看）;当函数声明被提升时，整个函数体都将随之提升。所以在解释器对例子一中的代码进行解析过后，它其实是这样的（建议回过头看一下例子一的代码，对比着看会更容易理解）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例子一实际执行时的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//\b第一次定义函数bar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第二次定义函数bar，将之前的定义覆盖</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//return调用结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar(); <span class=\"comment\">//8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(foo());</span><br></pre></td></tr></table></figure>\n<p><strong>但是，我们一直以来的“常识”是return语句后面的代码是不会执行的啊？</strong></p>\n<p>这就涉及到“执行上下文”和“执行过程”的概念了，ECMA5 将“执行上下文”分为“词法环境”、“变量环境 ”和“绑定 this”，而“执行过程”是指最终的代码执行过程。当执行到声明语句的时候，此时的声明语句就会进入到“变量环境”，它们与语句（比如说 return 语句）是不同的，是不受所谓的“前面代码先执行，后面代码后执行”的约束的。 （“执行上下文”这一概念对于本篇文章来说是个重点，如果依然不理解的话，可以读一下<a href=\"http://www.cnblogs.com/TomXu/archive/2012/01/13/2308101.html\" target=\"_blank\" rel=\"noopener\">汤姆大叔</a>和<a href=\"http://www.jianshu.com/p/a6d37c77e8db\" target=\"_blank\" rel=\"noopener\">简书-波同学</a>的文章加深理解）</p>\n<h3 id=\"那么，函数表达式也会提升吗\"><a href=\"#那么，函数表达式也会提升吗\" class=\"headerlink\" title=\"那么，函数表达式也会提升吗\"></a>那么，函数表达式也会提升吗</h3><p>这取决于表达式本身，让我们继续看以下例子二中的第一个表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>左边的 var bar 是一个变量声明。根据上面的规则，变量声明会被提升，但是赋值表达式却没有（和函数声明不同，函数声明会将整个函数体提升）。因此当 bar 这个变量被提升时，解释器会将 bar 初始化为 <code>undefined：var bar = undefined</code>。所以例子二中的代码实际上以下面的顺序执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例子二实际执行时的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数表达式的变量声明（被提升，同时被解释器赋初始值undefined）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">//第一个函数表达式被执行</span></span><br><span class=\"line\">    bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//第一个函数表达式创建的函数被执行了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar();</span><br><span class=\"line\">    <span class=\"comment\">//第二个函数表达式将不会执行（但是变量声明被提升了，就在上面）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(foo()); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"目前你应该已经理解的差不多了，但是如果你在-Firebug-中运行例子三的代码会不符合预期，这又是为什么呢？\"><a href=\"#目前你应该已经理解的差不多了，但是如果你在-Firebug-中运行例子三的代码会不符合预期，这又是为什么呢？\" class=\"headerlink\" title=\"目前你应该已经理解的差不多了，但是如果你在 Firebug 中运行例子三的代码会不符合预期，这又是为什么呢？\"></a>目前你应该已经理解的差不多了，但是如果你在 Firebug 中运行例子三的代码会不符合预期，这又是为什么呢？</h3><p>你可以试着将例子三的代码保存在一个 HTML 文件中，然后用 firefox 浏览器打开，或者在 IE 8，Chrome 或者 Safari 的 console 中执行。你就会发现，Firebug 的 console 并没有像其他浏览器一样在全局作用域（其实并不是全局作用域，而是特殊的 “Firebug” 作用域。。可以试着在 firebug 的控制台中打印一下 “this == window” 你就明白了）中有函数体提升的表现 所以，抛开 firefox 的“灵异表现”不管，例子三和例子一其实是相同的道理，只不过是函数 foo 被提升了而已。</p>\n<h3 id=\"现在我们可以看一下例子四了\"><a href=\"#现在我们可以看一下例子四了\" class=\"headerlink\" title=\"现在我们可以看一下例子四了\"></a>现在我们可以看一下例子四了</h3><p>很明显，例子四是没有函数提升的，但是变量提升是存在的（而且是两个），那么此时 bar 的声明就会提升，但是它的值没有定义（undefined），所以最后相当于执行 undefined()。最后当然就会报错了：<code>bar is not a function</code>。</p>\n<h2 id=\"那还应该注意些什么呢？\"><a href=\"#那还应该注意些什么呢？\" class=\"headerlink\" title=\"那还应该注意些什么呢？\"></a>那还应该注意些什么呢？</h2><p>目前，你应该能完全理解上面的四个例子了。还需要注意的一点是，函数声明在非函数体（如 if）中是被明令禁止的。然而，所有的浏览器其实都允许这样做，并且更可怕的是，<strong>每个浏览器对这种不符合规定的语法的解释还不同！</strong>，举个栗子，下面的代码片断在 firefox 3.6 中会抛出一个错误，因为它将函数声明解析为函数语句（函数语句已经在上面介绍过了），所以 x is not defined。然而在 IE8，Chrome5 和 Safari5 中，函数 x 被正常 return 了（就像标准的函数声明一样）。当然，鉴于这篇文章的原文年代比较久远，具体的还是要自己在 dev tool 中运行一下才能得出结论（可以试着将 if 中的 true 替换为 false 再运行一下看看）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(foo());</span><br></pre></td></tr></table></figure>\n<h2 id=\"既然函数声明会造成混论，那它的好处在哪里？\"><a href=\"#既然函数声明会造成混论，那它的好处在哪里？\" class=\"headerlink\" title=\"既然函数声明会造成混论，那它的好处在哪里？\"></a>既然函数声明会造成混论，那它的好处在哪里？</h2><p>通过上面的讨论，你会发现函数声明是“宽松”的——如果你在某个函数声明之前就调用它，“函数提升”的机制将使函数得到正常调用而不会报错。但是这种“宽松”缺乏严谨性，同时从长远来看，禁止“声明前调用”将更有利于开发者的编程习惯的养成（就像所谓的“弱类型”）。毕竟，开发者需要养成以特定的顺序编写代码的习惯。</p>\n<h2 id=\"函数表达式的优势呢？\"><a href=\"#函数表达式的优势呢？\" class=\"headerlink\" title=\"函数表达式的优势呢？\"></a>函数表达式的优势呢？</h2><p>说出来你可能不信:）首先，函数声明的方式好像在模仿 Java 中的方法声明，然而 Java 的方法和 JS 中的函数是两码事啊（原文是：<strong>Java methods are very different animals</strong>）：在 JavaScript 中，函数是具有值的 living object，而 Java 中的方法只是元数据存储结构。下面的两段代码片断都定义了函数但是只有函数表达式表明我们在创建一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;<span class=\"keyword\">return</span> a + b&#125;;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;<span class=\"keyword\">return</span> a + b&#125;;</span><br></pre></td></tr></table></figure>\n<p>其次，<strong>函数表达式的用途更多</strong>。一个函数声明只能解释为一段孤立的语句。它能做的仅仅是创建一个以当前作用域为父域的变量对象。与之相反，函数表达式是一种更复杂的结构。如果你想创建一个匿名函数或者将某个函数分配给一个原型对象亦或作为某个其他对象的属性的话，你就可以用函数表达式来实现。每当你使用高阶应用程序（比如 curry 或 compose）创建一个函数时，你其实都是在应用函数表达式。所以，<strong>函数表达式和函数编程其实是密不可分的</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHello = alert.curry(<span class=\"string\">\"hello!\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数表达式有缺点吗？\"><a href=\"#函数表达式有缺点吗？\" class=\"headerlink\" title=\"函数表达式有缺点吗？\"></a>函数表达式有缺点吗？</h2><p>一般情况下，通过函数表达式方式创建的函数都是匿名的。比如下面这段代码创建的函数是匿名的，today 只是对于匿名函数的引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> today = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span><br></pre></td></tr></table></figure>\n<p>那匿名不匿名关系大吗？大多数情况下是没有的，但是正如 <a href=\"http://fitzgeraldnick.com/weblog/\" target=\"_blank\" rel=\"noopener\">Nick Fitzgerald</a> 所说，使用匿名函数进行调试有可能会很痛苦。所以他建议使用命名函数表达式（NFEs）作为一种替代方案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> today = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">today</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，正如 Asen Bozhilov 所说（以及 <a href=\"http://yura.thinkweb2.com/named-function-expressions/#jscript-bugs\" target=\"_blank\" rel=\"noopener\">Kangax 的文章</a>），NFEs 在 IE9 以下的浏览器中无法正常运行（在我看来，这并不是个大问题）</p>\n<h2 id=\"MD终于到结尾了\"><a href=\"#MD终于到结尾了\" class=\"headerlink\" title=\"MD终于到结尾了\"></a>MD终于到结尾了</h2><p>在错误的位置进行函数声明会误导别人，而且很少有（如果有）这种情况，就是你不能通过函数表达式的方法创建函数而必须用函数声明。当然，如果你必须要用函数声明，请将它们放在作用域顶端，这样可以减小误导性。同时，我绝不会在 if 语句中进行函数声明（这是明令禁止的）。 说了这么多（译者注：确实很多，翻译了好几个小时），你可能依然觉得有时候还是宁愿用函数声明。这其实很正常，盲目的遵守某些规则是愚蠢的，而且有时候会导致自己的代码很“丑陋”。最重要的是，你理解了上面介绍的这些概念和知识点，从而能够让你做出明智的决定。我希望这篇文章在这个方面能够对你有所帮助。 欢迎评论，如果你觉得我哪里说得不对（或者翻译的不对:））以及还有哪里需要补充的，欢迎留言或者通过其他方式联系我。</p>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"函数","path":"api/tags/函数.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（10）——JS中的闭包","slug":"前端面试系列（10）——JS中的闭包","date":"2017-04-05T13:12:15.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/前端面试系列（10）——JS中的闭包.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>闭包这个概念其实并不是 JS 中独有的，很多开发者将其理解为 JS 的特有产物，其实是大错特错的；只不过 JS 中的闭包有着其他语言没有的特性和产生机理，所以对于闭包的理解成为了很多面试官垂青的问题，而真正理解闭包并且知道在什么时候用闭包、在什么时候避免闭包对于前端码农来说是一个不小的挑战，本篇文章就将深入剖析闭包的工作原理，以及如何使用和避免使用闭包</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>要理解闭包，首先必须理解 Javascript 特殊的变量作用域；在 JS 中，变量的作用域无非就是两种：全局变量和局部变量：</p>\n<ul>\n<li>全局变量，顾名思义，在函数内部也可以直接读取全局变量</li>\n<li>局部变量，在函数外部是无法读取函数内的局部变量的（<strong>函数内声明变量的时候，一定要使用 var / let 命令，否则相当于声明了一个全局变量</strong>）</li>\n</ul>\n<p>我们有时候需要得到函数内的局部变量，但是从上面的讲解可以看到，正常情况下是办不到的，所以只能变通：<strong>在函数的内部，再定义一个函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">999</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(n);  <span class=\"comment\">//999</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就引出了另外一个概念，就是 Javascript 语言特有的“<strong>链式作用域</strong>”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量；援引<a href=\"http://www.yanshiba.com/\" target=\"_blank\" rel=\"noopener\">燕十八</a>老师的话，只要在一对大括号之内声明的变量，在这个大括号里面的任何地方都可以访问到该变量。<br>根据上面的代码，既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们就可以在 f1 外部读取它的内部变量了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(n); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=f1();</span><br><span class=\"line\">result(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"什么是闭包？\"><a href=\"#什么是闭包？\" class=\"headerlink\" title=\"什么是闭包？\"></a>什么是闭包？</h2><p>上面代码中的 f2 函数，就是闭包。 闭包是 JavaScript（以及其他大多数编程语言）的一个极其强大的属性。正如在 MDN (Mozilla Developer Network) 中定义的那样：</p>\n<blockquote>\n<p>闭包是指能够访问自由变量的函数。换句话说，在闭包中定义的函数可以“记忆”它被创建的环境。</p>\n</blockquote>\n<p>自由变量是既不是在本地声明又不作为参数传递的一类变量。（如果一个作用域中使用的变量并不是在该作用域中声明的，那么这个变量对于该作用域来说就是自由变量），上面例子中的 n 在 f2 中 alert，但是 f2 中并没有声明 n，所以 n 对于 f2 这个大括号形成的作用域来说就是自由变量；更通俗来讲的话，闭包是能够读取其他函数内部变量的函数，所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p>\n<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><p>闭包一个非常重要的用途：保留外部作用域对一个变量的私有引用（仅通过唯一途径例如某一个特定函数来访问一个变量），来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  result[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result[<span class=\"number\">0</span>](); <span class=\"comment\">// 5, expected 0</span></span><br><span class=\"line\">result[<span class=\"number\">1</span>](); <span class=\"comment\">// 5, expected 1</span></span><br><span class=\"line\">result[<span class=\"number\">2</span>](); <span class=\"comment\">// 5, expected 2</span></span><br><span class=\"line\">result[<span class=\"number\">3</span>](); <span class=\"comment\">// 5, expected 3</span></span><br><span class=\"line\">result[<span class=\"number\">4</span>](); <span class=\"comment\">// 5, expected 4</span></span><br></pre></td></tr></table></figure>\n<p>这里之所以会打印 5 个 “5”，是因为这五个函数的作用域全部相同（var i = 0 这一句可以提到 for 循环外面，对于 5 个函数来说，只有一个 i，就是循环结束时的那个 i）；也就是说，每次变量 i 增加时，作用域都会更新–这个作用域被所有函数共享。一个解决办法就是为每个函数创建一个额外的封闭环境，使得它们各自都有自己的执行上下文 / 作用域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  result[i] = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// additional enclosing context</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result[<span class=\"number\">0</span>](); <span class=\"comment\">// 0, expected 0</span></span><br><span class=\"line\">result[<span class=\"number\">1</span>](); <span class=\"comment\">// 1, expected 1</span></span><br><span class=\"line\">result[<span class=\"number\">2</span>](); <span class=\"comment\">// 2, expected 2</span></span><br><span class=\"line\">result[<span class=\"number\">3</span>](); <span class=\"comment\">// 3, expected 3</span></span><br><span class=\"line\">result[<span class=\"number\">4</span>](); <span class=\"comment\">// 4, expected 4</span></span><br></pre></td></tr></table></figure>\n<p>另外，因为 ES6 的缘故，所以我们可以使用 let 来代替 var，因为 let 声明的是块级作用域（在 ES5 中，是没有块级作用域的），因此每次迭代都会创建一个新的标示符绑定：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  result[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result[<span class=\"number\">0</span>](); <span class=\"comment\">// 0, expected 0</span></span><br><span class=\"line\">result[<span class=\"number\">1</span>](); <span class=\"comment\">// 1, expected 1</span></span><br><span class=\"line\">result[<span class=\"number\">2</span>](); <span class=\"comment\">// 2, expected 2</span></span><br><span class=\"line\">result[<span class=\"number\">3</span>](); <span class=\"comment\">// 3, expected 3</span></span><br><span class=\"line\">result[<span class=\"number\">4</span>](); <span class=\"comment\">// 4, expected 4</span></span><br></pre></td></tr></table></figure>\n<p>再来看一个例子（MDN 给出的一个闭包的例子）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> add10 = makeAdder(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">2</span>));  <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add10(<span class=\"number\">2</span>)); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<p>我们定义了一个方法 makeAdder(x)，这个方法只有一个变量 x，然后返回了一个新的方法；返回的方法呢只有一个变量 y，然后 return 的结果是 x + y；所以，makeAdder(x) 就被我们打造成了一个“方法工厂”，在上面的例子中我们利用这个“工厂”生产了两个新的方法，一个返回的结果是 5 加上变量，另外一个返回 10 加上传进来的变量；不出所料，add5 和 add10 这两个方法都是闭包，他们共享同样的方法体定义，但是存储了不同的词法环境（关于词法环境，本文将不详细探讨，感兴趣的可以自行查阅资料，暂时可以简单的理解为变量所在的环境）；在 add5 的词法环境，x 是 5；而在 add10 的词法环境中，x 是 10；通过这个例子，我们可以看到闭包可以用来打造“方法工厂”，而这个特性也成为了我们避免使用闭包的理由</p>\n<h2 id=\"避免使用闭包\"><a href=\"#避免使用闭包\" class=\"headerlink\" title=\"避免使用闭包\"></a>避免使用闭包</h2><p>曾经我被闭包强大的特性所吸引，直到我看到一些关于“避免使用闭包”的博客，才知道闭包带来的麻烦会比其提供的方便更值得重视；JS 的内存释放和 Java 类似，有一个内存回收机制，没有被引用的对象都会被自动释放，而出现闭包的时候会导致变量无法被释放，下面看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> data = &#123;&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> closure1 = closure();</span><br></pre></td></tr></table></figure>\n<p>closure 方法返回的这个方法，在 closure1 方法每次调用的时候，都可以访问 data 对象，所以由此可见，data 对象的引用没有被释放，否则的话 closure1 方法将无法访问到data对象。这里可以明显的看出来闭包是会把局部变量引用起来导致无法释放的“副作用”：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> closure2 = closure();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(closure1 === closure2); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(closure1() === closure2()); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出来，closure 方法执行两次得到两个方法，这两个方法不是一个方法，两个方法可以访问的 data 对象也不是同一个对象。也就是说 closure 执行一次，就有一个新对象 data 产生，同时生成一个新的方法，返回出去。每次 closure 方法的执行就导致内存中多了一个 data 对象，多了一个 function(return data)，很明显<strong>这会导致内存的膨胀。使用不当就会导致内存的泄露</strong>。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p>关于闭包就介绍到这里了，但是为了更容易让初学者理解，本文省略掉了很多相关概念的介绍（执行上下文、词法环境、静态作用域），感兴趣的话可以查阅相关资料，如果有机会的话，我会再查阅更多资料，详细的介绍一下和闭包有关的其他概念，下面是我推荐的一些关于闭包讲解的链接：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">MDN-Lexical scoping</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习Javascript闭包（Closure）</a></li>\n<li><a href=\"http://web.jobbole.com/88167/\" target=\"_blank\" rel=\"noopener\">让我们一起学习JavaScript闭包吧</a></li>\n<li><a href=\"http://www.jb51.net/article/83524.htm\" target=\"_blank\" rel=\"noopener\">一分钟理解js闭包</a></li>\n<li><a href=\"http://rainfall.blog.51cto.com/8402174/1344225\" target=\"_blank\" rel=\"noopener\">理解js闭包是为了避免使用闭包</a></li>\n<li><a href=\"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work\" target=\"_blank\" rel=\"noopener\">Stackoverflow-How do JavaScript closures work?</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（11）——window.onload和document.ready的区别","slug":"前端面试系列（11）——window.onload和document.ready的区别","date":"2017-04-12T09:14:30.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/前端面试系列（11）——window.onload和document.ready的区别.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_11.png","content":"<p>这个问题虽然比较简单，但是依然是前端面试中经常会问到的一道题，所以为了让自己“与众不同”，必须全面了解这两者的区别，才能从众多候选人中脱颖而出</p>\n<h2 id=\"一张表格\"><a href=\"#一张表格\" class=\"headerlink\" title=\"一张表格\"></a>一张表格</h2><p>下面这张表格简单的介绍了两者的区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>window.onload()</th>\n<th>$(document).ready()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>执行时机</td>\n<td>在页面所有元素（包括图片，引用文件）加载完后执行</td>\n<td>页面中所有HTML DOM，CSS DOM结构加载完之后就会执行，其他图片等内容可能没有加载完</td>\n</tr>\n<tr>\n<td>编写个数</td>\n<td>不能同时写多个，后面的将会覆盖前面的</td>\n<td>可以同时写多个</td>\n</tr>\n<tr>\n<td>简写</td>\n<td>无</td>\n<td>$().ready(function(){}) // $()不带参数默认是document；$(function(){})</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"jQ-的-document-ready-实现\"><a href=\"#jQ-的-document-ready-实现\" class=\"headerlink\" title=\"jQ 的 document.ready() 实现\"></a>jQ 的 document.ready() 实现</h2><p>在 jQuery 脚本加载的时候，会监听 DOMContentLoaded 事件。当事件触发时候，会执行 ready 事件的回调；（document.readyState === “complete” 时相当于 dom 加载完毕<br>由于用的是原生的 DOMContentLoaded 事件，所以<strong>目前的 ready 函数仅能用于当前 document，无需选择器</strong></p>\n<h2 id=\"谁更快\"><a href=\"#谁更快\" class=\"headerlink\" title=\"谁更快\"></a>谁更快</h2><p>jQuery 的 document.ready 就一定比 window.onload 快吗？下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-US\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>加载时机<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">onload</span>=<span class=\"string\">\"console.log('jquery.js loaded')\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'define functions'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">type, info</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(type + <span class=\"string\">' onload '</span> + (info || <span class=\"string\">\"\"</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">     $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document ready'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;    </span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window addEventListener'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'DOMContentLoaded'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('body')\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('text')\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',1)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/17.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',2)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/16.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('js')\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行之后有两种结果：\"><a href=\"#执行之后有两种结果：\" class=\"headerlink\" title=\"执行之后有两种结果：\"></a>执行之后有两种结果：</h3><h4 id=\"首次加载：\"><a href=\"#首次加载：\" class=\"headerlink\" title=\"首次加载：\"></a>首次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_11.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"二次加载：\"><a href=\"#二次加载：\" class=\"headerlink\" title=\"二次加载：\"></a>二次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_12.png\" alt=\"\" width=\"400\"></div>\n\n<p>第一种情况非常符合我们的想法，ready 比 onload 快，顺序也比较合理。而第二种情况就有些怪异，应该依照上面 jquery ready 事件的实现，那 ready 应该要 DOMContentLoaded 后面啊。我思来想去，我觉得这是个误会，由于二次加载时利用到缓存，导致文件资源都很快加载，各个事件触发的时间非常相近，顺序也不定，就给人一种 ready 顺序不对之感，大家应该发现这几个事件都是在几十毫秒之内触发。PS：js 执行需要时间，几十毫秒不同的顺序我觉得很正常。另外尝试几次，二次加载顺序确实会有变化，但时间都很相近。所以，jQuery 的 document ready 不一定比 window.onload 快执行。</p>\n<h2 id=\"为什么外部-script-文件放页面内容后面好？\"><a href=\"#为什么外部-script-文件放页面内容后面好？\" class=\"headerlink\" title=\"为什么外部 script 文件放页面内容后面好？\"></a>为什么外部 script 文件放页面内容后面好？</h2><h3 id=\"script-执行顺序\"><a href=\"#script-执行顺序\" class=\"headerlink\" title=\"script 执行顺序\"></a>script 执行顺序</h3><blockquote>\n<p>无论如何包含代码，只要不存在 defer 和 async 属性，浏览器都会按照 <code>&lt;script&gt;</code> 元素在页面中出现的先后顺序对它们依次进行解析。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>换句话说，在第一个 <code>&lt;script&gt;</code> 元素包含的代码解析完成后，第二个 <code>&lt;script&gt;</code> 包含代码才会被解析，然后才是第三个…..<br>如果在 head 元素里包含所有 JavaScript 文件，就必须等到全部 JavaScript 代码都被下载、解析和执行完成以后，才能呈现页面的内容（浏览器在遇到 <code>&lt;body&gt;</code> 标签时才开始呈现内容）。在有 JavaScript 文件时候，浏览器呈现页面会出现明显的延迟，延时期间浏览器是一片空白。所以，外部 script 文件放页面内容后面。这样，在解析 JavaScript 代码之前，页面内容将完全呈现出来。</p>\n<h3 id=\"一定是放页面内容后面吗？\"><a href=\"#一定是放页面内容后面吗？\" class=\"headerlink\" title=\"一定是放页面内容后面吗？\"></a>一定是放页面内容后面吗？</h3><p>有种情况是 JavaScript 放哪里都一样的，那就是内容是依赖 JavaScript 的执行渲染时候，放哪都一样。所以我们需要尽量避免在 JS 中对 dom 进行修改，对于性能优化有比较大的帮助。</p>\n<h2 id=\"Load-方法\"><a href=\"#Load-方法\" class=\"headerlink\" title=\"Load() 方法\"></a>Load() 方法</h2><p>由于在 $(document).ready() 方法内注册的事件，只要 DOM 就绪就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕，所以例如图片的高度和宽度这样的属性此时不一定有效。要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法—— load() 方法。Load() 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>\n<h2 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h2><ul>\n<li>$(window).load()：等价于 window.onload()</li>\n<li>$(window).unload()：页面关闭时触发</li>\n</ul>\n<h2 id=\"坑爹的-IE-or-jQ？\"><a href=\"#坑爹的-IE-or-jQ？\" class=\"headerlink\" title=\"坑爹的 IE or jQ？\"></a>坑爹的 IE or jQ？</h2><p>最近在改一个嵌入在 iframe 中的页面的时候，使用了 jquery 做效果，而页面本身也绑定了 onload 事件。改完后，Firefox 下测试正常流畅，IE 下就要等个十几秒 jquery 的效果才出现，黄花菜都凉了。起初以为是和本身 onload 加载的方法冲突。网上普遍的说法是 $(document).ready() 是在页面 DOM 解析完成后执行，而 onload 事件是在所有资源都准备完成之后才执行，也就是说 $(document).ready() 是要在 onload 之前执行的，尤其当页面图片较大较多的时候，这个时间差可能更大。可是我这页面分明是图片都显示出来十几秒了，还不见 jquery 的效果出来。 删了 onload 加载的方法试试，结果还是一样，看来没有必要把原本的 onload 事件绑定也改用 $(document).ready() 来写。那是什么原因使得 Firefox 正常而 IE 就能呢？接着调试，发现 IE 下原来绑定的 onload 方法竟然先于 $(document).ready() 的内容执行，而 Firefox 则是先执行 $(document).ready() 的内容，再执行原来的 onload 方法。这个和网上的说法似乎不完全一致啊，走投无路的时候就看看源码，翻翻 jQuery 的源码看看 $(document).ready() 是如何实现的吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( jQuery.browser.msie &amp;&amp; <span class=\"built_in\">window</span> == top ) (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (jQuery.isReady) <span class=\"keyword\">return</span>; </span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( error ) &#123; </span><br><span class=\"line\">　　　　　　setTimeout( <span class=\"built_in\">arguments</span>.callee, <span class=\"number\">0</span> ); </span><br><span class=\"line\">　　　　　　 <span class=\"keyword\">return</span>; </span><br><span class=\"line\">　　　　&#125; </span><br><span class=\"line\">　　 <span class=\"comment\">// and execute any waiting functions </span></span><br><span class=\"line\">　　　jQuery.ready(); </span><br><span class=\"line\">&#125;)(); </span><br><span class=\"line\">jQuery.event.add( <span class=\"built_in\">window</span>, <span class=\"string\">\"load\"</span>, jQuery.ready );</span><br></pre></td></tr></table></figure>\n<p>结果很明了了，IE 只有在页面不是嵌入 iframe 中的情况下才和 Firefox 等一样，先执行 $(document).ready() 的内容，再执行原来的 onload 方法。对于嵌入 iframe 中的页面，也只是绑定在 load 事件上执行，所以自然是在原来的 onload 绑定的方法执行之后才轮到。而这个页面中正好在测试环境下有一个访问不到的资源，那十几秒的延迟正是它放大出的时间差。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.jb51.net/article/50185.htm\" target=\"_blank\" rel=\"noopener\">一张表格告诉你windows.onload()与$(document).ready()的区别</a></li>\n<li><a href=\"http://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（3）——HTTP/2新特性","slug":"前端面试系列（3）——HTTP2新特性","date":"2017-03-19T13:18:57.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（3）——HTTP2新特性.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_37.png","content":"<p>如果你认为前端不需要了解 HTTP 的话你就大错特错了，根据师兄师姐们的面试经验反馈，前端面试时关于 HTTP 的问题提问的几率也很大，而且对于更高一层的 tcp/ip 协议的认知也是前端开发者需要掌握的，所以我打算把关于 HTTP/2 新特性的文章作为前端面试系列的第三篇文章，如果想对 HTTP/2 协议有更深入的了解，可以点击文末的扩展阅读链接。</p>\n<h2 id=\"HTTP-2-源自-SPDY2\"><a href=\"#HTTP-2-源自-SPDY2\" class=\"headerlink\" title=\"HTTP/2 源自 SPDY2\"></a>HTTP/2 源自 SPDY2</h2><p>SPDY 系列协议由谷歌开发，于 2009 年公开。它的设计目标是降低 50% 的页面加载时间。当下很多著名的互联网公司，例如百度、淘宝、<a href=\"https://www.upyun.com/\" target=\"_blank\" rel=\"noopener\">UPYUN</a> 都在自己的网站或 APP 中采用了 SPDY 系列协议（当前最新版本是 SPDY/3.1），因为它对性能的提升是显而易见的。主流的浏览器（谷歌、火狐、Opera）也都早已经支持 SPDY，它已经成为了工业标准，HTTP Working-Group 最终决定以 SPDY/2 为基础，开发 HTTP/2。 但是，HTTP/2 跟 SPDY 仍有不同的地方，主要是以下两点：</p>\n<ol>\n<li>HTTP/2 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</li>\n<li>HTTP/2 消息头的压缩算法采用 <a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"noopener\">HPACK</a>，而非 SPDY 采用的 <a href=\"http://zh.wikipedia.org/wiki/DEFLATE\" target=\"_blank\" rel=\"noopener\">DELEFT</a></li>\n</ol>\n<h2 id=\"HTTP-2-的优势\"><a href=\"#HTTP-2-的优势\" class=\"headerlink\" title=\"HTTP/2 的优势\"></a>HTTP/2 的优势</h2><h3 id=\"1-HTTP-是一个二进制协议\"><a href=\"#1-HTTP-是一个二进制协议\" class=\"headerlink\" title=\"1. HTTP 是一个二进制协议\"></a>1. HTTP 是一个二进制协议</h3><p>基于二进制的 HTTP/2 可以使成帧的使用变得更为便捷。在 HTTP1.1 和其他基于文本的协议中，对帧的起始和结束识别起来相当复杂。而另一方面，这项决议同样使得我们可以更加便捷的从帧结构中分离出那部分协议本身的内容。而在 HTTP1 中，各个部分相互交织，犹如一团乱麻。</p>\n<p>HTTP/2 会发送有着不同类型的二进制帧，但他们都有如下的公共字段：Type, Length, Flags, Steam Identifier 和 frame payload；规范中一共定义了 10 种不同的帧，其中最基础的两种分别对应于 HTTP 1.1 的 DATA 和 HEADERS。之后我会更详细的介绍它们其中的一部分。</p>\n<p>二进制协议的优势显而易见：解析开销更小，描述协议也更高效。</p>\n<h3 id=\"2-多路复用的流\"><a href=\"#2-多路复用的流\" class=\"headerlink\" title=\"2. 多路复用的流\"></a>2. 多路复用的流</h3><p>流是一个逻辑上的联合，一个独立的，双向的帧序列可以通过一个 HTTP/2 的连接在服务端与客户端之间不断的交换数据。</p>\n<p>每个单独的 HTTP/2 连接都可以包含多个并发的流，这些流中<strong>交错</strong>的包含着来自两端的帧。流既可以被客户端/服务器端单方面的建立和使用，也可以被双方共享，或者被任意一边关闭。在流里面，<strong>每一帧发送的顺序非常关键</strong>。接收方会按照收到帧的顺序来进行处理。</p>\n<p>流的多路复用意味着在同一连接中来自各个流的数据包会被混合在一起。就好像两个（或者更多）独立的“数据列车”被拼凑到了一辆列车上，但它们最终会在终点站被分开。</p>\n<h3 id=\"3-优先级和依赖性\"><a href=\"#3-优先级和依赖性\" class=\"headerlink\" title=\"3. 优先级和依赖性\"></a>3. 优先级和依赖性</h3><p>每个流都包含一个优先级（也就是“权重”），它被用来告诉对端哪个流更重要。当资源有限的时候，服务器会根据优先级来选择应该先发送哪些流。</p>\n<p>借助于 PRIORITY 帧（关于 HTTP/2 中帧的介绍可以查看文末扩展阅读），客户端同样可以告知服务器当前的流依赖于其他哪个流。该功能让客户端能建立一个优先级“树”，所有“子流”会依赖于“父流”的传输完成情况。</p>\n<p>优先级和依赖关系可以在传输过程中被动态的改变。这样当用户滚动一个全是图片的页面的时候，浏览器就能够指定哪个图片拥有更高的优先级。或者是在你切换标签页的时候，浏览器可以提升新切换到的页面所包含流的优先级。</p>\n<h3 id=\"4-头压缩\"><a href=\"#4-头压缩\" class=\"headerlink\" title=\"4. 头压缩\"></a>4. 头压缩</h3><p>HTTP 是一种无状态的协议。简而言之，这意味着每个请求必须要携带服务器需要的所有细节，而不是让服务器保存住之前请求的元数据。因为 HTTP/2 并没有改变这个范式，所以它也需要这样（携带所有细节）。</p>\n<p>这也保证了 HTTP 可重复性。当一个客户端从同一服务器请求了大量资源（例如页面的图片）的时候，所有这些请求看起来几乎都是一致的，而这些大量一致的东西则正好值得被压缩。</p>\n<p>当每个页面资源的个数上升的时候，cookies 和请求的大小都会增加，而每个请求都会包含的 cookie 几乎是一模一样的。</p>\n<p>HTTP 1.1 请求的大小正变得越来越大，有时甚至会大于 TCP 窗口的初始大小，这会严重拖累发送请求的速度。因为它们需要等待带着 ACK 的响应回来以后，才能继续被发送。这也是另一个需要压缩的理由。</p>\n<p>HTTP/2 对消息头采用 <strong>HPACK</strong> 进行压缩传输，能够节省消息头占用的网络的流量。如果我们约定将常用的请求头的参数用一些特殊的编号来表示，比如 GET /index.html 用一个 1 来表示，POST /index.html 用 2 来表示。那么是不是可以节省很多字节？ 为 HTTP/2 的专门量身打造的 HPACK 便是类似这样的思路延伸。它使用一份索引表来定义常用的 HTTP Header。把常用的 HTTP Header 存放在表里。请求的时候便只需要发送在表里的索引位置即可。例如 :method=GET 使用索引值 2 表示，:path=/index.html 使用索引值 5 表示。</p>\n<h3 id=\"5-重置\"><a href=\"#5-重置\" class=\"headerlink\" title=\"5. 重置\"></a>5. 重置</h3><p>HTTP 1.1 有一个缺点是：当一个含有确切值的 Content-Length 的 HTTP 消息被送出之后，你就很难中断它了。当然，通常你可以断开整个 TCP 链接（但也不总是可以这样），但这样导致的代价就是需要通过三次握手来重新建立一个新的 TCP 连接。</p>\n<p>一个更好的方案是只终止当前传输的消息并重新发送一个新的。在 HTTP/2 里面，我们可以通过发送 RST_STREAM 帧来实现这种需求，从而避免浪费带宽和中断已有的连接。</p>\n<h3 id=\"6-服务器推送\"><a href=\"#6-服务器推送\" class=\"headerlink\" title=\"6.服务器推送\"></a>6.服务器推送</h3><p>这个功能通常被称作“缓存推送”。主要的思想是：当一个客户端请求资源 X，而服务器知道它很可能也需要资源 Z 的情况下，服务器可以在客户端发送请求前，主动将资源 Z 推送给客户端。这个功能帮助客户端将 Z 放进缓存以备将来之需。</p>\n<p>服务器推送需要客户端显式的允许服务器提供该功能。但即使如此，客户端依然能自主选择是否需要中断该推送的流。如果不需要的话，客户端可以通过发送一个 RST_STREAM 帧来中止。</p>\n<h3 id=\"7-流量控制\"><a href=\"#7-流量控制\" class=\"headerlink\" title=\"7. 流量控制\"></a>7. 流量控制</h3><p>HTTP/2 上面每个流都拥有自己的公示的流量窗口，它可以限制另一端发送数据。对于每个流来说，两端都必须告诉对方自己还有更多的空间来接受新的数据，而在该窗口被扩大前，另一端只被允许发送这么多数据。</p>\n<p>而只有数据帧会受到流量控制。</p>\n<h3 id=\"8-HTTP-2-的基石-Frame\"><a href=\"#8-HTTP-2-的基石-Frame\" class=\"headerlink\" title=\"8. HTTP/2 的基石-Frame\"></a>8. HTTP/2 的基石-Frame</h3><p>Frame 是 HTTP/2 二进制格式的基础，基本可以把它理解为它 TCP 里面的数据包一样。HTTP/2 之所以能够有如此多的新特性，正是因为底层数据格式的改变。 Frame 的基本格式如下（图中的数字表示所占位数，内容摘自  <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-http2-17\" target=\"_blank\" rel=\"noopener\">http2-draft-17</a>）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------------------------------------+</span><br><span class=\"line\">| Length (24) |</span><br><span class=\"line\">+---------------+---------------+---------------+</span><br><span class=\"line\">| Type (8) | Flags (8) |</span><br><span class=\"line\">+-+-------------+---------------+-------------------+</span><br><span class=\"line\">|R| Stream Identifier (31) |</span><br><span class=\"line\">+=+=================================================+</span><br><span class=\"line\">| Frame Payload (0...) ...</span><br><span class=\"line\">+---------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Length</strong>：表示 Frame Payload 部分的长度，另外 Frame Header 的长度是固定的 9 字节（Length + Type + Flags + R + Stream Identifier = 72 bit）。</li>\n<li><strong>Type</strong>：区分这个 Frame Payload 存储的数据是属于 HTTP Header 还是 HTTP Body；另外 HTTP/2 新定义了一些其他的 Frame Type，例如，这个字段为 0 时，表示 DATA 类型（即 HTTP/1.x 里的 Body 部分数据）</li>\n<li><strong>Flags</strong>：共 8 位， 每位都起标记作用。每种不同的 Frame Type 都有不同的 Frame Flags。例如发送最后一个 DATA 类型的 Frame 时，就会将 Flags 最后一位设置 1（<code>flags &amp;= 0x01</code>），表示 END_STREAM，说明这个 Frame 是流的最后一个数据包。</li>\n<li><strong>R</strong>：保留位。</li>\n<li><strong>Stream Identifier</strong>：流 ID，当客户端和服务端建立 TCP 链接时，就会先发送一个 Stream ID = 0 的流，用来做些初始化工作。之后客户端和服务端从 1 开始发送请求/响应。</li>\n</ul>\n<p>Frame 由 Frame Header 和 Frame Payload 两部分组成。不论是原来的 HTTP Header 还是 HTTP Body，在 HTTP/2 中，都将这些数据存储到 Frame Payload，组成一个个 Frame，再发送响应 / 请求。通过 Frame Header 中的 Type 区分这个 Frame 的类型。由此可见语义并没有太大变化，而是数据的格式变成二进制的 Frame。二者的转换和关系如下图:</p>\n<div align=\"center\"><img src=\"/images/hexo_post_37.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"9-HTTP-2-对-web-开发的影响\"><a href=\"#9-HTTP-2-对-web-开发的影响\" class=\"headerlink\" title=\"9.HTTP/2 对 web 开发的影响\"></a>9.HTTP/2 对 web 开发的影响</h3><p>到目前为止，HTTP/2 还没被大范围部署使用，我们也无法确定到底会发生什么变化。</p>\n<p>HTTP/2 减少了网络往返传输的数量，并且用多路复用和快速丢弃不需要的流的办法来完全避免了 head of line blocking（线头阻塞）的困扰。它也支持大量并行流，所以即使网站的数据分发在各处也不是问题。合理利用流的优先级，可以让客户端尽可能优先收到更重要的数据。</p>\n<p>所有这些加起来，页面载入时间和站点的响应速度都会更快。简而言之，它们都代表着更好的 web 体验。</p>\n<p>然而这里的问题在于：对于网站的开发者而言，在短期内开发和部署同一套前端来支持 HTTP 1.1 和 HTTP/2 的客户端访问并获得最大性能将会是一个挑战。考虑到这些问题，<strong>彻底发掘 HTTP/2 的潜力还有很长一段路要走</strong>。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"https://bagder.gitbooks.io/http2-explained/content/zh/\" target=\"_blank\" rel=\"noopener\">http2讲解（中文）</a></li>\n<li><a href=\"https://http2.github.io/\" target=\"_blank\" rel=\"noopener\">HTTP/2 官网</a></li>\n<li><a href=\"https://http2.akamai.com/demo\" target=\"_blank\" rel=\"noopener\">官方给出的关于 HTTP/2 性能的例子</a></li>\n<li><a href=\"http://blog.csdn.net/jianfyun/article/details/48549939\" target=\"_blank\" rel=\"noopener\">HTTP/2 的各种帧定义</a></li>\n</ul>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"面试","path":"api/tags/面试.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]},{"title":"前端面试系列（4）——CSS选择器","slug":"前端面试系列（4）——CSS选择器","date":"2017-04-03T03:43:13.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（4）——CSS选择器.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_92.png","content":"<p>这篇文章主要总结了 CSS 选择器的相关知识，CSS 的选择器是前端面试或者笔试中经常问到和用到的，同时对于开发来说也是必备基础知识</p>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><h3 id=\"不同级别\"><a href=\"#不同级别\" class=\"headerlink\" title=\"不同级别\"></a>不同级别</h3><p>级别依次递减：</p>\n<ol>\n<li>在属性后面使用 <code>!important</code> 会覆盖页面内任何位置定义的元素样式。</li>\n<li>作为 style 属性写在元素内的样式（简称为“内联样式”）</li>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器</li>\n<li>浏览器自定义</li>\n</ol>\n<p>另外，在《精彩绝伦的CSS》这本书中，作者用数字定量了选择器的优先级，具体规则为：</p>\n<ul>\n<li>每个元素描述符贡献 0，0，0，1</li>\n<li>每个类、伪类或者属性描述符贡献 0，0，1，0</li>\n<li>每个 ID 描述符贡献 0，1，0，0</li>\n<li>行内样式或内联样式贡献1 ，0，0，0</li>\n</ul>\n<p>可能看到这里你还比较糊涂，那请看下面的图片：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_92.png\" alt=\"\" width=\"400\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_93.png\" alt=\"\" width=\"400\"></div>\n\n<p>其实就是简单的加法，数字越大优先级越高（为何如此计算尚不得知，仅作为额外知识），!important 会覆盖任何没有 !important 的属性</p>\n<h3 id=\"同一级别\"><a href=\"#同一级别\" class=\"headerlink\" title=\"同一级别\"></a>同一级别</h3><p>同一级别中后写的会覆盖先写的样式</p>\n<h2 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h2><p>这几类是使用频率最高的几种，同时在各个版本的 reset.css 中也会经常出现</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>通用元素选择器，匹配页面任何元素（使用频率较低）</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>id 选择器，匹配特定 id 的元素</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>类选择器，匹配 class 包含（不是等于）特定类的元素</td>\n</tr>\n<tr>\n<td>element</td>\n<td>标签选择器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><p>这些选择器让我们的样式添加更加灵活，同时需要注意的是不只能写两层，理论上讲只要找得到可以写无限层，但是层数越多越影响性能，同时也会有优先级的麻烦，所以争取用最简短、最准确的选择器才是正道</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“E,F”</td>\n<td>多元素选择器，用 “”,”” 分隔，同时匹配元素 E 或元素 F</td>\n</tr>\n<tr>\n<td>“E F “</td>\n<td>后代选择器，用空格分隔，匹配 E 元素所有的后代元素F</td>\n</tr>\n<tr>\n<td>E&gt;F</td>\n<td>子元素选择器，用 “”&gt;”” 分隔，匹配 E 元素的所有直接子元素 F</td>\n</tr>\n<tr>\n<td>E+F</td>\n<td>直接相邻选择器，匹配 E 元素之后的相邻的同级元素 F</td>\n</tr>\n<tr>\n<td>E~F</td>\n<td>普通相邻选择器（弟弟选择器），匹配E元素之后的同级元素F（无论直接相邻与否）</td>\n</tr>\n<tr>\n<td>.class1.class2</td>\n<td>匹配类中既包含 class1 又包含 class2 的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><p>这一类的选择器用的比较少，因为其实用性并不是很高，同时在性能方面也会比较差，所以可以作为了解，如果真需要用属性去选择的时候知道 CSS 有属性选择器就可以了</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E[attr]</td>\n<td>匹配所有具有属性 attr 的元素，div[id] 就能取到所有有 id 属性的 div</td>\n</tr>\n<tr>\n<td>E[attr=value]</td>\n<td>匹配属性 attr 值为 value 的元素，div[id=test] 匹配 id 为 test 的 div</td>\n</tr>\n<tr>\n<td>E[attr~=value]</td>\n<td>匹配所有属性 attr 具有多个空格分隔、其中一个值等于 value 的元素</td>\n</tr>\n<tr>\n<td>E[attr&#124;=value]</td>\n<td>匹配所有 attr 属性具有多个 ”-” 分隔、其中一个值以 value 开头的元素，主要用于 lang 属性，比如“en”、“en-us”</td>\n</tr>\n<tr>\n<td>E[attr ^=value]</td>\n<td>匹配属性 attr 的值以 value 开头的元素</td>\n</tr>\n<tr>\n<td>E[attr $=value]</td>\n<td>匹配属性 attr 的值以 value 结尾的元素</td>\n</tr>\n<tr>\n<td>E[attr *=value]</td>\n<td>匹配属性 attr 的值包含 value 的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>这一类选择器大部分都是 CSS3 新增类型，可以更方便、更快捷地匹配到目标元素，所以以下这些选择器很重要，需要牢牢记住</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-child</td>\n<td>匹配元素E的第一个子元素</td>\n</tr>\n<tr>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>E:visited</td>\n<td>匹配所有已被点击的链接</td>\n</tr>\n<tr>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n</tr>\n<tr>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的 E 元素</td>\n</tr>\n<tr>\n<td>E:focus</td>\n<td>匹配获得当前焦点的 E 元素</td>\n</tr>\n<tr>\n<td>E:lang(c)</td>\n<td>匹配 lang 属性等于 c 的 E 元素</td>\n</tr>\n<tr>\n<td>E:enabled</td>\n<td>匹配表单中可用的元素</td>\n</tr>\n<tr>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>E:checked</td>\n<td>匹配表单中被选中的 radio 或 checkbox 元素</td>\n</tr>\n<tr>\n<td>E::selection</td>\n<td>匹配用户当前选中的元素</td>\n</tr>\n<tr>\n<td>E:root</td>\n<td>匹配文档的根元素，对于 HTML 文档，就是 HTML 元素</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配其父元素的第 n 个子元素，第一个编号为 1</td>\n</tr>\n<tr>\n<td>E:nth-last-child(n)</td>\n<td>匹配其父元素的倒数第 n 个子元素，第一个编号为 1</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>与 :nth-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:nth-last-of-type(n)</td>\n<td>与 :nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:last-child</td>\n<td>匹配父元素的最后一个子元素，等同于 :nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于 :nth-of-type(1)</td>\n</tr>\n<tr>\n<td>E:last-of-type</td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于 :nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:only-child</td>\n<td>匹配父元素下仅有的一个子元素，等同于 :first-child:last-child 或  :nth-child(1):nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:only-of-type</td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于 :first-of-type:last-of-type 或 :nth-of-type(1):nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:empty</td>\n<td>匹配一个不包含任何子元素的元素，文本节点也被看作子元素</td>\n</tr>\n<tr>\n<td>E:not(selector)</td>\n<td>匹配不符合当前选择器的任何元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h2><p>不得不说，:before 和 :after 选择器好用到爆（谁用谁知道），在一些悬停动画、箭头绘制以及 clearfix 样式里会经常见到</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-line</td>\n<td>匹配 E 元素内容的第一行</td>\n</tr>\n<tr>\n<td>E:first-letter</td>\n<td>匹配 E 元素内容的第一个字母</td>\n</tr>\n<tr>\n<td>E:before</td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>E:after</td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>CSS 的选择器是基础中的基础，而有些选择器使用频率是比较低的，但是一定要知道 CSS 的选择器都有哪些，遇到新的需求时会少很多麻烦。同时，不要经常使用多层选择器，这会使页面渲染负担加重，影响性能。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/dolphinX/p/3347713.html\" target=\"_blank\" rel=\"noopener\">十分钟搞定CSS选择器</a></li>\n<li><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\" target=\"_blank\" rel=\"noopener\">CSS 选择器参考手册</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（8）——TCP的三次握手与四次分手","slug":"前端面试系列（8）——TCP的三次握手与四次分手","date":"2017-04-05T08:07:21.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/前端面试系列（8）——TCP的三次握手与四次分手.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_123.jpg","content":"<h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><p><a href=\"http://baike.baidu.com/link?url=eNyUOgDeOV5z-03dVd8M1Y2jazNBA9n_eeqpsGs6DROKf_Eezztf31POgn2yMVtzxhX1BIcma9hIT2lzwaeswKAUZHNBSzFasHHI6SsZKnGJJVu2fKrPkMh3byyFTt1j4VqBV4re8SYTBTMDXY_L7clee5XEglKSOAWJqr5E_QRD6INjs03VMQNOUstxguVR-oOfOPGi4cah5m0VFukOkpT6STLUEGHWUIUUYFv0aAgMRFovp5EWN7V3iMdEZQ0a6ikGU90BRIYMLLIKsVNjP8Szj4c6SexwpfRM6D5CjjG\" target=\"_blank\" rel=\"noopener\">开放系统互连参考模型</a> (Open System Interconnect 简称 OSI）是国际标准化组织（ISO）和国际电报电话咨询委员会（CCITT）联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。每一层的功能是独立的。它利用其下一层提供的服务并为其上一层提供服务，而与其他层的具体实现无关。这里所谓的“服务”就是下一层向上一层提供的通信功能和层之间的会话规定，一般用通信原语实现。两个开放系统中的同等层之间的通信规则和约定称之为协议。通常把1～4层协议称为下层协议，5～7 层协议称为上层协议。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_123.jpg\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP / IP\"></a>TCP / IP</h3><p>TCP 工作在网络 OSI 的七层模型中的第四层——Transport 层，IP 在第三层——Network 层，ARP 在第二层——Data Link 层；在第二层上的数据，我们把它叫 Frame，在第三层上的数据叫 Packet，第四层的数据叫 Segment。同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。在 OSI 七层模型中，每一层的作用和对应的协议如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_58.jpeg\" alt=\"\" width=\"550\"></div>\n\n<h2 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h2><p>TCP 是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记 TCP 协议中每个字段的含义。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_223.jpg\" alt=\"\" width=\"700\"></div>\n\n<p>上面就是 TCP 协议头部的格式，下面就将每个字段的信息都详细的说明一下。</p>\n<ul>\n<li><strong>Source Port</strong>和<strong>Destination Port</strong>：分别占用 16 位，表示源端口号和目的端口号；用于区别主机中的不同进程，而 IP 地址是用来区分不同的主机的，源端口号和目的端口号配合上 IP 首部中的源 IP 地址和目的 IP 地址就能唯一的确定一个 TCP 连接；</li>\n<li><strong>Sequence Number</strong>：用来标识从 TCP 发端向 TCP 收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；</li>\n<li><strong>Acknowledgment Number</strong>：32 位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加 1。不过，只有当标志位中的 ACK 标志（下面介绍）为 1 时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li>\n<li><strong>Offset</strong>：给出首部中 32 bit 字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占 4bit（最多能表示 15 个 32bit 的的字，即 4*15=60 个字节的首部长度），因此 TCP 最多有 60 字节的首部。然而，没有任选字段，正常的长度是 20 字节；</li>\n<li><strong>TCP Flags</strong>：TCP 首部中有 6 个标志比特，它们中的多个可同时被设置为 1，主要是用于操控 TCP 的状态机的，依次为 <code>URG</code>，<code>ACK</code>，<code>PSH</code>，<code>RST</code>，<code>SYN</code>，<code>FIN</code>。每个标志位的意思如下：<ul>\n<li>URG：此标志表示 TCP 包的紧急指针域（后面马上就要说到）有效，用来保证 TCP 连接不被中断，并且督促中间层设备要尽快处理这些数据；</li>\n<li><strong>ACK</strong>：此标志表示应答域有效，就是说前面所说的 TCP 应答号将会包含在 TCP 数据包中；有两个取值：0 和 1，为 1 的时候表示应答域有效，反之为 0；</li>\n<li>PSH：这个标志位表示 Push 操作。所谓 Push 操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li>\n<li>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li>\n<li><strong>SYN</strong>：表示同步序号，用来建立连接。<code>SYN</code> 标志位和 <code>ACK</code> 标志位搭配使用，当连接请求的时候，<code>SYN</code> = 1，<code>ACK</code> = 0；连接被响应的时候，<code>SYN</code> = 1，<code>ACK</code> = 1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有 <code>SYN</code> 的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行 TCP 三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行 TCP 的三次握手；</li>\n<li>FIN：表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送 <code>FIN</code> 标志位的 TCP 数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n</li>\n<li><strong>Window</strong>：窗口大小，也就是有名的滑动窗口，用来进行流量控制；这是一个复杂的问题，这篇博文中并不会进行总结的；</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>TCP 是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在 TCP / IP 协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。这就是面试中经常会被问到的 <strong>TCP 三次握手</strong>。\b下图很形象的展示了三次握手和四次分手的数据交换：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_74.jpg\" alt=\"\" width=\"400\"></div>\n\n<ol>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将 <code>SYN</code> 位置为1，<code>Sequence Number</code> 为 x；然后，客户端进入 <code>SYN_SEND</code> 状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到 <code>SYN</code> 报文段。服务器收到客户端的 <code>SYN</code> 报文段，需要对这个 <code>SYN</code> 报文段进行确认，设置 <code>Acknowledgment Number</code> 为 x+1(<code>Sequence Number</code> + 1)；同时，自己自己还要发送 <code>SYN</code> 请求信息，将 <code>SYN</code> 位置为1，<code>Sequence Number</code> 为 y；服务器端将上述所有信息放到一个报文段（即 <code>SYN + ACK</code> 报文段）中，一并发送给客户端，此时服务器进入 <code>SYN_RECV</code> 状态；</li>\n<li>第三次握手：客户端收到服务器的<code>SYN + ACK</code> 报文段。然后将 <code>Acknowledgment Number</code> 设置为 y+1，向服务器发送 <code>ACK</code> 报文段，这个报文段发送完毕以后，客户端和服务器端都进入 <code>ESTABLISHED</code> 状态，完成 TCP 三次握手。</li>\n</ol>\n<p>完成了三次握手，客户端和服务器端就可以开始传送数据。</p>\n<h2 id=\"四次分手\"><a href=\"#四次分手\" class=\"headerlink\" title=\"四次分手\"></a>四次分手</h2><p>当客户端和服务器通过三次握手建立了 TCP 连接以后，当数据传送完毕，肯定是要断开 TCP 连接的啊。那对于 TCP 的断开连接，这里就有了神秘的“四次分手”。</p>\n<ol>\n<li>第一次分手：主机 1（可以是客户端，也可以是服务器端），设置 <code>Sequence Number</code> 和 <code>Acknowledgment Number</code>，向主机 2 发送一个 <code>FIN</code> 报文段；此时，主机 1 进入 <code>FIN_WAIT_1</code> 状态；这表示主机1没有数据要发送给主机 2 了；</li>\n<li>第二次分手：主机 2 收到了主机1发送的 <code>FIN</code> 报文段，向主机 1 回一个 <code>ACK</code> 报文段，<code>Acknowledgment Number</code> 为 <code>Sequence Number</code> 加 1；主机 1 进入 <code>FIN_WAIT_2</code> 状态；主机 2 告诉主机 1，我“同意”你的关闭请求；</li>\n<li>第三次分手：主机 2 向主机 1 发送 <code>FIN</code> 报文段，请求关闭连接，同时主机 2 进入 <code>LAST_ACK</code> 状态；</li>\n<li>第四次分手：主机 1 收到主机 2 发送的 <code>FIN</code> 报文段，向主机 2 发送 <code>ACK</code> 报文段，然后主机 1 进入 <code>TIME_WAIT</code> 状态；主机 2 收到主机 1 的 <code>ACK</code> 报文段以后，就关闭连接；此时，主机 1 等待 2MSL 后依然没有收到回复，则证明 Server 端已正常关闭，那好，主机 1 也可以关闭连接了。</li>\n</ol>\n<p>至此，TCP 的四次分手就这么愉快的完成了。</p>\n<h3 id=\"为什么要握手三次\"><a href=\"#为什么要握手三次\" class=\"headerlink\" title=\"为什么要握手三次\"></a>为什么要握手三次</h3><p>既然总结了 TCP 的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那 TCP 为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p>\n<blockquote>\n<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n</blockquote>\n<p>在书中同时举了一个例子：</p>\n<blockquote>\n<p>“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。”</p>\n</blockquote>\n<p>总结一下就是为了<strong>防止服务器端一直等待而浪费资源。</strong></p>\n<h2 id=\"为什么要分手四次\"><a href=\"#为什么要分手四次\" class=\"headerlink\" title=\"为什么要分手四次\"></a>为什么要分手四次</h2><p>那四次分手又是为何呢？TCP 协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP 是全双工模式，这就意味着，当主机 1 发出 <code>FIN</code> 报文段时，只是表示主机 1 已经没有数据要发送了，主机 1 告诉主机 2，它的数据已经全部发送完毕了；但是，这个时候主机 1 还是可以接受来自主机 2 的数据；当主机 2 返回 <code>ACK</code> 报文段时，表示它已经知道主机 1 没有数据发送了，但是主机 2 还是可以发送数据到主机 1 的；当主机 2 也发送了 <code>FIN</code> 报文段时，这个时候就表示主机 2 也没有数据要发送了，就会告诉主机 1，我也没有数据要发送了，之后彼此就会愉快的中断这次 TCP 连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>\n<ul>\n<li><code>FIN_WAIT_1</code>：这个状态要好好解释一下，其实 <code>FIN_WAIT_1</code> 和 <code>FIN_WAIT_2</code> 状态的真正含义都是表示等待对方的 FIN 报文。而这两种状态的区别是：<code>FIN_WAIT_1</code> 状态实际上是当 SOCKET 在 ESTABLISHED 状态时，它想主动关闭连接，向对方发送了 <code>FIN</code> 报文，此时该 SOCKET 即进入到 <code>FIN_WAIT_1</code> 状态。而当对方回应 ACK 报文后，则进入到 <code>FIN_WAIT_2</code> 状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应 ACK 报文，所以 <code>FIN_WAIT_1</code> 状态一般是比较难见到的，而 <code>FIN_WAIT_2</code> 状态还有时常常可以用 netstat 看到。（主动方）</li>\n<li><code>FIN_WAIT_2</code>：上面已经详细解释了这种状态，实际上 <code>FIN_WAIT_2</code> 状态下的 SOCKET，表示半连接，也即有一方要求 close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK 信息)，稍后再关闭连接。（主动方）</li>\n<li><code>CLOSE_WAIT</code>：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方 close 一个 SOCKET 后发送 <code>FIN</code> 报文给自己，你系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 <code>CLOSE_WAIT</code> 状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close 这个 SOCKET，发送 <code>FIN</code> 报文给对方，也即关闭连接。所以你在 <code>CLOSE_WAIT</code> 状态下，需要完成的事情是等待你去关闭连接。（被动方）</li>\n<li><code>LAST_ACK</code>：这个状态还是比较容易好理解的，它是被动关闭一方在发送 <code>FIN</code> 报文后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态了。（被动方）</li>\n<li><code>TIME_WAIT</code>：表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态了。如果 FIN_WAIT_1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 <code>TIME_WAIT</code> 状态，而无须经过 <code>FIN_WAIT_2</code> 状态。（主动方）</li>\n<li><code>CLOSED</code>：表示连接中断。</li>\n</ul>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"><a href=\"#1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\" class=\"headerlink\" title=\"1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\"></a>1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</h3><p>这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建连请求后，它可以把 ACK 和 SYN（ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上关闭 SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的。</p>\n<h3 id=\"2．为什么-TIME-WAIT-状态还需要等-2MSL-后才能返回到-CLOSED-状态？\"><a href=\"#2．为什么-TIME-WAIT-状态还需要等-2MSL-后才能返回到-CLOSED-状态？\" class=\"headerlink\" title=\"2．为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？\"></a>2．为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？</h3><p>这是因为虽然双方都同意关闭连接了，而且握手的 4 个报文也都协调和发送完毕，按理可以直接回到 CLOSED 状态（就好比从 SYN_SEND 状态到 ESTABLISH 状态那样）；但是因为我们必须要假想网络是不可靠的，你无法保证你最后发送的 ACK 报文会一定被对方收到，因此对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文，而重发 FIN 报文，所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/20879359\" target=\"_blank\" rel=\"noopener\">怎样生动描述TCP的「三次握手」？</a></li>\n</ul>\n","raw":null,"categories":[{"name":"computer-base","path":"api/categories/computer-base.json"}],"tags":[{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"搜狐研究院前端散招面试题总结","slug":"搜狐研究院前端散招面试题总结","date":"2017-05-19T02:06:37.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/搜狐研究院前端散招面试题总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先，搜狐媒体大厦还是蛮阔气的，但是门口的保安让我在沙发区稍等一会儿的时候，我看到那里有 5 个类似员工的人在打王者荣耀。。果然“大公司”的员工氛围就是不一样啊。。后来等了大概 10 分钟左右，一个挂有实习工作牌的女士把我带到了 9 楼，这里应该是搜狐员工办公的地方，两边都有比较大的办公区，然后中间有一块稍微小一点的地方用来面试和聊天，hr 姐姐首先让我做了一下搜狐的笔试题，然后说大概一个小时，如果做完了就给她打电话，然后就自己走开了（连杯水都没有倒，实习生就是这样的吗。。）， 做完了之后就有一位男士拿着我的简历过来了，整个面试的过程堪称尴尬，因为我的简历上写有“关注ES6”，所以这位年轻的面试官就开始各种问 ES6 相关的东西，还问我和 react 相关的东西，比如让我讲一下 react 的设计思想啊什么的。。难道这就是“关注ES6”想要表达的意思吗？后来他可能感觉也比较尴尬了，就问了一些 JS 相关的东西，比如 self 和 this 的区别啊什么的，但是我的水平实在有限，这位面试官的前端水平实在是在我之上太多，所以我也是基本上全程蒙蔽，更别提让我用 jQuery 实现一个 promise 对象了（对了，这位面试官连 jQ 的 when() 方法都不知道。。），就这样结束了一面，当然由于我的水平实在太低，所以就直接让我走人了（不过我也比较饿了，想回学校吃点东西了。。）</p>\n<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><h3 id=\"一、不定项选择题\"><a href=\"#一、不定项选择题\" class=\"headerlink\" title=\"一、不定项选择题\"></a>一、不定项选择题</h3><p>我不知道笔试题能不能拍照，但是我还是冒着被批评和留下不好印象的风险拍了一下，总体来说难度还是适中的，其中有些题还是蛮经典的，大家可以自行消化</p>\n<h4 id=\"1-以下元素为块级元素的有：\"><a href=\"#1-以下元素为块级元素的有：\" class=\"headerlink\" title=\"1. 以下元素为块级元素的有：\"></a>1. 以下元素为块级元素的有：</h4><ul>\n<li>p</li>\n<li>strong</li>\n<li>span</li>\n<li>section</li>\n</ul>\n<h4 id=\"2-以下可以使元素不可见的有：\"><a href=\"#2-以下可以使元素不可见的有：\" class=\"headerlink\" title=\"2. 以下可以使元素不可见的有：\"></a>2. 以下可以使元素不可见的有：</h4><ul>\n<li>display: none</li>\n<li>width:0; height:0; overflow:hidden</li>\n<li>visibility: hidden</li>\n<li>display: inline</li>\n</ul>\n<h4 id=\"3-以下正确的有：\"><a href=\"#3-以下正确的有：\" class=\"headerlink\" title=\"3. 以下正确的有：\"></a>3. 以下正确的有：</h4><ul>\n<li>Number.MIN_VALUE &gt; 0</li>\n<li>Number(1) == new Number(1)</li>\n<li>null == undefined</li>\n<li>NaN == NaN</li>\n</ul>\n<h4 id=\"4-以下会有错误发生的有：\"><a href=\"#4-以下会有错误发生的有：\" class=\"headerlink\" title=\"4. 以下会有错误发生的有：\"></a>4. 以下会有错误发生的有：</h4><ul>\n<li>9..toString()  //“9”</li>\n<li>alert(a)  //a is not defined</li>\n<li>eval(‘a’)  //a is not defined</li>\n<li>console.log(Number)</li>\n</ul>\n<h4 id=\"5-以下哪些情况会促发-BFC？\"><a href=\"#5-以下哪些情况会促发-BFC？\" class=\"headerlink\" title=\"5. 以下哪些情况会促发 BFC？\"></a>5. 以下哪些情况会促发 BFC？</h4><ul>\n<li>float 不为 none</li>\n<li>position 为 fixed</li>\n<li>display 为 static</li>\n<li>overflow 为 scroll</li>\n</ul>\n<h4 id=\"6-哪些元素会生成-BFC：\"><a href=\"#6-哪些元素会生成-BFC：\" class=\"headerlink\" title=\"6. 哪些元素会生成 BFC：\"></a>6. 哪些元素会生成 BFC：</h4><ol>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow 不为 visible</li>\n</ol>\n<h3 id=\"二、填空题\"><a href=\"#二、填空题\" class=\"headerlink\" title=\"二、填空题\"></a>二、填空题</h3><h4 id=\"1-一个-div-垂直居中于整个-body-的-css-代码：\"><a href=\"#1-一个-div-垂直居中于整个-body-的-css-代码：\" class=\"headerlink\" title=\"1. 一个 div 垂直居中于整个 body 的 css 代码：\"></a>1. 一个 div 垂直居中于整个 body 的 css 代码：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\"><a href=\"#2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\" class=\"headerlink\" title=\"2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10\"></a>2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-匹配邮箱的正则表达式：\"><a href=\"#3-匹配邮箱的正则表达式：\" class=\"headerlink\" title=\"3. 匹配邮箱的正则表达式：\"></a>3. 匹配邮箱的正则表达式：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\[a-z0<span class=\"number\">-9</span>\\]+(\\[._\\\\\\-\\]*\\[a-z0<span class=\"number\">-9</span>\\])*@(\\[a-z0<span class=\"number\">-9</span>\\]+\\[-a-z0<span class=\"number\">-9</span>\\]*\\[a-z0<span class=\"number\">-9</span>\\]+.)&#123;<span class=\"number\">1</span>,<span class=\"number\">63</span>&#125;\\[a-z0<span class=\"number\">-9</span>\\]+$</span><br></pre></td></tr></table></figure>\n<p>对于该正则表达式的解释：<a href=\"http://www.jb51.net/article/31182.htm\" target=\"_blank\" rel=\"noopener\">比较正宗的验证邮箱的正则表达式js代码详解</a></p>\n<h4 id=\"4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\"><a href=\"#4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\" class=\"headerlink\" title=\"4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值\"></a>4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleMin</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于数组 map() 方法的讲解：<a href=\"http://www.cnblogs.com/xuan52rock/p/4460949.html\" target=\"_blank\" rel=\"noopener\">js 数组 map方法</a></p>\n<h4 id=\"5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\"><a href=\"#5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\" class=\"headerlink\" title=\"5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]\"></a>5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> af = a.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bf = b.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(af.localeCompare(bf) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(af.localeCompare(bf) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、简答题\"><a href=\"#三、简答题\" class=\"headerlink\" title=\"三、简答题\"></a>三、简答题</h3><h4 id=\"1-实现：var-a-add-10-3-2-a打印结果为15\"><a href=\"#1-实现：var-a-add-10-3-2-a打印结果为15\" class=\"headerlink\" title=\"1. 实现：var a = add(10)(3)(2) // a打印结果为15\"></a>1. 实现：var a = add(10)(3)(2) // a打印结果为15</h4><p>这是一道关于类型转换的问题：<a href=\"http://web.jobbole.com/90654/\" target=\"_blank\" rel=\"noopener\">一道面试题引发的对 javascript 类型转换的思考</a></p>\n<h4 id=\"2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\"><a href=\"#2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\" class=\"headerlink\" title=\"2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）\"></a>2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）</h4><p>利用关键帧动画 @keyframes 就可以达到，网上有好多关于加载动画实现的文章，推荐一下类似这道题想要的效果的文章：<a href=\"http://www.cnblogs.com/zourong/p/4022729.html\" target=\"_blank\" rel=\"noopener\">CSS 实现加载动画之八-圆点旋转</a>、<a href=\"http://www.jq22.com/yanshi12864\" target=\"_blank\" rel=\"noopener\">6种CSS3加载动画</a></p>\n<h4 id=\"3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\"><a href=\"#3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\" class=\"headerlink\" title=\"3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解\"></a>3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解</h4><p>网站是如何记住用户信息的：<a href=\"http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">无状态协议中认证状态保持方案的一些思考</a></p>\n<h4 id=\"4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\"><a href=\"#4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\" class=\"headerlink\" title=\"4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；\"></a>4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；</h4><p>在 JS 中是没有类的，所以其实是用 function 来间接实现，这类实现在我的另一篇文章里大量提到：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS 实现复杂数据结构</a></p>\n<h4 id=\"5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\"><a href=\"#5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\" class=\"headerlink\" title=\"5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）\"></a>5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）</h4><p>在 css 中，通过 border 和旋转可以实现很多种图形，我在这个方面也是比较白痴的，所以推荐以下文章：<a href=\"http://www.2cto.com/kf/201604/500811.html\" target=\"_blank\" rel=\"noopener\">CSS3实现32种基本图形</a>、<a href=\"http://www.cnblogs.com/pigtail/archive/2013/02/17/2914119.html\" target=\"_blank\" rel=\"noopener\">利用css样式画各种图形–初步、进阶、高级（一）</a>（感觉这两篇文章的排版和图片都不是很好，找时间我会自己再总结一下）</p>\n<h4 id=\"6-简要回答你对跨域的理解，为什么要跨域，如何跨域\"><a href=\"#6-简要回答你对跨域的理解，为什么要跨域，如何跨域\" class=\"headerlink\" title=\"6. 简要回答你对跨域的理解，为什么要跨域，如何跨域\"></a>6. 简要回答你对跨域的理解，为什么要跨域，如何跨域</h4><p>跨域这种问题应该是老生常谈了，其实就是浏览器的一种“同源策略”，为了保证安全而采取的措施，具体大家自行搜索吧，关于跨域的文章实在是太多了</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><h3 id=\"1-localStorage-和-sessionStorage-的区别\"><a href=\"#1-localStorage-和-sessionStorage-的区别\" class=\"headerlink\" title=\"1. localStorage 和 sessionStorage 的区别\"></a>1. localStorage 和 sessionStorage 的区别</h3><ul>\n<li>localStorage 和 sessionStorage 一样都是用来存储客户端临时信息的对象。</li>\n<li>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</li>\n<li>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。</li>\n<li>sessionStorage 生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过 sessionStorage 存储的数据也就被清空了。</li>\n<li>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</li>\n</ul>\n<h3 id=\"2-JS中self和this的区别\"><a href=\"#2-JS中self和this的区别\" class=\"headerlink\" title=\"2. JS中self和this的区别\"></a>2. JS中self和this的区别</h3><p>不知道为什么面试官会问这个问题，因为 self 好像在 react 才会经常用到吧？。。但是我还是查了一下，网上对这两个的区别的解释很少，大致就是：self 指向本窗口，this 指向就比较广泛了</p>\n<h3 id=\"3-如何实现-JS-中的防抖动和节流阀\"><a href=\"#3-如何实现-JS-中的防抖动和节流阀\" class=\"headerlink\" title=\"3. 如何实现 JS 中的防抖动和节流阀\"></a>3. 如何实现 JS 中的防抖动和节流阀</h3><p>这个功能其实经常用到，但是面试官给我的答案是 underscore.js 源码中有，然后说 jQuery 的第三方库应该也有。。估计是这位面试官经常用 underscore.js 解决重复点击的问题，然后至于怎么实现的自己也不知道。。（我就没好意思再问了，以免造成尴尬的局面），推荐一下解释的很清楚的文章（这是一篇中文译文，英文原文可以点击下面这篇文章中的原文链接）：<a href=\"http://www.tuicool.com/articles/VfyMBrI\" target=\"_blank\" rel=\"noopener\">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></p>\n<h3 id=\"4-HTML5-使任何元素变为可编辑的属性\"><a href=\"#4-HTML5-使任何元素变为可编辑的属性\" class=\"headerlink\" title=\"4. HTML5 使任何元素变为可编辑的属性\"></a>4. HTML5 使任何元素变为可编辑的属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contenteditable=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\"><a href=\"#5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\" class=\"headerlink\" title=\"5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式\"></a>5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式</h3><p>在张鑫旭的慕课网讲解视频（深入理解 CSS 系列）中曾经讲到过这些单位的含义和作用，具体可以点击下面链接查看我对他的讲解的总结：<a href=\"/20170421/line-height-of-css.html\">CSS 深入理解之 line-height</a>，具体计算公式和作用如下：</p>\n<ul>\n<li>5rem：按照 html 的 font-size 进行计算</li>\n<li>5em：按照自身的 font-size 进行计算</li>\n<li>5px：相对长度单位，像素</li>\n<li>5pt：绝对长度单位，点 Points (1点 = 1/72英寸)</li>\n<li>500%：按照自身的 font-size 进行计算</li>\n<li>5：同样按照自身的 font-size 进行计算</li>\n</ul>\n<p>可以看出，line-height 的值如果不是具体数值，都是按照 font-size 进行计算的，同时 500%/5em/5 有什么区别呢？在张鑫旭的讲解中也提到了，500%/5em 会根据自身的 font-size 进行计算，得到具体数值后将行高继承给后代元素，而 5 只会将比例继承给后代元素，后代元素会根据自己的 font-size 重新计算行高</p>\n<blockquote>\n<p>更新自2017-10-11：突然发现小程序中有一个很有趣的长度单位 rpx，具体参见这篇文章：<a href=\"http://huang-jerryc.com/2017/05/21/talk-about-pixel-and-rpx/\" target=\"_blank\" rel=\"noopener\">谈谈像素以及微信小程序的 rpx</a></p>\n</blockquote>\n<h3 id=\"6-oninput-事件和-onchange-事件的区别\"><a href=\"#6-oninput-事件和-onchange-事件的区别\" class=\"headerlink\" title=\"6. oninput 事件和 onchange 事件的区别\"></a>6. oninput 事件和 onchange 事件的区别</h3><p>onchange 事件经常用到（图片、文件上传），但是 oninput 事件却没有用过了，推荐：<a href=\"http://blog.csdn.net/freshlover/article/details/39050609\" target=\"_blank\" rel=\"noopener\">总结oninput、onchange与onpropertychange事件的用法和区别</a></p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试","path":"api/tags/面试.json"}]}]}