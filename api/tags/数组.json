{"name":"数组","postlist":[{"title":"JS中数组方法总结","slug":"JS中数组方法总结","date":"2017-03-22T14:12:57.000Z","updated":"2019-02-28T12:34:16.852Z","comments":true,"path":"api/articles/JS中数组方法总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>因为刷 leetcode 的时候，发现会经常用到数组，因为 JS 中没有明确的栈和队列，所以需要用数组进行模拟，在刷算法题的过程中碰到了好多关于数组的计算方法，所以就打算对算法中经常用的数组方法进行总结，可能会对刚开始用 JS 刷 Leetcode 的码农有好处，如果你有任何补充，请留言评论或直接给我发邮件。</p>\n<h2 id=\"JS-自带数组方法\"><a href=\"#JS-自带数组方法\" class=\"headerlink\" title=\"JS 自带数组方法\"></a>JS 自带数组方法</h2><ul>\n<li>concat() =&gt; 连接两个或更多的数组，并返回结果。</li>\n<li>join() =&gt; 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</li>\n<li>pop() =&gt; 删除并返回数组的最后一个元素</li>\n<li>push() =&gt; 向数组的末尾添加一个或更多元素，并返回新的长度。</li>\n<li>reverse() =&gt; 颠倒数组中元素的顺序。</li>\n<li>shift() =&gt; 删除并返回数组的第一个元素</li>\n<li>slice() =&gt; 从某个已有的数组返回选定的元素</li>\n<li>sort() =&gt; 对数组的元素进行排序</li>\n<li>splice() =&gt; 删除元素，并向数组添加新元素。</li>\n<li>toSource() =&gt; 返回该对象的源代码。</li>\n<li>toString() =&gt; 把数组转换为字符串，并返回结果。</li>\n<li>toLocaleString() =&gt; 把数组转换为本地数组，并返回结果。</li>\n<li>unshift() =&gt; 向数组的开头添加一个或更多元素，并返回新的长度。</li>\n<li>valueOf() =&gt; 返回数组对象的原始值</li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>JS 数组对象排序有内置方法 sort()，但是默认以字符串方式排序:</p>\n<h3 id=\"简单数组简单排序\"><a href=\"#简单数组简单排序\" class=\"headerlink\" title=\"简单数组简单排序\"></a>简单数组简单排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrSimple = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">arrSimple.sort();  <span class=\"comment\">// [1,6,7,8]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单数组自定义排序\"><a href=\"#简单数组自定义排序\" class=\"headerlink\" title=\"简单数组自定义排序\"></a>简单数组自定义排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrSimple2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">arrSimple2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123; <span class=\"keyword\">return</span> b - a &#125;);  <span class=\"comment\">// [8,7,6,1]</span></span><br><span class=\"line\"><span class=\"comment\">// 解释：a, b表示数组中的任意两个元素，若return &gt; 0 b 前 a 后；reutrn &lt; 0 a 前 b 后；a = b 时存在浏览器兼容</span></span><br><span class=\"line\"><span class=\"comment\">// 简化一下：a-b 输出从小到大排序，b-a 输出从大到小排序。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除重复的元素只保留一个（两种实现思路）\"><a href=\"#删除重复的元素只保留一个（两种实现思路）\" class=\"headerlink\" title=\"删除重复的元素只保留一个（两种实现思路）\"></a>删除重复的元素只保留一个（两种实现思路）</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：遍历要删除的数组arr, 把元素分别放入另一个数组tmp中，在判断该元素在arr中不存在才允许放入tmp中用到两个函数：for ...in 和 indexOf()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"a\"</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique1</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历arr，把元素分别放入tmp数组(不存在才放)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 该元素在tmp内部不存在才允许追加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp.indexOf(arr[i])==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            tmp.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique1(test);  <span class=\"comment\">// [2,4,5,\"a\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二：把目标数组arr的元素值和键的位置调换 自动就把重复的元素给删除掉了，调换后的样子：array('qiang'=&gt;1,'ming'=&gt;1,'tao'=&gt;1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique2</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">        tmp[arr[m]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 再把键和值的位置再次调换</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmparr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> tmp)&#123;</span><br><span class=\"line\">        tmparr.push(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmparr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique2(test);  <span class=\"comment\">//[2,4,5,\"a\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法三：返回新数组，保证类型不变</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique3</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hash=[],arr=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        hash[a[i]]!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!hash[a[i]])&#123;</span><br><span class=\"line\">            arr.push(a[i]);</span><br><span class=\"line\">            hash[a[i]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique3(test);<span class=\"comment\">// [2, 4, 5, \"a\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取数组中的最大值和最小值\"><a href=\"#获取数组中的最大值和最小值\" class=\"headerlink\" title=\"获取数组中的最大值和最小值\"></a>获取数组中的最大值和最小值</h3><p>可以用传统的遍历，也可以用math</p>\n<p>首先定义一个数组：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">54</span>,<span class=\"number\">65</span>,<span class=\"number\">43</span>,<span class=\"number\">21</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">45</span>,<span class=\"number\">58</span>,<span class=\"number\">97</span>,<span class=\"number\">24</span>];</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一、字符串拼接法</span></span><br><span class=\"line\"><span class=\"comment\">// 利用toString和join把数组转换为字符串，再和Math的max和min方法分别进行拼接，最后执行eval方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.max(\"</span> + arr.toString() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.min(\"</span> + arr.toString() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.max(\"</span> + arr.join() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.min(\"</span> + arr.join() + <span class=\"string\">\")\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二、排序法</span></span><br><span class=\"line\"><span class=\"comment\">// 先把数组从小到大排序，数组第一个即为最小值，最后一个即为最大值</span></span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = arr[arr.length<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三-1\"><a href=\"#方法三-1\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法三、假设法</span></span><br><span class=\"line\"><span class=\"comment\">// 假设数组第一个为最大（或最小值），和后边进行比较，若后边的值比最大值大（或比最小值小），则替换最大值（或最小值）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = arr[i];</span><br><span class=\"line\">    cur&gt;maxN ? maxN=cur : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    cur&lt;minN ? minN=cur : <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四\"></a>方法四</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法四、Math的max和min方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用apply方法使数组可以作为传递的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,arr);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr);</span><br><span class=\"line\"><span class=\"comment\">// 多维数组可以这样做：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ta=a.join(<span class=\"string\">\",\"</span>).split(<span class=\"string\">\",\"</span>);<span class=\"comment\">// 转化为一维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,ta);<span class=\"comment\">// 最大值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,ta);<span class=\"comment\">// 最小值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展：增加原型方法，同时为了避免其他库也实现了同名的原型方法，可以在生成函数之前进行重名判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype[<span class=\"string\">'max'</span>] == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max.apply(&#123;&#125;,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype[<span class=\"string\">'min'</span>] == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min.apply(&#123;&#125;,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化二维数组\"><a href=\"#初始化二维数组\" class=\"headerlink\" title=\"初始化二维数组\"></a>初始化二维数组</h3><h4 id=\"方法一-2\"><a href=\"#方法一-2\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：直接定义并且初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _TheArray = [[<span class=\"string\">\"0-1\"</span>,<span class=\"string\">\"0-2\"</span>],[<span class=\"string\">\"1-1\"</span>,<span class=\"string\">\"1-2\"</span>],[<span class=\"string\">\"2-1\"</span>,<span class=\"string\">\"2-2\"</span>]]</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-2\"><a href=\"#方法二-2\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二：未知长度的二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();  <span class=\"comment\">// 先声明一维</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;i;k++)&#123;    <span class=\"comment\">// 一维长度为i,i为变量，可以根据实际情况改变</span></span><br><span class=\"line\">    tArray[k]=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();  <span class=\"comment\">// 声明二维，每一个一维数组里面的一个元素都是一个数组；</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;p;j++)&#123;   <span class=\"comment\">// 一维数组里面每个元素数组可以包含的数量p，p也是一个变量；</span></span><br><span class=\"line\">        tArray[k][j]=<span class=\"string\">\"\"</span>;    <span class=\"comment\">// 这里将变量初始化，我这边统一初始化为空，后面在用所需的值覆盖里面的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三-2\"><a href=\"#方法三-2\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以上方法都有问题，推荐方法三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;length;k++)&#123;    </span><br><span class=\"line\">   r[k]= [];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组随机排序\"><a href=\"#数组随机排序\" class=\"headerlink\" title=\"数组随机排序\"></a>数组随机排序</h3><h4 id=\"Fisher–Yates-shuffle-算法\"><a href=\"#Fisher–Yates-shuffle-算法\" class=\"headerlink\" title=\"Fisher–Yates shuffle 算法\"></a>Fisher–Yates shuffle 算法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = arr.length, t, j;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i) &#123;</span><br><span class=\"line\">    j = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * i--);</span><br><span class=\"line\">    t = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来自——<a href=\"https://blog.oldj.net/2017/01/23/shuffle-an-array-in-javascript/\" target=\"_blank\" rel=\"noopener\">关于JavaScript的数组随机排序</a></p>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"数组","path":"api/tags/数组.json"}]},{"title":"JS几种数组遍历方式","slug":"JS几种数组遍历方式","date":"2017-03-18T08:50:29.000Z","updated":"2019-02-28T12:34:16.852Z","comments":true,"path":"api/articles/JS几种数组遍历方式.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这是从 Lichun Dai 博客中看到的一篇文章，作者对 JS 中的数组遍历方式进行了总结，同时进行了性能对比。但根据评论者的回答，性能分析需要结合具体环境，单纯在浏览器中进行测试是难下结论的，所以我只会展示实现的方式，至于在浏览器中的性能可以点击文末的链接跳转至原作者的分析工具 demo。</p>\n<h2 id=\"第一种：普通-for-循环\"><a href=\"#第一种：普通-for-循环\" class=\"headerlink\" title=\"第一种：普通 for 循环\"></a>第一种：普通 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明：最简单的一种，也是使用频率最高的一种，虽然性能不弱，但仍有优化空间</p>\n<h2 id=\"第二种：优化版-for-循环\"><a href=\"#第二种：优化版-for-循环\" class=\"headerlink\" title=\"第二种：优化版 for 循环\"></a>第二种：优化版 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>,len=arr.length; j &lt; len; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显。 <strong>这种方法基本上是所有循环遍历方法中性能最高的一种</strong></p>\n<h2 id=\"第三种：弱化版-for-循环\"><a href=\"#第三种：弱化版-for-循环\" class=\"headerlink\" title=\"第三种：弱化版 for 循环\"></a>第三种：弱化版 for 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; arr\\[j\\]!=<span class=\"literal\">null</span>; j++) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方法其实严格上也属于 for 循环，只不过是没有使用 length 判断，而使用变量本身判断 <strong>实际上，这种方法的性能要远远小于普通 for 循环</strong></p>\n<h2 id=\"第四种：foreach-循环\"><a href=\"#第四种：foreach-循环\" class=\"headerlink\" title=\"第四种：foreach 循环\"></a>第四种：foreach 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 数组自带的 foreach 循环，使用频率较高，实际上性能比普通 for 循环弱</p>\n<h2 id=\"第五种：foreach-变种\"><a href=\"#第五种：foreach-变种\" class=\"headerlink\" title=\"第五种：foreach 变种\"></a>第五种：foreach 变种</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(arr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 由于 foreach 是 Array 型自带的，对于一些非这种类型的，无法直接使用(如 NodeList)，所以才有了这个变种，使用这个变种可以让类似的数组拥有 foreach 功能。 实际性能要比普通 foreach 弱</p>\n<h2 id=\"第六种：forin-循环\"><a href=\"#第六种：forin-循环\" class=\"headerlink\" title=\"第六种：forin 循环\"></a>第六种：forin 循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(j <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这个循环很多人爱用，但实际上，经分析测试，在众多的循环遍历方式中 <strong>它的效率是最低的</strong></p>\n<h2 id=\"第七种：map-遍历\"><a href=\"#第七种：map-遍历\" class=\"headerlink\" title=\"第七种：map 遍历\"></a>第七种：map 遍历</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上 foreach</p>\n<h2 id=\"第八种：forof-遍历（ES6）\"><a href=\"#第八种：forof-遍历（ES6）\" class=\"headerlink\" title=\"第八种：forof 遍历（ES6）\"></a>第八种：forof 遍历（ES6）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr) &#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简要说明: 这种方式是 ES6 里面用到的，性能要好于 forin，但仍然比不上普通 for 循环</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p><strong>普通 for 循环才是最优雅的</strong></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://dailc.github.io/2016/11/25/baseKnowlenge_javascript_jsarrayGoThrough.html\" target=\"_blank\" rel=\"noopener\">JS几种数组遍历方式以及性能分析对比</a></li>\n<li><a href=\"https://dailc.github.io/jsfoundation-perfanalysis/html/performanceAnalysis/demo_performanceAnalysis_jsarrayGoThrough.html\" target=\"_blank\" rel=\"noopener\">Js中几种常用数组遍历方式分析比较工具</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"数组","path":"api/tags/数组.json"}]},{"title":"在JS中如何清空一个数组？","slug":"在JS中如何清空一个数组？","date":"2017-08-04T07:30:29.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/在JS中如何清空一个数组？.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_277.png","content":"<p>问题来源于stackoverflow：<a href=\"https://stackoverflow.com/questions/1232040/how-do-i-empty-an-array-in-javascript\" target=\"_blank\" rel=\"noopener\">How do I empty an array in JavaScript?</a>。更多关于JS中数组的相关操作参见：<a href=\"/20170322/summary-of-array-method-in-js.html\">JS中数组方法总结</a> 比如我有如下数组：<code>A = [1, 2, 3, 4]</code>; 我如何清空它？</p>\n<h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A = [];\"></a>A = [];</h2><p>这个答案应该很好想到，因为很符合“从问题本身出发”的逻辑，既然我们想清空数组 A，那就清空喽~ 但是这个方法有一个弊端：如果你之前通过引用的方式 copy 了数组A，那么即使通过 <code>A = []</code> 将数组 A 清空了，你的引用变量也还是 A 原来的值，理论知识总是难理解，举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;  <span class=\"comment\">//arr2是arr1的一个引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2 === arr1)  <span class=\"comment\">//arr2和arr1共享内存地址</span></span><br><span class=\"line\">arr1 = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);  <span class=\"comment\">//['a', 'b', 'c', 'd', 'e', 'f']，此时arr2和arr1就互相不认识了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"A-length-0\"><a href=\"#A-length-0\" class=\"headerlink\" title=\"A.length = 0\"></a>A.length = 0</h2><p>因为在 JS 中数组其实也是一个对象（所谓的“数组对象”），而每个数组都有一个 length 属性，这是一个可读写的属性，将其置为 0 之后就可以清空数组。同时它的引用变量也将被清空：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;  <span class=\"comment\">// 我胡汉三又来引用了</span></span><br><span class=\"line\">arr1.length = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);  <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);  <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1 === arr2)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"A-splice-0-A-length\"><a href=\"#A-splice-0-A-length\" class=\"headerlink\" title=\"A.splice(0, A.length)\"></a>A.splice(0, A.length)</h2><p>和上面的通过 length 清空类似，该方法也将同时清空数组 arr2。不同点在于，.splice() 方法将返回一个数组</p>\n<h2 id=\"while-和-pop\"><a href=\"#while-和-pop\" class=\"headerlink\" title=\"while 和 .pop()\"></a>while 和 .pop()</h2><p>这是一个比较“愚蠢”的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(A.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    A.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法同样会清空数组 arr2，但是也是效率最低的一种方法</p>\n<h2 id=\"while和-shift\"><a href=\"#while和-shift\" class=\"headerlink\" title=\"while和.shift()\"></a>while和.shift()</h2><p>一般“愚蠢”的方法不止一种。。：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(A.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    A.shift();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能比较\"><a href=\"#性能比较\" class=\"headerlink\" title=\"性能比较\"></a>性能比较</h2><p>可以<a href=\"http://jsben.ch/hyj65\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看这四种方法的性能测试结果，或者直接看下图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_277.png\" alt=\"\" width=\"500\"></div>\n\n<p>从图中可以很明显的看出来，<code>A.length = 0;</code> 这种方法是效率最高的，效率最低的是 pop 和 shift（不出所料啊。。）</p>\n","raw":null,"categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"stackoverflow","path":"api/tags/stackoverflow.json"},{"name":"数组","path":"api/tags/数组.json"}]}]}