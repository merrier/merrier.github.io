{"name":"tool","postlist":[{"title":"Mac下用Cron定时任务更新壁纸","slug":"Mac下用Cron定时任务更新壁纸","date":"2017-07-26T07:08:17.000Z","updated":"2019-02-02T10:19:58.046Z","comments":true,"path":"api/articles/Mac下用Cron定时任务更新壁纸.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这个技巧的原文来自<a href=\"https://www.macosxautomation.com/automator/apod/index.html\" target=\"_blank\" rel=\"noopener\">Set Desktop to NASA Astronomy Picture of the Day</a>，作者通过 Automator 脚本可以每天自动去 NASA（美国宇航局）下载“每日一图”，同时将其设置为桌面。是不是听起来很酷！当然了，我第一次看到的并不是上面那篇文章，而是另一位大神（harttle）的<a href=\"http://harttle.com/2015/11/20/crontab-desktop.html\" target=\"_blank\" rel=\"noopener\">用Cron定时任务更新壁纸</a>，harttle 并没有用 Automator 方式，而是通过 Cron 定时任务实现了这个功能。美中不足的是，harttle 是 Linux 系统，然后我就在自己的 Mac 上试了一下，下面就跟着我一起来实现一把吧！</p>\n<h2 id=\"下载壁纸的脚本\"><a href=\"#下载壁纸的脚本\" class=\"headerlink\" title=\"下载壁纸的脚本\"></a>下载壁纸的脚本</h2><p>首先，我们需要完成一个下载壁纸的脚本，在 Mac 环境下就是 shell 脚本了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/local/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载HTML到/tmp</span></span><br><span class=\"line\">base=<span class=\"string\">'http://apod.nasa.gov/apod/'</span></span><br><span class=\"line\">wget -O /tmp/nasa <span class=\"variable\">$&#123;base&#125;</span>astropix.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到其中的&lt;img&gt;标签的src参数</span></span><br><span class=\"line\">href=<span class=\"variable\">$&#123;base&#125;</span>\\`cat /tmp/nasa | grep -i <span class=\"string\">'&lt;img'</span> | awk -F <span class=\"string\">'\"'</span> <span class=\"string\">'&#123;print $2&#125;'</span>\\`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算src的文件后缀</span></span><br><span class=\"line\">ext=<span class=\"variable\">$&#123;href##*.&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算保存到的文件地址</span></span><br><span class=\"line\">file=/Users/\bYourMacName/Pictures/nasa/\\`date +<span class=\"string\">\"%Y-%m-%d\"</span>\\`.<span class=\"variable\">$ext</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载img</span></span><br><span class=\"line\">wget -O <span class=\"variable\">$file</span> <span class=\"variable\">$href</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>不能完全复制粘贴上面的代码，需要注意将 <code>YourMacName</code> 换成你的真实文件夹名</li>\n<li>需要提前安装 wget，可以通过 brew install wget 安装</li>\n<li>需要将脚本保存到 /usr/local/bin 这个目录下，命名就随便了，可以取名为 nasa-pic-of-day.sh，运行一下，如果在 /Users/\bYourMacName/Pictures/nasa/ 下有一张图片那说明这一步已经成功了！</li>\n</ul>\n<h2 id=\"Cron-定时任务\"><a href=\"#Cron-定时任务\" class=\"headerlink\" title=\"Cron 定时任务\"></a>Cron 定时任务</h2><p>Cron 是 Unix 系统中用于周期执行任务的守护进程，被定时的任务由 crontab 文件提供。我们来写一个自己的 crontab 文件，保存为 ~/bin/daily.cron：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/usr/<span class=\"built_in\">local</span>/bin/bash</span><br><span class=\"line\">30 8 * * * /usr/<span class=\"built_in\">local</span>/bin/nasa-pic-of-day.sh &gt;&gt; /usr/<span class=\"built_in\">local</span>/var/frontend/cron 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>其中 30 表示分钟，6 表示小时，后面的依次是日、月、星期。同时将输出重定向到 /var/harttle/cron（当然你需要确保这个目录存在）。2&gt;&amp;1 是将错误输出重定向至标准输出，这样我们的日志中将会同时包含标准输出和错误输出。 然后通过 crontab 命令载入我们的这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab /usr/<span class=\"built_in\">local</span>/bin/daily.cron</span><br></pre></td></tr></table></figure>\n<p>此后呢，我们的脚本就会在每天早上 8:30 执行。如果有问题我们可以查看日志文件 /usr/local/var/YourMacName/cron，这里有脚本的一切输出。</p>\n<h2 id=\"编辑-crontab\"><a href=\"#编辑-crontab\" class=\"headerlink\" title=\"编辑 crontab\"></a>编辑 crontab</h2><p>crontab 会把刚才载入的文件保存起来，以后我们可以通过 <code>crontab -e</code> 直接更改它（注意更改原文件是不起作用的）。在 Mac 上保存更改时会有错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab: temp file must be edited <span class=\"keyword\">in</span> place</span><br></pre></td></tr></table></figure>\n<p>可以在 ~/.vimrc 后面加一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autocmd filetype crontab setlocal nobackup nowritebackup</span><br></pre></td></tr></table></figure>\n<h2 id=\"Cron-运行环境\"><a href=\"#Cron-运行环境\" class=\"headerlink\" title=\"Cron 运行环境\"></a>Cron 运行环境</h2><p>Cron 运行脚本的环境和交互式 Shell 是不一样的，这一点需要注意。你的脚本可以在交互式 Shell 中正常运行，但 Cron 中可能会有错误。</p>\n<blockquote>\n<p>Cron always runs with a mostly empty environment. HOME, LOGNAME, and SHELL are set; and a very limited PATH.</p>\n</blockquote>\n<p>推荐的做法是在 Cron 运行的脚本中显式地声明那些环境变量：<code>source ~/.bashrc</code>，来手动设置需要的环境。比如在 Mac 上，你可能会需要这一项设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"Mac","path":"api/tags/Mac.json"}]},{"title":"Mac下的效率工具autojump","slug":"Mac下的效率工具autojump","date":"2017-08-30T13:09:31.000Z","updated":"2019-02-02T10:19:58.046Z","comments":true,"path":"api/articles/Mac下的效率工具autojump.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先，这篇文章的封面图是我随便找的，好像是一个游戏的名字。。但是就连 <a href=\"https://github.com/wting/autojump\" target=\"_blank\" rel=\"noopener\">autojump的github</a> 上面都没有一张图片，所以我也很无奈啊~</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>autojump 是干什么的呢？从它的名字能看出来，它的功能类似“<strong>自动跳转</strong>”，比如我们之前曾经访问过一个目录：<code>/Users/frontend/repos/mineProject</code>，现在我们通过简单的一条指令：autojump mine 就可以跳转到这个目录（注意：我们在任意位置都可以跳），autojump 它自己是这么描述的：</p>\n<blockquote>\n<p>autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line.</p>\n</blockquote>\n<p>autojump 就是通过记录你在 history 中的行为把你访问过的文件夹路径都 cache 下来，然后当你输入指令时再读取 cache 文件(<strong>/Users/frontend/Library/autojump/autojump.txt</strong>)，它还有一个快捷方式：<code>j mine</code>，总而言之，这个小工具可以让你游荡于文件夹之间不费吹灰之力！</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"首先，安装-homebrew\"><a href=\"#首先，安装-homebrew\" class=\"headerlink\" title=\"首先，安装 homebrew\"></a>首先，安装 homebrew</h3><p>homebrew 是 mac 上的一个软件包管理器，可以通过如下方式进行安装（粘贴至终端即可）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>更多关于 homebrew 的介绍可以查看<a href=\"https://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">它的官网</a></p>\n<h3 id=\"然后，安装-zsh\"><a href=\"#然后，安装-zsh\" class=\"headerlink\" title=\"然后，安装 zsh\"></a>然后，安装 zsh</h3><p>给大家讲个笑话：</p>\n<blockquote>\n<p>Zsh 全称为 Z Shell，因为 Z 是最后一个字母，因此大家称之为——终极 Shell。</p>\n</blockquote>\n<p>我们可以通过 brew 安装 zsh：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-autojump\"><a href=\"#安装-autojump\" class=\"headerlink\" title=\"安装 autojump\"></a>安装 autojump</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install autojump</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-zshrc\"><a href=\"#配置-zshrc\" class=\"headerlink\" title=\"配置 .zshrc\"></a>配置 .zshrc</h3><p>在 <code>~/.zshrc</code> 中编辑以下内容：<code>plugins=(autojump)</code>，当然，如果你有其他 zsh 插件比如 git，直接在后面添加即可：<code>plugins=(git autojump)</code>。然后继续在 .zshrc 文件中添加如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[\\[ -s $(brew --prefix)/etc/profile.d/autojump.sh \\]\\] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>\n<p>还剩最后一步，使刚才的更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>Enjoy coding:)</p>\n<h2 id=\"其他可能错误\"><a href=\"#其他可能错误\" class=\"headerlink\" title=\"其他可能错误\"></a>其他可能错误</h2><h3 id=\"zshrc-3-command-not-found-M\"><a href=\"#zshrc-3-command-not-found-M\" class=\"headerlink\" title=\".zshrc:3: command not found: ^M\"></a>.zshrc:3: command not found: ^M</h3><blockquote>\n<p>The temporary solution to that is changing your core.autocrlf git config setting to use input, given that you are on OSX. See <a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/4402#issuecomment-143976458\" target=\"_blank\" rel=\"noopener\">#4402 (comment)</a>.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ZSH</span> </span><br><span class=\"line\">git config core.autocrlf input </span><br><span class=\"line\">git rm --cached -r . </span><br><span class=\"line\">git reset --hard</span><br></pre></td></tr></table></figure>\n<h3 id=\"PATH-set-to-RVM-ruby-but-GEM-HOME-and-or-GEM-PATH-not-set\"><a href=\"#PATH-set-to-RVM-ruby-but-GEM-HOME-and-or-GEM-PATH-not-set\" class=\"headerlink\" title=\"PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set\"></a>PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set</h3><blockquote>\n<p><a href=\"https://github.com/rvm/rvm/issues/3212\" target=\"_blank\" rel=\"noopener\">PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set</a> Add RVM set at <code>~/.zshrc</code>:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/.rvm/bin\"</span> <span class=\"comment\"># Add RVM to PATH for scripting</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.barretlee.com/blog/2015/03/30/autojump-in-mac/\" target=\"_blank\" rel=\"noopener\">Mac下的效率工具autojump</a></li>\n<li><a href=\"http://www.jianshu.com/p/5ced5876cba4\" target=\"_blank\" rel=\"noopener\">mac终端快速启动Sublime/WebStrom/VS Code/Atom等编辑器</a></li>\n<li><a href=\"http://www.jianshu.com/p/0d265d9f914b\" target=\"_blank\" rel=\"noopener\">MacOS X 安装 oh-my-zsh autojump</a></li>\n</ul>\n","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"mac","path":"api/tags/mac.json"},{"name":"autojump","path":"api/tags/autojump.json"}]},{"title":"Sublime Text插件推荐","slug":"Sublime Text插件推荐","date":"2017-05-14T12:44:19.000Z","updated":"2019-02-02T10:19:58.046Z","comments":true,"path":"api/articles/Sublime Text插件推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_7.gif","content":"<h2 id=\"安装sublime-text2-插件的方法\"><a href=\"#安装sublime-text2-插件的方法\" class=\"headerlink\" title=\"安装sublime text2 插件的方法\"></a>安装sublime text2 插件的方法</h2><h3 id=\"直接安装\"><a href=\"#直接安装\" class=\"headerlink\" title=\"直接安装\"></a>直接安装</h3><p>安装 Sublime text 2 插件很方便，可以直接下载安装包解压缩到 Packages 目录（菜单 -&gt; preferences -&gt; packages）。</p>\n<h3 id=\"使用-Package-Control-组件安装\"><a href=\"#使用-Package-Control-组件安装\" class=\"headerlink\" title=\"使用 Package Control 组件安装\"></a>使用 Package Control 组件安装</h3><p>也可以安装 package control 组件，然后直接在线安装：</p>\n<ol>\n<li>按 Ctrl+` 调出 console（注：安装有 QQ 输入法的话这个快捷键会有冲突，输入法属性设置-输入法管理-取消热键切换至 QQ 拼音）</li>\n<li>粘贴以下代码到底部命令行并回车：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib2,os;pf=<span class=\"string\">'Package Control.sublime-package'</span>;ipp=sublime.installed\\_packages\\_path();os.makedirs(ipp) <span class=\"keyword\">if</span> not os.path.exists(ipp) <span class=\"keyword\">else</span> None;open(os.path.join(ipp,pf),<span class=\"string\">'wb'</span>).write(urllib2.urlopen(<span class=\"string\">'http://sublime.wbond.net/'</span>+pf.replace(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>())</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启 Sublime Text 2。</li>\n<li>如果在 Perferences -&gt; package settings 中看到 package control 这一项，则安装成功。</li>\n</ol>\n<h2 id=\"用-Package-Control-安装插件的方法\"><a href=\"#用-Package-Control-安装插件的方法\" class=\"headerlink\" title=\"用 Package Control 安装插件的方法\"></a>用 Package Control 安装插件的方法</h2><ol>\n<li>按下 Ctrl + Shift + P 调出命令面板</li>\n<li>输入 install，调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</li>\n</ol>\n<p>不爽的是，有的网络环境可能会不允许访问陌生的网络环境从而设置一道防火墙，而 Sublime Text 2 貌似无法设置代理，可能就获取不到安装包列表了。好，方法介绍完了，下面是本文正题，推荐一些 Sublime Text 2 插件：</p>\n<h2 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h2><h3 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h3><p>HTML / CSS 代码快速编写神器，Emmet 的前身是大名鼎鼎的 Zen coding，如果你从事 Web 前端开发的话，对该插件一定不会陌生。它使用仿 CSS 选择器的语法来生成代码，大大提高了 HTML / CSS代码编写的速度，比如下面的演示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_7.gif\" alt=\"\" width=\"400\"></div>\n\n<p>关于这一插件的牛逼之处就不再多言，这里有一篇讲解 Emmet 的文章讲的很详细：<a href=\"http://www.iteye.com/news/27580\" target=\"_blank\" rel=\"noopener\">Emmet：HTML/CSS代码快速编写神器</a></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>git 应该是必备的插件之一，而 sublime 对于 git 的支持也是很好的，关于如何在 sublime 中使用 git，可以查看下面这篇文章：<a href=\"http://www.jianshu.com/p/c3fabbeebbeb\" target=\"_blank\" rel=\"noopener\">sublime中git的使用</a>，我就不再过多描述了</p>\n<h3 id=\"Vue-Syntax-Highlight\"><a href=\"#Vue-Syntax-Highlight\" class=\"headerlink\" title=\"Vue Syntax Highlight\"></a>Vue Syntax Highlight</h3><p>这是一款可以让你的 .vue 文件也可以高亮的插件，鉴于最近在自学 vue，所以还是推荐一下这款插件吧，在 Package 里面搜索 vue 即可</p>\n","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"推荐","path":"api/tags/推荐.json"},{"name":"sublime","path":"api/tags/sublime.json"}]}]}