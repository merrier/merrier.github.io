{"name":"server","postlist":[{"title":"Apache配置二级域名及SSL证书","slug":"Apache配置二级域名及SSL证书","date":"2018-04-24T10:13:56.000Z","updated":"2019-02-06T03:20:41.973Z","comments":true,"path":"api/articles/Apache配置二级域名及SSL证书.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前一段日子，我费了九牛二虎之力将 “Merrier说” 博客升级成了HTTPS，虽然回过头来看，其实申请SSL证书以及配置都是现成的轮子，别人已经为我们写好了脚本，不过对于第一次接触服务器相关的童鞋来说，确实会遇到很多麻烦，如果你也有这个需求，可以参考我的另一篇文章——<a href=\"/20180416/website-configuration-https.html\">网站配置HTTPS踩坑记</a>，不过这几天我又配置了一个二级域名（api.merrier.wang），用作爬虫输出的 REST API 所用。</p>\n<h2 id=\"Apache配置\"><a href=\"#Apache配置\" class=\"headerlink\" title=\"Apache配置\"></a>Apache配置</h2><p>首先，我们既然要配置二级域名，那肯定要更改服务器的配置了，这里我以Apache为例，介绍一下如何配置二级域名： 服务器的配置文件以 .conf 为后缀，首先找到 apache 配置文件（httpd.conf）所在位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>假如 httpd.conf 所在路径为 <code>/etc/httpd/conf/httpd.conf</code> ，在 httpd.conf 中加入这样一句代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/httpd/conf/extra/*.conf</span><br></pre></td></tr></table></figure>\n<p>其含义是将 /etc/httpd/conf/extra/ 路径下的所有以 .conf 为后缀的文件都作为 apache 的配置文件进行引入，这样我们就可以将除了 httpd.conf 之外的其他配置文件都放到 extra 文件夹下，便于管理。接着配置一下 NameVirtualHost，将配置文件中的下面一行代码取消注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NameVirtualHost *:80</span><br></pre></td></tr></table></figure>\n<p>然后，我们在 extra 文件夹下新建一个配置文件，如果主域名为 merrier.wang，而想配置的二级域名为 api.merrier.wang 的话，配置文件可以取名为 httpd-api.conf，这样命名比较规范。在新建的配置文件中填入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin root@merrier.wang</span><br><span class=\"line\">    DocumentRoot &quot;/var/www/html/merrier-api&quot;</span><br><span class=\"line\">    &lt;Directory &quot;/var/www/html/merrier-api&quot;&gt;</span><br><span class=\"line\">      AllowOverride all</span><br><span class=\"line\">      Order allow,deny</span><br><span class=\"line\">      Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ServerName api.merrier.wang</span><br><span class=\"line\">    ProxyRequests off</span><br><span class=\"line\">    &lt;Proxy *&gt;</span><br><span class=\"line\">      Order deny,allow</span><br><span class=\"line\">      Allow from all</span><br><span class=\"line\">    &lt;/Proxy&gt;</span><br><span class=\"line\">    &lt;Location /&gt;</span><br><span class=\"line\">      ProxyPass http://localhost:3000/</span><br><span class=\"line\">      ProxyPassReverse http://localhost:3000/</span><br><span class=\"line\">    &lt;/Location&gt;</span><br><span class=\"line\">    ErrorLog logs/merrier.wang-error_log</span><br><span class=\"line\">    CustomLog logs/merrier-wang-access_log common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>其中有几个字段名需要按照真实情况进行修改：</p>\n<ul>\n<li>DocumentRoot和Directory：你的文件存放路径</li>\n<li>ServerAdmin：一般为 root@主域名</li>\n<li>ServerName：二级域名</li>\n<li>ProxyPass和ProxyPassReverse：node 服务占用的端口号，如果没有 node 服务，可以不填写</li>\n<li>ErrorLog和CustomLog：log 存放地址</li>\n</ul>\n<p>这样修改完之后重启服务器让配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>然后访问一下你的二级域名（http），如果一切顺利的话应该就可以看到页面了（如果有 node 服务的话，需要先启动 node 服务）</p>\n<h2 id=\"PM2及node相关配置\"><a href=\"#PM2及node相关配置\" class=\"headerlink\" title=\"PM2及node相关配置\"></a>PM2及node相关配置</h2><p>如果你需要启动 node 服务，那你肯定需要进行进程管理，尤其是如果你的网站需要占用多个端口有多个 node 服务的话，那在 node 进程管理工具中，业界使用最多的就是 pm2 了，下面就介绍一下如何合理的进行 pm2 配置以及 node 相关安装和配置（如果你没有 node 服务，那这一部分就可以跳过了）：</p>\n<h3 id=\"安装nodejs和npm\"><a href=\"#安装nodejs和npm\" class=\"headerlink\" title=\"安装nodejs和npm\"></a>安装nodejs和npm</h3><p>centos 默认是没有 nodejs 和 npm 的，所以需要进行安装：首先要通过 yum 来安装 nodejs 和 npm，而这需要先给 yum 添加 epel 源，添加方法在 <a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-add-epel-remi/\" target=\"_blank\" rel=\"noopener\">centos 添加epel和remi源</a> 中，安装完成后，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm。在 centos 系统，我们可以通过 curl 的方式安装 nvm ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>如果你看到以下报错，说明你的 git 版本太低了（可以通过 <code>git --version</code> 查看当前 git 的版本）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\\&gt; error: pathspec &apos;v0.29.0&apos; did not match any file(s) known to git.</span><br><span class=\"line\">Your version of git is out of date. Please update it!</span><br></pre></td></tr></table></figure>\n<p>可以按照<a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7 安装 最新版 git</a>的教程进行最新版git的安装，讲解步骤很详细。安装完 nvm 之后，我们对 node 的版本管理就非常简单了，例如，如果我们要安装 8.1.3 版本，可以用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8.1.3</span><br></pre></td></tr></table></figure>\n<p>列出远程服务器上所有的可用版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n<p>列出本地已安装的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n<p>切换到某个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 8.1.3</span><br></pre></td></tr></table></figure>\n<p>nvm 的更多用法参见：<a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n<h3 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h3><p>使用 npm 全局安装，一行命令不能再简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置pm2\"><a href=\"#配置pm2\" class=\"headerlink\" title=\"配置pm2\"></a>配置pm2</h3><p>如果你的服务入口文件为 app.js，在当前项目目录下启动pm2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --watch</span><br></pre></td></tr></table></figure>\n<p>这里用了 –watch 参数，意味着当你的 express 应用代码发生变化时，pm2 会帮你自动重启服务，多贴心。不过如果不经常改动，最好省去这个参数。关于 pm2 的其他命令可以查看<a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\" target=\"_blank\" rel=\"noopener\">PM2实用入门指南</a>。</p>\n<h4 id=\"shell脚本启动多个服务\"><a href=\"#shell脚本启动多个服务\" class=\"headerlink\" title=\"shell脚本启动多个服务\"></a>shell脚本启动多个服务</h4><p>我们可以通过shell脚本控制多个服务的同时开启，比如新建一个bootstrap.sh文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">CURRENT\\_DIR=&quot;$(cd -P &quot;$(dirname &quot;$&#123;BASH\\_SOURCE\\[0\\]&#125;&quot;)&quot; &amp;&amp; pwd)&quot;</span><br><span class=\"line\">cd $CURRENT_DIR</span><br><span class=\"line\">. ~/.nvm/nvm.sh</span><br><span class=\"line\">nvm use v8.1</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">pm2 start app.json</span><br></pre></td></tr></table></figure>\n<p>而 app.json 中可以填入多个 node 服务的相关信息，名称、端口、log 信息等等，这种玩法苏南大叔讲的很详细了，可以移步：<a href=\"https://newsn.net/say/node-pm2-start.html\" target=\"_blank\" rel=\"noopener\">pm2 start命令进阶详解</a></p>\n<h2 id=\"配置SSL证书\"><a href=\"#配置SSL证书\" class=\"headerlink\" title=\"配置SSL证书\"></a>配置SSL证书</h2><p>接下来就是配置 SSL 证书的环节了，这里我们依然可以选择 Let’s entrypt 的证书，同时利用 certbot 工具可以节省很多麻烦，如果你配置过顶级域名的 SSL 证书（如果没有配置过，可以参考我的另一篇文章：<a href=\"/20180416/website-configuration-https.html\">网站配置HTTPS踩坑记</a>进行配置），可以进入之前已经生成好的 certbot-auto 目录，然后执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot-auto --apache --duplicate</span><br></pre></td></tr></table></figure>\n<p>当你遇到以下信息时，建议单独选择你没有进行配置过 HTTPS 的域名，这样就不会覆盖掉原来申请过的证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\"></span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\"></span><br><span class=\"line\">1: merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">2: api.merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\"></span><br><span class=\"line\">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\"></span><br><span class=\"line\">blank to select all options shown (Enter &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，重启服务就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Have Fun！</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-install-nodejs-npm/\" target=\"_blank\" rel=\"noopener\">centos用 yum 方式安装 nodejs 和 npm</a></p>\n</li>\n<li><p><a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-add-epel-remi/\" target=\"_blank\" rel=\"noopener\">centos 添加 epel 和 remi 源</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000007135306\" target=\"_blank\" rel=\"noopener\">centos 使用 nvm 安装 nodejs （nvm安装时出错，git 版本太老）</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7 安装 最新版 git</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\" target=\"_blank\" rel=\"noopener\">PM2实用入门指南</a></p>\n</li>\n<li><p><a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n</li>\n</ul>\n","raw":null,"categories":[{"name":"server","path":"api/categories/server.json"}],"tags":[{"name":"apache","path":"api/tags/apache.json"},{"name":"ssl","path":"api/tags/ssl.json"}]}]}