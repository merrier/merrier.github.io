{"total":114,"pageSize":10,"pageCount":12,"data":[{"title":"Hexo中图片处理正确姿势","slug":"Hexo中图片处理正确姿势","date":"2019-01-11T07:12:56.000Z","updated":"2019-02-02T10:19:58.042Z","comments":true,"path":"api/articles/Hexo中图片处理正确姿势.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"如何引用图片\"><a href=\"#如何引用图片\" class=\"headerlink\" title=\"如何引用图片\"></a>如何引用图片</h2><p>在写文章时，常常有插入图片的需求。Hexo 有多种图片插入方式，可以将图片存放在本地引用或者将图片放在 CDN 上进行引用。</p>\n<h3 id=\"本地引用-绝对路径\"><a href=\"#本地引用-绝对路径\" class=\"headerlink\" title=\"本地引用-绝对路径\"></a>本地引用-绝对路径</h3><p>这也是我目前采取的方式，我们可以将图片统一放在 <code>source/images</code> 文件夹中，通过 Markdown 语法访问它们:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](/images/image_name.jpg)</span><br></pre></td></tr></table></figure>\n<p>然后渲染出来的话也是绝对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/image.jpg\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"本地引用-相对路径\"><a href=\"#本地引用-相对路径\" class=\"headerlink\" title=\"本地引用-相对路径\"></a>本地引用-相对路径</h3><p>图片除了可以放在统一的 images 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 _config.yml 来生成:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>将 _config.yml 文件中的配置项 post_asset_folder 设为 true 后，执行命令 <code>$ hexo new post_name</code>，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name。将图片资源放在 post_name 中，文章就可以使用相对路径引用图片资源了。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image_name.jpg)</span><br></pre></td></tr></table></figure>\n<p>上述是 Markdown 的引用方式，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img image_name.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，这种语法不太友好，所以有人写了一款插件：<a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">hexo-asset-image</a>，这款插件可以自动将图片地址替换为绝对路径，使用方法也很简单：</p>\n<ol>\n<li>首先确保 <code>post_asset_folder: true</code></li>\n<li>然后这样引用就可以了:</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">logo</span>](<span class=\"link\">logo.jpg</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"CDN-引用\"><a href=\"#CDN-引用\" class=\"headerlink\" title=\"CDN 引用\"></a>CDN 引用</h3><p>除了引用本地图片，还可以将图片上传到一些免费的 CDN 服务中。关于如何上传至 CDN 服务这一问题，google 上面有很多回答了，就不在这里展开了。</p>\n<h2 id=\"图片命名\"><a href=\"#图片命名\" class=\"headerlink\" title=\"图片命名\"></a>图片命名</h2><p>图片命名是一件很重要的事，因为如果命名不好，后期维护起来会比较麻烦；而我推荐的命名方式是 <code>hexo_{function}_{id}</code>，图片都放在 <code>source/images</code> 文件夹中：</p>\n<ul>\n<li>hexo_post_1: 表示这张图片被用在了文章中，1 是这张图片的id，依顺序递增</li>\n<li>hexo_thumbnail_1: 表示这张图片被用在了文章缩略图中，id 含义同上</li>\n<li>hexo_others_1: 表示这张图片既没有被用在文章中也不是文章缩略图，id 含义同上</li>\n</ul>\n<h2 id=\"Markdown-中插入图片\"><a href=\"#Markdown-中插入图片\" class=\"headerlink\" title=\"Markdown 中插入图片\"></a>Markdown 中插入图片</h2><p>如果想固定图片尺寸，可以插入 HTML 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./xxx.png\"</span> <span class=\"attr\">width</span> = <span class=\"string\">\"300\"</span> <span class=\"attr\">height</span> = <span class=\"string\">\"200\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片名称\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果只需要居中的话只要在外面包围 div 标签即可：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></span>    </span><br><span class=\"line\">![<span class=\"string\">图片名称</span>](<span class=\"link\">./xxx.png</span>)</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"Hexo","path":"api/categories/Hexo.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"Hexo","path":"api/tags/Hexo.json"}]},{"title":"Hexo开发行动指南","slug":"Hexo开发行动指南","date":"2019-01-08T12:09:14.000Z","updated":"2019-02-02T10:19:58.042Z","comments":true,"path":"api/articles/Hexo开发行动指南.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"Hexo-分类和标签的路径怎么设置成英文\"><a href=\"#Hexo-分类和标签的路径怎么设置成英文\" class=\"headerlink\" title=\"Hexo 分类和标签的路径怎么设置成英文\"></a>Hexo 分类和标签的路径怎么设置成英文</h2><p>参考：<a href=\"https://github.com/hexojs/hexo/issues/1162#issuecomment-88857896\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo/issues/1162#issuecomment-88857896</a></p>\n<h2 id=\"构建静态文件无法生成-index-html-等文件\"><a href=\"#构建静态文件无法生成-index-html-等文件\" class=\"headerlink\" title=\"构建静态文件无法生成 index.html 等文件\"></a>构建静态文件无法生成 index.html 等文件</h2><p>需要查看 <code>themes/{your-theme-document}</code> 目录下是否有主题相关内容，以及根目录下 <code>_config.yml</code> 中设置的主题和 <code>themes</code> 目录下的主题文件夹命名是否相同，如果无内容或者命名不同，都会有问题。</p>\n<blockquote>\n<p>在利用 Travis CI 进行部署的时候发现 <code>index.html</code> 是空的，后来发现还是因为主题目录下内容为空，后来就在 <code>themes</code> 文件夹下新建了一个文件夹，然后把主题相关文件都拷贝过去了，这样就解决了这个问题，而内容为空的原因还不了解。</p>\n</blockquote>\n<h2 id=\"disqus-报错-Cannot-read-property-‘appendChild’-of-null\"><a href=\"#disqus-报错-Cannot-read-property-‘appendChild’-of-null\" class=\"headerlink\" title=\"disqus 报错 Cannot read property ‘appendChild’ of null\"></a>disqus 报错 Cannot read property ‘appendChild’ of null</h2><p>很多 Hexo 主题中都会内置 Disqus 评论模块，但是有时候会发现评论模块没有加载出来，然后控制台报错 <code>Cannot read property &#39;appendChild&#39; of null</code>，经过排查发现，是因为有一个 div 并没有加载，需要在模板中加入以下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"disqus_thread\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>Please enable JavaScript to view the <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//disqus.com/?ref_noscript\"</span>&gt;</span>comments powered by Disqus.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gulp-报错-Task-function-must-be-specified\"><a href=\"#gulp-报错-Task-function-must-be-specified\" class=\"headerlink\" title=\"gulp 报错 Task function must be specified\"></a>gulp 报错 Task function must be specified</h2><p>有人遇到过同样的问题，提了一个 issue：<a href=\"https://github.com/gulpjs/undertaker/issues/54\" target=\"_blank\" rel=\"noopener\">Error - “Task function must be specified”</a>，看完之后发现最后的解决方案是将 gulp 回滚到 v3 。。回滚之后确实不报错了。。</p>\n<h2 id=\"添加-404-页面\"><a href=\"#添加-404-页面\" class=\"headerlink\" title=\"添加 404 页面\"></a>添加 404 页面</h2><p>可以选择添加纯页面或匹配主题的 404 页面：</p>\n<h3 id=\"纯页面\"><a href=\"#纯页面\" class=\"headerlink\" title=\"纯页面\"></a>纯页面</h3><p>与普通的 html 网页相同，放置在根目录（source/）下，同时文件命名为 404.html 即可；不过需要注意的是，要在文件顶部添加以下内容：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found</span><br><span class=\"line\">layout: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>添加以上内容后，下面的内容就是普通的 html 了，大家用的比较多的是腾讯 404 公益页面，添加以下代码即可：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>                                                                                                                                        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>     <span class=\"attr\">src</span>=<span class=\"string\">\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\"</span> <span class=\"attr\">homePageName</span>=<span class=\"string\">\"返回首页\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"https://merrier.wang\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：需要把上面代码中的 homePageUrl 换成你自己的博客主页地址。</p>\n<h3 id=\"匹配主题的-404-页面\"><a href=\"#匹配主题的-404-页面\" class=\"headerlink\" title=\"匹配主题的 404 页面\"></a>匹配主题的 404 页面</h3><p>有时候我们可能不想展示单纯的 html 页面，想展示能够匹配当前使用主题的页面，下面介绍一下操作流程：</p>\n<p>首先，新建一个页面：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page 404</span><br></pre></td></tr></table></figure>\n<p>然后，进入刚新建的页面文件，路径一般为 <code>/source/404/index.md</code>；在顶部插入一行，写上 <code>permalink: /404</code>，这表示指定该页固定链接为 <code>http://&quot;主页&quot;/404.html</code>：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>经过上面的设置后，404 界面已生效，其编辑方式与一般文章无异。我们可以在 .md 文件正文中插入一些 CSS 样式，使得该页面与博客中的一般文章有所区别。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.ly554.com/hexosls.html\" target=\"_blank\" rel=\"noopener\">Hexo博客设置404页面</a></li>\n<li><a href=\"https://blog.csdn.net/liu1340308350/article/details/81744824\" target=\"_blank\" rel=\"noopener\">hexo添加404公益界面</a></li>\n<li><a href=\"http://moxfive.xyz/2015/10/16/hexo-404-page/\" target=\"_blank\" rel=\"noopener\">在 Hexo 中创建匹配主题的404页面</a></li>\n</ul>\n<h2 id=\"运行-hexo-g-出错\"><a href=\"#运行-hexo-g-出错\" class=\"headerlink\" title=\"运行 hexo g 出错\"></a>运行 <code>hexo g</code> 出错</h2><p>报错为以下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">TypeError: Cannot set property &apos;lastIndex&apos; of undefined</span><br><span class=\"line\">    at highlight (/home/travis/build/merrier/merrier.github.io/node_modules/highlight.js/lib/highlight.js:523:35)</span><br><span class=\"line\">    at /home/travis/build/merrier/merrier.github.io/node_modules/highlight.js/lib/highlight.js:573:21</span><br></pre></td></tr></table></figure>\n<p>从上面的错误栈可以看到应该是 <code>highlight.js</code> 报的错，后来我在 hexo 的 issue 中找到了解决方案：<a href=\"https://github.com/hexojs/hexo/issues/1913#issuecomment-245480139\" target=\"_blank\" rel=\"noopener\">_config.yml中auto_detect设为false</a></p>\n<h2 id=\"Template-render-error-unknown-path\"><a href=\"#Template-render-error-unknown-path\" class=\"headerlink\" title=\"Template render error: (unknown path)\"></a>Template render error: (unknown path)</h2><p>执行 <code>hexo s</code> 时报上面的错，在 <a href=\"https://github.com/hexojs/hexo/issues/2384#issuecomment-277494121\" target=\"_blank\" rel=\"noopener\">hexo 的 github issue</a> 中找到了解决方案（尝试一下全局搜索）</p>\n<h2 id=\"当文章中出现-Nunjucks-中的语法符号时无法生成网页\"><a href=\"#当文章中出现-Nunjucks-中的语法符号时无法生成网页\" class=\"headerlink\" title=\"当文章中出现 Nunjucks 中的语法符号时无法生成网页\"></a>当文章中出现 Nunjucks 中的语法符号时无法生成网页</h2><p>参考：<a href=\"http://www.one-more-tech.info/hexo-%E4%B8%AD%7B%7Bcontent%7D%7D-%E5%AF%BC%E8%87%B4%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E5%BC%82%E5%B8%B8/index/\" target=\"_blank\" rel=\"noopener\">http://www.one-more-tech.info/hexo-%E4%B8%AD%7B%7Bcontent%7D%7D-%E5%AF%BC%E8%87%B4%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E5%BC%82%E5%B8%B8/index/</a> 和 <a href=\"https://hoxis.github.io/hexo-unexpected-token.html\" target=\"_blank\" rel=\"noopener\">https://hoxis.github.io/hexo-unexpected-token.html</a></p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://muyunyun.cn/posts/f55182c5/\" target=\"_blank\" rel=\"noopener\">hexo 摸爬滚打之进阶教程</a></li>\n<li><a href=\"https://juejin.im/entry/5a9144896fb9a063523e0e97\" target=\"_blank\" rel=\"noopener\">hexo搭建博客最全攻略</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/hexo-tutor-1.html\" target=\"_blank\" rel=\"noopener\">Hexo 入门指南</a></li>\n<li><a href=\"https://blog.csdn.net/yanzi1225627/article/details/77761488\" target=\"_blank\" rel=\"noopener\">hexo链接持久化终极解决之道</a></li>\n<li><a href=\"https://www.m690.com/archives/1135/\" target=\"_blank\" rel=\"noopener\">实战–迁移wordpress 到hexo</a></li>\n<li><a href=\"http://coderunthings.com/2017/08/20/howhexoworks/\" target=\"_blank\" rel=\"noopener\">hexo是怎么工作的</a></li>\n<li><a href=\"http://hunao.info/2016/06/01/Hexo-Seo%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9C%A8google%E6%90%9C%E7%B4%A2%E6%8E%92%E5%90%8D%E7%AC%AC%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">Hexo Seo优化让你的博客在google搜索排名第一</a></li>\n</ul>\n","raw":null,"categories":[{"name":"Hexo","path":"api/categories/Hexo.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"},{"name":"Hexo","path":"api/tags/Hexo.json"}]},{"title":"再见，2018","slug":"再见，2018","date":"2019-01-01T08:46:28.000Z","updated":"2019-02-02T10:19:58.046Z","comments":true,"path":"api/articles/再见，2018.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_107.jpg","content":"<p>不知不觉，又一年过去了，而当时写<a href=\"/20171231/goodbye-2017.html\">再见，2017</a>时的情形还历历在目；不得不感叹，人真是越老越快啊！</p>\n<h2 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h2><p>这一年对于我来说是成长的一年，首先在工作上，逐渐适应了公司的工作节奏，对业务也开始逐渐熟悉，和小伙伴们打成了一团；在生活中，第一次租房虽然说有一些小插曲，但是最终还是安定了下来……下面就用一句话们总结一下我的2018吧：</p>\n<ul>\n<li>第一次租房，不算被坑，小有经验</li>\n<li>第一次做饭，西红柿炒蛋，闭着眼吃完</li>\n<li>买了心心念念的<code>机械键盘</code>，喜欢上打字的感觉很爽</li>\n<li>和女票过了<strong>1000</strong>天纪念，希望第10000天的时候还能不忘初心</li>\n<li>注册了个公司，老爸起的名字</li>\n<li>建了一个小学同学微信群，很难想象这么多年了还能联系上</li>\n<li>见证了antd团队因为<a href=\"https://www.zhihu.com/question/306858501/answer/559312463\" target=\"_blank\" rel=\"noopener\">圣诞彩蛋事件</a>而“收获”最低年终奖</li>\n<li>见证了ofo和锤子的没落，<code>互联网的寒冬</code>真的来了</li>\n<li>今年最常说的一句话：<strong>成年人的生活里没有容易二字</strong></li>\n</ul>\n<h2 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h2><p>很多朋友都在朋友圈晒自己立的Flag，有的充满激情（工资翻番）、有的踌躇满志（去三十多个国家）、有的令人心酸（不脱发）、有的不敢苟同（穿一次女装），而我的新年愿望是自己和认识的人都能平安健康，收获属于自己的幸福，不以物喜，不以己悲。 最后祝大家 <strong>2018一笔“狗”销，2019“猪”事顺利</strong>！ <img src=\"/images/hexo_post_107.jpg\" alt=\"\"></p>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"life","path":"api/tags/life.json"}]},{"title":"铲屎官，这里有一份属于你的空投","slug":"铲屎官，这里有一份属于你的空投","date":"2018-09-22T04:30:47.000Z","updated":"2019-02-02T10:19:58.054Z","comments":true,"path":"api/articles/铲屎官，这里有一份属于你的空投.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_114.jpeg","content":"<p>这篇文章对养猫的一些注意事项进行了介绍，同时推荐了一些淘宝物件，那些想养猫或者已经养猫的爱心人士不要错过了~</p>\n<h2 id=\"关于领养\"><a href=\"#关于领养\" class=\"headerlink\" title=\"关于领养\"></a>关于领养</h2><p>可以去豆瓣加入“北京宠物领养小组”</p>\n<h2 id=\"猫粮\"><a href=\"#猫粮\" class=\"headerlink\" title=\"猫粮\"></a>猫粮</h2><p>猫粮的选择尤其重要，因为影响着猫的健康以及毛色，同时不同的猫粮含有不同的营养，而幼猫和成猫需要的营养有所不同，所以在猫粮的选择上一定要做足功课。关于猫粮，公众号【斜对面的老阳】做过比较详细的评测，具体可以查看这篇推送：<a href=\"https://mp.weixin.qq.com/s/-ocerMcztBVoDF9EgFLJQw\" target=\"_blank\" rel=\"noopener\">2018海外猫粮榜：天下美食尽为朕所有！</a>，我总结一下就是以下几点：</p>\n<ul>\n<li>国产的猫粮相比进口猫粮会差一些</li>\n<li><strong>渴望</strong>是很贵的品牌，但是在评测结果中也是最好的，不过幼猫吃可能营养过剩；另外<strong>爱肯拿</strong>也不错，不过购买渠道比较窄</li>\n<li>如果不是很喜欢昂贵的品牌（没钱），可以考虑<strong>百利</strong>这个品牌，性价比很高</li>\n<li><strong>Go</strong>性价比也很高，要买就买九种肉，紫色包装的那一款</li>\n<li>一定要选择天然猫粮，其他推荐的品牌：<strong>凌采EVO</strong>、<strong>伊诺凡</strong>、<strong>素力高</strong>、<strong>Lorde</strong></li>\n</ul>\n<p>一些比较详细的猫粮介绍：</p>\n<ul>\n<li><strong>皇家</strong>，国产猫粮，不算便宜，适合1-4月龄的猫咪，不过对质量的质疑不少，略油，泪痕较重，还有点黑下巴。</li>\n<li><strong>NOW</strong>幼猫粮，小猫吃完毛发会变得很顺滑，不过价格过高，性价比一般。</li>\n<li><strong>希尔斯</strong>幼猫粮，适合12个月以下幼猫，富含牛磺酸，小猫会很喜欢吃，吃了一阵子后也是毛发很油滑，推荐！</li>\n</ul>\n<p>一些贴吧会有猫粮的团购，还是很实惠的，下面就是<a href=\"http://tieba.baidu.com/f?kw=%B0%AE%C3%A8%C9%FA%BB%EE&amp;fr=ala0&amp;tpl=5\" target=\"_blank\" rel=\"noopener\">爱猫生活吧</a>中的某网友总结的2018年上半年吧内猫粮团购均价表：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_114.jpeg\" alt=\"2018年上半年吧内猫粮团购均价表\"><br></div>\n\n<p>而公众号【斜对面的老阳】在送检了32个品牌共51款猫粮之后，精心准备了一份“智能换粮攻略”：<a href=\"https://mp.weixin.qq.com/s/jb4iILrU2dApE7QrD9RI3Q\" target=\"_blank\" rel=\"noopener\">【猫粮攻略】这些进口粮月开销超低！你竟然还不知道？</a> ，关于猫粮购买店铺，下面是一些同事以及周围养猫的朋友推荐的店铺，淘宝搜索店铺名即可：</p>\n<ul>\n<li>【疯狂桔子家】</li>\n<li>【紫色宠物】</li>\n<li>【土猫宠物家】</li>\n<li>【大兴宠物】</li>\n</ul>\n<p>其实除了猫粮以外，自制的一些食物也是很不错的：鸡胸肉或牛肉煮熟，而生牛肉需要冷冻两天后融化后喂食，并且在两个小时内吃完。</p>\n<h2 id=\"零食\"><a href=\"#零食\" class=\"headerlink\" title=\"零食\"></a>零食</h2><p>和人一样，猫每天光吃正餐肯定是不够的，因为营养不均衡，所以零食也是必不可少的，而猫的零食有很多种，我还没有看到过一个比较靠谱的评测，就推荐一下我家猫很爱吃的几种吧，仅供参考：</p>\n<ul>\n<li><a href=\"http://m.tb.cn/h.3TAMZ5B\" target=\"_blank\" rel=\"noopener\">路斯饼干</a></li>\n<li><a href=\"http://m.tb.cn/h.3TAq5FO\" target=\"_blank\" rel=\"noopener\">珍致罐头</a></li>\n<li>羊奶布丁</li>\n<li>羊奶粉，有both、谷登、卫仕、麦德氏、贝克等牌子</li>\n</ul>\n<p>罐头除了<strong>珍致</strong>这个牌子以外，还有一些其他推荐的品牌：<strong>卡尼</strong>、<strong>wellness</strong>、<strong>雪诗雅</strong>。饼干和罐头我家猫都很爱吃，不过每只猫的口味都不一样，建议先少买一些试吃一下，如果猫喜欢吃的话再多买一些。不过猫零食虽然好吃，但是最好让猫少吃，每周奖励1-2次就行。</p>\n<p>一些推荐的店铺：</p>\n<ul>\n<li>【宅猫酱】，他家有很多吃的，用的，都挺靠谱的，猫粮也可以在他家买</li>\n<li>【五汪一喵的家】，他家有很多玩具，还有一些小零食。</li>\n</ul>\n<h2 id=\"保健品\"><a href=\"#保健品\" class=\"headerlink\" title=\"保健品\"></a>保健品</h2><p>保健品不同于药品，偶尔吃一下起到避免生病作用。</p>\n<ul>\n<li><strong>now</strong>品牌鱼油/卵磷脂是美毛的，也可以尝试微量鸡蛋黄</li>\n<li><strong>益生菌</strong>可以调节肠道，不时补充一下</li>\n<li><strong>化毛膏</strong>要偶尔吃，因为里面含有诱食剂；<strong>营养膏</strong>每周三次；<strong>红狗</strong>、<strong>骏宝</strong>这两个牌子不错（<strong>骏宝</strong>确实是目前最好的化毛膏和营养膏品牌，但是奸商太黑，导致价格下不来，所以很多人买红狗了，油质是差了点但是便宜，可以结合猫草）</li>\n<li><strong>维生素B</strong>用来补充维生素和治疗猫癣，可以每天半片，推荐品牌：<strong>卫仕</strong></li>\n<li><strong>高免因子胶囊</strong>，用来增加抵抗力</li>\n<li><strong>发育宝</strong>，促进发育和提高免疫力，对肠胃也有保护作用</li>\n<li><strong>乳铁蛋白</strong>，增强免疫力，有鼻支爱打喷嚏的吃了会有好转</li>\n</ul>\n<p>推荐店铺：【淘宝小折】</p>\n<h2 id=\"药品\"><a href=\"#药品\" class=\"headerlink\" title=\"药品\"></a>药品</h2><p>家里可以常备一些</p>\n<ul>\n<li>如果猫咪腹泻拉肚子，可以去药房买<strong>妈咪爱</strong>或者<strong>思密达</strong>（没错，就是这个名字），妈咪爱是调节肠道菌群的作用，思密达是把干的作用</li>\n<li>如果感冒打喷嚏，可以适当的买<strong>阿莫西林克拉维酸钾</strong>（有宠物专用的），这就是<strong>速诺</strong>的主要成份。正确剂量是15mg/kg，不要养成滥用的习惯，因为抗生素对肠道菌的摧残是很严重的。<strong>猫氨</strong>可以预防感冒，当有迹象的时候可以吃一点。</li>\n<li>日常清理耳道建议<strong>耳肤灵</strong></li>\n<li><strong>莫匹罗星软膏</strong>可以有效地对付黑下巴、马尾病，就是太浓稠，剃掉毛涂药才比较有效果</li>\n<li>家中常备眼药水（<strong>左氧氟沙星眼药水</strong>与<strong>氯霉素眼药水</strong>），不过猫咪有眼屎是正常现象，不要担心。</li>\n<li>猫癣的话，除了上面介绍的维生素B，<strong>艾贝尔</strong>和<strong>癣力宁</strong>是专门治疗猫癣的药品。爱猫生活吧有一篇帖子介绍了猫癣的具体治疗措施：<a href=\"http://tieba.baidu.com/p/5855949714\" target=\"_blank\" rel=\"noopener\">《出个有用的贴，主要针对治疗猫藓，主子有猫藓的可以进来看看》</a></li>\n</ul>\n<p>推荐店铺：【想要变成猫】，他家客服是兽医，一些小毛病还可以问问他。</p>\n<h2 id=\"猫砂\"><a href=\"#猫砂\" class=\"headerlink\" title=\"猫砂\"></a>猫砂</h2><p>猫砂好不好，主要看能不能遮臭。。而<a href=\"http://m.tb.cn/h.36cRzVW\" target=\"_blank\" rel=\"noopener\">Lorde猫砂</a>是不错的选择，不过有些猫咪可能对该品牌的猫砂不感冒，所以当你发现它不在猫砂盆里面进行某些活动的话，就赶紧换猫砂吧~一些其他品牌的猫砂推荐：</p>\n<ul>\n<li><strong>TOMCAR</strong>绿茶豆腐猫砂，易铲屎</li>\n<li><strong>Drymax洁克</strong>，几乎没有尘土</li>\n<li><strong>小佩</strong>，巧克力味的超好闻</li>\n</ul>\n<p>小猫在 3-4 周就要开始学习使用猫砂盆排泄：把沾有它屎的纸巾扔在猫砂盒里让它闻，并且用手拨弄它的小爪子，让它学会埋沙子的动作，慢慢就学会自己上厕所了。</p>\n<h2 id=\"玩具\"><a href=\"#玩具\" class=\"headerlink\" title=\"玩具\"></a>玩具</h2><p>猫对玩具的喜爱超乎你的想象</p>\n<ul>\n<li>逗猫棒，这是猫基本上永远不会腻的玩具，不过最好多准备几个</li>\n<li>激光笔，你懂得</li>\n<li>各种会响的球类，猫咪很喜欢圆的和会响的东西</li>\n<li>转盘三层，每一层里面都有球，这个我也给我家猫买了，它很喜欢，就是晚上的时候要记得把它收起来，否则后果很严重！</li>\n</ul>\n<p>玩具最好 半个月/一个月 就买一个新的，因为猫咪喜新厌旧。猫咪比较警惕，所以玩具买回来后它可能不会玩，但是等它熟悉了以后就会去玩了。</p>\n<h2 id=\"用品\"><a href=\"#用品\" class=\"headerlink\" title=\"用品\"></a>用品</h2><ul>\n<li>猫爬架占地方比较大，而且其实很多猫对它都不感兴趣，性价比不是很高</li>\n<li>猫抓板用来给猫磨爪子，有<a href=\"https://item.taobao.com/item.htm?_u=k1me24qu37bd&amp;id=542301656179\" target=\"_blank\" rel=\"noopener\">靠墙立式</a>的，有<a href=\"http://m.tb.cn/h.36cLdW5\" target=\"_blank\" rel=\"noopener\">车子式</a>的，有<a href=\"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.4c43616dqZHjSA&amp;id=570322234564&amp;cm_id=140105335569ed55e27b&amp;abbucket=19\" target=\"_blank\" rel=\"noopener\">碗式</a>的，还有<a href=\"http://m.tb.cn/h.36aZMxB\" target=\"_blank\" rel=\"noopener\">月牙式</a>的。不过猫抓板不管长什么样，其实好坏差别不大，有一个就行</li>\n<li><a href=\"http://m.tb.cn/h.3TuO6wy\" target=\"_blank\" rel=\"noopener\">猫吊床</a>，猫是一种充满好奇心的生物，所以会经常望着窗外发呆，而猫吊床可以粘在玻璃上，这样让猫可以很舒服的望着窗外，也可以在上面睡觉。</li>\n<li>猫碗，最好有个小饭桌，这样可以保护猫的颈椎</li>\n<li>水碗，有条件的可以买专用饮水机，淘宝上的<strong>小佩饮水机</strong>很不错，价格也不是很贵；猫用水一定要<strong>纯净水</strong>，矿物质水容易结石。</li>\n<li>猫砂盆，最好用全封闭的，因为遮臭效果好。</li>\n<li>最好养成定期刷牙的习惯，建议维克牙膏</li>\n<li>消毒的话推荐杜邦卫克</li>\n</ul>\n<h2 id=\"肢体语言\"><a href=\"#肢体语言\" class=\"headerlink\" title=\"肢体语言\"></a>肢体语言</h2><p>猫的尾巴的秘密： </p>\n<ol>\n<li>猫的尾巴是向下耷拉着，还不断的顫抖，这代表着猫咪处于一种惊慌害怕的状态。</li>\n<li>猫的尾巴直直地竖起，甚至可以看到它的小菊花，代表它很开心見到你，是心情非常好的标志！</li>\n<li>猫的尾巴放在地上，尾尖時不时抖动，代表它現在有些沮丧，这个时候尽量不要去打扰到它。</li>\n<li>猫的尾巴微微回勾，有点像小问好，就表示，赶紧让我们成为朋友吧，我很喜欢你~</li>\n<li>猫的尾巴自然放松和身体几乎齐平，一般这种情況在猫走路的进行中，这表示它对于眼前的事物非常感兴趣。</li>\n<li>猫的尾巴竖起并大幅度颤抖表示它現在即将发怒，离炸毛只有一步之遥。</li>\n<li>猫的尾巴缓慢悠长地甩在体侧，代表它现在感受到了爱意，不论对象是人还是异性猫。</li>\n<li>猫的尾巴夹在两腿之间，表示猫咪現在比较紧张和担忧。</li>\n<li>猫的尾巴大幅度抖动，猫的背拱起，这是属于猫最暴怒的状态，惹恼它到这一步就要赶紧躲远些… </li>\n</ol>\n<div align=\"center\"><br><img src=\"/images/hexo_post_115.png\" alt=\"猫的尾巴的秘密\"><br></div>\n\n<h2 id=\"一些文章\"><a href=\"#一些文章\" class=\"headerlink\" title=\"一些文章\"></a>一些文章</h2><ul>\n<li>知乎：<a href=\"https://zhuanlan.zhihu.com/p/32856885\" target=\"_blank\" rel=\"noopener\">《一篇文章，弄明白猫与狂犬病》</a></li>\n<li>CandyStory猫舍：<a href=\"https://mp.weixin.qq.com/s/dubxnngSN3GcpDLRAJdH0g\" target=\"_blank\" rel=\"noopener\">《请在接猫前一周做好接猫准备》</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>给猫洗澡的话三两个月一次，开始的时候最好去靠谱的宠物医院去，洗完一定要吹干，因为猫咪身体湿的话很容易得猫癣；不建议去宠物店，容易传染其他疾病，寄养也是如此。</li>\n<li>驱虫，体内每三个月一次（<strong>拜耳</strong>、<strong>巴迪U-800</strong>、<strong>巴迪D-800</strong>），体外每月一次（<strong>大宠爱</strong>、<strong>福来恩</strong>、<strong>爱沃克</strong>），最好是轮换着品牌，因为每个品牌的药品驱不同种类的虫。下图是驱虫产品的对比表格：</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_319.jpeg\" alt=\"\" width=\"600\"></div>\n\n<ul>\n<li>猫的胆子很小，所以不要打它，容易记仇，而且长期下去的话以后容易对陌生人乱抓。</li>\n<li><strong>猫咪禁区喷雾</strong>，可以防止猫乱尿，猫发情期之前可以买一瓶</li>\n<li><strong>柳屋生发液</strong>，让秀发浓密的同时还有柑橘味、风油精、薄荷味，可以预防猫靠近和抓头发</li>\n</ul>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"},{"name":"心得","path":"api/tags/心得.json"},{"name":"猫","path":"api/tags/猫.json"}]},{"title":"简单聊一下服务端渲染","slug":"简单聊一下服务端渲染","date":"2018-09-18T08:07:53.000Z","updated":"2019-02-02T10:19:58.050Z","comments":true,"path":"api/articles/简单聊一下服务端渲染.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p><code>Server Slide Rendering</code> 服务端渲染,又简写为 <code>SSR</code>，他一般被用在我们的 <code>SPA（Single-Page Application）</code> 中，即单页应用。</p>\n<h2 id=\"为什么要用SSR？\"><a href=\"#为什么要用SSR？\" class=\"headerlink\" title=\"为什么要用SSR？\"></a>为什么要用SSR？</h2><p>首先我们需要知道 SSR 对于 SPA 的<code>好处</code>，<code>优势</code>是什么。</p>\n<ul>\n<li>更好的 <code>SEO（Search Engine Optimization）</code>，<code>SEO</code> 是搜索引擎优化，简而言之就是针对百度这些搜索引擎，可以让他们搜索到我们的应用。这里可能会有误区，就是我也可以在 <code>index.html</code> 上写 <code>SEO</code> ，为什么会不起作用。因为 React、Vue 的原理是<strong>客户端渲染</strong>，通过浏览器去加载 js、css，有一个时间上的<code>延迟</code>，而搜索引擎不会管你的<code>延迟</code>，他就觉得你如果没加载出来就是没有的，所以是搜不到的。</li>\n<li>解决一开始的<code>白屏渲染</code>，上面讲了 React 的渲染原理，而<strong>SSR服务端渲染</strong>是通过服务端请求数据，因为服务端内网的请求快，性能好所以会更快的加载所有的文件，最后把下载渲染后的页面返回给客户端。</li>\n</ul>\n<h2 id=\"服务端渲染VS客户端渲染\"><a href=\"#服务端渲染VS客户端渲染\" class=\"headerlink\" title=\"服务端渲染VS客户端渲染\"></a>服务端渲染VS客户端渲染</h2><h3 id=\"客户端渲染路线：\"><a href=\"#客户端渲染路线：\" class=\"headerlink\" title=\"客户端渲染路线：\"></a>客户端渲染路线：</h3><ol>\n<li>请求一个 html</li>\n<li>服务端返回一个 html</li>\n<li>浏览器下载 html 里面的 js/css 文件</li>\n<li>等待 js 文件下载完成</li>\n<li>等待 js 加载并初始化完成</li>\n<li>js 代码终于可以运行，由js代码向后端请求数据( ajax/fetch )</li>\n<li>等待后端数据返回</li>\n<li>react-dom ( 客户端 )从无到完整地，把数据渲染为响应页面</li>\n</ol>\n<h3 id=\"服务端渲染路线：\"><a href=\"#服务端渲染路线：\" class=\"headerlink\" title=\"服务端渲染路线：\"></a>服务端渲染路线：</h3><ol>\n<li>请求一个 html</li>\n<li>服务端请求数据( 内网请求快 )</li>\n<li>服务器初始渲染（服务端性能好，较快）</li>\n<li>服务端返回已经有正确内容的页面</li>\n<li>客户端请求 js/css 文件</li>\n<li>等待 js 文件下载完成</li>\n<li>等待 js 加载并初始化完成</li>\n<li>react-dom ( 客户端 )把剩下一部分渲染完成( 内容小，渲染快 )</li>\n</ol>\n<p>从上面两者的渲染路线可以看到，其主要区别就在于，客户端从<code>无到有的</code>渲染，服务端是先在服务端<code>渲染一部分</code>，在再客户端<code>渲染一小部分</code>。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://juejin.im/post/5b55e6a96fb9a04fcf59d754\" target=\"_blank\" rel=\"noopener\">React服务端渲染+pm2自动化部署</a></p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"渲染","path":"api/tags/渲染.json"}]},{"title":"部落冲突COC游戏攻略","slug":"部落冲突COC游戏攻略","date":"2018-05-30T09:30:57.000Z","updated":"2019-02-02T10:19:58.054Z","comments":true,"path":"api/articles/部落冲突COC游戏攻略.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_55.jpg","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>《部落冲突》是一个战争策略类游戏，简称为 “COC” ，最重要的是这是一款极其良心的游戏，如果说让我投票一款不用花钱又好玩的游戏，那我肯定投给它（王者荣耀没有铭文也不太好玩），可能很多人已经玩过这款游戏了，如果屏幕前的你没有玩过，建议去<a href=\"http://coc.kunlun.com/\" target=\"_blank\" rel=\"noopener\">《部落冲突》官网</a>领略一下这款游戏的魅力。而我入这款游戏的坑比较晚，经舍友介绍才开始玩的，中间因为<strong>专注于学术</strong>而弃坑了一段时间，不过玩的时间还算比较久的，下面就整理一下玩这款游戏过程中所领悟的心得，先来一发目前基地截图：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_55.jpg\" alt=\"\"><br></div>\n\n<h2 id=\"大本营\"><a href=\"#大本营\" class=\"headerlink\" title=\"大本营\"></a>大本营</h2><p>自从更新新版本之后，就多了一个新的基地——<strong>建筑大师基地</strong>，所以现在这款游戏是有两个基地的，而两个基地之间除了宝石是互通的以外，其他毫无关联，所以我将分别介绍这两个基地的玩法与攻略，首先就先说一下大本营：</p>\n<h3 id=\"关于升本\"><a href=\"#关于升本\" class=\"headerlink\" title=\"关于升本\"></a>关于升本</h3><p>大本营的等级很重要，它决定了你的防御以及资源建筑的等级上限，而我的建议是<strong>前5本之前随便升</strong>，你可以选择速本，也可以选择防御或资源建筑升满的时候再升本，因为这个阶段还属于挨打阶段，很难说靠打别人走向发家致富的道路；而<strong>在5本以后（包括5本），一定要升满防御和资源建筑以后再升本</strong>，换句话说就是在升本之前要保证除了墙以外的其他所有建筑都升到最高级，这样有两个好处：</p>\n<ol>\n<li>在部落战的时候可以占据很大的优势；</li>\n<li>可以很好的骗到别人，因为很多人都不太会看防御建筑的等级，所以盲目的进行攻打，而如果你的防御建筑是最高级的话，这样就可以保住自己的基地或资源。</li>\n</ol>\n<h3 id=\"关于布局\"><a href=\"#关于布局\" class=\"headerlink\" title=\"关于布局\"></a>关于布局</h3><p>还是那个观点，5本之前随便摆，但是5本之后就有很大的讲究了，一个好的布局是第一重要的，因为这个游戏拼的就是策略，如果你的布局足够好，就算你的资源比较多，别人也会望而却步的。每个本位都有相应的布局，具体的可以参照4399<a href=\"http://news.4399.com/gonglue/buluozz/buju/\" target=\"_blank\" rel=\"noopener\">部落冲突神阵大全</a>，基本上主要思路就是保主基地和你的资源，比如从开头我的主基地截图就可以看到一些端倪。</p>\n<h3 id=\"关于部落\"><a href=\"#关于部落\" class=\"headerlink\" title=\"关于部落\"></a>关于部落</h3><p>部落可以理解为一个公会或一个势力，首先加入部落的前提条件就是要先建好部落堡垒，这个就不用多说了；然后，部落最好是找一个比较活跃等级比较高的，这样福利会比较好，反正<strong>部落是越早加入越好</strong>，可以请求增援，也可以给别人捐兵加经验升级。这里推荐一下我所在的部落（IOS），直接搜索一下 “BigWorldBigBang”，或者在手机上点击<a href=\"https://link.clashofclans.com/?action=OpenClanProfile&amp;tag=88PULP8C\" target=\"_blank\" rel=\"noopener\">此链接</a>直接就可以加入了。</p>\n<h3 id=\"关于部落战\"><a href=\"#关于部落战\" class=\"headerlink\" title=\"关于部落战\"></a>关于部落战</h3><p>加入部落的目的之一就是打部落战了，部落战除了可以给部落加经验之外，对于个人而言最大的好处就是可以达成成就与获得资源了，所以<strong>部落战如果有时间打的话一定要报名参加</strong>，其实也用不了多长时间，而部落战的话每个本位都有不同的打法，网上有很多攻略，自己搜一下就可以了，这里就不再赘述了。</p>\n<h3 id=\"关于资源\"><a href=\"#关于资源\" class=\"headerlink\" title=\"关于资源\"></a>关于资源</h3><p>资源是这个游戏最关键的点，所有建筑的升级都需要资源，而资源从何而来呢？这里需要明确一点的就是：<strong>资源是靠打的，仅靠自己的建筑生产的那点资源是肯定不够的</strong>，这也成为了一些人弃坑的原因，但是不可否认的是，这种策略类游戏不就是让你去攻打别人的吗？而每个本位中的每个布局都有不同的打法，涉及到摆放的位置以及技能和法术释放的时机的，这是这个游戏的魅力所在，充满着无限的可能性，而具体怎么打就不可言喻了，需要从实战中获得经验（举个例子，我现在9本，基本上用大皮卡+法师+治疗法术是可以打任何布局的）。不过，在攻打前一定要看一下对方的防御建筑以及可以掠夺的资源，再衡量一下自己所用兵力所需要的资源，不能打完发现还亏了。</p>\n<h3 id=\"关于杯数\"><a href=\"#关于杯数\" class=\"headerlink\" title=\"关于杯数\"></a>关于杯数</h3><p>杯数是一个核定你现在实力的标准，而你去攻打别人的时候，匹配到的敌人一定会是和你杯数差不多的人，当然打你的人也是一样，所以这个游戏要想玩的好，杯数保持是有讲究的：总体而言就是根据你当前大本营的本位来保持<strong>，5本控制在700左右，6本800，7本900-1000，8本1100-1500，9本1500-1800</strong>，控制在这个范围是最佳的。</p>\n<h2 id=\"建筑大师基地\"><a href=\"#建筑大师基地\" class=\"headerlink\" title=\"建筑大师基地\"></a>建筑大师基地</h2><p>建筑大师基地是后来出的新玩法，具体什么时间忘了，不过自从出了建筑大师基地以后，之前的大本营/村庄在游戏里就被称之为家乡了，其实两者主要的玩法是差不多的，只不过一个是白天，一个是黑夜，所以建筑大师基地有时也被称为<strong>夜世界</strong>。首先介绍一下这个基地和大本营不同的地方，因为是新出的模式，所以可能朋友可能不知道，还是有必要说一下的：</p>\n<ol>\n<li>训练部队不需要消耗圣水，需要的只是时间</li>\n<li>你只会匹配到在线的玩家，你进攻他的同时，他也会进攻你的基地，这里和大本营正好互反，大本营是不会匹配到在线的玩家的</li>\n<li>技艺高超的首领会平衡基地的进攻能力和防守能力。因此，在升级部队提升进攻实力的同时，别忘了建筑大师基地的阵型和防御建筑也需要不断的优化和升级</li>\n</ol>\n<h3 id=\"关于进攻\"><a href=\"#关于进攻\" class=\"headerlink\" title=\"关于进攻\"></a>关于进攻</h3><p>在这个基地中，进攻的策略比大本营更为重要，因为最终的胜负是按照两方进攻所得星数来判断的，下面讲一些注意事项和小技巧：</p>\n<ol>\n<li>搜到对手后、有一分钟的时间思考人生、不要操之过急、仔细观察阵型再配兵打战。</li>\n<li>看见缺口一定有陷阱、所以<strong>不要一股脑全把兵放下去了</strong>，时间是很充足的，可以先下几个兵试探一下</li>\n<li>不到最后一秒千万不要放弃，你以为自己打的星数比较少，没准对面更少或者直接掉线了！</li>\n</ol>\n<h3 id=\"关于防守\"><a href=\"#关于防守\" class=\"headerlink\" title=\"关于防守\"></a>关于防守</h3><p>防守是与进攻并重的，所以这里说几点比较重要的：</p>\n<ol>\n<li><strong>内置大本营</strong>，这是基本要素，因为最终判定输赢的时候是按照星数来判定的，也就是说如果你打了49%摧毁率0颗星，对面打了10&amp;摧毁率1颗星，也是算对面赢的，所以一定不要让对面轻轻松松就打掉大本营</li>\n<li><strong>撼地巨石守入口</strong>，如果地方用近战部队进攻，那么撼地巨石一定会教他们做人的。</li>\n<li><strong>防空建筑内置</strong>， 防空是个很重要的建筑，一定要放在里面</li>\n<li><strong>特斯拉电磁塔和多管迫击炮要紧邻巨石</strong>，这两个是这个游戏攻击最高和攻速最快的建筑，守着撼地巨石是避免敌方用远程隐秘弓箭手进攻，毕竟撼地巨石的攻击距离不忍直视</li>\n<li><strong>陷阱放在没有巨石的另外一边</strong>， 没人是傻子，看见陷阱还往里面闯？那么我们防御薄弱的另一侧就需要陷阱来协助防守了</li>\n</ol>\n<h3 id=\"关于建筑\"><a href=\"#关于建筑\" class=\"headerlink\" title=\"关于建筑\"></a>关于建筑</h3><p>建筑的升级也有一些讲究：</p>\n<ol>\n<li><strong>搜对手做任务的时候不要让防御和陷阱处在升级状态</strong>，这期间可以升级资源建筑之类的，防御类的建筑放在不打任务时升级最好</li>\n<li>时光机器不一定非要等到打任务时用，一般是有了加速就点，单纯为了压缩所有时间</li>\n</ol>\n<h3 id=\"关于本位\"><a href=\"#关于本位\" class=\"headerlink\" title=\"关于本位\"></a>关于本位</h3><p>建筑大师基地目前满本是8本，所以基本上到5本就已经可以算后期了。对于本位，首先根据指引到达2本，2本不要停留太久，造完升本需要的建筑就直接速升到三本。到三本之后一定要先升兵营，升到可以造小亡灵，在三本这个本位，小亡灵打法基本上无敌：先放一个兵营的胖子挡住箭塔，之后小亡灵直接踏平。 注意：小亡灵不要升到很高的级别，主要升级胖子弓箭手和野蛮人 到了三本后期有两个基本的流派，以6级的弓箭手和6级野蛮人为核心。先从野蛮人说起，6级的野蛮人一个兵营可以造10个，30个野蛮人很无敌，挑那些撼地巨石外置的阵型，先放1-2个让他砸一下，然后趁着他还在缓冲的时候，直接下去一半秒掉锤子，最后分散再下一波清边，负责踩炸弹和蹭百分比 再来说说弓箭手，5级及以下的弓箭手最好是下在一起，以高攻击争取爆本，而六级弓箭手就可以无脑绕圈放，基本都是50%以上，赢得几率很大 升到四本后基本还是这两个流派，就不赘述了，三本其实还是可以速本的，但是杯一定要上去，保持在1600左右发育，生完四本速度出钟楼，然后把钟楼升满，这样发育会快很多 就这样一直发育，等满防满科技再生五本，把小龙升满，小龙分开绕圈放加上战争机器简直无敌</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><p>这里讲一下大本营和建筑大师基地的一些通用的攻略：</p>\n<h3 id=\"关于宝石\"><a href=\"#关于宝石\" class=\"headerlink\" title=\"关于宝石\"></a>关于宝石</h3><p>很多新手不知道宝石有什么用，以为和金水一样可以随便用，那我告诉你可大错特错了，宝石是这个游戏里最重要也是最宝贵的资源，其相当于现实世界中的人民币（你说有用不？），这里我的建议是<strong>所有的宝石都用来购买建筑工人</strong>，先把主基地中的5个建筑工人买齐，这样可以加快建筑的升级速度，而<strong>买齐之后就可以用来加速了</strong>，毕竟如果你不是人民币玩家的话，就需要拿时间来玩了，时间就是金钱啊！</p>\n","raw":null,"categories":[{"name":"game","path":"api/categories/game.json"}],"tags":[{"name":"COC","path":"api/tags/COC.json"}]},{"title":"Apache配置二级域名及SSL证书","slug":"Apache配置二级域名及SSL证书","date":"2018-04-24T10:13:56.000Z","updated":"2019-02-02T10:19:58.042Z","comments":true,"path":"api/articles/Apache配置二级域名及SSL证书.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前一段日子，我费了九牛二虎之力将 “Merrier说” 博客升级成了HTTPS，虽然回过头来看，其实申请SSL证书以及配置都是现成的轮子，别人已经为我们写好了脚本，不过对于第一次接触服务器相关的童鞋来说，确实会遇到很多麻烦，如果你也有这个需求，可以参考我的另一篇文章——<a href=\"/20180416/website-configuration-https.html\">网站配置HTTPS踩坑记</a>，不过这几天我又配置了一个二级域名（api.merrier.wang），用作爬虫输出的 REST API 所用。</p>\n<h2 id=\"Apache配置\"><a href=\"#Apache配置\" class=\"headerlink\" title=\"Apache配置\"></a>Apache配置</h2><p>首先，我们既然要配置二级域名，那肯定要更改服务器的配置了，这里我以Apache为例，介绍一下如何配置二级域名： 服务器的配置文件以 .conf 为后缀，首先找到 apache 配置文件（httpd.conf）所在位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>假如 httpd.conf 所在路径为 <code>/etc/httpd/conf/httpd.conf</code> ，在 httpd.conf 中加入这样一句代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/httpd/conf/extra/*.conf</span><br></pre></td></tr></table></figure>\n<p>其含义是将 /etc/httpd/conf/extra/ 路径下的所有以 .conf 为后缀的文件都作为 apache 的配置文件进行引入，这样我们就可以将除了 httpd.conf 之外的其他配置文件都放到 extra 文件夹下，便于管理。接着配置一下 NameVirtualHost，将配置文件中的下面一行代码取消注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NameVirtualHost *:80</span><br></pre></td></tr></table></figure>\n<p>然后，我们在 extra 文件夹下新建一个配置文件，如果主域名为 merrier.wang，而想配置的二级域名为 api.merrier.wang 的话，配置文件可以取名为 httpd-api.conf，这样命名比较规范。在新建的配置文件中填入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin root@merrier.wang</span><br><span class=\"line\">    DocumentRoot &quot;/var/www/html/merrier-api&quot;</span><br><span class=\"line\">    &lt;Directory &quot;/var/www/html/merrier-api&quot;&gt;</span><br><span class=\"line\">      AllowOverride all</span><br><span class=\"line\">      Order allow,deny</span><br><span class=\"line\">      Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ServerName api.merrier.wang</span><br><span class=\"line\">    ProxyRequests off</span><br><span class=\"line\">    &lt;Proxy *&gt;</span><br><span class=\"line\">      Order deny,allow</span><br><span class=\"line\">      Allow from all</span><br><span class=\"line\">    &lt;/Proxy&gt;</span><br><span class=\"line\">    &lt;Location /&gt;</span><br><span class=\"line\">      ProxyPass http://localhost:3000/</span><br><span class=\"line\">      ProxyPassReverse http://localhost:3000/</span><br><span class=\"line\">    &lt;/Location&gt;</span><br><span class=\"line\">    ErrorLog logs/merrier.wang-error_log</span><br><span class=\"line\">    CustomLog logs/merrier-wang-access_log common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>其中有几个字段名需要按照真实情况进行修改：</p>\n<ul>\n<li>DocumentRoot和Directory：你的文件存放路径</li>\n<li>ServerAdmin：一般为 root@主域名</li>\n<li>ServerName：二级域名</li>\n<li>ProxyPass和ProxyPassReverse：node 服务占用的端口号，如果没有 node 服务，可以不填写</li>\n<li>ErrorLog和CustomLog：log 存放地址</li>\n</ul>\n<p>这样修改完之后重启服务器让配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>然后访问一下你的二级域名（http），如果一切顺利的话应该就可以看到页面了（如果有 node 服务的话，需要先启动 node 服务）</p>\n<h2 id=\"PM2及node相关配置\"><a href=\"#PM2及node相关配置\" class=\"headerlink\" title=\"PM2及node相关配置\"></a>PM2及node相关配置</h2><p>如果你需要启动 node 服务，那你肯定需要进行进程管理，尤其是如果你的网站需要占用多个端口有多个 node 服务的话，那在 node 进程管理工具中，业界使用最多的就是 pm2 了，下面就介绍一下如何合理的进行 pm2 配置以及 node 相关安装和配置（如果你没有 node 服务，那这一部分就可以跳过了）：</p>\n<h3 id=\"安装nodejs和npm\"><a href=\"#安装nodejs和npm\" class=\"headerlink\" title=\"安装nodejs和npm\"></a>安装nodejs和npm</h3><p>centos 默认是没有 nodejs 和 npm 的，所以需要进行安装：首先要通过 yum 来安装 nodejs 和 npm，而这需要先给 yum 添加 epel 源，添加方法在 <a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-add-epel-remi/\" target=\"_blank\" rel=\"noopener\">centos 添加epel和remi源</a> 中，安装完成后，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm。在 centos 系统，我们可以通过 curl 的方式安装 nvm ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>如果你看到以下报错，说明你的 git 版本太低了（可以通过 <code>git --version</code> 查看当前 git 的版本）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\\&gt; error: pathspec &apos;v0.29.0&apos; did not match any file(s) known to git.</span><br><span class=\"line\">Your version of git is out of date. Please update it!</span><br></pre></td></tr></table></figure>\n<p>可以按照<a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7 安装 最新版 git</a>的教程进行最新版git的安装，讲解步骤很详细。安装完 nvm 之后，我们对 node 的版本管理就非常简单了，例如，如果我们要安装 8.1.3 版本，可以用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8.1.3</span><br></pre></td></tr></table></figure>\n<p>列出远程服务器上所有的可用版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n<p>列出本地已安装的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n<p>切换到某个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 8.1.3</span><br></pre></td></tr></table></figure>\n<p>nvm 的更多用法参见：<a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n<h3 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h3><p>使用 npm 全局安装，一行命令不能再简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置pm2\"><a href=\"#配置pm2\" class=\"headerlink\" title=\"配置pm2\"></a>配置pm2</h3><p>如果你的服务入口文件为 app.js，在当前项目目录下启动pm2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --watch</span><br></pre></td></tr></table></figure>\n<p>这里用了 –watch 参数，意味着当你的 express 应用代码发生变化时，pm2 会帮你自动重启服务，多贴心。不过如果不经常改动，最好省去这个参数。关于 pm2 的其他命令可以查看<a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\" target=\"_blank\" rel=\"noopener\">PM2实用入门指南</a>。</p>\n<h4 id=\"shell脚本启动多个服务\"><a href=\"#shell脚本启动多个服务\" class=\"headerlink\" title=\"shell脚本启动多个服务\"></a>shell脚本启动多个服务</h4><p>我们可以通过shell脚本控制多个服务的同时开启，比如新建一个bootstrap.sh文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">CURRENT\\_DIR=&quot;$(cd -P &quot;$(dirname &quot;$&#123;BASH\\_SOURCE\\[0\\]&#125;&quot;)&quot; &amp;&amp; pwd)&quot;</span><br><span class=\"line\">cd $CURRENT_DIR</span><br><span class=\"line\">. ~/.nvm/nvm.sh</span><br><span class=\"line\">nvm use v8.1</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">pm2 start app.json</span><br></pre></td></tr></table></figure>\n<p>而 app.json 中可以填入多个 node 服务的相关信息，名称、端口、log 信息等等，这种玩法苏南大叔讲的很详细了，可以移步：<a href=\"https://newsn.net/say/node-pm2-start.html\" target=\"_blank\" rel=\"noopener\">pm2 start命令进阶详解</a></p>\n<h2 id=\"配置SSL证书\"><a href=\"#配置SSL证书\" class=\"headerlink\" title=\"配置SSL证书\"></a>配置SSL证书</h2><p>接下来就是配置 SSL 证书的环节了，这里我们依然可以选择 Let’s entrypt 的证书，同时利用 certbot 工具可以节省很多麻烦，如果你配置过顶级域名的 SSL 证书（如果没有配置过，可以参考我的另一篇文章：<a href=\"/20180416/website-configuration-https.html\">网站配置HTTPS踩坑记</a>进行配置），可以进入之前已经生成好的 certbot-auto 目录，然后执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot-auto --apache --duplicate</span><br></pre></td></tr></table></figure>\n<p>当你遇到以下信息时，建议单独选择你没有进行配置过 HTTPS 的域名，这样就不会覆盖掉原来申请过的证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\"></span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\"></span><br><span class=\"line\">1: merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">2: api.merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\"></span><br><span class=\"line\">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\"></span><br><span class=\"line\">blank to select all options shown (Enter &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，重启服务就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Have Fun！</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-install-nodejs-npm/\" target=\"_blank\" rel=\"noopener\">centos用 yum 方式安装 nodejs 和 npm</a></p>\n</li>\n<li><p><a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-add-epel-remi/\" target=\"_blank\" rel=\"noopener\">centos 添加 epel 和 remi 源</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000007135306\" target=\"_blank\" rel=\"noopener\">centos 使用 nvm 安装 nodejs （nvm安装时出错，git 版本太老）</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7 安装 最新版 git</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\" target=\"_blank\" rel=\"noopener\">PM2实用入门指南</a></p>\n</li>\n<li><p><a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n</li>\n</ul>\n","raw":null,"categories":[{"name":"server","path":"api/categories/server.json"}],"tags":[{"name":"apache","path":"api/tags/apache.json"},{"name":"ssl","path":"api/tags/ssl.json"}]},{"title":"网站配置HTTPS踩坑记","slug":"网站配置HTTPS踩坑记","date":"2018-04-16T06:36:36.000Z","updated":"2019-02-02T10:19:58.054Z","comments":true,"path":"api/articles/网站配置HTTPS踩坑记.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_290.png","content":"<p>近两年来 HTTPS 取代 HTTP 已经成为大势所趋。早在 2014 年 Google Chromium 安全团队提议将所有的 HTTP 协议网站标注为不安全。现在，Chrome 浏览器已经开始执行这一标准了。从 Chrome 56 开始，任何网页，如果有输入密码或者信用卡资料的，却没有使用 HTTPS，将被 Chrome 浏览器标识为不安全；逐步的，任何没有使用 HTTPS 协议的网页 Chrome 浏览器都会被标识为”不安全”，或者 “Not Secure”。所以处女座的我打算将 merrier.wang 升级成 HTTPS，以下对升级过程中遇到的问题和坑进行一下总结，如果你也有类似需求，希望这篇文章能够帮到你一二~</p>\n<h2 id=\"SSL证书选择\"><a href=\"#SSL证书选择\" class=\"headerlink\" title=\"SSL证书选择\"></a>SSL证书选择</h2><p>1、对于国内用户来说，可以使用与百度云、腾讯云、阿里云合作的赛门铁克签署的证书，一年免费，申请和使用都很方便。 （<strong>不过我一开始用腾讯云的免费证书，发现chrome浏览器还是标记不安全，所以我就放弃用国内的证书- -</strong>） 2、自从 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 免费签发证书后，SSL 证书的价格就开始平民化了，有不少免费和收费的 SSL 可以选择。Let’s Encrypt 的证书虽然只有90的天，不过自动续期也很方便，对于小站来说，是很不错的选择。而我使用的就是 Lets Encrypt 颁发的证书，下面就主要记录一下申请证书，配置证书到 apache，以及自动续期的实现步骤，供有兴趣的童鞋参考。</p>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><p>Certbot 是一个简单易用的 SSL 证书部署工具，由 EFF 开发，前身即 Let’s Encrypt 官方（Python）客户端。简单来说，certbot 就是一个简化 Let’s Encrypt 部署，和管理 Let’s Encrypt 证书的工具。所以我们可以通过 Certbot 非常方便的生成证书并借助脚本实现自动续费。 首先来到 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot官网</a>，在下面的蓝色箭头处选择操作系统和服务器型号：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_290.png\" alt=\"\"><br></div>\n\n<p>以我的阿里云 ECS 举例，操作系统是 CentOS 6，服务器是 Apache，选择完之后页面下方会出现指引；按照其指引，我们首先需要安装 certbot-auto，在你想要安装的目录（这个目录最好是一个简单好找的目录，比如 <code>/etc/httpd/conf</code>，因为后面还要用到）下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure>\n<p>然后我们通过certbot获取证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./path/to/certbot-auto --apache</span><br></pre></td></tr></table></figure>\n<p>期间会让你填一些自己的信息，比如个人邮箱等等，按照自己的实际情况填写即可，然后过程中可能会遇到下面这条信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class=\"line\">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class=\"line\">new sites, or if you&apos;re confident your site works on HTTPS. You can undo this</span><br><span class=\"line\">change by editing your web server&apos;s configuration.</span><br></pre></td></tr></table></figure>\n<p>这里我强烈建议选择第二个 Redirect 选项，因为这样 Certbot 会对 apache 配置文件进行修改，当用户访问 HTTP 链接时，强制重定向到 HTTPS 链接，就不需要我们自己进行修改了。 如果一切顺利的话，当我们看到下面的提示信息时，就证明我们的证书已经申请成功并配置成功了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">Congratulations! You have successfully enabled https://merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">You should test your configuration at:</span><br><span class=\"line\">https://www.ssllabs.com/ssltest/analyze.html?d=merrier.wang</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动续费\"><a href=\"#自动续费\" class=\"headerlink\" title=\"自动续费\"></a>自动续费</h2><p>此时我们可以访问一下 HTTPS 的链接，看看证书是否生效，如果不生效，可以尝试一下重启 apache：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Let’s Encrypt 的证书，默认的有效期是 90 天，不过官方推荐每 60 天续期。到期之后，我们需要用命令来为证书续期，不过我们是懒人，这种体力活还是交给机器来完成比较合适。所以，我们可以用 Linux 的 cron job 来完成这类的任务。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果服务器上没有安装 crontabs，需要手动安装，centos 系统建议通过 yum 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install crontabs</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start</span><br><span class=\"line\">chkconfig crond start</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加新的任务\"><a href=\"#添加新的任务\" class=\"headerlink\" title=\"添加新的任务\"></a>添加新的任务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab \\[-u user\\] -e</span><br></pre></td></tr></table></figure>\n<p>其中：-u user：用来设定某个用户的 crontab 服务，例如，“-u ixdba”表示设定 ixdba 用户的 crontab 服务，此参数一般由 root 用户来运行。即执行 <code>crontab -u root -e</code> 来添加任务，此时会打开一个新的文件，填入以下脚本信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0,12 * * * python -c &apos;import random; import time; time.sleep(random.random() * 3600)&apos; &amp;&amp; ./path/to/certbot-auto renew --post-hook &quot;service httpd restart&quot;</span><br></pre></td></tr></table></figure>\n<p>如果出现 crontab: installing new crontab 就说明我们的脚本已经生效了，自动续费就配置好了。关于更多 crontab 的内容可以<a href=\"https://www.jianshu.com/p/838db0269fd0\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，你可以利用他做更多有意思的事情。如果你不确定自己的定时任务是否设置成功，可以通过执行 <code>crontab -l</code> 进行查看，如果出现上面的那段 python 代码，说明定时任务已经设置成功；有时候可能 crond 服务莫名的挂掉，我们可以通过上面的命令手动启动，同时也可以通过下面的命令手动更新证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/httpd/conf/certbot-auto renew</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wordpress配置https\"><a href=\"#Wordpress配置https\" class=\"headerlink\" title=\"Wordpress配置https\"></a>Wordpress配置https</h2><p>如果你的网站是通过 wordpress 搭建的，除了进行上面的流程之外，还需要进行额外的配置：</p>\n<h3 id=\"修改wordpress后台配置中的地址改为https版本\"><a href=\"#修改wordpress后台配置中的地址改为https版本\" class=\"headerlink\" title=\"修改wordpress后台配置中的地址改为https版本\"></a>修改wordpress后台配置中的地址改为https版本</h3><div align=\"center\"><br><img src=\"/images/hexo_post_291.png\" alt=\"\"><br></div>\n\n<p><strong>注意：一定要保证https和http两种方式都能正常访问网站，才能改这个配置，否则可能导致网站无法访问。</strong>通过上面的设置，绝大部分导航中的链接就由 wordpress 系统会自动改为 HTTPS 版本。</p>\n<h3 id=\"替换正文的内部链接和其他静态资源\"><a href=\"#替换正文的内部链接和其他静态资源\" class=\"headerlink\" title=\"替换正文的内部链接和其他静态资源\"></a>替换正文的内部链接和其他静态资源</h3><p>对于这部分链接需要手工修改，修改的方法有两种：</p>\n<h4 id=\"（1）直接在数据库中更新，更新的sql如下：\"><a href=\"#（1）直接在数据库中更新，更新的sql如下：\" class=\"headerlink\" title=\"（1）直接在数据库中更新，更新的sql如下：\"></a>（1）直接在数据库中更新，更新的sql如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update wp\\_posts set post\\_content = replace(post_content, ‘http://your-website-name/’,‘https://your-website-name/’)</span><br></pre></td></tr></table></figure>\n<p>对于数据库不熟悉的童鞋不推荐这种方法，对数据库错误的更新对网站可能是毁灭性的打击，建议<strong>更新前最好备份数据库</strong>。</p>\n<h4 id=\"（2）利用wordpress提供的api来重写链接\"><a href=\"#（2）利用wordpress提供的api来重写链接\" class=\"headerlink\" title=\"（2）利用wordpress提供的api来重写链接\"></a>（2）利用wordpress提供的api来重写链接</h4><p>在使用的主题（themes）的目录下的 functions.php 加入如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"function\"><span class=\"keyword\">function</span>\\<span class=\"title\">_exists</span><span class=\"params\">(<span class=\"string\">'add\\_theme\\_support'</span>)</span> )<span class=\"title\">add</span>\\<span class=\"title\">_theme_support</span><span class=\"params\">(<span class=\"string\">'post-thumbnails'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'script\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_script\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_script</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'style\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_style\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_style</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法优点是可逆，不会对网站的数据库有什么影响，推荐使用这种方法。 调整完内部链接后，检查整个网站的页面，包括首页，栏目页，内容页，sitemap，页面head部分内容，比如：css，js，canonical 等，是否都转换成了 HTTPS 版本。</p>\n<h2 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h2><h3 id=\"Apache配置文件找不到\"><a href=\"#Apache配置文件找不到\" class=\"headerlink\" title=\"Apache配置文件找不到\"></a>Apache配置文件找不到</h3><p>可能某些童鞋的 apache 配置文件不在 <code>/etc/httpd/conf</code> 目录下，可以通过 find 命令进行查找：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>其中“/”是指在根目录下进行查找，如果你知道在哪个目录下，可以自行修改，节省查找的时间</p>\n<h3 id=\"Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\"><a href=\"#Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\" class=\"headerlink\" title=\"Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration\"></a>Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration</h3><p>不管是在证书申请过程中还是在自己修改配置过程中遇到次报错，一般情况下是因为在 modules 文件夹下并没有 ssl 模块，那就需要自己安装了，我在<a href=\"https://stackoverflow.com/questions/5257974/how-to-install-mod-ssl-for-apache-httpd\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上搜到了解决方案，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mod_ssl</span><br></pre></td></tr></table></figure>\n<p>当我们安装完毕之后，就可以看到 modules 文件夹下多了一个 mod_ssl.so 文件了，此时我们再重启 apache 就应该不报错了。</p>\n<h3 id=\"warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\"><a href=\"#warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\" class=\"headerlink\" title=\"[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down\"></a>[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down</h3><p>出现该警告说明 ssl module 被多处使用，可以用如下命令检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep ssl_module -rI /etc/httpd/*</span><br></pre></td></tr></table></figure>\n<p>此时会出现：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_289.png\" alt=\"\"><br></div>\n\n<p>其中 <code>httpd.bk.conf</code> 是我自己建的备份，所以有两种解决方法：</p>\n<ol>\n<li>httpd.conf 中去掉 <code>LoadModule ssl\\_module modules/mod\\_ssl.so</code>、去掉 <code>Listen 443</code></li>\n<li>直接删除 <code>/etc/httpd/conf.d/ssl.conf</code>，推荐直接删除 ssl.conf</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.watch-life.net/wordpress/wordpress-https-link.html\" target=\"_blank\" rel=\"noopener\">WordPress整站轻松开启HTTPS</a></p>\n<p><a href=\"https://www.jianshu.com/p/909adc612fd4\" target=\"_blank\" rel=\"noopener\">apache服务器添加https（针对ios10 https）</a></p>\n<p><a href=\"https://stringblog.com/%E9%80%9A%E8%BF%87certbot%E9%85%8D%E7%BD%AElets-encrypt%E7%9A%84ssl%EF%BC%88apache%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">通过Certbot配置Let’s Encrypt的SSL（Apache）</a></p>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"},{"name":"HTTP","path":"api/tags/HTTP.json"},{"name":"Wordpress","path":"api/tags/Wordpress.json"}]},{"title":"Promise入门","slug":"Promise入门","date":"2018-02-26T14:14:10.000Z","updated":"2019-02-02T10:19:58.046Z","comments":true,"path":"api/articles/Promise入门.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>幕课网上的视频——<a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a>笔记，Promise 作为 ES6 中最重要的特性之一，对其进行了解和学习是非常有必要的，课程的源码已经上传至<a href=\"https://github.com/merrier/imooc-promise-sample\" target=\"_blank\" rel=\"noopener\">我的github</a>。</p>\n<h2 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h2><h3 id=\"MDN\"><a href=\"#MDN\" class=\"headerlink\" title=\"MDN\"></a>MDN</h3><blockquote>\n<ul>\n<li>The Promise object is used for asynchronous computations.</li>\n<li>A Promise represents a value which may be available now, or in the future, or never.</li>\n</ul>\n</blockquote>\n<h3 id=\"MDN中文\"><a href=\"#MDN中文\" class=\"headerlink\" title=\"MDN中文\"></a>MDN中文</h3><blockquote>\n<ul>\n<li>Promise对象用于异步计算。</li>\n<li>一个Promise表示一个现在、将来或永不可能可用的值。</li>\n</ul>\n</blockquote>\n<h3 id=\"按照用途来解释\"><a href=\"#按照用途来解释\" class=\"headerlink\" title=\"按照用途来解释\"></a>按照用途来解释</h3><ul>\n<li>主要用于异步计算</li>\n<li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。</li>\n<li>可以在对象之间传递和操作Promise，帮助我们处理队列。</li>\n</ul>\n<h2 id=\"回调存在的问题\"><a href=\"#回调存在的问题\" class=\"headerlink\" title=\"回调存在的问题\"></a>回调存在的问题</h2><ol>\n<li>嵌套层次很深，难以维护</li>\n<li>无法正常使用 return 和 throw</li>\n<li>无法正常检索堆栈信息</li>\n<li>多个回调之间难以建立联系</li>\n</ol>\n<h2 id=\"Promise-详解\"><a href=\"#Promise-详解\" class=\"headerlink\" title=\"Promise 详解\"></a>Promise 详解</h2><ul>\n<li>Promise 是一个代理对象，它和原先要进行的操作并无关系</li>\n<li>它通过引入一个回调，避免更多的回调</li>\n</ul>\n<h3 id=\"Promise-有-3-个状态\"><a href=\"#Promise-有-3-个状态\" class=\"headerlink\" title=\"Promise 有 3 个状态\"></a>Promise 有 3 个状态</h3><ol>\n<li>pending[待定]——初始状态</li>\n<li>fulfilled[实现\\——操作成功</li>\n<li>rejected[被否决]——操作失败</li>\n</ol>\n<p>当 Promise 的状态发生改变，就会触发 .then() 里的响应函数处理后续步骤；Promise 状态一经改变，不会再变；只有在连续多个回调顺序执行的时候，Promise才会显示出其威力</p>\n<h3 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\".then()\"></a>.then()</h3><ul>\n<li>.then() 接受两个函数作为参数，分别代表 fulfilled 和 rejected</li>\n<li>.then() 返回一个新的 Promise 实例，所以它可以链式调用</li>\n<li>当前面的 Promise 状态改变时，.then() 根据其最终状态，选择特定的状态响应函数执行</li>\n<li>状态响应函数可以返回新的 Promise，或其它值</li>\n<li>如果返回新的 Promise，那么下一级 .then() 会在新的 Promise 状态改变之后执行</li>\n<li>如果返回其它任何值，则会立刻执行下一级 .then()</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>Promise 会自动捕获内部异常，并交给 rejected 响应函数处理 最好是在语句的最后通过 catch 捕获错误，因为 catch 可以捕获 resolve 回调中发生的错误，而 reject 回调无法捕获；catch 也会返回一个 Promise 实例，并且它返回的 Promise 实例如果没有错误的话也是 fulfilled 状态，所以 catch() 后面的 .then() 也都会触发，但是 catch() 后面的 .catch() 不会触发（<strong>如果在第一个catch()中没有抛出错误</strong>）</p>\n<p><strong>强烈建议在所有队列最后都加上.catch()，以避免漏掉错误处理造成意想不到的问题：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething()</span><br><span class=\"line\">  .doAnotherThing()</span><br><span class=\"line\">  .doMoreThing()</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现队列\"><a href=\"#实现队列\" class=\"headerlink\" title=\"实现队列\"></a>实现队列</h3><p>有时候我们不希望所有动作一起发生，而是按照一定顺序，逐个进行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = doSomething();</span><br><span class=\"line\">promise = promise.then(doSomethingElse);</span><br><span class=\"line\">promise = promise.then(doSomethingElse2);</span><br><span class=\"line\">promise = promise.then(doSomethingElse3);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-forEach\"><a href=\"#使用-forEach\" class=\"headerlink\" title=\"使用.forEach()\"></a>使用.forEach()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">things</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">  things.forEach( <span class=\"function\"><span class=\"params\">thing</span> =&gt;</span> &#123;</span><br><span class=\"line\">    promise = promise.then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        doThing(thing, () =&gt; &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue(\\[<span class=\"string\">'lots'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'things'</span>, ....\\]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-reduce\"><a href=\"#使用-reduce\" class=\"headerlink\" title=\"使用.reduce()\"></a>使用.reduce()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">things</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> things.reduce( <span class=\"function\">(<span class=\"params\">promise, thing</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promise = promise.then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        doThing(thing, () =&gt; &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue(\\[<span class=\"string\">'lots'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'things'</span>, ....\\]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise常用函数\"><a href=\"#Promise常用函数\" class=\"headerlink\" title=\"Promise常用函数\"></a>Promise常用函数</h2><h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>返回一个 fulfilled 的 Promise 实例，或原始 Promise 实例</p>\n<ul>\n<li>参数为空，返回一个状态为 fulfilled 的 Promise 实例</li>\n<li>参数是一个跟 Promise 无关的值，同上，不过 fulfilled 响应函数会得到这个参数</li>\n<li>参数为 Promise 实例，则返回该实例，不做任何修改</li>\n<li>参数为 thenable（有 then 方法），立刻执行它的 .then()</li>\n</ul>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>返回一个 rejected 的 Promise 实例</p>\n<ul>\n<li><strong>Promise.reject()不认thenable</strong></li>\n<li>其他和 Promise.resolve() 类似</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all(\\[p1, p2, p3, ...\\])</code> 用于将多个 Promise 实例包装成一个新的 Promise 实例 当所有子 Promise 都完成，该 Promise 完成，返回值是<strong>全部值的数组</strong>；有任何一个失败，该 Promise 失败，返回值是<strong>第一个失败的子Promise的结果</strong>，最常见的是和 .map() 连用</p>\n<p>###Promise.race()</p>\n<p>类似 Promise.all() ，区别在于它有任意一个完成就算完成。</p>\n<h3 id=\"常见用法：\"><a href=\"#常见用法：\" class=\"headerlink\" title=\"常见用法：\"></a>常见用法：</h3><ul>\n<li>把异步操作和定时器放在一起</li>\n<li>如果定时器先触发，就认为超时，告知用户</li>\n</ul>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>ES2017 新增运算符，新的语言元素</p>\n<ul>\n<li>赋予 JavaScript 以顺序手法编写异步脚本的能力！</li>\n<li>既保留异步运算的无阻赛特性，还继续使用同步写法。</li>\n<li>还能正常使用 return/try/catch</li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"ES6","path":"api/tags/ES6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"慕课网","path":"api/tags/慕课网.json"}]},{"title":"慕课网视频评分&推荐","slug":"慕课网视频评分&推荐","date":"2018-02-19T02:11:11.000Z","updated":"2019-02-02T10:19:58.050Z","comments":true,"path":"api/articles/慕课网视频评分&推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总有童鞋问我<a href=\"https://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">慕课网</a>上面有哪些视频比较好，我就索性写一篇文章总结一下我看过的慕课网上面的优秀的视频，绝大部分都是前端相关的，希望能够提升你的效率，节省时间。下面我会对这些视频从以下几个方面进行评分（单纯个人评分，不喜勿喷- -）：</p>\n<ul>\n<li><strong>难度系数</strong>：视频所讲内容的难度</li>\n<li><strong>实战系数</strong>：视频所讲内容的实际应用系数</li>\n<li><strong>版本系数</strong>：视频所讲内容中涉及到的框架/插件的版本是否是最新的</li>\n<li><strong>综合评分</strong>：综合评价</li>\n</ul>\n<p>推荐大家用 1.75 倍速播放，这样可以节省很多时间，同时也能听清- -</p>\n<h2 id=\"前端工具\"><a href=\"#前端工具\" class=\"headerlink\" title=\"前端工具\"></a>前端工具</h2><h3 id=\"前端内容的自动化构建\"><a href=\"#前端内容的自动化构建\" class=\"headerlink\" title=\"前端内容的自动化构建\"></a><a href=\"https://www.imooc.com/learn/922\" target=\"_blank\" rel=\"noopener\">前端内容的自动化构建</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程分为三个部分，第一部分讲解什么是构建，为什么需要自动化构建，后面两部分分别讲解如何使用 Gulp 进行 JavaScript 和 CSS 的构建。所讲内容比较简单，而且自动化构建在实际项目中经常会用到，不过 webpack 版本比较低，需要结合评论进行学习。。</p>\n<h3 id=\"webpack深入与实战\"><a href=\"#webpack深入与实战\" class=\"headerlink\" title=\"webpack深入与实战\"></a><a href=\"https://www.imooc.com/learn/802\" target=\"_blank\" rel=\"noopener\">webpack深入与实战</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍了如何在项目中使用 webpack 打包文件，处理各种资源，以及配置开发环境，上线环境等，通过实际的例子来讲解 webpack 的使用方法，带你探索 webpack 强大的功能。可以说是很全面了，作者讲解的也比较详细，想初步了解 webpack 如何使用的童鞋可以选择看一下该视频。</p>\n<h3 id=\"前端实时可视化开发工具体验\"><a href=\"#前端实时可视化开发工具体验\" class=\"headerlink\" title=\"前端实时可视化开发工具体验\"></a><a href=\"https://www.imooc.com/learn/718\" target=\"_blank\" rel=\"noopener\">前端实时可视化开发工具体验</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>前端开发中，我们常常需要频繁的修改 html，css，js，然后刷新页面，看效果，再调整，再刷新。该课程使用 liveStyle，liveReload，browserSync 工具实现修改代码后，立即体现效果的功能，使用可见即可得的开发模式，极大的提高前端开发效率。实时可视化在开发环境应用的比较多，会很大程度地提高工作效率，感兴趣的童鞋可以再自行搜索 hotreload，这样结合本视频观看食用效果更佳</p>\n<h3 id=\"前端性能优化-基础知识认知\"><a href=\"#前端性能优化-基础知识认知\" class=\"headerlink\" title=\"前端性能优化-基础知识认知\"></a><a href=\"https://www.imooc.com/learn/580\" target=\"_blank\" rel=\"noopener\">前端性能优化-基础知识认知</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程从前端优化目的，简单方法、分类开始，到如何优化，优化过程中的常见错误，业内公认的但是不适应所有方案。我们还可从这个课程中学习到当我们访问一个站点的时候，我们究竟做了什么以及怎么样才叫优化成功。性能优化是一个老生常谈的问题，如果你对该问题有一定的基础认知，想再深入了解相关知识的话，该课程你不容错过</p>\n<h2 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h2><h3 id=\"Hello，移动WEB\"><a href=\"#Hello，移动WEB\" class=\"headerlink\" title=\"Hello，移动WEB\"></a><a href=\"https://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">Hello，移动WEB</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍移动 web 的开发基础，高效的排版布局，常见的移动 web 问题，终端触摸交互，各种 bug 坑如何解决等多方面。虽然视频比较短，但是干货多多，对于移动端的适配布局这类问题进行了很详细的讲解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Promise入门\"><a href=\"#Promise入门\" class=\"headerlink\" title=\"Promise入门\"></a><a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>Promise 是 ES6 中最重要的特性之一，该课程为我们讲解了为什么会有 Promise，以及 Promise 的常见用法和注意事项，通过实际代码进行讲解清晰易懂，适合前端中级水平开发者，我对该课程进行了总结，笔记<a href=\"/20180226/introduction-to-promise.html\">在这里</a>可以查看得到。</p>\n<h3 id=\"ajax跨域完全讲解\"><a href=\"#ajax跨域完全讲解\" class=\"headerlink\" title=\"ajax跨域完全讲解\"></a><a href=\"https://www.imooc.com/learn/947\" target=\"_blank\" rel=\"noopener\">ajax跨域完全讲解</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>跨域是前端领域中经常遇到的问题，尤其是各种 CDN 服务兴起之后，而究竟什么情况下跨域，如何解决跨域问题更是笔试或面试时经常被问到的问题，该视频教程详细讲解了 jsonp 的工作机制，http 协议如何支持跨域，以及 http 服务器 nginx 和 apache 的 2 种不同解决思路，让大家知其然并知其所以然，是非常不错的跨域入门讲解课程</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS深入理解系列\"><a href=\"#CSS深入理解系列\" class=\"headerlink\" title=\"CSS深入理解系列\"></a><a href=\"https://www.imooc.com/search/course?words=css%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E5%BC%A0%E9%91%AB%E6%97%AD\" target=\"_blank\" rel=\"noopener\">CSS深入理解系列</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>该系列视频为张鑫旭老师对 CSS 相关属性的讲解，包括 margin、padding、position、z-index 等等基础属性，适合具备一定 CSS 基础知识的童鞋，张鑫旭老师的讲课风格很独特，也不知道是否符合你的口味，不过我是很喜欢啦~而且张鑫旭老师对于这些属性的讲解很深入，在实际项目中应用的很多，毕竟前端工程师一年写的 CSS 代码可以绕地球三圈啊（我对该系列视频的讲解进行了总结，在系列专栏中的<a href=\"/20170421/css-in-depth-understanding-series.html\">CSS深入理解系列</a>中可以看到）</p>\n<h3 id=\"如何用CSS进行网页布局\"><a href=\"#如何用CSS进行网页布局\" class=\"headerlink\" title=\"如何用CSS进行网页布局\"></a><a href=\"https://www.imooc.com/learn/57\" target=\"_blank\" rel=\"noopener\">如何用CSS进行网页布局</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程教你怎么制作一列布局、二列布局、三列布局当然还有最通用的混合布局，而且你还可以选择让它固定还是自适应。用 CSS 重新规划你的网页，让你的网页从此更美观、更友好。难度系数很低，而布局在实际项目中是很基本也是很重要的知识点</p>\n<h3 id=\"分页页码制作\"><a href=\"#分页页码制作\" class=\"headerlink\" title=\"分页页码制作\"></a><a href=\"https://www.imooc.com/learn/15\" target=\"_blank\" rel=\"noopener\">分页页码制作</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★☆☆☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>通过本课程的学习，我们可以学习到利用 HTML、CSS 样式技术制作出分页页码的效果。包括最简单的直角分页页码效果，修复行内元素之间的间隔 bug 问题分析，代码整理，为分页页码插入小图标。虽然一般不需要我们自己制作分页页码，但是如果你想自己写框架或者对这类知识比较好奇的话，该视频能够充分解答你的疑惑，最为关键的是<strong>提供源码</strong>啊~</p>\n<h2 id=\"JavaScript-1\"><a href=\"#JavaScript-1\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Hybrid设计\"><a href=\"#Hybrid设计\" class=\"headerlink\" title=\"Hybrid设计\"></a><a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程首先会告诉大家什么是 Hybrid，Hybrid 有什么特点，也会告诉大家业内有哪些常见的 Hybrid 应用以及 Hybrid 合理的应用场景。 然后，课程会简单介绍一个 Hybrid 架构的方方面面，包括 Hybrid 的发展，比如超级 Hybrid 方案 React Native 以及 Weex 学习该课程，大家会知道 Hybrid 中 H5 与 Native 如何交互，并且对 Hybrid 体验增强和 Hybrid 离线包有一些认识，是大家做混合 APP 的必备良药。</p>\n<h3 id=\"zepto设计和源码分析\"><a href=\"#zepto设计和源码分析\" class=\"headerlink\" title=\"zepto设计和源码分析\"></a><a href=\"https://www.imooc.com/learn/745\" target=\"_blank\" rel=\"noopener\">zepto设计和源码分析</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★☆☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>当熟练使用 zepto 的 API 之后，也应该解读一下 zepto 的源码，了解一下 zepto 的设计原理。该教程深入浅出的介绍了 zepto 最核心的设计原理，看完之后即能轻松解读 zepto 所有源码。就像 TJ 大神一样，有时候看别人写的代码会有不同寻常的收获</p>\n<h3 id=\"Web安全-XSS\"><a href=\"#Web安全-XSS\" class=\"headerlink\" title=\"Web安全-XSS\"></a><a href=\"https://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程从 Web 安全 XSS 的定义开始讲起，到深入剖析 XSS 攻击的原理和流程，了解常见 XSS 攻击的危害。同时通过项目实战针对性的分析如何应对 XSS 攻击做到安全的 XSS 防御措施。XSS 是最常见的一种 web 攻击，了解一些相关知识百利无一害= =</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"},{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"教程","path":"api/tags/教程.json"}]}]}