{"total":120,"pageSize":10,"pageCount":12,"data":[{"title":"网罗天下好教程","slug":"网罗天下好教程","date":"2017-08-27T07:56:15.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/网罗天下好教程.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总结了一下我看过的好的教程，多数为系列文章，鉴于如今信息鱼龙混杂，这篇文章可以省去很多找好教程的时间。</p>\n<h2 id=\"入门级\"><a href=\"#入门级\" class=\"headerlink\" title=\"入门级\"></a>入门级</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><h4 id=\"手把手教你使用Hexo-Github-Pages搭建个人独立博客\"><a href=\"#手把手教你使用Hexo-Github-Pages搭建个人独立博客\" class=\"headerlink\" title=\"手把手教你使用Hexo + Github Pages搭建个人独立博客\"></a><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"noopener\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></h4><p>很完整很详细的 Hexo 搭建个人博客教程</p>\n<h4 id=\"从0到1搭建和部署个人博客\"><a href=\"#从0到1搭建和部署个人博客\" class=\"headerlink\" title=\"从0到1搭建和部署个人博客\"></a><a href=\"https://juejin.im/post/5ae170e1f265da0b7527d0dc\" target=\"_blank\" rel=\"noopener\">从0到1搭建和部署个人博客</a></h4><p>此教程会教你从 0 到 1 搭建一个完整的博客，包括前端展示页、后台管理系统、后端接口及接口文档、服务端部署整个完整流程。技术栈是 vue+express+mongodb</p>\n<h4 id=\"Hexo-主题开发指南\"><a href=\"#Hexo-主题开发指南\" class=\"headerlink\" title=\"Hexo 主题开发指南\"></a><a href=\"http://chensd.com/2016-06/hexo-theme-guide.html\" target=\"_blank\" rel=\"noopener\">Hexo 主题开发指南</a></h4><p>该文章包含的内容如下：</p>\n<ul>\n<li>主题的基本结构</li>\n<li>常见问题</li>\n<li>常用页面的实现</li>\n<li>基本工具</li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"CSS布局说——可能是最全的\"><a href=\"#CSS布局说——可能是最全的\" class=\"headerlink\" title=\"CSS布局说——可能是最全的\"></a><a href=\"https://segmentfault.com/a/1190000011358507\" target=\"_blank\" rel=\"noopener\">CSS布局说——可能是最全的</a></h4><p>其实很多时候，我们都会在布局上花费很多时间，尤其是遇到一个比较“严格”的设计师的时候，而 css 虽然语法简单（css 有语法？），但是真正用起来会有很多学问，而布局这种问题是老生常谈的问题了，这篇来自 SegmentFault的文章对 css 中的布局的相关知识进行了总结，满满的干货。</p>\n<h4 id=\"CSS-中重要的层叠概念\"><a href=\"#CSS-中重要的层叠概念\" class=\"headerlink\" title=\"CSS 中重要的层叠概念\"></a><a href=\"https://juejin.im/post/5ba4efe36fb9a05cf52ac192\" target=\"_blank\" rel=\"noopener\">CSS 中重要的层叠概念</a></h4><p>作者参考了很多关于层叠概念的文章，对这一经常迷糊的概念进行了全面总结，讲解的非常清晰全面，是我看过的讲层叠概念最好的文章，十分值得一看！</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><h4 id=\"JavaScript-标准参考教程（alpha）\"><a href=\"#JavaScript-标准参考教程（alpha）\" class=\"headerlink\" title=\"JavaScript 标准参考教程（alpha）\"></a><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程（alpha）</a></h4><p>阮一峰的 JS 教程，内容很多，而且讲解的很详细，很透彻，是一篇不错的 JS 入门教程。</p>\n<h4 id=\"如何定义一个高逼格的原生JS插件\"><a href=\"#如何定义一个高逼格的原生JS插件\" class=\"headerlink\" title=\"如何定义一个高逼格的原生JS插件\"></a><a href=\"https://juejin.im/entry/5ae033d86fb9a07ac76e7bcc\" target=\"_blank\" rel=\"noopener\">如何定义一个高逼格的原生JS插件</a></h4><p>作者通过很多实例介绍了如何定义自己的 JS 插件，包含了很多方面和技巧</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><h4 id=\"七天学会node-js\"><a href=\"#七天学会node-js\" class=\"headerlink\" title=\"七天学会node.js\"></a><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">七天学会node.js</a></h4><p>这是一篇比较详细的 node.js 入门教程，但是我确实没有七天就学会。。</p>\n<h4 id=\"node-js之fs模块\"><a href=\"#node-js之fs模块\" class=\"headerlink\" title=\"node.js之fs模块\"></a><a href=\"https://www.jianshu.com/p/5683c8a93511\" target=\"_blank\" rel=\"noopener\">node.js之fs模块</a></h4><p>fs 模块是 node.js 中一个很重要的模块，其提供了文件相关操作，包括打开、读取、写入和追加等等操作</p>\n<h4 id=\"Express-4-入门中文手册\"><a href=\"#Express-4-入门中文手册\" class=\"headerlink\" title=\"Express 4 入门中文手册\"></a><a href=\"https://www.zybuluo.com/bajian/note/444152\" target=\"_blank\" rel=\"noopener\">Express 4 入门中文手册</a></h4><p>最近在做 node  相关的项目，express 之前接触过，但是基本上一点印象都没有留下。。然后 express 的英文文档从布局和样式上就给人一种不想看的感觉，同时我的英语水平也很差，所以就在网上找了很久的中文文档，最终追根溯源找到了上面这篇，无法评价好坏，因为有就不错了嘛~</p>\n<h4 id=\"Redux中文文档\"><a href=\"#Redux中文文档\" class=\"headerlink\" title=\"Redux中文文档\"></a><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux中文文档</a></h4><p>在线 gitbook，有很多实例，是一个很不过的 redux 入门文档（我就是通过看这个文档入门的~）</p>\n<h4 id=\"Redux从设计到源码\"><a href=\"#Redux从设计到源码\" class=\"headerlink\" title=\"Redux从设计到源码\"></a><a href=\"https://tech.meituan.com/redux-design-code.html\" target=\"_blank\" rel=\"noopener\">Redux从设计到源码</a></h4><p>这也是一篇 Redux 入门教程，虽然比不上上面的教程，但是这篇文章里面的某些图片画的还是相当不错的，可以当做补充资料</p>\n<h4 id=\"react-starter-kit-入门（翻译）\"><a href=\"#react-starter-kit-入门（翻译）\" class=\"headerlink\" title=\"react-starter-kit 入门（翻译）\"></a><a href=\"http://www.jianshu.com/p/6c522c9a20cb\" target=\"_blank\" rel=\"noopener\">react-starter-kit 入门（翻译）</a></h4><p>starter-kit 的教程实在太少了，只找到了这一篇中文的，就先凑合看吧，具体写的好不好可以先睹为快，因为篇幅比较短，而且 starter-kit 本来就是一个脚手架，还是需要了解其他技术栈才能真正看懂</p>\n<h4 id=\"React-Router官方教程\"><a href=\"#React-Router官方教程\" class=\"headerlink\" title=\"React Router官方教程\"></a><a href=\"https://github.com/reactjs/react-router-tutorial\" target=\"_blank\" rel=\"noopener\">React Router官方教程</a></h4><p>官方给出的 react-router 入门文档，通过14个实例一步步进行讲解，由浅入深，由易到难，只需要一个多小时就可以跟着文档写完 14 个实例，同时在写的过程中还可以学习到 express 和 webpack 的相关知识。</p>\n<h4 id=\"Redux作者出的教学视频\"><a href=\"#Redux作者出的教学视频\" class=\"headerlink\" title=\"Redux作者出的教学视频\"></a><a href=\"https://egghead.io/instructors/dan-abramov\" target=\"_blank\" rel=\"noopener\">Redux作者出的教学视频</a></h4><p>Redux 作者自己在 egghead.io 上面上传了教学视频，墙裂推荐，不过全程英文讲解，可能会有点费劲- -：</p>\n<ul>\n<li>基础篇：<a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"noopener\">Getting Started with Redux</a></li>\n<li>进阶篇：<a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" target=\"_blank\" rel=\"noopener\">Building React Applications with Idiomatic Redux</a></li>\n</ul>\n<h4 id=\"从零开始学-ReactJS（ReactJS-101）\"><a href=\"#从零开始学-ReactJS（ReactJS-101）\" class=\"headerlink\" title=\"从零开始学 ReactJS（ReactJS 101）\"></a><a href=\"https://github.com/carlleton/reactjs101/tree/zh-CN\" target=\"_blank\" rel=\"noopener\">从零开始学 ReactJS（ReactJS 101）</a></h4><p>从零开始学 ReactJS（ReactJS 101）是一本希望让初学者一看就懂的 ReactJS 中文入门教学书，由浅入深学习 ReactJS 生态系 (Flux, Redux, React Router, ImmutableJS, React Native, Relay/GraphQL etc.)。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h4 id=\"入门Webpack，看这篇就够了\"><a href=\"#入门Webpack，看这篇就够了\" class=\"headerlink\" title=\"入门Webpack，看这篇就够了\"></a><a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></h4><p>进度条说明了一切，作者通过对比 gulp 和 webpack，详细的介绍了 webpack 的优缺点，同时还介绍了一些其他工具的用法，虽然篇幅较长，但是大部分都是代码，可以跟着作者自己敲一遍，相信敲完之后的你可以自信的说 webpack 我终(hai)于(shi)会(bu)了(hui)</p>\n<h4 id=\"webpack-2-打包实战\"><a href=\"#webpack-2-打包实战\" class=\"headerlink\" title=\"webpack 2 打包实战\"></a><a href=\"https://github.com/fenivana/webpack-in-action/\" target=\"_blank\" rel=\"noopener\">webpack 2 打包实战</a></h4><p>这是一篇对于 webpack 2 的讲解，作者通过追根溯源向我们阐述了为什么需要 webpack，作为历史的产物， webpack 具备哪些优势，文章篇幅较长，不过弥补了 webpack 官方文档写的很差的缺陷，是一篇比较不错的 webpack 入门文档</p>\n<h4 id=\"令人困惑的webpack之entry\"><a href=\"#令人困惑的webpack之entry\" class=\"headerlink\" title=\"令人困惑的webpack之entry\"></a><a href=\"https://segmentfault.com/a/1190000008288240\" target=\"_blank\" rel=\"noopener\">令人困惑的webpack之entry</a></h4><p>鉴于 webpack 的文档实在太差，而 webpack 本身又比较复杂，各种 loader，各种 plugin，各种配置，所以刚接触 webpack 的童鞋会感到很头疼，而 entry 作为 webpack 中最基础的配置，可以作为入门 webpack 的关键点，这篇文章非常详细的介绍了 entry 配置项的作用以及参数含义</p>\n<h4 id=\"用grunt搭建自动化的web前端开发环境-完整教程\"><a href=\"#用grunt搭建自动化的web前端开发环境-完整教程\" class=\"headerlink\" title=\"用grunt搭建自动化的web前端开发环境-完整教程\"></a><a href=\"http://developer.51cto.com/art/201506/479127.htm\" target=\"_blank\" rel=\"noopener\">用grunt搭建自动化的web前端开发环境-完整教程</a></h4><p>jQuery 在使用 grunt，bootstrap 在使用 grunt，百度 UEditor 在使用 grunt，你没有理由不学、不用！</p>\n<h4 id=\"Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\"><a href=\"#Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\" class=\"headerlink\" title=\"Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！\"></a><a href=\"http://www.iplaysoft.com/sublimetext.html\" target=\"_blank\" rel=\"noopener\">Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！</a></h4><p>这是一篇比较全的 sublime 介绍文章，作者介绍了很多 sublime 的特性和优点，同时还推荐了一些插件和使用技巧。</p>\n<h4 id=\"浅入浅出webpack\"><a href=\"#浅入浅出webpack\" class=\"headerlink\" title=\"浅入浅出webpack\"></a><a href=\"https://juejin.im/post/5afa9cd0f265da0b981b9af9\" target=\"_blank\" rel=\"noopener\">浅入浅出webpack</a></h4><p>webpack 作为一个非常流行的构建工具，其文档和使用一直为人所诟病，而当我真正的自己对 webpack 进行了了解和实战之后，发现其实 webpack 并不是那么难理解，而很多童鞋其实是因为 webpack 的功能太强大而对其产生了畏惧，这篇文章对这部分童鞋来说是一篇很好的教程，从基本使用的角度对 webpack 进行了介绍和讲解，除此之外还介绍一些高阶应用，如 TreeShaking、构建 PWA 应用等</p>\n<h4 id=\"iOS开发工具——网络封包分析工具Charles\"><a href=\"#iOS开发工具——网络封包分析工具Charles\" class=\"headerlink\" title=\"iOS开发工具——网络封包分析工具Charles\"></a><a href=\"http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles\" target=\"_blank\" rel=\"noopener\">iOS开发工具——网络封包分析工具Charles</a></h4><p><a href=\"http://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a> 是在 Mac 下常用的截取网络封包的工具。Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。作者在该教程中介绍了安装 Charles、安装SSL证书、将Charles设置成系统代理、过滤网络请求、截取 iPhone 上的网络封包、截取 SSL 信息、模拟慢速网络、修改网络请求内容等内容。</p>\n<h4 id=\"webpack-教程资源收集\"><a href=\"#webpack-教程资源收集\" class=\"headerlink\" title=\"webpack 教程资源收集\"></a><a href=\"https://github.com/kraaas/webpack-tutorial-collection\" target=\"_blank\" rel=\"noopener\">webpack 教程资源收集</a></h4><p>作者收集总结了关于 webpack 的各种教程，大概共有 50 篇文章。</p>\n<h4 id=\"运营小白带你5分钟入门谷歌分析-GA\"><a href=\"#运营小白带你5分钟入门谷歌分析-GA\" class=\"headerlink\" title=\"运营小白带你5分钟入门谷歌分析(GA)\"></a><a href=\"https://mp.weixin.qq.com/s/oJv0cOl71VfUW_Q2RUzChA\" target=\"_blank\" rel=\"noopener\">运营小白带你5分钟入门谷歌分析(GA)</a></h4><p>主要通过截图的方式简单介绍了如何使用 GA 进行数据分析，以及 GA 都有哪些功能。</p>\n<h4 id=\"全网最贴心的webpack4系列中文教程和配套代码\"><a href=\"#全网最贴心的webpack4系列中文教程和配套代码\" class=\"headerlink\" title=\"全网最贴心的webpack4系列中文教程和配套代码\"></a><a href=\"https://github.com/dongyuanxin/webpack-demos\" target=\"_blank\" rel=\"noopener\">全网最贴心的webpack4系列中文教程和配套代码</a></h4><p>作者花费了 3 个多月整理了这份教程，一共分成 16 节，每节都有讲解，并且准备了配套代码。</p>\n<h3 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h3><h4 id=\"同构-Isomorphic-web-是什么鬼？\"><a href=\"#同构-Isomorphic-web-是什么鬼？\" class=\"headerlink\" title=\"同构(Isomorphic) web 是什么鬼？\"></a><a href=\"http://www.jianshu.com/p/5ce23647e7e3\" target=\"_blank\" rel=\"noopener\">同构(Isomorphic) web 是什么鬼？</a></h4><p>同构这个概念最近比较火，相比 SPA，同构会有其独特的优势，作者用非常简短的语言介绍了同构产生的背景和如何将自己的网站改造为同构 web。</p>\n<h4 id=\"再不懂区块链，你就OUT了！\"><a href=\"#再不懂区块链，你就OUT了！\" class=\"headerlink\" title=\"再不懂区块链，你就OUT了！\"></a><a href=\"http://jingyan.baidu.com/zt/qukuailian/index.html\" target=\"_blank\" rel=\"noopener\">再不懂区块链，你就OUT了！</a></h4><p>区块链从 15 年到 17 年，但是你却任对区块链一知半解，百度经验联合火币网打造讲解区块链的系列小动画《区块链100问》 ，将抽象的区块链概念转化为100集轻松易懂的 1 分钟小动画，每集学懂一个知识点~</p>\n<h4 id=\"快乐的Linux命名行\"><a href=\"#快乐的Linux命名行\" class=\"headerlink\" title=\"快乐的Linux命名行\"></a><a href=\"http://billie66.github.io/TLCL/book/\" target=\"_blank\" rel=\"noopener\">快乐的Linux命名行</a></h4><p><a href=\"http://linuxcommand.org/\" target=\"_blank\" rel=\"noopener\">The Linux Command Line</a> 的中文版，一个文科生说他看完这个都会 Linux 了</p>\n<h4 id=\"HTTPS-的故事\"><a href=\"#HTTPS-的故事\" class=\"headerlink\" title=\"HTTPS 的故事\"></a><a href=\"https://juejin.im/post/5b10aa22e51d4506c5568f1d\" target=\"_blank\" rel=\"noopener\">HTTPS 的故事</a></h4><p>作者缘于在 Twitter 上看到的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fmedium.freecodecamp.org%2Fhttps-explained-with-carrier-pigeons-7029d2193351\" target=\"_blank\" rel=\"noopener\">HTTPS explained with carrier pigeons</a>，原作者用很简单的故事就把 HTTP / HTTPS 的传输过程讲解的很清楚。 借原文的意思，该作者重新写了这个故事，加上了一些配图和补充，很形象的解释了为什么要有https以及如何实现。</p>\n<h4 id=\"JS-函数式编程指南\"><a href=\"#JS-函数式编程指南\" class=\"headerlink\" title=\"JS 函数式编程指南\"></a><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></h4><p>这是<em><a href=\"https://github.com/DrBoolean/mostly-adequate-guide\" target=\"_blank\" rel=\"noopener\">mostly-adequate-guide</a></em>的中文版，可以说是最好的\b函数式编程书籍，作者还非常有心的提供了 EPUB 和 MOBI 格式的下载。</p>\n<h4 id=\"Bash-脚本-set-命令教程\"><a href=\"#Bash-脚本-set-命令教程\" class=\"headerlink\" title=\"Bash 脚本 set 命令教程\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/11/bash-set.html\" target=\"_blank\" rel=\"noopener\">Bash 脚本 set 命令教程</a></h4><p>阮一峰老师写的教程，也是一些大牛推荐的 set 命令教程，文章短小精悍，基本上把 set 命令相关的所有知识都涵盖了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"npm-scripts-使用指南\"><a href=\"#npm-scripts-使用指南\" class=\"headerlink\" title=\"npm scripts 使用指南\"></a><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener\">npm scripts 使用指南</a></h4><p>阮一峰讲解的 npm script 入门知识，关于 npm script 首推这篇文章</p>\n<h4 id=\"Linux大棚版Thrift入门教程\"><a href=\"#Linux大棚版Thrift入门教程\" class=\"headerlink\" title=\"Linux大棚版Thrift入门教程\"></a><a href=\"http://roclinux.cn/?p=3316\" target=\"_blank\" rel=\"noopener\">Linux大棚版Thrift入门教程</a></h4><p>thrift 作为一种 RPC 框架，其诞生以来就受到了广泛关注，虽然 RPC 框架有很多种，但是 thrift 还是有其独特优势的，这篇入门教程篇幅较长，作者介绍了 thrift 的基础概念，同时通过实例介绍了如何应用 thrift，比其他教程要详细很多。</p>\n<h4 id=\"Shell脚本编程30分钟入门\"><a href=\"#Shell脚本编程30分钟入门\" class=\"headerlink\" title=\"Shell脚本编程30分钟入门\"></a><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\" target=\"_blank\" rel=\"noopener\">Shell脚本编程30分钟入门</a></h4><p>前端工程师和 shell 打交道会比较少，但是知道一些往往会节省自己很多时间，比如定时备份、定时提交修改神马的，这篇文章虽然看上去有点“标题党”的意思，但是作者介绍的还算详细，同时作者还有一些其他类型的“30 分钟教程”，也可以看一看（作者是多么喜欢30分钟这个时间段啊。。）</p>\n<h4 id=\"Docker-入门\"><a href=\"#Docker-入门\" class=\"headerlink\" title=\"Docker 入门\"></a><a href=\"http://www.jianshu.com/p/d4f24f8012fd\" target=\"_blank\" rel=\"noopener\">Docker 入门</a></h4><p>Docker 是一个非常有趣的项目。它最大的作用就是隔绝了操作系统环境，类似于虚拟机，但是相对于虚拟机，他又拥有绝对的高效率、和通用性。相信看完这篇文章之后，你会对docker有一个直观的认识= =</p>\n<h4 id=\"图说设计模式\"><a href=\"#图说设计模式\" class=\"headerlink\" title=\"图说设计模式\"></a><a href=\"\bhttp://design-patterns.readthedocs.io/zh_CN/latest/index.html\">图说设计模式</a></h4><p>通过画图的方式理解设计模式，以一种轻松的姿势理解高深的学问。</p>\n<h4 id=\"Go-指南\"><a href=\"#Go-指南\" class=\"headerlink\" title=\"Go 指南\"></a><a href=\"https://tour.go-zh.org/list\" target=\"_blank\" rel=\"noopener\">Go 指南</a></h4><p>该指南介绍了 Go 的大部分重要特性，同时有一些练习进行巩固。</p>\n<h4 id=\"centos-6-7安装最新版-git\"><a href=\"#centos-6-7安装最新版-git\" class=\"headerlink\" title=\"centos 6.7安装最新版 git\"></a><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7安装最新版 git</a></h4><p>阿里云上的 ECS 很多人都会选择 CentOS 系统，而作为前端，可能需要安装 nvm，但是 CentOS 6.7 默认安装的 git 版本是比较低的 1.7.1 版本，所以需要重新安装最新版 git，这篇教程讲的很详细，我按照他的步骤很顺利的就安装成功了。</p>\n<h4 id=\"Jenkins-nginx-搭建前端构建环境\"><a href=\"#Jenkins-nginx-搭建前端构建环境\" class=\"headerlink\" title=\"Jenkins+nginx 搭建前端构建环境\"></a><a href=\"https://juejin.im/post/5b371678f265da599f68dfa2\" target=\"_blank\" rel=\"noopener\">Jenkins+nginx 搭建前端构建环境</a></h4><p>废话很少，直接上代码的方式我很喜欢，Jenkins 解决了很令人头疼的构建问题，所以如果想成为一名称职的前端工程师，这是一篇值得参考和手巧的教程，赶快跟着作者的手速敲起来吧！</p>\n<h4 id=\"技术胖-155-集前端视频教程\"><a href=\"#技术胖-155-集前端视频教程\" class=\"headerlink\" title=\"技术胖 155 集前端视频教程\"></a><a href=\"https://juejin.im/post/5a5bc8c36fb9a01ca26774eb\" target=\"_blank\" rel=\"noopener\">技术胖 155 集前端视频教程</a></h4><p>技术胖在 2017 年录制的 155 集视频教程，可以免费观看，其中包括 Vue2.x、Vue-cli、Vue-router、vuex、Vue实战、weex、ES6、React基础、React全家桶、Koa2.x、Fabric.js 和 CocosCreater 实战教程等。</p>\n<h2 id=\"进阶级\"><a href=\"#进阶级\" class=\"headerlink\" title=\"进阶级\"></a>进阶级</h2><h4 id=\"深入理解JSON\"><a href=\"#深入理解JSON\" class=\"headerlink\" title=\"深入理解JSON\"></a><a href=\"https://mp.weixin.qq.com/s/CQKFfecqy3_EgW0jLfEMIQ\" target=\"_blank\" rel=\"noopener\">深入理解JSON</a></h4><p>作者将 JSON 和 JS 中的 JSON 都梳理了一遍，也对里面的细节和注意点进行了一次遍历，从中我们能够知道 JSON 是一种语法上衍生于JS语言的一种轻量级的数据交换格式，也会明白 JSON 相对于一般的JS数据结构（尤其是对象）的差别；除此之外，作者更进一步地仔细讨论了 JS 中关于 JSON 处理的 3 个函数和细节。</p>\n<h4 id=\"通用-CSS-笔记、建议与指导\"><a href=\"#通用-CSS-笔记、建议与指导\" class=\"headerlink\" title=\"通用 CSS 笔记、建议与指导\"></a><a href=\"https://github.com/chadluo/CSS-Guidelines/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">通用 CSS 笔记、建议与指导</a></h4><p>作者总结了 CSS 的相关规范，但是建议下面腾讯 AlloyTeam 总结的那篇。。</p>\n<h4 id=\"前端规范总结-AlloyTeam\"><a href=\"#前端规范总结-AlloyTeam\" class=\"headerlink\" title=\"前端规范总结-AlloyTeam\"></a><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">前端规范总结-AlloyTeam</a></h4><p>腾讯 AlloyTeam 通过分析 github 代码库总结出来的工程师代码书写习惯，内容很全很详细，值得一看！</p>\n<h4 id=\"CSS进阶系列\"><a href=\"#CSS进阶系列\" class=\"headerlink\" title=\"CSS进阶系列\"></a><a href=\"http://www.cnblogs.com/coco1s/category/833837.html\" target=\"_blank\" rel=\"noopener\">CSS进阶系列</a></h4><p>通过作者的 github，可以看出来这是一位腾讯的大牛，作者通过 CSS 实现了很多复杂的效果，其中有些例子是《CSS揭秘》这本书里面的，这本书也是我之前强烈推荐大家看的一本 CSS 进阶书籍。</p>\n<h4 id=\"简书-前端基础进阶系列\"><a href=\"#简书-前端基础进阶系列\" class=\"headerlink\" title=\"简书-前端基础进阶系列\"></a><a href=\"http://www.jianshu.com/p/cd3fee40ef59\" target=\"_blank\" rel=\"noopener\">简书-前端基础进阶系列</a></h4><p>作者叫“波同学”，我之前是从来没有听说过作者大名的，但是读过作者这一系列的文章之后对作者的前端能力很是钦佩，同时作者的讲解能力也很强，将一些别人讲的晦涩难懂的原理讲的很透彻，十分推荐大家认真阅读一下作者这一系列的文章，我相信你看完之后你的前端水平会有很大的提升</p>\n<blockquote>\n<p>更新于2017-01-26：波同学将自己在简书上的文章都迁移到了<a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">自己的Gitbook</a>上</p>\n</blockquote>\n<h4 id=\"深入理解-JavaScript-系列\"><a href=\"#深入理解-JavaScript-系列\" class=\"headerlink\" title=\"深入理解 JavaScript 系列\"></a><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 系列</a></h4><p>汤姆大叔写的文章，文章内容实在是多。。而且感觉难度有点大，推荐大家先看一下上面简书的前端基础进阶系列，再来看汤姆大叔这一系列的文章，可能理解起来会更容易一些。</p>\n<h4 id=\"webshell-原理\"><a href=\"#webshell-原理\" class=\"headerlink\" title=\"webshell 原理\"></a><a href=\"http://www.jianshu.com/p/02aac12e459f\" target=\"_blank\" rel=\"noopener\">webshell 原理</a></h4><p>webshell，顾名思义：web 指的是在 web 服务器上，而 shell 是用脚本语言编写的脚本程序，webshell 就是就是 web 的一个管理工具，可以对 web 服务器进行操作的权限，也叫 webadmin。接触过集群的童鞋对这个概念肯定不会感到陌生，虽然一般人不会接触到 webshell，但是多了解一些总是没错的~</p>\n<h4 id=\"全自动科学上网方案分享\"><a href=\"#全自动科学上网方案分享\" class=\"headerlink\" title=\"全自动科学上网方案分享\"></a><a href=\"https://github.com/bestswifter/blog/commit/b68a7bbc413874c3883a66b6b065413f0f351156\" title=\"[Add] 全自动科学上网方案分享\" target=\"_blank\" rel=\"noopener\">全自动科学上网方案分享</a></h4><p>有些童鞋并不了解如何通过 VPS 实现科学上网，这篇文章介绍了如何利用 VPS 进行代理配置，以及实现自动切换，讲解的很详细。</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"iOS中采用AMP规范时的scroll和position:fixed带来的bug","slug":"iOS中采用AMP规范时的scroll和position:fixed带来的bug","date":"2017-08-26T12:23:20.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/iOS中采用AMP规范时的scroll和position:fixed带来的bug.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>本文翻译自一位前辈的两篇文章，原文链接：</p>\n<ul>\n<li><a href=\"https://medium.com/@dvoytenko/amp-ios-scrolling-and-position-fixed-b854a5a0d451\" target=\"_blank\" rel=\"noopener\">AMP, iOS, Scrolling and Position Fixed</a></li>\n<li><a href=\"https://hackernoon.com/amp-ios-scrolling-and-position-fixed-redo-the-wrapper-approach-8874f0ee7876\" target=\"_blank\" rel=\"noopener\">AMP, iOS, Scrolling and Position Fixed Redo — the wrapper approach</a></li>\n</ul>\n<p>首先，你需要先了解一下 AMP，<a href=\"https://imququ.com/post/amp-project.html\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们对于 AMP 的目标是确保 document 文档在不同环境中都是可嵌入的，无论是单独查看还是在 webview 中或者在 iframe 中——总体而言，它在不同环境中的功能和行为表现都应该尽可能相同。我们将从一个简单的栗子开始，在这个栗子中，一个 AMP 文档通过 iframe 被嵌入了一个 web app。这听起来很正常，但是很实在的说，iframes 在最近已经很少有人用了。闲话少说，html 结构是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>I’m a Web App and I show AMP documents<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    iframe &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">      top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">iframe</span> … <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">scrolling</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.ampproject.org/c/pub1.com/doc1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面这段代码通常来说在移动设备上表现良好。然后我们有了一个新的想法，我们尝试将 iframe 调整到整个 document 的高度，同时使用 static 定位，从而将滚动委托给上一层的 window。然而，出于一些原因，我们放弃了这种方法：</p>\n<ul>\n<li>当视口高度等于文档高度时，在嵌入的AMP文档中设置<code>“position: fixed”</code>是不会起作用的</li>\n<li>计算文档高度容易出错，而且有延迟</li>\n</ul>\n<p>当然，我们最终没有很好的解决方案。主要是，设置了<code>“scrolling=yes”</code>的 iframe 会丢失一些移动设备的特性，比如滚动时隐藏地址栏。然而，我们仍然觉得这已经是一个很好的折衷方案了。除此之外，一些浏览器已经开始尝试将这些特性扩展到非 body 滚动的情况中。我们就这样美滋滋，直到我们遇到了 iOS。。</p>\n<h3 id=\"问题1：iOS-不支持-iframe-的-“scrollable-yes”\"><a href=\"#问题1：iOS-不支持-iframe-的-“scrollable-yes”\" class=\"headerlink\" title=\"问题1：iOS 不支持 iframe 的 “scrollable=yes”\"></a>问题1：iOS 不支持 iframe 的 <code>“scrollable=yes”</code></h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=149264\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=149264</a> 简单的说：<strong>ios中不能有可以滚动的iframe</strong>。然而，我们找到了解决这个 bug 的方法。参考这里<a href=\"https://github.com/ampproject/amphtml/blob/de7a14d/src/service/viewport-impl.js#L754\" target=\"_blank\" rel=\"noopener\">ViewportBindingNaturalIosEmbed_</a>。简短而言，我们让 document 中真正的<code>&lt;body&gt;</code>元素滚动。这样的话，即使 iframe 自身不滚动，它里面的内容也会滚动。 我们按照上面方案修改后的 AMP 文档如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们以为自己很牛逼，然而。。</p>\n<h3 id=\"问题2：现在-scrollTop，scrollLeft，scrollHeight，scrollWidth-不管用了\"><a href=\"#问题2：现在-scrollTop，scrollLeft，scrollHeight，scrollWidth-不管用了\" class=\"headerlink\" title=\"问题2：现在 scrollTop，scrollLeft，scrollHeight，scrollWidth 不管用了\"></a>问题2：现在 scrollTop，scrollLeft，scrollHeight，scrollWidth 不管用了</h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=106133\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=106133</a> 这是 webkit 中长期存在的一个 bug。scrollTop 和其他类似属性被分配给了 <code>“document.body”</code>，但是却委托给了<code>“document.documentElement”</code>。最终，当 “scrollingElement” 是文档里的大部分元素的时候，这个问题会被解决。同时，令人惊喜的是，这个 bug 不会对我们在问题1中提出的解决方案造成冲突。然而，<code>“scrollTop”</code> 将会一直是 0，从而导致其他连带属性也会受到影响，比如 <code>“window.pageYOffset”</code> 解决方案是添加一个滚动的元素到文档顶部。它的 <code>“getBoundingClientRect().top”</code> 就可以用来重新计算文档的滚动位置。 具体如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scroll-pos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        width: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        height: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        visibility: hidden;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们的 JS 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScrollTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 要对scrollPos.top取负值的原因是滚动位置在计算时，</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们的scrollPos元素会向上滚动，在视口范围外,</span></span><br><span class=\"line\">  <span class=\"comment\">// 此时它的top值是负的</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -scrollPos.getBoundingClientRect().top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，这个解决方案显得很蠢，但是它确实奏效了。类似的方法可用于“scrollLeft”，“scrollHeight” 以及剩余属性。 然而，我们又有了新的发现。。</p>\n<h3 id=\"问题3：“postion-fixed”-的元素在-“overflow-auto”-容器中会有很多-bug\"><a href=\"#问题3：“postion-fixed”-的元素在-“overflow-auto”-容器中会有很多-bug\" class=\"headerlink\" title=\"问题3：“postion: fixed” 的元素在 “overflow: auto” 容器中会有很多 bug\"></a>问题3：“postion: fixed” 的元素在 “overflow: auto” 容器中会有很多 bug</h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=154399\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=154399</a> 如果一个 “position: fixed” 元素在一个 “overflow: auto” 的容器中，它的表现会让你很失望：滚动的时候，“position: fixed” 元素会跳远和闪现。它看起来像是稍微滚动一点然而又跳回到正确的位置。这个效果很差，可以通过这个<a href=\"https://drive.google.com/file/d/0B_v8thsbiGyDMXZMZkRFZGFRbjA/view?usp=sharing\" target=\"_blank\" rel=\"noopener\">视频演示</a>看到这个 bug。 要哭了。我们通过各种 hack 解决了各种 bug，最后还是有一个 bug，我们如何解决这个？这里有一个很疯狂的 idea 貌似好使。我们可以添加一个虚拟元素到 “document.documentElement”（不是 “body”，所以它其实是 “body” 的兄弟元素）。我们把它叫做“<strong>固定层</strong>”。他将占据整个视口。我们将使用CSS来找到所有的可能是 “fixed” 的元素（希望不会有太多。。），如果在某些时候它们是确定 “fixed” 的，我们就通过正确的 “z-index” 属性将它们移动到“固定层” 你可能看晕了，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#fixed-element</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      position: fixed;</span></span><br><span class=\"line\"><span class=\"undefined\">      right: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">      top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-element\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      width: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      height: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当我们找到一个确实 “fixed” 的元素的时候，我们将它移动到“固定层”，像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-element\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"pointer-events: initial; z-index: 11;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此，我们可以根据某元素是否 “fixed” 来将它在 “\bbody” 中的原始位置和“固定层”之间移动。 这个方法就无懈可击了吗？很明显没有：</p>\n<ul>\n<li>\b这代码看都看不懂！</li>\n<li>计算 “z-index” 会相当痛苦</li>\n<li>我们将失去一些 CSS 祖先选择器</li>\n</ul>\n<p>但是它确实是有效的，可以看一下<a href=\"http://github.com/ampproject/amphtml/pull/2128\" target=\"_blank\" rel=\"noopener\">这条PR</a>。还有别的 idea 吗？ 准确来说是有的，下面是作者第二篇文章的译文：</p>\n<h2 id=\"回顾一下\"><a href=\"#回顾一下\" class=\"headerlink\" title=\"回顾一下\"></a>回顾一下</h2><p>简单回顾一下，AMP 文档经常在一个滚动的 iframe 中进行展示。它的 html 结构看起来像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>I'm a Web App and I show AMP documents<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      iframe &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">iframe</span> … <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">scrolling</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.ampproject.org/c/pub1.com/doc1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在大部分浏览器中，上面这段代码表现很正常。但是在 ios 中会有很多异常表现，我们尝试了很多方法，包括通过内容调整 iframe 大小和滚动主文档。但是他们都有一些性能问题，具体可以参见上面的问题描述。 根本而言，ios 的 safari 浏览器不支持滚动的 iframe。换句话说，<code>“scrolling=yes”</code> 这个属性被直接忽略了。<a href=\"http://jsbin.com/gugika/edit?html,css,output\" target=\"_blank\" rel=\"noopener\">看这个例子</a>。这个 bug 由来已久，可以<a href=\"https://bugs.webkit.org/show_bug.cgi?id=149264\" target=\"_blank\" rel=\"noopener\">在这里</a>发现。 我们在<a href=\"https://github.com/ampproject/amphtml/blob/de7a14d/src/service/viewport-impl.js#L754\" target=\"_blank\" rel=\"noopener\">之前提到的一篇文章</a>中发现了一个很原始的方案。简而言之，我们让真正的 “body” 元素滚动。于是，即使 iframe 它自身不滚动，iframe 中的内容也会滚动，AMP 文档如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们 iframe 可以滚动了！这个 AMP 中的解决方案我们用了一年。然而，随着时间的流逝，我们发现了一系列的问题，这些问题在上一篇文章中已经详细介绍过了，这里再简单罗列一下： 给“ body” 添加 “position: absolute” 属性是作者不想看到的，会影响原始布局。另外一个副作用是我们不没办法在 “body” 元素上设置 margin body 的 scrollTop，scrollLeft，scrollHeight 和 scrollWidth 将不起作用。这个 bug 通过上面介绍的注入虚拟 dom 元素可以解决。 “position: fixed” 在 “-webkit-overflow-scrolling: touch” 容器中会有各种 bug 抵消 header 和 footer 需要给 body 设置边框，这个代价很昂贵，因为它缩小了滚动区域，同时可能会打破现有布局。而隐藏头部又会造成 UI 视觉的隔断和滚动的间断 那我们如何解决这个问题呢，我们的主角就要登场了。。</p>\n<h3 id=\"新的解决方案——wrapper-元素\"><a href=\"#新的解决方案——wrapper-元素\" class=\"headerlink\" title=\"新的解决方案——wrapper 元素\"></a>新的解决方案——wrapper 元素</h3><p>这个方案已开源，可以<a href=\"https://github.com/ampproject/amphtml/blob/2d73ac0d9c451dee4c89ac1fa73329b69edca5a4/src/service/viewport-impl.js#L1404\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看源代码</p>\n<h3 id=\"DOM-结构\"><a href=\"#DOM-结构\" class=\"headerlink\" title=\"DOM 结构\"></a>DOM 结构</h3><p>通俗来讲，wrapper 元素和滚动的 “body” 元素是类似的。iframe 在 ios 的 safari 浏览器中依然无法滚动，所以我们需要让 iframe 中的内容滚动。因为让<code>&lt;body&gt;</code>滚动会有一系列问题，所以我们可以创建一个滚动的 wrapper，然后将它放在<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>中间。换句话说，我们将<code>&lt;body&gt;</code>元素包装在一个可滚动的容器中。 现在的 dom 结构类似这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i-amp-html-wrapper</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">i-amp-html-wrapper</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>毫无疑问，这看起来很怪，但是它确实解决了原来的问题——它让 iframe 在 ios 的 safari 浏览器中可以滚动。此外，它也解决了上面描述的许多问题：</p>\n<ul>\n<li>对于<code>&lt;body&gt;</code>元素没有任何强制要求：它仍然拥有原来的“position”属性，同时也可以拥有默认的“overflow: visible”属性。AMP 允许 dom 中的大多数 css 样式，这样可以减少对代码原作者样式的干扰</li>\n<li>可滚动的 wrapper 元素可以用来获取 scrollTop，scrollLeft，scrollHeight 和 scrollWidth 属性，于是之前介绍过的虚拟元素将不再需要</li>\n<li>不再需要给<code>&lt;body&gt;</code>设置边界来抵消 header 和 footer 了——只需要给 wrapper 元素添加 padding 就足够了</li>\n</ul>\n<p>然而，“position: fixed” 的问题仍然存在，我们稍后再谈。</p>\n<h3 id=\"两个-lt-html-gt-元素\"><a href=\"#两个-lt-html-gt-元素\" class=\"headerlink\" title=\"两个&lt;html&gt;元素\"></a>两个<code>&lt;html&gt;</code>元素</h3><p>我们采用了 wrapper 方案，然后很快就碰到了一个小问题。很多人喜欢 html&gt;body 选择器，而我们在 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code> 中间插入了 i-amp-html-wrapper 元素。为了解决这个问题，我们将 i-amp-html-wrapper 作为另外一个 <code>&lt;html&gt;</code> 元素，最终的 dom 结构长这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-html-wrapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>加倍奇怪，加倍好玩。总而言之现在 html&gt;body 选择器将正常起作用</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>AMP runtime 会在启动时尽可能早的创建 wrapper 元素。而现有的 <code>&lt;body&gt;</code> 元素会作为子元素放到新建 wrapper 里面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create wrapper.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'html'</span>);</span><br><span class=\"line\">wrapper.id = <span class=\"string\">'i-amp-html-wrapper'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Setup classes and styles.</span></span><br><span class=\"line\">wrapper.className = <span class=\"built_in\">document</span>.documentElement.className;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.className = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style = <span class=\"string\">'...'</span>;</span><br><span class=\"line\">wrapper.style = <span class=\"string\">'...'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Attach wrapper straight inside the document root.</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.appendChild(wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reparent the body.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">wrapper.appendChild(body);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">document</span>, <span class=\"string\">'body'</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> body,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这段代码很简单，不过有一个细节——将 body 移到 wrapper 里面会将 document.body 重置为 null，因此我们需要将 document.body 重写回初始的 <code>&lt;body&gt;</code> 元素，可以通过 Object.defineProperty 来实现</p>\n<h4 id=\"position-fixed问题\"><a href=\"#position-fixed问题\" class=\"headerlink\" title=\"position: fixed问题\"></a>position: fixed问题</h4><p>尽管 wrapper 方案能够解决大部分问题，但是 position: fixed 的问题仍然存在 这个问题在上面那篇文章已经详细介绍过了，有关 ios 的 safari 浏览器 bug 可以<a href=\"https://bugs.webkit.org/show_bug.cgi?id=154399\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看 简而言之，一个 position: fixed 元素在一个 -webkit-overflow-scrolling: touch 容器中滚动时会出现跳跃和闪现的问题。它看起来像是稍微滚动一点然而又跳回到正确的位置。可以通过这个<a href=\"https://drive.google.com/file/d/0B_v8thsbiGyDMXZMZkRFZGFRbjA/view?usp=sharing\" target=\"_blank\" rel=\"noopener\">视频演示</a>看到这个 bug。 在我们之前的解决方案中，我们将有 position: fixed 属性的元素放到了 <code>&lt;body&gt;</code> 外面，同时放到了一个虚拟“固定层”元素内部，这个“固定层”元素放在了 -webkit-overflow-scrolling: touch 容器外面 最终的 dom 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-html-wrapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">fixed</span> <span class=\"attr\">elements</span> <span class=\"attr\">reparented</span> <span class=\"attr\">here</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>于是，<strong>我们最终获得了两个<code>&lt;html&gt;</code>元素和两个<code>&lt;body&gt;</code>元素</strong>。看起来很疯狂，但是它确实解决了两个问题： iframe 不滚动和 position:fixed 元素闪现问题 很明显，我们将取得更好的效果如果存在已久的 ios safari 问题被修复。。</p>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"AMP","path":"api/tags/AMP.json"},{"name":"fixed","path":"api/tags/fixed.json"},{"name":"ios","path":"api/tags/ios.json"}]},{"title":"移动端滚动事件大起底","slug":"移动端滚动事件大起底","date":"2017-08-20T13:43:33.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/移动端滚动事件大起底.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>最近在做移动端的项目，其中有个需求就是滚动监听标签页，实现用户滚动到不同位置时点亮相应 tab 按钮；这其实是个很简单的需求，但是根据之前的项目经验，移动端的滚动事件会有各种坑，所以就花时间做了一些功课，对移动端滚动事件中的坑进行了总结，同时提供了一些解决方案。</p>\n<h2 id=\"移动端滚动事件介绍\"><a href=\"#移动端滚动事件介绍\" class=\"headerlink\" title=\"移动端滚动事件介绍\"></a>移动端滚动事件介绍</h2><p>我们这里要讲的是 onscroll 事件，具体参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onscroll\" target=\"_blank\" rel=\"noopener\">MDN文档</a></p>\n<h2 id=\"滚动事件应用\"><a href=\"#滚动事件应用\" class=\"headerlink\" title=\"滚动事件应用\"></a>滚动事件应用</h2><p>我做了几个简单的 demo，可以直接点击下面的链接查看（在手机上效果更佳~），关于移动端滚动事件的简单 demo 我上传到了我的 github，可以<a href=\"https://github.com/merrier/mobile-scroll-events\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看源码：</p>\n<ul>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/drop-and-refresh.html\" target=\"_blank\" rel=\"noopener\">下拉刷新</a></li>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/ceiling.html\" target=\"_blank\" rel=\"noopener\">吸顶效果</a></li>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/lazy-load.html\" target=\"_blank\" rel=\"noopener\">图片懒加载</a></li>\n<li>无限加载</li>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/side-nav-bar.html\" target=\"_blank\" rel=\"noopener\">侧边浮动导航栏</a></li>\n</ul>\n<h2 id=\"滚动事件分类和兼容性\"><a href=\"#滚动事件分类和兼容性\" class=\"headerlink\" title=\"滚动事件分类和兼容性\"></a>滚动事件分类和兼容性</h2><p>按照实际滚动的 dom 类型分为全局滚动和局部滚动</p>\n<h3 id=\"全局滚动\"><a href=\"#全局滚动\" class=\"headerlink\" title=\"全局滚动\"></a>全局滚动</h3><p>滚动条在 body 节点或者更顶层，一般是这样调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bHeight = <span class=\"built_in\">document</span>.body.clientHeight,  <span class=\"comment\">// body对象高度，如果有滚动高度也包括</span></span><br><span class=\"line\">        wHeight = <span class=\"built_in\">window</span>.innerHeight,  <span class=\"comment\">// 浏览器窗口的视口</span></span><br><span class=\"line\">        sTop = <span class=\"built_in\">document</span>.body.scrollTop;  <span class=\"comment\">// body距离滚动顶部的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isScrollBottom = bHeight - (wHeight + sTop) === <span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isScrollBottom) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行相关代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以通过 addEventListener 的方式</p>\n<h3 id=\"局部滚动\"><a href=\"#局部滚动\" class=\"headerlink\" title=\"局部滚动\"></a>局部滚动</h3><p>滚动条在 body 下某一个 dom 节点，在移动端如果使用局部滚动，意思就是我们的滚动在一个固定宽高的 div 内触发，将该 div 设置成 overflow:scroll/auto; 来形成 div 内部的滚动，这时我们监听 div 的 onscroll 发现触发的时机；调用方式和全局滚动类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;）</span><br></pre></td></tr></table></figure>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>整体来看，<strong>全局滚动的兼容性要不如局部滚动，安卓比 IOS 兼容性更好：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">body 滚动</th>\n<th style=\"text-align:center\">局部滚动</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">iOS</td>\n<td style=\"text-align:center\">不能实时触发</td>\n<td style=\"text-align:center\">不能实时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">android</td>\n<td style=\"text-align:center\">实时触发</td>\n<td style=\"text-align:center\">实时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iOS WKWebview 内核</td>\n<td style=\"text-align:center\">实时触发</td>\n<td style=\"text-align:center\">实时触发</td>\n</tr>\n</tbody>\n</table>\n<p>为什么 IOS 下的滚动事件会有各种 bug 呢，通过查阅资料，得出如下结论： iOS 的 webview 内核设定了其在进行 momentum scrolling (弹性滚动， 设置 -webkit-overflow-scrolling:touch 可以达到弹性滚动效果，安卓无效)时，会停止所有的 <strong>事件响应</strong> 及 <strong>DOM操作引起的页面渲染，</strong>故 onscroll 不能实时响应，具体可以<a href=\"https://www.tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers/\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看某位大牛写的实例 这里说明一下关于 iOS 的 wkwebview 内核是 iOS 从 iOS8 开始提供的新型 webview 内核，和之前的 uiwebview 相比，性能要好，具体大家可以自行查看关于 wkwebview 的相关概念</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>既然 onscroll 事件在 iOS 和安卓上的表现并不统一，同时根据浏览器内核的不同会有潜在的 bug 出现，就出现了针对于移动端滚动事件的各种兼容方案，总结如下：</p>\n<ol>\n<li>使用 ontouchmove 去替代 onscroll，虽然能更频繁的触发事件，但是这边的项目需求是实时响应滚动事件的同时，还要对页面元素进行重定位的 DOM 操作，由上述原因可知，在滚动过程中，页面会停止一切关于 DOM 方面的操作，所以若使用 ontouchmove 去实现的话，在按住屏幕进行滑动的时候，屏幕会出现元素抖动的情况(事件触发与 DOM 操作间具有几十毫秒的时间差)，兼容失败</li>\n<li>使用 <a href=\"https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/versions.html\" target=\"_blank\" rel=\"noopener\">iscroll</a> 的 probe 版本，该版本能实时探查到滚动的距离，但该钩子函数是实时去关注 requestAnimationFrame 下的状态，所以对浏览器的版本性能消耗很大，安卓机根本动不了，兼容失败</li>\n<li>使用 <a href=\"http://www.swiper.com.cn/\" target=\"_blank\" rel=\"noopener\">swiper</a> 插件，在启动 freeMode 模式时模拟原生的弹性滚动( swiper 模拟原生滚动的方案能兼容较多的安卓机型不出现bug，推荐), 因为 swiper 没有实时监听滚动位置的功能,故我监听滚动开始及结束后的事件，通过 setInterval 及一些计算去实现滚动条的监听，但因为 react 元素的变化量比较大，导致 swiper 在移动端时对父容器的计算速率达到了一个瓶颈，依旧出现很卡顿的现象，兼容失败</li>\n</ol>\n<p>通过以上的兼容性尝试，可以发现其实<strong>并没有一个完美的解决方案</strong>，所以如果真的需要达到某些移动端滚动效果的话，可以采取 fallback 方案：</p>\n<ul>\n<li>Android 用 scroll 方案，因为兼容性很可观；</li>\n<li>IOS 如果不需要兼容 8 以下版本的话，就也直接用 scroll 方案，因为 wkwebview 已经对滚动事件进行了优化，而如果需要兼容8以下版本的话，可以考虑 isroll 或 JRroll 这两种插件，<strong>同时需要真机测试查看效果是否达到要求（尤其是 QQ 浏览器和搜狗浏览器）</strong>。</li>\n</ul>\n<p>由于查询到的资料比较老旧，对于滚动事件的兼容性描述可能已经过时了，我就在最近（2017-8-24）用各种浏览器测试了一下iOS中的滚动事件的兼容性，总结如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">是否可以弹性滚动</th>\n<th style=\"text-align:center\">是否需要设置 overflow:scrolling 才能弹性滚动</th>\n<th style=\"text-align:center\">设置 overflow:scrolling 之后，滚动期间是否监听事件</th>\n<th style=\"text-align:center\">未设置 overflow:scrolling，滚动期间是否监听事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">safari(v10.0)</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chrome(v60.0)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">firefox(v8.2)</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">weixin(v6.5.14)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">QQ(v7.7.2)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">搜狗(v5.8.1)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<p>从上面的表格可以看到，最新版的 iOS 浏览器其实并不需要 <code>overflow:scrolling</code> 就可以实现弹性滚动，同时除了搜狗浏览器之外，其他浏览器在滚动期间都会监听事件，由此可见截止到目前（2017-8-24），iOS 和浏览器对滚动事件的兼容性已经做了很多优化和改进了，之后有时间的话再在 android 手机上做一下测试……</p>\n<h2 id=\"滚动事件性能优化\"><a href=\"#滚动事件性能优化\" class=\"headerlink\" title=\"滚动事件性能优化\"></a>滚动事件性能优化</h2><p>除了兼容性问题以外，由于滚动事件和 resize 事件同属于<strong>会频繁触发的事件。</strong>如果事件中涉及到大量的位置计算、DOM 操作、元素重绘等工作且这些工作无法在下一个 scroll 事件触发前完成，就会造成浏览器掉帧。</p>\n<h3 id=\"防抖和节流\"><a href=\"#防抖和节流\" class=\"headerlink\" title=\"防抖和节流\"></a>防抖和节流</h3><p>scroll 事件本身会触发页面的重新渲染，同时 scroll 事件的 handler 又会被高频度的触发, 因此事件的 handler 内部不应该有复杂操作，例如 DOM 操作就不应该放在事件处理中。 针对此类高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等），下面介绍两种常用的解决方法，防抖和节流（underscore和lodash里面有封装好的这两种方法，感兴趣的话可以研究一下源码）。</p>\n<h4 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h4><p>防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</p>\n<h4 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h4><p>防抖函数确实不错，但是也存在问题，譬如图片的懒加载，我希望在下滑过程中图片不断的被加载出来，而不是只有当我停止下滑时候，图片才被加载出来。又或者下滑时候的数据的 ajax 请求加载也是同理。 这个时候，我们希望即使页面在不断被滚动，但是滚动 handler 也可以以一定的频率被触发（譬如 250ms 触发一次），这类场景，就要用到另一种技巧，称为节流函数（throttling）。 节流函数，只允许一个函数在 X 毫秒内执行一次。 与防抖相比，节流函数最主要的不同在于它保证在 X 毫秒内至少执行一次我们希望触发的事件 handler。</p>\n<h3 id=\"使用-rAF（requestAnimationFrame）触发滚动事件\"><a href=\"#使用-rAF（requestAnimationFrame）触发滚动事件\" class=\"headerlink\" title=\"使用 rAF（requestAnimationFrame）触发滚动事件\"></a>使用 rAF（requestAnimationFrame）触发滚动事件</h3><p>上面介绍的抖动与节流实现的方式都是借助了定时器 setTimeout ，但是如果页面只需要兼容高版本浏览器或应用在移动端，又或者页面需要追求高精度的效果，那么可以使用浏览器的原生方法 rAF（requestAnimationFrame）。 window.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。 rAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器） 通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000 / 60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ul>\n<li>防抖动：防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</li>\n<li>节流函数：只允许一个函数在 X 毫秒内执行一次，只有当上一次函数执行后过了你规定的时间间隔，才能进行下一次该函数的调用。</li>\n<li>rAF：16.7ms 触发一次 handler，降低了可控性，但是提升了性能和精确度。</li>\n</ul>\n<p>从本质上而言，我们应该尽量去精简 scroll 事件的 handler ，将一些变量的初始化、不依赖于滚动位置变化的计算等都应当在 scroll 事件外提前就绪。建议：<strong>避免在 scroll 事件中修改样式属性 / 将样式操作从 scroll 事件中剥离</strong></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.ayqy.net/blog/%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\" target=\"_blank\" rel=\"noopener\">吸顶效果解决方案</a></li>\n<li><a href=\"https://www.tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers/\" target=\"_blank\" rel=\"noopener\">onscroll Event Issues on Mobile Browsers</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000004453730\" target=\"_blank\" rel=\"noopener\">前端: 移动端onscroll事件在部分浏览器内不能实时触发</a></li>\n<li><a href=\"http://www.alloyteam.com/2017/04/secrets-of-mobile-web-scroll-bars-and-drop-refresh/\" target=\"_blank\" rel=\"noopener\">移动web之滚动篇</a>* <a href=\"http://web.jobbole.com/86158/\" target=\"_blank\" rel=\"noopener\">高性能滚动 scroll 及页面渲染优化</a></li>\n</ul>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"移动端","path":"api/tags/移动端.json"}]},{"title":"SSH connect to github fail解决方案","slug":"SSH connect to github fail解决方案","date":"2017-08-20T13:22:16.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/SSH connect to github fail解决方案.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_280.png","content":"<p>来自于<a href=\"https://stackoverflow.com/questions/21488137/ssh-connect-to-github-fail\" target=\"_blank\" rel=\"noopener\">stackoverflow上的一个问题</a>，有位仁兄在命令行中输入了如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>然而报错了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh: Could not resolve hostname github.com: nodename nor servname provided, or not known</span><br></pre></td></tr></table></figure>\n<p>其实，之前就有人碰到过 ssh fail 的问题，报错的原因是 <strong>DNS 服务器设置</strong>的问题，将 DNS 地址设置为 OpenDNS 或者 Google DNS 就可以了：</p>\n<blockquote>\n<p>OpenDNS 208.67.222.222 208.67.220.220 GoogleDNS 8.8.8.8 8.8.4.4</p>\n</blockquote>\n<p>下面就介绍一下在 Mac 中如何设置 DNS（来自文章<a href=\"http://www.howtogeek.com/howto/38793/how-to-switch-mac-os-x-to-use-opendns-or-google-dns/\" target=\"_blank\" rel=\"noopener\">How to Switch Mac OS X to Use OpenDNS or Google DNS</a>）：</p>\n<h2 id=\"首先，系统偏好设置-网络\"><a href=\"#首先，系统偏好设置-网络\" class=\"headerlink\" title=\"首先，系统偏好设置-网络\"></a>首先，系统偏好设置-网络</h2><div align=\"center\"><img src=\"/images/hexo_post_280.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"点击高级选项\"><a href=\"#点击高级选项\" class=\"headerlink\" title=\"点击高级选项\"></a>点击高级选项</h2><div align=\"center\"><img src=\"/images/hexo_post_281.png\" alt=\"\" width=\"400\"></div>\n\n\n<h2 id=\"DNS-添加按钮\"><a href=\"#DNS-添加按钮\" class=\"headerlink\" title=\"DNS-添加按钮\"></a>DNS-添加按钮</h2><div align=\"center\"><img src=\"/images/hexo_post_282.png\" alt=\"\" width=\"400\"></div>\n\n<p>设置为上面我们提到的 OpenDNS 或 GoogleDNS 地址中的一个就可以啦~</p>\n","raw":null,"categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"Github","path":"api/tags/Github.json"},{"name":"dns","path":"api/tags/dns.json"},{"name":"ssh","path":"api/tags/ssh.json"}]},{"title":"影响Cache的几个HTTP头信息","slug":"影响Cache的几个HTTP头信息","date":"2017-08-20T13:12:54.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/影响Cache的几个HTTP头信息.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>HTTP 协议是前端工程师接触最多的一种协议，而它的内容又多的要命，所以很多前端童鞋在遇到 HTTP 的时候都会产生“畏惧”的心理，其实对于这种内容非常多又难以理解的知识点，我的建议是用到的时候再详查，而我接下来要介绍的这几个头信息则是非常重要的知识点，是每一个称职的前端工程师都需要掌握的~</p>\n<h2 id=\"HTTP-的-cache-机制\"><a href=\"#HTTP-的-cache-机制\" class=\"headerlink\" title=\"HTTP 的 cache 机制\"></a>HTTP 的 cache 机制</h2><p>HTTP 的 cache 机制总共有4个组成部分：<strong>Cache-Control、Last-Modified（If-Modified-Since）、Etag（If-None-Match）、Expires</strong></p>\n<ul>\n<li><strong>服务器响应头</strong>：Last-Modified、Etag</li>\n<li><strong>浏览器请求头</strong>：If-Modified-Since、If-None-Match</li>\n</ul>\n<p><strong>流程</strong>：服务器发出 Etag，Last-Modified 头后，下次浏览器再进行同样的请求，则会发出 If-None-Match，If-Modified-Since头，而后服务器根据这些信息来判断是否需要发送数据，如果没有更新，服务器就简单的发送一个 304 状态告诉浏览器用缓存就OK了，不用下载数据了，从而节约了带宽。</p>\n<h3 id=\"Last-Modified-If-Modified-Since\"><a href=\"#Last-Modified-If-Modified-Since\" class=\"headerlink\" title=\"Last-Modified / If-Modified-Since\"></a>Last-Modified / If-Modified-Since</h3><p>Last-Modified 是响应头，If-Modified-Since 是请求头。Last-Modified 把 Web 组件的最后修改时间告诉客户端，客户端在下次请求此Web组件的时候，会把上次服务端响应的最后修改时间作为 If-Modified-Since 的值发送给服务器，服务器可以通过这个值来判断是否需要重新发送，如果不需要，就简单的发送一个 304 状态码，客户端将从缓存里直接读取所需的Web组件。如果有更新，返回 HTTP 200 和更新的页面内容，并且携带新的 ETag 和 LastModified。</p>\n<blockquote>\n<p>使用这个机制，能够避免重复发送文件给浏览器，不过仍然会产生一个 HTTP 请求。</p>\n</blockquote>\n<h3 id=\"ETag-If-None-Match\"><a href=\"#ETag-If-None-Match\" class=\"headerlink\" title=\"ETag / If-None-Match\"></a>ETag / If-None-Match</h3><p>ETag 是响应头，If-None-Match 是请求头。Last-Modified / If-Modified-Since 的主要缺点就是它只能精确到秒的级别，一旦在一秒的时间里出现了多次修改，那么 Last-Modified / If-Modified-Since 是无法体现的。相比较，ETag / If-None-Match 没有使用时间作为判断标准，而是使用一个特征串。Etag 把 Web 组件的特征串告诉客户端，客户端在下次请求此 Web 组件的时候，会把上次服务端响应的特征串作为 If-None-Match 的值发送给服务端，服务端可以通过这个值来判断是否需要从重新发送，如果不需要，就简单的发送一个 304 状态码，客户端将从缓存里直接读取所需的 Web 组件。 因此，HTTP/1.1 利用 Entity Tag 头提供了更加严格的验证。</p>\n<h3 id=\"当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：\"><a href=\"#当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：\" class=\"headerlink\" title=\"当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：\"></a>当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：</h3><p><strong>第一种是Expires</strong>，比如：<code>Expires: Sun, 16 Oct 2016 05:43:02 GMT</code>，在此日期之前，客户端都会认为缓存是有效的。 不过 Expires 有缺点，比如说，服务端和客户端的时间设置可能不同，这就会使缓存的失效可能并不能精确的按服务器的预期进行。<br><strong>第二种是Cache-Control</strong>，比如：<code>Cache-Control: max-age=3600</code>，这里声明的是一个相对的秒数，表示从现在起，3600 秒内缓存都是有效的，这样就避免了服务端和客户端时间不一致的问题。 但是 Cache-Control 是 HTTP1.1 才有的，不适用与 HTTP1.0，而 Expires 既适用于 HTTP1.0，也适用于 HTTP1.1，所以说在大多数情况下同时发送这两个头会是一个更好的选择，当客户端两种头都能解析的时候，会优先使用 Cache-Control。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是-Last-Modified\"><a href=\"#什么是-Last-Modified\" class=\"headerlink\" title=\"什么是 Last-Modified?\"></a>什么是 Last-Modified?</h3><p>在浏览器第一次请求某一个 URL 时，服务器端的返回状态会是 200，内容是你请求的资源，同时有一个 Last-Modified 的属性标记 (<strong>Http Reponse Header</strong>），此文件在服务期端最后被修改的时间，格式类似这样：<code>Last-Modified: Fri, 12 May 2006 18:53:33 GMT</code>，客户端第二次请求此 URL 时，根据 HTTP 协议的规定，浏览器会向服务器传送 If-Modified-Since 报头（<strong>Http Request Header</strong>），询问该时间之后文件是否有被修改过：<code>If-Modified-Since: Fri, 12 May 2006 18:53:33 GMT</code>，如果服务器端的资源没有变化，则自动返回 <strong>HTTP 304 （Not Changed.）</strong> 状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>\n<blockquote>\n<p>如果 If-Modified-Since 的时间比服务器当前时间（当前的请求时间 request_time）还晚，Apache 会认为是个非法请求</p>\n</blockquote>\n<h4 id=\"Last-Modified-和-Expires-的区别\"><a href=\"#Last-Modified-和-Expires-的区别\" class=\"headerlink\" title=\"Last-Modified 和 Expires 的区别\"></a>Last-Modified 和 Expires 的区别</h4><p>让我们回过头来比较一下 Expires 和 Last-Modified 这两个东西，似乎 Last-Modified 比不上 Expires，因为虽然它能够节省一点带宽，但是还是逃不掉发一个 HTTP 请求出去，而 Expires 却使得浏览器干脆连 HTTP 请求都不用发，岂不痛快！那还要 Last- Modified 这个东西干什么？理想状况的确是这样，不过当用户在 IE 或者 Firefox 里面按 F5 或者点击 Refresh 按钮的时候（不是在 URL 栏里重新输入一遍 URL 然后回车），就算对于有 Expires 的 URI，一样也会发一个 HTTP 请求出去，所以，Last-Modified 还是要用的，而且要和 Expires 一起用。</p>\n<h3 id=\"什么是-Etag？\"><a href=\"#什么是-Etag？\" class=\"headerlink\" title=\"什么是 Etag？\"></a>什么是 Etag？</h3><p>HTTP 协议规格说明定义 ETag 为“<strong>被请求变量的实体值</strong>” 。另一种说法是，ETag 是一个可以与 Web 资源关联的记号（token）。典型的 Web 资源可以是一个 Web 页，但也可能是 JSON 或 XML 文档。服务器单独负责判断记号是什么及其含义，并在 HTTP 响应头中将其传送到客户端，以下是服务器端返回的格式：</p>\n<p><code>ETag: &quot;50b1c1d4f775c61:df3&quot;</code> </p>\n<p>客户端的查询更新格式是这样的：</p>\n<p><code>If-None-Match: &quot;50b1c1d4f775c61:df3&quot;</code> </p>\n<p>如果 ETag 没改变，则返回状态 304，这也和 Last-Modified 一样。本人测试 <strong>Etag 主要在断点下载时比较有用。</strong></p>\n<h4 id=\"Last-Modified和Etags如何帮助提高性能\"><a href=\"#Last-Modified和Etags如何帮助提高性能\" class=\"headerlink\" title=\"Last-Modified和Etags如何帮助提高性能?\"></a>Last-Modified和Etags如何帮助提高性能?</h4><p>聪明的开发者会把 Last-Modified 和 ETags 请求的 HTTP 报头一起使用，这样可利用客户端（例如浏览器）的缓存。因为服务器首先产生 Last-Modified / Etag 标记，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。过程如下:</p>\n<ol>\n<li>客户端请求一个页面（A）。</li>\n<li>服务器返回页面 A，并再给 A 加上一个 Last-Modified / ETag。</li>\n<li>客户端展现该页面，并将页面连同 Last-Modified / ETag 一起缓存。</li>\n<li>客户再次请求页面 A，并将上次请求时服务器返回的 Last-Modified / ETag 一起传递给服务器。</li>\n<li>服务器检查该 Last-Modified 或 ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应 304 和一个空的响应体。</li>\n</ol>\n<p><strong>注意：</strong></p>\n<ol>\n<li>Last-Modified 和 Etag 头都是由 Web Server 发出的 Http Reponse Header，Web Server 应该同时支持这两种头。</li>\n<li>Web Server 发送完 Last-Modified / Etag 头给客户端后，客户端会缓存这些头；</li>\n<li>客户端再次发起相同页面的请求时，将分别发送与 Last-Modified / Etag 对应的 Http Request Header:If-Modified-Since 和 If-None-Match。我们可以看到这两个 Header 的值和 Web Server 发出的 Last-Modified，Etag 值完全一样；</li>\n<li>通过上述值到服务器端检查，判断文件是否继续缓存；</li>\n</ol>\n<h4 id=\"Etag的弊端\"><a href=\"#Etag的弊端\" class=\"headerlink\" title=\"Etag的弊端\"></a>Etag的弊端</h4><p>不过 ETag / If-None-Match 这点功能实在是个鸡肋，首先，Server 端的资源不大可能 Roll Back，更重要的是，有可能造成 Client Performance 下降。对于只有一个 Server 的网站，没什么问题，但是现在稍微上点规模的网站都需要 Scale Out，也就是说需要前端一个 Load Balancer，后面接多台 Server 来处理请求，俗称 Cluster，既然是 Cluster，那么每个请求到底返回什么结果应该和分配到哪个 Server 无关，不过这个 ETag 可能就坏事了。<br>假如用户的第一次请求分配给 Server A，返回 <code>ETag: &quot;abcdefg1234:0001&quot;</code>，但是第二次请求分配给了Server B，Server B 上这个资源和 Server A 上的一模一样，但是计算出这个资源的 ETag 是”abcdefg1234:0002”，这下麻烦了，虽然内容一样，但是 ETag 不匹配，还是浪费了带宽把资源发送了一遍，冤枉啊！而事实上，不同 Server 上的 ETag 很有可能不同，对于 Apache，ETag 的计算考虑了 inode；对于 IIS，ETag 考虑了 metabase 的修改版本，要保证不同 server 上的这些信息一致，有点小难。不过不是有 Last-Modified / If- Not-Modified 吗？Server 端看到 If-Modified-Since，对照一下时间对得上，不管 If-None-Match，可以直接返回 304(Not Modified) 呀，很不幸， <a href=\"HTTP://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.4\" target=\"_blank\" rel=\"noopener\">RFC2616对这种情况做了规定</a>，如果既有 If-None-Match 又有 If-Modified-Since，除非两者不冲突，不然不会返回 304。</p>\n<h4 id=\"Apache-中的-Etag-设置\"><a href=\"#Apache-中的-Etag-设置\" class=\"headerlink\" title=\"Apache 中的 Etag 设置\"></a>Apache 中的 Etag 设置</h4><p>Apache 默认开启 Etag，可以使用 FileEtag 来设置</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"HTTP://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">浅谈Web缓存</a></li>\n<li><a href=\"HTTP://www.cnblogs.com/vajoy/p/5341664.html\" target=\"_blank\" rel=\"noopener\">浅谈浏览器HTTP的缓存机制</a></li>\n<li><a href=\"HTTP://louiszhai.github.io/2017/04/07/HTTP-cache/\" target=\"_blank\" rel=\"noopener\">浏览器缓存机制剖析</a></li>\n</ul>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"},{"name":"cache","path":"api/tags/cache.json"}]},{"title":"身在IT界，不能不知道这些名词","slug":"身在IT界，不能不知道这些名词","date":"2017-08-20T12:44:49.000Z","updated":"2019-02-28T12:34:16.864Z","comments":true,"path":"api/articles/身在IT界，不能不知道这些名词.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>RT，作为码农 / 程序猿 / 攻城狮，有些名词不知道可就说不过去了</p>\n<h2 id=\"geek\"><a href=\"#geek\" class=\"headerlink\" title=\"geek\"></a>geek</h2><p>这是美国“俚语”，音译为“极客”。很多人都想成为“极客”，也有很多人自诩“极客”；然而究竟什么样的人算是“极客”呢？根据我的理解，我认为那种对自己要求极致并且不食人间烟火的技术达人，比如“楼教主”这种编程奇才。。</p>\n<h2 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h2><p>Polyfill 或者 Polyfiller，是英国 Web 开发者 Remy Sharp <strong>在咖啡店蹲坑的时候拍脑袋造出来的</strong>。当时他想用一个词来形容”用 JavaScript（或者 Flash 之类的什么鬼）来实现一些浏览器不支持的原生 API”。苦思冥想一直想不到合适的单词，于是他一怒之下造了一个单词 Polyfill。除了他自己用这个词以外，他还给其他开发者用。随着他在各种 Web 会议演讲和他写的书《Introducing HTML5》中频繁提到这个词，大家用了都觉得很好，就一起来用。 Polyfill 的准确意思为：<strong>用于实现浏览器并不支持的原生 API 的代码</strong>。一个 Polyfill 是抹平新老浏览器标准原生 API 之间的差距的一种封装，而不是实现自己的 API。这里有一堆 <code>Polyfills</code>，有兴趣可以把玩一下：<a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills\" target=\"_blank\" rel=\"noopener\">HTML5 Cross Browser Polyfills</a></p>\n<h2 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack\"></a>hack</h2><p>hack 一般用来形容某些“黑科技”，是指为了满足程序的某些需求而搞的一些代码，比如 css 中的一些 hack：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span><span class=\"selector-attr\">[if IE]</span>&gt;</span><br><span class=\"line\">这段文字只在<span class=\"selector-tag\">IE</span>浏览器显示</span><br><span class=\"line\">&lt;!<span class=\"selector-attr\">[endif]</span><span class=\"selector-tag\">--</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bug\"><a href=\"#bug\" class=\"headerlink\" title=\"bug\"></a>bug</h2><p>懂的人自然懂，有一个段子分享一下：</p>\n<ul>\n<li>我们是谁？程序员</li>\n<li>我们是做什么的？消除 bug</li>\n<li>然后做什么？写 bug</li>\n</ul>\n<h2 id=\"ssr\"><a href=\"#ssr\" class=\"headerlink\" title=\"ssr\"></a>ssr</h2><p>对于前端这个行业来说，ssr 不是你家的大天狗，也不是他家的妖刀姬，更不是别人家的姑获鸟，而是<strong>服务端渲染（Server Side Render）</strong>的意思，自从 NodeJS 问世以后，前端就出现了服务端渲染的方式，相比前端渲染，ssr 究竟有哪些优点呢？其本身又存在哪些不足呢？推荐一篇文章：<a href=\"https://github.com/camsong/blog/issues/8\" target=\"_blank\" rel=\"noopener\">精读前后端渲染之争</a>。</p>\n<h2 id=\"LGTM\"><a href=\"#LGTM\" class=\"headerlink\" title=\"LGTM\"></a>LGTM</h2><blockquote>\n<p>lgtm 在英文里的缩写含义是”Looks Good To Me.”，即“朕知道了，代码已经过 review，可以合并”的意思。</p>\n</blockquote>\n<p><a href=\"https://lgtm.com/\" target=\"_blank\" rel=\"noopener\">lgtm.com</a> 是 Semmle 公司下的子品牌，主要是做白盒扫描工具的。他的优势是对 Github 上的开源代码进行了监控，发现并上报了诸多中间件安全与框架安全漏洞，目前 lgtm 监控超过超过 70,000 的 Gtihub 项目，其中包含 Google、Nasa、Microsoft 等的开源项目。</p>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"life","path":"api/tags/life.json"},{"name":"IT","path":"api/tags/IT.json"}]},{"title":"Git commit 中的Change-Id是什么","slug":"Git commit 中的Change-Id是什么","date":"2017-08-20T12:38:52.000Z","updated":"2019-02-28T12:34:16.852Z","comments":true,"path":"api/articles/Git commit 中的Change-Id是什么.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_91.png","content":"<p>之前在创业公司实习的时候代码管理很不规范，技术部负责人把每个人的 ssh key 添加到公司 github 中之后就可以执行 git 相关操作了，根本没有权限的概念；后来进入公司之后，才知道还有 Gerrit 这种东西，而第一次 push 代码的时候就遇到了 <code>ERROR: missing Change-Id in commit message</code> 的错误，后来才得知是因为没有 Change-Id 的缘故，下面就介绍一下 Change-Id 是什么东东：</p>\n<h2 id=\"什么是-Change-Id\"><a href=\"#什么是-Change-Id\" class=\"headerlink\" title=\"什么是 Change-Id\"></a>什么是 Change-Id</h2><p>Change-Id 其实就是一段形如 <code>I7cbfa01f5136b8815e5e2c6dc5dcda28ce49d13a</code> 的字符串，它的作用是：</p>\n<blockquote>\n<p>保证已经提交审核的修订通过审核入库后，被别的分支 cherry-pick 后再推送至服务器时不会产生新的重复的评审任务。</p>\n</blockquote>\n<p>Gerrit 设计了一套方法，即要求每个提交包含唯一的 Change-Id，这个 Change-Id 因为出现在日志中，当执行 cherry-pick 时也会保持，Gerrit 一旦发现新的提交包含了已经处理过的 Change-Id，就不再为该修订创建新的评审任务和 task-id，而直接将提交入库。<br>总之，Change-Id 就是 Gerrit 为了确保 cherry-pick 已提交审核的分支时不会在产生新的提交记录。</p>\n<h2 id=\"解决-ERROR：missing-Change-Id-in-commit-message\"><a href=\"#解决-ERROR：missing-Change-Id-in-commit-message\" class=\"headerlink\" title=\"解决 ERROR：missing Change-Id in commit message\"></a>解决 <code>ERROR：missing Change-Id in commit message</code></h2><p>在一开始我们提到过，在执行 <code>git push origin Head:refs/for/xxxx</code> 时有时会报出上面标题这样的错误，也就是在 commit Message 仅仅包含如 <code>feature：xxxx</code> 等 title 这样的信息而缺少 Change-Id。那么怎样解决呢？</p>\n<h3 id=\"临时解决\"><a href=\"#临时解决\" class=\"headerlink\" title=\"临时解决\"></a>临时解决</h3><p>git commit 有一个神奇的参数，叫做 <code>--amend</code>，如果我们遇到了上面的错误，可以执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>然后我们可以看到最近一次 commit 的相关信息，在 title 下面空出一行（注意，一定要空出一行，否则 git 会把其作为 title 的一部分处理）后，将 <code>Change-Id: XXXX</code> 复制到 Message 中。然后就可以 push 了。你可能会问了，我哪知道 Change-Id 是什么呢？可以先查看一下之前的 commit 信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>然后你可能会看到这样一条信息：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_91.png\" alt=\"\" width=\"400\"></div>\n\n<p>现在你懂了吧，其实可以看到之前人提交 commit 信息的 Change-Id，我们只需要复制一下（注意 <code>Change-Id:</code> 后面有个空格）然后改一下其中某个字母就可以了（因为 Change-Id 不允许重复，如果重复了，可以再改一个字母，一般只需要改一个字母就可以了），这时我们就有了一个人工生成的 <code>Change-Id</code> 了。 注意，这种办法只是一种临时解决方案，下次如果你再想 commit 就需要再复制一个 Change-Id，然后 –amend 修改 commit 信息，是不是感觉每次这样修改很麻烦？没事，我们有一个永久解决方案：</p>\n<h3 id=\"自动生成-Change-Id\"><a href=\"#自动生成-Change-Id\" class=\"headerlink\" title=\"自动生成 Change-Id\"></a>自动生成 Change-Id</h3><p>其实我们可以利用 commit-msg 这个 hook 文件自动生成 Change-Id，具体做法如下：</p>\n<ul>\n<li>将文章下面的 commit-msg hook 脚本复制到 git 项目中 .git/hooks 下，并命名为 commit-msg（一般情况下 .git/hooks 下会包含一个叫 commit-msg.sample 的文件，可以把它删除）</li>\n<li>添加完之后，执行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+x .git/hooks/commit-msg</span><br></pre></td></tr></table></figure>\n<p>激活 hook，以后提交的时候就会自动携带 Change-Id 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">\\<span class=\"comment\"># From Gerrit Code Review 2.6</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">\\<span class=\"comment\"># Part of Gerrit Code Review (http://code.google.com/p/gerrit/)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">\\<span class=\"comment\"># Copyright (C) 2009 The Android Open Source Project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">\\<span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span></span><br><span class=\"line\">\\<span class=\"comment\"># you may not use this file except in compliance with the License.</span></span><br><span class=\"line\">\\<span class=\"comment\"># You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">\\<span class=\"comment\"># http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">\\<span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\">\\<span class=\"comment\"># distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\">\\<span class=\"comment\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\">\\<span class=\"comment\"># See the License for the specific language governing permissions and</span></span><br><span class=\"line\">\\<span class=\"comment\"># limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">unset</span> GREP_OPTIONS</span><br><span class=\"line\"></span><br><span class=\"line\">CHANGE\\_ID\\_AFTER=<span class=\"string\">\"Bug|Issue\"</span></span><br><span class=\"line\">MSG=<span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"comment\"># Check for, and add if missing, a unique Change-Id</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_ChangeId</span></span>() &#123;</span><br><span class=\"line\">clean_message=`sed -e <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/^diff --git a\\\\/.*/&#123;</span></span><br><span class=\"line\"><span class=\"string\">s///</span></span><br><span class=\"line\"><span class=\"string\">q</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">/^Signed-off-by:/d</span></span><br><span class=\"line\"><span class=\"string\">/^#/d</span></span><br><span class=\"line\"><span class=\"string\">'</span> <span class=\"string\">\"<span class=\"variable\">$MSG</span>\"</span> | git stripspace`</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -z <span class=\"string\">\"<span class=\"variable\">$clean_message</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">return</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"comment\"># Does Change-Id: already exist? if so, exit (no change).</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> grep -i <span class=\"string\">'^Change-Id:'</span> <span class=\"string\">\"<span class=\"variable\">$MSG</span>\"</span> &gt;/dev/null</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">return</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">id=`\\_gen\\_ChangeId`</span><br><span class=\"line\">T=<span class=\"string\">\"<span class=\"variable\">$MSG</span>.tmp.$$\"</span></span><br><span class=\"line\">AWK=awk</span><br><span class=\"line\"><span class=\"keyword\">if</span> \\[ -x /usr/xpg4/bin/awk \\]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\\<span class=\"comment\"># Solaris AWK is just too broken</span></span><br><span class=\"line\">AWK=/usr/xpg4/bin/awk</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"comment\"># How this works:</span></span><br><span class=\"line\">\\<span class=\"comment\"># - parse the commit message as (textLine+ blankLine*)*</span></span><br><span class=\"line\">\\<span class=\"comment\"># - assume textLine+ to be a footer until proven otherwise</span></span><br><span class=\"line\">\\<span class=\"comment\"># - exception: the first block is not footer (as it is the title)</span></span><br><span class=\"line\">\\<span class=\"comment\"># - read textLine+ into a variable</span></span><br><span class=\"line\">\\<span class=\"comment\"># - then count blankLines</span></span><br><span class=\"line\">\\<span class=\"comment\"># - once the next textLine appears, print textLine+ blankLine* as these</span></span><br><span class=\"line\">\\<span class=\"comment\"># aren't footer</span></span><br><span class=\"line\">\\<span class=\"comment\"># - in END, the last textLine+ block is available for footer parsing</span></span><br><span class=\"line\"><span class=\"variable\">$AWK</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">BEGIN &#123;</span></span><br><span class=\"line\"><span class=\"string\">\\# while we start with the assumption that textLine+</span></span><br><span class=\"line\"><span class=\"string\">\\# is a footer, the first block is not.</span></span><br><span class=\"line\"><span class=\"string\">isFooter = 0</span></span><br><span class=\"line\"><span class=\"string\">footerComment = 0</span></span><br><span class=\"line\"><span class=\"string\">blankLines = 0</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# Skip lines starting with \"#\" without any spaces before it.</span></span><br><span class=\"line\"><span class=\"string\">/^#/ &#123; next &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# Skip the line starting with the diff command and everything after it,</span></span><br><span class=\"line\"><span class=\"string\">\\# up to the end of the file, assuming it is only patch data.</span></span><br><span class=\"line\"><span class=\"string\">\\# If more than one line before the diff was empty, strip all but one.</span></span><br><span class=\"line\"><span class=\"string\">/^diff --git a/ &#123;</span></span><br><span class=\"line\"><span class=\"string\">blankLines = 0</span></span><br><span class=\"line\"><span class=\"string\">while (getline) &#123; &#125;</span></span><br><span class=\"line\"><span class=\"string\">next</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# Count blank lines outside footer comments</span></span><br><span class=\"line\"><span class=\"string\">/^$/ &amp;&amp; (footerComment == 0) &#123;</span></span><br><span class=\"line\"><span class=\"string\">blankLines++</span></span><br><span class=\"line\"><span class=\"string\">next</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# Catch footer comment</span></span><br><span class=\"line\"><span class=\"string\">/^\\\\\\[\\[a-zA-Z0-9-\\]+:/ &amp;&amp; (isFooter == 1) &#123;</span></span><br><span class=\"line\"><span class=\"string\">footerComment = 1</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">/\\]$/ &amp;&amp; (footerComment == 1) &#123;</span></span><br><span class=\"line\"><span class=\"string\">footerComment = 2</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# We have a non-blank line after blank lines. Handle this.</span></span><br><span class=\"line\"><span class=\"string\">(blankLines &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"string\">print lines</span></span><br><span class=\"line\"><span class=\"string\">for (i = 0; i &lt; blankLines; i++) &#123;</span></span><br><span class=\"line\"><span class=\"string\">print \"\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">lines = \"\"</span></span><br><span class=\"line\"><span class=\"string\">blankLines = 0</span></span><br><span class=\"line\"><span class=\"string\">isFooter = 1</span></span><br><span class=\"line\"><span class=\"string\">footerComment = 0</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# Detect that the current block is not the footer</span></span><br><span class=\"line\"><span class=\"string\">(footerComment == 0) &amp;&amp; (!/^\\\\\\[?\\[a-zA-Z0-9-\\]+:/ || /^\\[a-zA-Z0-9-\\]+:\\\\/\\\\//) &#123;</span></span><br><span class=\"line\"><span class=\"string\">isFooter = 0</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">\\# We need this information about the current last comment line</span></span><br><span class=\"line\"><span class=\"string\">if (footerComment == 2) &#123;</span></span><br><span class=\"line\"><span class=\"string\">footerComment = 0</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">if (lines != \"\") &#123;</span></span><br><span class=\"line\"><span class=\"string\">lines = lines \"\\\\n\";</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">lines = lines $0</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\# Footer handling:</span></span><br><span class=\"line\"><span class=\"string\">\\# If the last block is considered a footer, splice in the Change-Id at the</span></span><br><span class=\"line\"><span class=\"string\">\\# right place.</span></span><br><span class=\"line\"><span class=\"string\">\\# Look for the right place to inject Change-Id by considering</span></span><br><span class=\"line\"><span class=\"string\">\\# CHANGE\\_ID\\_AFTER. Keys listed in it (case insensitive) come first,</span></span><br><span class=\"line\"><span class=\"string\">\\# then Change-Id, then everything else (eg. Signed-off-by:).</span></span><br><span class=\"line\"><span class=\"string\">#</span></span><br><span class=\"line\"><span class=\"string\">\\# Otherwise just print the last block, a new line and the Change-Id as a</span></span><br><span class=\"line\"><span class=\"string\">\\# block of its own.</span></span><br><span class=\"line\"><span class=\"string\">END &#123;</span></span><br><span class=\"line\"><span class=\"string\">unprinted = 1</span></span><br><span class=\"line\"><span class=\"string\">if (isFooter == 0) &#123;</span></span><br><span class=\"line\"><span class=\"string\">print lines \"\\\\n\"</span></span><br><span class=\"line\"><span class=\"string\">lines = \"\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">changeIdAfter = \"^(\" tolower(\"'</span><span class=\"string\">\"<span class=\"variable\">$CHANGE</span>\\_ID\\_AFTER\"</span><span class=\"string\">'\") \"):\"</span></span><br><span class=\"line\"><span class=\"string\">numlines = split(lines, footer, \"\\\\n\")</span></span><br><span class=\"line\"><span class=\"string\">for (line = 1; line &lt;= numlines; line++) &#123;</span></span><br><span class=\"line\"><span class=\"string\">if (unprinted &amp;&amp; match(tolower(footer\\[line\\]), changeIdAfter) != 1) &#123;</span></span><br><span class=\"line\"><span class=\"string\">unprinted = 0</span></span><br><span class=\"line\"><span class=\"string\">print \"Change-Id: I'</span><span class=\"string\">\"<span class=\"variable\">$id</span>\"</span><span class=\"string\">'\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">print footer\\[line\\]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">if (unprinted) &#123;</span></span><br><span class=\"line\"><span class=\"string\">print \"Change-Id: I'</span><span class=\"string\">\"<span class=\"variable\">$id</span>\"</span><span class=\"string\">'\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span> <span class=\"string\">\"<span class=\"variable\">$MSG</span>\"</span> &gt; <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> &amp;&amp; mv <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$MSG</span>\"</span> || rm -f <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\\_gen\\<span class=\"function\"><span class=\"title\">_ChangeIdInput</span></span>() &#123;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"tree \\`git write-tree\\`\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> parent=\\`git rev-parse <span class=\"string\">\"HEAD^0\"</span> 2&gt;/dev/null\\`</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"parent <span class=\"variable\">$parent</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"author \\`git var GIT\\_AUTHOR\\_IDENT\\`\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"committer \\`git var GIT\\_COMMITTER\\_IDENT\\`\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">'%s'</span> <span class=\"string\">\"<span class=\"variable\">$clean_message</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\\_gen\\<span class=\"function\"><span class=\"title\">_ChangeId</span></span>() &#123;</span><br><span class=\"line\">\\_gen\\_ChangeIdInput |</span><br><span class=\"line\">git <span class=\"built_in\">hash</span>-object -t commit --stdin</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add_ChangeId</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"change-id","path":"api/tags/change-id.json"}]},{"title":"在线接口地址总结","slug":"在线接口地址总结","date":"2017-08-20T12:37:00.000Z","updated":"2019-02-28T12:34:16.860Z","comments":true,"path":"api/articles/在线接口地址总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>我在这篇文章中总结了一些在线接口地址，这些接口可以很方便的进行在线调用，完成某些业务需求，不过由于公开 API 基本上没有盈利空间，所以有可能过一段时间就不再维护了，大家在使用之前一定要验证一下是否仍然有效</p>\n<h2 id=\"天气\"><a href=\"#天气\" class=\"headerlink\" title=\"天气\"></a>天气</h2><p>其实提供天气接口的网站很多，有人已经替我们总结好了，可以<a href=\"http://www.nohacks.cn/post-35.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，有些接口是需要知道自己的城市代码的，大家可以去<a href=\"http://www.weather.com.cn/\" target=\"_blank\" rel=\"noopener\">中国天气网首页</a>进行查询，不过我更推荐<a href=\"https://www.heweather.com/\" target=\"_blank\" rel=\"noopener\">和风天气</a>，和风天气需要注册成为认证开发者才能获得免费 7 天天气预报的资格，注册还是很简单的，差不多一天就能通过。目前和风天气提供的开发者免费天气服务：</p>\n<ul>\n<li>国内 3181+ 海外 4000 热门</li>\n<li><strong>7天天气预报</strong></li>\n<li>实况天气</li>\n<li>逐三小时预报</li>\n<li>生活指数（基础 8 项）</li>\n<li>空气质量实况（国控站点）</li>\n<li>每天访问量：14959 次</li>\n<li>稳定性：99%</li>\n<li>技术支持：邮件</li>\n</ul>\n<p>虽然免费 API 有访问限制，<strong>每天不得超过14959次</strong>，但是做天气数据缓存之后就应该够用了</p>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><h3 id=\"搜狐\"><a href=\"#搜狐\" class=\"headerlink\" title=\"搜狐\"></a>搜狐</h3><p>搜狐提供了一个获取本设备 IP 地址的接口：<a href=\"http://pv.sohu.com/cityjson?ie=utf-8\" target=\"_blank\" rel=\"noopener\">http://pv.sohu.com/cityjson?ie=utf-8</a>，其返回结果类似于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> returnCitySN = &#123;<span class=\"string\">\"cip\"</span>: <span class=\"string\">\"114.255.41.188\"</span>, <span class=\"string\">\"cid\"</span>: <span class=\"string\">\"110000\"</span>, <span class=\"string\">\"cname\"</span>: <span class=\"string\">\"北京市\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>不知道为什么明明是 json 格式，偏偏要写的不符合规范，所以在获取到 response 之后，还需要自己解析一下。</p>\n<h3 id=\"新浪\"><a href=\"#新浪\" class=\"headerlink\" title=\"新浪\"></a>新浪</h3><p>新浪提供了一个查询指定 IP 地址所在地理位置的接口：<a href=\"http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&amp;ip=114.255.41.188\" target=\"_blank\" rel=\"noopener\">http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&amp;ip=114.255.41.188</a>，其返回结果类似于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> remote\\_ip\\_info = &#123;<span class=\"string\">\"ret\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"start\"</span>:<span class=\"number\">-1</span>,<span class=\"string\">\"end\"</span>:<span class=\"number\">-1</span>,<span class=\"string\">\"country\"</span>:<span class=\"string\">\"\\\\u4e2d\\\\u56fd\"</span>,<span class=\"string\">\"province\"</span>:<span class=\"string\">\"\\\\u5317\\\\u4eac\"</span>,<span class=\"string\">\"city\"</span>:<span class=\"string\">\"\\\\u5317\\\\u4eac\"</span>,<span class=\"string\">\"district\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"isp\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"type\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"desc\"</span>:<span class=\"string\">\"\"</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>一些字段是 URL 编码过后的字符，所以需要使用 decodeURIComponent 来解码成中文</p>\n<h3 id=\"chaipip\"><a href=\"#chaipip\" class=\"headerlink\" title=\"chaipip\"></a>chaipip</h3><p><a href=\"http://chaipip.com/\" target=\"_blank\" rel=\"noopener\">http://chaipip.com/</a>，这是某大牛自己开发的一个根据 IP 地址查询实际地理位置的网站，不过网站加了很多防护，而且每人每天有查询次数的限制（最多 20 次），所以就用来自己使用吧- -</p>\n<h2 id=\"人脸识别\"><a href=\"#人脸识别\" class=\"headerlink\" title=\"人脸识别\"></a>人脸识别</h2><p>说到人脸识别，第一想到的肯定是 <a href=\"https://www.faceplusplus.com.cn/\" target=\"_blank\" rel=\"noopener\">Face++</a> 了，不过除了人脸识别，Face++ 目前还可以提供人体识别、文字识别和图像识别等等服务</p>\n<h2 id=\"地图\"><a href=\"#地图\" class=\"headerlink\" title=\"地图\"></a>地图</h2><p>目前我所了解的提供开放地图 API 的网站有三家：百度地图、高德地图和腾讯地图：</p>\n<ul>\n<li><a href=\"http://lbsyun.baidu.com/index.php\" target=\"_blank\" rel=\"noopener\">百度地图开放平台</a></li>\n<li><a href=\"https://lbs.amap.com/\" target=\"_blank\" rel=\"noopener\">高德地图API</a></li>\n<li><a href=\"http://lbs.qq.com/\" target=\"_blank\" rel=\"noopener\">腾讯地图API</a></li>\n</ul>\n<h2 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h2><p>目前有<a href=\"https://github.com/Binaryify/NeteaseCloudMusicApi\" target=\"_blank\" rel=\"noopener\">网易云音乐</a>（很全面，感谢作者一直在更新）和<a href=\"https://gitee.com/Tony.bin/search_web\" target=\"_blank\" rel=\"noopener\">酷狗音乐</a>，github 上有很多利用网易云音乐 API 做的项目，包括小程序、网页版、wap 版以及 electron 版，大家感兴趣的去同性交友网站上可以搜一下</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>我们知道通过 css 中的 <code>@font-face</code> 可以引入一些特殊字体，而现在 <a href=\"http://www.google.com/webfonts#ChoosePlace:select\" target=\"_blank\" rel=\"noopener\">Google Font Api</a> 也能实现，具体使用过程见大漠的文章——<a href=\"https://www.w3cplus.com/css/how-to-use-google-font-api\" target=\"_blank\" rel=\"noopener\">《Google Font的运用》</a></p>\n<h2 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h2><p><a href=\"http://hitokoto.cn/api\" target=\"_blank\" rel=\"noopener\">一言网</a>创立于 2016 年，隶属于萌创 Team，目前网站主要提供一句话服务。一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。或是感动，或是开心，亦或是单纯的回忆。这是一个我很喜欢的 API 服务，希望它永远不会停止吧！</p>\n<h2 id=\"北邮人论坛非官方-API\"><a href=\"#北邮人论坛非官方-API\" class=\"headerlink\" title=\"北邮人论坛非官方 API\"></a>北邮人论坛非官方 API</h2><p><a href=\"https://github.com/byr-gdp/byr-bbs-unofficial-api\" target=\"_blank\" rel=\"noopener\">北邮人论坛非官方 API</a>。基于 NodeJS，通过 <code>superagent</code> 抓取数据并用 <code>cheerio</code> 处理后返回 JSON 格式数据。目前有这些功能：</p>\n<ol>\n<li>获取十大信息</li>\n<li>获取版块主题列表</li>\n<li>获取主题回帖列表及精彩回复</li>\n<li>回复帖子</li>\n</ol>\n<p>不过好像 github 上提供的线上域名无法访问了，所以如果你需要使用的话，需要自己部署一下</p>\n<h2 id=\"名人生日\"><a href=\"#名人生日\" class=\"headerlink\" title=\"名人生日\"></a>名人生日</h2><p><a href=\"https://www.meiguoshenpo.com/shengrimingren/\" target=\"_blank\" rel=\"noopener\">美国神婆星座网</a>，提供名人生日查询、名人出生日期查询等,看看每一天都有哪些名人出生，哪些名人是和你一天出生的；不过目前只能通过爬取网页的形式来间接获取，没有开放 API 接口</p>\n<h2 id=\"表情图片\"><a href=\"#表情图片\" class=\"headerlink\" title=\"表情图片\"></a>表情图片</h2><p><a href=\"https://www.doutula.com/apidoc\" target=\"_blank\" rel=\"noopener\">斗图啦</a>，表情图片社区斗图啦提供的开放 api，调用很简单，可以很方便的结合 IM 软件开发一个表情机器人。</p>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">tinypng</a>是知名的免费压缩图片的网站，而同时其也提供了压缩图片的 API 服务，API key 申请地址：<a href=\"https://tinypng.com/developers\" target=\"_blank\" rel=\"noopener\">https://tinypng.com/developers</a>，调用这个网站提供的 API 需要申请一个 API key，输入邮箱，它会把包含 API key 的网址发到你邮箱，打开其中的链接就可以看到属于你的 API key 了；调用这个网站的 API 进行图片压缩的话，每个月前 500 张是免费的，之后要收费；不过既可以压缩 png 图片，又可以压缩 jpg 图片。</p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p>github 的接口 api 都是开放的，我们可以借助公开 API 构建一个属于自己的项目管理工具。官方文档有 v3 和v4 2个版本，v3 是 Restful，v4 是 GraphQL，v3 版地址： <a href=\"https://api.github.com\" target=\"_blank\" rel=\"noopener\">https://api.github.com</a> 在无 token 情况下使用 github 的 api，每分钟限制是 60 次请求，如果想完整的使用 github 的api，\b可以构建一个 <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">web application</a>，具体流程可以参考：<a href=\"https://juejin.im/post/5be5403ce51d453b6e027f06\" target=\"_blank\" rel=\"noopener\">【React 实战教程】从0到1 构建 github star管理工具</a></p>\n<h2 id=\"CDN资源\"><a href=\"#CDN资源\" class=\"headerlink\" title=\"CDN资源\"></a>CDN资源</h2><h3 id=\"cdnjs\"><a href=\"#cdnjs\" class=\"headerlink\" title=\"cdnjs\"></a>cdnjs</h3><p>具体开放 API 列表可以看这里：<a href=\"https://cdnjs.com/api\" target=\"_blank\" rel=\"noopener\">https://cdnjs.com/api</a>，你可以获取全部资源列表，也可以通过关键词进行搜索，还可以指定插件，功能比较强大</p>\n<h2 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h2><p><a href=\"https://github.com/matheuss/google-translate-api\" target=\"_blank\" rel=\"noopener\">google-translate-api</a>，一个免费且无限制的谷歌翻译 API 库，npm 引入一下即可使用</p>\n<h2 id=\"一些提供接口的网站\"><a href=\"#一些提供接口的网站\" class=\"headerlink\" title=\"一些提供接口的网站\"></a>一些提供接口的网站</h2><h3 id=\"Public-APIs\"><a href=\"#Public-APIs\" class=\"headerlink\" title=\"Public APIs\"></a><a href=\"https://github.com/toddmotto/public-apis\" target=\"_blank\" rel=\"noopener\">Public APIs</a></h3><p>用于软件和 Web 开发的免费 API 的集合列表，不过大部分都是国外的，国内使用比较麻烦。</p>\n<h3 id=\"HaoService数据平台\"><a href=\"#HaoService数据平台\" class=\"headerlink\" title=\"HaoService数据平台\"></a><a href=\"http://www.haoservice.com/apilist/\" target=\"_blank\" rel=\"noopener\">HaoService数据平台</a></h3><p>提供了很多数据接口服务，包括短信、语音验证码、银行卡归属地、手机归属地和天气等等，收费也比较良心，适合中小型公司使用。</p>\n<h3 id=\"RSSHub\"><a href=\"#RSSHub\" class=\"headerlink\" title=\"RSSHub\"></a><a href=\"https://docs.rsshub.app/#%E9%B8%A3%E8%B0%A2\" target=\"_blank\" rel=\"noopener\">RSSHub</a></h3><p>RSSHub 是一个轻量、易于扩展的 RSS 生成器, 可以给任何奇奇怪怪的内容生成 RSS 订阅源；同时该网页中包含了已有 RSS 内容的网址，涵盖多个领域，对于那些研究爬虫与内容订阅方向的童鞋来说是个福利。</p>\n<h3 id=\"京东万象\"><a href=\"#京东万象\" class=\"headerlink\" title=\"京东万象\"></a><a href=\"https://wx.jdcloud.com/api\" target=\"_blank\" rel=\"noopener\">京东万象</a></h3><p>向开发者提供国内外最全的金融数据、电商数据、运营商数据、京东数据、生活服务数据、应用开发数据、质检数据等接口,为开发者提供合法有效的优质 API 接口。京东万象,权威的数据交易平台。有收费的也有免费的，比如<a href=\"https://wx.jdcloud.com/search/datas?keyword=%E7%A9%BA%E6%B0%94%E8%B4%A8%E9%87%8F\" target=\"_blank\" rel=\"noopener\">空气质量相关API</a> 就是免费提供的。</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"接口","path":"api/tags/接口.json"},{"name":"API","path":"api/tags/API.json"}]},{"title":"他山之石，可以攻玉，好文章推荐","slug":"他山之石，可以攻玉，好文章推荐","date":"2017-08-07T03:40:22.000Z","updated":"2019-02-28T12:34:16.856Z","comments":true,"path":"api/articles/他山之石，可以攻玉，好文章推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>经常看别人的博客或者文章，有时候闲暇时间也会刷一刷微信公众号神马的（但其实微信公众号上的文章也是转载其他人的博客），所以难免会碰到一些“不想关闭”的文章，放到收藏夹里又怕哪天消失了，所以就放到这里吧，也可以节省大家寻找好文章的时间。（这些文章有些难度会比较大，不太推荐将大量的时间花费在“纠结原理”上）</p>\n<h2 id=\"人工智能相关\"><a href=\"#人工智能相关\" class=\"headerlink\" title=\"人工智能相关\"></a>人工智能相关</h2><h3 id=\"深入浅出看懂AlphaGo元\"><a href=\"#深入浅出看懂AlphaGo元\" class=\"headerlink\" title=\"深入浅出看懂AlphaGo元\"></a><a href=\"https://charlesliuyx.github.io/2017/10/18/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9C%8B%E6%87%82AlphaGo%E5%85%83/\" target=\"_blank\" rel=\"noopener\">深入浅出看懂AlphaGo元</a></h3><p>前段时间关于阿法狗的一篇文章（《今日Nature: 人工智能从0到1, 无师自通完爆阿法狗100-0 | 深度解析》）火爆了微信朋友圈，而关于阿法元是如何自我学习的，这篇文章讲述的很明白。</p>\n<h3 id=\"浅谈人工智能：现状、任务、构架与统一-正本清源\"><a href=\"#浅谈人工智能：现状、任务、构架与统一-正本清源\" class=\"headerlink\" title=\"浅谈人工智能：现状、任务、构架与统一 | 正本清源\"></a><a href=\"https://mp.weixin.qq.com/s/-wSYLu-XvOrsST8_KEUa-Q\" target=\"_blank\" rel=\"noopener\">浅谈人工智能：现状、任务、构架与统一 | 正本清源</a></h3><p>“人工智能”这个名词在沉寂了近 30 年之后，最近两年“咸鱼翻身”，成为了科技公司公关的战场、网络媒体吸睛的风口，随后受到政府的重视和投资界的追捧。于是，新闻发布会、高峰论坛接踵而来，政府战略规划出台，各种新闻应接不暇，宣告一个“智能为王”时代的到来。 到底什么是人工智能？现在的研究处于什么阶段？今后如何发展？这是大家普遍关注的问题。这篇文章用大篇幅解释了这些问题，目录如下：</p>\n<ul>\n<li>第一节 现状：正视现实</li>\n<li>第二节 未来：一只乌鸦给我们的启示</li>\n<li>第三节 历史：从“春秋五霸”到“战国六雄”</li>\n<li>第四节 统一：“小数据、大任务”范式与认知构架</li>\n<li>第五节 学科一：计算视觉 — 从“深”到“暗”</li>\n<li>第六节 学科二：认知推理 — 走进内心世界</li>\n<li>第七节 学科三：语言通讯 — 沟通的认知基础</li>\n<li>第八节 学科四：博弈伦理 — 获取、共享人类的价值观</li>\n<li>第九节 学科五：机器人学 — 构建大任务平台</li>\n<li>第十节 学科六：机器学习 — 学习的终极极限与“停机问题”</li>\n<li>第十一节 总结：智能科学 — 牛顿与达尔文的统一</li>\n</ul>\n<h2 id=\"前端相关\"><a href=\"#前端相关\" class=\"headerlink\" title=\"前端相关\"></a>前端相关</h2><h3 id=\"从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\"><a href=\"#从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\" class=\"headerlink\" title=\"从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！\"></a><a href=\"http://www.dailichun.com/2018/03/12/whenyouenteraurl.html\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></h3><p>该文梳理了一个较为完整的前端向知识体系，内容超多</p>\n<h3 id=\"玉伯《从前端技术到体验科技（附演讲视频）》\"><a href=\"#玉伯《从前端技术到体验科技（附演讲视频）》\" class=\"headerlink\" title=\"玉伯《从前端技术到体验科技（附演讲视频）》\"></a><a href=\"https://cnodejs.org/topic/5a54a8a4afa0a121784a8ab0\" target=\"_blank\" rel=\"noopener\">玉伯《从前端技术到体验科技（附演讲视频）》</a></h3><p>我想，玉伯大神应该不用过多介绍了吧，从之前的 seajs 到现在的 ant design，而玉伯大神也从一名前端工程师“进化”为一名架构师，这篇文章是玉伯大神在 SEE Conf 大会上的演讲记录，同时文章末尾还有演讲视频链接，不喜欢看文字的朋友可以直接看演讲视频。</p>\n<h3 id=\"哔哩哔哩（B站）的前端之路\"><a href=\"#哔哩哔哩（B站）的前端之路\" class=\"headerlink\" title=\"哔哩哔哩（B站）的前端之路\"></a><a href=\"https://zhuanlan.zhihu.com/p/32487533\" target=\"_blank\" rel=\"noopener\">哔哩哔哩（B站）的前端之路</a></h3><p>作者总结了 B站 的前端进阶之路，前端的轮子很多，作者介绍了 B站 是如何选型的以及遇到了哪些坑。</p>\n<h3 id=\"深入剖析-WebKit\"><a href=\"#深入剖析-WebKit\" class=\"headerlink\" title=\"深入剖析 WebKit\"></a><a href=\"http://www.starming.com/2017/10/11/deeply-analyse-webkit/\" target=\"_blank\" rel=\"noopener\">深入剖析 WebKit</a></h3><p>这篇文章和他的题目一样，真的很“深入”，因为你可以看到滚轮滑动的速度。。不过图文并茂的表现形式并不会让你产生“看不下去”的感觉，来张目录感受一下是不是干货：</p>\n<div align=\"center\"><img src=\"\" alt=\"/images/hexo_post_286.png\" width=\"400\"></div>\n\n<h3 id=\"前端文章-收藏集-掘金\"><a href=\"#前端文章-收藏集-掘金\" class=\"headerlink\" title=\"前端文章- 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000010452096\" target=\"_blank\" rel=\"noopener\">前端文章- 收藏集 - 掘金</a></h3><p>掘金上面关于前端的文章集合，闲暇时间看一下，可能会有意想不到的收获</p>\n<h3 id=\"前端工程——基础篇\"><a href=\"#前端工程——基础篇\" class=\"headerlink\" title=\"前端工程——基础篇\"></a><a href=\"https://github.com/fouber/blog/issues/10\" target=\"_blank\" rel=\"noopener\">前端工程——基础篇</a></h3><p>fis 作者张玉龙对于前端工程的理解，从组件化到资源管理都阐述了自己的观点，这是一篇 2015 年的文章，但是文中的某些观念到现在看来仍然是字字珠玑，相信看完之后的你可以对前端有更深层次的理解。</p>\n<h3 id=\"大公司里怎样开发和部署前端代码？\"><a href=\"#大公司里怎样开发和部署前端代码？\" class=\"headerlink\" title=\"大公司里怎样开发和部署前端代码？\"></a><a href=\"https://github.com/fouber/blog/issues/6\" target=\"_blank\" rel=\"noopener\">大公司里怎样开发和部署前端代码？</a></h3><p>又是张玉龙的文章，通过一个实际的场景一步步的告诉你大公司的前端代码是如何开发和部署上线的。</p>\n<h3 id=\"Web-前端知识体系精简\"><a href=\"#Web-前端知识体系精简\" class=\"headerlink\" title=\"Web 前端知识体系精简\"></a><a href=\"http://www.cnblogs.com/onepixel/p/7021506.html\" target=\"_blank\" rel=\"noopener\">Web 前端知识体系精简</a></h3><p>从前端三剑客：HTML、CSS、Javascript 的角度分析了前端的知识体系，涉及到的领域比较广泛，很适合前端新人开拓视野和寻找学习方向，同时总结的也很全面，是一篇不错的入门教材。</p>\n<h3 id=\"移动时代的前端加密\"><a href=\"#移动时代的前端加密\" class=\"headerlink\" title=\"移动时代的前端加密\"></a><a href=\"http://div.io/topic/1220\" target=\"_blank\" rel=\"noopener\">移动时代的前端加密</a></h3><p>这篇文章篇幅很长，对于前端来说，很多人感觉“加密”是莫须有的一种东西，其实这是一种误解，“加密”并不意味着绝对安全，这篇文章将从这个角度向你阐述前端加密的正确姿势。</p>\n<h3 id=\"前端疲劳\"><a href=\"#前端疲劳\" class=\"headerlink\" title=\"前端疲劳\"></a><a href=\"http://www.jianshu.com/p/a2eff3d721cb\" target=\"_blank\" rel=\"noopener\">前端疲劳</a></h3><p>有这么多不同的前端技术栈，不同的前端框架，不同的前端工具和库像水一样包裹着我，我不去学就不会，学了又学不完。在前端的海洋里越陷越深的我究竟该如何自救呢？这篇文章可能有你要的答案</p>\n<h3 id=\"精读前后端渲染之争\"><a href=\"#精读前后端渲染之争\" class=\"headerlink\" title=\"精读前后端渲染之争\"></a><a href=\"https://github.com/camsong/blog/issues/8\" target=\"_blank\" rel=\"noopener\">精读前后端渲染之争</a></h3><p>前后端渲染一直以来都是一个带有争议的话题，而该文章的作者对<a href=\"https://medium.freecodecamp.org/heres-why-client-side-rendering-won-46a349fadb52\" target=\"_blank\" rel=\"noopener\">国外一篇关于前后端渲染的文章</a>进行了精读，介绍了前后端渲染各自的优缺点，以及我们在实际项目中如何取舍。</p>\n<h3 id=\"技术雷达之「微前端」-将微服务理念扩展到前端开发\"><a href=\"#技术雷达之「微前端」-将微服务理念扩展到前端开发\" class=\"headerlink\" title=\"技术雷达之「微前端」- 将微服务理念扩展到前端开发\"></a><a href=\"https://zhuanlan.zhihu.com/p/32378432\" target=\"_blank\" rel=\"noopener\">技术雷达之「微前端」- 将微服务理念扩展到前端开发</a></h3><p>看标题就知道，这是一篇基本上看不懂的文章，不过图文并茂的形式让这篇文章生动了很多，内容很充实，覆盖面很广</p>\n<h3 id=\"理解-Web-路由\"><a href=\"#理解-Web-路由\" class=\"headerlink\" title=\"理解 Web 路由\"></a><a href=\"https://zhuanlan.zhihu.com/p/24814675\" target=\"_blank\" rel=\"noopener\">理解 Web 路由</a></h3><p>关于路由，其实是一个很抽象的概念，而这篇文章对经常提到的前端路由和后端路由的实现和区别进行了很详细很清晰的讲解，同时对动态路由和严格路由也进行了介绍。</p>\n<h3 id=\"一站到底—前端基础之网络\"><a href=\"#一站到底—前端基础之网络\" class=\"headerlink\" title=\"一站到底—前端基础之网络\"></a><a href=\"https://juejin.im/post/5b3357556fb9a00e5a4b63df\" target=\"_blank\" rel=\"noopener\">一站到底—前端基础之网络</a></h3><p>这篇文章算是近几年来我读过的信息量最大、知识点最全的文章了，作者从访问一个网址说起，为读者建立了一个健全的网络知识体系，该文章解答了以下问题：</p>\n<p><strong>必会：</strong></p>\n<ul>\n<li>http 报文都有哪些内容？</li>\n<li>HTTP 协议头含有哪些重要的部分，HTTP 状态码？</li>\n<li>HTTP 状态码状态码都有哪些？</li>\n<li>什么是强缓存？什么是弱缓存？</li>\n<li>浏览器的现缓存机制是什么？如何设置 HTTP 缓存？</li>\n<li>你知道有哪些 HTTP 方法？POST 和 PUT 有什么区别？</li>\n<li>如何对数据进行压缩（ZLIB），Gzip? 压缩的范围是什么，请求头会压缩吗？</li>\n<li>跨域，为什么 JS 会对跨域做出限制？如何允许跨域?</li>\n</ul>\n<p><strong>基础：</strong></p>\n<ul>\n<li>影响网速的原因有哪些？网络丢包的主要原因是什么？</li>\n<li>网络体系结构的五层参考模型都是什么？它们之间的关系是什么？</li>\n<li>我们常听到报文、段（分组）、数据报、帧、和数据包，它们有什么关系？</li>\n<li>Ajax 能发送 http 请求，它和 http 有什么样的关系？</li>\n<li>HTTP1.0 到 HTTP1.1 解决了什么问题？</li>\n<li>http2 有什么特性？</li>\n<li>http1.1 为什么会有队首阻塞？</li>\n<li>SSL 与 TLS 关系？HTTPS 协议如何实现？</li>\n</ul>\n<p><strong>补课与拓展：（慢慢更新）</strong></p>\n<ul>\n<li>常用的传输层协议有哪些？TCP 和 UDP 分别有什么特点？</li>\n<li>解释一下 TCP 的三次握手和四次挥手？</li>\n<li>为什么说 TCP 可能是网络通信的瓶颈？如何解决 TCP 队首阻塞？</li>\n<li>谷歌新出 QUIC 为什么要基于 UDP？</li>\n<li>QUIC 有哪些新特性，解决了什么问题？</li>\n</ul>\n<h3 id=\"WEB-服务器探究\"><a href=\"#WEB-服务器探究\" class=\"headerlink\" title=\"WEB 服务器探究\"></a><a href=\"https://wangzitian0.github.io/2017/06/27/WEB-server-explore/\" target=\"_blank\" rel=\"noopener\">WEB 服务器探究</a></h3><p>作者介绍了 web 服务器的基本概念，和常见的服务端演替路线。图文并茂的方式很容易理解，干货满满。</p>\n<h3 id=\"网站性能优化实战——从12-67s到1-06s的故事\"><a href=\"#网站性能优化实战——从12-67s到1-06s的故事\" class=\"headerlink\" title=\"网站性能优化实战——从12.67s到1.06s的故事\"></a><a href=\"http://imweb.io/topic/5b6fd3c13cb5a02f33c013bd\" target=\"_blank\" rel=\"noopener\">网站性能优化实战——从12.67s到1.06s的故事</a></h3><p>作者将<a href=\"http://jerryonlyzrj.com/resume/\" target=\"_blank\" rel=\"noopener\">自己的在线简历</a>进行了性能优化，首屏时间从 12.67s 降低到了 1.06s，这个过程中作者踩了很多坑，翻阅了很多书籍，最终总结出了这篇文章。文章涉及到的知识点比较全面，对性能优化进行了系统的介绍。</p>\n<h3 id=\"现代-Web-开发基础与工程实践\"><a href=\"#现代-Web-开发基础与工程实践\" class=\"headerlink\" title=\"现代 Web 开发基础与工程实践\"></a><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">现代 Web 开发基础与工程实践</a></h3><p>前端大牛@王下邀月熊的著作，对 Web 开发基础与工程实践的相关博客、示例代码与开源项目、整理成的系列书籍等内容进行了总结，信息量异常庞大，包含以下篇章：</p>\n<ul>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%AF%BC%E8%AE%BA\" target=\"_blank\" rel=\"noopener\">导论篇</a>: Web 开发简史与运行机制，数据流驱动的界面，模块化与组件化，工具化与工程化，前后端分离与 GraphQL，大前端与 WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%9F%BA%E7%A1%80\" target=\"_blank\" rel=\"noopener\">基础篇</a>: 对于 HTML、CSS、DOM 等 Web 开发中涉及的基础知识与理念的总结介绍。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5\" target=\"_blank\" rel=\"noopener\">工程实践篇</a>: 构建工具，测试，安全，WebAssembly。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96%E7%AF%87\" target=\"_blank\" rel=\"noopener\">架构优化篇</a>: 组件化，状态管理，性能优化，PWA。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\" target=\"_blank\" rel=\"noopener\">React 篇</a>：近年来前端领域百花齐放，各种技术方案争妍斗艳，各领风骚。本书立足于其中的佼佼者 React，深入浅出的介绍 React、Webpack 、 ES6、Redux 、 MobX 等常见前端开发工具与开发库的用法，帮助初学者能够迅速成为一名合格前端工程师。而本书也不仅局限于工具使用的层面，探寻各种技术方案背后蕴含的设计思想与架构模式，从前端工程化的角度讨论前端开发者在进阶过程中需要掌握的工程实践、模块化与组件化、质量保障、性能优化等知识要点。最终帮助开发者在前端开发中能够因地制宜的指定合理方案，以尽可能快的速度实现可信赖的产品。</li>\n<li><a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/Vue\" target=\"_blank\" rel=\"noopener\">Vue 篇</a>：本部分目前正逐步启动，笔者的初衷是希望能够保证本书章节与 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\" target=\"_blank\" rel=\"noopener\">React 与前端工程化实践</a>尽可能一致，从而更方便地去介绍不同技术栈下相通的设计理念；目前本书的目录只是拷贝自 <a href=\"https://github.com/wxyyxc1992/Web-Series/blob/master/React\" target=\"_blank\" rel=\"noopener\">React 与前端工程化实践</a>，未来笔者会逐步完善。</li>\n</ul>\n<h3 id=\"雅虎前端优化35条规则翻译\"><a href=\"#雅虎前端优化35条规则翻译\" class=\"headerlink\" title=\"雅虎前端优化35条规则翻译\"></a><a href=\"https://github.com/creeperyang/blog/issues/1\" target=\"_blank\" rel=\"noopener\">雅虎前端优化35条规则翻译</a></h3><p>本文是大名鼎鼎的雅虎前端优化规则（<strong>Yslow</strong>）的翻译。作者对其中的一些例子进行了精简。</p>\n<h3 id=\"前端知识体系目录\"><a href=\"#前端知识体系目录\" class=\"headerlink\" title=\"前端知识体系目录\"></a><a href=\"http://hao.jser.com/archive/5314/\" target=\"_blank\" rel=\"noopener\">前端知识体系目录</a></h3><p>从基础到进阶，从 HTML、CSS、JS 到 HTTP，简单的总结了前端领域需要了解的知识点，同时推荐了一些书籍，对于那些想要入坑前端的童鞋来说是一份不错的指引文档。</p>\n<h3 id=\"微前端的那些事儿\"><a href=\"#微前端的那些事儿\" class=\"headerlink\" title=\"微前端的那些事儿\"></a><a href=\"https://github.com/phodal/microfrontends\" target=\"_blank\" rel=\"noopener\">微前端的那些事儿</a></h3><blockquote>\n<p>微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为<strong>多个小型前端应用聚合为一的应用</strong>。各个前端应用还可以<strong>独立运行</strong>、<strong>独立开发</strong>、<strong>独立部署</strong>。</p>\n</blockquote>\n<p>这篇文章是 phodal 对于微前端的解读，包括其实现方式以及方案对比，而微服务与前端的结合会有多大的优势，值得期待。</p>\n<h3 id=\"2018-前端常见题汇总\"><a href=\"#2018-前端常见题汇总\" class=\"headerlink\" title=\"2018 前端常见题汇总\"></a><a href=\"https://github.com/qianbin01/frontend_train\" target=\"_blank\" rel=\"noopener\">2018 前端常见题汇总</a></h3><p>汇总了前端一些问题，作者不定时更新，建议收藏</p>\n<ol>\n<li><a href=\"https://github.com/qianbin01/frontend_train#html\" target=\"_blank\" rel=\"noopener\">HTML 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#css\" target=\"_blank\" rel=\"noopener\">CSS 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#javascript\" target=\"_blank\" rel=\"noopener\">JAVASCRIPT 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#dom\" target=\"_blank\" rel=\"noopener\">DOM 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#http\" target=\"_blank\" rel=\"noopener\">HTTP 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#vue\" target=\"_blank\" rel=\"noopener\">VUE 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#sort\" target=\"_blank\" rel=\"noopener\">算法相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#web\" target=\"_blank\" rel=\"noopener\">网络安全相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#webpack\" target=\"_blank\" rel=\"noopener\">webpack 相关</a></li>\n<li><a href=\"https://github.com/qianbin01/frontend_train#other\" target=\"_blank\" rel=\"noopener\">其他</a></li>\n</ol>\n<h3 id=\"InfoQ-趋势报告之-JavaScript-和-Web-开发\"><a href=\"#InfoQ-趋势报告之-JavaScript-和-Web-开发\" class=\"headerlink\" title=\"InfoQ 趋势报告之 JavaScript 和 Web 开发\"></a><a href=\"https://www.infoq.cn/article/TFXQXkWbPPM*cK5KFJrW\" target=\"_blank\" rel=\"noopener\">InfoQ 趋势报告之 JavaScript 和 Web 开发</a></h3><p>文章简单介绍了 Javascript 生态系统的现状和发展历程，文中提到了很多名词和框架，是一篇很不错的“扫盲”文章。</p>\n<h3 id=\"2019-Web开发技术指南和趋势\"><a href=\"#2019-Web开发技术指南和趋势\" class=\"headerlink\" title=\"2019 - Web开发技术指南和趋势\"></a><a href=\"https://www.jianshu.com/p/062c978d9f04\" target=\"_blank\" rel=\"noopener\">2019 - Web开发技术指南和趋势</a></h3><p>这是一个 2019 年你成为前端，后端或全栈开发者的进阶指南:</p>\n<ol>\n<li>你不需要学习所有的技术成为一个 web 开发者</li>\n<li>这个指南只是通过简单分类列出了技术选项</li>\n<li>我将从我的经验和参考中给出建议</li>\n<li>首选我们会介绍通用的知识, 最后介绍 2019 年的 Web 的一些趋势</li>\n</ol>\n<p>要想知道更多细节, 请看 Youtube 视频: <a href=\"https://www.youtube.com/watch?v=UnTQVlqmDQ0&amp;t=18s\" target=\"_blank\" rel=\"noopener\">Web Development in 2019</a></p>\n<h3 id=\"前端模块化详解-完整版\"><a href=\"#前端模块化详解-完整版\" class=\"headerlink\" title=\"前端模块化详解(完整版)\"></a><a href=\"https://juejin.im/post/5c17ad756fb9a049ff4e0a62\" target=\"_blank\" rel=\"noopener\">前端模块化详解(完整版)</a></h3><p>这篇文章内容主要有理解模块化，为什么要模块化，模块化的优缺点以及模块化规范，并且介绍下开发中最流行的 CommonJS, AMD, ES6、CMD 规范。作者试图站在小白的角度，用通俗易懂的笔调介绍这些枯燥无味的概念，希望屏幕前的你阅读后，对模块化编程有个全新的认识和理解！</p>\n<h3 id=\"2018-前端性能优化清单\"><a href=\"#2018-前端性能优化清单\" class=\"headerlink\" title=\"2018 前端性能优化清单\"></a><a href=\"https://cherryblog.site/front-end-performance-checklist-2018.html\" target=\"_blank\" rel=\"noopener\">2018 前端性能优化清单</a></h3><p>英文原文：<a href=\"https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/\" target=\"_blank\" rel=\"noopener\">https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/</a>，文章较长，需要比较长的时间才能读完，涉及到的地方非常全面，五星推荐。</p>\n<h3 id=\"列一份前端知识架构图\"><a href=\"#列一份前端知识架构图\" class=\"headerlink\" title=\"列一份前端知识架构图\"></a><a href=\"https://time.geekbang.org/column/article/77804\" target=\"_blank\" rel=\"noopener\">列一份前端知识架构图</a></h3><p>计算机之子“Winter”列的一份前端知识框架图</p>\n<h3 id=\"茴字的四种写法—移动适配方案的进化\"><a href=\"#茴字的四种写法—移动适配方案的进化\" class=\"headerlink\" title=\"茴字的四种写法—移动适配方案的进化\"></a><a href=\"https://segmentfault.com/a/1190000014309664\" target=\"_blank\" rel=\"noopener\">茴字的四种写法—移动适配方案的进化</a></h3><p>这是一篇一站式的文章，可以系统的了解前端适配的演进。</p>\n<h3 id=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"><a href=\"#现代前端开发路线图：从零开始，一步步成为前端工程师\" class=\"headerlink\" title=\"现代前端开发路线图：从零开始，一步步成为前端工程师\"></a><a href=\"https://36kr.com/p/5128487.html\" target=\"_blank\" rel=\"noopener\">现代前端开发路线图：从零开始，一步步成为前端工程师</a></h3><p>很多人都想学编程。但是苦于没有具体的步骤和指导。比如想找份前端开发的工作，却不知道应该先学习什么再学习什么，也不知道该选择什么样的工具。因为经常被人问到类似的问题，全栈开发者Kamran Ahmed索性在github上制订了一份<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"noopener\">现代前端开发的路线图</a>，并且用<a href=\"https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c\" target=\"_blank\" rel=\"noopener\">一篇文章</a>对前端开发的整个学习过程进行了详细解释。感兴趣的初学者不容错过。</p>\n<p>而这篇文章的目的就是依次解释路线图的每一个步骤，对于前端初学者来说具有指引作用。</p>\n<h2 id=\"JS相关\"><a href=\"#JS相关\" class=\"headerlink\" title=\"JS相关\"></a>JS相关</h2><h3 id=\"统一回复《怎么学JavaScript？》\"><a href=\"#统一回复《怎么学JavaScript？》\" class=\"headerlink\" title=\"统一回复《怎么学JavaScript？》\"></a><a href=\"http://www.qdfuns.com/notes/17398/d3f6dd40e2d3ff15b209810dfa98be0b:storey-71.html\" target=\"_blank\" rel=\"noopener\">统一回复《怎么学JavaScript？》</a></h3><p>作者通过自己的经历告诉大家：如何学习前端。这是一篇很不错的前端入门文章，作者推荐了一些前端方面的书籍，同时还注明了这些书籍适合什么时候阅读以及适合怎样阅读，建议仍然不知道如何学前端的你好好看一下这篇文章</p>\n<h3 id=\"javascript-的-12-个怪癖（quirks）\"><a href=\"#javascript-的-12-个怪癖（quirks）\" class=\"headerlink\" title=\"javascript 的 12 个怪癖（quirks）\"></a><a href=\"http://justjavac.com/javascript/2013/04/08/12-javascript-quirks.html\" target=\"_blank\" rel=\"noopener\">javascript 的 12 个怪癖（quirks）</a></h3><p>实际上 javascript 是一个相当简洁的语言，但是也难免会有一些怪癖（quirks）。这是作者翻译的国外一个开发者的系列文章，同时在我发布之前（2017-8-7），作者还没有翻译团队，如果有英语比较好的前端小伙伴，欢迎加入翻译的队伍中，像我这种英语“战五渣”表示只能“拿来”了。。</p>\n<h3 id=\"80-应聘者都不及格的-JS-面试题\"><a href=\"#80-应聘者都不及格的-JS-面试题\" class=\"headerlink\" title=\"80% 应聘者都不及格的 JS 面试题\"></a><a href=\"https://juejin.im/post/58cf180b0ce4630057d6727c\" target=\"_blank\" rel=\"noopener\">80% 应聘者都不及格的 JS 面试题</a></h3><p>从最简单的 setTimeout() 执行队列，到自执行函数产生闭包，再到 ES6 中的 promise 以及 ES7 中的 async 和 await，作者通过一道不断延伸出来的js面试题讲解了在面试中经常遇到的问题，同时对以上的这些知识点进行了概括总结</p>\n<h3 id=\"翻译-We-have-a-problem-with-promises\"><a href=\"#翻译-We-have-a-problem-with-promises\" class=\"headerlink\" title=\"[翻译] We have a problem with promises\"></a><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">[翻译] We have a problem with promises</a></h3><p>promise 一直是被认为判断一名“前端工程师”是否仍然处在“初级”的利器，而这篇文章通过 promise 相关的四段代码对 promise 进行了深入剖析，这是一篇译文，英文原文可以<a href=\"http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看</p>\n<h3 id=\"学用-JavaScript-设计模式\"><a href=\"#学用-JavaScript-设计模式\" class=\"headerlink\" title=\"学用 JavaScript 设计模式\"></a><a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/constructor-mode.html\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式</a></h3><p>设计模式的概念很早之前就有了，而 JS 虽然之前一直被认为是“做网页”的语言，但是JS中也有设计模式的思想，相信看完这个系列的文章之后，你会对 JS 有更加深入的理解，该系列文章对于没有“面向对象”语言基础的童鞋来说可能会有些难度，建议在看的过程中及时查阅其他资料。</p>\n<h3 id=\"ajax跨域，这应该是最全的解决方案了\"><a href=\"#ajax跨域，这应该是最全的解决方案了\" class=\"headerlink\" title=\"ajax跨域，这应该是最全的解决方案了\"></a><a href=\"https://segmentfault.com/a/1190000012469713\" target=\"_blank\" rel=\"noopener\">ajax跨域，这应该是最全的解决方案了</a></h3><p>看题目就很屌，恩。。</p>\n<h3 id=\"jQuery的document-ready与-onload事件——你真的思考过吗？\"><a href=\"#jQuery的document-ready与-onload事件——你真的思考过吗？\" class=\"headerlink\" title=\"jQuery的document ready与 onload事件——你真的思考过吗？\"></a><a href=\"https://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></h3><p>虽然题目看似和 jQuery 关系很大，但其实作者探究了很多 JS 相关问题，包括加载顺序以及 load 事件的产生原因，内容短小精悍，值得一看。下面这些问题是作者在文中所阐述探索的：</p>\n<ol>\n<li>window.onload 到底是什么加载完触发？</li>\n<li>body 为什么会有 onload 事件？</li>\n<li>为什么是 window.onload，而不是 document.onload？</li>\n<li>document ready到底是什么 ready，DOM 渲染完成？</li>\n<li>jQuery 怎么实现 $(document).ready？</li>\n<li>jQuery 的 ready，还能 ready 什么？</li>\n<li>jQuery 的 document ready 就一定比 window.onload 快吗？</li>\n<li>为什么外部 script 文件放页面内容后面好，是一定的吗？</li>\n</ol>\n<h3 id=\"10-分钟了解-JS-堆、栈以及事件循环的概念\"><a href=\"#10-分钟了解-JS-堆、栈以及事件循环的概念\" class=\"headerlink\" title=\"10 分钟了解 JS 堆、栈以及事件循环的概念\"></a><a href=\"https://github.com/BooheeFE/weekly/issues/2\" target=\"_blank\" rel=\"noopener\">10 分钟了解 JS 堆、栈以及事件循环的概念</a></h3><p>作者通过 <code>JS的内存机制</code>以及<code>事件机制</code>和<code>大量的（例子）</code>来讲解栈、堆究竟是个什么玩意。概念比较多，不用死读，把所有的实例代码手敲一遍就很清楚了，作者讲的很透彻，该文章来自于<a href=\"https://github.com/BooheeFE/weekly\" target=\"_blank\" rel=\"noopener\">薄荷前端周刊</a>，该周刊发布的文章都蛮不错的，建议阅读~</p>\n<h3 id=\"7-分钟理解-JS-的节流、防抖及使用场景\"><a href=\"#7-分钟理解-JS-的节流、防抖及使用场景\" class=\"headerlink\" title=\"7 分钟理解 JS 的节流、防抖及使用场景\"></a><a href=\"https://juejin.im/post/5b8de829f265da43623c4261?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">7 分钟理解 JS 的节流、防抖及使用场景</a></h3><p>防抖和节流是两个很重要也经常会用到的知识点，这篇文章的重点并不是介绍它们的实现原理，而是着眼于它们的应用效果和应用场景，文中对于防抖和节流产生效果的总结很通俗易懂：</p>\n<blockquote>\n<p>函数防抖就是法师发技能的时候要读条，技能读条没完再按技能就会重新读条。<br>函数节流就是 fps 游戏的射速，就算一直按着鼠标射击，也只会在规定射速内射出子弹。</p>\n</blockquote>\n<h3 id=\"精读-The-Cost-of-JavaScript\"><a href=\"#精读-The-Cost-of-JavaScript\" class=\"headerlink\" title=\"精读 The Cost of JavaScript\"></a><a href=\"https://zhuanlan.zhihu.com/p/41292532\" target=\"_blank\" rel=\"noopener\">精读 The Cost of JavaScript</a></h3><p>Addy 在 <a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\" target=\"_blank\" rel=\"noopener\">The Cost of JavaScript In 2018</a>一文中分享了在保证用户友好交互体验的前提下如何高效分发 JavaScript 的开发经验，而我现在推荐的这篇文章是一篇导读文章，原文作者首先将全文的内容压缩成几条观点总结出来，之后从用户体验为 Web 带来的变化开始说起，到 JavaScript 的成本有哪些、它们为何如此高昂、如何降低开销以及持续集成，全文形成一个非常完整的优化流程：</p>\n<ol>\n<li>写在开头的话</li>\n<li>膨胀的 JavaScript 与 Web 现状</li>\n<li>JavaScript 的成本所在</li>\n<li>页面交互性解释与建议</li>\n<li>处理 JavaScript 成本为何如此昂贵</li>\n<li>千差万别的移动用户与应对策略</li>\n<li>分发更少 JavaScript 的常见技巧</li>\n<li>持续集成四部曲</li>\n</ol>\n<h3 id=\"深入理解javascript原型和闭包系列\"><a href=\"#深入理解javascript原型和闭包系列\" class=\"headerlink\" title=\"深入理解javascript原型和闭包系列\"></a><a href=\"http://www.cnblogs.com/wangfupeng1988/p/4001284.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包系列</a></h3><p>本系列有 16 篇文章，外加两篇后补的，一共 18 篇文章。将原型和闭包相关知识都进行了讲解，知识点很全，图文并茂。</p>\n<h3 id=\"JavaScript-模块化七日谈\"><a href=\"#JavaScript-模块化七日谈\" class=\"headerlink\" title=\"JavaScript 模块化七日谈\"></a><a href=\"https://github.com/Huxpro/js-module-7day\" target=\"_blank\" rel=\"noopener\">JavaScript 模块化七日谈</a></h3><p>作者以 slide 的形式讲解了 JS 模块化的发展历程，目录：</p>\n<ul>\n<li>第一日 上古时期 <em><strong>Module?</strong></em> 从设计模式说起</li>\n<li>第二日 石器时代 <em><strong>Script Loader</strong></em> 只有封装性可不够，我们还需要加载</li>\n<li>第三日 蒸汽朋克 <em><strong>Module Loader</strong></em> 模块化架构的工业革命</li>\n<li>第四日 号角吹响 <em><strong>CommonJS</strong></em> 征服世界的第一步是跳出浏览器</li>\n<li>第五日 双塔奇兵 <em><strong>AMD/CMD</strong></em> 浏览器环境模块化方案</li>\n<li>第六日 精灵宝钻 <em><strong>Browserify/Webpack</strong></em> 大势所趋，去掉这层包裹！</li>\n<li>第七日 王者归来 <em><strong>ES6 Module</strong></em> 最后的战役</li>\n</ul>\n<h3 id=\"写了-10-年-Javascript-未必全了解的连续赋值运算\"><a href=\"#写了-10-年-Javascript-未必全了解的连续赋值运算\" class=\"headerlink\" title=\"写了 10 年 Javascript 未必全了解的连续赋值运算\"></a><a href=\"https://yanhaijing.com/javascript/2012/04/05/javascript-continuous-assignment-operator/\" target=\"_blank\" rel=\"noopener\">写了 10 年 Javascript 未必全了解的连续赋值运算</a></h3><p><code>a.x = a = {n:2}</code> 是一个连续赋值表达式。 这个连续赋值表达式在引擎内部究竟发生了什么？是如何解释的？作者从这一问题出发，对 JS 中的变量定义规则进行了研究。</p>\n<h3 id=\"每个-JavaScript-工程师都应懂的33个概念\"><a href=\"#每个-JavaScript-工程师都应懂的33个概念\" class=\"headerlink\" title=\"每个 JavaScript 工程师都应懂的33个概念\"></a><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">每个 JavaScript 工程师都应懂的33个概念</a></h3><p>这篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。 由于原版资源都要翻墙，所以作者创立了一个中文版，附上关于 JS 中的 33 个概念在国内的一些文章和视频。所以这可以看做是一个文章 / 视频集合，闲来无事的时候可以看一下巩固一下基础概念。</p>\n<h3 id=\"前端网老姚浅谈：怎么学-JavaScript？\"><a href=\"#前端网老姚浅谈：怎么学-JavaScript？\" class=\"headerlink\" title=\"前端网老姚浅谈：怎么学 JavaScript？\"></a><a href=\"https://zhuanlan.zhihu.com/p/23265155\" target=\"_blank\" rel=\"noopener\">前端网老姚浅谈：怎么学 JavaScript？</a></h3><p>前端老姚对如何学习JS这一问题的解答，主要回答了以下几个问题：</p>\n<ul>\n<li>看书有啥好处</li>\n<li>看什么书</li>\n<li>怎么看书</li>\n<li>看书的层次</li>\n<li>利用源码进行学习</li>\n<li>时间、兴趣等问题</li>\n</ul>\n<h3 id=\"Effective-JavaScript\"><a href=\"#Effective-JavaScript\" class=\"headerlink\" title=\"Effective JavaScript\"></a><a href=\"https://github.com/dreamapplehappy/effective-javascript\" target=\"_blank\" rel=\"noopener\">Effective JavaScript</a></h3><p>关于原生 JS 的 68 个实例，理论上,实践过下面的 68 个项目之后,你的JS能力应该有一个质的飞跃</p>\n<h3 id=\"how-javascript-works\"><a href=\"#how-javascript-works\" class=\"headerlink\" title=\"how javascript works\"></a><a href=\"https://github.com/Troland/how-javascript-works\" target=\"_blank\" rel=\"noopener\">how javascript works</a></h3><p>本文是翻译介绍 JavaScript 的工作原理的，该系列原文还在更新中，原文见<a href=\"https://blog.sessionstack.com/tagged/tutorial\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h3 id=\"JavaScript-This-的六道坎\"><a href=\"#JavaScript-This-的六道坎\" class=\"headerlink\" title=\"JavaScript This 的六道坎\"></a><a href=\"https://blog.crimx.com/2016/05/12/understanding-this/\" target=\"_blank\" rel=\"noopener\">JavaScript This 的六道坎</a></h3><p>鉴于 this 风骚的运作方式，对 this 的理解是永不过时的话题，该文试图通过将其大卸六块来钉住这个磨人的妖精。通过六个成语对 this 进行了剖析讲解，非常清晰明了。</p>\n<h3 id=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"><a href=\"#从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\" class=\"headerlink\" title=\"从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理\"></a><a href=\"http://www.dailichun.com/2018/01/21/js_singlethread_eventloop.html\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></h3><ol>\n<li>展现形式：由于是属于系统梳理型，就没有由浅入深了，而是从头到尾的梳理知识体系，重点是将关键节点的知识点串联起来，而不是仅仅剖析某一部分知识。</li>\n<li>内容是：从浏览器进程，再到浏览器内核运行，再到 JS 引擎单线程，再到 JS 事件循环机制，从头到尾系统的梳理一遍，摆脱碎片化，形成一个知识体系</li>\n<li>目标是：看完这篇文章后，对浏览器多进程，JS 单线程，JS 事件循环机制这些都能有一定理解，有一个知识体系骨架，而不是似懂非懂的感觉。</li>\n<li>另外，本文适合有一定经验的前端人员，<strong>新手请规避</strong>，避免受到过多的概念冲击。可以先存起来，有了一定理解后再看，也可以分成多批次观看，避免过度疲劳。</li>\n</ol>\n<p><strong>大纲</strong>：</p>\n<ul>\n<li>区分进程和线程</li>\n<li>浏览器是多进程的<ul>\n<li>浏览器都包含哪些进程？</li>\n<li>浏览器多进程的优势</li>\n<li>重点是浏览器内核（渲染进程）</li>\n<li>Browser进程和浏览器内核（Renderer进程）的通信过程</li>\n</ul>\n</li>\n<li>梳理浏览器内核中线程之间的关系<ul>\n<li>GUI渲染线程与JS引擎线程互斥</li>\n<li>JS阻塞页面加载</li>\n<li>WebWorker，JS的多线程？</li>\n<li>WebWorker与SharedWorker</li>\n</ul>\n</li>\n<li>简单梳理下浏览器渲染流程<ul>\n<li>load事件与DOMContentLoaded事件的先后</li>\n<li>css加载是否会阻塞dom树渲染？</li>\n<li>普通图层和复合图层</li>\n</ul>\n</li>\n<li>从Event Loop谈JS的运行机制<ul>\n<li>事件循环机制进一步补充</li>\n<li>单独说说定时器</li>\n<li>setTimeout而不是setInterval</li>\n</ul>\n</li>\n<li>事件循环进阶：macrotask与microtask</li>\n<li>写在最后的话</li>\n</ul>\n<h3 id=\"关于-Promise-的-9-个提示\"><a href=\"#关于-Promise-的-9-个提示\" class=\"headerlink\" title=\"关于 Promise 的 9 个提示\"></a><a href=\"https://mp.weixin.qq.com/s/1ILwZ6BecgBFA49c4YvTRQ\" target=\"_blank\" rel=\"noopener\">关于 Promise 的 9 个提示</a></h3><p>通过 9 个鲜活的案例，我们可以加深对 Promise 的理解</p>\n<h2 id=\"HTML相关\"><a href=\"#HTML相关\" class=\"headerlink\" title=\"HTML相关\"></a>HTML相关</h2><h3 id=\"常用的-HTML-头部标签\"><a href=\"#常用的-HTML-头部标签\" class=\"headerlink\" title=\"常用的 HTML 头部标签\"></a><a href=\"https://github.com/yisibl/blog/issues/1\" target=\"_blank\" rel=\"noopener\">常用的 HTML 头部标签</a></h3><p>曾几何时，我们已经不再手写 HTML 标签。Emmet、Markdown 等工具让我们「健步如飞」，但是我们真的了解这些标签了吗？这篇文章着重介绍了一些我们容易忽视和用错的头部标签，特别是 iOS 等针对移动设备的一些标签。这是一篇非常基础的标签索引，其中 iOS 设备部分对设计师也有参考作用。</p>\n<h3 id=\"H5-项目常见问题汇总及解决方案\"><a href=\"#H5-项目常见问题汇总及解决方案\" class=\"headerlink\" title=\"H5 项目常见问题汇总及解决方案\"></a><a href=\"https://github.com/FrontEndRoad/HTML5-FAQ\" target=\"_blank\" rel=\"noopener\">H5 项目常见问题汇总及解决方案</a></h3><p>这是一篇还算比较新的文章（2017-3-26），作者总结了一些前端开发过程中的常见问题，虽然有些问题可能不算是“常见”，但是看过一遍之后留下点印象也是可行的，到时候如果真遇到了不会解决的问题就知道去哪里找答案了~</p>\n<h3 id=\"HTML5-进阶系列：文件上传下载\"><a href=\"#HTML5-进阶系列：文件上传下载\" class=\"headerlink\" title=\"HTML5 进阶系列：文件上传下载\"></a><a href=\"https://juejin.im/post/59598ecf5188250d8d141fff\" target=\"_blank\" rel=\"noopener\">HTML5 进阶系列：文件上传下载</a></h3><p>HTML5 中提供的文件API在前端中有着丰富的应用，上传、下载、读取内容等在日常的交互中很常见。而且在各个浏览器的兼容也比较好，包括移动端。作者在该文中介绍了一些上传下载的 API，包括 FileList 对象和 file 对象、Blob 对象和 FileReader 对象等。</p>\n<h3 id=\"图片上传知识点梳理\"><a href=\"#图片上传知识点梳理\" class=\"headerlink\" title=\"图片上传知识点梳理\"></a><a href=\"https://juejin.im/post/5be023b651882516bc47762e\" target=\"_blank\" rel=\"noopener\">图片上传知识点梳理</a></h3><p>在日常项目开发中，图片上传是一个十分常见的场景。在这篇文章中，作者通过简单的代码，解析了图片上传的各个知识点，包括样式自定义、图片校验、图片上传预览、图片上传与上传进度展示和拖拽上传。</p>\n<h3 id=\"requestAnimationFrame-知多少？\"><a href=\"#requestAnimationFrame-知多少？\" class=\"headerlink\" title=\"requestAnimationFrame 知多少？\"></a><a href=\"www.cnblogs.com/onepixel/p/7078617.html\">requestAnimationFrame 知多少？</a></h3><p>html5 提供了一个专门用于请求动画的 API，即 requestAnimationFrame（rAF），顾名思义就是 “请求动画帧”。这篇文章就是带你深入理解 rAF 背后的原理。</p>\n<h2 id=\"CSS相关\"><a href=\"#CSS相关\" class=\"headerlink\" title=\"CSS相关\"></a>CSS相关</h2><h3 id=\"写-CSS-的姿势\"><a href=\"#写-CSS-的姿势\" class=\"headerlink\" title=\"写 CSS 的姿势\"></a><a href=\"https://www.w3cplus.com/css/css-evolution.html\" target=\"_blank\" rel=\"noopener\">写 CSS 的姿势</a></h3><p>作者-大漠，内容很丰富，放在第一位是有原因的。。</p>\n<h3 id=\"CSS-实现长宽比的几种方案\"><a href=\"#CSS-实现长宽比的几种方案\" class=\"headerlink\" title=\"CSS 实现长宽比的几种方案\"></a><a href=\"https://www.w3cplus.com/css/aspect-ratio.html\" target=\"_blank\" rel=\"noopener\">CSS 实现长宽比的几种方案</a></h3><p>作者是传说中的大漠孤秋，介绍了单纯用CSS实现定比例长宽图形的几种方案</p>\n<h3 id=\"实用的-CSS-—-贝塞尔曲线-cubic-bezier\"><a href=\"#实用的-CSS-—-贝塞尔曲线-cubic-bezier\" class=\"headerlink\" title=\"实用的 CSS — 贝塞尔曲线(cubic-bezier)\"></a><a href=\"http://joveyzheng.com/2016/03/16/css-cubic-bezier/\" target=\"_blank\" rel=\"noopener\">实用的 CSS — 贝塞尔曲线(cubic-bezier)</a></h3><p>贝塞尔曲线在 CSS 动画中应用较广，了解一下对于 CSS 动画效果会有更深的理解</p>\n<h3 id=\"探究-CSS-解析原理\"><a href=\"#探究-CSS-解析原理\" class=\"headerlink\" title=\"探究 CSS 解析原理\"></a><a href=\"http://jartto.wang/2017/11/13/Exploring-the-principle-of-CSS-parsing/index.html\" target=\"_blank\" rel=\"noopener\">探究 CSS 解析原理</a></h3><p>作者对浏览器的渲染过程和 CSS 的解析原理进行了详细解释，代码很多，干货满满</p>\n<h3 id=\"改变用户体验的滚动新特性\"><a href=\"#改变用户体验的滚动新特性\" class=\"headerlink\" title=\"改变用户体验的滚动新特性\"></a><a href=\"https://www.w3cplus.com/css/new-scroll-features-that-change-the-user-experience.html\" target=\"_blank\" rel=\"noopener\">改变用户体验的滚动新特性</a></h3><p>作者是大漠，他在文中介绍了时至今日，CSS 中为浏览器滚动提供的相关新特性究竟能给用户带来哪些新的体验。图片和代码较多，慎用流量</p>\n<h3 id=\"说说CSS学习中的瓶颈\"><a href=\"#说说CSS学习中的瓶颈\" class=\"headerlink\" title=\"说说CSS学习中的瓶颈\"></a><a href=\"https://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/\" target=\"_blank\" rel=\"noopener\">说说CSS学习中的瓶颈</a></h3><p>张鑫旭 2012 年的文章，虽然年代比较久远了，但是至今看来还是颇受启发，如果你有“CSS好难”、“为什么CSS那么多属性”、“怎么让它垂直居中啊”等疑问，推荐你看这篇文章。</p>\n<h3 id=\"「前端那些事儿」③-CSS-布局方案\"><a href=\"#「前端那些事儿」③-CSS-布局方案\" class=\"headerlink\" title=\"「前端那些事儿」③ CSS 布局方案\"></a><a href=\"https://juejin.im/post/5bd805e6f265da0acd2107d7\" target=\"_blank\" rel=\"noopener\">「前端那些事儿」③ CSS 布局方案</a></h3><p>作者几乎罗列了日常工作中遇到的所有类型的布局，并附上了详细的代码，其中包括：居中布局、多列布局、并排等分，单排对齐靠左布局和圣杯布局&amp;双飞翼布局等。源码传送门：<a href=\"https://github.com/willspace/css-layout/tree/master/demo-1\" target=\"_blank\" rel=\"noopener\">https://github.com/willspace/css-layout/tree/master/demo-1</a></p>\n<h3 id=\"深入了解-CSS3-新特性\"><a href=\"#深入了解-CSS3-新特性\" class=\"headerlink\" title=\"深入了解 CSS3 新特性\"></a><a href=\"https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/\" target=\"_blank\" rel=\"noopener\">深入了解 CSS3 新特性</a></h3><p>这篇文章介绍了 Web 开发中关于 CSS3 的一些内容，由浅入深的逐步引出 CSS3 的各种相关属性。基于各个 CSS3 属性的原理，通过实际的源代码介绍各个 CSS3 新特性的特点，使用方式以及使用中需要注意的地方</p>\n<h3 id=\"You-need-to-know-css\"><a href=\"#You-need-to-know-css\" class=\"headerlink\" title=\"You need to know css\"></a><a href=\"https://lhammer.cn/You-need-to-know-css/#/\" target=\"_blank\" rel=\"noopener\">You need to know css</a></h3><p>作者把自己的收获和工作中常用的一些 CSS 小样式总结成了这份文档，包含了 43 个 CSS 的小样式。</p>\n<h3 id=\"06期：前端布局基础概述\"><a href=\"#06期：前端布局基础概述\" class=\"headerlink\" title=\"06期：前端布局基础概述\"></a><a href=\"https://mp.weixin.qq.com/s/-LcNZWFFty2lWuND6uuNNA\" target=\"_blank\" rel=\"noopener\">06期：前端布局基础概述</a></h3><p>作者找到了W3C组织对初始化包含块的官方定义，为了让刚入前端圈的同学少走一些弯路，于是系统地分享一下，同时掺杂了作者本人在前端布局基础方面积累的经验。（因为是系统概述，所以篇幅会比较长，希望各位读者有心理准备）</p>\n<h3 id=\"在-css-中什么是好的注释？\"><a href=\"#在-css-中什么是好的注释？\" class=\"headerlink\" title=\"在 css 中什么是好的注释？\"></a><a href=\"https://mp.weixin.qq.com/s/963TnTMNAXstdIPYCTsrqQ\" target=\"_blank\" rel=\"noopener\">在 css 中什么是好的注释？</a></h3><blockquote>\n<p>注释就意味着代码无法自说明 —— Robert C. Martin</p>\n</blockquote>\n<p>Martin在文中详细讨论了代码注释，他的意思是，这些注释是注定会过时的。程序执行时会忽视注释，所以无法保证这些说明注释会准确的描述代码作用。所以最好的方式是让代码自说明，如此，按照代码逻辑，程序员和程序获取到的信息是一致的。读完这篇文章后，我们就知道该怎么写注释了。</p>\n<h2 id=\"框架相关\"><a href=\"#框架相关\" class=\"headerlink\" title=\"框架相关\"></a>框架相关</h2><h3 id=\"react-组件的生命周期\"><a href=\"#react-组件的生命周期\" class=\"headerlink\" title=\"react 组件的生命周期\"></a><a href=\"https://segmentfault.com/a/1190000003691119\" target=\"_blank\" rel=\"noopener\">react 组件的生命周期</a></h3><p>作者详细介绍了和 react 生命周期的一些函数执行时机以及它们的作用，通过实例的方式进行了讲解，个人感觉讲解的非常清晰</p>\n<h3 id=\"Gulp-和-Webpack-对比\"><a href=\"#Gulp-和-Webpack-对比\" class=\"headerlink\" title=\"Gulp 和 Webpack 对比\"></a><a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"noopener\">Gulp 和 Webpack 对比</a></h3><p>作者通过实际的代码对比了 gulp 和 webpack 在功能、原理以及模块化方面的优缺点</p>\n<h3 id=\"webpack-常用插件及其作用\"><a href=\"#webpack-常用插件及其作用\" class=\"headerlink\" title=\"webpack 常用插件及其作用\"></a><a href=\"http://www.monster1935.site/blog/2017/08/24/webpack%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">webpack 常用插件及其作用</a></h3><p>介绍了 webpack 经常用到的一些插件和它们的作用，美中不足的是没有具体代码以及介绍的插件有点少</p>\n<h3 id=\"webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\"><a href=\"#webpack-源码阅读——npm-脚本运行-webpack-与命令行输入-webpack-的区别\" class=\"headerlink\" title=\"webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别\"></a><a href=\"http://www.monster1935.site/blog/2017/09/07/webpack%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-npm%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8Cwebpack%E4%B8%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%85%A5webpack%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8C%BA%E5%88%AB/\" target=\"_blank\" rel=\"noopener\">webpack 源码阅读——npm 脚本运行 webpack 与命令行输入 webpack 的区别</a></h3><p>虽然是一个小知识点，不过作者读源码的精神可嘉</p>\n<h3 id=\"webpack-收藏集-掘金\"><a href=\"#webpack-收藏集-掘金\" class=\"headerlink\" title=\"webpack - 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000009435832\" target=\"_blank\" rel=\"noopener\">webpack - 收藏集 - 掘金</a></h3><p>掘金上面的 webpack 相关文章，webpack 本身实在太复杂，还是需要一些文章差补缺漏的</p>\n<h3 id=\"Vue-js——60分钟快速入门\"><a href=\"#Vue-js——60分钟快速入门\" class=\"headerlink\" title=\"Vue.js——60分钟快速入门\"></a><a href=\"http://www.cnblogs.com/keepfool/p/5619070.html\" target=\"_blank\" rel=\"noopener\">Vue.js——60分钟快速入门</a></h3><p>vue 入门教程，还有另外两篇文章，文章最后有链接，个人认为是目前为止看到的最舒服的 vue 入门教程，排版配色都很不错</p>\n<h3 id=\"深入到源码：解读-redux-的设计思路与用法\"><a href=\"#深入到源码：解读-redux-的设计思路与用法\" class=\"headerlink\" title=\"深入到源码：解读 redux 的设计思路与用法\"></a><a href=\"https://github.com/Lucifier129/Lucifier129.github.io/issues/9\" target=\"_blank\" rel=\"noopener\">深入到源码：解读 redux 的设计思路与用法</a></h3><p>一直都没搞明白 redux，后来看了这篇文章，讲的很详细，而且讲解了一部分源码，推荐！（下面一段话取自该文章） 组织 <code>redux</code> 的流程莫过于：</p>\n<ul>\n<li>设计全局 state 的数据结构</li>\n<li>设计更改 state 数据的 actionTypes 常量以及其他跟视图展现相关的 actionTypes 常量</li>\n<li>根据 actionTypes 常量，书写 actionCreator 。</li>\n<li>根据各个 actionCreator 的返回值，涉及 reducer 做数据的最后处理</li>\n<li>在有了 reducer 函数之后，createStore(reducer, initState) 得到 store 对象</li>\n<li>用 bindActionCreators 函数将 actionCreators 和 store.dispatch 绑定起来，得到一组能修改全局状态的函数</li>\n<li>分发各个状态修改函数到各个 DOM 事件中。</li>\n</ul>\n<h3 id=\"Vue-生命周期深入\"><a href=\"#Vue-生命周期深入\" class=\"headerlink\" title=\"Vue 生命周期深入\"></a><a href=\"https://segmentfault.com/a/1190000014705819\" target=\"_blank\" rel=\"noopener\">Vue 生命周期深入</a></h3><p>这篇博客会从下面四个常见的应用诠释了组件的生命周期，以及各个生命周期应该干什么事，博主写的很不错，直观易懂，很适合接触 vue 不深的童鞋。</p>\n<ol>\n<li>单组件的生命周期</li>\n<li>父子组件的生命周期</li>\n<li>兄弟组件的生命周期</li>\n<li>宏 mixin 的生命周期</li>\n</ol>\n<h3 id=\"2019-年-Vue-学习路线图\"><a href=\"#2019-年-Vue-学习路线图\" class=\"headerlink\" title=\"2019 年 Vue 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/jGmJndL-oK3i5lYLiQROIg\" target=\"_blank\" rel=\"noopener\">2019 年 Vue 学习路线图</a></h3><p>作者我将在这篇文章中展示了一个高级“知识地图”，它包含了与 Vue 开发相关的关键领域，你可以使用这张地图作为 2019 年学习 Vue 的图鉴。英文原文：<a href=\"https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/\" target=\"_blank\" rel=\"noopener\">https://vuejsdevelopers.com/2018/12/04/vue-js-2019-knowledge-map/</a></p>\n<h3 id=\"一口-很长的-气了解-babel\"><a href=\"#一口-很长的-气了解-babel\" class=\"headerlink\" title=\"一口(很长的)气了解 babel\"></a><a href=\"https://juejin.im/post/5c19c5e0e51d4502a232c1c6\" target=\"_blank\" rel=\"noopener\">一口(很长的)气了解 babel</a></h3><p>作者详细介绍了 babel 究竟是做什么的，以及 babel 的一些配套工具的作用，同时还介绍了如何争取地进行配置和使用 babel。</p>\n<h3 id=\"Which-of-the-635000-npm-modules-do-I-choose\"><a href=\"#Which-of-the-635000-npm-modules-do-I-choose\" class=\"headerlink\" title=\"Which of the 635000 npm modules do I choose?\"></a><a href=\"https://www.coreycleary.me/which-of-the-635000-npm-modules-do-i-choose/\" target=\"_blank\" rel=\"noopener\">Which of the 635000 npm modules do I choose?</a></h3><p>npm 现在已经有 60 多万个库，如何在如此繁杂的 module 中选择合适自己的感觉是件难事，而作者就基于此对一些比较大型使用比较多的库进行了横向比较，会对你在技术上的选择起到帮助作用。</p>\n<h3 id=\"2019-年-React-学习路线图\"><a href=\"#2019-年-React-学习路线图\" class=\"headerlink\" title=\"2019 年 React 学习路线图\"></a><a href=\"https://mp.weixin.qq.com/s/PWSeeqDwu8QOcamlo_FJrA\" target=\"_blank\" rel=\"noopener\">2019 年 React 学习路线图</a></h3><p>和上面的 Vue 学习路线图类似，建议搭配食用，英文原文：<a href=\"https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02\" target=\"_blank\" rel=\"noopener\">https://hackernoon.com/the-2018-react-js-roadmap-4d0a43814c02</a></p>\n<h3 id=\"细说-webpack-之流程篇\"><a href=\"#细说-webpack-之流程篇\" class=\"headerlink\" title=\"细说 webpack 之流程篇\"></a><a href=\"http://taobaofed.org/blog/2016/09/09/webpack-flow/\" target=\"_blank\" rel=\"noopener\">细说 webpack 之流程篇</a></h3><p>淘宝 FED 这篇博客，对 webpack 的整体流程梳理的非常清晰，以及 webpack 的基础架构讲解的很细致，对 compiler 和 complation 对象也做了很细致的剖析。</p>\n<h3 id=\"React-是怎样炼成的\"><a href=\"#React-是怎样炼成的\" class=\"headerlink\" title=\"React 是怎样炼成的\"></a><a href=\"https://segmentfault.com/a/1190000013365426\" target=\"_blank\" rel=\"noopener\">React 是怎样炼成的</a></h3><p>文章主要讲述 React 的诞生过程和优化思路。内容整理自 2014 年的 <a href=\"https://speakerdeck.com/vjeux/oscon-react-architecture\" target=\"_blank\" rel=\"noopener\">OSCON - React Architecture by vjeux</a>，虽然从今天来看可能会有点历史感，但仍然值得学习了解。以史为鉴，从中也可以管窥 Facebook 优秀的工程管理文化。</p>\n<h2 id=\"浏览器相关\"><a href=\"#浏览器相关\" class=\"headerlink\" title=\"浏览器相关\"></a>浏览器相关</h2><h3 id=\"js在微信、微博、QQ、Safari唤起App的解决方案\"><a href=\"#js在微信、微博、QQ、Safari唤起App的解决方案\" class=\"headerlink\" title=\"js在微信、微博、QQ、Safari唤起App的解决方案\"></a><a href=\"https://segmentfault.com/a/1190000012940046\" target=\"_blank\" rel=\"noopener\">js在微信、微博、QQ、Safari唤起App的解决方案</a></h3><p>一个全面的、最新（2018-01-22）的唤起方案，总结的很透彻，值得一读</p>\n<h3 id=\"浏览器进程？线程？傻傻分不清楚！\"><a href=\"#浏览器进程？线程？傻傻分不清楚！\" class=\"headerlink\" title=\"浏览器进程？线程？傻傻分不清楚！\"></a><a href=\"http://www.imweb.io/topic/58e3bfa845e5c13468f567d5\" target=\"_blank\" rel=\"noopener\">浏览器进程？线程？傻傻分不清楚！</a></h3><p>什么是多进程架构浏览器？为什么浏览器内核是多线程？Javascript 是单线程又是什么鬼？进程和线程是否分得清楚呢？文章干货和知识点比较多，需要查阅相关知识才能完全消化。</p>\n<h3 id=\"WebView-性能、体验分析与优化\"><a href=\"#WebView-性能、体验分析与优化\" class=\"headerlink\" title=\"WebView 性能、体验分析与优化\"></a><a href=\"https://tech.meituan.com/WebViewPerf.html\" target=\"_blank\" rel=\"noopener\">WebView 性能、体验分析与优化</a></h3><p>来自美团的技术文档，对 webview 的方方面面都进行了详细的介绍，同时指出了其存在的问题，相信看完之后对于 webview 会有更深层次的理解~</p>\n<h3 id=\"浅析-HTTP-缓存的机制-浏览器缓存\"><a href=\"#浅析-HTTP-缓存的机制-浏览器缓存\" class=\"headerlink\" title=\"浅析 HTTP 缓存的机制-浏览器缓存\"></a><a href=\"http://obkoro1.com/2018/06/09/%E6%B5%85%E6%9E%90HTTP%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%BA%E5%88%B6-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/\" target=\"_blank\" rel=\"noopener\">浅析 HTTP 缓存的机制-浏览器缓存</a></h3><p>在浏览器众多缓存中的 HTTP 缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的 magic，但是对此背后的原因可能不甚了解；作者结合状态码介绍了强缓存和弱缓存的区别和触发条件，篇幅短小精悍，值得一读。</p>\n<h3 id=\"深入理解-JSCore\"><a href=\"#深入理解-JSCore\" class=\"headerlink\" title=\"深入理解 JSCore\"></a><a href=\"https://juejin.im/post/5b7f6a27e51d4538b063f233?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">深入理解 JSCore</a></h3><p>目前业界流行的动态化方案，如 Facebook 的 React Native，阿里巴巴的 Weex 都采用了前端系的 DSL 方案，而它们在 iOS 系统上能够顺利的运行，都离不开一个背后的功臣：JavaScriptCore（以下简称 JSCore），它建立起了 Objective-C（以下简称OC）和 JavaScript（以下简称 JS）两门语言之间沟通的桥梁。作者从浏览器谈起，对 Webkit 内核的工作原理和组成进行了详细介绍，同时介绍了 JSCore 的组成部分：词法分析、语法分析和解释执行，后面还介绍了 iOS 中的 JSCore 的应用和一些机制，篇幅较长，但是干货满满，如果你对浏览器渲染引擎感兴趣，这篇文章值得一看~</p>\n<h3 id=\"H5-唤起-APP-指南-附开源唤端库\"><a href=\"#H5-唤起-APP-指南-附开源唤端库\" class=\"headerlink\" title=\"H5 唤起 APP 指南(附开源唤端库)\"></a><a href=\"https://juejin.im/post/5b7efb2ee51d45388b6af96c?utm_medium=fe&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"noopener\">H5 唤起 APP 指南(附开源唤端库)</a></h3><p>唤端的定义：引导已下载用户打开 APP，引导未下载用户下载 APP。对于用户留存来讲，唤起 App 是一种很重要的手段，这篇文章可以说把所有和唤端相关的知识点都介绍了，最后还给自己的工具打了一发广告。。</p>\n<h3 id=\"当···时发生了什么？\"><a href=\"#当···时发生了什么？\" class=\"headerlink\" title=\"当···时发生了什么？\"></a><a href=\"https://github.com/skyline75489/what-happens-when-zh_CN\" target=\"_blank\" rel=\"noopener\">当···时发生了什么？</a></h3><p>这个仓库试图回答一个古老的面试问题：当你在浏览器中输入 google.com 并且按下回车之后发生了什么？不过作者不再局限于平常的回答，而是想办法回答地尽可能具体，不遗漏任何细节。包括一些硬件知识也包含其中，我相信如果面试官问到你这道题，然后你的回答是这篇文章里面描述的话，面试官肯定会大吃一惊！</p>\n<h3 id=\"HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\"><a href=\"#HTTP-HTTP2-0-SPDY-HTTPS-你应该知道的一些事\" class=\"headerlink\" title=\"HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事\"></a><a href=\"http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/\" target=\"_blank\" rel=\"noopener\">HTTP, HTTP2.0, SPDY, HTTPS 你应该知道的一些事</a></h3><p>作为一个经常和 web 打交道的程序员，了解这些协议是必须的，而这篇文章就向大家介绍了一下这些协议的区别和基本概念，文中不局限于前端知识，还包括一些运维，协议方面的知识。</p>\n<h3 id=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"><a href=\"#浏览器的工作原理：新式网络浏览器幕后揭秘\" class=\"headerlink\" title=\"浏览器的工作原理：新式网络浏览器幕后揭秘\"></a><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality\" target=\"_blank\" rel=\"noopener\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></h3><p>这是一篇全面介绍 WebKit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数，并花了很多时间来研读网络浏览器的源代码。 网络浏览器很可能是使用最广的软件。在这篇入门文章中，作者将会介绍它们的幕后工作原理。我们会了解到，从在地址栏输入 <code>google.com</code> 直到在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。文章讲解的很详细，篇幅较长，需要比较大的耐心才能看下去。</p>\n<h3 id=\"HTTP-请求头中的-X-Forwarded-For\"><a href=\"#HTTP-请求头中的-X-Forwarded-For\" class=\"headerlink\" title=\"HTTP 请求头中的 X-Forwarded-For\"></a><a href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" target=\"_blank\" rel=\"noopener\">HTTP 请求头中的 X-Forwarded-For</a></h3><p>这篇文章对 HTTP 请求头中的 X-Forwarded-For（XFF）进行了详细的讲解，当我们需要取到用户的真实 IP 时，对这个请求头的理解和使用就显得尤为重要了，而从这个应用场景出发，作者还对请求头中的 x-real-ip 字段以及 Remote Address 进行了介绍。作者还有关于 HTTP 的其他文章，可以<a href=\"https://imququ.com/post/series.html\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看更多。</p>\n<h3 id=\"图解浏览器的基本工作原理\"><a href=\"#图解浏览器的基本工作原理\" class=\"headerlink\" title=\"图解浏览器的基本工作原理\"></a><a href=\"https://zhuanlan.zhihu.com/p/47407398\" target=\"_blank\" rel=\"noopener\">图解浏览器的基本工作原理</a></h3><p>可能每一个前端工程师都想要理解浏览器的工作原理。我们希望知道从在浏览器地址栏中输入 url 到页面展现的短短几秒内浏览器究竟做了什么；我们希望了解平时常常听说的各种代码优化方案是究竟为什么能起到优化的作用；我们希望更细化的了解浏览器的渲染流程。那么这篇文章就解答了上面的所有问题，文章较长，图文并茂。</p>\n<h3 id=\"Content-Security-Policy-An-Introduction\"><a href=\"#Content-Security-Policy-An-Introduction\" class=\"headerlink\" title=\"Content Security Policy - An Introduction\"></a><a href=\"https://scotthelme.co.uk/content-security-policy-an-introduction/\" target=\"_blank\" rel=\"noopener\">Content Security Policy - An Introduction</a></h3><p>一篇介绍 CSP 的文章，介绍了我们为什么需要 CSP，以及涉及到 CSP 的一些协议头等等相关信息。</p>\n<h3 id=\"认识-HTTP—-Cookie-和-Session-篇\"><a href=\"#认识-HTTP—-Cookie-和-Session-篇\" class=\"headerlink\" title=\"认识 HTTP—-Cookie 和 Session 篇\"></a><a href=\"https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892https://zhuanlan.zhihu.com/p/27669892\" target=\"_blank\" rel=\"noopener\">认识 HTTP—-Cookie 和 Session 篇</a></h3><p>虽然内容大多来自《图解HTTP》一书，但是条理清楚分明，文笔很好，作者解释的很清晰。</p>\n<h3 id=\"图解基于-HTTPS-的-DNS\"><a href=\"#图解基于-HTTPS-的-DNS\" class=\"headerlink\" title=\"图解基于 HTTPS 的 DNS\"></a><a href=\"https://www.infoq.cn/article/a-cartoon-intro-to-dns-over-https\" target=\"_blank\" rel=\"noopener\">图解基于 HTTPS 的 DNS</a></h3><p>这是关于 dns 查询的过程讲解，配上插图和文字，可以对 dns 的查询过程有一个大概了解。</p>\n<h3 id=\"理解-WebKit-和-Chromium\"><a href=\"#理解-WebKit-和-Chromium\" class=\"headerlink\" title=\"理解 WebKit 和 Chromium\"></a><a href=\"https://blog.csdn.net/milado_nju/article/details/7216067\" target=\"_blank\" rel=\"noopener\">理解 WebKit 和 Chromium</a></h3><p>系统的描述了 Chrome 浏览器的信息，可以更加全面的了解 Chrome 浏览器，最给力的是有很多工具的使用介绍。</p>\n<h3 id=\"你真的了解回流和重绘吗\"><a href=\"#你真的了解回流和重绘吗\" class=\"headerlink\" title=\"你真的了解回流和重绘吗?\"></a><a href=\"https://github.com/chenjigeng/blog/blob/master/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E5%90%97.md\" target=\"_blank\" rel=\"noopener\">你真的了解回流和重绘吗?</a></h3><p>这篇文章主要讲了浏览器的渲染过程、浏览器的优化机制以及如何减少甚至避免回流和重绘，可以帮助读者更好的理解回流重绘。</p>\n<h3 id=\"这样使用GPU动画\"><a href=\"#这样使用GPU动画\" class=\"headerlink\" title=\"这样使用GPU动画\"></a><a href=\"https://www.w3cplus.com/animation/gpu-animation-doing-it-right.html\" target=\"_blank\" rel=\"noopener\">这样使用GPU动画</a></h3><p><a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">《GPU Animation: Doing It Right》</a>的译文，这篇文章能帮助你更好地了解浏览器如何使用GPU来渲染，这样你就可以创作能在所有设备上快速运行的令人印象深刻的网站。著作权归作者所有。</p>\n<h3 id=\"How-Blink-Works-中文译文\"><a href=\"#How-Blink-Works-中文译文\" class=\"headerlink\" title=\"How Blink Works 中文译文\"></a><a href=\"https://zhuanlan.zhihu.com/p/52918538\" target=\"_blank\" rel=\"noopener\">How Blink Works 中文译文</a></h3><p>Chromium 的工程师们写了两篇技术文章 <a href=\"https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit?pli=1#\" target=\"_blank\" rel=\"noopener\">How Blink Works</a> 和 <a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/how_cc_works.md\" target=\"_blank\" rel=\"noopener\">How cc Works</a>，分别介绍了 Chrome 浏览器内核内部的两个重要模块 Blink 和 cc 内部设计和实现的一些细节。对于想要了解 Chrome 内核内部实现的同学，这两篇文章提供了不错的入门指引。</p>\n<h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><h3 id=\"编码简介：utf8-utf16-以及其它\"><a href=\"#编码简介：utf8-utf16-以及其它\" class=\"headerlink\" title=\"编码简介：utf8, utf16 以及其它\"></a><a href=\"https://github.com/creeperyang/blog/issues/4\" target=\"_blank\" rel=\"noopener\">编码简介：utf8, utf16 以及其它</a></h3><p>作者对 utf8 和 utf16 以及其它相关知识进行了介绍，前端同学可能很少会关注到字符编码规则，但是有时候我们经常会遇到乱码等问题和 Bug，而在阅读完这篇文章之后，相信你对字符编码这类知识会有一个很深的理解。</p>\n<h3 id=\"可以说的秘密-那些我们该讨论的前端加密方法\"><a href=\"#可以说的秘密-那些我们该讨论的前端加密方法\" class=\"headerlink\" title=\"可以说的秘密-那些我们该讨论的前端加密方法\"></a><a href=\"https://juejin.im/entry/5bc93545e51d450e5f3dceff\" target=\"_blank\" rel=\"noopener\">可以说的秘密-那些我们该讨论的前端加密方法</a></h3><p>这篇文章介绍了前端开发中常用的加密方法并给出了其适用场景。包括 Base64 编码、哈希算法、加盐、慢哈希函数、密钥哈希、XOR 和加密（Encrypt）等加密方法，</p>\n<h3 id=\"一个由正则表达式引发的血案（解决版）\"><a href=\"#一个由正则表达式引发的血案（解决版）\" class=\"headerlink\" title=\"一个由正则表达式引发的血案（解决版）\"></a><a href=\"https://zhuanlan.zhihu.com/p/46294360\" target=\"_blank\" rel=\"noopener\">一个由正则表达式引发的血案（解决版）</a></h3><p>正则表达式一直以来是广大码农处理字符串的福音，但与此同时，也容易引发血案。这篇文章从一则实例出发，对正则表达式可能引发的 CPU 爆表问题进行了分析，同时作者还介绍了一种遗传算法，该算法解决了如下问题：</p>\n<blockquote>\n<p>给定一个正则引擎和一个正则表达式，为这个正则表达式找到一个攻击字符串，它可以最大化正则引擎的匹配时间。</p>\n</blockquote>\n<p>感兴趣的童鞋可以认真研究一下这篇文章，或者作者发表的论文。</p>\n<h3 id=\"计算的本质：赋值和流的杂谈\"><a href=\"#计算的本质：赋值和流的杂谈\" class=\"headerlink\" title=\"计算的本质：赋值和流的杂谈\"></a><a href=\"https://mp.weixin.qq.com/s/UYOy9dCCci5P_Cc7OVp5sg\" target=\"_blank\" rel=\"noopener\">计算的本质：赋值和流的杂谈</a></h3><p>写了这么久的程序，不少人肯定会有疑问，<strong>计算的本质</strong>是什么？对一台图灵机来说，那就是无限长的纸带和能够自如移动的读写头，但这太抽象了。作者换了一种方式去理解计算并总结出了这篇文章，稍微有一些晦涩难懂，不过看完大有裨益。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"漫画：什么是动态规划？\"><a href=\"#漫画：什么是动态规划？\" class=\"headerlink\" title=\"漫画：什么是动态规划？\"></a><a href=\"https://mp.weixin.qq.com/s/uHlSIPDrzwlyyGTwnkslbQ\" target=\"_blank\" rel=\"noopener\">漫画：什么是动态规划？</a></h3><p>以漫画的形式生动形象的解释了动态规划是什么，以及其解法。虽然篇幅较长，但是漫画看起来一点都不枯燥。</p>\n<h3 id=\"漫画：如何求根号2（爱奇艺面试题）\"><a href=\"#漫画：如何求根号2（爱奇艺面试题）\" class=\"headerlink\" title=\"漫画：如何求根号2（爱奇艺面试题）\"></a><a href=\"https://mp.weixin.qq.com/s/is7ffzf1pofMchpT3azsOg\" target=\"_blank\" rel=\"noopener\">漫画：如何求根号2（爱奇艺面试题）</a></h3><p>用漫画的形式讲解了二分法和牛顿迭代法，最后还给出了源码</p>\n<h3 id=\"2018汇总数据结构算法篇\"><a href=\"#2018汇总数据结构算法篇\" class=\"headerlink\" title=\"2018汇总数据结构算法篇\"></a><a href=\"https://mp.weixin.qq.com/s/7WweVX6j_ZMyaSnYr8q5Ug\" target=\"_blank\" rel=\"noopener\">2018汇总数据结构算法篇</a></h3><p>用图文的方式对一些数据结构进行了通俗易懂的解释，内容非常基础和全面。</p>\n<h2 id=\"服务层相关\"><a href=\"#服务层相关\" class=\"headerlink\" title=\"服务层相关\"></a>服务层相关</h2><h3 id=\"Node-定时器详解\"><a href=\"#Node-定时器详解\" class=\"headerlink\" title=\"Node 定时器详解\"></a><a href=\"http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html\" target=\"_blank\" rel=\"noopener\">Node 定时器详解</a></h3><p>作者：阮一峰，Node 的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库 <code>libuv</code> 做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。<br>至今为止，解释定时器最透彻的中文文章了</p>\n<h3 id=\"node-基础面试事件环？微任务、宏任务？一篇带你飞\"><a href=\"#node-基础面试事件环？微任务、宏任务？一篇带你飞\" class=\"headerlink\" title=\"node 基础面试事件环？微任务、宏任务？一篇带你飞\"></a><a href=\"https://juejin.im/post/5b35cdfa51882574c020d685\" target=\"_blank\" rel=\"noopener\">node 基础面试事件环？微任务、宏任务？一篇带你飞</a></h3><p>这是一篇很干货的文章，作者介绍了 node 的应用场景以及特性，同时还顺带着介绍了同步/异步、阻塞/非阻塞、微任务/宏任务这些 node 面试中经常遇到的知识点，虽然篇幅不是很长，但是涵盖的范围比较广，对于刚入门前端的童鞋来说有比较大的难度，不过对于那些已使用 node 一段时间的童鞋来说是一篇不错的总结类文章。</p>\n<h3 id=\"Error-Handling-in-Node-js\"><a href=\"#Error-Handling-in-Node-js\" class=\"headerlink\" title=\"Error Handling in Node.js\"></a><a href=\"https://www.joyent.com/node-js/production/design/errors\" target=\"_blank\" rel=\"noopener\">Error Handling in Node.js</a></h3><p>关于 NodeJS 中异常的种类，以及应该如何处理异常方面的设计文章，比较长，而且是英文的，但比较受益。（有没有大佬翻译一把？）</p>\n<h3 id=\"开发者需要了解的-nodejs-中-require-的机制\"><a href=\"#开发者需要了解的-nodejs-中-require-的机制\" class=\"headerlink\" title=\"开发者需要了解的 nodejs 中 require 的机制\"></a><a href=\"https://juejin.im/post/5bdea6b1518825170f50c485\" target=\"_blank\" rel=\"noopener\">开发者需要了解的 nodejs 中 require 的机制</a></h3><p>对 nodejs 中的模块加载进行了详细的讲解，同时对 exports 和 module.exports 的区别和正确使用方式也进行了讲解，是一篇非常不错的 nodejs 模块方面的文章，该文为译文，原文地址：<a href=\"https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8</a></p>\n<h3 id=\"CDN-技术详解\"><a href=\"#CDN-技术详解\" class=\"headerlink\" title=\"CDN 技术详解\"></a><a href=\"https://www.cnblogs.com/losbyday/p/5843960.html\" target=\"_blank\" rel=\"noopener\">CDN 技术详解</a></h3><p>《CDN技术详解》绝对是带你进入 CDN 行业的那盏最亮的明灯。因此，虽然只是纯粹的重点抄录，作者还是把《CDN技术详解》中的精华总结成了这篇文章。</p>\n<h3 id=\"漫画-从搬家到容器技术-Docker-应用场景解析\"><a href=\"#漫画-从搬家到容器技术-Docker-应用场景解析\" class=\"headerlink\" title=\"漫画 | 从搬家到容器技术 Docker 应用场景解析\"></a><a href=\"https://mp.weixin.qq.com/s/wHEVltlOOAffWILB1hqFjg\" target=\"_blank\" rel=\"noopener\">漫画 | 从搬家到容器技术 Docker 应用场景解析</a></h3><p>通过漫画的方式对 Docker 的原理和应用场景进行了比较详细的介绍和讲解</p>\n<h3 id=\"不仅仅是前端er——折腾服务器武装自己\"><a href=\"#不仅仅是前端er——折腾服务器武装自己\" class=\"headerlink\" title=\"不仅仅是前端er——折腾服务器武装自己\"></a><a href=\"https://segmentfault.com/a/1190000013242438\" target=\"_blank\" rel=\"noopener\">不仅仅是前端er——折腾服务器武装自己</a></h3><p>作者从购买服务器和购买域名讲起，将搭建网站的详细过程进行了介绍，同时还包括 nginx 配置文件的修改以及持续部署的配置。</p>\n<h2 id=\"Mac相关\"><a href=\"#Mac相关\" class=\"headerlink\" title=\"Mac相关\"></a>Mac相关</h2><h3 id=\"EffectiveMac\"><a href=\"#EffectiveMac\" class=\"headerlink\" title=\"EffectiveMac\"></a><a href=\"https://mac.bestswifter.com/\" target=\"_blank\" rel=\"noopener\">EffectiveMac</a></h3><p>作者是在今日头条任职的 iOS 高级工程师，在这篇文章里介绍了 Mac 的一些使用技巧以及配置指南，包括 Vim、Git、Zsh 等工具的使用方式，是截止到目前为止我看过的最全面、最实用的 Mac 教程，经常用 Mac 的童鞋一定要抽空看一看！</p>\n<h2 id=\"前沿\"><a href=\"#前沿\" class=\"headerlink\" title=\"前沿\"></a>前沿</h2><h3 id=\"GraphQL-and-Relay-浅析\"><a href=\"#GraphQL-and-Relay-浅析\" class=\"headerlink\" title=\"GraphQL and Relay 浅析\"></a><a href=\"https://zhuanlan.zhihu.com/p/20638731\" target=\"_blank\" rel=\"noopener\">GraphQL and Relay 浅析</a></h3><p>相信大部分人都没听说过 GraphQL 和 Relay 吧，这篇文章就对这两样东西进行了介绍，同时文章结尾还有一些扩展阅读链接</p>\n<h3 id=\"译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\"><a href=\"#译文：Puppeteer-与-Chrome-Headless-——-从入门到爬虫\" class=\"headerlink\" title=\"译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫\"></a><a href=\"http://csbun.github.io/blog/2017/09/puppeteer/\" target=\"_blank\" rel=\"noopener\">译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫</a></h3><p><a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\"><code>Puppeteer</code></a> 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具。正因为这个官方声明，许多业内自动化测试库都已经停止维护，包括 <strong><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></strong>。<strong><a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/\" target=\"_blank\" rel=\"noopener\">Selenium IDE for Firefox</a></strong> 项目也因为缺乏维护者而终止。</p>\n<h3 id=\"初探-Headless-Chrome\"><a href=\"#初探-Headless-Chrome\" class=\"headerlink\" title=\"初探 Headless Chrome\"></a><a href=\"https://zhuanlan.zhihu.com/p/27100187\" target=\"_blank\" rel=\"noopener\">初探 Headless Chrome</a></h3><p>Headless Chrome 是 Chrome 浏览器的无界面形态，可以在不打开浏览器的前提下，使用所有 Chrome 支持的特性运行你的程序。相比于现代浏览器，Headless Chrome 更加方便测试 web 应用，获得网站的截图，做爬虫抓取信息等。相比于出道较早的 PhantomJS，SlimerJS 等，Headless Chrome 则更加贴近浏览器环境。</p>\n<h3 id=\"译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\"><a href=\"#译-React-Native-vs-Cordova、PhoneGap、Ionic，等等\" class=\"headerlink\" title=\"[译] React Native vs. Cordova、PhoneGap、Ionic，等等\"></a>[译] React Native vs. Cordova、PhoneGap、Ionic，等等</h3><p>原文链接：<a href=\"https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc\" target=\"_blank\" rel=\"noopener\">https://learnreact.design/2018/02/14/react-native-vs-cordova-phone-gap-ionic-etc</a>，主要解释了以下几个问题：</p>\n<ul>\n<li>什么是原生应用？</li>\n<li>什么是 WebView UI ？</li>\n<li>更原生化的框架的优势和劣势分别是什么？原生化更少的框架呢？</li>\n<li>React Native 与 Cordova 相比如何？</li>\n</ul>\n<h2 id=\"求职\"><a href=\"#求职\" class=\"headerlink\" title=\"求职\"></a>求职</h2><h3 id=\"如何写面向互联网公司的求职简历\"><a href=\"#如何写面向互联网公司的求职简历\" class=\"headerlink\" title=\"如何写面向互联网公司的求职简历\"></a><a href=\"http://blog.devtang.com/2013/12/22/how-to-write-resume-for-it-company/\" title=\"如何写面向互联网公司的求职简历\" target=\"_blank\" rel=\"noopener\">如何写面向互联网公司的求职简历</a></h3><p>作者在 IT 公司工作了六年，有着三年面试官的经历。文章主要内容为：</p>\n<ul>\n<li>简历的页数不要超过两页（最好一页）<ul>\n<li>删掉不必要的信息</li>\n<li>如果你实在太牛逼，最多写 2 页</li>\n</ul>\n</li>\n<li>重要的信息写在最前面<ul>\n<li>你的联系方式</li>\n<li>你最重要的工作经历</li>\n</ul>\n</li>\n<li>不要简单罗列工作经历<ul>\n<li>列出你的工作中有价值的细节（有哪些技术上的困难等）</li>\n</ul>\n</li>\n<li>不要写任何虚假或夸大的信息<ul>\n<li>类似精通 java，精通 C/C++ 等</li>\n</ul>\n</li>\n<li>不要附加任何可能带来负面印象的信息<ul>\n<li>不要加照片</li>\n<li>不要写政治面貌</li>\n<li>不要写奇怪的爱好（打游戏，喝酒，抽烟）</li>\n<li>不要写参加过某某培训公司的 iOS 培训</li>\n<li>尽量用专业邮箱</li>\n<li>用 PDF 格式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"让-BAT-的-Offer-不再难拿\"><a href=\"#让-BAT-的-Offer-不再难拿\" class=\"headerlink\" title=\"让 BAT 的 Offer 不再难拿\"></a><a href=\"https://github.com/bestswifter/blog/commit/40885de8e065b774973ac52ef3f72de84cb19f69\" title=\"[Add] 让 BAT 的 Offer 不再难拿\" target=\"_blank\" rel=\"noopener\">让 BAT 的 Offer 不再难拿</a></h3><p>作者是软件工程专业，对 Web 前端感兴趣，目前从事 iOS 开发，对开发效率的提升以及工具的使用有很深入研究和思考，相信他总结的这篇面经一定不会让你失望。</p>\n<h3 id=\"一篇文章搞定前端面试\"><a href=\"#一篇文章搞定前端面试\" class=\"headerlink\" title=\"一篇文章搞定前端面试\"></a><a href=\"https://juejin.im/post/5bbaa549e51d450e827b6b13\" target=\"_blank\" rel=\"noopener\">一篇文章搞定前端面试</a></h3><p>这篇文章旨在用最通俗的语言讲述最枯燥的基本知识，文章提纲：</p>\n<ol>\n<li>TCP</li>\n<li>UDP</li>\n<li>套接字 socket</li>\n<li>HTTP 协议</li>\n<li>DNS 解析</li>\n<li>HTTP 请求发起和响应</li>\n<li>页面渲染的过程</li>\n<li>页面的性能优化</li>\n</ol>\n<h3 id=\"OpenDoc-前端简历评级标准\"><a href=\"#OpenDoc-前端简历评级标准\" class=\"headerlink\" title=\"OpenDoc - 前端简历评级标准\"></a><a href=\"https://zhuanlan.zhihu.com/p/27996237\" target=\"_blank\" rel=\"noopener\">OpenDoc - 前端简历评级标准</a></h3><p>美团团队从工作意向、工作经历、教育经历、技术栈、基础知识五个维度评价简历，仅供参考。</p>\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><h3 id=\"严选Redesign\"><a href=\"#严选Redesign\" class=\"headerlink\" title=\"严选Redesign\"></a><a href=\"https://www.zcool.com.cn/work/ZMjAxNjc4ODQ=.html\" target=\"_blank\" rel=\"noopener\">严选Redesign</a></h3><p>这篇文章来自站酷，介绍了网易严选的设计风格和思路，包括一些颜色规范、版面设计和图标选择\b等等。</p>\n<h3 id=\"移动端设计样式库-导航设计（二）\"><a href=\"#移动端设计样式库-导航设计（二）\" class=\"headerlink\" title=\"移动端设计样式库-导航设计（二）\"></a><a href=\"https://mp.weixin.qq.com/s/MVvh9dh0BGK1w2mnqnmURg\" target=\"_blank\" rel=\"noopener\">移动端设计样式库-导航设计（二）</a></h3><p>作者对移动端界面设计中另一个常见的导航模式-瞬时导航进行了介绍，对导航的实现方式以及优缺点进行了十分详细的介绍。</p>\n<h3 id=\"斗鱼5-0全新升级\"><a href=\"#斗鱼5-0全新升级\" class=\"headerlink\" title=\"斗鱼5.0全新升级\"></a><a href=\"https://www.zcool.com.cn/work/ZMzIxNDAxNjg=.html\" target=\"_blank\" rel=\"noopener\">斗鱼5.0全新升级</a></h3><p>来自站酷，文章篇幅较长，详细介绍了斗鱼 APP 和网页的设计思路。</p>\n<h3 id=\"有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）\"><a href=\"#有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）\" class=\"headerlink\" title=\"有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）\"></a><a href=\"https://mp.weixin.qq.com/s/-YTanYeFMuoPYrMG7F5RfA\" target=\"_blank\" rel=\"noopener\">有哪些好看的字体可以免费用？看完这篇就知道了（附字体安装包）</a></h3><p>目录：</p>\n<ul>\n<li>为什么字体需要收费？</li>\n<li>有哪些免费商用字体？</li>\n<li>使用字体时需要注意什么？</li>\n</ul>\n<h3 id=\"PPT中的图片不会排版-给你这份超全设计模板\"><a href=\"#PPT中的图片不会排版-给你这份超全设计模板\" class=\"headerlink\" title=\"PPT中的图片不会排版?给你这份超全设计模板\"></a><a href=\"https://mp.weixin.qq.com/s/Mu9guK8ppCjIyJOikWilJA\" target=\"_blank\" rel=\"noopener\">PPT中的图片不会排版?给你这份超全设计模板</a></h3><p>关于PPT排版，每天都有很多人问，图片应该怎么排版？而这篇文章，就是为你展示这些图片排版的范例。文章非常详细的介绍了 PPT 中有不同数量的图片时的排版技巧，干货满满。</p>\n<h2 id=\"文章集合\"><a href=\"#文章集合\" class=\"headerlink\" title=\"文章集合\"></a>文章集合</h2><h3 id=\"前端面试查漏补缺–Index篇-12万字符合集\"><a href=\"#前端面试查漏补缺–Index篇-12万字符合集\" class=\"headerlink\" title=\"前端面试查漏补缺–Index篇(12万字符合集)\"></a><a href=\"https://juejin.im/post/5c73347cf265da2dd773e7dc\" target=\"_blank\" rel=\"noopener\">前端面试查漏补缺–Index篇(12万字符合集)</a></h3><p>号称“全、准、详”的前端面试系列文章：</p>\n<blockquote>\n<p>其他面试文章都是高度总结,浓缩,适合临时抱佛脚!但如果知识点你本身不理解,光靠死记硬背,面试官随便深入一下你就蒙蔽了!所以这系列文章,就是对常考的知识点,从源头开始详解,只有你真正理解,才能自如应付面试官的各种刁难.</p>\n</blockquote>\n<h3 id=\"高质量文章精选-收藏集-掘金\"><a href=\"#高质量文章精选-收藏集-掘金\" class=\"headerlink\" title=\"高质量文章精选 - 收藏集 - 掘金\"></a><a href=\"https://segmentfault.com/a/1190000010448008\" target=\"_blank\" rel=\"noopener\">高质量文章精选 - 收藏集 - 掘金</a></h3><p>掘金发到 segmentfault 上的高质量文章集合，涵盖了编程领域的各个方面</p>\n<h3 id=\"奇文共欣赏，疑义相与析\"><a href=\"#奇文共欣赏，疑义相与析\" class=\"headerlink\" title=\"奇文共欣赏，疑义相与析\"></a><a href=\"https://github.com/jawil/blog/issues/6\" target=\"_blank\" rel=\"noopener\">奇文共欣赏，疑义相与析</a></h3><p>总结了很多不错的前端文章，领域包括ES6、前端基础、React、Webpack、TypeScript 等等，大概 100 篇左右，信息量很大。</p>\n<h3 id=\"年终回顾，为你汇总一份「前端技术清单」\"><a href=\"#年终回顾，为你汇总一份「前端技术清单」\" class=\"headerlink\" title=\"年终回顾，为你汇总一份「前端技术清单」\"></a><a href=\"https://juejin.im/post/5bdfb387e51d452c8e0aa902\" target=\"_blank\" rel=\"noopener\">年终回顾，为你汇总一份「前端技术清单」</a></h3><p>作者对前端基础相关好文以及前沿技术类文章进行了汇总，框架类的文章较少，期待作者继续补充完善。</p>\n<h3 id=\"微信网络技术的一些整理与思考\"><a href=\"#微信网络技术的一些整理与思考\" class=\"headerlink\" title=\"微信网络技术的一些整理与思考\"></a><a href=\"https://mp.weixin.qq.com/s/SHQay5wlz2fQ1xwQoh5eBA\" target=\"_blank\" rel=\"noopener\">微信网络技术的一些整理与思考</a></h3><p>在弱网情况下所有 app 中微信是几乎唯一一个能够正常工作的，大家都比较好奇为什么微信能够达到这样的效果。\b而作者收集了一些微信公开的网络优化相关的材料，特地分享于此。</p>\n<h3 id=\"五星推荐的系列文章清单\"><a href=\"#五星推荐的系列文章清单\" class=\"headerlink\" title=\"五星推荐的系列文章清单\"></a><a href=\"https://juejin.im/post/5c1f01fef265da61587723f4\" target=\"_blank\" rel=\"noopener\">五星推荐的系列文章清单</a></h3><p>大部分文章需要翻墙，文章有一些难度，需要一定的基础知识。</p>\n<h3 id=\"年度榜单！我整理了2018年所有文章和素材资源。\"><a href=\"#年度榜单！我整理了2018年所有文章和素材资源。\" class=\"headerlink\" title=\"年度榜单！我整理了2018年所有文章和素材资源。\"></a><a href=\"https://mp.weixin.qq.com/s/nKgeQ5guQJvmoeD5fTPdUA\" target=\"_blank\" rel=\"noopener\">年度榜单！我整理了2018年所有文章和素材资源。</a></h3><p>公众号【三顿】整理出的2018年这一年中全网值得一看的 PPT 文章。如果你对 PPT 感兴趣或者想寻找一些素材和创意，不妨在年末照着这份榜单，给自己充充电吧~</p>\n<h2 id=\"资源推荐\"><a href=\"#资源推荐\" class=\"headerlink\" title=\"资源推荐\"></a>资源推荐</h2><h3 id=\"译-如何学习-CSS\"><a href=\"#译-如何学习-CSS\" class=\"headerlink\" title=\"[译] 如何学习 CSS\"></a><a href=\"https://juejin.im/post/5c74daaaf265da2d9d1cb774\" target=\"_blank\" rel=\"noopener\">[译] 如何学习 CSS</a></h3><p>原文地址：<a href=\"https://www.smashingmagazine.com/2019/01/how-to-learn-css/，文中推荐了很多\" target=\"_blank\" rel=\"noopener\">https://www.smashingmagazine.com/2019/01/how-to-learn-css/，文中推荐了很多</a> CSS 相关的文章和视频</p>\n<h3 id=\"我如何零基础转行成为一个自信的前端\"><a href=\"#我如何零基础转行成为一个自信的前端\" class=\"headerlink\" title=\"我如何零基础转行成为一个自信的前端\"></a><a href=\"https://juejin.im/post/5c75d34851882564965edb23\" target=\"_blank\" rel=\"noopener\">我如何零基础转行成为一个自信的前端</a></h3><p>作者是蚂蚁金服的前端工程师，前面的可以略去不看，后面推荐的一些课程和牛人值得关注一下。</p>\n<h3 id=\"越忙越要多读书-字节跳动12位牛人的私藏书单\"><a href=\"#越忙越要多读书-字节跳动12位牛人的私藏书单\" class=\"headerlink\" title=\"越忙越要多读书| 字节跳动12位牛人的私藏书单\"></a><a href=\"https://mp.weixin.qq.com/s/lxvGNkd7qITi-j-hmn2Caw\" target=\"_blank\" rel=\"noopener\">越忙越要多读书| 字节跳动12位牛人的私藏书单</a></h3><p>新一年的好开端从阅读开始，字节范儿采访了字节跳动公司里12位大牛，邀请他们分享最近读过印象深刻的书，并且为大家推荐。</p>\n<h3 id=\"前端开发工程师必读书籍有哪些值得推荐？\"><a href=\"#前端开发工程师必读书籍有哪些值得推荐？\" class=\"headerlink\" title=\"前端开发工程师必读书籍有哪些值得推荐？\"></a><a href=\"https://www.zhihu.com/question/22591993\" target=\"_blank\" rel=\"noopener\">前端开发工程师必读书籍有哪些值得推荐？</a></h3><p>来自知乎，书荒的童鞋不妨一看。</p>\n<h3 id=\"个人分享–web-前端学习资源分享\"><a href=\"#个人分享–web-前端学习资源分享\" class=\"headerlink\" title=\"个人分享–web 前端学习资源分享\"></a><a href=\"https://juejin.im/post/5a0c1956f265da430a501f51\" target=\"_blank\" rel=\"noopener\">个人分享–web 前端学习资源分享</a></h3><p>掘金-守候i分享的前端学习资源，包括一些不错的教程和文章、大牛博客、前端团队博客、推荐书籍、推荐社区、公众号、推荐关注项目和综合项目教程等等。</p>\n<h3 id=\"入门前端一周年总结-我是如何快速入门前端的知识分享\"><a href=\"#入门前端一周年总结-我是如何快速入门前端的知识分享\" class=\"headerlink\" title=\"入门前端一周年总结-我是如何快速入门前端的知识分享\"></a><a href=\"https://juejin.im/post/5c2c18116fb9a049fb43c32c\" target=\"_blank\" rel=\"noopener\">入门前端一周年总结-我是如何快速入门前端的知识分享</a></h3><p>作者虽然入门前端才一年，但是已经有 14K star 的开源项目，面试了几十人，拥有丰富的面试经验，在这篇总结里作者分享了一下自己的学习方式和资源，值得学习与研究。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"OAuth-认证流程详解\"><a href=\"#OAuth-认证流程详解\" class=\"headerlink\" title=\"OAuth 认证流程详解\"></a><a href=\"https://www.jianshu.com/p/0db71eb445c8\" target=\"_blank\" rel=\"noopener\">OAuth 认证流程详解</a></h3><p>文章以接入微博登录为例，以非常短小的篇幅对 OAuth 认证流程进行了介绍和讲解。</p>\n<h3 id=\"单点登录原理与简单实现\"><a href=\"#单点登录原理与简单实现\" class=\"headerlink\" title=\"单点登录原理与简单实现\"></a><a href=\"https://www.jianshu.com/p/a2c4b877be7d\" target=\"_blank\" rel=\"noopener\">单点登录原理与简单实现</a></h3><p>很多产品中都会有 SSO（单点登录）的实现，而本篇文章就十分详尽的介绍了 SSO 的原理，同时介绍了实现方式。</p>\n<h3 id=\"区块链，将如何重新定义世界？\"><a href=\"#区块链，将如何重新定义世界？\" class=\"headerlink\" title=\"区块链，将如何重新定义世界？\"></a><a href=\"https://mp.weixin.qq.com/s/ikPBVTsOhOWyyJKJBf021w\" target=\"_blank\" rel=\"noopener\">区块链，将如何重新定义世界？</a></h3><p>最近，区块链真的很火，同时区块链结束被认为是继蒸汽机、电力、互联网之后，下一代颠覆性的核心技术。在这篇文章里，作者用最容易理解的方式解答了以下 4 个问题：</p>\n<ol>\n<li>区块链的本质到底是什么？</li>\n<li>区块链技术带来的三大巨变。</li>\n<li>区块链面临的两大技术挑战。</li>\n<li>区块链技术未来的发展脉络。</li>\n</ol>\n<p>不过，文章篇幅较长，做好心理准备……</p>\n<h3 id=\"也许，这样理解-HTTPS-更容易\"><a href=\"#也许，这样理解-HTTPS-更容易\" class=\"headerlink\" title=\"也许，这样理解 HTTPS 更容易\"></a><a href=\"http://showme.codes/2017-02-20/understand-https/\" target=\"_blank\" rel=\"noopener\">也许，这样理解 HTTPS 更容易</a></h3><p>作者从一个经常遇到的例子开始介绍为什么我们需要 HTTPS，同时推荐一本书《HTTP权威指南》</p>\n<h3 id=\"做为技术人员为什么要写博客\"><a href=\"#做为技术人员为什么要写博客\" class=\"headerlink\" title=\"做为技术人员为什么要写博客\"></a><a href=\"http://www.cnblogs.com/zery/p/3343893.html\" target=\"_blank\" rel=\"noopener\">做为技术人员为什么要写博客</a></h3><p>技术人员写博客这件事本身就很据争议，有人认为真正的大牛是不需要写博客来博人眼球的，也有人认为水平不够还写博客就是个笑话。而这篇文章就为你解释了上面这两个问题，最后和这篇文章一样，附上一句名言：<strong>有些事情你现在不去做，可能以后都不会有机会了！</strong></p>\n<h3 id=\"从苹果公开-macOS-和-iOS-内核源码说起，分享一些开源知识\"><a href=\"#从苹果公开-macOS-和-iOS-内核源码说起，分享一些开源知识\" class=\"headerlink\" title=\"从苹果公开 macOS 和 iOS 内核源码说起，分享一些开源知识\"></a><a href=\"https://mp.weixin.qq.com/s/4ma3tHBBSC_pINOtcpQtYA\" target=\"_blank\" rel=\"noopener\">从苹果公开 macOS 和 iOS 内核源码说起，分享一些开源知识</a></h3><p>聊了聊开源精神、介绍了些开源社区，分享了点开源项目，仅此而已（还嫌不够？）</p>\n<h3 id=\"程序员字典：「牛逼」\"><a href=\"#程序员字典：「牛逼」\" class=\"headerlink\" title=\"程序员字典：「牛逼」\"></a><a href=\"https://zhuanlan.zhihu.com/p/25050829\" target=\"_blank\" rel=\"noopener\">程序员字典：「牛逼」</a></h3><p>作者通过他在招人时的“奇葩”条件展开阐述了到底如何定义一个“牛逼”的程序员，从作者的字里行间可以看出，作者是一名资深程序员，同时更是一名资深面试官和 team leader，所以这篇文章对于入门级程序员和骨灰级程序猿来说都是极好的</p>\n<h3 id=\"给网站加-HTTPS-完全指南\"><a href=\"#给网站加-HTTPS-完全指南\" class=\"headerlink\" title=\"给网站加 HTTPS 完全指南\"></a><a href=\"https://ksmx.me/letsencrypt-ssl-https/\" target=\"_blank\" rel=\"noopener\">给网站加 HTTPS 完全指南</a></h3><p>作者介绍了如何给自己的个人网站加 https，虽然具体是否可行我还没有尝试，但是如果你有这个需求，这篇文章也许会帮到你。</p>\n<h3 id=\"反击爬虫，前端工程师的脑洞可以有多大？\"><a href=\"#反击爬虫，前端工程师的脑洞可以有多大？\" class=\"headerlink\" title=\"反击爬虫，前端工程师的脑洞可以有多大？\"></a><a href=\"http://litten.me/2017/07/09/prevent-spiders/\" target=\"_blank\" rel=\"noopener\">反击爬虫，前端工程师的脑洞可以有多大？</a></h3><p>对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。 而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是<strong>爬虫与反爬虫</strong>这一话题的由来。 作为前端工程师，我们可以增加一下游戏难度，设计出一些<strong>很(sang)有(xin)意(bing)思(kuang)</strong>的反爬虫策略。</p>\n<h3 id=\"2016年学习Javascript是一种什么样的体验？\"><a href=\"#2016年学习Javascript是一种什么样的体验？\" class=\"headerlink\" title=\"2016年学习Javascript是一种什么样的体验？\"></a><a href=\"https://mp.weixin.qq.com/s/sYFhD55nHsxtjN_f_wfPLA\" target=\"_blank\" rel=\"noopener\">2016年学习Javascript是一种什么样的体验？</a></h3><p>与其说这是一篇好文章，还不如说这是一篇好吐槽，和上面那篇类似，作者想表达的都是“前端疲劳”这件事，只不过通过对话的形式让画风变得轻松愉快。</p>\n<h3 id=\"17-张程序员壁纸推荐\"><a href=\"#17-张程序员壁纸推荐\" class=\"headerlink\" title=\"17 张程序员壁纸推荐\"></a><a href=\"http://www.runoob.com/w3cnote/17-wallpaper-for-programmer.html\" target=\"_blank\" rel=\"noopener\">17 张程序员壁纸推荐</a></h3><p>不算是一篇好文章，但是这 17 张壁纸着实不错~</p>\n<h3 id=\"前后端分离实践（一）\"><a href=\"#前后端分离实践（一）\" class=\"headerlink\" title=\"前后端分离实践（一）\"></a><a href=\"https://segmentfault.com/a/1190000009329474\" target=\"_blank\" rel=\"noopener\">前后端分离实践（一）</a></h3><p>很多人都不理解甚至误解了“前后端分离”这一概念，相信这篇文章可以让你搞明白到底什么是前后端分离以及我们在什么业务场景下需要前后端分离和如何做才算前后端分离。</p>\n<h3 id=\"程序员怎么升职？\"><a href=\"#程序员怎么升职？\" class=\"headerlink\" title=\"程序员怎么升职？\"></a><a href=\"https://www.zhihu.com/question/20259295\" target=\"_blank\" rel=\"noopener\">程序员怎么升职？</a></h3><p>知乎上关于“程序员怎么升职”这个问题的回答，我认认真真的阅读了获得最高赞的那个回答，感觉说的很对，其中有很多道理是我一直保持认同的，希望每一位从事这个行业的人都可以花时间看一下并思考。</p>\n<h3 id=\"当你练习表达的时候，开场白是怎样去设计呢\"><a href=\"#当你练习表达的时候，开场白是怎样去设计呢\" class=\"headerlink\" title=\"当你练习表达的时候，开场白是怎样去设计呢\"></a><a href=\"http://www.jianshu.com/p/f76c540e3158\" target=\"_blank\" rel=\"noopener\">当你练习表达的时候，开场白是怎样去设计呢</a></h3><p>不管你从事什么职业，表达自己都是一项必备技能。而如何表达自己，如何吸引听众呢？这篇文章从生物学的角度阐述了开场白的重要性以及什么样的开场白才会吸引到听众，同时作者还有同一类型的其他文章，感兴趣的话可以多读读。</p>\n<h3 id=\"程序员的鄙视链\"><a href=\"#程序员的鄙视链\" class=\"headerlink\" title=\"程序员的鄙视链\"></a><a href=\"http://www.techug.com/post/look-down-chains-of-programmer.html\" target=\"_blank\" rel=\"noopener\">程序员的鄙视链</a></h3><p>如果你看了以上这些惨绝人寰的鄙视链之后，仍然没有击倒你想要学习 coding 的心，那我必须提醒你一件最重要的事：先去交一个女朋友，再来学写程序；因为一旦你成为软件工程师之后，就交不到女朋友了。</p>\n<h3 id=\"JavaScript-疲劳终极指南：我们行业的真相\"><a href=\"#JavaScript-疲劳终极指南：我们行业的真相\" class=\"headerlink\" title=\"JavaScript 疲劳终极指南：我们行业的真相\"></a><a href=\"http://www.zcfy.cc/article/3914\" target=\"_blank\" rel=\"noopener\">JavaScript 疲劳终极指南：我们行业的真相</a></h3><p>抱怨 JS 疲劳就像是在抱怨人类发明了太多解决问题的工具：从邮件到飞机到宇宙飞船。<strong>这篇文章的目的是希望改变你对软件工程行业的普遍的看法，助你在你可能工作的领域上一臂之力</strong>。</p>\n<h3 id=\"超大型-JavaScript-应用的设计哲学\"><a href=\"#超大型-JavaScript-应用的设计哲学\" class=\"headerlink\" title=\"超大型 JavaScript 应用的设计哲学\"></a><a href=\"https://zhuanlan.zhihu.com/p/35929167\" target=\"_blank\" rel=\"noopener\">超大型 JavaScript 应用的设计哲学</a></h3><p>这篇文章为译文，基于 <a href=\"https://link.zhihu.com/?target=https%3A//medium.com/%40cramforce\" target=\"_blank\" rel=\"noopener\">Malte Ubl</a> 在 JSConf Australia 的演讲速记稿和现场视频整理而来，<a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DZZmUwXEiPm4\" target=\"_blank\" rel=\"noopener\">你可以在 YouTube 上观看完整演讲</a>。这篇文章很长，文中讨论了前端领域很多热门的话题与技术，知识点很多很密集。</p>\n<h3 id=\"图解Git\"><a href=\"#图解Git\" class=\"headerlink\" title=\"图解Git\"></a><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></h3><p>图解 git 中的最常用命令。如果你稍微理解 git 的工作原理，这篇文章能够让你理解的更透彻。</p>\n<h3 id=\"如何成为一名优秀的全栈工程师\"><a href=\"#如何成为一名优秀的全栈工程师\" class=\"headerlink\" title=\"如何成为一名优秀的全栈工程师\"></a><a href=\"https://www.jianshu.com/p/f0d134ed7fd0\" target=\"_blank\" rel=\"noopener\">如何成为一名优秀的全栈工程师</a></h3><p>现在感觉“全栈工程师”已经成为了一个梗，然而，实际上全栈工程师是真实存在的，并且是一类对产品和业务发展起到很重要作用的工程师，该文章有点鸡汤，理论偏多。</p>\n<h3 id=\"路由器爱国上网、屏蔽广告与宽带提速\"><a href=\"#路由器爱国上网、屏蔽广告与宽带提速\" class=\"headerlink\" title=\"路由器爱国上网、屏蔽广告与宽带提速\"></a><a href=\"http://fullstack.blog/2018/03/27/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%88%B1%E5%9B%BD%E4%B8%8A%E7%BD%91%E3%80%81%E5%B1%8F%E8%94%BD%E5%B9%BF%E5%91%8A%E4%B8%8E%E5%AE%BD%E5%B8%A6%E6%8F%90%E9%80%9F/\" target=\"_blank\" rel=\"noopener\">路由器爱国上网、屏蔽广告与宽带提速</a></h3><p>作者介绍了利用小米路由器实现爱国上网的具体操作流程，而路由器经过改造之后，所有接入的终端就都可以实现爱国上网了，简直是一劳永逸，而且作者在文章末尾还介绍了宽带提速的方法，每月只要十几块钱，就可以享受 100M 网络了，效果非常明显。</p>\n<h3 id=\"中文文案排版指北\"><a href=\"#中文文案排版指北\" class=\"headerlink\" title=\"中文文案排版指北\"></a><a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">中文文案排版指北</a></h3><p>提供统一中文文案、排版的相关用法，降低团队成员之间的沟通成本。</p>\n<h3 id=\"提问的智慧\"><a href=\"#提问的智慧\" class=\"headerlink\" title=\"提问的智慧\"></a><a href=\"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md\" target=\"_blank\" rel=\"noopener\">提问的智慧</a></h3><p>原文网址：<a href=\"http://www.catb.org/~esr/faqs/smart-questions.html\" target=\"_blank\" rel=\"noopener\">http://www.catb.org/~esr/faqs/smart-questions.html</a>，文章比较长，但是看完会很有收获，提问也是有很多需要注意的地方的，好的提问方式不仅能够更快的获得想要的答案，还可以提高自己的情商，获得他人的认可。</p>\n<h3 id=\"理解-OAuth-2-0\"><a href=\"#理解-OAuth-2-0\" class=\"headerlink\" title=\"理解 OAuth 2.0\"></a><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"noopener\">理解 OAuth 2.0</a></h3><p><a href=\"http://en.wikipedia.org/wiki/OAuth\" target=\"_blank\" rel=\"noopener\">OAuth</a>是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是 2.0 版。在这篇文章中，阮一峰对 OAuth 2.0 的设计思路和运行流程，做了一个简明通俗的解释。</p>\n<h3 id=\"以色列简史，简到崩溃，笑到流泪！\"><a href=\"#以色列简史，简到崩溃，笑到流泪！\" class=\"headerlink\" title=\"以色列简史，简到崩溃，笑到流泪！\"></a><a href=\"https://mp.weixin.qq.com/s/8Kvgu6sSU57U1q-1K1G-XA\" target=\"_blank\" rel=\"noopener\">以色列简史，简到崩溃，笑到流泪！</a></h3><p>以图文和人物对话的方式对巴以冲突的历史原因以及以色列的历史进行了介绍，风趣幽默，通过一种别样的方式了解历史，我很喜欢。</p>\n<h3 id=\"97-Things-Every-Programmer-Should-Know\"><a href=\"#97-Things-Every-Programmer-Should-Know\" class=\"headerlink\" title=\"97 Things Every Programmer Should Know\"></a><a href=\"https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/\" target=\"_blank\" rel=\"noopener\">97 Things Every Programmer Should Know</a></h3><p>同事推荐的文章，97 个程序员需要知道的理论，文章内容较长，读起来可能比较枯燥，而且暂时没有看到中文版本。。</p>\n<h3 id=\"为什么你统计-PV-的方式是错的？\"><a href=\"#为什么你统计-PV-的方式是错的？\" class=\"headerlink\" title=\"为什么你统计 PV 的方式是错的？\"></a><a href=\"https://juejin.im/post/58ef1fcc570c3500561c2e89\" target=\"_blank\" rel=\"noopener\">为什么你统计 PV 的方式是错的？</a></h3><p>翻译自 Google 工程师 Philip Walton 的<a href=\"https://philipwalton.com/articles/how-we-track-pageviews-is-all-wrong/\" target=\"_blank\" rel=\"noopener\">文章</a>。该文会帮你剖析为什么你常用的统计方式是错的？然后给出可行的解决方案。</p>\n<h3 id=\"编程语言拟人化\"><a href=\"#编程语言拟人化\" class=\"headerlink\" title=\"编程语言拟人化\"></a><a href=\"http://blog.jobbole.com/63311/\" target=\"_blank\" rel=\"noopener\">编程语言拟人化</a></h3><p>作者将各种语言都拟人化了，并赋予了他们一些特征，很有意思。</p>\n<h3 id=\"从平面设计师到前端工程师：五个月的转变历程\"><a href=\"#从平面设计师到前端工程师：五个月的转变历程\" class=\"headerlink\" title=\"从平面设计师到前端工程师：五个月的转变历程\"></a><a href=\"https://mp.weixin.qq.com/s/JGADqRL56xfHM37Cix4VEw\" target=\"_blank\" rel=\"noopener\">从平面设计师到前端工程师：五个月的转变历程</a></h3><p>作者通过自己的转行经历对前端知识路线进行了概括，同时还提供了一些很好的自学资源，包括视频和文章。原文：<a href=\"https://medium.com/@vinceshao/graphic-designer-to-front-end-developer-ch-3e1ac681eea8\" target=\"_blank\" rel=\"noopener\">https://medium.com/@vinceshao/graphic-designer-to-front-end-developer-ch-3e1ac681eea8</a></p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"}]},{"title":"JS中的对象系统","slug":"JS中的对象系统","date":"2017-08-07T02:10:23.000Z","updated":"2019-02-28T12:34:16.852Z","comments":true,"path":"api/articles/JS中的对象系统.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_111.png","content":"<p>转载自<a href=\"http://www.jianshu.com/p/d0930dc0f95d\" target=\"_blank\" rel=\"noopener\">简书-浅析JavaScript的对象系统</a> 首先，你肯定在不少地方看到过这句话：</p>\n<blockquote>\n<p>JavaScript 中一切皆对象</p>\n</blockquote>\n<p>这句话是很有道理的（废话，要不然能在不少地方都看到吗。。），你可能没有意识到，在 JavaScript（以下简称 JS）中，你声明一个变量 <code>let a = 3</code>，此时的 a 其实是一个对象，因为你可以将它当做对象一样去调用 <code>toString()</code> 方法，这其中的答案都在 JS 对象系统中，请看下面这张图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_111.png\" alt=\"\" width=\"600\"></div>\n\n<p>下面我们就结合这张图来分析一下 JS 对象系统的结构</p>\n<h2 id=\"本地对象\"><a href=\"#本地对象\" class=\"headerlink\" title=\"本地对象\"></a>本地对象</h2><p>“本地对象”的说法可能比较陌生，也可以叫做“原生对象”、“内置对象”、“内建对象”，但其实指的都是 native object。ECMA-262 对于 native object 的定义为：</p>\n<blockquote>\n<p>独立于宿主环境的 ECMAScript 实现提供的对象</p>\n</blockquote>\n<p>我们知道，“宿主”一般指浏览器，而“独立于宿主环境”，也就是说与浏览器环境不相关，这就是说：native object 与浏览器不相关，只要这个浏览器按照 ECMAScript 规范实现了JS，那就必然实现了规范中的所有 native object。换句话说就是：<strong>本地对象（native object）是语言本身实现和提供的对象，和语言运行在哪个环境无关</strong>。也就是说，不管你的JS代码在哪里跑，你都可以 <code>new</code> 出 native object 并使用它。照此理解，我觉得其实把 native object 翻译成“原生对象”最合意。</p>\n<h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><blockquote>\n<p>到目前为止，我们看到的大多数引用类型值都是 Object 类型的实例；而且，Object 也是 ECMAScript 中使用最多的一个类型。虽然 Object 的实例不具备多少功能，但对于在应用程序中存储和传输数据而言，它们确实是非常理想的选择。——《JavaScript高级程序设计（第3版）》</p>\n</blockquote>\n<p>“万物从无到有”，JS 中的大多数引用类型值都是 Object 类型的实例，而 Object 的原型就是 null 了（可以在 chrome 控制台中打印 Object.prototype.__proto__），Object 是所有其他对象类型的基础类型，提供了 toString() 等基础方法</p>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>数组类型</p>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><p>日期类型</p>\n<h3 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h3><p>正则类型</p>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><blockquote>\n<p>说起来 ECMAScript 中什么最有意思，我想那莫过于函数了——而有意思的根源，则在于函数实际上是对象。每个函数都是 Function 类型的实例，而且都与其他引用类型一样具有属性和方法。——《J3》</p>\n</blockquote>\n<p>没错，请注意大小写，Function 是一种对象类型，而 function 则是一个对象实例，见如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>() <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>);    <span class=\"comment\">//true(构造函数Function()是Function类型的实例)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>() <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);    <span class=\"comment\">//true(构造函数Function()当然也是Object类型的实例)</span></span><br></pre></td></tr></table></figure>\n<p>事实上，任何一个函数都是函数对象的实例，而函数类型本身就是一种对象类型，所以：<strong>函数也是对象</strong>。</p>\n<h3 id=\"Error-等各种错误类对象\"><a href=\"#Error-等各种错误类对象\" class=\"headerlink\" title=\"Error 等各种错误类对象\"></a>Error 等各种错误类对象</h3><p>Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError 等错误类型的对象。</p>\n<h3 id=\"String、Number、Boolean\"><a href=\"#String、Number、Boolean\" class=\"headerlink\" title=\"String、Number、Boolean\"></a>String、Number、Boolean</h3><p>之所以将这三类放到一起，是因为它们属于JS中的基本数据类型，但其实它们也是一种对象类型，这样你才能像使用对象一般操作字符串、数值、布尔值，见下面代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">str = str.substr(<span class=\"number\">0</span>,<span class=\"number\">5</span>);    <span class=\"comment\">//调用substr()方法截取字符串，我是字符串，但实际上是一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);    <span class=\"comment\">//'Hello'</span></span><br></pre></td></tr></table></figure>\n<p>所以，当我们通过变量声明的方式去声明一个字符串、数字、布尔值的时候，其实后台帮我们创建了一个对象：</p>\n<blockquote>\n<p>实际上，每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据 ——《J3》</p>\n</blockquote>\n<p>书上一语道明。注意一下这句话中的“读取”和“对应”两个词。“读取”是指进入读取模式，即从内存中去读取这个字符串值的时候；“对应”指的是基本类型值是哪种类型，后台自动给你创建的基本包装类型就是哪种对应的类型，比如这里的基本类型值是 <code>String</code> 类型，那后台创建的基本包装类型也就是 <code>String</code> 包装类型。 因为这一机制，上面代码的实际执行情况其实是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\"><span class=\"comment\">//str = str.substr(0,5);    //(str进入读取模式，准备创建基本包装类型对象)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'Hello World'</span>);</span><br><span class=\"line\">str = _str.substr(<span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">_str = <span class=\"literal\">null</span>;    <span class=\"comment\">//使用完后台会立即将该包装对象销毁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);    <span class=\"comment\">//'Hello'</span></span><br></pre></td></tr></table></figure>\n<p>这里只展示了 String 包装类型，其实 Number 和 Boolean 也是完全一样的原理</p>\n<h3 id=\"内置对象（单体内置对象）（built-in-object）\"><a href=\"#内置对象（单体内置对象）（built-in-object）\" class=\"headerlink\" title=\"内置对象（单体内置对象）（built-in object）\"></a>内置对象（单体内置对象）（built-in object）</h3><p>这个叫 built-in object，上面那个叫 native object，那么它们有什么区别呢，还是看一下《J3》这本书中的解释吧：</p>\n<blockquote>\n<p>ECMA-262 对内置对象的定义是：“由 ECMAScript 实现提供的、不依赖于宿主环境的对象，这些对象在 ECMAScript 程序执行之前就已经存在了。”意思就是说，开发人员不必显式地实例化内置对象，因为它们已经实例化了。——《J3》</p>\n</blockquote>\n<p>这是 ECMA-262 对于 built-in object 的定义。对比 native object 的定义：“独立于宿主环境的 ECMAScript 实现提供的对象”，可以看出，built-in object 是更加特殊的 native object，built-in object 属于 native object。ECMA-262 定义了两种 built-in object：Global 对象、Math 对象。</p>\n<h4 id=\"Global-对象\"><a href=\"#Global-对象\" class=\"headerlink\" title=\"Global 对象\"></a>Global 对象</h4><p>事实上，js 中并不存在所谓的全局变量以及完全独立的函数。没错，你定义的所有全局变量其实都是 Global 对象的属性，<strong>你在全局作用域下定义的所有函数其实都是 Global 对象的方法</strong>。</p>\n<blockquote>\n<p>ECMAScript 中的 Global 对象在某种意义上是作为一个终极的“兜底儿对象” 来定义的。换句话说，不属于任何其他对象的属性和方法，终都是它的属性和方法。事实上，没有全局变量或全局函数；所有在全局作用域中定义的属性和函数，都是 Global 对象的属性。——《J3》</p>\n</blockquote>\n<p>parseInt()、eval()、encodeURIComponent() 这些函数实际上都是 Global 对象的方法，在使用这些方法的时候无需通过对象去调用，直接就可以使用。引文说过：“这些对象在 ECMAScript 程序执行之前就已经存在了。”这也算 build-in object 的一个特别之处，《J3》将 build-in object 定义为“单体内置对象”，这个“单体”是否就是指无需手动实例化这一点？ Global 对象的所有属性如下表：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_103.png\" alt=\"\" width=\"400\"></div>\n\n<p>好吧，特殊值 undefined 居然是 Global 对象的一个属性值 - -。乍看之下可能会有点诧异，不过仔细想想，我们之所以说 JavaScript 中一切皆对象是有原因的，你看，就连 undefined 都是对象的属性值。从表中还可以看到，所有原生引用类型的构造函数也都是 Global 对象的属性。这怎么理解？其实也很好理解，比如说当你想要创建一个日期类型的变量时，直接上构造函数 <code>var date = new Date();</code> 就可以了，可是你想过没有，Date() 构造函数本身是一个函数，而前面我们说过，JS并不存在完全独立的函数，任何函数其实都是挂在某个对象下的方法，哪怕它是一个构造函数。而这些原生构造函数，其“挂载”的对象正是 Global 对象。 介绍了这么多关于 Global 对象的内容，是不是还是不清楚它是个什么玩意儿？这是因为我们在浏览器中并不能直接访问这个对象。好在浏览器为我们实现了一个包含了 Global 对象的 window 对象。</p>\n<blockquote>\n<p>ECMAScript 虽然没有指出如何直接访问 Global 对象，但 Web 浏览器都是将这个全局对象作为 window 对象的一部分加以实现的。因此，在全局作用域中声明的所有变量和函数，就都成为了 window 对象的属性。——《J3》</p>\n</blockquote>\n<p>window 对象包含了 Global 对象的所有内容，同时扩展了大量自身需要的属性和方法（比如常用的 <code>alert()</code>）。因此，在浏览器中我们可以通过 window 对象随意访问上述的属性和方法。请看下面代码并加以理解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.Date();    <span class=\"comment\">//window是对Global对象的扩展实现，构造函数Date()确实是挂在window上面的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date);    <span class=\"comment\">//Mon Aug 07 2017 10:07:28 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure>\n<p>其实你也可以在控制台中打印一下 window，你就可以发现它确实包含了上述属性和构造函数</p>\n<h4 id=\"Math-对象\"><a href=\"#Math-对象\" class=\"headerlink\" title=\"Math     对象\"></a>Math     对象</h4><p>Math 对象是一个保存着必要的数学操作的 build-in object。里面保存着常量 e、圆周率 π 等的值作为属性，同时提供了取整 Math.floor()、取随机数 Math.random()、求平方根等等数学方法。和 Global 对象一样，这些属性和方法都可以在任何时候任何地方直接访问和调用，只不过其形式统一为：Math.***。</p>\n<h2 id=\"宿主对象\"><a href=\"#宿主对象\" class=\"headerlink\" title=\"宿主对象\"></a>宿主对象</h2><p>宿主对象是指宿主环境所实现和提供的对象。所有非本地对象（native object）都是宿主对象。我之所以在结构图中把自定义对象挂到了宿主对象下正是基于此，不过这并非定死的，你若将自定义对象拎出来和本地对象、宿主对象并列放也并非不可。 <strong>所谓宿主，就是指 JS 代码所在的运行环境</strong>。对于浏览器环境而言，我们显示一个页面需要 HTML，所以浏览器实现了 DOM 对象 —— window.document；我们还需要浏览器本身给我们提供一些必要的东西，比如 URL 地址相关的 location、设备屏幕相关的 screen 等，所以浏览器又为我们提供了 BOM 对象 —— window。这些对象，就是 host object。等等，怎么 window 对象又出场了？上面不是说过了，window 对象是浏览器对 Global 对象的扩展实现，是 Global 对象的超集，那这玩意儿究竟该挂到 build-in object 上，还是宿主对象下的 BOM 上？答案当然是后者。可以明确的是，window 对象本就是浏览器所实现的，那它当然属于浏览器对象模型（BOM）了！只不过，window 把 ECMAScript 规定的 Global 对象也给一并实现了而已。还有，DOM 对象即是 window.document，而 window.document 就是 DOM 的根节点，从这点来讲，我们可以理解为 BOM 包含了 DOM。 如此，我们终于找到最终对象了 - -，它正是 BOM —— window。你几乎可以在这个对象中找到一切。全局变量、自定义对象、JSON 对象（ECMA262-5 引入为规范）、Math 对象、原生构造函数、Global 的东西。。。 万物合一，世界清静了。 最后，可以把最开始给的图修正更新一下了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_112.png\" alt=\"\" width=\"600\"></div>\n\n<p>从图上可以看到多了一个 JSON 对象，原因是 ECMA262-5 已经将 JSON 对象纳 入native object 了。</p>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"对象","path":"api/tags/对象.json"}]}]}