{"total":114,"pageSize":10,"pageCount":12,"data":[{"title":"CSS深入理解之relative","slug":"CSS深入理解之relative","date":"2017-04-21T07:33:18.000Z","updated":"2019-01-27T10:07:12.316Z","comments":true,"path":"api/articles/CSS深入理解之relative.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"1-relative-和-absolute-的相煎关系\"><a href=\"#1-relative-和-absolute-的相煎关系\" class=\"headerlink\" title=\"1. relative 和 absolute 的相煎关系\"></a>1. relative 和 absolute 的相煎关系</h2><ol>\n<li>限制 left / top / right / bottom 定位；</li>\n<li>限制 z-index 层级：relative 中的 absolute 层级不起作用，只看 relative 层级；</li>\n<li>限制在 overflow 下的嚣张气焰：消除 absolute 不受 overflow 限制的能力</li>\n</ol>\n<h2 id=\"2-relative-和定位\"><a href=\"#2-relative-和定位\" class=\"headerlink\" title=\"2. relative 和定位\"></a>2. relative 和定位</h2><ol>\n<li>相对自身：top: 100px; left: 100px 为相对于自身原位置移动</li>\n<li>无侵入：不会影响到其他元素，可应用于自定义拖拽</li>\n<li>同时设置 top / bottom / left / right 的行为表现：绝对定位是拉伸，相对定位是斗争–top &gt; bottom，left &gt; right</li>\n</ol>\n<h2 id=\"3-relative-与-z-index\"><a href=\"#3-relative-与-z-index\" class=\"headerlink\" title=\"3. relative 与 z-index\"></a>3. relative 与 z-index</h2><ol>\n<li>提高层叠上下文</li>\n<li>新建层叠上下文与层级</li>\n</ol>\n<p>z-index：auto 是不会产生层叠上下文的</p>\n<h2 id=\"4-relative-的最小化影响原则\"><a href=\"#4-relative-的最小化影响原则\" class=\"headerlink\" title=\"4. relative 的最小化影响原则\"></a>4. relative 的最小化影响原则</h2><h3 id=\"尽量避免使用relative\"><a href=\"#尽量避免使用relative\" class=\"headerlink\" title=\"尽量避免使用relative\"></a>尽量避免使用relative</h3><p>absolute 定位不依赖使用 relative，不要为了使用 absolute 而设置 relative</p>\n<h3 id=\"最小化原则\"><a href=\"#最小化原则\" class=\"headerlink\" title=\"最小化原则\"></a>最小化原则</h3><p>如果必须要使用 relative，就把 absolute 定位的元素放进一个空 div 里，使 relative 的 div 只有定位为 absolute 的子元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:relative\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"pig_head.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;top:0;right:0;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之z-index","slug":"CSS深入理解之z-index","date":"2017-04-20T15:38:25.000Z","updated":"2019-01-27T10:07:12.316Z","comments":true,"path":"api/articles/CSS深入理解之z-index.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_85.png","content":"<h2 id=\"1-z-index-基础\"><a href=\"#1-z-index-基础\" class=\"headerlink\" title=\"1. z-index 基础\"></a>1. z-index 基础</h2><h3 id=\"z-index-含义\"><a href=\"#z-index-含义\" class=\"headerlink\" title=\"z-index 含义\"></a>z-index 含义</h3><p>z-index 属性指定了元素及其子元素的 [z顺序]，而 [z顺序] 可以决定当元素发生覆盖的时候，哪个元素在上面.通常一个较大 z-index 值的元素会覆盖较低的那一个</p>\n<h3 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a>属性值</h3><ul>\n<li><code>auto</code> –&gt; 默认值</li>\n<li><code>&lt;integer&gt;</code> –&gt; 整数值</li>\n<li><code>inherit</code> –&gt; 继承</li>\n</ul>\n<h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><ul>\n<li>支持负值</li>\n<li>支持 CSS3 animation 动画</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> zIndex &#123;</span><br><span class=\"line\">  0%&#123; <span class=\"attribute\">z-index</span>:-<span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">  100%&#123; <span class=\"attribute\">z-index</span>:<span class=\"number\">51</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 CSS2.1 时代，需要和定位元素配合使用</li>\n</ul>\n<p>如果不考虑 CSS3，只有定位元素(position:relative / absolute / fixed / sticky，没有 static)的 z-index 才有作用！在 CSS3 中有例外……</p>\n<h2 id=\"2-z-index-与定位元素\"><a href=\"#2-z-index-与定位元素\" class=\"headerlink\" title=\"2. z-index 与定位元素\"></a>2. z-index 与定位元素</h2><h3 id=\"如果定位元素-z-index-没有发生嵌套\"><a href=\"#如果定位元素-z-index-没有发生嵌套\" class=\"headerlink\" title=\"如果定位元素 z-index 没有发生嵌套\"></a>如果定位元素 z-index 没有发生嵌套</h3><ul>\n<li>后来居上</li>\n<li>哪个大，哪个在上面</li>\n</ul>\n<h3 id=\"如果定位元素发生嵌套\"><a href=\"#如果定位元素发生嵌套\" class=\"headerlink\" title=\"如果定位元素发生嵌套\"></a>如果定位元素发生嵌套</h3><p>祖先优先原则（前提：z-index 为数值，不是 auto）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_85.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"3-层叠上下文\"><a href=\"#3-层叠上下文\" class=\"headerlink\" title=\"3. 层叠上下文\"></a>3. 层叠上下文</h2><p>层叠上下文(stacking context)是 HTML 元素中的一个三维概念，表示元素在 z 轴上有了”可以高人一等”的能力，含义：</p>\n<ul>\n<li>皇帝(你)</li>\n<li>当官(层叠上下文元素)</li>\n<li>家族(嵌套)</li>\n</ul>\n<p>层叠上下文是表示普通老百姓 HTML 元素当官了，离皇帝更近了</p>\n<h3 id=\"产生层叠上下文：\"><a href=\"#产生层叠上下文：\" class=\"headerlink\" title=\"产生层叠上下文：\"></a>产生层叠上下文：</h3><ol>\n<li>页面根元素天生具有层叠上下文，称之为”根层叠上下文” –&gt; 皇亲国戚</li>\n<li>z-index 值为数值的定位元素也具有层叠上下文 –&gt; 科考入选</li>\n<li>其他属性 –&gt; 其他当官途径</li>\n</ol>\n<h3 id=\"层叠上下文特性\"><a href=\"#层叠上下文特性\" class=\"headerlink\" title=\"层叠上下文特性\"></a>层叠上下文特性</h3><ul>\n<li>层叠上下文可以嵌套，组合成一个分层次的层叠上下文</li>\n</ul>\n<p>一个家里，爸爸可以当官，孩子也是可以同时当官的。这个家族的官就当得比较有层次</p>\n<ul>\n<li>每个层叠上下文和兄弟元素独立: 当进行层叠变化或渲染的时候，只需要考虑后代元素</li>\n</ul>\n<p>自己当官，兄弟不沾光。有什么福利或者变故只会影响自己的孩子们</p>\n<ul>\n<li>每个层叠上下文是自成体系的: 当元素的内容被层叠后，整个元素被认为是在父层的层叠顺序中</li>\n</ul>\n<p>每个当官的都有属于自己的小团体。当子孙或属下发生的排辈摩擦什么的，都是自己宅院的事情，不会影响官员自己和皇帝之间的距离</p>\n<h2 id=\"4-层叠水平\"><a href=\"#4-层叠水平\" class=\"headerlink\" title=\"4. 层叠水平\"></a>4. 层叠水平</h2><p>层叠上下文中的每个元素都有一个层叠水平(stacking level)，决定了同一个层叠上下文中元素在 z 轴上的显示顺序，<strong>遵循”后来居上”和”谁大谁上”的层叠准则</strong> 层<strong>叠水平和 z-index 不是一个东西</strong>。普通元素也有层叠水平，每一个当官的家里儿孙啊，仆人什么的，都有一个论资排辈(即层叠水平)，决定了在一起的时候，谁排在前面，离官员更近。</p>\n<h2 id=\"5-层叠顺序\"><a href=\"#5-层叠顺序\" class=\"headerlink\" title=\"5. 层叠顺序\"></a>5. 层叠顺序</h2><p>元素发生层叠时候有着特定的垂直显示顺序，即内容 &gt; 布局 &gt; 装饰</p>\n<div align=\"center\"><img src=\"/images/hexo_post_3.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"6-z-index-与层叠上下文\"><a href=\"#6-z-index-与层叠上下文\" class=\"headerlink\" title=\"6. z-index 与层叠上下文\"></a>6. z-index 与层叠上下文</h2><ol>\n<li>定位元素默认 z-index: auto，同时可以看成是 z-index: 0;</li>\n<li>z-index 不为 auto 的定位元素会创建层叠上下文;</li>\n<li>z-index 层叠顺序的比较止步于父级层叠上下文;</li>\n</ol>\n<div align=\"center\"><img src=\"/images/hexo_post_294.png\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"7-其他-CSS-属性与层叠上下文\"><a href=\"#7-其他-CSS-属性与层叠上下文\" class=\"headerlink\" title=\"7. 其他 CSS 属性与层叠上下文\"></a>7. 其他 CSS 属性与层叠上下文</h2><p>其他参与层叠上下文的属性们</p>\n<ol>\n<li>z-index 值不为 auto 的 flex 项（父元素display：flex | inline-flex）</li>\n<li>元素的 opacity 值不是 1</li>\n<li>元素的 transform 值不是 none</li>\n<li>元素 mix-blend-mode 值不是 normal</li>\n<li>元素的 filter 值不是 none</li>\n<li>元素的 isolation 值是 isolate</li>\n<li>position: fixed 声明</li>\n<li>will-change 指定的属性值为上面任意一个</li>\n<li>元素的 -webkit-overflow-scrolling 设为 touch</li>\n</ol>\n<h2 id=\"8-z-index-与其他-CSS-属性层叠上下文\"><a href=\"#8-z-index-与其他-CSS-属性层叠上下文\" class=\"headerlink\" title=\"8. z-index 与其他 CSS 属性层叠上下文\"></a>8. z-index 与其他 CSS 属性层叠上下文</h2><h3 id=\"不支持-z-index-的层叠上下文元素的层叠顺序均是-z-index-auto-级别\"><a href=\"#不支持-z-index-的层叠上下文元素的层叠顺序均是-z-index-auto-级别\" class=\"headerlink\" title=\"不支持 z-index 的层叠上下文元素的层叠顺序均是 z-index: auto 级别\"></a>不支持 z-index 的层叠上下文元素的层叠顺序均是 z-index: auto 级别</h3><div align=\"center\"><img src=\"/images/hexo_post_57.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"依赖-z-index-值创建层叠上下文的情况\"><a href=\"#依赖-z-index-值创建层叠上下文的情况\" class=\"headerlink\" title=\"依赖 z-index 值创建层叠上下文的情况\"></a>依赖 z-index 值创建层叠上下文的情况</h3><ol>\n<li>position 值为 relative / absolute 或 fixed(部分浏览器)</li>\n<li>display: flex | inline-flex 容器的子 flex 项</li>\n</ol>\n<h2 id=\"9-z-index-相关实践\"><a href=\"#9-z-index-相关实践\" class=\"headerlink\" title=\"9. z-index 相关实践\"></a>9. z-index 相关实践</h2><h3 id=\"最小化影响原则\"><a href=\"#最小化影响原则\" class=\"headerlink\" title=\"最小化影响原则\"></a>最小化影响原则</h3><ul>\n<li>避免使用定位属性；</li>\n<li>定位属性从大容器平级分离为私有小容器</li>\n</ul>\n<h3 id=\"不犯二原则\"><a href=\"#不犯二原则\" class=\"headerlink\" title=\"不犯二原则\"></a>不犯二原则</h3><p>对于非浮层元素(浮层元素为弹框，蒙版之类)，避免设置 z-index 值，z-index 值没有任何道理需要超过 2–不犯二准则；</p>\n<h3 id=\"组件层级计数器\"><a href=\"#组件层级计数器\" class=\"headerlink\" title=\"组件层级计数器\"></a>组件层级计数器</h3><p>通过 js 获得 body 下子元素的最大 z-index 值</p>\n<h3 id=\"可访问性隐藏\"><a href=\"#可访问性隐藏\" class=\"headerlink\" title=\"可访问性隐藏\"></a>可访问性隐藏</h3><p>z-index 负值元素在层叠上下文的背景之上，其他元素之下</p>\n<div align=\"center\"><img src=\"/images/hexo_post_65.png\" alt=\"\" width=\"500\"></div>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之margin","slug":"CSS深入理解之margin","date":"2017-04-20T14:58:44.000Z","updated":"2019-01-27T10:07:12.316Z","comments":true,"path":"api/articles/CSS深入理解之margin.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_80.png","content":"<h2 id=\"1-margin-与容器的尺寸\"><a href=\"#1-margin-与容器的尺寸\" class=\"headerlink\" title=\"1. margin 与容器的尺寸\"></a>1. margin 与容器的尺寸</h2><ul>\n<li>适用于没有设定 width / height 的普通 block 水平元素(float 元素，absolute / fixed 元素，inline 水平，table-cell 元素虽然 block 化，但是不是普通的 block 水平元素)</li>\n<li>只适用于水平方向尺寸</li>\n<li>一侧定宽的自适应布局</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_80.png\" alt=\"\" width=\"400\"></div>\n\n<ul>\n<li>滚动容器内上下留白</li>\n</ul>\n<p>外部容器设置 padding 值，只有 chrome 才会有留白，此时可以在给内部容器设置 margin 值</p>\n<div align=\"center\"><img src=\"/images/hexo_post_59.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"2-margin-与百分比单位\"><a href=\"#2-margin-与百分比单位\" class=\"headerlink\" title=\"2. margin 与百分比单位\"></a>2. margin 与百分比单位</h2><h3 id=\"计算规则\"><a href=\"#计算规则\" class=\"headerlink\" title=\"计算规则\"></a>计算规则</h3><p>普通元素的百分比 margin 都是相对于容器的宽度计算的，绝对定位元素的百分比 margin 是相对于第一个定位祖先元素(relative / absolute / fixed)的宽度计算的</p>\n<h3 id=\"应用-宽度-2-1-自适应矩形\"><a href=\"#应用-宽度-2-1-自适应矩形\" class=\"headerlink\" title=\"应用-宽度 2:1 自适应矩形\"></a>应用-宽度 2:1 自适应矩形</h3><p>由于 margin 百分比的计算规则是相对于容器进行计算的，而 margin 又可以影响普通 block 水平元素的可视尺寸，所以当设置为 margin: 50% 时，由于 margin 重叠特性，所以会让元素的宽高始终保持 2:1 的比例</p>\n<div align=\"center\"><img src=\"/images/hexo_post_84.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"3-margin-重叠\"><a href=\"#3-margin-重叠\" class=\"headerlink\" title=\"3. margin 重叠\"></a>3. margin 重叠</h2><h3 id=\"通常特性\"><a href=\"#通常特性\" class=\"headerlink\" title=\"通常特性\"></a>通常特性</h3><p>发生在 block 水平元素（不包括 float 和 absolute 元素） 不考虑 writing-mode，只发生在垂直方向（margin-top / margin-bottom）</p>\n<h3 id=\"3-种情境\"><a href=\"#3-种情境\" class=\"headerlink\" title=\"3 种情境\"></a>3 种情境</h3><h4 id=\"相邻的兄弟元素\"><a href=\"#相邻的兄弟元素\" class=\"headerlink\" title=\"相邻的兄弟元素\"></a>相邻的兄弟元素</h4><div align=\"center\"><img src=\"/images/hexo_post_78.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"父级和第一个-最后一个子元素\"><a href=\"#父级和第一个-最后一个子元素\" class=\"headerlink\" title=\"父级和第一个 / 最后一个子元素\"></a>父级和第一个 / 最后一个子元素</h4><p>下面这3种书写形式的效果是相同的，都是子元素向下偏移了 80px，而父级的尺寸并没有改变</p>\n<div align=\"center\"><img src=\"/images/hexo_post_56.png\" alt=\"\" width=\"400\"></div>\n\n<p>父子 margin 重叠的其他条件</p>\n<p><strong>margin-top 重叠：</strong></p>\n<ol>\n<li>父元素非块状格式化上下文元素</li>\n<li>父元素没有 border-top 设置</li>\n<li>父元素没有 padding-top 值</li>\n<li>父元素和第一个子元素之间没有 inline 元素分隔</li>\n</ol>\n<p><strong>margin-bottom 重叠：</strong></p>\n<ol>\n<li>父元素非块状格式化上下文元素</li>\n<li>父元素没有 border-bottom 设置</li>\n<li>父元素没有 padding-bottom 值</li>\n<li>父元素没有和最后一个子元素之间没有 inline 元素分隔</li>\n<li>父元素没有 height，min-height，max-height 限制</li>\n</ol>\n<h4 id=\"空的-block-元素\"><a href=\"#空的-block-元素\" class=\"headerlink\" title=\"空的 block 元素\"></a>空的 block 元素</h4><div align=\"center\"><img src=\"/images/hexo_post_66.png\" alt=\"\" width=\"400\"></div>\n\n<p><strong>空的 block 元素 margin 重叠其他条件：</strong></p>\n<ol>\n<li>元素没有 border 设置</li>\n<li>元素没有 padding 值</li>\n<li>里面没有 inline 元素</li>\n<li>没有 height，或者 min-height</li>\n</ol>\n<h3 id=\"margin-重叠计算规则\"><a href=\"#margin-重叠计算规则\" class=\"headerlink\" title=\"margin 重叠计算规则\"></a>margin 重叠计算规则</h3><ul>\n<li>正正取大值：50 和 20 –&gt; 50</li>\n<li>正负值相加：50 和 -20 –&gt; 30</li>\n<li>负负最负值：-50 和 -30 –&gt; -50</li>\n</ul>\n<h3 id=\"margin-重叠的意义\"><a href=\"#margin-重叠的意义\" class=\"headerlink\" title=\"margin 重叠的意义\"></a>margin 重叠的意义</h3><ol>\n<li>连续段落或列表之类，如果没有 margin 重叠，首尾项间距会和其他兄弟标签 1:2 关系，排版不自然</li>\n<li>web 中任何地方嵌套或直接放入任何裸 div，都不会影响原来的布局</li>\n<li>遗落的空任意多个 <code>&lt;p&gt;</code> 元素，不要影响原来的阅读排版</li>\n</ol>\n<h3 id=\"善用-margin-重叠\"><a href=\"#善用-margin-重叠\" class=\"headerlink\" title=\"善用 margin 重叠\"></a>善用 margin 重叠</h3><div align=\"center\"><img src=\"/images/hexo_post_73.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"4-margin-auto\"><a href=\"#4-margin-auto\" class=\"headerlink\" title=\"4. margin auto\"></a>4. margin auto</h2><p>如果一侧定值，一侧 auto，auto 为剩余空间大小；如果两侧都是 auto，则平分剩余空间(居中显示)，但是不能计算负值</p>\n<h3 id=\"writing-mode-与垂直居中\"><a href=\"#writing-mode-与垂直居中\" class=\"headerlink\" title=\"writing-mode 与垂直居中\"></a>writing-mode 与垂直居中</h3><p>更改流为垂直方向，实现垂直方向的 margin: auto 居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">writing-mode</span>: vertical-lr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.son</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"absolut-与-margin-居中\"><a href=\"#absolut-与-margin-居中\" class=\"headerlink\" title=\"absolut 与 margin 居中\"></a>absolut 与 margin 居中</h3><p><code>top:0; right:0; bottom:0; left:0;</code> 会使子元素的宽度和高度拉伸到与父元素相同大小，当没有 width / height 属性时，absolute 元素自动填满了容器；但设置了 width / height 属性后，会限制 absolute 元素自动填满容器，此时 margin: auto 就会自动平分被变更的尺寸空间，从而实现子元素的水平垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.father</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.son</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-margin-负值定位\"><a href=\"#5-margin-负值定位\" class=\"headerlink\" title=\"5. margin 负值定位\"></a>5. margin 负值定位</h2><h3 id=\"margin-负值下的两端对齐\"><a href=\"#margin-负值下的两端对齐\" class=\"headerlink\" title=\"margin 负值下的两端对齐\"></a>margin 负值下的两端对齐</h3><p>margin 可以改变元素尺寸</p>\n<div align=\"center\"><img src=\"/images/hexo_post_118.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"margin-负值下的等高布局\"><a href=\"#margin-负值下的等高布局\" class=\"headerlink\" title=\"margin 负值下的等高布局\"></a>margin 负值下的等高布局</h3><p>margin 改变元素占据空间：给每个框设置大的底部内边距，然后用数值相似的负外边距消除这个高度。这会导致每一列溢出容器元素，如果把外包容器的 overflow 属性设为 hidden，列就在最高点被裁切</p>\n<div align=\"center\"><img src=\"/images/hexo_post_116.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"margin-负值下的两栏自适应布局\"><a href=\"#margin-负值下的两栏自适应布局\" class=\"headerlink\" title=\"margin 负值下的两栏自适应布局\"></a>margin 负值下的两栏自适应布局</h3><p>元素占据空间跟随 margin 移动</p>\n<div align=\"center\"><img src=\"/images/hexo_post_117.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"6-margin-无效情形解析\"><a href=\"#6-margin-无效情形解析\" class=\"headerlink\" title=\"6. margin 无效情形解析\"></a>6. margin 无效情形解析</h2><h3 id=\"inline-元素的垂直-margin-无效\"><a href=\"#inline-元素的垂直-margin-无效\" class=\"headerlink\" title=\"inline 元素的垂直 margin 无效\"></a>inline 元素的垂直 margin 无效</h3><p>前提：</p>\n<ul>\n<li>非替换元素：替换元素为 <code>&lt;img&gt;</code> <code>&lt;button&gt;</code> 元素</li>\n<li>正常书写模式</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_109.png\" alt=\"\" width=\"400\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_67.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"margin-重叠\"><a href=\"#margin-重叠\" class=\"headerlink\" title=\"margin 重叠\"></a>margin 重叠</h3><p>上面讲过了</p>\n<h3 id=\"display-table-cell-与-margin\"><a href=\"#display-table-cell-与-margin\" class=\"headerlink\" title=\"display: table-cell 与 margin\"></a>display: table-cell 与 margin</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin\" target=\"_blank\" rel=\"noopener\">MDN上的解释</a>：</p>\n<blockquote>\n<p>除了 display 为 table 相关类型（不包括 table-caption，table 以及 inline-table）的所有，甚至也可应用于 ::first-letter</p>\n</blockquote>\n<h3 id=\"position-absolute-与-margin\"><a href=\"#position-absolute-与-margin\" class=\"headerlink\" title=\"position: absolute 与 margin\"></a>position: absolute 与 margin</h3><p>绝对定位元素<strong>非定位方位</strong>的 margin 值”无效”，绝对定位的 margin 值一直有效，只是不像普通元素那样，可以和兄弟元素插科打诨!</p>\n<h3 id=\"鞭长莫及导致的-margin-无效\"><a href=\"#鞭长莫及导致的-margin-无效\" class=\"headerlink\" title=\"鞭长莫及导致的 margin 无效\"></a>鞭长莫及导致的 margin 无效</h3><p>浮动元素和绝对定位元素会破坏布局，此时的 margin-left 会从整个父容器的左侧开始算起，所以当 margin-left 值小于图片的宽度的时候，会看不到效果，但其实是有效的</p>\n<h3 id=\"内联特性导致的-margin-无效\"><a href=\"#内联特性导致的-margin-无效\" class=\"headerlink\" title=\"内联特性导致的 margin 无效\"></a>内联特性导致的 margin 无效</h3><p>内联元素默认基线对齐(vertical-align: baseline)，当 margin-top 是一个很大的负值的时候，由于字母 x (内敛元素)的拖累(x 没有添加任何样式，所以不会跑到父容器外面)，内联元素仍然在与 x 基线对齐的位置</p>\n<div align=\"center\"><img src=\"/images/hexo_post_69.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"7-margin-start-和-margin-end\"><a href=\"#7-margin-start-和-margin-end\" class=\"headerlink\" title=\"7. margin-start 和 margin-end\"></a>7. margin-start 和 margin-end</h2><p>正常流下：</p>\n<ul>\n<li>margin-start –&gt; margin-left</li>\n<li>margin-end –&gt; margin-right</li>\n<li>margin-before –&gt; margin-top</li>\n<li>margin-after –&gt; margin-bottom</li>\n</ul>\n<p>如果水平流是从右往左，margin-start 等同于 margin-right<br>在垂直流下（writing-mode: vertical-*），margin-start 等同于 margin-top</p>\n<h2 id=\"8-margin-collapse\"><a href=\"#8-margin-collapse\" class=\"headerlink\" title=\"8. margin-collapse\"></a>8. margin-collapse</h2><p>决定 margin 重叠时该如何表现</p>\n<blockquote>\n<p>-webkit-margin-collapse:<collapse> | <discard> | <separate></separate></discard></collapse></p>\n</blockquote>\n<ul>\n<li>collapse（默认-重叠）</li>\n<li>discard（取消）–&gt; 此时 margin 将变为 0</li>\n<li>separate（分隔）–&gt; 此时 margin 将不再重叠，而是相加</li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"CSS深入理解之padding","slug":"CSS深入理解之padding","date":"2017-04-20T12:30:24.000Z","updated":"2019-01-27T10:07:12.316Z","comments":true,"path":"api/articles/CSS深入理解之padding.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_60.png","content":"<h2 id=\"1-padding-和元素尺寸的关系\"><a href=\"#1-padding-和元素尺寸的关系\" class=\"headerlink\" title=\"1. padding 和元素尺寸的关系\"></a>1. padding 和元素尺寸的关系</h2><h3 id=\"对于-block-水平元素\"><a href=\"#对于-block-水平元素\" class=\"headerlink\" title=\"对于 block 水平元素\"></a>对于 block 水平元素</h3><ul>\n<li>padding 太大时，一定会影响尺寸</li>\n<li>width 非 auto，padding 影响尺寸</li>\n<li>width 为 auto 或 box-sizing 为 border-box，同时 padding 值没有过大，此时不会影响尺寸</li>\n</ul>\n<h3 id=\"对于-inline-水平元素\"><a href=\"#对于-inline-水平元素\" class=\"headerlink\" title=\"对于 inline 水平元素\"></a>对于 inline 水平元素</h3><p>水平 padding 影响尺寸，垂直 padding 不影响尺寸，<strong>但是会影响背景色(占据空间)</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_60.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"inline-元素-padding-特性应用-gt-gt-高度可控的分割线\"><a href=\"#inline-元素-padding-特性应用-gt-gt-高度可控的分割线\" class=\"headerlink\" title=\"inline 元素 padding 特性应用 &gt;&gt; 高度可控的分割线\"></a>inline 元素 padding 特性应用 &gt;&gt; 高度可控的分割线</h3><ol>\n<li>直接使用字符：注册 | 退出登录</li>\n<li>inline-block 控制：注册丨退出登录</li>\n<li>使用 inline 和 padding：注册丨退出登录</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册<span class=\"tag\">&lt;<span class=\"name\">sapn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>退出登录</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">16px</span> <span class=\"number\">6px</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">2px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-padding-负值\"><a href=\"#2-padding-负值\" class=\"headerlink\" title=\"2. padding 负值\"></a>2. padding 负值</h2><p>padding 不支持任何形式的负值</p>\n<h2 id=\"3-padding-百分比值\"><a href=\"#3-padding-百分比值\" class=\"headerlink\" title=\"3. padding 百分比值\"></a>3. padding 百分比值</h2><p>padding 百分比均是相对于宽度计算的，所以可以用来实现一个正方形（<strong>padding: 50%</strong>）</p>\n<h3 id=\"inline-元素的-padding-百分比值\"><a href=\"#inline-元素的-padding-百分比值\" class=\"headerlink\" title=\"inline 元素的 padding 百分比值\"></a>inline 元素的 padding 百分比值</h3><ul>\n<li>同样相对于宽度计算</li>\n<li>默认的高度宽度细节有差异</li>\n<li>padding 会断行</li>\n</ul>\n<p>因为文字的换行导致表现诡异，当 padding 变小以至于文字不会换行时就会正常表现</p>\n<div align=\"center\"><img src=\"/images/hexo_post_61.png\" alt=\"\" width=\"400\"></div>\n\n<p>空 inline 元素 + padding 高度也不等(高度大于宽度)，此时如果设置 font-size: 0 就可以正常表现了</p>\n<p>原因：inline 元素的垂直 padding 会让”幽灵空白节点”显现，也就是规范中的 “strut” 出现</p>\n<h2 id=\"4-标签元素的内置-padding\"><a href=\"#4-标签元素的内置-padding\" class=\"headerlink\" title=\"4. 标签元素的内置 padding\"></a>4. 标签元素的内置 padding</h2><h3 id=\"ol-ul-列表\"><a href=\"#ol-ul-列表\" class=\"headerlink\" title=\"ol / ul 列表\"></a>ol / ul 列表</h3><ul>\n<li>ol / li 元素内置 padding-left，但是单位是 px 不是 em；</li>\n<li>例如 Chrome 浏览器下是 40px；</li>\n<li>如果字号很小，间距就会很开；</li>\n<li>如果字号很大，序号会爬到容器外面；</li>\n</ul>\n<h3 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h3><ul>\n<li>所有浏览器 input / textarea 输入框内置 padding</li>\n<li>所有浏览器 button 按钮内置 padding</li>\n<li>部分浏览器 select 下拉内置 padding，如 FireFox、IE8+ 可以设置 padding</li>\n<li>所有浏览器 radio / checkbox 单复选框无内置 padding</li>\n<li>button 按钮元素的 padding 最难控制</li>\n</ul>\n<h3 id=\"button按钮\"><a href=\"#button按钮\" class=\"headerlink\" title=\"button按钮\"></a>button按钮</h3><h4 id=\"Chrome-浏览器\"><a href=\"#Chrome-浏览器\" class=\"headerlink\" title=\"Chrome 浏览器\"></a>Chrome 浏览器</h4><p>可以完美设置 padding</p>\n<h4 id=\"FireFox-浏览器\"><a href=\"#FireFox-浏览器\" class=\"headerlink\" title=\"FireFox 浏览器\"></a>FireFox 浏览器</h4><p>设置 padding: 0 左右依然有 padding，只能通过：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">::-moz-focus-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE-浏览器\"><a href=\"#IE-浏览器\" class=\"headerlink\" title=\"IE 浏览器\"></a>IE 浏览器</h4><p>IE7 文字越多，左右 padding 逐渐变大，解决方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: visible;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-padding-与高度计算的不兼容\"><a href=\"#4-padding-与高度计算的不兼容\" class=\"headerlink\" title=\"4.padding 与高度计算的不兼容\"></a>4.padding 与高度计算的不兼容</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>IE7: 45px</li>\n<li>IE8+: 40px</li>\n<li>FireFox: 42px</li>\n<li>Chrome: 40px</li>\n</ul>\n<p>button 按钮会有以上的各种 bug，所以建议是<strong>通过 label 按钮模拟按钮</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"btn\"</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-padding-与图形绘制\"><a href=\"#5-padding-与图形绘制\" class=\"headerlink\" title=\"5. padding 与图形绘制\"></a>5. padding 与图形绘制</h2><h3 id=\"三道杠\"><a href=\"#三道杠\" class=\"headerlink\" title=\"三道杠\"></a>三道杠</h3><p>第一道杠用 border-top，第二道杠用 background-color，第三道杠用 border-bottom，中间空白用padding：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_72.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"白眼效果\"><a href=\"#白眼效果\" class=\"headerlink\" title=\"白眼效果\"></a>白眼效果</h3><p>中间大的圆用 background-color，最外面的环用 border，中间空白用 padding</p>\n<div align=\"center\"><img src=\"/images/hexo_post_52.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"6-padding-与布局\"><a href=\"#6-padding-与布局\" class=\"headerlink\" title=\"6. padding 与布局\"></a>6. padding 与布局</h2><h3 id=\"使用百分比单位构建固定比例布局结构\"><a href=\"#使用百分比单位构建固定比例布局结构\" class=\"headerlink\" title=\"使用百分比单位构建固定比例布局结构\"></a>使用百分比单位构建固定比例布局结构</h3><p>移动端 1:1 头图布局</p>\n<div align=\"center\"><img src=\"/images/hexo_post_75.png\" alt=\"\" width=\"200\"></div>\n\n<h3 id=\"配合-margin-等高布局\"><a href=\"#配合-margin-等高布局\" class=\"headerlink\" title=\"配合 margin 等高布局\"></a>配合 margin 等高布局</h3><div align=\"center\"><img src=\"/images/hexo_post_71.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"两栏自适应布局\"><a href=\"#两栏自适应布局\" class=\"headerlink\" title=\"两栏自适应布局\"></a>两栏自适应布局</h3><h4 id=\"padding-在容器上\"><a href=\"#padding-在容器上\" class=\"headerlink\" title=\"padding 在容器上\"></a>padding 在容器上</h4><div align=\"center\"><img src=\"/images/hexo_post_125.png\" alt=\"\" width=\"500\"></div>\n\n<h4 id=\"padding-在子元素上\"><a href=\"#padding-在子元素上\" class=\"headerlink\" title=\"padding 在子元素上\"></a>padding 在子元素上</h4><div align=\"center\"><img src=\"/images/hexo_post_126.png\" alt=\"\" width=\"500\"></div>","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"一些常用邮箱的IMAP&SMTP&POP3地址","slug":"一些常用邮箱的IMAP&SMTP&POP3地址","date":"2017-04-20T02:05:49.000Z","updated":"2019-01-27T10:07:12.320Z","comments":true,"path":"api/articles/一些常用邮箱的IMAP&SMTP&POP3地址.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>我们在客户端设置邮箱或者使用 PHPMailer 发送邮件的时候，我们都会去查找这些邮箱的 IMAP / SMTP / POP3 地址，这里列出了一些常用邮箱的这些地址，方便自己和大家以后设置邮箱时候使用。</p>\n<h2 id=\"Gmail\"><a href=\"#Gmail\" class=\"headerlink\" title=\"Gmail\"></a>Gmail</h2><p>Gmail 的 IMAP / SMTP / POP3 协议默认都是开启，它的详细地址如下：</p>\n<table>\n<thead>\n<tr>\n<th>服务器名称</th>\n<th>服务器地址</th>\n<th>SSL协议端口</th>\n<th>非SSL协议端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMAP</td>\n<td>imap.gmail.com</td>\n<td>993</td>\n<td>/</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>smtp.gmail.com</td>\n<td>465</td>\n<td>/</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>pop.gmail.com</td>\n<td>995</td>\n<td>/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"QQ邮箱\"><a href=\"#QQ邮箱\" class=\"headerlink\" title=\"QQ邮箱\"></a>QQ邮箱</h2><p>QQ邮箱的 IMAP / SMTP / POP3 协议默认是不开启的，你需要登陆到 QQ邮箱，然后到“设置” &gt; “账户” 将其开启。</p>\n<table>\n<thead>\n<tr>\n<th>服务器名称</th>\n<th>服务器地址</th>\n<th>SSL协议端口</th>\n<th>非SSL协议端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMAP</td>\n<td>imap.qq.com</td>\n<td>993</td>\n<td>143</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>smtp.qq.com</td>\n<td>465或587</td>\n<td>25</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>pop.qq.com</td>\n<td>995</td>\n<td>110</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"163-邮箱\"><a href=\"#163-邮箱\" class=\"headerlink\" title=\"163 邮箱\"></a>163 邮箱</h2><table>\n<thead>\n<tr>\n<th>服务器名称</th>\n<th>服务器地址</th>\n<th>SSL协议端口</th>\n<th>非SSL协议端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMAP</td>\n<td>imap.163.com</td>\n<td>993</td>\n<td>143</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>smtp.163.com</td>\n<td>465或994</td>\n<td>25</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>pop.163.com</td>\n<td>995</td>\n<td>110</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"阿里云邮箱\"><a href=\"#阿里云邮箱\" class=\"headerlink\" title=\"阿里云邮箱\"></a>阿里云邮箱</h2><table>\n<thead>\n<tr>\n<th>服务器名称</th>\n<th>服务器地址</th>\n<th>SSL协议端口</th>\n<th>非SSL协议端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POP3</td>\n<td>pop3.aliyun.com</td>\n<td>110</td>\n<td>995</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>smtp.aliyun.com</td>\n<td>25</td>\n<td>465</td>\n</tr>\n<tr>\n<td>IMAP</td>\n<td>imap.aliyun.com</td>\n<td>143</td>\n<td>993</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"139邮箱\"><a href=\"#139邮箱\" class=\"headerlink\" title=\"139邮箱\"></a>139邮箱</h2><table>\n<thead>\n<tr>\n<th>服务器名称</th>\n<th>服务器地址</th>\n<th>SSL协议端口</th>\n<th>非SSL协议端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMAP</td>\n<td>imap.10086.cn</td>\n<td>143</td>\n<td>/</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>pop.10086.cn</td>\n<td>110</td>\n<td>995</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>smtp.10086.cn</td>\n<td>25</td>\n<td>465</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sina邮箱\"><a href=\"#sina邮箱\" class=\"headerlink\" title=\"sina邮箱\"></a>sina邮箱</h2><table>\n<thead>\n<tr>\n<th>服务器名称</th>\n<th>服务器地址</th>\n<th>SSL协议端口</th>\n<th>非SSL协议端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMAP</td>\n<td>imap.sina.com</td>\n<td>143</td>\n<td>993</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>smtp.sina.com</td>\n<td>25</td>\n<td>/</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>pop.sina.com</td>\n<td>110</td>\n<td>/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://www.cnblogs.com/shangdawei/p/4305989.html\" target=\"_blank\" rel=\"noopener\">常用邮箱的 IMAP/POP3/SMTP 设置</a></li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"SMTP","path":"api/tags/SMTP.json"},{"name":"邮箱地址","path":"api/tags/邮箱地址.json"}]},{"title":"一篇绝对能看懂的Git入门教程","slug":"一篇绝对能看懂的Git入门教程","date":"2017-04-17T13:35:16.000Z","updated":"2019-01-27T10:07:12.320Z","comments":true,"path":"api/articles/一篇绝对能看懂的Git入门教程.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_237.png","content":"<p>不管你是从事什么方面的程序猿，只要你属于这个神秘组织，就必须要对 SVN 或 Git 这种版本控制系统有所了解；和大部分人一样，当初项目负责人告诉我需要学 Git 的时候，只说了这样一句话：“网上很多教程，自己看着学吧”，当然，这句话直到今天我也无力反驳，因为对于一个新鲜的程序猿来说，只需要懂一些 Git 的基本指令就可以了，一些高端指令可能永远都用不到，所以，我就查阅了一些 Git 的教程和手册，整理出这篇对于新手很友好的 Git 入门教程</p>\n<h2 id=\"工作区与暂存区\"><a href=\"#工作区与暂存区\" class=\"headerlink\" title=\"工作区与暂存区\"></a>工作区与暂存区</h2><p>很多 Git 教程都把这一部分的讲解放到很靠后的位置，所以我当初学习的时候并没有把这一部分放在心上；但是现在我觉得，这一部分才是最需要明白的，因为这一部分是非常“真实”的，对于一个之前从来没接触过命令行或一直在 windows 上打游戏、看直播的程序猿来说，这一部分也是最容易理解的</p>\n<p><strong>工作区</strong>：通俗易懂的来说就是你电脑里面的能看到的目录，比如 learngit 的目录。<br><strong>版本库</strong>：工作区有一个隐藏的目录 .git，这是 Git 的版本库。版本库中存了很多东西，其中最重要的就是stage(index)的 <strong>暂存区</strong>。 下面这张图非常清晰的表明了这三者的关系，我就不多说了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_237.png\" alt=\"\" width=\"400\"></div>\n\n<p><strong>请牢牢记住这三\b个概念，因为下面会经常用到</strong></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"生成-ssh\"><a href=\"#生成-ssh\" class=\"headerlink\" title=\"生成 ssh\"></a>生成 ssh</h3><p>通过下面的指令可以生成 id_rsa 和 id_rsa.pub 两个文件，不同操作系统这两个文件所在位置不同，id_rsa.pub 里面的所有内容就是你的公钥，直接复制到 GitHub 的 Add SSH key 页面就可以愉快的进行玩耍了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ras -C <span class=\"string\">\"email@xxx\"</span></span><br></pre></td></tr></table></figure>\n<p>ssh 是一种协议，而 Git 目前支持<a href=\"http://www.cnblogs.com/lzxianren/p/git2.html\" target=\"_blank\" rel=\"noopener\">4种协议</a>——ssh协议，http/s协议，git 协议，本地协议，ssh 协议配置简单，权限管理也比较全面，更重要的是无需密码和 linux 内置（git 是 linus 写的软件，linus 是 linux的作者，所以你懂得），至于 ssh 究竟怎么做的就不在本文介绍了，可以去阮一峰的博客中查找相关资料</p>\n<h3 id=\"设置用户名\"><a href=\"#设置用户名\" class=\"headerlink\" title=\"设置用户名\"></a>设置用户名</h3><p>和现实世界类似，你想和别人进行数据通信，首先得让别人知道你是谁，你的联系方式吧，而和现实世界不同的是，这里的联系方式只能填写邮箱，填写微信或者 QQ 号是木有用的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"cc\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"cc@xx\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化当前目录的项目\"><a href=\"#初始化当前目录的项目\" class=\"headerlink\" title=\"初始化当前目录的项目\"></a>初始化当前目录的项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>还记得上面我们提到的三个概念吗，这里的初始化就是为了在本地目录中添加本地版本库，然后才可以后续的 git 操作。比如初始化之前你的目录是这样的（当前目录为空是因为我是在一个空文件夹的基础上进行初始化的，而实际情况是这里面会有你的项目文件）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_189.png\" alt=\"\" width=\"700\"></div>\n\n<p>而执行初始化操作之后：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_190.png\" alt=\"\" width=\"700\"></div>\n\n<p>从上图可以看到，当前目录中多了 .git 文件夹，这个文件夹就是你的本地的版本库了，里面存储着很多东西，其中包括暂存区；通过短短的一行命令，初始化操作就已经完成了，同时 Git 也为我们创建了第一个分支 master，和一个指向 master 的指针 HEAD，接下来就是一些常用的命令</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"查看工作区状态\"><a href=\"#查看工作区状态\" class=\"headerlink\" title=\"查看工作区状态\"></a>查看工作区状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>这是一条需要经常使用的命令，因为有时候工作区的改变可能会是“隐性”的，比如你的编辑器自己添加的文件或者其他类型的隐藏文件，而经常查看状态也是检验某些 git 命令是否执行的方法。通过执行这一命令，我们在终端中可能会看到：</p>\n<div align=\"center\"><img src=\"/images/QQ20170417-153116@2x.png\" alt=\"\" width=\"700\"></div>\n\n<p>从终端的第四行我们可以看到，当我们查看状态时，Git 告诉我们当前分支为 master；第八行的意思是我们没有什么可以 commit 的，说明我们在当前目录下并没有进行修改，所以我们需要进行修改之后再进行后续操作：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_192.png\" alt=\"\" width=\"700\"></div>\n\n<p>从上图我们可以看到，我在当前目录中新添加了一个文件 octocat.txt，然后我们再通过 <code>git status</code> 查看一下当前工作区的状态：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_193.png\" alt=\"\" width=\"700\"></div>\n\n<p>这次好像和上次不一样了，Git 告诉我们有一个文件 untracked files 叫做 octocat.txt，同时还提醒你通过 <code>git add &lt;file&gt;...</code> 进行提交，那这里就稍微提一下 git status 时可能看到的当前工作区的文件的状态</p>\n<ul>\n<li>staged：已经添加到暂存区，等待提交的文件</li>\n<li>unstaged：已经发生了改变，但是还没有提交</li>\n<li>untracked：Git 都不知道还有这个文件，所以说明这是一个新添加的文件（就像上面的 octocat.txt）</li>\n<li>deleted：已经从本地删除的文件</li>\n</ul>\n<h3 id=\"提交工作区修改到暂存区\"><a href=\"#提交工作区修改到暂存区\" class=\"headerlink\" title=\"提交工作区修改到暂存区\"></a>提交工作区修改到暂存区</h3><ul>\n<li>git add .  // 将工作区所有修改添加到暂存区</li>\n<li>git add filename // 将指定文件添加到暂存区</li>\n</ul>\n<p>还是一开始我们提到的那三个概念，我们在本地进行了修改（新建、修改、删除），但是此时还只是我们自己知道发生了哪些改变，Git 根本都不知道（本地的 Git 都不知道，更别提远程），所以需要进行提交；那么你可能有疑问了，为什么提交到暂存区？直接提交给远程不就完了吗？这里就是 Git 设计的巧妙之处，通过暂存区可以防止你的错误提交（事实证明，这一点很重要）。经过 git add 后，我们再通过 git status 查看一下状态：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_194.png\" alt=\"\" width=\"700\"></div>\n\n<p>Git 告诉我们它看到了一个新的文件 octocat.txt，并且 to be committed，那么你可能会问了，假如我当前的目录里有好多文件都需要 add 怎么办，难道一次次执行命令吗？当然不需要，从上面的代码块中可以看到，我们可以通过 <code>git add .</code> 提交所有修改，但是<strong>不推荐这种操作</strong>，因为有可能会将一些不想提交的隐藏文件也提交到暂存区了；假如我们当前目录下有很多 .txt 文件等待提交：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_195.png\" alt=\"\" width=\"700\"></div>\n\n<p>我们可以使用 “*.txt” 匹配到所有的 txt 文件，然后就可以将它们全部提交了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"string\">'*.txt'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将暂存区修改添加到本地仓库\"><a href=\"#将暂存区修改添加到本地仓库\" class=\"headerlink\" title=\"将暂存区修改添加到本地仓库\"></a>将暂存区修改添加到本地仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">'备注信息'</span></span><br></pre></td></tr></table></figure>\n<p>经过多次的 git add，此时的暂存区有好多本地的修改，通过上面的 commit 可以将所有的暂存区的修改添加到本地仓库，所以你可以简单理解为：需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<h3 id=\"push-到远程\"><a href=\"#push-到远程\" class=\"headerlink\" title=\"push 到远程\"></a>push 到远程</h3><p>经过上面的一顿折腾，仍然只有本地的 “Git” 知道了我们都做了些什么，如果想让远程仓库也知道，我们需要先和远程仓库建立联系：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/try-git/try_git.git</span><br></pre></td></tr></table></figure>\n<p>在这里遇到一个问题：每次 push 都要输入用户名和密码，原因是我们是通过 https 方式进行 push，解决方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin      // 移除</span><br><span class=\"line\">git remote add origin git@github.com:try-git/test.git       // 添加</span><br></pre></td></tr></table></figure>\n<p>此后就不用再输入用户名和密码了，同时我们和远程建立联系以后就不用再 git remote add 了，这就好比你去别人家串门，第一次可能需要你需要查一下地图，第二次的话就直接去找他就行了。接下来就是 push 到远程了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>第一次 push 是需要加 -u 参数的，这个参数是告诉远程我是谁（<a href=\"https://www.zhihu.com/question/20019419\" target=\"_blank\" rel=\"noopener\">git push的-u参数具体含义</a>），还是刚才串门的例子，第一次去别人家串门肯定需要表明身份的，第二次就不再需要了，因为已经知道你是谁了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"从远程-pull\"><a href=\"#从远程-pull\" class=\"headerlink\" title=\"从远程 pull\"></a>从远程 pull</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<p>如果别人提交了他们的修改到远程仓库，我们需要从远程 pull 修改到我们的本地，从而保证大家的进度保持同步，比如别人提交了一个 yellow_octocat.txt 文件到远程，我们 git pull 之后：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_197.png\" alt=\"\" width=\"700\"></div>\n\n<p>Git 告诉我们，你 pull 成功了，新增加了一个文件叫做 yellow_octocat.txt，此时我们的当前目录就多了一个 yellow_octocat.txt（.git 也就是本地版本库也知道了这个文件）</p>\n<div align=\"center\"><img src=\"/images/hexo_post_198.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"查看修改的内容\"><a href=\"#查看修改的内容\" class=\"headerlink\" title=\"查看修改的内容\"></a>查看修改的内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<p>有可能别人和我对同一文件进行了修改，所以在 pull 之后需要查看一下都发生了哪些修改:</p>\n<div align=\"center\"><img src=\"/images/hexo_post_199.png\" alt=\"\" width=\"700\"></div>\n\n<p>其实，git diff 的用法不仅只有这一种，还可以查看暂存区的修改都有哪些：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --staged</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><h4 id=\"丢弃工作区的修改\"><a href=\"#丢弃工作区的修改\" class=\"headerlink\" title=\"丢弃工作区的修改\"></a>丢弃工作区的修改</h4><p>假如我们对之前的一个文件 readme.txt 进行了修改，但是现在我发现对这个文件进行的修改都是错的（经常会发生），此时我不想要我对这个文件的修改了，就可以执行下面的命令，然后 readme.txt 就可以回退到我修改之前的样子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout readme.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"丢弃暂存区的修改\"><a href=\"#丢弃暂存区的修改\" class=\"headerlink\" title=\"丢弃暂存区的修改\"></a>丢弃暂存区的修改</h4><p>和刚才不一样的是，我已经将我的修改提交到暂存区了（也就是说已经执行了 git add readme.txt 命令），此时我想把这个文件的修改从暂存区放回到工作区，就需要执行下面的命令，然后此时的暂存区就不再有 readme.txt 的修改，就像没 git add 过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD readme.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支相关\"><a href=\"#分支相关\" class=\"headerlink\" title=\"分支相关\"></a>分支相关</h2><p>除了 Git，其他版本控制系统如 SVN 中也有分支管理，但是 Git 的分支是与众不同的，无论创建、切换和删除分支，Git 在 1 秒钟之内就能完成！无论你的版本库是 1 个文件还是 1 万个文件。每次提交，Git 都把它们串成一条时间线，这条时间线就是一个分支。但是截止到目前，只有一条时间线，在 Git 里，这个分支叫主分支，即<code>master</code> 分支。<code>HEAD</code> 严格来说不是指向提交，而是指向 <code>master</code>，<code>master</code> 才是指向提交的，所以，<strong><code>HEAD</code> 指向的就是当前分支</strong>。每次提交，<code>master</code> 分支都会向前移动一步，这样，随着你不断提交，<code>master</code> 分支的线也越来越长。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_1.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch clean_up</span><br></pre></td></tr></table></figure>\n<p>此时我们在本地创建了一个分支叫做 clean_up，对于 Git 来说，相当于新建了一个指针叫 clean_up，指向和 master 相同的提交，但是此时的 HEAD 仍然指向 master，因为此时我们只是新建了一个分支，并没有切换到 clean_up 分支</p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout clean_up</span><br></pre></td></tr></table></figure>\n<p>我们新创建了 clean_up 分支后，可以通过上面的命令将本地的分支切换到 clean_up，此时的 HEAD 就会指向 clean_up</p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>为了后面的分支命令展示，我们通过下面的命令将 .txt 文件（注意此时所在的分支仍然是 clean_up）删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm <span class=\"string\">'*.txt'</span></span><br></pre></td></tr></table></figure>\n<p>然后，我们将删除这些文件的修改进行提交（add + commit），此时本地的 clean_up 分支就没有这些 .txt 文件了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_200.png\" alt=\"\" width=\"700\"></div>\n\n<p>此时我们再切换到 master 分支（git checkout master）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_201.png\" alt=\"\" width=\"700\"></div>\n\n<p>通过上面两张图片，我们可以清晰的看到分支的作用，其实相当于两个平行世界（branch），而你所扮演的就是上帝的角色，想让哪个世界继续进行，就 checkout 哪个分支就可以了。此时如果我们想让\b clean_up 分支上做出的改变合并到 master 分支该怎么办呢？</p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge clean_up</span><br></pre></td></tr></table></figure>\n<p>上面这段命令执行的前提是你当前的分支是 master，而通过 git merge 某分支可以将某分支的改变合并到当前分支：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_202.png\" alt=\"\" width=\"700\"></div>\n\n<p>我们通过上面的结果可以看到此时的 master 分支已经没有了 .txt 文件</p>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d clean_up</span><br></pre></td></tr></table></figure>\n<p>既然我们已经把 clean_up 分支的改变合并到了 master 分支，所以此时我们就不再需要 clean_up 分支了，通过上面的命令可以将该分支删除</p>\n<h2 id=\"版本相关\"><a href=\"#版本相关\" class=\"headerlink\" title=\"版本相关\"></a>版本相关</h2><p>较为复杂的分支命令的介绍就告一段落了，下面介绍一下和版本相关的一些常用命令</p>\n<h3 id=\"查看提交的历史记录\"><a href=\"#查看提交的历史记录\" class=\"headerlink\" title=\"查看提交的历史记录\"></a>查看提交的历史记录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>我们可以通过 git log 查看提交的历史记录（每一次 commit 都是一次记录）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_196.png\" alt=\"\" width=\"700\"></div>\n\n<p>从上面的图片可以看到，我们有两次 commit 记录，他们的 id 是很长的黄色字符串，这个 id 和每次提交是一一对应的，同时也对应着相应的版本，而除了 commit id，我们还可以看到提交的作者、日期以及备注信息（这里就体现出了备注信息是多么的重要）</p>\n<h3 id=\"回退版本\"><a href=\"#回退版本\" class=\"headerlink\" title=\"回退版本\"></a>回退版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>通过上面的命令，我们可以回退到上个版本，<code>HEAD</code> 为当前版本，<code>HEAD^</code> 为上一个版本，<code>HEAD^^</code> 为上上个版本，如果有 100 个版本 <code>HEAD~100</code>。当然，我们也可以通过上面提到的 commit id 来回到过去的某个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n<p>是不是更感觉自己像是一个上帝了，在 Git 中，你可以随意控制平行世界的发展，需要做的只是输出一行命令而已</p>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><p>上面就是一些我们最常用的 Git 命令，但是 Git 的强大之处远不止这些，下面就简单介绍几种我们可能会用到的命令：</p>\n<h3 id=\"建立本地分支与远程分支的追踪关系\"><a href=\"#建立本地分支与远程分支的追踪关系\" class=\"headerlink\" title=\"建立本地分支与远程分支的追踪关系\"></a>建立本地分支与远程分支的追踪关系</h3><p>当在本地新建分支的时候，可能远程并没有这个分支，所以你需要建立追踪关系，这样你 push 的时候才不会 push 到别的分支上去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to=&lt;remote&gt;/branchName  // 建立本地分支与远程分支的追踪关系</span><br><span class=\"line\">git branch --track branchName [remote branch]   // 新建一个分支，并与远程建立追踪关系</span><br></pre></td></tr></table></figure>\n<h3 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h3><p>这是 Git 的又一神奇命令，它可以让你将任何一次 commit 的修改合并到当前分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick commitId  // 将与 commitId 对应的提交合进当前分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"bug-分支\"><a href=\"#bug-分支\" class=\"headerlink\" title=\"bug 分支\"></a>bug 分支</h3><p>当我们修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除分支；但是如果我们的手头工作没有完成呢，就需要暂时放弃当前没有提交的修改，然后去修复bug，修复完之后再回来恢复原样继续做刚才的工作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash     // 暂时放弃未提交的修改</span><br><span class=\"line\">git stash pop    // 恢复</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践步骤\"><a href=\"#实践步骤\" class=\"headerlink\" title=\"实践步骤\"></a>实践步骤</h2><table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>git操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>克隆代码</td>\n<td>git clone远端代码</td>\n</tr>\n<tr>\n<td>创建分支</td>\n<td>git checkout -b branch_name</td>\n</tr>\n<tr>\n<td>在分支中开发</td>\n<td>无</td>\n</tr>\n<tr>\n<td>review代码</td>\n<td>无</td>\n</tr>\n<tr>\n<td>第一轮测试</td>\n<td>无</td>\n</tr>\n<tr>\n<td>添加代码至分支</td>\n<td>git add somefile</td>\n</tr>\n<tr>\n<td>提交代码至分支</td>\n<td>“git commit -m “”本次提交注释”””</td>\n</tr>\n<tr>\n<td>切换至主分支</td>\n<td>git checkout master</td>\n</tr>\n<tr>\n<td>获取远端最新代码</td>\n<td>git pull origin master</td>\n</tr>\n<tr>\n<td>合并分支至master分支</td>\n<td>git merge branch_name</td>\n</tr>\n<tr>\n<td>解决合并时产生的冲突</td>\n<td></td>\n</tr>\n<tr>\n<td>第二轮测试</td>\n<td>无</td>\n</tr>\n<tr>\n<td>获取远端最新代码</td>\n<td>git pull origin master</td>\n</tr>\n<tr>\n<td>推送至master分支</td>\n<td>git push origin master</td>\n</tr>\n<tr>\n<td>若无问题，删除本地分支</td>\n<td>git branch -d branch_name</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰-Git教程</a></li>\n<li><a href=\"https://try.github.io/levels/1/challenges/1\" target=\"_blank\" rel=\"noopener\">在线练习git命令</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li>\n<li><a href=\"http://www.jianshu.com/p/50892fac6cbc\" target=\"_blank\" rel=\"noopener\">实用Git Workflow</a></li>\n<li><a href=\"http://gitbook.liuhui998.com/index.html\" target=\"_blank\" rel=\"noopener\">Git Community Book 中文版</a></li>\n</ul>\n<h2 id=\"另外一些关于-Git-Github-入门的文章\"><a href=\"#另外一些关于-Git-Github-入门的文章\" class=\"headerlink\" title=\"另外一些关于 Git / Github 入门的文章\"></a>另外一些关于 Git / Github 入门的文章</h2><ul>\n<li><a href=\"http://blog.jobbole.com/111187/\" target=\"_blank\" rel=\"noopener\">大白话解释 Git 和 GitHub</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/\" target=\"_blank\" rel=\"noopener\">git - the simple guide</a></li>\n<li><a href=\"https://www.pluralsight.com/blog/software-development/github-tutorial\" target=\"_blank\" rel=\"noopener\">GitHub: the beginner’s guide</a></li>\n</ul>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"前端面试系列（12）——前端性能优化","slug":"前端面试系列（12）——前端性能优化","date":"2017-04-16T14:20:57.000Z","updated":"2019-01-27T10:07:12.324Z","comments":true,"path":"api/articles/前端面试系列（12）——前端性能优化.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>近几年的前端发展异常火爆，各种框架各种技术层出不穷，而所有的前端框架面临着同一个问题：怎样才能缩短首屏时间，让用户以最快的速度看到页面最想展现的内容；所以，前端性能优化这一问题成为所有前端开发人员需要考虑的需求。下面我将从 html、css、js 等方面介绍前端性能优化的一些方式，考虑到篇幅原因，只会以列表的形式进行简单概括，具体做法可以自行查阅，在这里强烈推荐<a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">雅虎军规</a>，Yahoo Rules 是对于前端性能优化的全面总结，有时间一定要看一看</p>\n<h2 id=\"HTML-的优化\"><a href=\"#HTML-的优化\" class=\"headerlink\" title=\"HTML 的优化\"></a>HTML 的优化</h2><h3 id=\"使用相对-URL\"><a href=\"#使用相对-URL\" class=\"headerlink\" title=\"使用相对 URL\"></a>使用相对 URL</h3><p>某些 href、src 属性如果与当前页面处于同一域名下，则使用相对 URL 能够节省至少一个域名的长度。</p>\n<h3 id=\"删除-HTTP-或者-HTTPS\"><a href=\"#删除-HTTP-或者-HTTPS\" class=\"headerlink\" title=\"删除 HTTP 或者 HTTPS\"></a>删除 HTTP 或者 HTTPS</h3><p>绝对 URL 都以 HTTP 或 HTTPS 等协议头开始，如果能确定 URL 的协议与当前页面 URL 的协议是一致的，或者说该 URL 在多种协议下均是可用的，则可以考虑删除这个协议头。</p>\n<h3 id=\"删除注释\"><a href=\"#删除注释\" class=\"headerlink\" title=\"删除注释\"></a>删除注释</h3><p>考虑不必要的 IE 条件注释和 CDATA 注释及自定义注释。</p>\n<h3 id=\"压缩空白符\"><a href=\"#压缩空白符\" class=\"headerlink\" title=\"压缩空白符\"></a>压缩空白符</h3><p>对于多数标签，可以通过删除多余的空白符来减少 HTML 体积，但是对于 pre 等是例外。</p>\n<h3 id=\"压缩-inline-css-amp-Javascript\"><a href=\"#压缩-inline-css-amp-Javascript\" class=\"headerlink\" title=\"压缩 inline css &amp; Javascript\"></a>压缩 inline css &amp; Javascript</h3><p>不管 inline 还是 external，都需要压缩，这是减小体积的最直接的方式。</p>\n<h3 id=\"CSS-amp-Javascript-尽量外链\"><a href=\"#CSS-amp-Javascript-尽量外链\" class=\"headerlink\" title=\"CSS &amp; Javascript 尽量外链\"></a>CSS &amp; Javascript 尽量外链</h3><p>不仅可以减少体积，还能够充分利用浏览器的缓存机制。</p>\n<h3 id=\"删除元素默认属性\"><a href=\"#删除元素默认属性\" class=\"headerlink\" title=\"删除元素默认属性\"></a>删除元素默认属性</h3><p>在 HTML 规范中，很多 HTML 元素的属性是有默认值的，对于这些默认值可以抹去不写。</p>\n<h3 id=\"避免使用-Iframe\"><a href=\"#避免使用-Iframe\" class=\"headerlink\" title=\"避免使用 Iframe\"></a>避免使用 Iframe</h3><p>创建 iframe 元素的开销要比创建其他类型的 DOM 元素高 1~2 个数量级</p>\n<h3 id=\"避免空链接属性\"><a href=\"#避免空链接属性\" class=\"headerlink\" title=\"避免空链接属性\"></a>避免空链接属性</h3><p>可以看做是上面“删除元素默认属性”的特例，即使图片的地址为空，浏览器依旧会以默认的规则去请求空地址</p>\n<h3 id=\"避免节点深层级嵌套\"><a href=\"#避免节点深层级嵌套\" class=\"headerlink\" title=\"避免节点深层级嵌套\"></a>避免节点深层级嵌套</h3><p>由于浏览器构建 DOM 文档的机制，深层级嵌套的节点在初始化构建时往往需要更多的内存占用，并且在遍历节点时也会更慢些</p>\n<h3 id=\"避免-Table-布局\"><a href=\"#避免-Table-布局\" class=\"headerlink\" title=\"避免 Table 布局\"></a>避免 Table 布局</h3><p>构建 table 的开销也很大</p>\n<h3 id=\"显示指定文档字符集\"><a href=\"#显示指定文档字符集\" class=\"headerlink\" title=\"显示指定文档字符集\"></a>显示指定文档字符集</h3><p>如果浏览器不能获知页面的编码字符集，一般都会在执行脚本和渲染页面前，把字节流缓存，然后再搜索可进行解析的字符集，或以默认的字符集来解析页面代码，这会导致消耗不必要的时间。为了避免浏览器把时间花费在搜寻合适的字符集来进行解码，所以最好在文档中总是显式的指定页面字符集。</p>\n<h2 id=\"CSS-的优化\"><a href=\"#CSS-的优化\" class=\"headerlink\" title=\"CSS 的优化\"></a>CSS 的优化</h2><h3 id=\"把-CSS-放到代码页上端\"><a href=\"#把-CSS-放到代码页上端\" class=\"headerlink\" title=\"把 CSS 放到代码页上端\"></a>把 CSS 放到代码页上端</h3><p>加快渲染</p>\n<h3 id=\"避免-CSS-表达式\"><a href=\"#避免-CSS-表达式\" class=\"headerlink\" title=\"避免 CSS 表达式\"></a>避免 CSS 表达式</h3><p>表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给 CSS 表达式增加一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到 10000 次以上的计算量。</p>\n<h3 id=\"使用-lt-link-gt-而不是-import\"><a href=\"#使用-lt-link-gt-而不是-import\" class=\"headerlink\" title=\"使用 &lt;link&gt; 而不是 @import\"></a>使用 <code>&lt;link&gt;</code> 而不是 <code>@import</code></h3><p>在外部的 CSS 文件中使用 @import 会使得页面在加载时增加额外的延迟。虽然规则允许在样式中调用 @import 来导入其它的 CSS，但浏览器不能并行下载样式，就会导致页面增添了额外的往返耗时。比如，第一个 CSS 文件 first.css 包含了以下内容：@import url(“second.css”)。那么浏览器就必须先把 first.css 下载、解析和执行后，才发现及处理第二个文件 second.css。</p>\n<h3 id=\"避免通配选择器\"><a href=\"#避免通配选择器\" class=\"headerlink\" title=\"避免通配选择器\"></a>避免通配选择器</h3><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免需要消耗更多匹配时间的选择器。比如这种反例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selected</span> * &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>由于 <strong>CSS 选择器从右到左匹配的机制</strong>，浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点，因此其匹配开销是非常大的，通常比开销最小的 ID 选择器高出 1~3 个数量级，所以应避免使用关键选择器是通配选择器的规则。</p>\n<h3 id=\"避免单规则的属性选择器\"><a href=\"#避免单规则的属性选择器\" class=\"headerlink\" title=\"避免单规则的属性选择器\"></a>避免单规则的属性选择器</h3><p>属性选择器根据元素的属性是否存在或其属性值进行匹配，如下例规则会把 herf 属性值等于 ”#index” 的链接元素设置为红色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selected</span> <span class=\"selector-attr\">[href=”#index”]</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>但其匹配开销是非常大的，浏览器先匹配所有的元素，检查其是否有 href 属性并且 herf 属性值等于 ”#index”， 然后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点。所以应避免使用关键选择器是单规则属性选择器的规则。</p>\n<h3 id=\"避免类正则的属性选择器\"><a href=\"#避免类正则的属性选择器\" class=\"headerlink\" title=\"避免类正则的属性选择器\"></a>避免类正则的属性选择器</h3><p>CSS3 添加了复杂的属性选择器，可以通过类正则表达式的方式对元素的属性值进行匹配。当然这些类型的选择器定是会影响性能的，正则表达式匹配会比基于类别的匹配会慢很多。大部分情况下我们应尽量避免使用 *=， |=， ^=， $=，和 ~= 语法的属性选择器。</p>\n<h2 id=\"JavaScript-的优化\"><a href=\"#JavaScript-的优化\" class=\"headerlink\" title=\"JavaScript 的优化\"></a>JavaScript 的优化</h2><h3 id=\"脚本放到-HTML-代码页底部\"><a href=\"#脚本放到-HTML-代码页底部\" class=\"headerlink\" title=\"脚本放到 HTML 代码页底部\"></a>脚本放到 HTML 代码页底部</h3><p>加快渲染，当然如果你的 js 会影响 dom 建立，那放在哪都是一样的了</p>\n<h3 id=\"移除重复脚本\"><a href=\"#移除重复脚本\" class=\"headerlink\" title=\"移除重复脚本\"></a>移除重复脚本</h3><p>封装方法是一个前端开发人员最基本的技能</p>\n<h3 id=\"减少-DOM-访问\"><a href=\"#减少-DOM-访问\" class=\"headerlink\" title=\"减少 DOM 访问\"></a>减少 DOM 访问</h3><p>使用 JavaScript 访问 DOM 元素是比较慢的，因此为了提升性能，应该做到：</p>\n<ul>\n<li>缓存已经查询过的元素；</li>\n<li>线下更新完节点之后再将它们添加到文档树中；</li>\n<li>避免使用 JavaScript 来修改页面布局；</li>\n</ul>\n<h3 id=\"使用事件代理\"><a href=\"#使用事件代理\" class=\"headerlink\" title=\"使用事件代理\"></a>使用事件代理</h3><p>有时候我们会感觉到页面反应迟钝，这是因为 DOM 树元素中附加了过多的事件句柄并且些事件句病被频繁地触发。这就是为什么说使用事件代理是一种好方法了。如果你在一个 div 中有 10 个按钮，你只需要在 div 上附加一次事件句柄就可以了，而不用去为每一个按钮增加一个句柄。事件冒泡时你可以捕捉到事件并判断出是哪个事件发出的。</p>\n<h3 id=\"缓存选择器查询结果\"><a href=\"#缓存选择器查询结果\" class=\"headerlink\" title=\"缓存选择器查询结果\"></a>缓存选择器查询结果</h3><p>选择器查询是开销很大的方法。所以，使用选择器的次数应该越少越好，并且尽可能缓存选中的结果，便于以后反复使用。 不要使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"string\">'#top'</span>).find(<span class=\"string\">'p.classA'</span>);</span><br><span class=\"line\">jQuery(<span class=\"string\">'#top'</span>).find(<span class=\"string\">'p.classB'</span>);</span><br></pre></td></tr></table></figure>\n<p>而是使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cached = jQuery(<span class=\"string\">'#top'</span>);</span><br><span class=\"line\">cached.find(<span class=\"string\">'p.classA'</span>);</span><br><span class=\"line\">cached.find(<span class=\"string\">'p.classB'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用微类库\"><a href=\"#使用微类库\" class=\"headerlink\" title=\"使用微类库\"></a>使用微类库</h3><p>通常开发者都会使用 JavaScript 类库，如 jQuery、Mootools、YUI、Dojo 等，但是开发者往往只是使用 JavaScript 类库中的部分功能。为了更大的提升性能，应尽量避免使用这类大而全的类库，而是按需使用微类库来辅助开发。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>[Absolute HTML Compressor](<a href=\"http://www.alentum.com/ahc/\" target=\"_blank\" rel=\"noopener\">http://www.alentum.com/ahc/</a> “Absolute HTML Compressor”）：HTML 的优化工具，压缩效果比较理想</li>\n<li><a href=\"https://book.douban.com/subject/3686503/\" target=\"_blank\" rel=\"noopener\">Even Faster Web Sites</a>：关于前端优化的书，本人没看过，但是豆瓣评分 8.6 的它应该还不错吧</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/news/2010/05/baidu-html-optimize\" target=\"_blank\" rel=\"noopener\">不应忽视的HTML优化</a> </li>\n<li><a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">Yahoo Rules</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007677580\" target=\"_blank\" rel=\"noopener\">前端性能优化黄金法则</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002418920\" target=\"_blank\" rel=\"noopener\">网站性能优化工具大全</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008829958\" target=\"_blank\" rel=\"noopener\">WEB前端性能优化常见方法</a></li>\n</ul>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"性能优化","path":"api/tags/性能优化.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"JS中的一些小技巧，精妙且实用","slug":"JS中的一些小技巧，精妙且实用","date":"2017-04-13T01:33:29.000Z","updated":"2019-01-27T10:07:12.316Z","comments":true,"path":"api/articles/JS中的一些小技巧，精妙且实用.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这里总结了我在项目中经常会用到的一些 JS 小技巧，同时参考了其他开发者对于 JS 小技巧的总结，从而形成了这篇文章，如果在日后我发现了更多的小技巧，我会及时更新</p>\n<h2 id=\"使用-操作符转换布尔值\"><a href=\"#使用-操作符转换布尔值\" class=\"headerlink\" title=\"使用 !! 操作符转换布尔值\"></a>使用 !! 操作符转换布尔值</h2><p>有时候我们需要对一个变量检查其是否存在或者检查值是否有一个有效值，如果存在就返回 true 值。为了做这样的验证，我们可以使用 !! 操作符来实现是非常的方便与简单。对于变量可以使用 !!variable 进行检测</p>\n<p><strong>只要变量的值为：0、null、” “、undefined 或者 NaN 都将返回的是 false，反之返回的是 true</strong>。</p>\n<h2 id=\"使用-“-”-或-“-“-转化数值\"><a href=\"#使用-“-”-或-“-“-转化数值\" class=\"headerlink\" title=\"使用 “+” 或 “-“ 转化数值\"></a>使用 “+” 或 “-“ 转化数值</h2><p>这个技巧非常有用，其非常简单，可以将字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回 NaN</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toNumber</span>(<span class=\"params\">strNumber</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> +strNumber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toNumber(<span class=\"string\">\"1234\"</span>)); <span class=\"comment\">// 1234</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toNumber(<span class=\"string\">\"ACB\"</span>)); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检测对象中属性\"><a href=\"#检测对象中属性\" class=\"headerlink\" title=\"检测对象中属性\"></a>检测对象中属性</h2><p>当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用 document.querySelector() 来选择一个 id，并且让它能兼容 IE6 浏览器，但是在 IE6 浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">'querySelector'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#id\"</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个示例中，如果 document 不存在 querySelector 函数，那么就会调用 docuemnt.getElementById(“id”)。</p>\n<h2 id=\"数组截断\"><a href=\"#数组截断\" class=\"headerlink\" title=\"数组截断\"></a>数组截断</h2><p>这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有 10 个元素，但你只想只要前五个元素，那么你可以通过 array.length = 5 来截断数组。如下面这个示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.length); <span class=\"comment\">// 6</span></span><br><span class=\"line\">array.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.length); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [1,2,3]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h2><p>如果你要合并两个数组，一般情况之下你都会使用 Array.concat() 函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.concat(array2)); <span class=\"comment\">// [1,2,3,4,5,6];</span></span><br></pre></td></tr></table></figure>\n<p>然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之下，可以使用 Array.pus().apply(arr1,arr2) 来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.push.apply(array1, array2)); <span class=\"comment\">// [1,2,3,4,5,6];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将-NodeList-转换成数组\"><a href=\"#将-NodeList-转换成数组\" class=\"headerlink\" title=\"将 NodeList 转换成数组\"></a>将 NodeList 转换成数组</h2><p>如果你运行 document.querySelectorAll(“p”) 函数时，它可能返回 DOM 元素的数组，也就是 NodeList 对象。但这个对象不具有数组的函数功能，比如 sort()、reduce()、map()、filter() 等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用 <strong>[].slice.call(elements)</strong> 来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"p\"</span>); <span class=\"comment\">// NodeListvar </span></span><br><span class=\"line\">arrayElements = [].slice.call(elements); <span class=\"comment\">// Now the NodeList is an array</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayElements = <span class=\"built_in\">Array</span>.from(elements); <span class=\"comment\">// This is another way of converting NodeList to Array</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组元素随机排序\"><a href=\"#数组元素随机排序\" class=\"headerlink\" title=\"数组元素随机排序\"></a>数组元素随机排序</h2><p>利用随机数模拟随机排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(list.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>&#125;)); <span class=\"comment\">// [2,1,3]</span></span><br></pre></td></tr></table></figure>\n<p>其实利用 Math.random() 得到的结果并不是真正的随机排序，参见我的另外一篇文章：<a href=\"/20170322/summary-of-array-method-in-js.html\">JS中数组方法总结</a>，这篇文章中的数组随机排序方法是比较好的一个方法</p>\n<h2 id=\"从数组中获取一个随机项\"><a href=\"#从数组中获取一个随机项\" class=\"headerlink\" title=\"从数组中获取一个随机项\"></a>从数组中获取一个随机项</h2><p>很难说这是一个技巧，如果你的前端水平还算可以的话，这个应该难不倒你：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"number\">12</span>, <span class=\"number\">548</span> , <span class=\"string\">'a'</span> , <span class=\"number\">2</span> , <span class=\"number\">5478</span> , <span class=\"string\">'foo'</span> , <span class=\"number\">8852</span>, , <span class=\"string\">'Doe'</span> , <span class=\"number\">2145</span> , <span class=\"number\">119</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomItem = items[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * items.length)];</span><br></pre></td></tr></table></figure>\n<h2 id=\"在特定范围内获取一个随机数\"><a href=\"#在特定范围内获取一个随机数\" class=\"headerlink\" title=\"在特定范围内获取一个随机数\"></a>在特定范围内获取一个随机数</h2><p>这个在生成测试数据的时候非常有用，比如一个在最小最大值之间的一个随机薪水值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成一个随机的数字字母字符串\"><a href=\"#生成一个随机的数字字母字符串\" class=\"headerlink\" title=\"生成一个随机的数字字母字符串\"></a>生成一个随机的数字字母字符串</h2><p>有时候，我们需要给某个元素赋一个唯一的 id，这个时候随机字符串就可以派上用场了，在这个技巧里，你可以见识到 js 中的 toString() 方法是多么的强大；Math.random() 生成 0 到 1 之间的随机数，number.toString(36) 是将这个数字转换成36进制（0-9，a-z），最后 substr 去掉前面的 “0.” 字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateRandomAlphaNum</span>(<span class=\"params\">len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rdmstring = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ;rdmString.length &lt; len; ) &#123;</span><br><span class=\"line\">        rdmString += <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">36</span>).substr(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdmString.substr(<span class=\"number\">0</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更快的四舍五入\"><a href=\"#更快的四舍五入\" class=\"headerlink\" title=\"更快的四舍五入\"></a>更快的四舍五入</h2><p>见到过双波浪线 “~~” 操作符吗？它有时也被称为 <code>double NOT</code> 运算符。你可以更快的使用它来作为 Math.floor() 替代品。为什么呢？单位移 ~ 将 32 位转换输入 -(输入+1)，因此双位移将输入转换为 -(-(输入+1))，这是个趋于 0 的伟大的工具。对于输入的数字，它将模仿 Math.ceil() 取负值和 Math.floor() 取正值。如果执行失败，则返回 0，这可能在用来代替 Math.floor() 失败时返回一个 NaN 的时候发挥作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单位移</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"number\">1337</span>) <span class=\"comment\">// -1338</span></span><br><span class=\"line\"><span class=\"comment\">// 双位移</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">47.11</span>) <span class=\"comment\">// -&gt; 47</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">-12.88</span>) <span class=\"comment\">// -&gt; -12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">1.9999</span>) <span class=\"comment\">// -&gt; 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 3</span></span><br><span class=\"line\"><span class=\"comment\">//失败的情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~[]) <span class=\"comment\">// -&gt; 0 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">NaN</span>) <span class=\"comment\">// -&gt; 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">null</span>) <span class=\"comment\">// -&gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">//大于32位整数则失败</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~(<span class=\"number\">2147483647</span> + <span class=\"number\">1</span>) === (<span class=\"number\">2147483647</span> + <span class=\"number\">1</span>)) <span class=\"comment\">// -&gt; 0</span></span><br></pre></td></tr></table></figure>\n<p>虽然 ~~ 可能有更好的表现，不过为了可读性，还是推荐使用 Math.floor()。</p>\n<h2 id=\"测量一个-JavaScript-代码块的性能\"><a href=\"#测量一个-JavaScript-代码块的性能\" class=\"headerlink\" title=\"测量一个 JavaScript 代码块的性能\"></a>测量一个 JavaScript 代码块的性能</h2><p>快速测量一个 JavaScript 块的性能，我们可以使用控制台的功能像 console.time(label) 和console.timeEnd(label)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">\"Array initialize\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    len = arr.length,</span><br><span class=\"line\">    i;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    arr[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"Array initialize\"</span>); <span class=\"comment\">// 输出: Array initialize: 0.711ms</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自调用函数\"><a href=\"#自调用函数\" class=\"headerlink\" title=\"自调用函数\"></a>自调用函数</h2><p>这个经常被称为自调用匿名函数（Self-Invoked Anonymous Function）或者即时调用函数表达式（IIFE-Immediately Invoked Function Expression)。这是一个在创建后立即自动执行的函数，可以用于数据回填以及窗口 resize() 事件，我在项目中屡试不爽，示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// some private code that will be executed automatically</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;)(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现-String-的-trim-函数\"><a href=\"#实现-String-的-trim-函数\" class=\"headerlink\" title=\"实现 String 的 trim 函数\"></a>实现 String 的 trim 函数</h2><p>在 Java、C#、PHP 和很多其他语言中都有一个经典的 trim 函数，用来去除字符串中首尾的空格符，而在 JavaScript 中并没有，所以我们需要在 String 对象上加上这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>, <span class=\"string\">\"\"</span>);&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"将-arguments-对象转换成一个数组\"><a href=\"#将-arguments-对象转换成一个数组\" class=\"headerlink\" title=\"将 arguments 对象转换成一个数组\"></a>将 arguments 对象转换成一个数组</h2><p>arguments 对象是一个类数组对象，但不是一个真正的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> argArray = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证是否是数字\"><a href=\"#验证是否是数字\" class=\"headerlink\" title=\"验证是否是数字\"></a>验证是否是数字</h2><p>这是一个可以称得上技巧的 js 方法，当然你也可以用正则表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(n)) &amp;&amp; <span class=\"built_in\">isFinite</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证是否是数组\"><a href=\"#验证是否是数组\" class=\"headerlink\" title=\"验证是否是数组\"></a>验证是否是数组</h3><p>call() 这个方法在 js 里如同神技，而这里也是它的一个应用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不要使用-delete-来删除一个数组中的项\"><a href=\"#不要使用-delete-来删除一个数组中的项\" class=\"headerlink\" title=\"不要使用 delete 来删除一个数组中的项\"></a>不要使用 delete 来删除一个数组中的项</h2><p>使用 splice 而不要使用 delete 来删除数组中的某个项。使用 delete 只是用 undefined 来替换掉原有的项，并不是真正的从数组中删除。 不要使用这种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"number\">12</span>, <span class=\"number\">548</span>, <span class=\"string\">'a'</span>, <span class=\"number\">2</span>, <span class=\"number\">5478</span>, <span class=\"string\">'foo'</span>, <span class=\"number\">8852</span>, , <span class=\"string\">'Doe'</span>, <span class=\"number\">2154</span>, <span class=\"number\">119</span>];</span><br><span class=\"line\">items.length; <span class=\"comment\">// return 11</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> items[<span class=\"number\">3</span>]; <span class=\"comment\">// return true</span></span><br><span class=\"line\">items.length; <span class=\"comment\">// return 11</span></span><br><span class=\"line\"><span class=\"comment\">/* items will be equal to [12, 548, \"a\", undefined × 1, 5478, \"foo\", 8852, undefined × 1, \"Doe\", 2154, 119] */</span></span><br></pre></td></tr></table></figure>\n<p>而使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [<span class=\"number\">12</span>, <span class=\"number\">548</span>, <span class=\"string\">'a'</span>, <span class=\"number\">2</span>, <span class=\"number\">5478</span>, <span class=\"string\">'foo'</span>, <span class=\"number\">8852</span>, , <span class=\"string\">'Doe'</span>, <span class=\"number\">2154</span>, <span class=\"number\">119</span>];</span><br><span class=\"line\">items.length; <span class=\"comment\">// return 11</span></span><br><span class=\"line\">items.splice(<span class=\"number\">3</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">items.length; <span class=\"comment\">// return 10</span></span><br><span class=\"line\"><span class=\"comment\">/* items will be equal to [12, 548, \"a\", 5478, \"foo\", 8852, undefined × 1, \"Doe\", 2154, 119] */</span></span><br></pre></td></tr></table></figure>\n<p>delete 方法应该被用来删除一个对象的某个属性。</p>\n<h2 id=\"使用逻辑-AND-OR-做条件判断\"><a href=\"#使用逻辑-AND-OR-做条件判断\" class=\"headerlink\" title=\"使用逻辑 AND / OR 做条件判断\"></a>使用逻辑 AND / OR 做条件判断</h2><p>这个技巧在一定程度上降低了可读性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">10</span>;</span><br><span class=\"line\">foo == <span class=\"number\">10</span> &amp;&amp; doSomething(); <span class=\"comment\">// 等价于 if (foo == 10) doSomething();</span></span><br><span class=\"line\">foo == <span class=\"number\">5</span> || doSomething(); <span class=\"comment\">// 等价于 if (foo != 5) doSomething();</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用逻辑-OR-为函数参数设置默认值\"><a href=\"#使用逻辑-OR-为函数参数设置默认值\" class=\"headerlink\" title=\"使用逻辑 OR 为函数参数设置默认值\"></a>使用逻辑 OR 为函数参数设置默认值</h2><p>这个技巧实用到爆，尤其是开发插件的时候</p>\n<blockquote>\n<p>不过 ES6 语法已经支持默认值了</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">arg1</span>) </span>&#123;</span><br><span class=\"line\">    Arg1 = arg1 || <span class=\"number\">10</span>; <span class=\"comment\">// 如果 arg1 没有被设置的话，Arg1 将被默认设成 10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点数问题\"><a href=\"#浮点数问题\" class=\"headerlink\" title=\"浮点数问题\"></a>浮点数问题</h2><p>这是一个需要注意的地方，但是计算机专业的人应该早就知道了吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span> <span class=\"comment\">// is false</span></span><br><span class=\"line\"><span class=\"number\">9007199254740992</span> + <span class=\"number\">1</span> <span class=\"comment\">// is equal to 9007199254740992</span></span><br><span class=\"line\"><span class=\"number\">9007199254740992</span> + <span class=\"number\">2</span> <span class=\"comment\">// is equal to 9007199254740994</span></span><br></pre></td></tr></table></figure>\n<p>为什么会这样？ 0.1 + 0.2 等于 0.30000000000000004。这是因为，所有的 JavaScript 数字在内部都是以 64 位二进制表示的浮点数，符合 IEEE 754 标准。更多的介绍，可以阅读<a href=\"http://www.2ality.com/2012/04/number-encoding.html\" target=\"_blank\" rel=\"noopener\">这篇博文</a>。你可以使用 toFixed() 和 toPrecision() 方法解决这个问题。</p>\n<h2 id=\"使用-for-in-遍历一个对象内部属性的时候注意检查属性\"><a href=\"#使用-for-in-遍历一个对象内部属性的时候注意检查属性\" class=\"headerlink\" title=\"使用 for-in 遍历一个对象内部属性的时候注意检查属性\"></a>使用 for-in 遍历一个对象内部属性的时候注意检查属性</h2><p>下面的代码片段能够避免在遍历一个对象属性的时候访问原型的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something with name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite()\"></a>isFinite()</h2><p>在使用这个方法之前需要验证一下参数，因为 null 的存在</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"number\">0</span>/<span class=\"number\">0</span>) ; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"string\">\"foo\"</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"string\">\"10\"</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"number\">10</span>);   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(undifined);  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>();   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"literal\">null</span>);  <span class=\"comment\">// true  !!!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在调用-setTimeout-和-setInterval-的时候传入函数，而不是字符串\"><a href=\"#在调用-setTimeout-和-setInterval-的时候传入函数，而不是字符串\" class=\"headerlink\" title=\"在调用 setTimeout() 和 setInterval() 的时候传入函数，而不是字符串\"></a>在调用 setTimeout() 和 setInterval() 的时候传入函数，而不是字符串</h2><p>如果你将字符串传递给 setTimeout() 或者 setInterval()，这个字符串将被如使用 eval 一样被解析，这个是非常耗时的 不要使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(<span class=\"string\">'doSomethingPeriodically()'</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">setTimeOut(<span class=\"string\">'doSomethingAfterFiveSeconds()'</span>, <span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n<p>而用:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(doSomethingPeriodically, <span class=\"number\">1000</span>);</span><br><span class=\"line\">setTimeOut(doSomethingAfterFiveSeconds, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"用-JavaScript-获取伪元素-pseudo-element-属性\"><a href=\"#用-JavaScript-获取伪元素-pseudo-element-属性\" class=\"headerlink\" title=\"用 JavaScript 获取伪元素 (pseudo-element) 属性\"></a>用 JavaScript 获取伪元素 (pseudo-element) 属性</h2><p>大家都知道如何通过一个元素的 style 属性获取它的 CSS 样式值，但能获取伪元素 (pseudo-element) 的属性值吗？可以的，使用 JavaScript 也可以访问页面中的伪元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the color value of .element:before</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"built_in\">window</span>.getComputedStyle(</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.element'</span>), <span class=\"string\">':before'</span></span><br><span class=\"line\">).getPropertyValue(<span class=\"string\">'color'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the content value of .element:before</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"built_in\">window</span>.getComputedStyle(</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.element'</span>), <span class=\"string\">':before'</span></span><br><span class=\"line\">).getPropertyValue(<span class=\"string\">'content'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"classList-API\"><a href=\"#classList-API\" class=\"headerlink\" title=\"classList API\"></a>classList API</h2><p>很多的 JavaScript 工具库里都有 <code>addClass</code>，<code>removeClass</code> 和 <code>toggleClass</code> 等方法。为了对老式浏览器的兼容，这些类库采用的方法都是先搜索元素的 <code>className</code>，追加和删除这个类，然后更新 <code>className</code>。其实有一个 API 提供了添加，删除和反转 CSS 类属性的方法，叫做 classList：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiv.classList.add(<span class=\"string\">'myCssClass'</span>); <span class=\"comment\">// Adds a class</span></span><br><span class=\"line\">myDiv.classList.remove(<span class=\"string\">'myCssClass'</span>); <span class=\"comment\">// Removes a class</span></span><br><span class=\"line\">myDiv.classList.toggle(<span class=\"string\">'myCssClass'</span>); <span class=\"comment\">// Toggles a class</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"直接对样式表进行添加和删除样式规则\"><a href=\"#直接对样式表进行添加和删除样式规则\" class=\"headerlink\" title=\"直接对样式表进行添加和删除样式规则\"></a>直接对样式表进行添加和删除样式规则</h2><p>我们都非常熟悉使用 <code>element.style.propertyName</code> 来修改样式，使用 JavaScript 能帮助我们做到这些，但你知道如何新增或修一个现有的 CSS 样式规则吗？其实非常的简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCSSRule</span>(<span class=\"params\">sheet, selector, rules, index</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sheet.insertRule) &#123;</span><br><span class=\"line\">\t\tsheet.insertRule(selector + <span class=\"string\">\"&#123;\"</span> + rules + <span class=\"string\">\"&#125;\"</span>, index);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tsheet.addRule(selector, rules, index);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use it!</span></span><br><span class=\"line\">addCSSRule(<span class=\"built_in\">document</span>.styleSheets[<span class=\"number\">0</span>], <span class=\"string\">\"header\"</span>, <span class=\"string\">\"float: left\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载-CSS-文件\"><a href=\"#加载-CSS-文件\" class=\"headerlink\" title=\"加载 CSS 文件\"></a>加载 CSS 文件</h2><p>延迟加载图片、JSON、脚本等是用来加快页面显示速度的好方法。我们可以使用 curl.js 等这样 JavaScript 加载器来延迟加载这些外部资源，可你知道 CSS 样式表也可以延迟加载吗，而且在加载成功后回调函数会给予通知。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl(</span><br><span class=\"line\">\t[</span><br><span class=\"line\">\t\t<span class=\"string\">\"namespace/MyWidget\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"css!namespace/resources/MyWidget.css\"</span></span><br><span class=\"line\">\t], </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyWidget</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 你可以对MyWidget进行操作</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里没有对这个CSS文件引用，因为不需要;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 我们只需要它已经加载到页面上了</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-鼠标指针事件\"><a href=\"#CSS-鼠标指针事件\" class=\"headerlink\" title=\"CSS 鼠标指针事件\"></a>CSS 鼠标指针事件</h2><p>CSS 鼠标指针事件 <code>pointer-events</code> 属性非常的有趣，它的功效非常像 JavaScript，当你把这个属性设置为 none 时，它能有效的阻止禁止这个元素，你也许会说“这又如何？”，但事实上，它是禁止了这个元素上的任何 JavaScript 事件或回调函数！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.disabled</span> &#123; <span class=\"attribute\">pointer-events</span>: none; &#125;</span><br></pre></td></tr></table></figure>\n<p>点击这个元素，你会发现任何你放置在这个元素上的监听器都不会触发任何事件。一个神奇的功能——你不再需要为了防止某个事件会被触发而去检查某个 css 类是否存在。</p>\n<h2 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h2><ul>\n<li><a href=\"http://blog.sae.sina.com.cn/archives/2291\" target=\"_blank\" rel=\"noopener\">45个实用的JavaScript技巧、窍门和最佳实践</a></li>\n<li><a href=\"http://blog.sae.sina.com.cn/archives/5569\" target=\"_blank\" rel=\"noopener\">5种你未必知道的JavaScript和CSS交互的方法</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"JS","path":"api/tags/JS.json"}]},{"title":"前端可以这样玩儿！","slug":"前端可以这样玩儿！","date":"2017-04-12T13:36:41.000Z","updated":"2019-01-27T10:07:12.324Z","comments":true,"path":"api/articles/前端可以这样玩儿！.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_40.png","content":"<p>本文总结了一些前端冷知识，相信看完之后的你一定会觉得前端为什么如此好玩儿？！（源自 Quora 上的一个帖子，同时又查阅了一些其他资料）</p>\n<h2 id=\"HTML-篇\"><a href=\"#HTML-篇\" class=\"headerlink\" title=\"HTML 篇\"></a>HTML 篇</h2><h3 id=\"浏览器地址栏运行-JavaScript-代码\"><a href=\"#浏览器地址栏运行-JavaScript-代码\" class=\"headerlink\" title=\"浏览器地址栏运行 JavaScript 代码\"></a>浏览器地址栏运行 JavaScript 代码</h3><p>这个相信很多人是知道的，在浏览器地址栏可以直接运行 JavaScript 代码，做法是以 javascript: 开头后跟要执行的语句。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript:alert(<span class=\"string\">'hello \bMerrier :)'</span>);</span><br></pre></td></tr></table></figure>\n<p>将以上代码贴到浏览器地址栏回车后 alert 正常执行，一个弹窗神现。需要注意的是如果是通过 copy paste 代码到浏览器地址栏的话，IE 及 Chrome 会自动去掉代码开头的 javascript:，所以需要手动添加起来才能正确执行，而 Firefox 中虽然不会自动去掉，但它根本就不支持在地址栏运行 JS 代码，sigh~</p>\n<h3 id=\"浏览器地址栏运行-HTML-代码\"><a href=\"#浏览器地址栏运行-HTML-代码\" class=\"headerlink\" title=\"浏览器地址栏运行 HTML 代码\"></a>浏览器地址栏运行 HTML 代码</h3><p>如果说上面那条小秘密知道的人还算多的话，这条秘笈知道的人就要少一些了，在非 IE 内核的浏览器地址栏可以直接运行 HTML 代码！比如在地址栏输入以下代码然后回车运行，会出现指定的页面内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:text/html,<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_40.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"你造么，可以把浏览器当编辑器\"><a href=\"#你造么，可以把浏览器当编辑器\" class=\"headerlink\" title=\"你造么，可以把浏览器当编辑器\"></a>你造么，可以把浏览器当编辑器</h3><p>还是浏览器地址栏上做文章，将以下代码贴到地址栏运行后浏览器变成了一个原始而简单的编辑器，与 Windows 自带的 notepad 一样，吼吼。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:text/html, <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">contenteditable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_47.gif\" alt=\"\" width=\"500\"></div>\n\n<p>归根结底多亏了 HTML5 中新加的 contenteditable 属性，当元素指定了该属性后，元素的内容成为可编辑状态。</p>\n<h3 id=\"整个页面变得可编辑\"><a href=\"#整个页面变得可编辑\" class=\"headerlink\" title=\"整个页面变得可编辑\"></a>整个页面变得可编辑</h3><p>将以下代码放到 console 执行后，整个页面将变得可编辑，随意践踏吧~</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.contentEditable=<span class=\"string\">'true'</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_45.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"利用-a-标签自动解析-URL\"><a href=\"#利用-a-标签自动解析-URL\" class=\"headerlink\" title=\"利用 a 标签自动解析 URL\"></a>利用 a 标签自动解析 URL</h3><p>很多时候我们有从一个 URL 中提取域名，查询关键字，变量参数值等的需要，而万万没想到可以让浏览器方便地帮我们完成这一任务而不用我们写正则去抓取。方法就在 JS 代码里先创建一个a标签然后将需要解析的 URL 赋值给 a 的 href 属性，然后就得到了一切我们想要的了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">a.href = <span class=\"string\">'http://www.cnblogs.com/wayou/p/'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.host);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_41.png\" alt=\"\" width=\"500\"></div>\n\n<p>利用这一原理，稍微扩展一下，就得到了一个更加健壮的解析 URL 各部分的通用方法了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a =  <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    a.href = url;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        source: url,</span><br><span class=\"line\">        protocol: a.protocol.replace(<span class=\"string\">':'</span>,<span class=\"string\">''</span>),</span><br><span class=\"line\">        host: a.hostname,</span><br><span class=\"line\">        port: a.port,</span><br><span class=\"line\">        query: a.search,</span><br><span class=\"line\">        params: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ret = &#123;&#125;,</span><br><span class=\"line\">                seg = a.search.replace(<span class=\"regexp\">/^\\?/</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>),</span><br><span class=\"line\">                len = seg.length, i = <span class=\"number\">0</span>, s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;i&lt;len;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!seg[i]) &#123; <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">                s = seg[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">                ret[s[<span class=\"number\">0</span>]] = s[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;)(),</span><br><span class=\"line\">        file: (a.pathname.match(<span class=\"regexp\">/\\/([^\\/?#]+)$/i</span>) || [,<span class=\"string\">''</span>])[<span class=\"number\">1</span>],</span><br><span class=\"line\">        hash: a.hash.replace(<span class=\"string\">'#'</span>,<span class=\"string\">''</span>),</span><br><span class=\"line\">        path: a.pathname.replace(<span class=\"regexp\">/^([^\\/])/</span>,<span class=\"string\">'/$1'</span>),</span><br><span class=\"line\">        relative: (a.href.match(<span class=\"regexp\">/tps?:\\/\\/[^\\/]+(.+)/</span>) || [,<span class=\"string\">''</span>])[<span class=\"number\">1</span>],</span><br><span class=\"line\">        segments: a.pathname.replace(<span class=\"regexp\">/^\\//</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"页面拥有-ID-的元素会创建全局变量\"><a href=\"#页面拥有-ID-的元素会创建全局变量\" class=\"headerlink\" title=\"页面拥有 ID 的元素会创建全局变量\"></a>页面拥有 ID 的元素会创建全局变量</h3><p>在一张 HTML 页面中，所有设置了 ID 属性的元素会在 JavaScript 的执行环境中创建对应的全局变量，这意味着 document.getElementById 像人的阑尾一样显得多余了。但实际项目中最好老老实实该怎么写就怎么写，毕竟常规代码出乱子的机会要小得多。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sample\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(sample);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_42.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"加载-CDN-文件时，可以省掉-HTTP-标识\"><a href=\"#加载-CDN-文件时，可以省掉-HTTP-标识\" class=\"headerlink\" title=\"加载 CDN 文件时，可以省掉 HTTP 标识\"></a>加载 CDN 文件时，可以省掉 HTTP 标识</h3><p>现在很流行的 CDN 即从专门的服务器加载一些通用的 JS 和 CSS 文件，出于安全考虑有的 CDN 服务器使用 HTTPS 方式连接，而有的是传统的 HTTP，其实我们在使用时可以忽略掉这个，将它从 URL 中省去。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//domain.com/path/to/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"利用-script-标签保存任意信息\"><a href=\"#利用-script-标签保存任意信息\" class=\"headerlink\" title=\"利用 script 标签保存任意信息\"></a>利用 script 标签保存任意信息</h3><p>将 script 标签设置为 type=’text’ 然后可以在里面保存任意信息，之后可以在 JavaScript 代码中很方便地获取。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"template\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This won't display<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'template'</span>).innerHTML</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-篇\"><a href=\"#CSS-篇\" class=\"headerlink\" title=\"CSS 篇\"></a>CSS 篇</h2><h3 id=\"我的鼠标呢？\"><a href=\"#我的鼠标呢？\" class=\"headerlink\" title=\"我的鼠标呢？\"></a>我的鼠标呢？</h3><p>相信你看完以下代码后能够预料到会出现什么效果。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: none<span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的文字模糊效果\"><a href=\"#简单的文字模糊效果\" class=\"headerlink\" title=\"简单的文字模糊效果\"></a>简单的文字模糊效果</h3><p>以下两行简单的 CSS3 代码可达到将文字模糊化处理的目的，出来的效果有点像使用 PS 的滤镜，so cool!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: transparent;</span><br><span class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">#111</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><p>当然你可以将容器设置为 display: table，然后将子元素也就是要垂直居中显示的元素设置为 display: table-cell，然后加上 vertical-align: middle 来实现，但此种实现往往会因为 display: table 而破坏整体布局，那还不如直接用 table 标签了呢。下面这个样式利用了 translate 来巧妙实现了垂直居中样式，需 IE9+。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center-vertical</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比而言，水平居中要简单得多，像上面提到的 text-align: center，经常用到的技巧还有 margin: 0 auto。但对于 margin 大法也只在子元素宽度小于容器宽度时管用，当子元素宽度大于容器宽度时此法失效。如法炮制，利用 left 和 transform 同样可实现水平居中，不过意义不大，毕竟 text-align 和 margin 差不多满足需求了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center-horizontal</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多重边框\"><a href=\"#多重边框\" class=\"headerlink\" title=\"多重边框\"></a>多重边框</h3><p>利用重复指定 box-shadow 来达到多个边框的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS Border with Box-Shadow Example */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">12px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">18px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2),</span><br><span class=\"line\">                <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">24px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_43.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"实时编辑-CSS\"><a href=\"#实时编辑-CSS\" class=\"headerlink\" title=\"实时编辑 CSS\"></a>实时编辑 CSS</h3><p>通过设置 style 标签的 display: block 样式可以让页面的 style 标签显示出来，并且加上 contentEditable 属性后可以让样式成为可编辑状态，更改后的样式效果也是实时更新呈现的。此技巧在 IE 下无效。拥有此技能者，逆天也！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:block\"</span> <span class=\"attr\">contentEditable</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        \t<span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">color</span>: blue &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_46.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"创建长宽比固定的元素\"><a href=\"#创建长宽比固定的元素\" class=\"headerlink\" title=\"创建长宽比固定的元素\"></a>创建长宽比固定的元素</h3><p>通过设置父级窗口的 padding-bottom 可以达到让容器保持一定的长度比的目的，这在响应式页面设计中比较有用，能够保持元素不变形。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; position: relative; padding-bottom: 20%;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute; left: 0; top: 0; right: 0; bottom: 0;background-color:yellow;\"</span>&gt;</span></span><br><span class=\"line\">        this content will have a constant aspect ratio that varies based on the width.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_48.gif\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"CSS-中也可以做简单运算\"><a href=\"#CSS-中也可以做简单运算\" class=\"headerlink\" title=\"CSS 中也可以做简单运算\"></a>CSS 中也可以做简单运算</h3><p>通过 CSS 中的 calc 方法可以进行一些简单的运算，从而达到动态指定元素样式的目的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: <span class=\"built_in\">calc</span>(100% - 50px) <span class=\"built_in\">calc</span>(100% - 20px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-篇\"><a href=\"#JavaScript-篇\" class=\"headerlink\" title=\"JavaScript 篇\"></a>JavaScript 篇</h2><h3 id=\"生成随机字符串\"><a href=\"#生成随机字符串\" class=\"headerlink\" title=\"生成随机字符串\"></a>生成随机字符串</h3><p>利用 Math.random 和 toString 生成随机字符串，来自前一阵子看到的一篇<a href=\"http://flippinawesome.org/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/\" target=\"_blank\" rel=\"noopener\">博文</a>。这里的技巧是利用了 toString 方法可以接收一个基数作为参数的原理，这个基数从 2 到 36 封顶。如果不指定，默认基数是 10 进制。略屌！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateRandomAlphaNum</span>(<span class=\"params\">len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rdmString = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; rdmString.length &lt; len; )&#123;</span><br><span class=\"line\">        rdmString += <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">36</span>).substr(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rdmString.substr(<span class=\"number\">0</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_44.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"整数的操作\"><a href=\"#整数的操作\" class=\"headerlink\" title=\"整数的操作\"></a>整数的操作</h3><p>JavaScript 中是没有整型概念的，但利用好位操作符可以轻松处理，同时获得效率上的提升。|0 和 ~~ 是很好的一个例子，使用这两者可以将浮点转成整型且效率方面要比同类的 parseInt, Math.round 要快。在处理像素及动画位移等效果的时候会很有用。性能比较<a href=\"http://jsperf.com/math-floor-vs-math-round-vs-parseint/42\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"number\">12.4</span> / <span class=\"number\">4.13</span>) | <span class=\"number\">0</span>; <span class=\"comment\">// 结果为3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = ~~(<span class=\"number\">12.4</span> / <span class=\"number\">4.13</span>); <span class=\"comment\">// 结果为3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重写原生浏览器方法以实现新功能\"><a href=\"#重写原生浏览器方法以实现新功能\" class=\"headerlink\" title=\"重写原生浏览器方法以实现新功能\"></a>重写原生浏览器方法以实现新功能</h3><p>下面的代码通过重写浏览器的 alert 让它可以记录弹窗的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldAlert = <span class=\"built_in\">window</span>.alert,</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.alert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        count ++;</span><br><span class=\"line\">        oldAlert(a + <span class=\"string\">\"\\n You've called alert \"</span> + count + <span class=\"string\">\" times now. Stop, it's evil!\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">alert(<span class=\"string\">\"Hello World\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"console-显示图片以及为文字加样式\"><a href=\"#console-显示图片以及为文字加样式\" class=\"headerlink\" title=\"console 显示图片以及为文字加样式\"></a>console 显示图片以及为文字加样式</h3><p>在 Chrome 的开发者工具里，console 可以加样式，可以显示缤纷的颜色，甚至图片。简直爽翻了。具体来说，是可以对输出到 console 控制台的文字进行 CSS 控制。格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c需要输出的信息 \"</span>, <span class=\"string\">\"css 代码\"</span>);</span><br></pre></td></tr></table></figure>\n<p>下面是一些已经写好的 console 新玩法代码，可以在 chrome 控制台里面实测（关于 console 的更多玩法，推荐 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Console#示例\" target=\"_blank\" rel=\"noopener\">MDN关于console的文档</a>）：</p>\n<h4 id=\"1-3D-Text\"><a href=\"#1-3D-Text\" class=\"headerlink\" title=\"1. 3D Text\"></a>1. 3D Text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c3D Text\"</span>,<span class=\"string\">\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,</span></span><br><span class=\"line\"><span class=\"string\">0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),</span></span><br><span class=\"line\"><span class=\"string\">0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Colorful-CSS\"><a href=\"#2-Colorful-CSS\" class=\"headerlink\" title=\"2. Colorful CSS\"></a>2. Colorful CSS</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%cColorful CSS\"</span>,<span class=\"string\">\"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));</span></span><br><span class=\"line\"><span class=\"string\">background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, </span></span><br><span class=\"line\"><span class=\"string\">rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);</span></span><br><span class=\"line\"><span class=\"string\">filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Rainbow-Text\"><a href=\"#3-Rainbow-Text\" class=\"headerlink\" title=\"3. Rainbow Text\"></a>3. Rainbow Text</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%cRainbow Text '</span>, <span class=\"string\">'background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), </span></span><br><span class=\"line\"><span class=\"string\">color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-输出图片\"><a href=\"#4-输出图片\" class=\"headerlink\" title=\"4. 输出图片\"></a>4. 输出图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c\"</span>, <span class=\"string\">\"padding:50px 300px;line-height:120px;background:url('https://ss0.bdstatic.com/5aV1bjqh\\_Q23odCf/static/superman/img/logo/bd\\_logo1_31bdc765.png') no-repeat;\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"不声明第三个变量的值交换\"><a href=\"#不声明第三个变量的值交换\" class=\"headerlink\" title=\"不声明第三个变量的值交换\"></a>不声明第三个变量的值交换</h3><p>我们都知道交换两个变量值的常规做法，那就是声明一个中间变量来暂存。但鲜有人去挑战不声明中间变量的情况，下面的代码给出了这种实现。蛮有创意的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a= [b, b = a][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_49.jpg\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h3><p>在 JavaScript 的世界，万物皆对象。除了 null 和 undefined，其他基本类型数字，字符串和布尔值都有对应有包装对象。对象的一个特征是你可以在它身上直接调用方法。对于数字基本类型，当试图在其身上调用 toString 方法会失败，但用括号括起来后再调用就不会失败了，内部实现是用相应的包装对象将基本类型转为对象。所以 <strong>(1).toString()</strong> 相当于 <strong>new Number(1).toString()</strong>。因此，你的确可以把基本类型数字，字符串，布尔等当对象使用的，只是注意语法要得体。同时我们注意到，JavaScript 中数字是不分浮点和整形的，所有数字其实均是浮点类型，只是把小数点省略了而已，比如你看到的 1 可以写成 1.，这也就是为什么当你试图 1.toString() 时会报错，所以正确的写法应该是这样：<strong>1..toString()</strong>，或者如上面所述加上括号，这里括号的作用是纠正 JS 解析器，不要把 1 后面的点当成小数点。内部实现如上面所述，是将 1. 用包装对象转成对象再调用方法。</p>\n<h3 id=\"If-语句的变形\"><a href=\"#If-语句的变形\" class=\"headerlink\" title=\"If 语句的变形\"></a>If 语句的变形</h3><p>当你需要写一个 if 语句的时候，不妨尝试另一种更简便的方法，用 JavaScript 中的逻辑操作符来代替。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> day = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).getDay() === <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//传统if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (day) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'Today is Sunday!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//运用逻辑与代替if</span></span><br><span class=\"line\">day &amp;&amp; alert(<span class=\"string\">'Today is Sunday!'</span>);</span><br></pre></td></tr></table></figure>\n<p>比如上面的代码，首先得到今天的日期，如果是星期天，则弹窗，否则什么也不做。我们知道逻辑操作存在短路的情况，对于逻辑与表达式，只有两者都真才结果才为真，如果前面的 day 变量被判断为假了，那么对于整个与表达式来说结果就是假，所以就不会继续去执行后面的 alert 了，如果前面 day 为真，则还要继续执行后面的代码来确定整个表达式的真假。利用这点达到了 if 的效果。</p>\n<h3 id=\"禁止别人以-iframe-加载你的页面\"><a href=\"#禁止别人以-iframe-加载你的页面\" class=\"headerlink\" title=\"禁止别人以 iframe 加载你的页面\"></a>禁止别人以 iframe 加载你的页面</h3><p>下面的代码已经不言自明了，没什么好多说的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.location != <span class=\"built_in\">window</span>.parent.location) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.parent.location = <span class=\"built_in\">window</span>.location;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://www.quora.com/Web-Development/What-are-the-most-interesting-HTML-JS-DOM-CSS-hacks-that-most-web-developers-dont-know-about?utm\\_source=html5weekly&amp;utm\\_medium=email\" target=\"_blank\" rel=\"noopener\">What are the most interesting HTML/JS/DOM/CSS hacks that most web developers don’t know about?</a></li>\n<li><a href=\"http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html\" target=\"_blank\" rel=\"noopener\">前端不为人知的一面–前端冷知识集锦</a></li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"技巧","path":"api/tags/技巧.json"},{"name":"JS","path":"api/tags/JS.json"},{"name":"HTML","path":"api/tags/HTML.json"}]},{"title":"前端面试系列（11）——window.onload和document.ready的区别","slug":"前端面试系列（11）——window.onload和document.ready的区别","date":"2017-04-12T09:14:30.000Z","updated":"2019-01-27T10:07:12.324Z","comments":true,"path":"api/articles/前端面试系列（11）——window.onload和document.ready的区别.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_11.png","content":"<p>这个问题虽然比较简单，但是依然是前端面试中经常会问到的一道题，所以为了让自己“与众不同”，必须全面了解这两者的区别，才能从众多候选人中脱颖而出</p>\n<h2 id=\"一张表格\"><a href=\"#一张表格\" class=\"headerlink\" title=\"一张表格\"></a>一张表格</h2><p>下面这张表格简单的介绍了两者的区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>window.onload()</th>\n<th>$(document).ready()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>执行时机</td>\n<td>在页面所有元素（包括图片，引用文件）加载完后执行</td>\n<td>页面中所有HTML DOM，CSS DOM结构加载完之后就会执行，其他图片等内容可能没有加载完</td>\n</tr>\n<tr>\n<td>编写个数</td>\n<td>不能同时写多个，后面的将会覆盖前面的</td>\n<td>可以同时写多个</td>\n</tr>\n<tr>\n<td>简写</td>\n<td>无</td>\n<td>$().ready(function(){}) // $()不带参数默认是document；$(function(){})</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"jQ-的-document-ready-实现\"><a href=\"#jQ-的-document-ready-实现\" class=\"headerlink\" title=\"jQ 的 document.ready() 实现\"></a>jQ 的 document.ready() 实现</h2><p>在 jQuery 脚本加载的时候，会监听 DOMContentLoaded 事件。当事件触发时候，会执行 ready 事件的回调；（document.readyState === “complete” 时相当于 dom 加载完毕<br>由于用的是原生的 DOMContentLoaded 事件，所以<strong>目前的 ready 函数仅能用于当前 document，无需选择器</strong></p>\n<h2 id=\"谁更快\"><a href=\"#谁更快\" class=\"headerlink\" title=\"谁更快\"></a>谁更快</h2><p>jQuery 的 document.ready 就一定比 window.onload 快吗？下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-US\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>加载时机<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">onload</span>=<span class=\"string\">\"console.log('jquery.js loaded')\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'define functions'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">type, info</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(type + <span class=\"string\">' onload '</span> + (info || <span class=\"string\">\"\"</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">     $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document ready'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'document'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;    </span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'window addEventListener'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          load(<span class=\"string\">'DOMContentLoaded'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">     &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('body')\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('text')\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',1)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/17.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('img',2)\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.deskcar.com/desktop/else/2013714232149/16.jpg\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"load('js')\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行之后有两种结果：\"><a href=\"#执行之后有两种结果：\" class=\"headerlink\" title=\"执行之后有两种结果：\"></a>执行之后有两种结果：</h3><h4 id=\"首次加载：\"><a href=\"#首次加载：\" class=\"headerlink\" title=\"首次加载：\"></a>首次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_11.png\" alt=\"\" width=\"400\"></div>\n\n<h4 id=\"二次加载：\"><a href=\"#二次加载：\" class=\"headerlink\" title=\"二次加载：\"></a>二次加载：</h4><div align=\"center\"><img src=\"/images/hexo_post_12.png\" alt=\"\" width=\"400\"></div>\n\n<p>第一种情况非常符合我们的想法，ready 比 onload 快，顺序也比较合理。而第二种情况就有些怪异，应该依照上面 jquery ready 事件的实现，那 ready 应该要 DOMContentLoaded 后面啊。我思来想去，我觉得这是个误会，由于二次加载时利用到缓存，导致文件资源都很快加载，各个事件触发的时间非常相近，顺序也不定，就给人一种 ready 顺序不对之感，大家应该发现这几个事件都是在几十毫秒之内触发。PS：js 执行需要时间，几十毫秒不同的顺序我觉得很正常。另外尝试几次，二次加载顺序确实会有变化，但时间都很相近。所以，jQuery 的 document ready 不一定比 window.onload 快执行。</p>\n<h2 id=\"为什么外部-script-文件放页面内容后面好？\"><a href=\"#为什么外部-script-文件放页面内容后面好？\" class=\"headerlink\" title=\"为什么外部 script 文件放页面内容后面好？\"></a>为什么外部 script 文件放页面内容后面好？</h2><h3 id=\"script-执行顺序\"><a href=\"#script-执行顺序\" class=\"headerlink\" title=\"script 执行顺序\"></a>script 执行顺序</h3><blockquote>\n<p>无论如何包含代码，只要不存在 defer 和 async 属性，浏览器都会按照 <code>&lt;script&gt;</code> 元素在页面中出现的先后顺序对它们依次进行解析。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>换句话说，在第一个 <code>&lt;script&gt;</code> 元素包含的代码解析完成后，第二个 <code>&lt;script&gt;</code> 包含代码才会被解析，然后才是第三个…..<br>如果在 head 元素里包含所有 JavaScript 文件，就必须等到全部 JavaScript 代码都被下载、解析和执行完成以后，才能呈现页面的内容（浏览器在遇到 <code>&lt;body&gt;</code> 标签时才开始呈现内容）。在有 JavaScript 文件时候，浏览器呈现页面会出现明显的延迟，延时期间浏览器是一片空白。所以，外部 script 文件放页面内容后面。这样，在解析 JavaScript 代码之前，页面内容将完全呈现出来。</p>\n<h3 id=\"一定是放页面内容后面吗？\"><a href=\"#一定是放页面内容后面吗？\" class=\"headerlink\" title=\"一定是放页面内容后面吗？\"></a>一定是放页面内容后面吗？</h3><p>有种情况是 JavaScript 放哪里都一样的，那就是内容是依赖 JavaScript 的执行渲染时候，放哪都一样。所以我们需要尽量避免在 JS 中对 dom 进行修改，对于性能优化有比较大的帮助。</p>\n<h2 id=\"Load-方法\"><a href=\"#Load-方法\" class=\"headerlink\" title=\"Load() 方法\"></a>Load() 方法</h2><p>由于在 $(document).ready() 方法内注册的事件，只要 DOM 就绪就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕，所以例如图片的高度和宽度这样的属性此时不一定有效。要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法—— load() 方法。Load() 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>\n<h2 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h2><ul>\n<li>$(window).load()：等价于 window.onload()</li>\n<li>$(window).unload()：页面关闭时触发</li>\n</ul>\n<h2 id=\"坑爹的-IE-or-jQ？\"><a href=\"#坑爹的-IE-or-jQ？\" class=\"headerlink\" title=\"坑爹的 IE or jQ？\"></a>坑爹的 IE or jQ？</h2><p>最近在改一个嵌入在 iframe 中的页面的时候，使用了 jquery 做效果，而页面本身也绑定了 onload 事件。改完后，Firefox 下测试正常流畅，IE 下就要等个十几秒 jquery 的效果才出现，黄花菜都凉了。起初以为是和本身 onload 加载的方法冲突。网上普遍的说法是 $(document).ready() 是在页面 DOM 解析完成后执行，而 onload 事件是在所有资源都准备完成之后才执行，也就是说 $(document).ready() 是要在 onload 之前执行的，尤其当页面图片较大较多的时候，这个时间差可能更大。可是我这页面分明是图片都显示出来十几秒了，还不见 jquery 的效果出来。 删了 onload 加载的方法试试，结果还是一样，看来没有必要把原本的 onload 事件绑定也改用 $(document).ready() 来写。那是什么原因使得 Firefox 正常而 IE 就能呢？接着调试，发现 IE 下原来绑定的 onload 方法竟然先于 $(document).ready() 的内容执行，而 Firefox 则是先执行 $(document).ready() 的内容，再执行原来的 onload 方法。这个和网上的说法似乎不完全一致啊，走投无路的时候就看看源码，翻翻 jQuery 的源码看看 $(document).ready() 是如何实现的吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( jQuery.browser.msie &amp;&amp; <span class=\"built_in\">window</span> == top ) (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (jQuery.isReady) <span class=\"keyword\">return</span>; </span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( error ) &#123; </span><br><span class=\"line\">　　　　　　setTimeout( <span class=\"built_in\">arguments</span>.callee, <span class=\"number\">0</span> ); </span><br><span class=\"line\">　　　　　　 <span class=\"keyword\">return</span>; </span><br><span class=\"line\">　　　　&#125; </span><br><span class=\"line\">　　 <span class=\"comment\">// and execute any waiting functions </span></span><br><span class=\"line\">　　　jQuery.ready(); </span><br><span class=\"line\">&#125;)(); </span><br><span class=\"line\">jQuery.event.add( <span class=\"built_in\">window</span>, <span class=\"string\">\"load\"</span>, jQuery.ready );</span><br></pre></td></tr></table></figure>\n<p>结果很明了了，IE 只有在页面不是嵌入 iframe 中的情况下才和 Firefox 等一样，先执行 $(document).ready() 的内容，再执行原来的 onload 方法。对于嵌入 iframe 中的页面，也只是绑定在 load 事件上执行，所以自然是在原来的 onload 绑定的方法执行之后才轮到。而这个页面中正好在测试环境下有一个访问不到的资源，那十几秒的延迟正是它放大出的时间差。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.jb51.net/article/50185.htm\" target=\"_blank\" rel=\"noopener\">一张表格告诉你windows.onload()与$(document).ready()的区别</a></li>\n<li><a href=\"http://www.cnblogs.com/lovesong/p/5641834.html\" target=\"_blank\" rel=\"noopener\">jQuery的document ready与 onload事件——你真的思考过吗？</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"面试","path":"api/tags/面试.json"}]}]}