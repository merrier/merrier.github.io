{"total":114,"pageSize":10,"pageCount":12,"data":[{"title":"推荐一些视频","slug":"推荐一些视频","date":"2017-10-07T14:10:49.000Z","updated":"2019-01-29T09:23:55.536Z","comments":true,"path":"api/articles/推荐一些视频.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_285.png","content":"<p>平时很喜欢看一些东西，当然不局限于前端，而相比文字而言，更喜欢看视频，尤其是有了“弹幕”这个神奇的东东之后，在这里就推荐一些我看过的有趣的视频，有些是技术类的，也有些是搞笑片段或纪录片，闲暇之余仅供娱乐。</p>\n<h2 id=\"技术类\"><a href=\"#技术类\" class=\"headerlink\" title=\"技术类\"></a>技术类</h2><h3 id=\"Javascript作者接受采访视频\"><a href=\"#Javascript作者接受采访视频\" class=\"headerlink\" title=\"Javascript作者接受采访视频\"></a><a href=\"https://www.youtube.com/watch?v=IPxQ9kEaF8c\" target=\"_blank\" rel=\"noopener\">Javascript作者接受采访视频</a></h3><p>从<a href=\"https://www.zhihu.com/question/31415286\" target=\"_blank\" rel=\"noopener\">知乎</a>上看到的，之前就听说过JS是一位大神用 10 天时间赶出来的。。虽然目前看来JS存在很多问题和很多坑，但是10天写出一门风靡全球的语言也是一件很伟大的事情了。。</p>\n<h3 id=\"浏览器的背后（续）\"><a href=\"#浏览器的背后（续）\" class=\"headerlink\" title=\"浏览器的背后（续）\"></a><a href=\"http://v.youku.com/v_show/id_XMjMzMzU2NDc2.html\" target=\"_blank\" rel=\"noopener\">浏览器的背后（续）</a></h3><p>浏览器其实有很多可以探讨的东西，同时也是笔试面试时的常客，这个视频来自优酷，虽然有个“续”字，但是我并没有找到前面的视频啊我勒个擦？！</p>\n<h3 id=\"动画设计的12原则\"><a href=\"#动画设计的12原则\" class=\"headerlink\" title=\"动画设计的12原则\"></a><a href=\"https://www.youtube.com/watch?v=GcryIdriSe4\" target=\"_blank\" rel=\"noopener\">动画设计的12原则</a></h3><p>在看文章-<a href=\"https://www.w3cplus.com/animation/crafting-easing-curves-for-user-interfaces.html\" target=\"_blank\" rel=\"noopener\">给用户界面添加缓和效果(Easing Curves)</a>时发现的一个视频，其实设计动画的初衷是为了对用户更“亲切”，所以动画设计的原则就是要满足现实世界中的物理学规则，而该视频就是对该原则的总结，视频来自Youtube，所以需要fq，文字版的<a href=\"https://www.w3cplus.com/css3/animation-principles-for-the-web.html\" target=\"_blank\" rel=\"noopener\">在这里</a>，除此之外你能在 Codepen 找到它们<a href=\"http://codepen.io/collection/AxKOdY/\" target=\"_blank\" rel=\"noopener\">全部的开源 HTML 和 CSS 代码</a>。</p>\n<h3 id=\"Maxoden的演讲视频\"><a href=\"#Maxoden的演讲视频\" class=\"headerlink\" title=\"Maxoden的演讲视频\"></a><a href=\"https://www.youtube.com/watch?v=8gM3xMObEz4\" target=\"_blank\" rel=\"noopener\">Maxoden的演讲视频</a></h3><p>Maxoden 是<a href=\"https://github.com/maxogden/voxel-engine\" target=\"_blank\" rel=\"noopener\">Voxel.js</a>（一个在浏览器里运行的 Minecraft 框架）的作者，而他也借此做了一个 Minecraft 风格的展示他自己项目的页面，是一个很有探索精神的前端工程师。</p>\n<h3 id=\"What-the-heck-is-the-event-loop-anyway\"><a href=\"#What-the-heck-is-the-event-loop-anyway\" class=\"headerlink\" title=\"What the heck is the event loop anyway\"></a><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">What the heck is the event loop anyway</a></h3><p>Philip Roberts 的演讲视频:，主题为《什么是 JavaScript 中的事件循环》，收到了广泛好评，对 event loop 仍然存在疑问的童鞋可以花半小时看一下，当然，如果你更喜欢文字版的，可以移步掘金上的<a href=\"https://juejin.im/post/5ae083166fb9a07ab9792896\" target=\"_blank\" rel=\"noopener\">这篇演讲译文</a></p>\n<h3 id=\"像素的一生Life-of-a-Pixel-Steve-Kobes\"><a href=\"#像素的一生Life-of-a-Pixel-Steve-Kobes\" class=\"headerlink\" title=\"像素的一生Life of a Pixel - Steve Kobes\"></a><a href=\"https://www.youtube.com/watch?reload=9&amp;v=NCUDntd-3ao\" target=\"_blank\" rel=\"noopener\">像素的一生Life of a Pixel - Steve Kobes</a></h3><p>Youtube 上关于像素的演讲，从微博上看到的，也有很多同事反馈讲的不错，关键是还有中英文双语字幕，这对于我这种英文水平不是很高的人说来说不能再贴心。</p>\n<h3 id=\"Getting-Started-with-Redux\"><a href=\"#Getting-Started-with-Redux\" class=\"headerlink\" title=\"Getting Started with Redux\"></a><a href=\"https://search.bilibili.com/all?keyword=Getting%20Started%20with%20Redux\" target=\"_blank\" rel=\"noopener\">Getting Started with Redux</a></h3><p>Redux 作者出的入门教学视频，不过非常贴心的配了字幕。</p>\n<h2 id=\"剧集类\"><a href=\"#剧集类\" class=\"headerlink\" title=\"剧集类\"></a>剧集类</h2><h3 id=\"《国家宝藏》系列\"><a href=\"#《国家宝藏》系列\" class=\"headerlink\" title=\"《国家宝藏》系列\"></a><a href=\"https://search.bilibili.com/all?keyword=%E5%9B%BD%E5%AE%B6%E5%AE%9D%E8%97%8F&amp;page=1&amp;order=totalrank\" target=\"_blank\" rel=\"noopener\">《国家宝藏》系列</a></h3><p>央视：你爸爸还是你爸爸。节目集结了以故宫博物院为首的<strong>九大博物馆</strong>，每个博物馆选出三件文物组内 battle，每件文物都有一位明星守护人来讲述这件文物前世今生的故事。总之吧，你要是不跪着看完请来打我……</p>\n<h3 id=\"地下交通站\"><a href=\"#地下交通站\" class=\"headerlink\" title=\"地下交通站\"></a><a href=\"https://www.bilibili.com/bangumi/play/ss20999/\" target=\"_blank\" rel=\"noopener\">地下交通站</a></h3><p>这是一部拿鬼子和汉奸做包袱的国产情景喜剧，<a href=\"https://movie.douban.com/subject/2133474/\" target=\"_blank\" rel=\"noopener\">豆瓣</a>评分 9.0，包袱无处不在，堪称国产神作，不过笑点低的就算了吧，别再笑岔过去- -</p>\n<h2 id=\"演讲类\"><a href=\"#演讲类\" class=\"headerlink\" title=\"演讲类\"></a>演讲类</h2><h3 id=\"玉伯在2017SEE-Conf大会上的演讲视频\"><a href=\"#玉伯在2017SEE-Conf大会上的演讲视频\" class=\"headerlink\" title=\"玉伯在2017SEE Conf大会上的演讲视频\"></a><a href=\"https://mp.weixin.qq.com/s/08A6OF3G-UnH3vm0vCZoGg\" target=\"_blank\" rel=\"noopener\">玉伯在2017SEE Conf大会上的演讲视频</a></h3><p>玉伯在首届蚂蚁体验科技 SEE Conf 大会上分享的总结，不管是前端还是设计师都值得一看。</p>\n<h3 id=\"故宫“看门人”带您探访紫禁城\"><a href=\"#故宫“看门人”带您探访紫禁城\" class=\"headerlink\" title=\"故宫“看门人”带您探访紫禁城\"></a><a href=\"http://m.bilibili.com/video/av6737337.html\" target=\"_blank\" rel=\"noopener\">故宫“看门人”带您探访紫禁城</a></h3><p>故宫博物院院长讲述故宫博物院概况，未开放区的故事，和故宫中的趣事。别的不说，院长的 ppt 做的很棒，同时讲解风趣幽默，还调侃了一下国家领导人，怪不得后面好多人站着听完。。</p>\n<h3 id=\"How-GitHub-Uses-GitHub-to-Build-GitHub\"><a href=\"#How-GitHub-Uses-GitHub-to-Build-GitHub\" class=\"headerlink\" title=\"How GitHub Uses GitHub to Build GitHub\"></a><a href=\"https://zachholman.com/talk/how-github-uses-github-to-build-github/\" target=\"_blank\" rel=\"noopener\">How GitHub Uses GitHub to Build GitHub</a></h3><p>题目看似一个绕口令，其实就是一个绕口令，这个视频为我们讲述了 github 团队是如何利用 github 搭建 github 这个站点的，不过该网站需要翻墙，也不知道当你观看的时候视频是否存在，一切随缘吧~</p>\n<h3 id=\"Git-and-GitHub-Secrets\"><a href=\"#Git-and-GitHub-Secrets\" class=\"headerlink\" title=\"Git and GitHub Secrets\"></a><a href=\"https://zachholman.com/talk/git-github-secrets/\" target=\"_blank\" rel=\"noopener\">Git and GitHub Secrets</a></h3><p>github 是当今最流行的版本控制工具了（没有之一），而 git 和 github 的功能非常强大，我们平常用到的都是一些最基本的功能，所以有一些隐藏功能是大多数人都不知道的，而这个视频就是 git 创始人之一Zach Hloman 的一篇演讲，可以让你了解到 git 和 github 的秘密机关。</p>\n<h3 id=\"缅怀经典！乔布斯2007年iPhone发布会全程-中文字幕\"><a href=\"#缅怀经典！乔布斯2007年iPhone发布会全程-中文字幕\" class=\"headerlink\" title=\"缅怀经典！乔布斯2007年iPhone发布会全程 中文字幕\"></a><a href=\"http://www.iqiyi.com/w_19rqw2asd9.html\" target=\"_blank\" rel=\"noopener\">缅怀经典！乔布斯2007年iPhone发布会全程 中文字幕</a></h3><p>乔布斯已经离开我们有一段时间了，但是他的传奇仍在继续，Apple 作为全球第二大互联网科技公司，其对世界的影响是有目共睹的，在 2018 年的今天，就让我们一起穿越回 2007 年，那一年是属于乔布斯的，是属于 iPhone的！</p>\n<h3 id=\"周其仁号称14亿人都应该看的关于以色列的演讲视频\"><a href=\"#周其仁号称14亿人都应该看的关于以色列的演讲视频\" class=\"headerlink\" title=\"周其仁号称14亿人都应该看的关于以色列的演讲视频\"></a><a href=\"https://mp.weixin.qq.com/s/JGB_BQXZ86L-ywDcAMtJRQ\" target=\"_blank\" rel=\"noopener\">周其仁号称14亿人都应该看的关于以色列的演讲视频</a></h3><p>北大国家发展研究院教授在联想之星 WILL 大会上发表的演讲，虽然主题是经济，但是值得所有人看一下。</p>\n<h3 id=\"官方完整视频！张小龙在微信公开课的4小时\"><a href=\"#官方完整视频！张小龙在微信公开课的4小时\" class=\"headerlink\" title=\"官方完整视频！张小龙在微信公开课的4小时\"></a><a href=\"https://mp.weixin.qq.com/s/CZZ7JSz-r1UexVY2xpJvZA\" target=\"_blank\" rel=\"noopener\">官方完整视频！张小龙在微信公开课的4小时</a></h3><p>“微信之父”张小龙在 2019微信公开课上的演讲，值得每一位产品经理观看研习，文字版：<a href=\"https://mp.weixin.qq.com/s/FgKpY62OceBAPpz5MklS_g\" target=\"_blank\" rel=\"noopener\">官方最完整版：张小龙微信公开课超时演讲，总结微信8年</a></p>\n<h3 id=\"推荐8个设计师必看的TED演讲\"><a href=\"#推荐8个设计师必看的TED演讲\" class=\"headerlink\" title=\"推荐8个设计师必看的TED演讲\"></a><a href=\"https://mp.weixin.qq.com/s/oEcZRIt4NOhWev2KRLJL6w\" target=\"_blank\" rel=\"noopener\">推荐8个设计师必看的TED演讲</a></h3><p>公众号【壹念视觉】给众道友推荐的 8 个网上口碑很好的 TED 设计演讲，这些已在网上流传已久，与其躺着刷抖音不如去看看这些，换换口味~</p>\n<h2 id=\"广告类\"><a href=\"#广告类\" class=\"headerlink\" title=\"广告类\"></a>广告类</h2><h3 id=\"年度走心广告：总有人偷偷爱着你\"><a href=\"#年度走心广告：总有人偷偷爱着你\" class=\"headerlink\" title=\"年度走心广告：总有人偷偷爱着你\"></a><a href=\"https://mp.weixin.qq.com/s/IIqjd-sFrPgcY6Tizc8_TA\" target=\"_blank\" rel=\"noopener\">年度走心广告：总有人偷偷爱着你</a></h3><p>这是 999感冒灵推出的感恩节短片，广告片选取真人事件改编，以一段网络问答为线，串联 5 个反转故事。看完后你会觉得：这个世界没有想象中的那么好，但似乎……也没那么糟，总有人偷偷爱着你。</p>\n<h3 id=\"近年最喜欢的-Apple-广告片\"><a href=\"#近年最喜欢的-Apple-广告片\" class=\"headerlink\" title=\"近年最喜欢的 Apple 广告片\"></a><a href=\"https://www.jianshu.com/p/e01c5bc2757d\" target=\"_blank\" rel=\"noopener\">近年最喜欢的 Apple 广告片</a></h3><p>来自简书-<a href=\"https://www.jianshu.com/u/ba6d563caa3a\" target=\"_blank\" rel=\"noopener\">刘英滕</a>的推荐，Apple 的广告往往不会单纯的宣传其产品，更注重的是传达一种理念，表达一种对设计和交互的思考，同时关注人情和应用场景。</p>\n<h3 id=\"两秒钟，你究竟错过了什么？——美国抵制分心驾驶公益广告\"><a href=\"#两秒钟，你究竟错过了什么？——美国抵制分心驾驶公益广告\" class=\"headerlink\" title=\"两秒钟，你究竟错过了什么？——美国抵制分心驾驶公益广告\"></a><a href=\"https://new.qq.com/omn/20171224/20171224A02ZLA.html\" target=\"_blank\" rel=\"noopener\">两秒钟，你究竟错过了什么？——美国抵制分心驾驶公益广告</a></h3><p>手机给我们传递了最新消息，有时无意中也为我们“推送”了安全隐患。开车时，即便是两秒钟的分神，也会使车辆碰撞的概率翻倍。<strong>专心驾驶</strong>，才是最不容错过的事！</p>\n<h3 id=\"啥是佩奇\"><a href=\"#啥是佩奇\" class=\"headerlink\" title=\"啥是佩奇\"></a><a href=\"https://www.zhihu.com/question/309457864/answer/576303849\" target=\"_blank\" rel=\"noopener\">啥是佩奇</a></h3><p>每到春节前后就有很多以亲情为主题的广告和宣传片，这部《啥是佩奇》虽然也带着推广的目的，但是它有一个不太一样的地方，就是<strong>没有把要推广的产品作为核心的”亲情解决方案”</strong>。</p>\n<blockquote>\n<p>亲情本身才是亲情的解决方案，这可能就是这部片子最值得欣赏的地方。</p>\n</blockquote>\n<h3 id=\"简单才是王道\"><a href=\"#简单才是王道\" class=\"headerlink\" title=\"简单才是王道\"></a><a href=\"https://www.bilibili.com/video/av31248682/\" target=\"_blank\" rel=\"noopener\">简单才是王道</a></h3><p>挪威创意广告《简单才是王道》，装逼开场苦逼结尾。搞笑之余阐述了对于人工智能的担忧和思考</p>\n<h3 id=\"杜蕾斯惨败，这才是2018年度最扎心广告\"><a href=\"#杜蕾斯惨败，这才是2018年度最扎心广告\" class=\"headerlink\" title=\"杜蕾斯惨败，这才是2018年度最扎心广告!\"></a><a href=\"https://mp.weixin.qq.com/s/E716DWBg0TuCZlAy8l8VOA\" target=\"_blank\" rel=\"noopener\">杜蕾斯惨败，这才是2018年度最扎心广告!</a></h3><blockquote>\n<p>如果生命到此为止<br>你是不是没有任何遗憾？</p>\n</blockquote>\n<h2 id=\"纪录片类\"><a href=\"#纪录片类\" class=\"headerlink\" title=\"纪录片类\"></a>纪录片类</h2><h3 id=\"Google搜索：“How”\"><a href=\"#Google搜索：“How”\" class=\"headerlink\" title=\"Google搜索：“How”\"></a><a href=\"https://mp.weixin.qq.com/s/D5N50mE2ylkWf30zEuWu6Q\" target=\"_blank\" rel=\"noopener\">Google搜索：“How”</a></h3><p>Google 刚刚发布了 2017 年搜索关键词报告，这一年，我们在 Google 搜索栏，键入最多的一个单词是：<strong>“How”。</strong>为此 Google 做了一支名为“How”的视频。这家全球最大的搜索引擎公司，每天悄无声息的出现在我们生活里。 <strong>那个两寸长的搜索框，记录着 2017 年里人们的好奇、困惑、恐惧、沮丧、无助，但更多的是希望和善良。</strong></p>\n<h3 id=\"最动人的年度视频：3分钟回望2017\"><a href=\"#最动人的年度视频：3分钟回望2017\" class=\"headerlink\" title=\"最动人的年度视频：3分钟回望2017\"></a><a href=\"http://video.sina.com.cn/p/mobile/doc/2017-12-21/171367657863.html\" target=\"_blank\" rel=\"noopener\">最动人的年度视频：3分钟回望2017</a></h3><p>2017 即将结束，新浪带我们回首了这一年发生的种种，有国家的荣耀时刻，也有英雄的陨落</p>\n<h3 id=\"知乎发布-2017-大事记：关于世界，关于中国，关于你\"><a href=\"#知乎发布-2017-大事记：关于世界，关于中国，关于你\" class=\"headerlink\" title=\"知乎发布 2017 大事记：关于世界，关于中国，关于你\"></a><a href=\"https://zhuanlan.zhihu.com/p/32168125\" target=\"_blank\" rel=\"noopener\">知乎发布 2017 大事记：关于世界，关于中国，关于你</a></h3><p>知乎也发布了 2017 总结视频。。</p>\n<h3 id=\"因为热爱，才对世界饱含希望\"><a href=\"#因为热爱，才对世界饱含希望\" class=\"headerlink\" title=\"因为热爱，才对世界饱含希望\"></a><a href=\"https://bbs.hupu.com/24792317.html\" target=\"_blank\" rel=\"noopener\">因为热爱，才对世界饱含希望</a></h3><p>知乎发布 2018 年度回顾视频，收录了今年知乎热搜词背后的重大事件：金庸逝世、MH370调查组解散、创造101、杜嘉班纳辱华、IG夺冠等，2018年不够完美，我们经历苦痛，承受告别，但因为热爱，我们才好奇，才拥有光芒，才对世界饱含希望！片尾那句“除了这一生，我们又没有其他时间”，真的让人泪目！</p>\n<h3 id=\"Life-in-A-Day\"><a href=\"#Life-in-A-Day\" class=\"headerlink\" title=\"Life in A Day\"></a><a href=\"https://www.youtube.com/watch?v=JaFVr_cJJIY\" target=\"_blank\" rel=\"noopener\">Life in A Day</a></h3><p>这部 Youtube 筹划的纪录片，记录着全世界 2010 年 7 月 24 日这天，世界各角落的可能性。影片由全世界的 Youtube 使用者拍摄，上传至 Youtube，并由导演 Kevin MacDonald 和 Ridley Scott 剪辑成九十分钟影片，影片没有各种花哨的技术手法，为的是让你看到世界上最真实的人生百态。</p>\n<h3 id=\"北邮60年-校庆官方宣传片《世界因你而改变》\"><a href=\"#北邮60年-校庆官方宣传片《世界因你而改变》\" class=\"headerlink\" title=\"北邮60年 | 校庆官方宣传片《世界因你而改变》\"></a><a href=\"https://mp.weixin.qq.com/s/WCsWBkx0VM8YHPpCCmsaqg\" target=\"_blank\" rel=\"noopener\">北邮60年 | 校庆官方宣传片《世界因你而改变》</a></h3><p>这部六十周年校庆官方宣传片思路新颖，通过纪录15级毕业生张浩用镜头重新审视母校，让大家了解到北邮的过去和今天。同时还包含很多校友采访及珍贵的老资料，让人们感受到北邮所肩负的“传邮万里、国脉所系”的历史使命和“大众创业、万众创新”的时代责任。</p>\n<h3 id=\"工作细胞\"><a href=\"#工作细胞\" class=\"headerlink\" title=\"工作细胞\"></a><a href=\"https://movie.douban.com/subject/28514091/\" target=\"_blank\" rel=\"noopener\">工作细胞</a></h3><p>豆瓣评分 9.2 分的岛国神作，<strong>无论是否喜欢看动漫，都很难不被《工作细胞》精准秒杀。</strong>网易云音乐《工作细胞》主题曲的评论区里，有人这样说：</p>\n<blockquote>\n<p>请记住，如果哪天不高兴或者是有很不好的想法，请记住这个身体里有37兆细胞还在为你辛勤工作着，他们一直在努力，请你也不要放弃</p>\n</blockquote>\n<p>这里有一篇介绍，可以提前看一下：<a href=\"https://mp.weixin.qq.com/s/DSWZsfKyeLd1OAs8EzyDSg\" target=\"_blank\" rel=\"noopener\">《岛国9.2高分神作！揭露身体的秘密，看完再也不忍心作践自己….》</a></p>\n<h3 id=\"林下生命\"><a href=\"#林下生命\" class=\"headerlink\" title=\"林下生命\"></a><a href=\"https://www.bilibili.com/bangumi/media/md20364/\" target=\"_blank\" rel=\"noopener\">林下生命</a></h3><blockquote>\n<p>看看怪异、可怕、美丽得令人吃惊的无脊椎动物的世界吧！和大卫·爱登堡一起，去开创性地探索一个我们从未见过、却一直围绕在我们周围的壮观的微观宇宙吧！它们不仅仅包括臭虫和昆虫，还有奇异的蝉、萤火虫、结网的蜘蛛和荧光色的蜻蜓——更不用说其它令人难以置信的生命形式和它们惊人的秘密行为了。幸亏有了照明、光学和计算机动作控制技术的革新，这个动荡不安、超级有组织的世界终于以其非凡居民的视角被揭开了面纱。这些动物可能极其微小，但它们的生活的确是宏伟壮观的……</p>\n</blockquote>\n<h3 id=\"珠峰清道夫\"><a href=\"#珠峰清道夫\" class=\"headerlink\" title=\"珠峰清道夫\"></a><a href=\"http://www.dlili.tv/gresource/3691\" target=\"_blank\" rel=\"noopener\">珠峰清道夫</a></h3><p>豆瓣评分<strong>9.0</strong>，这部纪录片讲述的是夏尔巴人从世界屋脊往下背尸体的故事！每年珠峰都会迎来7万至10万的旅客。而这里没有公共厕所，也没有集中排泄体内废物的场所，随地大小便的后果就是，留下12吨的屎和数不清的生活垃圾。珠峰上的清道夫们，他们用自己的双手，还珠峰一片雪白；</p>\n<blockquote>\n<p>用自己的生命，还人间一片净土。</p>\n</blockquote>\n<p>他们是平凡人，却做着不平凡的事情。珠峰清道夫们，在用生命告诉我们。请不要去玷污珠峰的神圣保护它比征服它更有意义！</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"【敖厂长】史上最垃圾游戏判明\"><a href=\"#【敖厂长】史上最垃圾游戏判明\" class=\"headerlink\" title=\"【敖厂长】史上最垃圾游戏判明!\"></a><a href=\"http://www.bilibili.com/video/av12719263/\" target=\"_blank\" rel=\"noopener\">【敖厂长】史上最垃圾游戏判明!</a></h3><p>被誉为“镇站之宝”的 Bilibili 视频，虽然完整的看下来之后只有佩服二字可言（因为从头到尾也没看懂说的是个啥），但是佩服就足够了，上一张伪封面图感受一下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_285.png\" alt=\"\"></div>\n\n<h3 id=\"2017-最火歌曲，YouTube-第一个浏览量达到-30-亿的MV\"><a href=\"#2017-最火歌曲，YouTube-第一个浏览量达到-30-亿的MV\" class=\"headerlink\" title=\"2017 最火歌曲，YouTube 第一个浏览量达到 30 亿的MV\"></a><a href=\"https://www.ixigua.com/a6454878191382168078/#mid=52142827529\" target=\"_blank\" rel=\"noopener\">2017 最火歌曲，YouTube 第一个浏览量达到 30 亿的MV</a></h3><p>RT，这首《despacito》是一首西语歌，发行于 2017 年 1 月 13 日，发行之后就收获了很多奖项：YouTube 网站上播放量最多、YouTube 上第一个浏览量达到30亿次的视频、YouTube 上最快达到 20 亿次浏览量的视频；当然，由于贾斯汀比伯的加入，让《despacito》更火了。其中这个剪辑视频的最后，当人们听到贾斯汀比伯的西语时的表情是一个亮点。。</p>\n<h3 id=\"3-分钟带你认识一夜爆火的“引力波”，目前最清楚明了的科普短片\"><a href=\"#3-分钟带你认识一夜爆火的“引力波”，目前最清楚明了的科普短片\" class=\"headerlink\" title=\"3 分钟带你认识一夜爆火的“引力波”，目前最清楚明了的科普短片\"></a><a href=\"https://mp.weixin.qq.com/s/DVbIbSpi3GDizTMIOvixIQ\" target=\"_blank\" rel=\"noopener\">3 分钟带你认识一夜爆火的“引力波”，目前最清楚明了的科普短片</a></h3><p>题目说明了一切。。</p>\n<h3 id=\"这样的旅行记录太酷了吧，像科幻大片\"><a href=\"#这样的旅行记录太酷了吧，像科幻大片\" class=\"headerlink\" title=\"这样的旅行记录太酷了吧，像科幻大片\"></a><a href=\"https://mp.weixin.qq.com/s/sG-mEth_NjYowsnviI00ZQ\" target=\"_blank\" rel=\"noopener\">这样的旅行记录太酷了吧，像科幻大片</a></h3><p>旅行记录做的非常酷</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"推荐","path":"api/tags/推荐.json"}]},{"title":"Merrier说还可以这样玩儿？！","slug":"Merrier说还可以这样玩儿？！","date":"2017-09-23T06:32:34.000Z","updated":"2019-01-29T09:23:55.532Z","comments":true,"path":"api/articles/Merrier说还可以这样玩儿？！.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_214.png","content":"<p>不知不觉，Merrier说 已经上线近半年了；前不久添加了 CNZZ 的统计代码，虽然 UV、PV 不是很多，但是发现老访客的比例还是比较高的，下面我介绍一个技巧——“<strong>把喜欢的网站添加到主屏幕，方便以后访问</strong>”，这样以后再想访问我的博客就会变得很简单了（当然，也可以用在其他喜欢的网站）</p>\n<h2 id=\"第一步，打开浏览器，访问Merrier说主页（http-merrier-wang）\"><a href=\"#第一步，打开浏览器，访问Merrier说主页（http-merrier-wang）\" class=\"headerlink\" title=\"第一步，打开浏览器，访问Merrier说主页（http://merrier.wang）\"></a>第一步，打开浏览器，访问Merrier说主页（<a href=\"http://merrier.wang\">http://merrier.wang</a>）</h2><p>我的手机是iOS的，目前发现<strong>只有safari</strong>才行</p>\n<h2 id=\"第二步，点击浏览器下方的“发送”按钮\"><a href=\"#第二步，点击浏览器下方的“发送”按钮\" class=\"headerlink\" title=\"第二步，点击浏览器下方的“发送”按钮\"></a>第二步，点击浏览器下方的“发送”按钮</h2><p>如下图红框处：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_214.png\" alt=\"\" width=\"300\"></div>\n\n<h2 id=\"第三步，找到“添加到主屏幕”按钮\"><a href=\"#第三步，找到“添加到主屏幕”按钮\" class=\"headerlink\" title=\"第三步，找到“添加到主屏幕”按钮\"></a>第三步，找到“添加到主屏幕”按钮</h2><p>如下图红框处，在靠下方位置（不要在意那个“宇宙第一美男”。。）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_215.png\" alt=\"\" width=\"300\"></div>\n\n<h2 id=\"最后一步，点击“添加”按钮即可\"><a href=\"#最后一步，点击“添加”按钮即可\" class=\"headerlink\" title=\"最后一步，点击“添加”按钮即可\"></a>最后一步，点击“添加”按钮即可</h2><p>由于wordpress本身就做了这方面的工作，所以当我们在上一步点击“添加到主屏幕”时，就会看到下面已经配置好的内容：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_216.png\" alt=\"\" width=\"300\"></div>\n\n<p>从上面的截图中可以看出，“添加到主屏幕”的结果是：一个图标将会添加到您的主屏幕，以便您快速访问此网站。</p>\n<h2 id=\"最终结果\"><a href=\"#最终结果\" class=\"headerlink\" title=\"最终结果\"></a>最终结果</h2><p>添加到主屏幕之后，我们就可以看到主屏幕上多了一个“很怪”的图标。。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_120.png\" alt=\"\" width=\"300\"></div>\n\n<p>以后直接点击 Merrier说 图标就可以访问我的博客啦~~！！</p>\n<h2 id=\"关于安卓\"><a href=\"#关于安卓\" class=\"headerlink\" title=\"关于安卓\"></a>关于安卓</h2><p>iOS 可以按照上面的步骤添加图标至主屏幕，安卓的话因为身边没有安卓手机，所以暂时不太了解有没有类似功能。。（据说安卓的 UC 浏览器中有类似的按钮？）</p>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"Merrier说","path":"api/tags/Merrier说.json"}]},{"title":"不想当诗人的程序员不是好工程师","slug":"不想当诗人的程序员不是好工程师","date":"2017-09-06T14:40:12.000Z","updated":"2019-01-29T09:23:55.532Z","comments":true,"path":"api/articles/不想当诗人的程序员不是好工程师.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>RT，作为一名程序员，如果会几首诗，那你就不是一名普通的程序员，而是一名</p>\n<p><strong>会几首诗的程序员</strong></p>\n<h2 id=\"一封情书（中文更惊艳）\"><a href=\"#一封情书（中文更惊艳）\" class=\"headerlink\" title=\"一封情书（中文更惊艳）\"></a>一封情书（中文更惊艳）</h2><blockquote>\n<p>I love three things in this world.<br>Sun, Moon and You.<br>Sun for morning,<br>Moon for night,<br>and You forever.</p>\n</blockquote>\n<p>中文版：</p>\n<blockquote>\n<p>浮世三千，吾爱有三。<br>日、月与卿。<br>日为朝，<br>月为暮，<br>卿为朝朝暮暮。</p>\n</blockquote>\n<p>另一个版本：</p>\n<blockquote>\n<p>浮世三千，挚爱有三。<br>喷薄朝阳，皓婉皎月；<br>不及汝尔，沧海桑田。</p>\n</blockquote>\n<h2 id=\"如果有来生\"><a href=\"#如果有来生\" class=\"headerlink\" title=\"如果有来生\"></a>如果有来生</h2><blockquote>\n<p>如果有来生，<br>要做一棵树，<br>站成永恒，没有悲欢的姿势。<br>一半在土里安详，一半在风里飞扬，<br>一半洒落阴凉，一半沐浴阳光，<br>非常沉默非常骄傲， 从不依靠从不寻找。</p>\n</blockquote>\n<h2 id=\"毛不易《消愁》\"><a href=\"#毛不易《消愁》\" class=\"headerlink\" title=\"毛不易《消愁》\"></a>毛不易《消愁》</h2><blockquote>\n<p>一杯敬朝阳，一杯敬月光；<br>一杯敬故乡，一杯敬远方；<br>一杯敬明天，一杯敬过往；<br>一杯敬自由，一杯敬死亡。</p>\n</blockquote>\n<h2 id=\"木心《从前慢》\"><a href=\"#木心《从前慢》\" class=\"headerlink\" title=\"木心《从前慢》\"></a>木心《从前慢》</h2><blockquote>\n<p>从前车马很慢，<br>书信很远，<br>一生只够爱一个人。</p>\n</blockquote>\n<h2 id=\"黑别人可不是好孩子\"><a href=\"#黑别人可不是好孩子\" class=\"headerlink\" title=\"黑别人可不是好孩子\"></a><a href=\"http://mp.weixin.qq.com/s/Qz17OFqQ_bcrqhG82d-q9A\" target=\"_blank\" rel=\"noopener\">黑别人可不是好孩子</a></h2><blockquote>\n<p>从一而终薛之谦<br>百年贤妻翟欣欣<br>下周回国贾跃亭<br>真爱无敌邓文迪<br>遵纪守法郎咸平<br>西门官人王宝强</p>\n</blockquote>\n<h2 id=\"来自网易云音乐《起风了（Cover-高橋優）》评论\"><a href=\"#来自网易云音乐《起风了（Cover-高橋優）》评论\" class=\"headerlink\" title=\"来自网易云音乐《起风了（Cover 高橋優）》评论\"></a>来自<a href=\"http://music.163.com/#/song?id=461525011\" target=\"_blank\" rel=\"noopener\">网易云音乐《起风了（Cover 高橋優）》</a>评论</h2><blockquote>\n<p>我是个俗气至顶的人，见山是山，见海是海，见花便是花。<br>唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。<br>你无需开口，我和天地万物便通通奔向你。<br>曾经我自诩半个诗人，见山是深情伟岸，见海是热情澎湃，见花见草信他们皆有故事，云海江潮，虫鸣鸟啼都暗藏情愫。<br>唯独见了你，山川沉默，海面静谧，云海不再翻涌，江潮不再澎湃，花鸟鱼虫被光与尘凝固，世界万籁俱寂，只剩下你。</p>\n</blockquote>\n<h2 id=\"梁启超《少年中国说》\"><a href=\"#梁启超《少年中国说》\" class=\"headerlink\" title=\"梁启超《少年中国说》\"></a>梁启超《少年中国说》</h2><blockquote>\n<p>故今日之责任，不在他人，而全在我少年。<br>少年智则国智，少年富则国富；<br>少年强则国强，少年独立则国独立；<br>少年自由则国自由；少年进步则国进步；<br>少年胜于欧洲，则国胜于欧洲；<br>少年雄于地球，则国雄于地球。<br>红日初升，其道大光。<br>河出伏流，一泻汪洋。<br>潜龙腾渊，鳞爪飞扬。<br>乳虎啸谷，百兽震惶。<br>鹰隼试翼，风尘翕张。<br>奇花初胎，矞矞皇皇。<br>干将发硎，有作其芒。<br>天戴其苍，地履其黄。<br>纵有千古，横有八荒。<br>前途似海，来日方长。<br>美哉我少年中国，与天不老！<br>壮哉我中国少年，与国无疆！</p>\n</blockquote>\n<h2 id=\"《侠客行》\"><a href=\"#《侠客行》\" class=\"headerlink\" title=\"《侠客行》\"></a>《侠客行》</h2><blockquote>\n<p>十步杀一人，<br>千里不留行。<br>事了拂衣去，<br>深藏身与名。</p>\n</blockquote>\n<h2 id=\"《横渠四句》\"><a href=\"#《横渠四句》\" class=\"headerlink\" title=\"《横渠四句》\"></a>《横渠四句》</h2><blockquote>\n<p>为天地立心，<br>为生民立命，<br>为往圣继绝学，<br>为万世开太平</p>\n</blockquote>\n<h2 id=\"《寻李白》\"><a href=\"#《寻李白》\" class=\"headerlink\" title=\"《寻李白》\"></a>《寻李白》</h2><blockquote>\n<p>酒入豪肠，七分酿成了月光<br>余下的三分啸成剑气<br>绣口一吐，就半个盛唐</p>\n</blockquote>\n<h2 id=\"龙应台《目送》\"><a href=\"#龙应台《目送》\" class=\"headerlink\" title=\"龙应台《目送》\"></a>龙应台《目送》</h2><blockquote>\n<p>很多时候不是我们去看父母的背影<br>而是承受他们追逐的目光，<br>承受他们不舍的，<br>不放心的，满眼的目送。<br>最后才渐渐明白，<br>这个世界上，再也没有任何人，<br>可以像父母一样，爱我如生命。</p>\n</blockquote>\n<h2 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网\"></a>互联网</h2><blockquote>\n<p>产品有三宝，弹窗，浮层加引导；<br>设计有三宝，透明，阴影加圆角；<br>运营有三宝，短信，推送加红包；<br>程序员有一宝，这个做不了。</p>\n</blockquote>\n<h2 id=\"卧春（我蠢）\"><a href=\"#卧春（我蠢）\" class=\"headerlink\" title=\"卧春（我蠢）\"></a>卧春（我蠢）</h2><p>暗梅幽闻花，（俺没有文化，）<br>卧枝伤恨底。（我智商很低。）<br>遥闻卧似水，（要问我是谁，）<br>易透达春绿。（一头大蠢驴。）<br>岸似绿，（俺是驴，）<br>岸似透绿，（俺是头驴，）<br>岸似透黛绿。 （俺是头呆驴。）</p>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"life","path":"api/tags/life.json"}]},{"title":"Mac下的效率工具autojump","slug":"Mac下的效率工具autojump","date":"2017-08-30T13:09:31.000Z","updated":"2019-01-29T09:23:55.532Z","comments":true,"path":"api/articles/Mac下的效率工具autojump.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先，这篇文章的封面图是我随便找的，好像是一个游戏的名字。。但是就连 <a href=\"https://github.com/wting/autojump\" target=\"_blank\" rel=\"noopener\">autojump的github</a> 上面都没有一张图片，所以我也很无奈啊~</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>autojump 是干什么的呢？从它的名字能看出来，它的功能类似“<strong>自动跳转</strong>”，比如我们之前曾经访问过一个目录：<code>/Users/frontend/repos/mineProject</code>，现在我们通过简单的一条指令：autojump mine 就可以跳转到这个目录（注意：我们在任意位置都可以跳），autojump 它自己是这么描述的：</p>\n<blockquote>\n<p>autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line.</p>\n</blockquote>\n<p>autojump 就是通过记录你在 history 中的行为把你访问过的文件夹路径都 cache 下来，然后当你输入指令时再读取 cache 文件(<strong>/Users/frontend/Library/autojump/autojump.txt</strong>)，它还有一个快捷方式：<code>j mine</code>，总而言之，这个小工具可以让你游荡于文件夹之间不费吹灰之力！</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"首先，安装-homebrew\"><a href=\"#首先，安装-homebrew\" class=\"headerlink\" title=\"首先，安装 homebrew\"></a>首先，安装 homebrew</h3><p>homebrew 是 mac 上的一个软件包管理器，可以通过如下方式进行安装（粘贴至终端即可）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>更多关于 homebrew 的介绍可以查看<a href=\"https://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">它的官网</a></p>\n<h3 id=\"然后，安装-zsh\"><a href=\"#然后，安装-zsh\" class=\"headerlink\" title=\"然后，安装 zsh\"></a>然后，安装 zsh</h3><p>给大家讲个笑话：</p>\n<blockquote>\n<p>Zsh 全称为 Z Shell，因为 Z 是最后一个字母，因此大家称之为——终极 Shell。</p>\n</blockquote>\n<p>我们可以通过 brew 安装 zsh：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-autojump\"><a href=\"#安装-autojump\" class=\"headerlink\" title=\"安装 autojump\"></a>安装 autojump</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install autojump</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-zshrc\"><a href=\"#配置-zshrc\" class=\"headerlink\" title=\"配置 .zshrc\"></a>配置 .zshrc</h3><p>在 <code>~/.zshrc</code> 中编辑以下内容：<code>plugins=(autojump)</code>，当然，如果你有其他 zsh 插件比如 git，直接在后面添加即可：<code>plugins=(git autojump)</code>。然后继续在 .zshrc 文件中添加如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[\\[ -s $(brew --prefix)/etc/profile.d/autojump.sh \\]\\] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>\n<p>还剩最后一步，使刚才的更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>Enjoy coding:)</p>\n<h2 id=\"其他可能错误\"><a href=\"#其他可能错误\" class=\"headerlink\" title=\"其他可能错误\"></a>其他可能错误</h2><h3 id=\"zshrc-3-command-not-found-M\"><a href=\"#zshrc-3-command-not-found-M\" class=\"headerlink\" title=\".zshrc:3: command not found: ^M\"></a>.zshrc:3: command not found: ^M</h3><blockquote>\n<p>The temporary solution to that is changing your core.autocrlf git config setting to use input, given that you are on OSX. See <a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/4402#issuecomment-143976458\" target=\"_blank\" rel=\"noopener\">#4402 (comment)</a>.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ZSH</span> </span><br><span class=\"line\">git config core.autocrlf input </span><br><span class=\"line\">git rm --cached -r . </span><br><span class=\"line\">git reset --hard</span><br></pre></td></tr></table></figure>\n<h3 id=\"PATH-set-to-RVM-ruby-but-GEM-HOME-and-or-GEM-PATH-not-set\"><a href=\"#PATH-set-to-RVM-ruby-but-GEM-HOME-and-or-GEM-PATH-not-set\" class=\"headerlink\" title=\"PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set\"></a>PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set</h3><blockquote>\n<p><a href=\"https://github.com/rvm/rvm/issues/3212\" target=\"_blank\" rel=\"noopener\">PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set</a> Add RVM set at <code>~/.zshrc</code>:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/.rvm/bin\"</span> <span class=\"comment\"># Add RVM to PATH for scripting</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.barretlee.com/blog/2015/03/30/autojump-in-mac/\" target=\"_blank\" rel=\"noopener\">Mac下的效率工具autojump</a></li>\n<li><a href=\"http://www.jianshu.com/p/5ced5876cba4\" target=\"_blank\" rel=\"noopener\">mac终端快速启动Sublime/WebStrom/VS Code/Atom等编辑器</a></li>\n<li><a href=\"http://www.jianshu.com/p/0d265d9f914b\" target=\"_blank\" rel=\"noopener\">MacOS X 安装 oh-my-zsh autojump</a></li>\n</ul>\n","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"mac","path":"api/tags/mac.json"},{"name":"autojump","path":"api/tags/autojump.json"}]},{"title":"网罗天下好教程","slug":"网罗天下好教程","date":"2017-08-27T07:56:15.000Z","updated":"2019-01-29T09:23:55.540Z","comments":true,"path":"api/articles/网罗天下好教程.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总结了一下我看过的好的教程，多数为系列文章，鉴于如今信息鱼龙混杂，这篇文章可以省去很多找好教程的时间。</p>\n<h2 id=\"入门级\"><a href=\"#入门级\" class=\"headerlink\" title=\"入门级\"></a>入门级</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><h4 id=\"手把手教你使用Hexo-Github-Pages搭建个人独立博客\"><a href=\"#手把手教你使用Hexo-Github-Pages搭建个人独立博客\" class=\"headerlink\" title=\"手把手教你使用Hexo + Github Pages搭建个人独立博客\"></a><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"noopener\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></h4><p>很完整很详细的 Hexo 搭建个人博客教程</p>\n<h4 id=\"从0到1搭建和部署个人博客\"><a href=\"#从0到1搭建和部署个人博客\" class=\"headerlink\" title=\"从0到1搭建和部署个人博客\"></a><a href=\"https://juejin.im/post/5ae170e1f265da0b7527d0dc\" target=\"_blank\" rel=\"noopener\">从0到1搭建和部署个人博客</a></h4><p>此教程会教你从 0 到 1 搭建一个完整的博客，包括前端展示页、后台管理系统、后端接口及接口文档、服务端部署整个完整流程。技术栈是 vue+express+mongodb</p>\n<h4 id=\"Hexo-主题开发指南\"><a href=\"#Hexo-主题开发指南\" class=\"headerlink\" title=\"Hexo 主题开发指南\"></a><a href=\"http://chensd.com/2016-06/hexo-theme-guide.html\" target=\"_blank\" rel=\"noopener\">Hexo 主题开发指南</a></h4><p>该文章包含的内容如下：</p>\n<ul>\n<li>主题的基本结构</li>\n<li>常见问题</li>\n<li>常用页面的实现</li>\n<li>基本工具</li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"CSS布局说——可能是最全的\"><a href=\"#CSS布局说——可能是最全的\" class=\"headerlink\" title=\"CSS布局说——可能是最全的\"></a><a href=\"https://segmentfault.com/a/1190000011358507\" target=\"_blank\" rel=\"noopener\">CSS布局说——可能是最全的</a></h4><p>其实很多时候，我们都会在布局上花费很多时间，尤其是遇到一个比较“严格”的设计师的时候，而 css 虽然语法简单（css 有语法？），但是真正用起来会有很多学问，而布局这种问题是老生常谈的问题了，这篇来自 SegmentFault的文章对 css 中的布局的相关知识进行了总结，满满的干货。</p>\n<h4 id=\"CSS-中重要的层叠概念\"><a href=\"#CSS-中重要的层叠概念\" class=\"headerlink\" title=\"CSS 中重要的层叠概念\"></a><a href=\"https://juejin.im/post/5ba4efe36fb9a05cf52ac192\" target=\"_blank\" rel=\"noopener\">CSS 中重要的层叠概念</a></h4><p>作者参考了很多关于层叠概念的文章，对这一经常迷糊的概念进行了全面总结，讲解的非常清晰全面，是我看过的讲层叠概念最好的文章，十分值得一看！</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><h4 id=\"JavaScript-标准参考教程（alpha）\"><a href=\"#JavaScript-标准参考教程（alpha）\" class=\"headerlink\" title=\"JavaScript 标准参考教程（alpha）\"></a><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程（alpha）</a></h4><p>阮一峰的 JS 教程，内容很多，而且讲解的很详细，很透彻，是一篇不错的 JS 入门教程。</p>\n<h4 id=\"如何定义一个高逼格的原生JS插件\"><a href=\"#如何定义一个高逼格的原生JS插件\" class=\"headerlink\" title=\"如何定义一个高逼格的原生JS插件\"></a><a href=\"https://juejin.im/entry/5ae033d86fb9a07ac76e7bcc\" target=\"_blank\" rel=\"noopener\">如何定义一个高逼格的原生JS插件</a></h4><p>作者通过很多实例介绍了如何定义自己的 JS 插件，包含了很多方面和技巧</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><h4 id=\"七天学会node-js\"><a href=\"#七天学会node-js\" class=\"headerlink\" title=\"七天学会node.js\"></a><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">七天学会node.js</a></h4><p>这是一篇比较详细的 node.js 入门教程，但是我确实没有七天就学会。。</p>\n<h4 id=\"node-js之fs模块\"><a href=\"#node-js之fs模块\" class=\"headerlink\" title=\"node.js之fs模块\"></a><a href=\"https://www.jianshu.com/p/5683c8a93511\" target=\"_blank\" rel=\"noopener\">node.js之fs模块</a></h4><p>fs 模块是 node.js 中一个很重要的模块，其提供了文件相关操作，包括打开、读取、写入和追加等等操作</p>\n<h4 id=\"Express-4-入门中文手册\"><a href=\"#Express-4-入门中文手册\" class=\"headerlink\" title=\"Express 4 入门中文手册\"></a><a href=\"https://www.zybuluo.com/bajian/note/444152\" target=\"_blank\" rel=\"noopener\">Express 4 入门中文手册</a></h4><p>最近在做 node  相关的项目，express 之前接触过，但是基本上一点印象都没有留下。。然后 express 的英文文档从布局和样式上就给人一种不想看的感觉，同时我的英语水平也很差，所以就在网上找了很久的中文文档，最终追根溯源找到了上面这篇，无法评价好坏，因为有就不错了嘛~</p>\n<h4 id=\"Redux中文文档\"><a href=\"#Redux中文文档\" class=\"headerlink\" title=\"Redux中文文档\"></a><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux中文文档</a></h4><p>在线 gitbook，有很多实例，是一个很不过的 redux 入门文档（我就是通过看这个文档入门的~）</p>\n<h4 id=\"Redux从设计到源码\"><a href=\"#Redux从设计到源码\" class=\"headerlink\" title=\"Redux从设计到源码\"></a><a href=\"https://tech.meituan.com/redux-design-code.html\" target=\"_blank\" rel=\"noopener\">Redux从设计到源码</a></h4><p>这也是一篇 Redux 入门教程，虽然比不上上面的教程，但是这篇文章里面的某些图片画的还是相当不错的，可以当做补充资料</p>\n<h4 id=\"react-starter-kit-入门（翻译）\"><a href=\"#react-starter-kit-入门（翻译）\" class=\"headerlink\" title=\"react-starter-kit 入门（翻译）\"></a><a href=\"http://www.jianshu.com/p/6c522c9a20cb\" target=\"_blank\" rel=\"noopener\">react-starter-kit 入门（翻译）</a></h4><p>starter-kit 的教程实在太少了，只找到了这一篇中文的，就先凑合看吧，具体写的好不好可以先睹为快，因为篇幅比较短，而且 starter-kit 本来就是一个脚手架，还是需要了解其他技术栈才能真正看懂</p>\n<h4 id=\"React-Router官方教程\"><a href=\"#React-Router官方教程\" class=\"headerlink\" title=\"React Router官方教程\"></a><a href=\"https://github.com/reactjs/react-router-tutorial\" target=\"_blank\" rel=\"noopener\">React Router官方教程</a></h4><p>官方给出的 react-router 入门文档，通过14个实例一步步进行讲解，由浅入深，由易到难，只需要一个多小时就可以跟着文档写完 14 个实例，同时在写的过程中还可以学习到 express 和 webpack 的相关知识。</p>\n<h4 id=\"Redux作者出的教学视频\"><a href=\"#Redux作者出的教学视频\" class=\"headerlink\" title=\"Redux作者出的教学视频\"></a><a href=\"https://egghead.io/instructors/dan-abramov\" target=\"_blank\" rel=\"noopener\">Redux作者出的教学视频</a></h4><p>Redux 作者自己在 egghead.io 上面上传了教学视频，墙裂推荐，不过全程英文讲解，可能会有点费劲- -：</p>\n<ul>\n<li>基础篇：<a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"noopener\">Getting Started with Redux</a></li>\n<li>进阶篇：<a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" target=\"_blank\" rel=\"noopener\">Building React Applications with Idiomatic Redux</a></li>\n</ul>\n<h4 id=\"从零开始学-ReactJS（ReactJS-101）\"><a href=\"#从零开始学-ReactJS（ReactJS-101）\" class=\"headerlink\" title=\"从零开始学 ReactJS（ReactJS 101）\"></a><a href=\"https://github.com/carlleton/reactjs101/tree/zh-CN\" target=\"_blank\" rel=\"noopener\">从零开始学 ReactJS（ReactJS 101）</a></h4><p>从零开始学 ReactJS（ReactJS 101）是一本希望让初学者一看就懂的 ReactJS 中文入门教学书，由浅入深学习 ReactJS 生态系 (Flux, Redux, React Router, ImmutableJS, React Native, Relay/GraphQL etc.)。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h4 id=\"入门Webpack，看这篇就够了\"><a href=\"#入门Webpack，看这篇就够了\" class=\"headerlink\" title=\"入门Webpack，看这篇就够了\"></a><a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></h4><p>进度条说明了一切，作者通过对比 gulp 和 webpack，详细的介绍了 webpack 的优缺点，同时还介绍了一些其他工具的用法，虽然篇幅较长，但是大部分都是代码，可以跟着作者自己敲一遍，相信敲完之后的你可以自信的说 webpack 我终(hai)于(shi)会(bu)了(hui)</p>\n<h4 id=\"webpack-2-打包实战\"><a href=\"#webpack-2-打包实战\" class=\"headerlink\" title=\"webpack 2 打包实战\"></a><a href=\"https://github.com/fenivana/webpack-in-action/\" target=\"_blank\" rel=\"noopener\">webpack 2 打包实战</a></h4><p>这是一篇对于 webpack 2 的讲解，作者通过追根溯源向我们阐述了为什么需要 webpack，作为历史的产物， webpack 具备哪些优势，文章篇幅较长，不过弥补了 webpack 官方文档写的很差的缺陷，是一篇比较不错的 webpack 入门文档</p>\n<h4 id=\"令人困惑的webpack之entry\"><a href=\"#令人困惑的webpack之entry\" class=\"headerlink\" title=\"令人困惑的webpack之entry\"></a><a href=\"https://segmentfault.com/a/1190000008288240\" target=\"_blank\" rel=\"noopener\">令人困惑的webpack之entry</a></h4><p>鉴于 webpack 的文档实在太差，而 webpack 本身又比较复杂，各种 loader，各种 plugin，各种配置，所以刚接触 webpack 的童鞋会感到很头疼，而 entry 作为 webpack 中最基础的配置，可以作为入门 webpack 的关键点，这篇文章非常详细的介绍了 entry 配置项的作用以及参数含义</p>\n<h4 id=\"用grunt搭建自动化的web前端开发环境-完整教程\"><a href=\"#用grunt搭建自动化的web前端开发环境-完整教程\" class=\"headerlink\" title=\"用grunt搭建自动化的web前端开发环境-完整教程\"></a><a href=\"http://developer.51cto.com/art/201506/479127.htm\" target=\"_blank\" rel=\"noopener\">用grunt搭建自动化的web前端开发环境-完整教程</a></h4><p>jQuery 在使用 grunt，bootstrap 在使用 grunt，百度 UEditor 在使用 grunt，你没有理由不学、不用！</p>\n<h4 id=\"Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\"><a href=\"#Sublime-Text-2-性感无比的代码编辑器！程序员必备神器！\" class=\"headerlink\" title=\"Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！\"></a><a href=\"http://www.iplaysoft.com/sublimetext.html\" target=\"_blank\" rel=\"noopener\">Sublime Text 2 - 性感无比的代码编辑器！程序员必备神器！</a></h4><p>这是一篇比较全的 sublime 介绍文章，作者介绍了很多 sublime 的特性和优点，同时还推荐了一些插件和使用技巧。</p>\n<h4 id=\"浅入浅出webpack\"><a href=\"#浅入浅出webpack\" class=\"headerlink\" title=\"浅入浅出webpack\"></a><a href=\"https://juejin.im/post/5afa9cd0f265da0b981b9af9\" target=\"_blank\" rel=\"noopener\">浅入浅出webpack</a></h4><p>webpack 作为一个非常流行的构建工具，其文档和使用一直为人所诟病，而当我真正的自己对 webpack 进行了了解和实战之后，发现其实 webpack 并不是那么难理解，而很多童鞋其实是因为 webpack 的功能太强大而对其产生了畏惧，这篇文章对这部分童鞋来说是一篇很好的教程，从基本使用的角度对 webpack 进行了介绍和讲解，除此之外还介绍一些高阶应用，如 TreeShaking、构建 PWA 应用等</p>\n<h4 id=\"iOS开发工具——网络封包分析工具Charles\"><a href=\"#iOS开发工具——网络封包分析工具Charles\" class=\"headerlink\" title=\"iOS开发工具——网络封包分析工具Charles\"></a><a href=\"http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles\" target=\"_blank\" rel=\"noopener\">iOS开发工具——网络封包分析工具Charles</a></h4><p><a href=\"http://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a> 是在 Mac 下常用的截取网络封包的工具。Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。作者在该教程中介绍了安装 Charles、安装SSL证书、将Charles设置成系统代理、过滤网络请求、截取 iPhone 上的网络封包、截取 SSL 信息、模拟慢速网络、修改网络请求内容等内容。</p>\n<h4 id=\"webpack-教程资源收集\"><a href=\"#webpack-教程资源收集\" class=\"headerlink\" title=\"webpack 教程资源收集\"></a><a href=\"https://github.com/kraaas/webpack-tutorial-collection\" target=\"_blank\" rel=\"noopener\">webpack 教程资源收集</a></h4><p>作者收集总结了关于 webpack 的各种教程，大概共有 50 篇文章。</p>\n<h4 id=\"运营小白带你5分钟入门谷歌分析-GA\"><a href=\"#运营小白带你5分钟入门谷歌分析-GA\" class=\"headerlink\" title=\"运营小白带你5分钟入门谷歌分析(GA)\"></a><a href=\"https://mp.weixin.qq.com/s/oJv0cOl71VfUW_Q2RUzChA\" target=\"_blank\" rel=\"noopener\">运营小白带你5分钟入门谷歌分析(GA)</a></h4><p>主要通过截图的方式简单介绍了如何使用 GA 进行数据分析，以及 GA 都有哪些功能。</p>\n<h4 id=\"全网最贴心的webpack4系列中文教程和配套代码\"><a href=\"#全网最贴心的webpack4系列中文教程和配套代码\" class=\"headerlink\" title=\"全网最贴心的webpack4系列中文教程和配套代码\"></a><a href=\"https://github.com/dongyuanxin/webpack-demos\" target=\"_blank\" rel=\"noopener\">全网最贴心的webpack4系列中文教程和配套代码</a></h4><p>作者花费了 3 个多月整理了这份教程，一共分成 16 节，每节都有讲解，并且准备了配套代码。</p>\n<h3 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h3><h4 id=\"同构-Isomorphic-web-是什么鬼？\"><a href=\"#同构-Isomorphic-web-是什么鬼？\" class=\"headerlink\" title=\"同构(Isomorphic) web 是什么鬼？\"></a><a href=\"http://www.jianshu.com/p/5ce23647e7e3\" target=\"_blank\" rel=\"noopener\">同构(Isomorphic) web 是什么鬼？</a></h4><p>同构这个概念最近比较火，相比 SPA，同构会有其独特的优势，作者用非常简短的语言介绍了同构产生的背景和如何将自己的网站改造为同构 web。</p>\n<h4 id=\"再不懂区块链，你就OUT了！\"><a href=\"#再不懂区块链，你就OUT了！\" class=\"headerlink\" title=\"再不懂区块链，你就OUT了！\"></a><a href=\"http://jingyan.baidu.com/zt/qukuailian/index.html\" target=\"_blank\" rel=\"noopener\">再不懂区块链，你就OUT了！</a></h4><p>区块链从 15 年到 17 年，但是你却任对区块链一知半解，百度经验联合火币网打造讲解区块链的系列小动画《区块链100问》 ，将抽象的区块链概念转化为100集轻松易懂的 1 分钟小动画，每集学懂一个知识点~</p>\n<h4 id=\"快乐的Linux命名行\"><a href=\"#快乐的Linux命名行\" class=\"headerlink\" title=\"快乐的Linux命名行\"></a><a href=\"http://billie66.github.io/TLCL/book/\" target=\"_blank\" rel=\"noopener\">快乐的Linux命名行</a></h4><p><a href=\"http://linuxcommand.org/\" target=\"_blank\" rel=\"noopener\">The Linux Command Line</a> 的中文版，一个文科生说他看完这个都会 Linux 了</p>\n<h4 id=\"HTTPS-的故事\"><a href=\"#HTTPS-的故事\" class=\"headerlink\" title=\"HTTPS 的故事\"></a><a href=\"https://juejin.im/post/5b10aa22e51d4506c5568f1d\" target=\"_blank\" rel=\"noopener\">HTTPS 的故事</a></h4><p>作者缘于在 Twitter 上看到的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fmedium.freecodecamp.org%2Fhttps-explained-with-carrier-pigeons-7029d2193351\" target=\"_blank\" rel=\"noopener\">HTTPS explained with carrier pigeons</a>，原作者用很简单的故事就把 HTTP / HTTPS 的传输过程讲解的很清楚。 借原文的意思，该作者重新写了这个故事，加上了一些配图和补充，很形象的解释了为什么要有https以及如何实现。</p>\n<h4 id=\"JS-函数式编程指南\"><a href=\"#JS-函数式编程指南\" class=\"headerlink\" title=\"JS 函数式编程指南\"></a><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></h4><p>这是<em><a href=\"https://github.com/DrBoolean/mostly-adequate-guide\" target=\"_blank\" rel=\"noopener\">mostly-adequate-guide</a></em>的中文版，可以说是最好的\b函数式编程书籍，作者还非常有心的提供了 EPUB 和 MOBI 格式的下载。</p>\n<h4 id=\"Bash-脚本-set-命令教程\"><a href=\"#Bash-脚本-set-命令教程\" class=\"headerlink\" title=\"Bash 脚本 set 命令教程\"></a><a href=\"http://www.ruanyifeng.com/blog/2017/11/bash-set.html\" target=\"_blank\" rel=\"noopener\">Bash 脚本 set 命令教程</a></h4><p>阮一峰老师写的教程，也是一些大牛推荐的 set 命令教程，文章短小精悍，基本上把 set 命令相关的所有知识都涵盖了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"npm-scripts-使用指南\"><a href=\"#npm-scripts-使用指南\" class=\"headerlink\" title=\"npm scripts 使用指南\"></a><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener\">npm scripts 使用指南</a></h4><p>阮一峰讲解的 npm script 入门知识，关于 npm script 首推这篇文章</p>\n<h4 id=\"Linux大棚版Thrift入门教程\"><a href=\"#Linux大棚版Thrift入门教程\" class=\"headerlink\" title=\"Linux大棚版Thrift入门教程\"></a><a href=\"http://roclinux.cn/?p=3316\" target=\"_blank\" rel=\"noopener\">Linux大棚版Thrift入门教程</a></h4><p>thrift 作为一种 RPC 框架，其诞生以来就受到了广泛关注，虽然 RPC 框架有很多种，但是 thrift 还是有其独特优势的，这篇入门教程篇幅较长，作者介绍了 thrift 的基础概念，同时通过实例介绍了如何应用 thrift，比其他教程要详细很多。</p>\n<h4 id=\"Shell脚本编程30分钟入门\"><a href=\"#Shell脚本编程30分钟入门\" class=\"headerlink\" title=\"Shell脚本编程30分钟入门\"></a><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\" target=\"_blank\" rel=\"noopener\">Shell脚本编程30分钟入门</a></h4><p>前端工程师和 shell 打交道会比较少，但是知道一些往往会节省自己很多时间，比如定时备份、定时提交修改神马的，这篇文章虽然看上去有点“标题党”的意思，但是作者介绍的还算详细，同时作者还有一些其他类型的“30 分钟教程”，也可以看一看（作者是多么喜欢30分钟这个时间段啊。。）</p>\n<h4 id=\"Docker-入门\"><a href=\"#Docker-入门\" class=\"headerlink\" title=\"Docker 入门\"></a><a href=\"http://www.jianshu.com/p/d4f24f8012fd\" target=\"_blank\" rel=\"noopener\">Docker 入门</a></h4><p>Docker 是一个非常有趣的项目。它最大的作用就是隔绝了操作系统环境，类似于虚拟机，但是相对于虚拟机，他又拥有绝对的高效率、和通用性。相信看完这篇文章之后，你会对docker有一个直观的认识= =</p>\n<h4 id=\"图说设计模式\"><a href=\"#图说设计模式\" class=\"headerlink\" title=\"图说设计模式\"></a><a href=\"\bhttp://design-patterns.readthedocs.io/zh_CN/latest/index.html\">图说设计模式</a></h4><p>通过画图的方式理解设计模式，以一种轻松的姿势理解高深的学问。</p>\n<h4 id=\"Go-指南\"><a href=\"#Go-指南\" class=\"headerlink\" title=\"Go 指南\"></a><a href=\"https://tour.go-zh.org/list\" target=\"_blank\" rel=\"noopener\">Go 指南</a></h4><p>该指南介绍了 Go 的大部分重要特性，同时有一些练习进行巩固。</p>\n<h4 id=\"centos-6-7安装最新版-git\"><a href=\"#centos-6-7安装最新版-git\" class=\"headerlink\" title=\"centos 6.7安装最新版 git\"></a><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7安装最新版 git</a></h4><p>阿里云上的 ECS 很多人都会选择 CentOS 系统，而作为前端，可能需要安装 nvm，但是 CentOS 6.7 默认安装的 git 版本是比较低的 1.7.1 版本，所以需要重新安装最新版 git，这篇教程讲的很详细，我按照他的步骤很顺利的就安装成功了。</p>\n<h4 id=\"Jenkins-nginx-搭建前端构建环境\"><a href=\"#Jenkins-nginx-搭建前端构建环境\" class=\"headerlink\" title=\"Jenkins+nginx 搭建前端构建环境\"></a><a href=\"https://juejin.im/post/5b371678f265da599f68dfa2\" target=\"_blank\" rel=\"noopener\">Jenkins+nginx 搭建前端构建环境</a></h4><p>废话很少，直接上代码的方式我很喜欢，Jenkins 解决了很令人头疼的构建问题，所以如果想成为一名称职的前端工程师，这是一篇值得参考和手巧的教程，赶快跟着作者的手速敲起来吧！</p>\n<h4 id=\"技术胖-155-集前端视频教程\"><a href=\"#技术胖-155-集前端视频教程\" class=\"headerlink\" title=\"技术胖 155 集前端视频教程\"></a><a href=\"https://juejin.im/post/5a5bc8c36fb9a01ca26774eb\" target=\"_blank\" rel=\"noopener\">技术胖 155 集前端视频教程</a></h4><p>技术胖在 2017 年录制的 155 集视频教程，可以免费观看，其中包括 Vue2.x、Vue-cli、Vue-router、vuex、Vue实战、weex、ES6、React基础、React全家桶、Koa2.x、Fabric.js 和 CocosCreater 实战教程等。</p>\n<h2 id=\"进阶级\"><a href=\"#进阶级\" class=\"headerlink\" title=\"进阶级\"></a>进阶级</h2><h4 id=\"深入理解JSON\"><a href=\"#深入理解JSON\" class=\"headerlink\" title=\"深入理解JSON\"></a><a href=\"https://mp.weixin.qq.com/s/CQKFfecqy3_EgW0jLfEMIQ\" target=\"_blank\" rel=\"noopener\">深入理解JSON</a></h4><p>作者将 JSON 和 JS 中的 JSON 都梳理了一遍，也对里面的细节和注意点进行了一次遍历，从中我们能够知道 JSON 是一种语法上衍生于JS语言的一种轻量级的数据交换格式，也会明白 JSON 相对于一般的JS数据结构（尤其是对象）的差别；除此之外，作者更进一步地仔细讨论了 JS 中关于 JSON 处理的 3 个函数和细节。</p>\n<h4 id=\"通用-CSS-笔记、建议与指导\"><a href=\"#通用-CSS-笔记、建议与指导\" class=\"headerlink\" title=\"通用 CSS 笔记、建议与指导\"></a><a href=\"https://github.com/chadluo/CSS-Guidelines/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">通用 CSS 笔记、建议与指导</a></h4><p>作者总结了 CSS 的相关规范，但是建议下面腾讯 AlloyTeam 总结的那篇。。</p>\n<h4 id=\"前端规范总结-AlloyTeam\"><a href=\"#前端规范总结-AlloyTeam\" class=\"headerlink\" title=\"前端规范总结-AlloyTeam\"></a><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">前端规范总结-AlloyTeam</a></h4><p>腾讯 AlloyTeam 通过分析 github 代码库总结出来的工程师代码书写习惯，内容很全很详细，值得一看！</p>\n<h4 id=\"CSS进阶系列\"><a href=\"#CSS进阶系列\" class=\"headerlink\" title=\"CSS进阶系列\"></a><a href=\"http://www.cnblogs.com/coco1s/category/833837.html\" target=\"_blank\" rel=\"noopener\">CSS进阶系列</a></h4><p>通过作者的 github，可以看出来这是一位腾讯的大牛，作者通过 CSS 实现了很多复杂的效果，其中有些例子是《CSS揭秘》这本书里面的，这本书也是我之前强烈推荐大家看的一本 CSS 进阶书籍。</p>\n<h4 id=\"简书-前端基础进阶系列\"><a href=\"#简书-前端基础进阶系列\" class=\"headerlink\" title=\"简书-前端基础进阶系列\"></a><a href=\"http://www.jianshu.com/p/cd3fee40ef59\" target=\"_blank\" rel=\"noopener\">简书-前端基础进阶系列</a></h4><p>作者叫“波同学”，我之前是从来没有听说过作者大名的，但是读过作者这一系列的文章之后对作者的前端能力很是钦佩，同时作者的讲解能力也很强，将一些别人讲的晦涩难懂的原理讲的很透彻，十分推荐大家认真阅读一下作者这一系列的文章，我相信你看完之后你的前端水平会有很大的提升</p>\n<blockquote>\n<p>更新于2017-01-26：波同学将自己在简书上的文章都迁移到了<a href=\"https://yangbo5207.github.io/wutongluo/\" target=\"_blank\" rel=\"noopener\">自己的Gitbook</a>上</p>\n</blockquote>\n<h4 id=\"深入理解-JavaScript-系列\"><a href=\"#深入理解-JavaScript-系列\" class=\"headerlink\" title=\"深入理解 JavaScript 系列\"></a><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 系列</a></h4><p>汤姆大叔写的文章，文章内容实在是多。。而且感觉难度有点大，推荐大家先看一下上面简书的前端基础进阶系列，再来看汤姆大叔这一系列的文章，可能理解起来会更容易一些。</p>\n<h4 id=\"webshell-原理\"><a href=\"#webshell-原理\" class=\"headerlink\" title=\"webshell 原理\"></a><a href=\"http://www.jianshu.com/p/02aac12e459f\" target=\"_blank\" rel=\"noopener\">webshell 原理</a></h4><p>webshell，顾名思义：web 指的是在 web 服务器上，而 shell 是用脚本语言编写的脚本程序，webshell 就是就是 web 的一个管理工具，可以对 web 服务器进行操作的权限，也叫 webadmin。接触过集群的童鞋对这个概念肯定不会感到陌生，虽然一般人不会接触到 webshell，但是多了解一些总是没错的~</p>\n<h4 id=\"全自动科学上网方案分享\"><a href=\"#全自动科学上网方案分享\" class=\"headerlink\" title=\"全自动科学上网方案分享\"></a><a href=\"https://github.com/bestswifter/blog/commit/b68a7bbc413874c3883a66b6b065413f0f351156\" title=\"[Add] 全自动科学上网方案分享\" target=\"_blank\" rel=\"noopener\">全自动科学上网方案分享</a></h4><p>有些童鞋并不了解如何通过 VPS 实现科学上网，这篇文章介绍了如何利用 VPS 进行代理配置，以及实现自动切换，讲解的很详细。</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"iOS中采用AMP规范时的scroll和position:fixed带来的bug","slug":"iOS中采用AMP规范时的scroll和position:fixed带来的bug","date":"2017-08-26T12:23:20.000Z","updated":"2019-01-29T09:23:55.532Z","comments":true,"path":"api/articles/iOS中采用AMP规范时的scroll和position:fixed带来的bug.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>本文翻译自一位前辈的两篇文章，原文链接：</p>\n<ul>\n<li><a href=\"https://medium.com/@dvoytenko/amp-ios-scrolling-and-position-fixed-b854a5a0d451\" target=\"_blank\" rel=\"noopener\">AMP, iOS, Scrolling and Position Fixed</a></li>\n<li><a href=\"https://hackernoon.com/amp-ios-scrolling-and-position-fixed-redo-the-wrapper-approach-8874f0ee7876\" target=\"_blank\" rel=\"noopener\">AMP, iOS, Scrolling and Position Fixed Redo — the wrapper approach</a></li>\n</ul>\n<p>首先，你需要先了解一下 AMP，<a href=\"https://imququ.com/post/amp-project.html\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们对于 AMP 的目标是确保 document 文档在不同环境中都是可嵌入的，无论是单独查看还是在 webview 中或者在 iframe 中——总体而言，它在不同环境中的功能和行为表现都应该尽可能相同。我们将从一个简单的栗子开始，在这个栗子中，一个 AMP 文档通过 iframe 被嵌入了一个 web app。这听起来很正常，但是很实在的说，iframes 在最近已经很少有人用了。闲话少说，html 结构是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>I’m a Web App and I show AMP documents<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    iframe &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">      top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">iframe</span> … <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">scrolling</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.ampproject.org/c/pub1.com/doc1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面这段代码通常来说在移动设备上表现良好。然后我们有了一个新的想法，我们尝试将 iframe 调整到整个 document 的高度，同时使用 static 定位，从而将滚动委托给上一层的 window。然而，出于一些原因，我们放弃了这种方法：</p>\n<ul>\n<li>当视口高度等于文档高度时，在嵌入的AMP文档中设置<code>“position: fixed”</code>是不会起作用的</li>\n<li>计算文档高度容易出错，而且有延迟</li>\n</ul>\n<p>当然，我们最终没有很好的解决方案。主要是，设置了<code>“scrolling=yes”</code>的 iframe 会丢失一些移动设备的特性，比如滚动时隐藏地址栏。然而，我们仍然觉得这已经是一个很好的折衷方案了。除此之外，一些浏览器已经开始尝试将这些特性扩展到非 body 滚动的情况中。我们就这样美滋滋，直到我们遇到了 iOS。。</p>\n<h3 id=\"问题1：iOS-不支持-iframe-的-“scrollable-yes”\"><a href=\"#问题1：iOS-不支持-iframe-的-“scrollable-yes”\" class=\"headerlink\" title=\"问题1：iOS 不支持 iframe 的 “scrollable=yes”\"></a>问题1：iOS 不支持 iframe 的 <code>“scrollable=yes”</code></h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=149264\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=149264</a> 简单的说：<strong>ios中不能有可以滚动的iframe</strong>。然而，我们找到了解决这个 bug 的方法。参考这里<a href=\"https://github.com/ampproject/amphtml/blob/de7a14d/src/service/viewport-impl.js#L754\" target=\"_blank\" rel=\"noopener\">ViewportBindingNaturalIosEmbed_</a>。简短而言，我们让 document 中真正的<code>&lt;body&gt;</code>元素滚动。这样的话，即使 iframe 自身不滚动，它里面的内容也会滚动。 我们按照上面方案修改后的 AMP 文档如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们以为自己很牛逼，然而。。</p>\n<h3 id=\"问题2：现在-scrollTop，scrollLeft，scrollHeight，scrollWidth-不管用了\"><a href=\"#问题2：现在-scrollTop，scrollLeft，scrollHeight，scrollWidth-不管用了\" class=\"headerlink\" title=\"问题2：现在 scrollTop，scrollLeft，scrollHeight，scrollWidth 不管用了\"></a>问题2：现在 scrollTop，scrollLeft，scrollHeight，scrollWidth 不管用了</h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=106133\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=106133</a> 这是 webkit 中长期存在的一个 bug。scrollTop 和其他类似属性被分配给了 <code>“document.body”</code>，但是却委托给了<code>“document.documentElement”</code>。最终，当 “scrollingElement” 是文档里的大部分元素的时候，这个问题会被解决。同时，令人惊喜的是，这个 bug 不会对我们在问题1中提出的解决方案造成冲突。然而，<code>“scrollTop”</code> 将会一直是 0，从而导致其他连带属性也会受到影响，比如 <code>“window.pageYOffset”</code> 解决方案是添加一个滚动的元素到文档顶部。它的 <code>“getBoundingClientRect().top”</code> 就可以用来重新计算文档的滚动位置。 具体如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scroll-pos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        width: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        height: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        visibility: hidden;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们的 JS 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScrollTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 要对scrollPos.top取负值的原因是滚动位置在计算时，</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们的scrollPos元素会向上滚动，在视口范围外,</span></span><br><span class=\"line\">  <span class=\"comment\">// 此时它的top值是负的</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -scrollPos.getBoundingClientRect().top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，这个解决方案显得很蠢，但是它确实奏效了。类似的方法可用于“scrollLeft”，“scrollHeight” 以及剩余属性。 然而，我们又有了新的发现。。</p>\n<h3 id=\"问题3：“postion-fixed”-的元素在-“overflow-auto”-容器中会有很多-bug\"><a href=\"#问题3：“postion-fixed”-的元素在-“overflow-auto”-容器中会有很多-bug\" class=\"headerlink\" title=\"问题3：“postion: fixed” 的元素在 “overflow: auto” 容器中会有很多 bug\"></a>问题3：“postion: fixed” 的元素在 “overflow: auto” 容器中会有很多 bug</h3><p>Bug：<a href=\"https://bugs.webkit.org/show_bug.cgi?id=154399\" target=\"_blank\" rel=\"noopener\">https://bugs.webkit.org/show_bug.cgi?id=154399</a> 如果一个 “position: fixed” 元素在一个 “overflow: auto” 的容器中，它的表现会让你很失望：滚动的时候，“position: fixed” 元素会跳远和闪现。它看起来像是稍微滚动一点然而又跳回到正确的位置。这个效果很差，可以通过这个<a href=\"https://drive.google.com/file/d/0B_v8thsbiGyDMXZMZkRFZGFRbjA/view?usp=sharing\" target=\"_blank\" rel=\"noopener\">视频演示</a>看到这个 bug。 要哭了。我们通过各种 hack 解决了各种 bug，最后还是有一个 bug，我们如何解决这个？这里有一个很疯狂的 idea 貌似好使。我们可以添加一个虚拟元素到 “document.documentElement”（不是 “body”，所以它其实是 “body” 的兄弟元素）。我们把它叫做“<strong>固定层</strong>”。他将占据整个视口。我们将使用CSS来找到所有的可能是 “fixed” 的元素（希望不会有太多。。），如果在某些时候它们是确定 “fixed” 的，我们就通过正确的 “z-index” 属性将它们移动到“固定层” 你可能看晕了，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#fixed-element</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      position: fixed;</span></span><br><span class=\"line\"><span class=\"undefined\">      right: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">      top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-element\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      width: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      height: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当我们找到一个确实 “fixed” 的元素的时候，我们将它移动到“固定层”，像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fixed-element\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"pointer-events: initial; z-index: 11;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此，我们可以根据某元素是否 “fixed” 来将它在 “\bbody” 中的原始位置和“固定层”之间移动。 这个方法就无懈可击了吗？很明显没有：</p>\n<ul>\n<li>\b这代码看都看不懂！</li>\n<li>计算 “z-index” 会相当痛苦</li>\n<li>我们将失去一些 CSS 祖先选择器</li>\n</ul>\n<p>但是它确实是有效的，可以看一下<a href=\"http://github.com/ampproject/amphtml/pull/2128\" target=\"_blank\" rel=\"noopener\">这条PR</a>。还有别的 idea 吗？ 准确来说是有的，下面是作者第二篇文章的译文：</p>\n<h2 id=\"回顾一下\"><a href=\"#回顾一下\" class=\"headerlink\" title=\"回顾一下\"></a>回顾一下</h2><p>简单回顾一下，AMP 文档经常在一个滚动的 iframe 中进行展示。它的 html 结构看起来像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>I'm a Web App and I show AMP documents<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      iframe &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">iframe</span> … <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">scrolling</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.ampproject.org/c/pub1.com/doc1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在大部分浏览器中，上面这段代码表现很正常。但是在 ios 中会有很多异常表现，我们尝试了很多方法，包括通过内容调整 iframe 大小和滚动主文档。但是他们都有一些性能问题，具体可以参见上面的问题描述。 根本而言，ios 的 safari 浏览器不支持滚动的 iframe。换句话说，<code>“scrolling=yes”</code> 这个属性被直接忽略了。<a href=\"http://jsbin.com/gugika/edit?html,css,output\" target=\"_blank\" rel=\"noopener\">看这个例子</a>。这个 bug 由来已久，可以<a href=\"https://bugs.webkit.org/show_bug.cgi?id=149264\" target=\"_blank\" rel=\"noopener\">在这里</a>发现。 我们在<a href=\"https://github.com/ampproject/amphtml/blob/de7a14d/src/service/viewport-impl.js#L754\" target=\"_blank\" rel=\"noopener\">之前提到的一篇文章</a>中发现了一个很原始的方案。简而言之，我们让真正的 “body” 元素滚动。于是，即使 iframe 它自身不滚动，iframe 中的内容也会滚动，AMP 文档如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们 iframe 可以滚动了！这个 AMP 中的解决方案我们用了一年。然而，随着时间的流逝，我们发现了一系列的问题，这些问题在上一篇文章中已经详细介绍过了，这里再简单罗列一下： 给“ body” 添加 “position: absolute” 属性是作者不想看到的，会影响原始布局。另外一个副作用是我们不没办法在 “body” 元素上设置 margin body 的 scrollTop，scrollLeft，scrollHeight 和 scrollWidth 将不起作用。这个 bug 通过上面介绍的注入虚拟 dom 元素可以解决。 “position: fixed” 在 “-webkit-overflow-scrolling: touch” 容器中会有各种 bug 抵消 header 和 footer 需要给 body 设置边框，这个代价很昂贵，因为它缩小了滚动区域，同时可能会打破现有布局。而隐藏头部又会造成 UI 视觉的隔断和滚动的间断 那我们如何解决这个问题呢，我们的主角就要登场了。。</p>\n<h3 id=\"新的解决方案——wrapper-元素\"><a href=\"#新的解决方案——wrapper-元素\" class=\"headerlink\" title=\"新的解决方案——wrapper 元素\"></a>新的解决方案——wrapper 元素</h3><p>这个方案已开源，可以<a href=\"https://github.com/ampproject/amphtml/blob/2d73ac0d9c451dee4c89ac1fa73329b69edca5a4/src/service/viewport-impl.js#L1404\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看源代码</p>\n<h3 id=\"DOM-结构\"><a href=\"#DOM-结构\" class=\"headerlink\" title=\"DOM 结构\"></a>DOM 结构</h3><p>通俗来讲，wrapper 元素和滚动的 “body” 元素是类似的。iframe 在 ios 的 safari 浏览器中依然无法滚动，所以我们需要让 iframe 中的内容滚动。因为让<code>&lt;body&gt;</code>滚动会有一系列问题，所以我们可以创建一个滚动的 wrapper，然后将它放在<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>中间。换句话说，我们将<code>&lt;body&gt;</code>元素包装在一个可滚动的容器中。 现在的 dom 结构类似这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i-amp-html-wrapper</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">i-amp-html-wrapper</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>毫无疑问，这看起来很怪，但是它确实解决了原来的问题——它让 iframe 在 ios 的 safari 浏览器中可以滚动。此外，它也解决了上面描述的许多问题：</p>\n<ul>\n<li>对于<code>&lt;body&gt;</code>元素没有任何强制要求：它仍然拥有原来的“position”属性，同时也可以拥有默认的“overflow: visible”属性。AMP 允许 dom 中的大多数 css 样式，这样可以减少对代码原作者样式的干扰</li>\n<li>可滚动的 wrapper 元素可以用来获取 scrollTop，scrollLeft，scrollHeight 和 scrollWidth 属性，于是之前介绍过的虚拟元素将不再需要</li>\n<li>不再需要给<code>&lt;body&gt;</code>设置边界来抵消 header 和 footer 了——只需要给 wrapper 元素添加 padding 就足够了</li>\n</ul>\n<p>然而，“position: fixed” 的问题仍然存在，我们稍后再谈。</p>\n<h3 id=\"两个-lt-html-gt-元素\"><a href=\"#两个-lt-html-gt-元素\" class=\"headerlink\" title=\"两个&lt;html&gt;元素\"></a>两个<code>&lt;html&gt;</code>元素</h3><p>我们采用了 wrapper 方案，然后很快就碰到了一个小问题。很多人喜欢 html&gt;body 选择器，而我们在 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code> 中间插入了 i-amp-html-wrapper 元素。为了解决这个问题，我们将 i-amp-html-wrapper 作为另外一个 <code>&lt;html&gt;</code> 元素，最终的 dom 结构长这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-html-wrapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>加倍奇怪，加倍好玩。总而言之现在 html&gt;body 选择器将正常起作用</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>AMP runtime 会在启动时尽可能早的创建 wrapper 元素。而现有的 <code>&lt;body&gt;</code> 元素会作为子元素放到新建 wrapper 里面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create wrapper.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'html'</span>);</span><br><span class=\"line\">wrapper.id = <span class=\"string\">'i-amp-html-wrapper'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Setup classes and styles.</span></span><br><span class=\"line\">wrapper.className = <span class=\"built_in\">document</span>.documentElement.className;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.className = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style = <span class=\"string\">'...'</span>;</span><br><span class=\"line\">wrapper.style = <span class=\"string\">'...'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Attach wrapper straight inside the document root.</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.appendChild(wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reparent the body.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">wrapper.appendChild(body);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">document</span>, <span class=\"string\">'body'</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> body,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这段代码很简单，不过有一个细节——将 body 移到 wrapper 里面会将 document.body 重置为 null，因此我们需要将 document.body 重写回初始的 <code>&lt;body&gt;</code> 元素，可以通过 Object.defineProperty 来实现</p>\n<h4 id=\"position-fixed问题\"><a href=\"#position-fixed问题\" class=\"headerlink\" title=\"position: fixed问题\"></a>position: fixed问题</h4><p>尽管 wrapper 方案能够解决大部分问题，但是 position: fixed 的问题仍然存在 这个问题在上面那篇文章已经详细介绍过了，有关 ios 的 safari 浏览器 bug 可以<a href=\"https://bugs.webkit.org/show_bug.cgi?id=154399\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看 简而言之，一个 position: fixed 元素在一个 -webkit-overflow-scrolling: touch 容器中滚动时会出现跳跃和闪现的问题。它看起来像是稍微滚动一点然而又跳回到正确的位置。可以通过这个<a href=\"https://drive.google.com/file/d/0B_v8thsbiGyDMXZMZkRFZGFRbjA/view?usp=sharing\" target=\"_blank\" rel=\"noopener\">视频演示</a>看到这个 bug。 在我们之前的解决方案中，我们将有 position: fixed 属性的元素放到了 <code>&lt;body&gt;</code> 外面，同时放到了一个虚拟“固定层”元素内部，这个“固定层”元素放在了 -webkit-overflow-scrolling: touch 容器外面 最终的 dom 结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">AMP</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"overflow-y: auto; -webkit-overflow-scrolling: touch;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-html-wrapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        display: block;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        overflow-y: auto;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        -webkit-overflow-scrolling: touch;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: relative;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">document</span> <span class=\"attr\">content</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-amp-fixed-layer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        position: absolute;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        top: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        left: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        right: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        bottom: 0;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        pointer-events: none;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">      \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">fixed</span> <span class=\"attr\">elements</span> <span class=\"attr\">reparented</span> <span class=\"attr\">here</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>于是，<strong>我们最终获得了两个<code>&lt;html&gt;</code>元素和两个<code>&lt;body&gt;</code>元素</strong>。看起来很疯狂，但是它确实解决了两个问题： iframe 不滚动和 position:fixed 元素闪现问题 很明显，我们将取得更好的效果如果存在已久的 ios safari 问题被修复。。</p>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"AMP","path":"api/tags/AMP.json"},{"name":"fixed","path":"api/tags/fixed.json"},{"name":"ios","path":"api/tags/ios.json"}]},{"title":"移动端滚动事件大起底","slug":"移动端滚动事件大起底","date":"2017-08-20T13:43:33.000Z","updated":"2019-01-29T09:23:55.540Z","comments":true,"path":"api/articles/移动端滚动事件大起底.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>最近在做移动端的项目，其中有个需求就是滚动监听标签页，实现用户滚动到不同位置时点亮相应 tab 按钮；这其实是个很简单的需求，但是根据之前的项目经验，移动端的滚动事件会有各种坑，所以就花时间做了一些功课，对移动端滚动事件中的坑进行了总结，同时提供了一些解决方案。</p>\n<h2 id=\"移动端滚动事件介绍\"><a href=\"#移动端滚动事件介绍\" class=\"headerlink\" title=\"移动端滚动事件介绍\"></a>移动端滚动事件介绍</h2><p>我们这里要讲的是 onscroll 事件，具体参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onscroll\" target=\"_blank\" rel=\"noopener\">MDN文档</a></p>\n<h2 id=\"滚动事件应用\"><a href=\"#滚动事件应用\" class=\"headerlink\" title=\"滚动事件应用\"></a>滚动事件应用</h2><p>我做了几个简单的 demo，可以直接点击下面的链接查看（在手机上效果更佳~），关于移动端滚动事件的简单 demo 我上传到了我的 github，可以<a href=\"https://github.com/merrier/mobile-scroll-events\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看源码：</p>\n<ul>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/drop-and-refresh.html\" target=\"_blank\" rel=\"noopener\">下拉刷新</a></li>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/ceiling.html\" target=\"_blank\" rel=\"noopener\">吸顶效果</a></li>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/lazy-load.html\" target=\"_blank\" rel=\"noopener\">图片懒加载</a></li>\n<li>无限加载</li>\n<li><a href=\"https://merrier.github.io/mobile-scroll-events/side-nav-bar.html\" target=\"_blank\" rel=\"noopener\">侧边浮动导航栏</a></li>\n</ul>\n<h2 id=\"滚动事件分类和兼容性\"><a href=\"#滚动事件分类和兼容性\" class=\"headerlink\" title=\"滚动事件分类和兼容性\"></a>滚动事件分类和兼容性</h2><p>按照实际滚动的 dom 类型分为全局滚动和局部滚动</p>\n<h3 id=\"全局滚动\"><a href=\"#全局滚动\" class=\"headerlink\" title=\"全局滚动\"></a>全局滚动</h3><p>滚动条在 body 节点或者更顶层，一般是这样调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bHeight = <span class=\"built_in\">document</span>.body.clientHeight,  <span class=\"comment\">// body对象高度，如果有滚动高度也包括</span></span><br><span class=\"line\">        wHeight = <span class=\"built_in\">window</span>.innerHeight,  <span class=\"comment\">// 浏览器窗口的视口</span></span><br><span class=\"line\">        sTop = <span class=\"built_in\">document</span>.body.scrollTop;  <span class=\"comment\">// body距离滚动顶部的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isScrollBottom = bHeight - (wHeight + sTop) === <span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isScrollBottom) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行相关代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以通过 addEventListener 的方式</p>\n<h3 id=\"局部滚动\"><a href=\"#局部滚动\" class=\"headerlink\" title=\"局部滚动\"></a>局部滚动</h3><p>滚动条在 body 下某一个 dom 节点，在移动端如果使用局部滚动，意思就是我们的滚动在一个固定宽高的 div 内触发，将该 div 设置成 overflow:scroll/auto; 来形成 div 内部的滚动，这时我们监听 div 的 onscroll 发现触发的时机；调用方式和全局滚动类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;）</span><br></pre></td></tr></table></figure>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>整体来看，<strong>全局滚动的兼容性要不如局部滚动，安卓比 IOS 兼容性更好：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">body 滚动</th>\n<th style=\"text-align:center\">局部滚动</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">iOS</td>\n<td style=\"text-align:center\">不能实时触发</td>\n<td style=\"text-align:center\">不能实时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">android</td>\n<td style=\"text-align:center\">实时触发</td>\n<td style=\"text-align:center\">实时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iOS WKWebview 内核</td>\n<td style=\"text-align:center\">实时触发</td>\n<td style=\"text-align:center\">实时触发</td>\n</tr>\n</tbody>\n</table>\n<p>为什么 IOS 下的滚动事件会有各种 bug 呢，通过查阅资料，得出如下结论： iOS 的 webview 内核设定了其在进行 momentum scrolling (弹性滚动， 设置 -webkit-overflow-scrolling:touch 可以达到弹性滚动效果，安卓无效)时，会停止所有的 <strong>事件响应</strong> 及 <strong>DOM操作引起的页面渲染，</strong>故 onscroll 不能实时响应，具体可以<a href=\"https://www.tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers/\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看某位大牛写的实例 这里说明一下关于 iOS 的 wkwebview 内核是 iOS 从 iOS8 开始提供的新型 webview 内核，和之前的 uiwebview 相比，性能要好，具体大家可以自行查看关于 wkwebview 的相关概念</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>既然 onscroll 事件在 iOS 和安卓上的表现并不统一，同时根据浏览器内核的不同会有潜在的 bug 出现，就出现了针对于移动端滚动事件的各种兼容方案，总结如下：</p>\n<ol>\n<li>使用 ontouchmove 去替代 onscroll，虽然能更频繁的触发事件，但是这边的项目需求是实时响应滚动事件的同时，还要对页面元素进行重定位的 DOM 操作，由上述原因可知，在滚动过程中，页面会停止一切关于 DOM 方面的操作，所以若使用 ontouchmove 去实现的话，在按住屏幕进行滑动的时候，屏幕会出现元素抖动的情况(事件触发与 DOM 操作间具有几十毫秒的时间差)，兼容失败</li>\n<li>使用 <a href=\"https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/versions.html\" target=\"_blank\" rel=\"noopener\">iscroll</a> 的 probe 版本，该版本能实时探查到滚动的距离，但该钩子函数是实时去关注 requestAnimationFrame 下的状态，所以对浏览器的版本性能消耗很大，安卓机根本动不了，兼容失败</li>\n<li>使用 <a href=\"http://www.swiper.com.cn/\" target=\"_blank\" rel=\"noopener\">swiper</a> 插件，在启动 freeMode 模式时模拟原生的弹性滚动( swiper 模拟原生滚动的方案能兼容较多的安卓机型不出现bug，推荐), 因为 swiper 没有实时监听滚动位置的功能,故我监听滚动开始及结束后的事件，通过 setInterval 及一些计算去实现滚动条的监听，但因为 react 元素的变化量比较大，导致 swiper 在移动端时对父容器的计算速率达到了一个瓶颈，依旧出现很卡顿的现象，兼容失败</li>\n</ol>\n<p>通过以上的兼容性尝试，可以发现其实<strong>并没有一个完美的解决方案</strong>，所以如果真的需要达到某些移动端滚动效果的话，可以采取 fallback 方案：</p>\n<ul>\n<li>Android 用 scroll 方案，因为兼容性很可观；</li>\n<li>IOS 如果不需要兼容 8 以下版本的话，就也直接用 scroll 方案，因为 wkwebview 已经对滚动事件进行了优化，而如果需要兼容8以下版本的话，可以考虑 isroll 或 JRroll 这两种插件，<strong>同时需要真机测试查看效果是否达到要求（尤其是 QQ 浏览器和搜狗浏览器）</strong>。</li>\n</ul>\n<p>由于查询到的资料比较老旧，对于滚动事件的兼容性描述可能已经过时了，我就在最近（2017-8-24）用各种浏览器测试了一下iOS中的滚动事件的兼容性，总结如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">是否可以弹性滚动</th>\n<th style=\"text-align:center\">是否需要设置 overflow:scrolling 才能弹性滚动</th>\n<th style=\"text-align:center\">设置 overflow:scrolling 之后，滚动期间是否监听事件</th>\n<th style=\"text-align:center\">未设置 overflow:scrolling，滚动期间是否监听事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">safari(v10.0)</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chrome(v60.0)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">firefox(v8.2)</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">weixin(v6.5.14)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">QQ(v7.7.2)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">搜狗(v5.8.1)</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<p>从上面的表格可以看到，最新版的 iOS 浏览器其实并不需要 <code>overflow:scrolling</code> 就可以实现弹性滚动，同时除了搜狗浏览器之外，其他浏览器在滚动期间都会监听事件，由此可见截止到目前（2017-8-24），iOS 和浏览器对滚动事件的兼容性已经做了很多优化和改进了，之后有时间的话再在 android 手机上做一下测试……</p>\n<h2 id=\"滚动事件性能优化\"><a href=\"#滚动事件性能优化\" class=\"headerlink\" title=\"滚动事件性能优化\"></a>滚动事件性能优化</h2><p>除了兼容性问题以外，由于滚动事件和 resize 事件同属于<strong>会频繁触发的事件。</strong>如果事件中涉及到大量的位置计算、DOM 操作、元素重绘等工作且这些工作无法在下一个 scroll 事件触发前完成，就会造成浏览器掉帧。</p>\n<h3 id=\"防抖和节流\"><a href=\"#防抖和节流\" class=\"headerlink\" title=\"防抖和节流\"></a>防抖和节流</h3><p>scroll 事件本身会触发页面的重新渲染，同时 scroll 事件的 handler 又会被高频度的触发, 因此事件的 handler 内部不应该有复杂操作，例如 DOM 操作就不应该放在事件处理中。 针对此类高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等），下面介绍两种常用的解决方法，防抖和节流（underscore和lodash里面有封装好的这两种方法，感兴趣的话可以研究一下源码）。</p>\n<h4 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h4><p>防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</p>\n<h4 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h4><p>防抖函数确实不错，但是也存在问题，譬如图片的懒加载，我希望在下滑过程中图片不断的被加载出来，而不是只有当我停止下滑时候，图片才被加载出来。又或者下滑时候的数据的 ajax 请求加载也是同理。 这个时候，我们希望即使页面在不断被滚动，但是滚动 handler 也可以以一定的频率被触发（譬如 250ms 触发一次），这类场景，就要用到另一种技巧，称为节流函数（throttling）。 节流函数，只允许一个函数在 X 毫秒内执行一次。 与防抖相比，节流函数最主要的不同在于它保证在 X 毫秒内至少执行一次我们希望触发的事件 handler。</p>\n<h3 id=\"使用-rAF（requestAnimationFrame）触发滚动事件\"><a href=\"#使用-rAF（requestAnimationFrame）触发滚动事件\" class=\"headerlink\" title=\"使用 rAF（requestAnimationFrame）触发滚动事件\"></a>使用 rAF（requestAnimationFrame）触发滚动事件</h3><p>上面介绍的抖动与节流实现的方式都是借助了定时器 setTimeout ，但是如果页面只需要兼容高版本浏览器或应用在移动端，又或者页面需要追求高精度的效果，那么可以使用浏览器的原生方法 rAF（requestAnimationFrame）。 window.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。 rAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器） 通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000 / 60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ul>\n<li>防抖动：防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</li>\n<li>节流函数：只允许一个函数在 X 毫秒内执行一次，只有当上一次函数执行后过了你规定的时间间隔，才能进行下一次该函数的调用。</li>\n<li>rAF：16.7ms 触发一次 handler，降低了可控性，但是提升了性能和精确度。</li>\n</ul>\n<p>从本质上而言，我们应该尽量去精简 scroll 事件的 handler ，将一些变量的初始化、不依赖于滚动位置变化的计算等都应当在 scroll 事件外提前就绪。建议：<strong>避免在 scroll 事件中修改样式属性 / 将样式操作从 scroll 事件中剥离</strong></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.ayqy.net/blog/%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\" target=\"_blank\" rel=\"noopener\">吸顶效果解决方案</a></li>\n<li><a href=\"https://www.tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers/\" target=\"_blank\" rel=\"noopener\">onscroll Event Issues on Mobile Browsers</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000004453730\" target=\"_blank\" rel=\"noopener\">前端: 移动端onscroll事件在部分浏览器内不能实时触发</a></li>\n<li><a href=\"http://www.alloyteam.com/2017/04/secrets-of-mobile-web-scroll-bars-and-drop-refresh/\" target=\"_blank\" rel=\"noopener\">移动web之滚动篇</a>* <a href=\"http://web.jobbole.com/86158/\" target=\"_blank\" rel=\"noopener\">高性能滚动 scroll 及页面渲染优化</a></li>\n</ul>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"移动端","path":"api/tags/移动端.json"}]},{"title":"SSH connect to github fail解决方案","slug":"SSH connect to github fail解决方案","date":"2017-08-20T13:22:16.000Z","updated":"2019-01-29T09:23:55.532Z","comments":true,"path":"api/articles/SSH connect to github fail解决方案.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_280.png","content":"<p>来自于<a href=\"https://stackoverflow.com/questions/21488137/ssh-connect-to-github-fail\" target=\"_blank\" rel=\"noopener\">stackoverflow上的一个问题</a>，有位仁兄在命令行中输入了如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>然而报错了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh: Could not resolve hostname github.com: nodename nor servname provided, or not known</span><br></pre></td></tr></table></figure>\n<p>其实，之前就有人碰到过 ssh fail 的问题，报错的原因是 <strong>DNS 服务器设置</strong>的问题，将 DNS 地址设置为 OpenDNS 或者 Google DNS 就可以了：</p>\n<blockquote>\n<p>OpenDNS 208.67.222.222 208.67.220.220 GoogleDNS 8.8.8.8 8.8.4.4</p>\n</blockquote>\n<p>下面就介绍一下在 Mac 中如何设置 DNS（来自文章<a href=\"http://www.howtogeek.com/howto/38793/how-to-switch-mac-os-x-to-use-opendns-or-google-dns/\" target=\"_blank\" rel=\"noopener\">How to Switch Mac OS X to Use OpenDNS or Google DNS</a>）：</p>\n<h2 id=\"首先，系统偏好设置-网络\"><a href=\"#首先，系统偏好设置-网络\" class=\"headerlink\" title=\"首先，系统偏好设置-网络\"></a>首先，系统偏好设置-网络</h2><div align=\"center\"><img src=\"/images/hexo_post_280.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"点击高级选项\"><a href=\"#点击高级选项\" class=\"headerlink\" title=\"点击高级选项\"></a>点击高级选项</h2><div align=\"center\"><img src=\"/images/hexo_post_281.png\" alt=\"\" width=\"400\"></div>\n\n\n<h2 id=\"DNS-添加按钮\"><a href=\"#DNS-添加按钮\" class=\"headerlink\" title=\"DNS-添加按钮\"></a>DNS-添加按钮</h2><div align=\"center\"><img src=\"/images/hexo_post_282.png\" alt=\"\" width=\"400\"></div>\n\n<p>设置为上面我们提到的 OpenDNS 或 GoogleDNS 地址中的一个就可以啦~</p>\n","raw":null,"categories":[{"name":"stackoverflow","path":"api/categories/stackoverflow.json"}],"tags":[{"name":"Github","path":"api/tags/Github.json"},{"name":"dns","path":"api/tags/dns.json"},{"name":"ssh","path":"api/tags/ssh.json"}]},{"title":"影响Cache的几个HTTP头信息","slug":"影响Cache的几个HTTP头信息","date":"2017-08-20T13:12:54.000Z","updated":"2019-01-29T09:23:55.536Z","comments":true,"path":"api/articles/影响Cache的几个HTTP头信息.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>HTTP 协议是前端工程师接触最多的一种协议，而它的内容又多的要命，所以很多前端童鞋在遇到 HTTP 的时候都会产生“畏惧”的心理，其实对于这种内容非常多又难以理解的知识点，我的建议是用到的时候再详查，而我接下来要介绍的这几个头信息则是非常重要的知识点，是每一个称职的前端工程师都需要掌握的~</p>\n<h2 id=\"HTTP-的-cache-机制\"><a href=\"#HTTP-的-cache-机制\" class=\"headerlink\" title=\"HTTP 的 cache 机制\"></a>HTTP 的 cache 机制</h2><p>HTTP 的 cache 机制总共有4个组成部分：<strong>Cache-Control、Last-Modified（If-Modified-Since）、Etag（If-None-Match）、Expires</strong></p>\n<ul>\n<li><strong>服务器响应头</strong>：Last-Modified、Etag</li>\n<li><strong>浏览器请求头</strong>：If-Modified-Since、If-None-Match</li>\n</ul>\n<p><strong>流程</strong>：服务器发出 Etag，Last-Modified 头后，下次浏览器再进行同样的请求，则会发出 If-None-Match，If-Modified-Since头，而后服务器根据这些信息来判断是否需要发送数据，如果没有更新，服务器就简单的发送一个 304 状态告诉浏览器用缓存就OK了，不用下载数据了，从而节约了带宽。</p>\n<h3 id=\"Last-Modified-If-Modified-Since\"><a href=\"#Last-Modified-If-Modified-Since\" class=\"headerlink\" title=\"Last-Modified / If-Modified-Since\"></a>Last-Modified / If-Modified-Since</h3><p>Last-Modified 是响应头，If-Modified-Since 是请求头。Last-Modified 把 Web 组件的最后修改时间告诉客户端，客户端在下次请求此Web组件的时候，会把上次服务端响应的最后修改时间作为 If-Modified-Since 的值发送给服务器，服务器可以通过这个值来判断是否需要重新发送，如果不需要，就简单的发送一个 304 状态码，客户端将从缓存里直接读取所需的Web组件。如果有更新，返回 HTTP 200 和更新的页面内容，并且携带新的 ETag 和 LastModified。</p>\n<blockquote>\n<p>使用这个机制，能够避免重复发送文件给浏览器，不过仍然会产生一个 HTTP 请求。</p>\n</blockquote>\n<h3 id=\"ETag-If-None-Match\"><a href=\"#ETag-If-None-Match\" class=\"headerlink\" title=\"ETag / If-None-Match\"></a>ETag / If-None-Match</h3><p>ETag 是响应头，If-None-Match 是请求头。Last-Modified / If-Modified-Since 的主要缺点就是它只能精确到秒的级别，一旦在一秒的时间里出现了多次修改，那么 Last-Modified / If-Modified-Since 是无法体现的。相比较，ETag / If-None-Match 没有使用时间作为判断标准，而是使用一个特征串。Etag 把 Web 组件的特征串告诉客户端，客户端在下次请求此 Web 组件的时候，会把上次服务端响应的特征串作为 If-None-Match 的值发送给服务端，服务端可以通过这个值来判断是否需要从重新发送，如果不需要，就简单的发送一个 304 状态码，客户端将从缓存里直接读取所需的 Web 组件。 因此，HTTP/1.1 利用 Entity Tag 头提供了更加严格的验证。</p>\n<h3 id=\"当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：\"><a href=\"#当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：\" class=\"headerlink\" title=\"当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：\"></a>当服务器发出响应的时候，可以通过两种方式来告诉客户端缓存请求：</h3><p><strong>第一种是Expires</strong>，比如：<code>Expires: Sun, 16 Oct 2016 05:43:02 GMT</code>，在此日期之前，客户端都会认为缓存是有效的。 不过 Expires 有缺点，比如说，服务端和客户端的时间设置可能不同，这就会使缓存的失效可能并不能精确的按服务器的预期进行。<br><strong>第二种是Cache-Control</strong>，比如：<code>Cache-Control: max-age=3600</code>，这里声明的是一个相对的秒数，表示从现在起，3600 秒内缓存都是有效的，这样就避免了服务端和客户端时间不一致的问题。 但是 Cache-Control 是 HTTP1.1 才有的，不适用与 HTTP1.0，而 Expires 既适用于 HTTP1.0，也适用于 HTTP1.1，所以说在大多数情况下同时发送这两个头会是一个更好的选择，当客户端两种头都能解析的时候，会优先使用 Cache-Control。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是-Last-Modified\"><a href=\"#什么是-Last-Modified\" class=\"headerlink\" title=\"什么是 Last-Modified?\"></a>什么是 Last-Modified?</h3><p>在浏览器第一次请求某一个 URL 时，服务器端的返回状态会是 200，内容是你请求的资源，同时有一个 Last-Modified 的属性标记 (<strong>Http Reponse Header</strong>），此文件在服务期端最后被修改的时间，格式类似这样：<code>Last-Modified: Fri, 12 May 2006 18:53:33 GMT</code>，客户端第二次请求此 URL 时，根据 HTTP 协议的规定，浏览器会向服务器传送 If-Modified-Since 报头（<strong>Http Request Header</strong>），询问该时间之后文件是否有被修改过：<code>If-Modified-Since: Fri, 12 May 2006 18:53:33 GMT</code>，如果服务器端的资源没有变化，则自动返回 <strong>HTTP 304 （Not Changed.）</strong> 状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>\n<blockquote>\n<p>如果 If-Modified-Since 的时间比服务器当前时间（当前的请求时间 request_time）还晚，Apache 会认为是个非法请求</p>\n</blockquote>\n<h4 id=\"Last-Modified-和-Expires-的区别\"><a href=\"#Last-Modified-和-Expires-的区别\" class=\"headerlink\" title=\"Last-Modified 和 Expires 的区别\"></a>Last-Modified 和 Expires 的区别</h4><p>让我们回过头来比较一下 Expires 和 Last-Modified 这两个东西，似乎 Last-Modified 比不上 Expires，因为虽然它能够节省一点带宽，但是还是逃不掉发一个 HTTP 请求出去，而 Expires 却使得浏览器干脆连 HTTP 请求都不用发，岂不痛快！那还要 Last- Modified 这个东西干什么？理想状况的确是这样，不过当用户在 IE 或者 Firefox 里面按 F5 或者点击 Refresh 按钮的时候（不是在 URL 栏里重新输入一遍 URL 然后回车），就算对于有 Expires 的 URI，一样也会发一个 HTTP 请求出去，所以，Last-Modified 还是要用的，而且要和 Expires 一起用。</p>\n<h3 id=\"什么是-Etag？\"><a href=\"#什么是-Etag？\" class=\"headerlink\" title=\"什么是 Etag？\"></a>什么是 Etag？</h3><p>HTTP 协议规格说明定义 ETag 为“<strong>被请求变量的实体值</strong>” 。另一种说法是，ETag 是一个可以与 Web 资源关联的记号（token）。典型的 Web 资源可以是一个 Web 页，但也可能是 JSON 或 XML 文档。服务器单独负责判断记号是什么及其含义，并在 HTTP 响应头中将其传送到客户端，以下是服务器端返回的格式：</p>\n<p><code>ETag: &quot;50b1c1d4f775c61:df3&quot;</code> </p>\n<p>客户端的查询更新格式是这样的：</p>\n<p><code>If-None-Match: &quot;50b1c1d4f775c61:df3&quot;</code> </p>\n<p>如果 ETag 没改变，则返回状态 304，这也和 Last-Modified 一样。本人测试 <strong>Etag 主要在断点下载时比较有用。</strong></p>\n<h4 id=\"Last-Modified和Etags如何帮助提高性能\"><a href=\"#Last-Modified和Etags如何帮助提高性能\" class=\"headerlink\" title=\"Last-Modified和Etags如何帮助提高性能?\"></a>Last-Modified和Etags如何帮助提高性能?</h4><p>聪明的开发者会把 Last-Modified 和 ETags 请求的 HTTP 报头一起使用，这样可利用客户端（例如浏览器）的缓存。因为服务器首先产生 Last-Modified / Etag 标记，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。过程如下:</p>\n<ol>\n<li>客户端请求一个页面（A）。</li>\n<li>服务器返回页面 A，并再给 A 加上一个 Last-Modified / ETag。</li>\n<li>客户端展现该页面，并将页面连同 Last-Modified / ETag 一起缓存。</li>\n<li>客户再次请求页面 A，并将上次请求时服务器返回的 Last-Modified / ETag 一起传递给服务器。</li>\n<li>服务器检查该 Last-Modified 或 ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应 304 和一个空的响应体。</li>\n</ol>\n<p><strong>注意：</strong></p>\n<ol>\n<li>Last-Modified 和 Etag 头都是由 Web Server 发出的 Http Reponse Header，Web Server 应该同时支持这两种头。</li>\n<li>Web Server 发送完 Last-Modified / Etag 头给客户端后，客户端会缓存这些头；</li>\n<li>客户端再次发起相同页面的请求时，将分别发送与 Last-Modified / Etag 对应的 Http Request Header:If-Modified-Since 和 If-None-Match。我们可以看到这两个 Header 的值和 Web Server 发出的 Last-Modified，Etag 值完全一样；</li>\n<li>通过上述值到服务器端检查，判断文件是否继续缓存；</li>\n</ol>\n<h4 id=\"Etag的弊端\"><a href=\"#Etag的弊端\" class=\"headerlink\" title=\"Etag的弊端\"></a>Etag的弊端</h4><p>不过 ETag / If-None-Match 这点功能实在是个鸡肋，首先，Server 端的资源不大可能 Roll Back，更重要的是，有可能造成 Client Performance 下降。对于只有一个 Server 的网站，没什么问题，但是现在稍微上点规模的网站都需要 Scale Out，也就是说需要前端一个 Load Balancer，后面接多台 Server 来处理请求，俗称 Cluster，既然是 Cluster，那么每个请求到底返回什么结果应该和分配到哪个 Server 无关，不过这个 ETag 可能就坏事了。<br>假如用户的第一次请求分配给 Server A，返回 <code>ETag: &quot;abcdefg1234:0001&quot;</code>，但是第二次请求分配给了Server B，Server B 上这个资源和 Server A 上的一模一样，但是计算出这个资源的 ETag 是”abcdefg1234:0002”，这下麻烦了，虽然内容一样，但是 ETag 不匹配，还是浪费了带宽把资源发送了一遍，冤枉啊！而事实上，不同 Server 上的 ETag 很有可能不同，对于 Apache，ETag 的计算考虑了 inode；对于 IIS，ETag 考虑了 metabase 的修改版本，要保证不同 server 上的这些信息一致，有点小难。不过不是有 Last-Modified / If- Not-Modified 吗？Server 端看到 If-Modified-Since，对照一下时间对得上，不管 If-None-Match，可以直接返回 304(Not Modified) 呀，很不幸， <a href=\"HTTP://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.4\" target=\"_blank\" rel=\"noopener\">RFC2616对这种情况做了规定</a>，如果既有 If-None-Match 又有 If-Modified-Since，除非两者不冲突，不然不会返回 304。</p>\n<h4 id=\"Apache-中的-Etag-设置\"><a href=\"#Apache-中的-Etag-设置\" class=\"headerlink\" title=\"Apache 中的 Etag 设置\"></a>Apache 中的 Etag 设置</h4><p>Apache 默认开启 Etag，可以使用 FileEtag 来设置</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"HTTP://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">浅谈Web缓存</a></li>\n<li><a href=\"HTTP://www.cnblogs.com/vajoy/p/5341664.html\" target=\"_blank\" rel=\"noopener\">浅谈浏览器HTTP的缓存机制</a></li>\n<li><a href=\"HTTP://louiszhai.github.io/2017/04/07/HTTP-cache/\" target=\"_blank\" rel=\"noopener\">浏览器缓存机制剖析</a></li>\n</ul>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"},{"name":"cache","path":"api/tags/cache.json"}]},{"title":"身在IT界，不能不知道这些名词","slug":"身在IT界，不能不知道这些名词","date":"2017-08-20T12:44:49.000Z","updated":"2019-01-29T09:23:55.540Z","comments":true,"path":"api/articles/身在IT界，不能不知道这些名词.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>RT，作为码农 / 程序猿 / 攻城狮，有些名词不知道可就说不过去了</p>\n<h2 id=\"geek\"><a href=\"#geek\" class=\"headerlink\" title=\"geek\"></a>geek</h2><p>这是美国“俚语”，音译为“极客”。很多人都想成为“极客”，也有很多人自诩“极客”；然而究竟什么样的人算是“极客”呢？根据我的理解，我认为那种对自己要求极致并且不食人间烟火的技术达人，比如“楼教主”这种编程奇才。。</p>\n<h2 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h2><p>Polyfill 或者 Polyfiller，是英国 Web 开发者 Remy Sharp <strong>在咖啡店蹲坑的时候拍脑袋造出来的</strong>。当时他想用一个词来形容”用 JavaScript（或者 Flash 之类的什么鬼）来实现一些浏览器不支持的原生 API”。苦思冥想一直想不到合适的单词，于是他一怒之下造了一个单词 Polyfill。除了他自己用这个词以外，他还给其他开发者用。随着他在各种 Web 会议演讲和他写的书《Introducing HTML5》中频繁提到这个词，大家用了都觉得很好，就一起来用。 Polyfill 的准确意思为：<strong>用于实现浏览器并不支持的原生 API 的代码</strong>。一个 Polyfill 是抹平新老浏览器标准原生 API 之间的差距的一种封装，而不是实现自己的 API。这里有一堆 <code>Polyfills</code>，有兴趣可以把玩一下：<a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills\" target=\"_blank\" rel=\"noopener\">HTML5 Cross Browser Polyfills</a></p>\n<h2 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack\"></a>hack</h2><p>hack 一般用来形容某些“黑科技”，是指为了满足程序的某些需求而搞的一些代码，比如 css 中的一些 hack：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span><span class=\"selector-attr\">[if IE]</span>&gt;</span><br><span class=\"line\">这段文字只在<span class=\"selector-tag\">IE</span>浏览器显示</span><br><span class=\"line\">&lt;!<span class=\"selector-attr\">[endif]</span><span class=\"selector-tag\">--</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bug\"><a href=\"#bug\" class=\"headerlink\" title=\"bug\"></a>bug</h2><p>懂的人自然懂，有一个段子分享一下：</p>\n<ul>\n<li>我们是谁？程序员</li>\n<li>我们是做什么的？消除 bug</li>\n<li>然后做什么？写 bug</li>\n</ul>\n<h2 id=\"ssr\"><a href=\"#ssr\" class=\"headerlink\" title=\"ssr\"></a>ssr</h2><p>对于前端这个行业来说，ssr 不是你家的大天狗，也不是他家的妖刀姬，更不是别人家的姑获鸟，而是<strong>服务端渲染（Server Side Render）</strong>的意思，自从 NodeJS 问世以后，前端就出现了服务端渲染的方式，相比前端渲染，ssr 究竟有哪些优点呢？其本身又存在哪些不足呢？推荐一篇文章：<a href=\"https://github.com/camsong/blog/issues/8\" target=\"_blank\" rel=\"noopener\">精读前后端渲染之争</a>。</p>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"life","path":"api/tags/life.json"},{"name":"IT","path":"api/tags/IT.json"}]}]}