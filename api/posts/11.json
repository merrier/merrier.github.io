{"total":121,"pageSize":10,"pageCount":13,"data":[{"title":"写给刚接触前端的你","slug":"写给刚接触前端的你","date":"2017-04-03T15:25:04.000Z","updated":"2019-07-04T08:09:14.549Z","comments":true,"path":"api/articles/写给刚接触前端的你.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>转眼间，我做前端也有两年左右了，从一开始本科毕设用 HDwiki 搭了一个小网站，到现在用 wordpress 搭个人博客；从一开始改 html 的 bug 都得百度一下午，到现在可以试着写一些小插件；从一开始不知道为什么变量不用双引号，到现在将近二十万行的代码量；我承认这两年我进步了很多，但是回想起来还是有很多遗憾和不足，所以在这里想对刚接触前端的你说一些话，以免走弯路。这篇文章只对刚接触前端不到两个月，或者刚从所谓的“速成班”学成归来，对于前端之路比较迷茫的同学有用</p>\n<h2 id=\"前端进阶路线\"><a href=\"#前端进阶路线\" class=\"headerlink\" title=\"前端进阶路线\"></a>前端进阶路线</h2><p>前端学习路线是典型的先易后难，上手很简单，但是一旦深入就会发现比其他任何语言都要难，内容都要多得多，因为前端需要学的东西实在是太多太多，下面是我总结的进阶路线（我当然仍处于初级阶段）：</p>\n<ol>\n<li>CSS（CSS3）</li>\n<li>HTML（HTML5）</li>\n<li>JavaScript（ES6）</li>\n<li>HTTP 协议</li>\n<li>代码优化</li>\n<li>性能优化</li>\n<li>框架了解和学习</li>\n<li>自己封装框架并进行模块化组件开发</li>\n<li>全栈 Node.js</li>\n</ol>\n<p>接下来我会从以上的方面分别进行总结（有些坑希望你别爬，有些捷径希望你知道），前 5 个阶段我用两年的时间渡过了（代码优化是永久话题，并没有终点），后面的几个阶段我会摘抄一些其他人的总结；如果你没有耐心看下去那么多文字，可以直接看最后的总结O(∩_∩)O</p>\n<blockquote>\n<p>关于前端进阶路线，除了下面我的总结，推荐另一篇文章：<a href=\"https://juejin.im/post/5cd4cbe2518825408b33e9c5\" target=\"_blank\" rel=\"noopener\">【译】前端练级攻略</a></p>\n</blockquote>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>如果你学习了一段时间前端，可能会觉得 CSS 好简单，但是 CSS 也有瓶颈期，而且运用得当的话会帮我们省去很多 JavaScript 代码，针对于 css 如何学习，我有以下建议：</p>\n<ol>\n<li>只要是前端入门学习，<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"noopener\">w3c</a>是再好不过的网站，这个网站有大量的实例教程，希望你有时间的话能够过一遍，就算记不住也没关系，有印象即可</li>\n<li>MDN上有很多基础知识的文章，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started\" target=\"_blank\" rel=\"noopener\">CSS入门教程</a>也是 CSS 学习的好材料</li>\n<li>CSS3 是一个突破点，因为之前 CSS2 的那些属性大家都已经用烂了，而 CSS3 尚处于开发研究阶段，如果能够熟练使用将会使自己升值不少</li>\n<li>在了解了 CSS 的选择器、属性和值之后，再下一步就是 CSS 布局了，这里有一个专门用来学习 <a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener\">CSS布局</a>的网站，里面的教程很全面，相信你可以学到很多新的知识点</li>\n<li>至少会用一种 CSS 预处理工具（Sass、Less、Stylus），这些工具会让你的 CSS 书写更加快捷</li>\n</ol>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>作为前端界的“领头人”，html 是我们和用户离得最近的代码语言，而 html 也是最容易提升的前端语言了，因为其核心就是语义化和加载速度，而对于前端初学者，我有话要说：</p>\n<ol>\n<li>html 基础学习依然推荐 <a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"noopener\">w3c</a>和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML\" target=\"_blank\" rel=\"noopener\">MDN</a>，这两个网站的风格不同，w3c 更书本化一些，可能需要一些耐心才能看下去，而 MDN 从网站的配色到文字描述风格都更“高大上”一些</li>\n<li>HTML5 方案已经实施很久了，各大浏览器基本上都已经实现了兼容（IE 我就不吐槽了），所以对于 h5 的学习也是重点内容，尤其是 canvas、audio &amp; video 以及和性能优化相关的各种标签</li>\n<li>一定要从刚写 html 开始就养成“语义化”和减少嵌套的习惯，文本多用 p 标签，代码块多用 pre 标签，表单提交多用 submit……</li>\n</ol>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><p>如果说 html 是前端界的“领头人”，那 JS 就是前端界的“大高个”，也是最容易拉开差距的一门语言，所以 JS 的学习对于前端初学者来说就显得尤为重要了：</p>\n<ol>\n<li>依然推荐 <a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"noopener\">w3c</a>，和 html 与 css 不同的是，w3c 上关于 JS 的教程实在是太多，如果真的时间不充足的话可以看的粗一些，知道概念就可以了</li>\n<li>在对 JS 有一些概念之后，如果有比较急得项目需求，我推荐你看一下 jQuery 的相关教程（当然还是 w3c），因为 jQuery 在 JS 框架里属于非常简单的，入门很快，但是能解决大部分项目需求，是一个性价比很高的 js 库</li>\n<li>如果你的项目需要用到 React 以及 Vue.js 等框架，可能需要看一下 ES6 的相关知识，推荐阮一峰的 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a></li>\n</ol>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>可能你会比较纳闷，为什么还需要知道 HTTP？请记住，前端是和客户端打交道的（至少目前来看是这样的），所以各种和客户端以及服务器相关的协议一定要了解一些，这对于你的前端水平提升尤为重要，可以让你更容易找到 bug 出在哪里（两年的前端经验使我更加明确这一点）</p>\n<ol>\n<li>知道 URL 是怎么回事以及其组成规则</li>\n<li>可以上网查一下 HTTP 各种状态码的含义，在调试代码和找 bug 的过程中会经常用到</li>\n<li>cookie &amp; session 的知识在某些类型的网站会经常用到（支付、博客）</li>\n</ol>\n<h2 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h2><p>对于程序猿来说，代码就像自己的门面，如果代码一团糟，就会让同行笑话甚至会因此丢掉工作，所以代码优化对于程序猿来说就属于必经阶段了：</p>\n<h3 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1. css\"></a>1. css</h3><ul>\n<li>减少选择器的叠加层数</li>\n<li>少用 !important</li>\n<li>注意 CSS 书写顺序</li>\n<li>命名规则尽量语义化</li>\n<li>少用内联样式</li>\n<li>注释、注释、注释！</li>\n</ul>\n<p>具体可以参考我的另一篇文章：<a href=\"/20170404/css-writing-specification.html\">CSS书写规范</a></p>\n<h2 id=\"2-html\"><a href=\"#2-html\" class=\"headerlink\" title=\"2. html\"></a>2. html</h2><ul>\n<li>减少 div 的嵌套层数</li>\n<li>多用语义化标签（h5 标签居多）</li>\n<li>少用 id</li>\n<li>注释、注释、注释！</li>\n</ul>\n<h2 id=\"3-JavaScript\"><a href=\"#3-JavaScript\" class=\"headerlink\" title=\"3. JavaScript\"></a>3. JavaScript</h2><ul>\n<li>按照功能进行命名</li>\n<li>尽可能面向对象编程</li>\n<li>注释、注释、注释！</li>\n</ul>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><p>前端是直接和用户打交道的，而浏览器的响应速度更会直接影响到用户体验，如果一个网站打开需要两秒钟，可能会有百分之 30 的用户直接关掉页面；如果一个网站打开需要五秒钟，可能以后就没有这家网站了，所以性能优化是一个优秀的前端工程师必备技能，同时也是终极目标；关于性能优化，首先你必须看过雅虎军规，没看过可以看看这篇文章-<a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"noopener\">毫秒必争，前端网页性能最佳实践</a>。除此之外，你需要知道，性能优化包括以下几个方面：</p>\n<ol>\n<li>针对浏览器渲染页面原理的 CSS、JavaScript 语法层面优化</li>\n<li>针对 HTTP 协议特性网络性能优化（合并资源、压缩、多个域名等）</li>\n<li>用户体验层面性能优化（懒加载之类）</li>\n</ol>\n<p>在现在计算机运行速度下，只要代码写的不是特别过分，第一点对性能优化能做的很少，我们使用了更好的语法也不会对网页提速很多。第二点是必须要做的，而第三点现在主要成了性能优化的主要发力点</p>\n<h2 id=\"框架了解和学习\"><a href=\"#框架了解和学习\" class=\"headerlink\" title=\"框架了解和学习\"></a>框架了解和学习</h2><p>前端和所有计算机工作一样，终极目标都是解决问题，所以千万不要沉迷于框架或者语言的无谓之争上。对于前端来说，各种框架层出不穷，各种知识学都学不完，所以将 html、css 和 js 的基础掌握牢固才能以不变应万变，当然，框架也是为了方便书写代码和优化才产生的，其存在必有其合理之处，如果你已经开始从事前端工作，请听从领导的安排，一句话就是之前用什么框架现在就用什么框架吧。。除非决定要更换框架，否则不要轻易换框架，因为可能代价会比较高 如果你只是在校学生，还有很久的时间用来学习，我希望你能够把更多的精力放在基础学习上，不会因为各种各样的框架而不知道学什么；只要将基础知识掌握牢固，就什么框架都不在话下了，学习起来会很快</p>\n<h2 id=\"自己封装插件并进行模块化组件开发\"><a href=\"#自己封装插件并进行模块化组件开发\" class=\"headerlink\" title=\"自己封装插件并进行模块化组件开发\"></a>自己封装插件并进行模块化组件开发</h2><p>暂无</p>\n<h2 id=\"全栈-Node-js\"><a href=\"#全栈-Node-js\" class=\"headerlink\" title=\"全栈 Node.js\"></a>全栈 Node.js</h2><p>不得不说，Node.js 在前端领域已经火的不要不要的了，因为其具备其他框架没有的特性——用 js 写后台；试想一下，一家公司只需要雇一个前端工程师就能完成前后端的所有工作，这将节省多少成本（有时候，前后端沟通联调也需要很长的时间成本），同时在 Node.js 基础上开发的插件也越来越多，使 Node.js 的功能愈加强大，似有一统前端之势。所以，如果前端基础学习遇到瓶颈或者想去用 Node.js 的公司，可以尝试一下，不仅可以学到 ES6 的各种新知识还可以了解到异步编程、按需加载等比较新的技术</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"推荐书籍\"><a href=\"#推荐书籍\" class=\"headerlink\" title=\"推荐书籍\"></a>推荐书籍</h3><ul>\n<li><a href=\"https://www.amazon.cn/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81-Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93-%E6%9B%B9%E5%88%98%E9%98%B3/dp/B003U8XUKQ/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491232879&amp;sr=1-1&amp;keywords=%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81-Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93\" target=\"_blank\" rel=\"noopener\">《编写高质量代码–Web前端开发修炼之道》</a></li>\n<li><a href=\"https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491232933&amp;sr=1-1&amp;keywords=JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">《JavaScript高级程序设计》</a></li>\n<li><a href=\"https://www.amazon.cn/O-Reilly%E7%B2%BE%E5%93%81%E5%9B%BE%E4%B9%A6%E7%B3%BB%E5%88%97-JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%BC%97%E5%85%B0%E7%BA%B3%E6%A0%B9/dp/B007VISQ1Y/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491232959&amp;sr=1-1&amp;keywords=JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"noopener\">《JavaScript权威指南》</a></li>\n<li><a href=\"https://www.amazon.cn/%E9%94%8B%E5%88%A9%E7%9A%84jQuery-%E5%8D%95%E4%B8%9C%E6%9E%97/dp/B0089TDFNS/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491232981&amp;sr=1-1&amp;keywords=%E9%94%8B%E5%88%A9%E7%9A%84jQuery\" target=\"_blank\" rel=\"noopener\">《锋利的jQuery》</a></li>\n<li><a href=\"http://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-%E5%9B%BE%E8%A7%A3HTTP-%E4%B8%8A%E9%87%8E%E5%AE%A3/dp/B00JTQK1L4/ref=sr_1_1?ie=UTF8&amp;qid=1454568244&amp;sr=8-1&amp;keywords=%E5%9B%BE%E8%A7%A3http\" target=\"_blank\" rel=\"noopener\">《图解HTTP》</a></li>\n<li><a href=\"https://www.amazon.cn/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%90%89%E5%B0%94%E5%88%A9/dp/B008XFDQ14/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491233005&amp;sr=1-1&amp;keywords=HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"noopener\">《HTTP权威指南》</a></li>\n<li><a href=\"https://www.amazon.cn/%E7%B2%BE%E5%BD%A9%E7%BB%9D%E4%BC%A6%E7%9A%84CSS-%E8%BF%88%E8%80%B6/dp/B008F4VJ94/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491233037&amp;sr=1-1&amp;keywords=%E7%B2%BE%E5%BD%A9%E7%BB%9D%E4%BC%A6%E7%9A%84CSS\" target=\"_blank\" rel=\"noopener\">《精彩绝伦的CSS》</a></li>\n<li><a href=\"https://www.amazon.cn/%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1-HTML5%E5%92%8CCSS3%E5%AE%9E%E6%88%98-%E7%AC%AC2%E7%89%88-%E8%8B%B1-%E6%9C%AC-%E5%BC%97%E8%8E%B1%E6%81%A9/dp/B01MYA9MC1/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491233055&amp;sr=1-1&amp;keywords=%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1%EF%BC%9AHTML5%E5%92%8CCSS3%E5%AE%9E%E6%88%98\" target=\"_blank\" rel=\"noopener\">《响应式Web设计：HTML5和CSS3实战》</a></li>\n<li><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00FF3P8FY/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491233075&amp;sr=1-1&amp;keywords=Head+First+HTML%E4%B8%8ECSS\" target=\"_blank\" rel=\"noopener\">《Head First HTML与CSS》</a></li>\n<li><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B016IB30L0/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1491233101&amp;sr=1-1&amp;keywords=HTML5%E4%B8%8ECSS3%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"noopener\">《HTML5与CSS3权威指南》</a> </li>\n</ul>\n<h3 id=\"其他需要掌握的技术\"><a href=\"#其他需要掌握的技术\" class=\"headerlink\" title=\"其他需要掌握的技术\"></a>其他需要掌握的技术</h3><ul>\n<li><strong>git</strong>：代码托管工具</li>\n<li><strong>Markdown</strong>：github 御用格式，语法简单实用，养成多写文档的习惯大有裨益</li>\n<li><strong>vi命令</strong>：界面简单但是功能强大的编辑器-Vim，知道一些常用命令可以事半功倍</li>\n<li><strong>Linux</strong>：Linux 即使在今天依然发挥着强大的优势</li>\n</ul>\n<h3 id=\"多看、多想、多做\"><a href=\"#多看、多想、多做\" class=\"headerlink\" title=\"多看、多想、多做\"></a>多看、多想、多做</h3><p>作为前端初学者，一定要<strong>多看、多想、多做</strong>：</p>\n<p>多看：经常浏览一些做得比较好的网站，看他们的 html 结构、页面布局、class 命名以及各种动画设计和实现，会不时地发现新的创意和灵感<br>多想：碰到 bug 一定要多想，多尝试；从我自身而言，我觉得找 bug 是提升最快的一种方式，而很多初学者都很怕找 bug，以至于上次遇到的 bug 这次遇到了还是不会解决，这会严重阻碍你的进步！<br>多做：和所有语言一样，只看不做是不会记得久的，所以在看文字教程和视频教程的同时，一定要多在编辑器里敲一敲代码，同时也要尝试着做一下笔记，对于个人的成长也会很有帮助</p>\n<h3 id=\"忌浮躁\"><a href=\"#忌浮躁\" class=\"headerlink\" title=\"忌浮躁\"></a>忌浮躁</h3><p>不要为框架而烦恼，只要学好了基础，框架就不是难题；但如果基础学不好，用框架的时候也会碰到各种麻烦，所以作为前端工程师，一定要戒骄戒躁，遇到不会的问题先自己思考，实在想不出来了再去询问前辈或者上网找答案，这样才能提升自己的水平</p>\n<h3 id=\"了解一门后台语言\"><a href=\"#了解一门后台语言\" class=\"headerlink\" title=\"了解一门后台语言\"></a>了解一门后台语言</h3><p>最好<strong>了解一门后台语言</strong>，最起码读得懂后台写的什么，这样会省去很多前后台沟通的时间</p>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"},{"name":"心得","path":"api/tags/心得.json"}]},{"title":"前端面试系列（5）——CSS盒子模型","slug":"前端面试系列（5）——CSS盒子模型","date":"2017-04-03T12:20:11.000Z","updated":"2019-07-04T08:09:14.553Z","comments":true,"path":"api/articles/前端面试系列（5）——CSS盒子模型.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_16.gif","content":"<p>盒子模型是 html + css 最核心的基础知识，理解了这个重要的概念才能更好的排版，进行页面布局；同时在前端面试或笔试中也经常遇到，所以深入理解盒子模型对自身前端水平的提升有很大帮助。</p>\n<h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>css 盒子模型又称为框模型（Box Model），包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素，如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_16.gif\" alt=\"\" width=\"400\"></div>\n\n<p>图中最内部的框是元素的实际内容，也就是元素框，紧挨着元素框外部的是内边距 padding，其次是边框（border），然后最外层是外边距（margin），整个构成了框模型。通常我们设置的背景显示区域，就是内容、内边距、边框这一块范围。下面是对这四个部分的说明：</p>\n<ul>\n<li><strong>Margin（外边距）</strong> - 边框外围区域。Margin 没有背景颜色，它是完全透明</li>\n<li><strong>Border（边框）</strong> - 边框周围的填充和内容。边框是受到盒子的背景颜色影响</li>\n<li><strong>Padding（内边距）</strong> - 清除内容周围的区域。会受到框中填充的背景颜色影响</li>\n<li><strong>Content（内容）</strong> - 盒子的内容，显示文本和图像</li>\n</ul>\n<p>那么，元素框的总宽度 = 元素（element）的 width + padding 的左边距和右边距的值 + margin 的左边距和右边距的值 + border 的左右宽度；<br>元素框的总高度 = 元素（element）的height + padding 的上下边距的值 + margin 的上下边距的值 ＋ border 的上下宽度。<br>所以，在 box-sizing 为 content-box 也就是上面所述盒子模型时，当我们指定了一个 CSS 元素的高度和宽度属性时，只是设置了内容区域的高度和宽度</p>\n<h2 id=\"盒子模型表现\"><a href=\"#盒子模型表现\" class=\"headerlink\" title=\"盒子模型表现\"></a>盒子模型表现</h2><h3 id=\"外边距合并（叠加）\"><a href=\"#外边距合并（叠加）\" class=\"headerlink\" title=\"外边距合并（叠加）\"></a>外边距合并（叠加）</h3><p>两个上下方向相邻的元素框垂直相遇时，外边距会合并，合并后的外边距的高度等于两个发生合并的外边距中较高的那个边距值，如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_17.png\" alt=\"\" width=\"500\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_18.png\" alt=\"\" width=\"500\"></div>\n\n<p>比较容易理解，所以在页面中有时候遇到实际情况是需要考虑这个因素的。当然外边距合并其实也有存在的意义，如下图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_19.png\" alt=\"\" width=\"500\"></div>\n\n<p>关于 margin 合并，其实还有很多不为人知的知识和问题，稍晚一些我会再专门针对 margin 合并写一篇文章（其实应该不算是“写”，因为是对张鑫旭的讲解的总结），感兴趣的童鞋可以直接搜索 “\bmargin 合并”查看</p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>box-sizing 属性是用户界面属性里的一种（CSS3），之所以介绍它，是因为这个属性跟盒子模型有关，而且在 css reset 中有可能会用到它。</p>\n<blockquote>\n<p>box-sizing: content-box | border-box | inherit; </p>\n</blockquote>\n<h3 id=\"content-box\"><a href=\"#content-box\" class=\"headerlink\" title=\"content-box\"></a>content-box</h3><p>默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的 width 只包含内容。</p>\n<p>即总宽度 = margin + border + padding + width</p>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><p>设置的 width 值其实是除 margin 外的 border + padding + element 的总宽度。盒子的 width 包含 border + padding + 内容</p>\n<p>即总宽度 = margin + width，关于 border-box 的使用：</p>\n<ol>\n<li>一个 box 宽度为 100%，又想要两边有内间距，这时候用就比较好</li>\n<li>全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度。</li>\n</ol>\n<h3 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h3><p>规定应从父元素继承 box-sizing 属性的值 下面两张图形象的展示了 box-sizing 为 content-box 和 border-box 时的区别：</p>\n<p>（1）标准的盒子模型（content-box）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_14.png\" alt=\"\" width=\"400\"></div>\n\n<p>（2）IE盒子模型（border-box）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_15.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"盒子模型应用\"><a href=\"#盒子模型应用\" class=\"headerlink\" title=\"盒子模型应用\"></a>盒子模型应用</h2><h3 id=\"用盒子模型画三角形\"><a href=\"#用盒子模型画三角形\" class=\"headerlink\" title=\"用盒子模型画三角形\"></a>用盒子模型画三角形</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width : 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            border : 100px solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border-top</span> : 100<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">blue</span>; <span class=\"comment\">/*这里可以设置border的top、bottom、left、right四个方向的三角*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>页面显示结果为：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_20.png\" alt=\"\" width=\"200\"></div>\n\n<h2 id=\"盒子模型产生的问题\"><a href=\"#盒子模型产生的问题\" class=\"headerlink\" title=\"盒子模型产生的问题\"></a>盒子模型产生的问题</h2><h3 id=\"margin-越界\"><a href=\"#margin-越界\" class=\"headerlink\" title=\"margin 越界\"></a>margin 越界</h3><p>即第一个子元素的 margin-top 和最后一个子元素的 margin-bottom 的越界问题，以第一个子元素的margin-top 为例：当父元素没有边框 border 时，设置第一个子元素的 margin-top 值的时候，会出现 margin-top 值加在父元素上的现象，解决方法有四个：</p>\n<ol>\n<li>给父元素加边框 border （副作用）</li>\n<li>给父元素设置 padding值  （副作用）</li>\n<li>父元素添加 overflow: hidden （副作用）</li>\n<li><strong>父元素加前置内容生成</strong>。（推荐）</li>\n</ol>\n<p>以第 4 种方法为例：</p>\n<p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">width </span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height </span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color </span>: red;       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> : <span class=\"selector-tag\">before</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">content </span>: <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">     <span class=\"attribute\">display </span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">width </span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height </span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color </span>: green;</span><br><span class=\"line\">     <span class=\"attribute\">margin-top </span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器间的盒子模型\"><a href=\"#浏览器间的盒子模型\" class=\"headerlink\" title=\"浏览器间的盒子模型\"></a>浏览器间的盒子模型</h3><ol>\n<li>ul 标签在 Mozilla 中默认是有 padding 值的，而在 IE 中只有 margin 有值。</li>\n<li>标准盒子模型与 IE 模型之间的差异：标准的盒子模型就是上述介绍的那种，而 IE 模型更像是 box-sizing: border-box；其内容宽度还包含了 border 和 padding。解决办法就是：在 html 模板中加 doctype 声明。但是我自己在项目中已经很少考虑 IE 了，如果没有特殊要求的话，IE 基本上可以完全忽略了</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/clearsky/p/5696286.html\" target=\"_blank\" rel=\"noopener\">css 盒子模型理解</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"前端面试系列（4）——CSS选择器","slug":"前端面试系列（4）——CSS选择器","date":"2017-04-03T03:43:13.000Z","updated":"2019-07-04T08:09:14.553Z","comments":true,"path":"api/articles/前端面试系列（4）——CSS选择器.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_92.png","content":"<p>这篇文章主要总结了 CSS 选择器的相关知识，CSS 的选择器是前端面试或者笔试中经常问到和用到的，同时对于开发来说也是必备基础知识</p>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><h3 id=\"不同级别\"><a href=\"#不同级别\" class=\"headerlink\" title=\"不同级别\"></a>不同级别</h3><p>级别依次递减：</p>\n<ol>\n<li>在属性后面使用 <code>!important</code> 会覆盖页面内任何位置定义的元素样式。</li>\n<li>作为 style 属性写在元素内的样式（简称为“内联样式”）</li>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器</li>\n<li>浏览器自定义</li>\n</ol>\n<p>另外，在《精彩绝伦的CSS》这本书中，作者用数字定量了选择器的优先级，具体规则为：</p>\n<ul>\n<li>每个元素描述符贡献 0，0，0，1</li>\n<li>每个类、伪类或者属性描述符贡献 0，0，1，0</li>\n<li>每个 ID 描述符贡献 0，1，0，0</li>\n<li>行内样式或内联样式贡献1 ，0，0，0</li>\n</ul>\n<p>可能看到这里你还比较糊涂，那请看下面的图片：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_92.png\" alt=\"\" width=\"400\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_93.png\" alt=\"\" width=\"400\"></div>\n\n<p>其实就是简单的加法，数字越大优先级越高（为何如此计算尚不得知，仅作为额外知识），!important 会覆盖任何没有 !important 的属性</p>\n<h3 id=\"同一级别\"><a href=\"#同一级别\" class=\"headerlink\" title=\"同一级别\"></a>同一级别</h3><p>同一级别中后写的会覆盖先写的样式</p>\n<h2 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h2><p>这几类是使用频率最高的几种，同时在各个版本的 reset.css 中也会经常出现</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>通用元素选择器，匹配页面任何元素（使用频率较低）</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>id 选择器，匹配特定 id 的元素</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>类选择器，匹配 class 包含（不是等于）特定类的元素</td>\n</tr>\n<tr>\n<td>element</td>\n<td>标签选择器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><p>这些选择器让我们的样式添加更加灵活，同时需要注意的是不只能写两层，理论上讲只要找得到可以写无限层，但是层数越多越影响性能，同时也会有优先级的麻烦，所以争取用最简短、最准确的选择器才是正道</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“E,F”</td>\n<td>多元素选择器，用 “”,”” 分隔，同时匹配元素 E 或元素 F</td>\n</tr>\n<tr>\n<td>“E F “</td>\n<td>后代选择器，用空格分隔，匹配 E 元素所有的后代元素F</td>\n</tr>\n<tr>\n<td>E&gt;F</td>\n<td>子元素选择器，用 “”&gt;”” 分隔，匹配 E 元素的所有直接子元素 F</td>\n</tr>\n<tr>\n<td>E+F</td>\n<td>直接相邻选择器，匹配 E 元素之后的相邻的同级元素 F</td>\n</tr>\n<tr>\n<td>E~F</td>\n<td>普通相邻选择器（弟弟选择器），匹配E元素之后的同级元素F（无论直接相邻与否）</td>\n</tr>\n<tr>\n<td>.class1.class2</td>\n<td>匹配类中既包含 class1 又包含 class2 的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><p>这一类的选择器用的比较少，因为其实用性并不是很高，同时在性能方面也会比较差，所以可以作为了解，如果真需要用属性去选择的时候知道 CSS 有属性选择器就可以了</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E[attr]</td>\n<td>匹配所有具有属性 attr 的元素，div[id] 就能取到所有有 id 属性的 div</td>\n</tr>\n<tr>\n<td>E[attr=value]</td>\n<td>匹配属性 attr 值为 value 的元素，div[id=test] 匹配 id 为 test 的 div</td>\n</tr>\n<tr>\n<td>E[attr~=value]</td>\n<td>匹配所有属性 attr 具有多个空格分隔、其中一个值等于 value 的元素</td>\n</tr>\n<tr>\n<td>E[attr&#124;=value]</td>\n<td>匹配所有 attr 属性具有多个 ”-” 分隔、其中一个值以 value 开头的元素，主要用于 lang 属性，比如“en”、“en-us”</td>\n</tr>\n<tr>\n<td>E[attr ^=value]</td>\n<td>匹配属性 attr 的值以 value 开头的元素</td>\n</tr>\n<tr>\n<td>E[attr $=value]</td>\n<td>匹配属性 attr 的值以 value 结尾的元素</td>\n</tr>\n<tr>\n<td>E[attr *=value]</td>\n<td>匹配属性 attr 的值包含 value 的元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>这一类选择器大部分都是 CSS3 新增类型，可以更方便、更快捷地匹配到目标元素，所以以下这些选择器很重要，需要牢牢记住</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-child</td>\n<td>匹配元素E的第一个子元素</td>\n</tr>\n<tr>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>E:visited</td>\n<td>匹配所有已被点击的链接</td>\n</tr>\n<tr>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n</tr>\n<tr>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的 E 元素</td>\n</tr>\n<tr>\n<td>E:focus</td>\n<td>匹配获得当前焦点的 E 元素</td>\n</tr>\n<tr>\n<td>E:lang(c)</td>\n<td>匹配 lang 属性等于 c 的 E 元素</td>\n</tr>\n<tr>\n<td>E:enabled</td>\n<td>匹配表单中可用的元素</td>\n</tr>\n<tr>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>E:checked</td>\n<td>匹配表单中被选中的 radio 或 checkbox 元素</td>\n</tr>\n<tr>\n<td>E::selection</td>\n<td>匹配用户当前选中的元素</td>\n</tr>\n<tr>\n<td>E:root</td>\n<td>匹配文档的根元素，对于 HTML 文档，就是 HTML 元素</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配其父元素的第 n 个子元素，第一个编号为 1</td>\n</tr>\n<tr>\n<td>E:nth-last-child(n)</td>\n<td>匹配其父元素的倒数第 n 个子元素，第一个编号为 1</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>与 :nth-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:nth-last-of-type(n)</td>\n<td>与 :nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:last-child</td>\n<td>匹配父元素的最后一个子元素，等同于 :nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于 :nth-of-type(1)</td>\n</tr>\n<tr>\n<td>E:last-of-type</td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于 :nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:only-child</td>\n<td>匹配父元素下仅有的一个子元素，等同于 :first-child:last-child 或  :nth-child(1):nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:only-of-type</td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于 :first-of-type:last-of-type 或 :nth-of-type(1):nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:empty</td>\n<td>匹配一个不包含任何子元素的元素，文本节点也被看作子元素</td>\n</tr>\n<tr>\n<td>E:not(selector)</td>\n<td>匹配不符合当前选择器的任何元素</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h2><p>不得不说，:before 和 :after 选择器好用到爆（谁用谁知道），在一些悬停动画、箭头绘制以及 clearfix 样式里会经常见到</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-line</td>\n<td>匹配 E 元素内容的第一行</td>\n</tr>\n<tr>\n<td>E:first-letter</td>\n<td>匹配 E 元素内容的第一个字母</td>\n</tr>\n<tr>\n<td>E:before</td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>E:after</td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>CSS 的选择器是基础中的基础，而有些选择器使用频率是比较低的，但是一定要知道 CSS 的选择器都有哪些，遇到新的需求时会少很多麻烦。同时，不要经常使用多层选择器，这会使页面渲染负担加重，影响性能。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/dolphinX/p/3347713.html\" target=\"_blank\" rel=\"noopener\">十分钟搞定CSS选择器</a></li>\n<li><a href=\"http://www.w3school.com.cn/cssref/css_selectors.asp\" target=\"_blank\" rel=\"noopener\">CSS 选择器参考手册</a></li>\n</ul>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"Leetcode的JS实现——Easy篇（上）","slug":"Leetcode的JS实现——Easy篇（上）","date":"2017-03-31T09:24:05.000Z","updated":"2019-07-04T08:09:14.545Z","comments":true,"path":"api/articles/Leetcode的JS实现——Easy篇（上）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>由于要找实习，所以最近几周一直在刷 leetcode（打算先把 easy 刷完，大概一天 10 道左右）；而作为一个前端码农，也就只能用 JS 实现算法了，但是众所周知，JS 在算法实现方面是真的不如其他知名语言（java、python、c++），所以绝大多数题都没有 JS 的标准答案，这让我刷 leetcode 的过程变得异常艰难；为了方便和我一样用 JS 刷 leetcode 的小伙伴，打算写一篇纯干货（代码）的文章，对如何用 JS 实现 leetcode 算法题进行总结。（鉴于我水平有限和 JS 本身的局限性，有好多题目我虽然看到了，但是最终没有用 JS 实现，如果你知道某些题目的 JS 实现或有更优解法，请通过网站中的联系方式联系我，O(∩_∩)O谢谢）</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>leetcode 地址：<a href=\"https://leetcode.com/problemset/algorithms/，本文章不会贴出题目，可以点击标题链接查看原题目\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problemset/algorithms/，本文章不会贴出题目，可以点击标题链接查看原题目</a></p>\n<p>排序方式：按照\b本难度中题目的 accepted 统计</p>\n<h2 id=\"JS代码实现\"><a href=\"#JS代码实现\" class=\"headerlink\" title=\"JS代码实现\"></a>JS代码实现</h2><h3 id=\"461-Hamming-distance\"><a href=\"#461-Hamming-distance\" class=\"headerlink\" title=\"461-Hamming distance\"></a><a href=\"https://leetcode.com/problems/hamming-distance/#/description\" target=\"_blank\" rel=\"noopener\">461-Hamming distance</a></h3><h4 id=\"方法一：利用-replace-方法\"><a href=\"#方法一：利用-replace-方法\" class=\"headerlink\" title=\"方法一：利用 replace() 方法\"></a>方法一：利用 replace() 方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; y</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x^y).toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">\"\"</span>).length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用异或\"><a href=\"#方法二：利用异或\" class=\"headerlink\" title=\"方法二：利用异或\"></a>方法二：利用异或</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; y</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xor = x ^ y, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">32</span>;i++) count += (xor &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"476-Number-Complement\"><a href=\"#476-Number-Complement\" class=\"headerlink\" title=\"476-Number Complement\"></a><a href=\"https://leetcode.com/problems/number-complement/#/description\" target=\"_blank\" rel=\"noopener\">476-Number Complement</a></h3><h4 id=\"方法一：利用二进制\"><a href=\"#方法一：利用二进制\" class=\"headerlink\" title=\"方法一：利用二进制\"></a>方法一：利用二进制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findComplement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num^(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,(num.toString(<span class=\"number\">2</span>).length))<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用位运算中的移位\"><a href=\"#方法二：利用位运算中的移位\" class=\"headerlink\" title=\"方法二：利用位运算中的移位\"></a>方法二：利用位运算中的移位</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findComplement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mask = num;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    mask |= mask &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num ^ mask;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"500-Keyboard-Row\"><a href=\"#500-Keyboard-Row\" class=\"headerlink\" title=\"500-Keyboard Row\"></a><a href=\"https://leetcode.com/problems/keyboard-row/#/description\" target=\"_blank\" rel=\"noopener\">500-Keyboard Row</a></h3><p>暂无</p>\n<h3 id=\"412-Fizz-Buzz\"><a href=\"#412-Fizz-Buzz\" class=\"headerlink\" title=\"412-Fizz Buzz\"></a><a href=\"https://leetcode.com/problems/fizz-buzz/#/description\" target=\"_blank\" rel=\"noopener\">412-Fizz Buzz</a></h3><h4 id=\"方法一：各种-if\"><a href=\"#方法一：各种-if\" class=\"headerlink\" title=\"方法一：各种 if\"></a>方法一：各种 if</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fizzBuzz = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%<span class=\"number\">15</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"FizzBuzz\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i%<span class=\"number\">5</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"Buzz\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i%<span class=\"number\">3</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"Fizz\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr[i<span class=\"number\">-1</span>] = <span class=\"string\">\"\"</span> + i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"344-Reverse-String\"><a href=\"#344-Reverse-String\" class=\"headerlink\" title=\"344-Reverse String\"></a><a href=\"https://leetcode.com/problems/reverse-string/#/description\" target=\"_blank\" rel=\"noopener\">344-Reverse String</a></h3><h4 id=\"方法一：从后往前遍历\"><a href=\"#方法一：从后往前遍历\" class=\"headerlink\" title=\"方法一：从后往前遍历\"></a>方法一：从后往前遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>,n=s.length;i&lt;n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        str += s[n-i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：递归\"><a href=\"#方法二：递归\" class=\"headerlink\" title=\"方法二：递归\"></a>方法二：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftStr = s.substring(<span class=\"number\">0</span>, length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightStr = s.substring(length / <span class=\"number\">2</span>, length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reverseString(rightStr) + reverseString(leftStr);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"496-Next-Greater-Element-I\"><a href=\"#496-Next-Greater-Element-I\" class=\"headerlink\" title=\"496-Next Greater Element I\"></a><a href=\"https://leetcode.com/problems/next-greater-element-i/#/description\" target=\"_blank\" rel=\"noopener\">496-Next Greater Element I</a></h3><p>暂无</p>\n<h3 id=\"463-Island-Perimeter\"><a href=\"#463-Island-Perimeter\" class=\"headerlink\" title=\"463-Island Perimeter\"></a><a href=\"https://leetcode.com/problems/island-perimeter/#/description\" target=\"_blank\" rel=\"noopener\">463-Island Perimeter</a></h3><h4 id=\"方法一：每块陆地都加-4，遇到有相邻陆地时减-2\"><a href=\"#方法一：每块陆地都加-4，遇到有相邻陆地时减-2\" class=\"headerlink\" title=\"方法一：每块陆地都加 4，遇到有相邻陆地时减 2\"></a>方法一：每块陆地都加 4，遇到有相邻陆地时减 2</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[][]&#125; grid</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> islandPerimeter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=grid.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,m=grid[<span class=\"number\">0</span>].length;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grid[i][j] ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                result +=<span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; grid[i<span class=\"number\">-1</span>][j] == <span class=\"number\">1</span>)&#123;result -=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; grid[i][j<span class=\"number\">-1</span>] ==<span class=\"number\">1</span> )&#123;result -=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"292-Nim-Game\"><a href=\"#292-Nim-Game\" class=\"headerlink\" title=\"292-Nim Game\"></a><a href=\"https://leetcode.com/problems/nim-game/#/description\" target=\"_blank\" rel=\"noopener\">292-Nim Game</a></h3><h4 id=\"方法一：只要数字能被-4-整除就赢不了\"><a href=\"#方法一：只要数字能被-4-整除就赢不了\" class=\"headerlink\" title=\"方法一：只要数字能被 4 整除就赢不了\"></a>方法一：只要数字能被 4 整除就赢不了</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canWinNim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(n%<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"485-Max-Consecutive-Ones\"><a href=\"#485-Max-Consecutive-Ones\" class=\"headerlink\" title=\"485-Max Consecutive Ones\"></a><a href=\"https://leetcode.com/problems/max-consecutive-ones/#/description\" target=\"_blank\" rel=\"noopener\">485-Max Consecutive Ones</a></h3><h4 id=\"方法一：看到-0-时就将-max-置为-0，否则-max-加-1\"><a href=\"#方法一：看到-0-时就将-max-置为-0，否则-max-加-1\" class=\"headerlink\" title=\"方法一：看到 0 时就将 max 置为 0，否则 max 加 1\"></a>方法一：看到 0 时就将 max 置为 0，否则 max 加 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findMaxConsecutiveOnes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.max(result,num =(nums[i]==<span class=\"number\">0</span>) ? <span class=\"number\">0</span>: num+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"136-Single-Number\"><a href=\"#136-Single-Number\" class=\"headerlink\" title=\"136-Single Number\"></a><a href=\"https://leetcode.com/problems/single-number/#/description\" target=\"_blank\" rel=\"noopener\">136-Single Number</a></h3><h4 id=\"方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为-0）\"><a href=\"#方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为-0）\" class=\"headerlink\" title=\"方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为 0）\"></a>方法一：利用位运算中的异或（异或运算可交换位置，且相同数字异或结果为 0）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        result ^= nums[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"448-Find-All-Numbers-Disappeared-in-an-Array\"><a href=\"#448-Find-All-Numbers-Disappeared-in-an-Array\" class=\"headerlink\" title=\"448-Find All Numbers Disappeared in an Array\"></a><a href=\"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/#/description\" target=\"_blank\" rel=\"noopener\">448-Find All Numbers Disappeared in an Array</a></h3><h4 id=\"方法一：利用哈希表将看到的数字变为负数\"><a href=\"#方法一：利用哈希表将看到的数字变为负数\" class=\"headerlink\" title=\"方法一：利用哈希表将看到的数字变为负数\"></a>方法一：利用哈希表将看到的数字变为负数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findDisappearedNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n= nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"built_in\">Math</span>.abs(nums[i]) <span class=\"number\">-1</span>;</span><br><span class=\"line\">        nums[j] = -<span class=\"built_in\">Math</span>.abs(nums[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>; k&lt;n;k++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[k]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result.push(k+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"520-Detect-Capital\"><a href=\"#520-Detect-Capital\" class=\"headerlink\" title=\"520-Detect Capital\"></a><a href=\"https://leetcode.com/problems/detect-capital/#/description\" target=\"_blank\" rel=\"noopener\">520-Detect Capital</a></h3><h4 id=\"方法一：巧用-indexOf\"><a href=\"#方法一：巧用-indexOf\" class=\"headerlink\" title=\"方法一：巧用 indexOf\"></a>方法一：巧用 indexOf</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; word</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> detectCapitalUse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(word.indexOf(word.toUpperCase()) &amp;&amp; word.indexOf(word.toLowerCase()) &amp;&amp; word.indexOf(word.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>).toUpperCase() + word.substring(<span class=\"number\">1</span>).toLowerCase()))</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：正则\"><a href=\"#方法二：正则\" class=\"headerlink\" title=\"方法二：正则\"></a>方法二：正则</h4><p>暂无</p>\n<h3 id=\"104-Maximum-Depth-of-Binary-Tree\"><a href=\"#104-Maximum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"104-Maximum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">104-Maximum Depth of Binary Tree</a></h3><h4 id=\"方法一：递归，其实很容易发现规律\"><a href=\"#方法一：递归，其实很容易发现规律\" class=\"headerlink\" title=\"方法一：递归，其实很容易发现规律\"></a>方法一：递归，其实很容易发现规律</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxDepth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root === <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : <span class=\"built_in\">Math</span>.max(maxDepth(root.left), maxDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"389-Find-the-Difference\"><a href=\"#389-Find-the-Difference\" class=\"headerlink\" title=\"389-Find the Difference\"></a><a href=\"https://leetcode.com/problems/find-the-difference/#/description\" target=\"_blank\" rel=\"noopener\">389-Find the Difference</a></h3><h4 id=\"方法一：依然是-replace\"><a href=\"#方法一：依然是-replace\" class=\"headerlink\" title=\"方法一：依然是 replace()\"></a>方法一：依然是 replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;character&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findTheDifference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        t = t.replace(s[i],<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：位运算\"><a href=\"#方法二：位运算\" class=\"headerlink\" title=\"方法二：位运算\"></a>方法二：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;character&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findTheDifference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = t.length,c = t.charCodeAt(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\tc ^= s.charCodeAt(i);</span><br><span class=\"line\">\t\tc ^= t.charCodeAt(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.fromCharCode(c);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"371-Sum-of-Two-Integers\"><a href=\"#371-Sum-of-Two-Integers\" class=\"headerlink\" title=\"371-Sum of Two Integers\"></a><a href=\"https://leetcode.com/problems/sum-of-two-integers/#/description\" target=\"_blank\" rel=\"noopener\">371-Sum of Two Integers</a></h3><h4 id=\"方法一：位运算\"><a href=\"#方法一：位运算\" class=\"headerlink\" title=\"方法一：位运算\"></a>方法一：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; a</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; b</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b==<span class=\"number\">0</span>? a:getSum(a^b, (a&amp;b)&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"226-Invert-Binary-Tree\"><a href=\"#226-Invert-Binary-Tree\" class=\"headerlink\" title=\"226-Invert Binary Tree\"></a><a href=\"https://leetcode.com/problems/invert-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">226-Invert Binary Tree</a></h3><h4 id=\"方法一：二叉树基本上都是递归，只不过这次规律很容易发现\"><a href=\"#方法一：二叉树基本上都是递归，只不过这次规律很容易发现\" class=\"headerlink\" title=\"方法一：二叉树基本上都是递归，只不过这次规律很容易发现\"></a>方法一：二叉树基本上都是递归，只不过这次规律很容易发现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;TreeNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> invertTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = root.left,</span><br><span class=\"line\">        right = root.right;</span><br><span class=\"line\">        </span><br><span class=\"line\">    root.left = invertTree(right);</span><br><span class=\"line\">    root.right = invertTree(left);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"492-Construct-the-Rectangle\"><a href=\"#492-Construct-the-Rectangle\" class=\"headerlink\" title=\"492-Construct the Rectangle\"></a><a href=\"https://leetcode.com/problems/construct-the-rectangle\" target=\"_blank\" rel=\"noopener\">492-Construct the Rectangle</a></h3><h4 id=\"方法一：越和正方形相似越好，所以需要先求根值确定大致范围\"><a href=\"#方法一：越和正方形相似越好，所以需要先求根值确定大致范围\" class=\"headerlink\" title=\"方法一：越和正方形相似越好，所以需要先求根值确定大致范围\"></a>方法一：越和正方形相似越好，所以需要先求根值确定大致范围</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; area</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> constructRectangle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">area</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.sqrt(area));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (area % w !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    w--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [area/w,w];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"283-Move-Zeroes\"><a href=\"#283-Move-Zeroes\" class=\"headerlink\" title=\"283-Move Zeroes\"></a><a href=\"https://leetcode.com/problems/move-zeroes\" target=\"_blank\" rel=\"noopener\">283-Move Zeroes</a></h3><h4 id=\"方法一：碰到-0-就先去掉再-push-进数组\"><a href=\"#方法一：碰到-0-就先去掉再-push-进数组\" class=\"headerlink\" title=\"方法一：碰到 0 就先去掉再 push 进数组\"></a>方法一：碰到 0 就先去掉再 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,m=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[m] === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            nums.splice(m,<span class=\"number\">1</span>);</span><br><span class=\"line\">            nums.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            m++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：类似于冒泡\"><a href=\"#方法二：类似于冒泡\" class=\"headerlink\" title=\"方法二：类似于冒泡\"></a>方法二：类似于冒泡</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = nums[j];</span><br><span class=\"line\">            nums[j] = nums[i];</span><br><span class=\"line\">            nums[i] = temp;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：用一个变量记录当前多少个元素不为-0\"><a href=\"#方法三：用一个变量记录当前多少个元素不为-0\" class=\"headerlink\" title=\"方法三：用一个变量记录当前多少个元素不为 0\"></a>方法三：用一个变量记录当前多少个元素不为 0</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums === <span class=\"literal\">null</span> || nums.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;        </span><br><span class=\"line\">    <span class=\"keyword\">var</span> insertPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] !== <span class=\"number\">0</span>) nums[insertPos++] = nums[i];</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (insertPos &lt; nums.length) &#123;</span><br><span class=\"line\">        nums[insertPos++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"530-Minimum-Absolute-Difference-in-BST\"><a href=\"#530-Minimum-Absolute-Difference-in-BST\" class=\"headerlink\" title=\"530-Minimum Absolute Difference in BST\"></a><a href=\"https://leetcode.com/problems/minimum-absolute-difference-in-bst\" target=\"_blank\" rel=\"noopener\">530-Minimum Absolute Difference in BST</a></h3><p>暂无</p>\n<h3 id=\"506-Relative-Ranks\"><a href=\"#506-Relative-Ranks\" class=\"headerlink\" title=\"506-Relative Ranks\"></a><a href=\"https://leetcode.com/problems/relative-ranks\" target=\"_blank\" rel=\"noopener\">506-Relative Ranks</a></h3><p>暂无</p>\n<h3 id=\"167-Two-Sum-II-Input-array-is-sorted\"><a href=\"#167-Two-Sum-II-Input-array-is-sorted\" class=\"headerlink\" title=\"167-Two Sum II - Input array is sorted\"></a><a href=\"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted\" target=\"_blank\" rel=\"noopener\">167-Two Sum II - Input array is sorted</a></h3><h4 id=\"方法一：两个指针\"><a href=\"#方法一：两个指针\" class=\"headerlink\" title=\"方法一：两个指针\"></a>方法一：两个指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; numbers</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numbers === <span class=\"literal\">null</span> || numbers.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>, right = numbers.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = numbers[left] + numbers[right];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>[left+<span class=\"number\">1</span>,right+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v &gt; target) &#123;</span><br><span class=\"line\">            right --;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找\"><a href=\"#方法二：二分查找\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; numbers</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(numbers.length&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;numbers.length<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> start=i+<span class=\"number\">1</span>, end=numbers.length<span class=\"number\">-1</span>, gap=target-numbers[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt;= end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> m = <span class=\"built_in\">Math</span>.floor(start+(end-start)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numbers[m] == gap) <span class=\"keyword\">return</span> [i+<span class=\"number\">1</span>,m+<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(numbers[m] &gt; gap) end=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> start=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"455-Assign-Cookies\"><a href=\"#455-Assign-Cookies\" class=\"headerlink\" title=\"455-Assign Cookies\"></a><a href=\"https://leetcode.com/problems/assign-cookies\" target=\"_blank\" rel=\"noopener\">455-Assign Cookies</a></h3><h4 id=\"方法一：Just-assign-the-cookies-starting-from-the-child-with-less-greediness-to-maximize-the-number-of-happy-children\"><a href=\"#方法一：Just-assign-the-cookies-starting-from-the-child-with-less-greediness-to-maximize-the-number-of-happy-children\" class=\"headerlink\" title=\"方法一：Just assign the cookies starting from the child with less greediness to maximize the number of happy children .\"></a>方法一：Just assign the cookies starting from the child with less greediness to maximize the number of happy children .</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; g</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findContentChildren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">g, s</span>) </span>&#123;</span><br><span class=\"line\">    g.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">    s.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,m=g.length,n=s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;n&amp;&amp;i&lt;m;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g[i]&lt;=s[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"453-Minimum-Moves-to-Equal-Array-Elements\"><a href=\"#453-Minimum-Moves-to-Equal-Array-Elements\" class=\"headerlink\" title=\"453-Minimum Moves to Equal Array Elements\"></a><a href=\"https://leetcode.com/problems/minimum-moves-to-equal-array-elements\" target=\"_blank\" rel=\"noopener\">453-Minimum Moves to Equal Array Elements</a></h3><h4 id=\"方法一：每次让-n-1-个元素-1，其实可以理解为每次让-1-个元素减-1，知道都等于数组中的最小元素为止\"><a href=\"#方法一：每次让-n-1-个元素-1，其实可以理解为每次让-1-个元素减-1，知道都等于数组中的最小元素为止\" class=\"headerlink\" title=\"方法一：每次让 n-1 个元素 +1，其实可以理解为每次让 1 个元素减 1，知道都等于数组中的最小元素为止\"></a>方法一：每次让 n-1 个元素 +1，其实可以理解为每次让 1 个元素减 1，知道都等于数组中的最小元素为止</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minMoves = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, nums),n=nums.length,result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        result += nums[i] -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"383-Ransom-Note\"><a href=\"#383-Ransom-Note\" class=\"headerlink\" title=\"383-Ransom Note\"></a><a href=\"https://leetcode.com/problems/ransom-note\" target=\"_blank\" rel=\"noopener\">383-Ransom Note</a></h3><h4 id=\"方法一：用一个数组作为字典表（其实应该是哈希表，在-JS-中就是数组）\"><a href=\"#方法一：用一个数组作为字典表（其实应该是哈希表，在-JS-中就是数组）\" class=\"headerlink\" title=\"方法一：用一个数组作为字典表（其实应该是哈希表，在 JS 中就是数组）\"></a>方法一：用一个数组作为字典表（其实应该是哈希表，在 JS 中就是数组）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; ransomNote</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; magazine</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canConstruct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ransomNote, magazine</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = ransomNote.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = ransomNote[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(magazine.indexOf(s) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            magazine = magazine.replace(s,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(magazine.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"404-Sum-of-Left-Leaves\"><a href=\"#404-Sum-of-Left-Leaves\" class=\"headerlink\" title=\"404-Sum of Left Leaves\"></a><a href=\"https://leetcode.com/problems/sum-of-left-leaves\" target=\"_blank\" rel=\"noopener\">404-Sum of Left Leaves</a></h3><h4 id=\"方法一：将叶子节点区分出来就可以了\"><a href=\"#方法一：将叶子节点区分出来就可以了\" class=\"headerlink\" title=\"方法一：将叶子节点区分出来就可以了\"></a>方法一：将叶子节点区分出来就可以了</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumOfLeftLeaves = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left.left === <span class=\"literal\">null</span> &amp;&amp; root.left.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ans += root.left.val;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans += sumOfLeftLeaves(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans += sumOfLeftLeaves(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"349-Intersection-of-Two-Arrays\"><a href=\"#349-Intersection-of-Two-Arrays\" class=\"headerlink\" title=\"349-Intersection of Two Arrays\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-arrays\" target=\"_blank\" rel=\"noopener\">349-Intersection of Two Arrays</a></h3><h4 id=\"方法一：两个指针进行遍历（哈希表，复杂度为-O-n-）\"><a href=\"#方法一：两个指针进行遍历（哈希表，复杂度为-O-n-）\" class=\"headerlink\" title=\"方法一：两个指针进行遍历（哈希表，复杂度为 O(n)）\"></a>方法一：两个指针进行遍历（哈希表，复杂度为 O(n)）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">        nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">        nums2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">            j = <span class=\"number\">0</span>,</span><br><span class=\"line\">            result = [];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; nums1.length &amp;&amp; j &lt; nums2.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.indexOf(nums1[i]) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                    result.push(nums1[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找（复杂度为-O-nlgn-）\"><a href=\"#方法二：二分查找（复杂度为-O-nlgn-）\" class=\"headerlink\" title=\"方法二：二分查找（复杂度为 O(nlgn)）\"></a>方法二：二分查找（复杂度为 O(nlgn)）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    nums2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;nums1.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (binarySearch(nums2, nums1[i]) &amp;&amp; result.indexOf(nums1[i]) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            result.push(nums1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> binarySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums,target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>,high = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor(low + (high - low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"122-Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#122-Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"122-Best Time to Buy and Sell Stock II\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\" target=\"_blank\" rel=\"noopener\">122-Best Time to Buy and Sell Stock II</a></h3><h4 id=\"方法一：只要第二天价格比第一天价格高，就卖掉\"><a href=\"#方法一：只要第二天价格比第一天价格高，就卖掉\" class=\"headerlink\" title=\"方法一：只要第二天价格比第一天价格高，就卖掉\"></a>方法一：只要第二天价格比第一天价格高，就卖掉</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result=<span class=\"number\">0</span>,n=prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices[i]&lt;prices[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            result += prices[i+<span class=\"number\">1</span>] - prices[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"387-First-Unique-Character-in-a-String\"><a href=\"#387-First-Unique-Character-in-a-String\" class=\"headerlink\" title=\"387-First Unique Character in a String\"></a><a href=\"https://leetcode.com/problems/first-unique-character-in-a-string\" target=\"_blank\" rel=\"noopener\">387-First Unique Character in a String</a></h3><h4 id=\"方法一：用一个数组记录字符出现的位置及次数（哈希表）\"><a href=\"#方法一：用一个数组记录字符出现的位置及次数（哈希表）\" class=\"headerlink\" title=\"方法一：用一个数组记录字符出现的位置及次数（哈希表）\"></a>方法一：用一个数组记录字符出现的位置及次数（哈希表）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> freq = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">'a'</span>.charCodeAt();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (freq [s[i].charCodeAt() - a] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            freq [s[i].charCodeAt() - a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            freq [s[i].charCodeAt() - a]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; s.length; k ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(freq [s[k].charCodeAt() - a] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"171-Excel-Sheet-Column-Number\"><a href=\"#171-Excel-Sheet-Column-Number\" class=\"headerlink\" title=\"171-Excel Sheet Column Number\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-number\" target=\"_blank\" rel=\"noopener\">171-Excel Sheet Column Number</a></h3><h4 id=\"方法一：很容易发现规律，类似二进制转换成-10-进制\"><a href=\"#方法一：很容易发现规律，类似二进制转换成-10-进制\" class=\"headerlink\" title=\"方法一：很容易发现规律，类似二进制转换成 10 进制\"></a>方法一：很容易发现规律，类似二进制转换成 10 进制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> titleToNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        result += <span class=\"built_in\">Math</span>.pow(<span class=\"number\">26</span>,n-i<span class=\"number\">-1</span>)*(s[i].charCodeAt() - <span class=\"number\">64</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"504-Base-7\"><a href=\"#504-Base-7\" class=\"headerlink\" title=\"504-Base 7\"></a><a href=\"https://leetcode.com/problems/base-7\" target=\"_blank\" rel=\"noopener\">504-Base 7</a></h3><h4 id=\"方法一：递归取余，很经典的一道题和解法，用的比较多\"><a href=\"#方法一：递归取余，很经典的一道题和解法，用的比较多\" class=\"headerlink\" title=\"方法一：递归取余，很经典的一道题和解法，用的比较多\"></a>方法一：递归取余，很经典的一道题和解法，用的比较多</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertToBase7 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num&gt;=<span class=\"number\">0</span> ? <span class=\"string\">\"\"</span> + (num&gt;=<span class=\"number\">7</span> ? convertToBase7(<span class=\"built_in\">Math</span>.floor(num/<span class=\"number\">7</span>)) + <span class=\"string\">\"\"</span> + num%<span class=\"number\">7</span> : num) : <span class=\"string\">'-'</span>+convertToBase7(-num);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"237-Delete-Node-in-a-Linked-List\"><a href=\"#237-Delete-Node-in-a-Linked-List\" class=\"headerlink\" title=\"237-Delete Node in a Linked List\"></a><a href=\"https://leetcode.com/problems/delete-node-in-a-linked-list\" target=\"_blank\" rel=\"noopener\">237-Delete Node in a Linked List</a></h3><h4 id=\"方法一：很智障的一道题\"><a href=\"#方法一：很智障的一道题\" class=\"headerlink\" title=\"方法一：很智障的一道题\"></a>方法一：很智障的一道题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; node</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify node in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"100-Same-Tree\"><a href=\"#100-Same-Tree\" class=\"headerlink\" title=\"100-Same Tree\"></a><a href=\"https://leetcode.com/problems/same-tree\" target=\"_blank\" rel=\"noopener\">100-Same Tree</a></h3><h4 id=\"方法一：递归，相等的依据除了值相等之外还有不能为-null\"><a href=\"#方法一：递归，相等的依据除了值相等之外还有不能为-null\" class=\"headerlink\" title=\"方法一：递归，相等的依据除了值相等之外还有不能为 null\"></a>方法一：递归，相等的依据除了值相等之外还有不能为 null</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; p</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; q</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSameTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p === <span class=\"literal\">null</span> &amp;&amp; q === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p !== <span class=\"literal\">null</span> &amp;&amp; q !== <span class=\"literal\">null</span> &amp;&amp; p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"169-Maiority-Element\"><a href=\"#169-Maiority-Element\" class=\"headerlink\" title=\"169-Maiority Element\"></a><a href=\"https://leetcode.com/problems/majority-element\" target=\"_blank\" rel=\"noopener\">169-Maiority Element</a></h3><h4 id=\"方法一：每找出两个不同的-element，就成对删除即-count–，最终剩下的一定就是所求的（O-n-）\"><a href=\"#方法一：每找出两个不同的-element，就成对删除即-count–，最终剩下的一定就是所求的（O-n-）\" class=\"headerlink\" title=\"方法一：每找出两个不同的 element，就成对删除即 count–，最终剩下的一定就是所求的（O(n)）\"></a>方法一：每找出两个不同的 element，就成对删除即 count–，最终剩下的一定就是所求的（O(n)）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> major=nums[<span class=\"number\">0</span>], count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>,n=nums.length; i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                major=nums[i];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(major==nums[i])&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：哈希表\"><a href=\"#方法二：哈希表\" class=\"headerlink\" title=\"方法二：哈希表\"></a>方法二：哈希表</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counts = [],n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(counts[nums[i]] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            counts[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(counts[nums[i]] + <span class=\"number\">1</span>&gt; <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">2</span>)) &#123; <span class=\"keyword\">return</span> nums[i];&#125;</span><br><span class=\"line\">            counts[nums[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：Since-the-majority-element-appears-more-than-n-2-times-the-n-2-th-element-in-the-sorted-nums-must-be-the-majority-element\"><a href=\"#方法三：Since-the-majority-element-appears-more-than-n-2-times-the-n-2-th-element-in-the-sorted-nums-must-be-the-majority-element\" class=\"headerlink\" title=\"方法三：Since the majority element appears more than n / 2 times, the n / 2-th element in the sorted nums must be the majority element.\"></a>方法三：Since the majority element appears more than <code>n / 2</code> times, the <code>n / 2</code>-th element in the sorted <code>nums</code> must be the majority element.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"built_in\">Math</span>.floor(nums.length/<span class=\"number\">2</span>)];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：随机挑选一个元素，然后看它是否是多数元素\"><a href=\"#方法四：随机挑选一个元素，然后看它是否是多数元素\" class=\"headerlink\" title=\"方法四：随机挑选一个元素，然后看它是否是多数元素\"></a>方法四：随机挑选一个元素，然后看它是否是多数元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> idx = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*n),candidate = nums[idx],counts = <span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == candidate) &#123;counts++;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counts &gt; n / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> candidate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：摩尔投票算法\"><a href=\"#方法五：摩尔投票算法\" class=\"headerlink\" title=\"方法五：摩尔投票算法\"></a>方法五：<a href=\"https://www.zhihu.com/question/44213758?sort=created\" target=\"_blank\" rel=\"noopener\">摩尔投票算法</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> major, counts = <span class=\"number\">0</span>, n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!counts) &#123;</span><br><span class=\"line\">            major = nums[i];</span><br><span class=\"line\">            counts = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> counts += (nums[i] == major) ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法六：位运算，The-key-lies-in-how-to-count-the-number-of-1‘s-on-a-specific-bit-Specifically-you-need-a-mask-with-a-1-on-the-i-the-bit-and-0-otherwise-to-get-the-i-th-bit-of-each-element-in-nums\"><a href=\"#方法六：位运算，The-key-lies-in-how-to-count-the-number-of-1‘s-on-a-specific-bit-Specifically-you-need-a-mask-with-a-1-on-the-i-the-bit-and-0-otherwise-to-get-the-i-th-bit-of-each-element-in-nums\" class=\"headerlink\" title=\"方法六：位运算，The key lies in how to count the number of 1‘s on a specific bit. Specifically, you need a mask with a 1 on the i-the bit and 0 otherwise to get the i-th bit of each element in nums\"></a>方法六：位运算，The key lies in how to count the number of <code>1</code>‘s on a specific bit. Specifically, you need a <code>mask</code> with a <code>1</code> on the <code>i</code>-the bit and <code>0</code> otherwise to get the <code>i</code>-th bit of each element in <code>nums</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> major = <span class=\"number\">0</span>, n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, mask = <span class=\"number\">1</span>; i &lt; <span class=\"number\">32</span>; i++, mask &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bitCounts = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] &amp; mask) bitCounts++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitCounts &gt; n / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                major |= mask;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"242-Valid-Anagram\"><a href=\"#242-Valid-Anagram\" class=\"headerlink\" title=\"242-Valid Anagram\"></a><a href=\"https://leetcode.com/problems/valid-anagram\" target=\"_blank\" rel=\"noopener\">242-Valid Anagram</a></h3><h4 id=\"方法一：用一个数组作为桶，s-中的字符用来加-1，t-中的字符用来减-1；如果最后桶中没有元素就返回-true\"><a href=\"#方法一：用一个数组作为桶，s-中的字符用来加-1，t-中的字符用来减-1；如果最后桶中没有元素就返回-true\" class=\"headerlink\" title=\"方法一：用一个数组作为桶，s 中的字符用来加 1，t 中的字符用来减 1；如果最后桶中没有元素就返回 true\"></a>方法一：用一个数组作为桶，s 中的字符用来加 1，t 中的字符用来减 1；如果最后桶中没有元素就返回 true</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isAnagram = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s===<span class=\"string\">\"\"</span>&amp;&amp;t===<span class=\"string\">\"\"</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alphabet = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m=<span class=\"number\">0</span>;m&lt;alphabet.length;m++)&#123;</span><br><span class=\"line\">            alphabet[m] =<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">            alphabet[s[i].charCodeAt() - <span class=\"number\">97</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; t.length; j++) &#123;</span><br><span class=\"line\">            alphabet[t[j].charCodeAt() - <span class=\"number\">97</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;alphabet.length;k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (alphabet[k]!== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"409-Longest-Palindrome\"><a href=\"#409-Longest-Palindrome\" class=\"headerlink\" title=\"409-Longest Palindrome\"></a><a href=\"https://leetcode.com/problems/longest-palindrome\" target=\"_blank\" rel=\"noopener\">409-Longest Palindrome</a></h3><h4 id=\"方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况\"><a href=\"#方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况\" class=\"headerlink\" title=\"方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况\"></a>方法一：将数组中的元素分为偶数和奇数两种情况，因为回文字符串的字符个数有这两种情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> even = <span class=\"number\">0</span>,odd = <span class=\"number\">0</span>,arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = s[i].charCodeAt() - <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[c] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr[c]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[c]%<span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            even += <span class=\"number\">2</span>;</span><br><span class=\"line\">            odd--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            odd++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> even + (odd===<span class=\"number\">0</span>? <span class=\"number\">0</span> :<span class=\"number\">1</span>); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"541-Reverse-String-II\"><a href=\"#541-Reverse-String-II\" class=\"headerlink\" title=\"541-Reverse String II\"></a><a href=\"https://leetcode.com/problems/reverse-string-ii\" target=\"_blank\" rel=\"noopener\">541-Reverse String II</a></h3><p>暂无</p>\n<h3 id=\"401-Binary-Watch\"><a href=\"#401-Binary-Watch\" class=\"headerlink\" title=\"401-Binary Watch\"></a><a href=\"https://leetcode.com/problems/binary-watch\" target=\"_blank\" rel=\"noopener\">401-Binary Watch</a></h3><h4 id=\"方法一：从结果出发，满足条件时-push-进数组\"><a href=\"#方法一：从结果出发，满足条件时-push-进数组\" class=\"headerlink\" title=\"方法一：从结果出发，满足条件时 push 进数组\"></a>方法一：从结果出发，满足条件时 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readBinaryWatch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> h=<span class=\"number\">0</span>;h&lt;<span class=\"number\">12</span>;h++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m=<span class=\"number\">0</span>;m&lt;<span class=\"number\">60</span>;m++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((h.toString(<span class=\"number\">2</span>) + m.toString(<span class=\"number\">2</span>)).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">\"\"</span>).length == num)&#123;</span><br><span class=\"line\">                m = m&gt;<span class=\"number\">9</span> ? m : <span class=\"string\">\"0\"</span> + m;</span><br><span class=\"line\">                item = h + <span class=\"string\">\":\"</span> + m;</span><br><span class=\"line\">                result.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"217-Contains-Duplicate\"><a href=\"#217-Contains-Duplicate\" class=\"headerlink\" title=\"217-Contains Duplicate\"></a><a href=\"https://leetcode.com/problems/contains-duplicate\" target=\"_blank\" rel=\"noopener\">217-Contains Duplicate</a></h3><h4 id=\"方法一：哈希表\"><a href=\"#方法一：哈希表\" class=\"headerlink\" title=\"方法一：哈希表\"></a>方法一：哈希表</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length===<span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opt = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[nums[i]])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            opt[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先将数组排序，然后只需要比较相邻元素\"><a href=\"#方法二：先将数组排序，然后只需要比较相邻元素\" class=\"headerlink\" title=\"方法二：先将数组排序，然后只需要比较相邻元素\"></a>方法二：先将数组排序，然后只需要比较相邻元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> ind = <span class=\"number\">1</span>; ind &lt; nums.length; ind++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[ind] == nums[ind - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-Roman-to-Integer\"><a href=\"#13-Roman-to-Integer\" class=\"headerlink\" title=\"13-Roman to Integer\"></a><a href=\"https://leetcode.com/problems/roman-to-integer\" target=\"_blank\" rel=\"noopener\">13-Roman to Integer</a></h3><h4 id=\"方法一：知道罗马数字的规则之后就好写了\"><a href=\"#方法一：知道罗马数字的规则之后就好写了\" class=\"headerlink\" title=\"方法一：知道罗马数字的规则之后就好写了\"></a>方法一：知道罗马数字的规则之后就好写了</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opt = &#123;<span class=\"string\">'M'</span>: <span class=\"number\">1000</span>,<span class=\"string\">'D'</span>: <span class=\"number\">500</span> ,<span class=\"string\">'C'</span>: <span class=\"number\">100</span>,<span class=\"string\">'L'</span>: <span class=\"number\">50</span>,<span class=\"string\">'X'</span>: <span class=\"number\">10</span>,<span class=\"string\">'V'</span>: <span class=\"number\">5</span>,<span class=\"string\">'I'</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        z = <span class=\"number\">0</span>,</span><br><span class=\"line\">        n=s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[s[i]] &lt; opt[s[i+<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">            z -= opt[s[i]];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            z += opt[s[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> z + opt[s[n<span class=\"number\">-1</span>]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"206-Reverse-Linked-List\"><a href=\"#206-Reverse-Linked-List\" class=\"headerlink\" title=\"206-Reverse Linked List\"></a><a href=\"https://leetcode.com/problems/reverse-linked-list\" target=\"_blank\" rel=\"noopener\">206-Reverse Linked List</a></h3><h4 id=\"方法一：反转的条件就是-head-next-next-head-和-head-next-null\"><a href=\"#方法一：反转的条件就是-head-next-next-head-和-head-next-null\" class=\"headerlink\" title=\"方法一：反转的条件就是 head.next.next = head 和 head.next = null\"></a>方法一：反转的条件就是 head.next.next = head 和 head.next = null</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head || !(head.next)) &#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = reverseList(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"350-Intersection-of-Two-Arrays-II\"><a href=\"#350-Intersection-of-Two-Arrays-II\" class=\"headerlink\" title=\"350-Intersection of Two Arrays II\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-arrays-ii\" target=\"_blank\" rel=\"noopener\">350-Intersection of Two Arrays II</a></h3><h4 id=\"方法一：先对-nums1-遍历，生成哈希表，然后对-nums2-遍历\"><a href=\"#方法一：先对-nums1-遍历，生成哈希表，然后对-nums2-遍历\" class=\"headerlink\" title=\"方法一：先对 nums1 遍历，生成哈希表，然后对 nums2 遍历\"></a>方法一：先对 nums1 遍历，生成哈希表，然后对 nums2 遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [],result=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums1.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> numi = arr[nums1[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numi)&#123;</span><br><span class=\"line\">            arr[nums1[i]]++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            arr[nums1[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,m=nums2.length;j&lt;m;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> numj = arr[nums2[j]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numj)&#123;</span><br><span class=\"line\">            result.push(nums2[j]);</span><br><span class=\"line\">            arr[nums2[j]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先进行排序，然后用两个指针遍历\"><a href=\"#方法二：先进行排序，然后用两个指针遍历\" class=\"headerlink\" title=\"方法二：先进行排序，然后用两个指针遍历\"></a>方法二：先进行排序，然后用两个指针遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    nums1.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    nums2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n1 = nums1.length, n2 = nums2.length,i1 = <span class=\"number\">0</span>, i2 = <span class=\"number\">0</span>,res = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i1 &lt; n1 &amp;&amp; i2 &lt; n2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums1[i1] == nums2[i2]) &#123;</span><br><span class=\"line\">            res.push(nums1[i1]);</span><br><span class=\"line\">            i1++;</span><br><span class=\"line\">            i2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[i1] &gt; nums2[i2])&#123;</span><br><span class=\"line\">            i2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            i1++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"268-Missing-Number\"><a href=\"#268-Missing-Number\" class=\"headerlink\" title=\"268-Missing Number\"></a><a href=\"https://leetcode.com/problems/missing-number\" target=\"_blank\" rel=\"noopener\">268-Missing Number</a></h3><h4 id=\"方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断\"><a href=\"#方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断\" class=\"headerlink\" title=\"方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断\"></a>方法一：因为有且只有一个数字丢失，所以可以先排序再遍历，根据索引值和数值的关系判断</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sort = nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">    &#125;),n=nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sort[i] != i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：位运算，利用异或\"><a href=\"#方法二：位运算，利用异或\" class=\"headerlink\" title=\"方法二：位运算，利用异或\"></a>方法二：位运算，利用异或</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xor = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">\t\txor = xor ^ i ^ nums[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> xor ^ i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字\"><a href=\"#方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字\" class=\"headerlink\" title=\"方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字\"></a>方法三：因为数值范围确定，所以可以先求和，再减去数组中的元素，剩下的数字就是丢失数字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.length,sum = (<span class=\"number\">0</span>+len)*(len+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;len; i++)&#123;</span><br><span class=\"line\">        sum-=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：二分查找\"><a href=\"#方法四：二分查找\" class=\"headerlink\" title=\"方法四：二分查找\"></a>方法四：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>, right = nums.length, mid= <span class=\"built_in\">Math</span>.floor((left + right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((left + right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid]&gt;mid) &#123;right = mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"447-Number-of-Boomerangs\"><a href=\"#447-Number-of-Boomerangs\" class=\"headerlink\" title=\"447-Number of Boomerangs\"></a><a href=\"https://leetcode.com/problems/number-of-boomerangs\" target=\"_blank\" rel=\"noopener\">447-Number of Boomerangs</a></h3><p>暂无</p>\n<h3 id=\"543-Diameter-of-Binary-Tree\"><a href=\"#543-Diameter-of-Binary-Tree\" class=\"headerlink\" title=\"543-Diameter of Binary Tree\"></a><a href=\"https://leetcode.com/problems/diameter-of-binary-tree\" target=\"_blank\" rel=\"noopener\">543-Diameter of Binary Tree</a></h3><p>暂无</p>\n<h3 id=\"415-Add-Strings\"><a href=\"#415-Add-Strings\" class=\"headerlink\" title=\"415-Add Strings\"></a><a href=\"https://leetcode.com/problems/add-strings\" target=\"_blank\" rel=\"noopener\">415-Add Strings</a></h3><h4 id=\"方法一：遍历，用一个变量记录当前位进位情况\"><a href=\"#方法一：遍历，用一个变量记录当前位进位情况\" class=\"headerlink\" title=\"方法一：遍历，用一个变量记录当前位进位情况\"></a>方法一：遍历，用一个变量记录当前位进位情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; num1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; num2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> carry=<span class=\"number\">0</span>,str = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=num1.length<span class=\"number\">-1</span>,j=num2.length<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>||j&gt;=<span class=\"number\">0</span>||carry==<span class=\"number\">1</span>;i--,j--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n1 = num1[i] ? num1[i] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            n2 = num2[j] ? num2[j] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = (n1 + n2 + carry)%<span class=\"number\">10</span>;</span><br><span class=\"line\">            carry = <span class=\"built_in\">Math</span>.floor((n1 + n2 + carry)/<span class=\"number\">10</span>);</span><br><span class=\"line\">        str = sum + str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"108-Convert-Sorted-Array-to-Binary-Search-Tree\"><a href=\"#108-Convert-Sorted-Array-to-Binary-Search-Tree\" class=\"headerlink\" title=\"108-Convert Sorted Array to Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree\" target=\"_blank\" rel=\"noopener\">108-Convert Sorted Array to Binary Search Tree</a></h3><p>暂无</p>\n<h3 id=\"405-Convert-a-Number-to-Hexadecimal\"><a href=\"#405-Convert-a-Number-to-Hexadecimal\" class=\"headerlink\" title=\"405-Convert a Number to Hexadecimal\"></a><a href=\"https://leetcode.com/problems/convert-a-number-to-hexadecimal\" target=\"_blank\" rel=\"noopener\">405-Convert a Number to Hexadecimal</a></h3><p>暂无</p>\n","raw":null,"categories":[{"name":"algorithm","path":"api/categories/algorithm.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"leetcode","path":"api/tags/leetcode.json"}]},{"title":"JS实现复杂数据结构","slug":"JS实现复杂数据结构","date":"2017-03-26T04:51:34.000Z","updated":"2019-07-04T08:09:14.545Z","comments":true,"path":"api/articles/JS实现复杂数据结构.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"一、哈希表\"><a href=\"#一、哈希表\" class=\"headerlink\" title=\"一、哈希表\"></a>一、哈希表</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>javascript 里面是没有哈希表的，而在 java、C#、C++ 中会经常用到这一种数据结构，同时在刷 Leetcode 过程中也会经常用到。细细看来，其实 javascript 的 object 的属性与哈希表非常类似。我们只需要在其基础上封装一些 HashTable 的函数，就能够得到一个精简版的哈希表。</p>\n<h3 id=\"加入函数\"><a href=\"#加入函数\" class=\"headerlink\" title=\"加入函数\"></a>加入函数</h3><table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add(key,value)</td>\n<td>添加项</td>\n<td>无</td>\n</tr>\n<tr>\n<td>getValue(key)</td>\n<td>根据key取值</td>\n<td>object</td>\n</tr>\n<tr>\n<td>remove(key)</td>\n<td>根据key删除一项</td>\n<td>无</td>\n</tr>\n<tr>\n<td>containsKey(key)</td>\n<td>是否包含某个key</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>containsValue(value)</td>\n<td>是否包含某个值</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>getValues()</td>\n<td>获取所有的值的数组</td>\n<td>array</td>\n</tr>\n<tr>\n<td>getKeys()</td>\n<td>获取所有的key的数组</td>\n<td>array</td>\n</tr>\n<tr>\n<td>getSize()</td>\n<td>获取项总数</td>\n<td>int</td>\n</tr>\n<tr>\n<td>clear()</td>\n<td>清空哈希表</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HashTable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> entry = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.containsKey(key)) &#123;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        entry[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.containsKey(key) ? entry[key] : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.containsKey(key) &amp;&amp; (<span class=\"keyword\">delete</span> entry[key])) &#123;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.containsKey = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key <span class=\"keyword\">in</span> entry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.containsValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> entry) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry[prop] == value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getValues = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> entry) &#123;</span><br><span class=\"line\">            values.push(entry[prop]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getKeys = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> entry) &#123;</span><br><span class=\"line\">            keys.push(prop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        entry = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> manHT = <span class=\"keyword\">new</span> HashTable();</span><br><span class=\"line\">manHT.add(<span class=\"string\">\"p1\"</span>,<span class=\"string\">\"刘备\"</span>);</span><br><span class=\"line\">manHT.add(<span class=\"string\">\"p2\"</span>,<span class=\"string\">\"关羽\"</span>);</span><br><span class=\"line\">$(<span class=\"string\">\"#div1\"</span>).text(manHT.getValue(<span class=\"string\">\"p1\"</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.cnblogs.com/kissdodog/p/4666352.html\" target=\"_blank\" rel=\"noopener\">javascript 实现HashTable(哈希表)</a></li>\n</ul>\n<h2 id=\"二、栈\"><a href=\"#二、栈\" class=\"headerlink\" title=\"二、栈\"></a>二、栈</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>栈是一种遵从后进先出原则(LIFO，全称为 Last In First Out)的有序集合。栈顶永远是最新的元素。</p>\n<h3 id=\"加入函数-1\"><a href=\"#加入函数-1\" class=\"headerlink\" title=\"加入函数\"></a>加入函数</h3><table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push(element(s))</td>\n<td>添加几个元素到栈顶</td>\n<td>无</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>移除并返回栈顶元素</td>\n<td>object</td>\n</tr>\n<tr>\n<td>peek()</td>\n<td>返回栈顶元素</td>\n<td>object</td>\n</tr>\n<tr>\n<td>isAmpty</td>\n<td>检查栈是否为空</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>移除栈中所有元素</td>\n<td>无</td>\n</tr>\n<tr>\n<td>size</td>\n<td>返回栈中元素个数</td>\n<td>int</td>\n</tr>\n<tr>\n<td>print</td>\n<td>以字符串显示栈中所有内容</td>\n<td>string</td>\n</tr>\n<tr>\n<td>top</td>\n<td>记录栈顶位置</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stack</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.dataStore = [];<span class=\"comment\">//保存栈内元素  </span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.push=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top++] = element;<span class=\"comment\">//添加一个元素并将top+1  </span></span><br><span class=\"line\">  &#125;,  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.peek=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.top<span class=\"number\">-1</span>];<span class=\"comment\">//返回栈顶元素  </span></span><br><span class=\"line\">  &#125;,  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pop=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[--<span class=\"keyword\">this</span>.top];<span class=\"comment\">//返回栈顶元素并将top-1  </span></span><br><span class=\"line\">  &#125;,  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clear=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;<span class=\"comment\">//将top归0     </span></span><br><span class=\"line\">  &#125;,  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.top;<span class=\"comment\">//返回栈内的元素个数  </span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isAmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore.length === <span class=\"number\">0</span>;<span class=\"comment\">//确定栈是否为空</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.dataStore.toString());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用示例-1\"><a href=\"#使用示例-1\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lk=<span class=\"keyword\">new</span> Stack();  </span><br><span class=\"line\">lk.push(<span class=\"string\">\"likeke\"</span>);  </span><br><span class=\"line\">lk.push(<span class=\"string\">\"zhangsan\"</span>);  </span><br><span class=\"line\">lk.push(<span class=\"string\">\"wangwu\"</span>);  </span><br><span class=\"line\">lk.peek();<span class=\"comment\">//\"wangwu\"  </span></span><br><span class=\"line\">lk.size();<span class=\"number\">3</span>  </span><br><span class=\"line\">lk.pop();<span class=\"comment\">//\"wangwu\"  </span></span><br><span class=\"line\">lk.peek();<span class=\"comment\">//\"zhangsan\"  </span></span><br><span class=\"line\">lk.clear();  </span><br><span class=\"line\">lk.peek();<span class=\"comment\">//undefind  </span></span><br><span class=\"line\">lk.size();<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章-1\"><a href=\"#参考文章-1\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"https://cobain-li.iteye.com/blog/2335935\" target=\"_blank\" rel=\"noopener\">数据结构与算法－栈篇(js实现)</a></li>\n<li><a href=\"http://www.jb51.net/article/79624.htm\" target=\"_blank\" rel=\"noopener\">JavaScipt中栈的实现方法</a></li>\n</ul>\n<h2 id=\"三、队列\"><a href=\"#三、队列\" class=\"headerlink\" title=\"三、队列\"></a>三、队列</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>队列是一种先进先出的结构。队列也是一种表结构，不同的是队列只能在队尾插入元素，在队首删除元素；在 JS 中可以用数组来实现队列结构</p>\n<h3 id=\"加入函数-2\"><a href=\"#加入函数-2\" class=\"headerlink\" title=\"加入函数\"></a>加入函数</h3><table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enqueue</td>\n<td>在队列的末尾添加一个元素</td>\n<td>无</td>\n</tr>\n<tr>\n<td>dequeue</td>\n<td>出队，删除队列的第一个元素并返回</td>\n<td>object</td>\n</tr>\n<tr>\n<td>front</td>\n<td>取出队列的第一个元素</td>\n<td>object</td>\n</tr>\n<tr>\n<td>back</td>\n<td>取出队列的最后一个元素</td>\n<td>object</td>\n</tr>\n<tr>\n<td>toString</td>\n<td>将队列中的元素以字符串形式输出</td>\n<td>string</td>\n</tr>\n<tr>\n<td>empty</td>\n<td>判断队列是否为空</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>count</td>\n<td>返回队列中元素的个数</td>\n<td>int</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清楚队列</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataStore = [],<span class=\"comment\">//队列数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enqueue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//入队，就是在数组的末尾添加一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataStore.push(element);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dequeue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//出队，就是删除数组的第一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore.shift();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.front = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//取出数组的第一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.back = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//取出数组的最后一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore[<span class=\"keyword\">this</span>.dataStore.length<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//将数组中的元素以字符串形式输出</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> retStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"keyword\">this</span>.dataStore.length; ++i) &#123;</span><br><span class=\"line\">            retStr += <span class=\"keyword\">this</span>.dataStore[i] + <span class=\"string\">\"&amp;nbsp;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retStr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.empty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//判断数组是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.dataStore.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//返回数组中元素的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.dataStore.length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//清除队列</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataStore = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用示例-2\"><a href=\"#使用示例-2\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> q = <span class=\"keyword\">new</span> Queue();</span><br><span class=\"line\">q.enqueue(<span class=\"string\">\"Meredith\"</span>);</span><br><span class=\"line\">q.enqueue(<span class=\"string\">\"Cynthia\"</span>);</span><br><span class=\"line\">q.enqueue(<span class=\"string\">\"Jennifer\"</span>);</span><br><span class=\"line\">\b<span class=\"built_in\">console</span>.log(q.toString());<span class=\"comment\">//Meredith Cynthia Jennifer</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q.front());<span class=\"comment\">//Meredith</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q.back());<span class=\"comment\">//Jennifer</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章-2\"><a href=\"#参考文章-2\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.cnblogs.com/tylerdonet/p/5837730.html\" target=\"_blank\" rel=\"noopener\">javascript中的队列结构</a></li>\n</ul>\n<h2 id=\"四、单链表\"><a href=\"#四、单链表\" class=\"headerlink\" title=\"四、单链表\"></a>四、单链表</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>单链表是一种链式存取的数据结构。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。</p>\n<h3 id=\"加入函数-3\"><a href=\"#加入函数-3\" class=\"headerlink\" title=\"加入函数\"></a>加入函数</h3><table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value(_key)</td>\n<td>根据key的值来获取value值</td>\n<td>value</td>\n</tr>\n<tr>\n<td>add(_key,_value)”</td>\n<td>往链表的尾部加入一个节点</td>\n<td>value</td>\n</tr>\n<tr>\n<td>insert(_key,node)”</td>\n<td>从某节点之后插入新节点node</td>\n<td>无</td>\n</tr>\n<tr>\n<td>insertBefore(_key,node)</td>\n<td>从某节点之后插入新节点node</td>\n<td>无</td>\n</tr>\n<tr>\n<td>remove(_key)</td>\n<td>从链表中移除一个key</td>\n<td>无</td>\n</tr>\n<tr>\n<td>removeAt(n)</td>\n<td>删除指定位置的节点</td>\n<td>无</td>\n</tr>\n<tr>\n<td>removeAll</td>\n<td>清空链表</td>\n<td>无</td>\n</tr>\n<tr>\n<td>exists(_key)</td>\n<td>检查链表类中是否存在一个key</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>getJSON</td>\n<td>转换成JSON字符串</td>\n<td>str</td>\n</tr>\n<tr>\n<td>getArrayJSON</td>\n<td>将所有节点的value转换成JSON字符串，数组格式</td>\n<td>array</td>\n</tr>\n<tr>\n<td>getNodeByIndex</td>\n<td>取第N个位置的节点（头节点为第0个位置）</td>\n<td>node</td>\n</tr>\n<tr>\n<td>getNodeByValue</td>\n<td>查询值为V的节点（返回第一个找到的）</td>\n<td>node</td>\n</tr>\n<tr>\n<td>print</td>\n<td>打印输出所有节点</td>\n<td>string</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>对链表进行排序</td>\n<td>无</td>\n</tr>\n<tr>\n<td>hasSameValueNode</td>\n<td>测试单链表L中是否有重复元素</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>reverseSingleLink</td>\n<td>单链表元素反转</td>\n<td>link</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkNode</span>(<span class=\"params\">\\_key, \\_value</span>) </span>&#123;<span class=\"comment\">// 链表类的节点类</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Key = _key;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Value = _value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Link</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">// 创建一个链表类</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.root = <span class=\"keyword\">new</span> linkNode(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>); <span class=\"comment\">//root永远是个空节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.end = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Link.prototype = &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,<span class=\"comment\">//key的数量</span></span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_key</span>) </span>&#123;<span class=\"comment\">//根据key的值来获取value值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.Key == _key)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">\\_key, \\_value</span>) </span>&#123;<span class=\"comment\">// 往链表的尾部中加入一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.Key == _key)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i.Value = _value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = <span class=\"keyword\">new</span> linkNode(\\_key, \\_value);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.count == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.root.next = node;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.end.next = node;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = node;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    insert: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_key, node</span>) </span>&#123;<span class=\"comment\">// 从链表类的某节点之后插入新节点node.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.Key == _key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> tmp = i.next;</span><br><span class=\"line\">                i.next = node;</span><br><span class=\"line\">                node.next = tmp;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    insertBefore: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_key, node</span>) </span>&#123;<span class=\"comment\">// 从链表类的某节点之后插入新节点node.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.next.Key == _key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> tmp = i.next;</span><br><span class=\"line\">                i.next = node;</span><br><span class=\"line\">                node.next = tmp;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    remove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_key</span>) </span>&#123;<span class=\"comment\">// 从链表类中移除一个key</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.next.Key == _key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i.next.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.end = i;</span><br><span class=\"line\">                i.next = i.next.next;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.count--;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next))</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeAt : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;<span class=\"comment\">//删除指定位置的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> preNode = <span class=\"keyword\">this</span>.getNodeByIndex(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        preNode.next = preNode.next.next;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeAll: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">// 清空链表类</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root = <span class=\"keyword\">new</span> linkNode(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    exists: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_key</span>) </span>&#123;<span class=\"comment\">// 检查链表类中是否存在一个key</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.Key == _key)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getJSON: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">// 转换成JSON字符串，内部方法，用于递归</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getChild = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            str += <span class=\"string\">\"&#123;\\\\\"</span>Key\\\\<span class=\"string\">\":\\\\\"</span><span class=\"string\">\" + node.Key + \"</span>\\\\<span class=\"string\">\",\\\\\"</span>Value\\\\<span class=\"string\">\":\"</span> + me.Obj2str(node.Value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                str += <span class=\"string\">\",\\\\\"</span>next\\\\<span class=\"string\">\":\"</span> + getChild(node.next);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                str += <span class=\"string\">\",\\\\\"</span>next\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            str += <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> link = <span class=\"string\">\"&#123;\\\\\"</span>root\\\\<span class=\"string\">\":&#123;\\\\\"</span>Key\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\",\\\\\"</span>Value\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\",\\\\\"</span>next\\\\<span class=\"string\">\":\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.count == <span class=\"number\">0</span>)<span class=\"comment\">//如果空表</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\\\\\"</span>root\\\\<span class=\"string\">\":&#123;\\\\\"</span>Key\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\",\\\\\"</span>Value\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\",\\\\\"</span>next\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\"&#125;,\\\\\"</span>end\\\\<span class=\"string\">\":&#123;\\\\\"</span>Key\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\",\\\\\"</span>Value\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\",\\\\\"</span>next\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\"&#125;,\\\\\"</span>count\\\\<span class=\"string\">\":\\\\\"</span><span class=\"number\">0</span>\\\\<span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        link += getChild(<span class=\"keyword\">this</span>.root.next) + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//加上end</span></span><br><span class=\"line\">        link += <span class=\"string\">\",\\\\\"</span>end\\\\<span class=\"string\">\":&#123;\\\\\"</span>Key\\\\<span class=\"string\">\":\\\\\"</span><span class=\"string\">\" + this.end.Key + \"</span>\\\\<span class=\"string\">\",\\\\\"</span>Value\\\\<span class=\"string\">\":\"</span> + me.Obj2str(<span class=\"keyword\">this</span>.end.Value) + <span class=\"string\">\",\\\\\"</span>next\\\\<span class=\"string\">\":\\\\\"</span><span class=\"literal\">null</span>\\\\<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        link += <span class=\"string\">\"&#125;,\\\\\"</span>count\\\\<span class=\"string\">\":\\\\\"</span><span class=\"string\">\" + this.count + \"</span>\\\\<span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> link;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getArrayJSON: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">// 转所有节点的value换成JSON字符串,数组格式</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> link = <span class=\"string\">\"&#123;'link':[\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next)) &#123;</span><br><span class=\"line\">            link += <span class=\"keyword\">this</span>.Obj2str(i.Value) + <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        link = link.substr(<span class=\"number\">0</span>, link.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        link += <span class=\"string\">\"]&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> link;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getNodeByIndex: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;<span class=\"comment\">//取第N个位置的节点(约定头节点为第0个位置)，N大于链表元素个数时，返回最后一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next != <span class=\"literal\">null</span> &amp;&amp; i &lt; n) &#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getNodeByValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;<span class=\"comment\">//查询值为V的节点，如果链表中有多个相同值的节点，返回第一个找到的</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.data == v) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    print: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//打印输出所有节点</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            print(p.data + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sort: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;<span class=\"comment\">// 对链表进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(i = i.next)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> j = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"built_in\">Boolean</span>(j = j.next)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (j.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fn.call(<span class=\"keyword\">this</span>, j)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> Key = j.Key;</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> Value = j.Value;</span><br><span class=\"line\">                            j.Key = j.next.Key;</span><br><span class=\"line\">                            j.Value = j.next.Value;</span><br><span class=\"line\">                            j.next.Key = Key;</span><br><span class=\"line\">                            j.next.Value = Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.end = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">msg</span>) </span>&#123;<span class=\"comment\">//打印内容</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">println</span>(<span class=\"params\">msg</span>) </span>&#123;<span class=\"comment\">//换行打印内容</span></span><br><span class=\"line\">    print(msg + <span class=\"string\">\"&lt;br/&gt;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasSameValueNode</span>(<span class=\"params\">singleLink</span>) </span>&#123;<span class=\"comment\">//测试单链表L中是否有重复元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = singleLink.head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        i = i.next;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            j = j.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i.data == j.data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseSingleLink</span>(<span class=\"params\">singleLink</span>) </span>&#123;<span class=\"comment\">//单链表元素反转</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = singleLink.head;</span><br><span class=\"line\">    <span class=\"comment\">//先跑一遍，把所有节点放入数组</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">        arr.push(p.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newLink = <span class=\"keyword\">new</span> SingleLink();</span><br><span class=\"line\">    <span class=\"comment\">//再从后向前遍历数组,加入新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        newLink.insert(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newLink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用示例-3\"><a href=\"#使用示例-3\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> linkTest = <span class=\"keyword\">new</span> SingleLink();</span><br><span class=\"line\">    linkTest.insert(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">    linkTest.insert(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    linkTest.insert(<span class=\"string\">'C'</span>);</span><br><span class=\"line\">    linkTest.insert(<span class=\"string\">'D'</span>);</span><br><span class=\"line\">    linkTest.print();<span class=\"comment\">//A B C D</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> newLink = reverseSingleLink(linkTest);</span><br><span class=\"line\">    newLink.print();<span class=\"comment\">//D C B A</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章-3\"><a href=\"#参考文章-3\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.cnblogs.com/yjmyzz/archive/2013/05/21/3091653.html\" target=\"_blank\" rel=\"noopener\">javascript:算法笔记</a></li>\n<li><a href=\"http://www.jb51.net/article/38870.htm\" target=\"_blank\" rel=\"noopener\">js单向链表的具体实现实例</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"}]},{"title":"Leetcode的JS实现——Easy篇（下）","slug":"Leetcode的JS实现——Easy篇（下）","date":"2017-03-26T04:40:52.000Z","updated":"2019-07-04T08:09:14.549Z","comments":true,"path":"api/articles/Leetcode的JS实现——Easy篇（下）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这是 Leetcode 的 JS 实现——Easy 篇的后半部分，前半部分可以<a href=\"/20170326/js-implementation-of-leetcode-easy-part1.html\">点击这里</a>查看</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Leetcode 地址：<a href=\"https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problemset/algorithms/，本文不会贴出题目，可以点击标题链接查看原题目</a></p>\n<p>排序方式：按照\b本难度中题目的 accepted 统计</p>\n<h2 id=\"JS-代码实现\"><a href=\"#JS-代码实现\" class=\"headerlink\" title=\"JS 代码实现\"></a>JS 代码实现</h2><h3 id=\"121-Best-Time-to-Buy-and-Sell-Stock\"><a href=\"#121-Best-Time-to-Buy-and-Sell-Stock\" class=\"headerlink\" title=\"121-Best Time to Buy and Sell Stock\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description\" target=\"_blank\" rel=\"noopener\">121-Best Time to Buy and Sell Stock</a></h3><h4 id=\"方法一：动态规划\"><a href=\"#方法一：动态规划\" class=\"headerlink\" title=\"方法一：动态规划\"></a>方法一：动态规划</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxPro = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minPrice = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ,n = prices.length; i&lt;n;i++)&#123;</span><br><span class=\"line\">        minPrice = <span class=\"built_in\">Math</span>.min(minPrice, prices[i]);</span><br><span class=\"line\">        maxPro = <span class=\"built_in\">Math</span>.max(maxPro, prices[i] - minPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxPro;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：Kadane’s-Algorithm\"><a href=\"#方法二：Kadane’s-Algorithm\" class=\"headerlink\" title=\"方法二：Kadane’s Algorithm\"></a>方法二：Kadane’s Algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = functon(pris)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxCur = <span class=\"number\">0</span>, maxSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>,n = prices.length;i&lt;n; i++) &#123;</span><br><span class=\"line\">        maxCur = <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, maxCur += prices[i] - prices[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">        maxSoFar = <span class=\"built_in\">Math</span>.max(maxCur, maxSoFar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSoFar;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"202-Happy-Number\"><a href=\"#202-Happy-Number\" class=\"headerlink\" title=\"202-Happy Number\"></a><a href=\"https://leetcode.com/problems/happy-number/#/description\" target=\"_blank\" rel=\"noopener\">202-Happy Number</a></h3><h4 id=\"方法一：Floyd-Cycle-detection-algorithm\"><a href=\"#方法一：Floyd-Cycle-detection-algorithm\" class=\"headerlink\" title=\"方法一：Floyd Cycle detection algorithm\"></a>方法一：Floyd Cycle detection algorithm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> slow, fast;</span><br><span class=\"line\">    slow = fast = n;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        slow = digitSquareSum(slow);</span><br><span class=\"line\">        fast = digitSquareSum(fast);</span><br><span class=\"line\">        fast = digitSquareSum(fast);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(slow != fast);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> digitSquareSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：O-1-space，如果快-慢，证明陷入了死循环\"><a href=\"#方法二：O-1-space，如果快-慢，证明陷入了死循环\" class=\"headerlink\" title=\"方法二：O(1)space，如果快 = 慢，证明陷入了死循环\"></a>方法二：O(1)space，如果快 = 慢，证明陷入了死循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = n,y = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        x = cal(x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">        y = cal(cal(y));            </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==<span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==y) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">        tmp = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += tmp * tmp;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\"><a href=\"#方法三：Using-fact-all-numbers-in-2-6-are-not-happy-and-all-not-happy-numbers-end-on-a-cycle-that-hits-this-interval\" class=\"headerlink\" title=\"方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)\"></a>方法三：Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">            next+=(n%<span class=\"number\">10</span>)*(n%<span class=\"number\">10</span>); </span><br><span class=\"line\">            n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"326-Power-of-Three\"><a href=\"#326-Power-of-Three\" class=\"headerlink\" title=\"326-Power of Three\"></a><a href=\"https://leetcode.com/problems/power-of-three/#/description\" target=\"_blank\" rel=\"noopener\">326-Power of Three</a></h3><h4 id=\"方法一：递归\"><a href=\"#方法一：递归\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">3</span>===<span class=\"number\">0</span> &amp;&amp; isPowerOfThree(n/<span class=\"number\">3</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代\"><a href=\"#方法二：迭代\" class=\"headerlink\" title=\"方法二：迭代\"></a>方法二：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n%<span class=\"number\">3</span>===<span class=\"number\">0</span>) &#123;n /= <span class=\"number\">3</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：int-型数字中最大的-3-的幂为-1162261467\"><a href=\"#方法三：int-型数字中最大的-3-的幂为-1162261467\" class=\"headerlink\" title=\"方法三：int 型数字中最大的 3 的幂为 1162261467\"></a>方法三：int 型数字中最大的 3 的幂为 1162261467</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1162261467</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：对-n-取根值\"><a href=\"#方法四：对-n-取根值\" class=\"headerlink\" title=\"方法四：对 n 取根值\"></a>方法四：对 n 取根值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">Math</span>.log10(n) / <span class=\"built_in\">Math</span>.log10(<span class=\"number\">3</span>)) % <span class=\"number\">1</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：正则表达式\"><a href=\"#方法五：正则表达式\" class=\"headerlink\" title=\"方法五：正则表达式\"></a>方法五：正则表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfThree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^10*$\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(n.toString(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"327-Power-of-Two\"><a href=\"#327-Power-of-Two\" class=\"headerlink\" title=\"327-Power of Two\"></a><a href=\"https://leetcode.com/problems/power-of-two/#/description\" target=\"_blank\" rel=\"noopener\">327-Power of Two</a></h3><h4 id=\"方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\"><a href=\"#方法一：Power-of-2-means-only-one-bit-of-n-is-‘1’-so-use-the-trick-n-amp-n-1-0-to-judge-whether-that-is-the-case\" class=\"headerlink\" title=\"方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case\"></a>方法一：Power of 2 means only one bit of n is ‘1’, so use the trick n&amp;(n-1)==0 to judge whether that is the case</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(n&amp;(n<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\"><a href=\"#方法二：同样利用二进制数字中只有-1-个-“1”-的特性，用-replace-方法求二进制数字中-1-的数目\" class=\"headerlink\" title=\"方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目\"></a>方法二：同样利用二进制数字中只有 1 个 “1” 的特性，用 replace() 方法求二进制数字中 1 的数目</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; n.toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">''</span>).length == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：迭代\"><a href=\"#方法三：迭代\" class=\"headerlink\" title=\"方法三：迭代\"></a>方法三：迭代</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n%<span class=\"number\">2</span>===<span class=\"number\">0</span>) n/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n==<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四：递归\"><a href=\"#方法四：递归\" class=\"headerlink\" title=\"方法四：递归\"></a>方法四：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (n==<span class=\"number\">1</span> || (n%<span class=\"number\">2</span>===<span class=\"number\">0</span> &amp;&amp; isPowerOfTwo(n/<span class=\"number\">2</span>)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法五：利用-int-型数字中最大的-2-的幂\"><a href=\"#方法五：利用-int-型数字中最大的-2-的幂\" class=\"headerlink\" title=\"方法五：利用 int 型数字中最大的 2 的幂\"></a>方法五：利用 int 型数字中最大的 2 的幂</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfTwo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1073741824</span> % n === <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"83-Remove-Duplicates-from-Sorted-List\"><a href=\"#83-Remove-Duplicates-from-Sorted-List\" class=\"headerlink\" title=\"83-Remove Duplicates from Sorted List\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/#/description\" target=\"_blank\" rel=\"noopener\">83-Remove Duplicates from Sorted List</a></h3><h4 id=\"方法一：递归-1\"><a href=\"#方法一：递归-1\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span> || head.next === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    head.next = deleteDuplicates(head.next);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.val == head.next.val ? head.next : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"70-Climbing-Stairs\"><a href=\"#70-Climbing-Stairs\" class=\"headerlink\" title=\"70-Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/#/description\" target=\"_blank\" rel=\"noopener\">70-Climbing Stairs</a></h3><h4 id=\"方法一：斐波那契数列\"><a href=\"#方法一：斐波那契数列\" class=\"headerlink\" title=\"方法一：斐波那契数列\"></a>方法一：斐波那契数列</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> one_step_before = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> two_steps_before = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> all_ways = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">    \tall_ways = one_step_before + two_steps_before;</span><br><span class=\"line\">    \ttwo_steps_before = one_step_before;</span><br><span class=\"line\">        one_step_before = all_ways;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> all_ways;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\"><a href=\"#方法二：从终点向前循环，利用两个指针，a-代表到达当前步所有可能方式的个数，b-代表到达下一步所有可能方式的个数\" class=\"headerlink\" title=\"方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数\"></a>方法二：从终点向前循环，利用两个指针，a 代表到达当前步所有可能方式的个数，b 代表到达下一步所有可能方式的个数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    a = b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">        a = (b += a) - a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53-Maximum Subarray\"></a><a href=\"https://leetcode.com/problems/maximum-subarray/#/description\" target=\"_blank\" rel=\"noopener\">53-Maximum Subarray</a></h3><h4 id=\"方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\"><a href=\"#方法一：Basically-keep-adding-each-integer-to-the-sequence-until-the-sum-drops-below-0-If-sum-is-negative-then-should-reset-the-sequence\" class=\"headerlink\" title=\"方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.\"></a>方法一：Basically, keep adding each integer to the sequence until the sum drops below 0.If sum is negative, then should reset the sequence.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans=nums[<span class=\"number\">0</span>],i,j,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        sum+=nums[i];            </span><br><span class=\"line\">        ans=<span class=\"built_in\">Math</span>.max(sum,ans);</span><br><span class=\"line\">        sum=<span class=\"built_in\">Math</span>.max(sum,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：动态规划\"><a href=\"#方法二：动态规划\" class=\"headerlink\" title=\"方法二：动态规划\"></a>方法二：动态规划</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp = [];<span class=\"comment\">//dp[i] means the maximum subarray ending with nums[i];</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = nums[i] + (dp[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span> ? dp[i - <span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">        max = <span class=\"built_in\">Math</span>.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"437-Path-Sum-III\"><a href=\"#437-Path-Sum-III\" class=\"headerlink\" title=\"437-Path Sum III\"></a><a href=\"https://leetcode.com/problems/path-sum-iii/#/description\" target=\"_blank\" rel=\"noopener\">437-Path Sum III</a></h3><h4 id=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"><a href=\"#方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\" class=\"headerlink\" title=\"方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的\"></a>方法一：用哈希表来建立所有的前缀路径之和跟其个数之间的映射，然后看子路径之和有没有等于给定值的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; sum</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = [];</span><br><span class=\"line\">    map[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  <span class=\"comment\">//Default sum = 0 has one count</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> backtrack(root, <span class=\"number\">0</span>, sum, map); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> backtrack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root,sum,target,map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    sum += root.val;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = map[sum-target] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum-target];<span class=\"comment\">//See if there is a subarray sum equals to target</span></span><br><span class=\"line\">    map[sum] = (map[sum] === <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : map[sum])+<span class=\"number\">1</span>;<span class=\"comment\">//Extend to left and right child</span></span><br><span class=\"line\">    res += backtrack(root.left, sum, target, map) + backtrack(root.right, sum, target, map);</span><br><span class=\"line\">    map[sum]--;   <span class=\"comment\">//Remove the current node so it wont affect other path</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\"><a href=\"#方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量-pre-来记录之前路径之和，然后-cur-为-pre-加上当前节点值，如果-cur-等于-sum，那么返回结果时要加-1，然后对当前节点的左右子节点调用递归函数求解\" class=\"headerlink\" title=\"方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解\"></a>方法二：利用前序遍历，对于每个遍历到的节点进行处理，维护一个变量 pre 来记录之前路径之和，然后 cur 为 pre 加上当前节点值，如果 cur 等于 sum，那么返回结果时要加 1，然后对当前节点的左右子节点调用递归函数求解</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; sum</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sumUp(root, <span class=\"number\">0</span>, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumUp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node,pre,sum</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = pre + node.val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cur == sum) + sumUp(node.left, cur, sum) + sumUp(node.right, cur, sum);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"501-Find-Mode-in-Binary-Search-Tree\"><a href=\"#501-Find-Mode-in-Binary-Search-Tree\" class=\"headerlink\" title=\"501-Find Mode in Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/find-mode-in-binary-search-tree/#/description\" target=\"_blank\" rel=\"noopener\">501-Find Mode in Binary Search Tree</a></h3><h4 id=\"方法一：Morris-traversal（二叉树遍历方法，参考链接）\"><a href=\"#方法一：Morris-traversal（二叉树遍历方法，参考链接）\" class=\"headerlink\" title=\"方法一：Morris traversal（二叉树遍历方法，参考链接）\"></a>方法一：Morris traversal（二叉树遍历方法，<a href=\"http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currVal,</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    maxCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>,</span><br><span class=\"line\">    modes = []; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    inorder(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(modeCount);</span><br><span class=\"line\">    modeCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    inorder(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val != currVal) &#123;</span><br><span class=\"line\">        currVal = val;</span><br><span class=\"line\">        currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currCount;</span><br><span class=\"line\">        modeCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">            modes[modeCount] = currVal;</span><br><span class=\"line\">        modeCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inorder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                handleValue(node.val);</span><br><span class=\"line\">                node = node.right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> prev = node.left;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (prev.right !== <span class=\"literal\">null</span> &amp;&amp; prev.right != node)</span><br><span class=\"line\">                    prev = prev.right;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (prev.right === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    prev.right = node;</span><br><span class=\"line\">                    node = node.left;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    prev.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    handleValue(node.val);</span><br><span class=\"line\">                    node = node.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\"><a href=\"#方法二：先用递归得到有多少个-modes，然后再申请空间保证-O-1-的空间复杂度\" class=\"headerlink\" title=\"方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度\"></a>方法二：先用递归得到有多少个 modes，然后再申请空间保证 O(1) 的空间复杂度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modes = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> findMode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    helper(root);</span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(currentModes);</span><br><span class=\"line\">    currentModes = <span class=\"number\">0</span>;</span><br><span class=\"line\">    currentCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    helper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modes;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> helper = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    helper(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val != currentValue) &#123;</span><br><span class=\"line\">        currentCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        currentValue = root.val;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        currentCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentCount &gt; maxCount) &#123;</span><br><span class=\"line\">        maxCount = currentCount;</span><br><span class=\"line\">        currentModes = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentCount == maxCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modes !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            modes[currentModes] = root.val;</span><br><span class=\"line\">            currentModes++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    helper(root.right);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"191-Number-of-1-Bits\"><a href=\"#191-Number-of-1-Bits\" class=\"headerlink\" title=\"191-Number of 1 Bits\"></a><a href=\"https://leetcode.com/problems/number-of-1-bits/#/description\" target=\"_blank\" rel=\"noopener\">191-Number of 1 Bits</a></h3><h4 id=\"方法一：利用-toString-2-和-replace\"><a href=\"#方法一：利用-toString-2-和-replace\" class=\"headerlink\" title=\"方法一：利用 toString(2) 和 replace()\"></a>方法一：利用 toString(2) 和 replace()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n.toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">''</span>).length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用-n-n-amp-n-1\"><a href=\"#方法二：利用-n-n-amp-n-1\" class=\"headerlink\" title=\"方法二：利用 n=n&amp;(n-1)\"></a>方法二：利用 n=n&amp;(n-1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;n!==<span class=\"number\">0</span>;n = n &amp; (n<span class=\"number\">-1</span>))</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：位运算\"><a href=\"#方法三：位运算\" class=\"headerlink\" title=\"方法三：位运算\"></a>方法三：位运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ones = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \tones = ones + (n &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    \tn = n&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ones;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"35-Search Insert Position\"></a><a href=\"https://leetcode.com/problems/search-insert-position/#/description\" target=\"_blank\" rel=\"noopener\">35-Search Insert Position</a></h3><h4 id=\"方法一：按部就班遍历\"><a href=\"#方法一：按部就班遍历\" class=\"headerlink\" title=\"方法一：按部就班遍历\"></a>方法一：按部就班遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target&lt;=nums[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找\"><a href=\"#方法二：二分查找\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = nums.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor((low+high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123;<span class=\"keyword\">return</span> mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &gt; target) &#123;high = mid<span class=\"number\">-1</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;low = mid+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"107-Binary-Tree-Level-Order-Traversal-II\"><a href=\"#107-Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"107-Binary Tree Level Order Traversal II\"></a><a href=\"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/#/description\" target=\"_blank\" rel=\"noopener\">107-Binary Tree Level Order Traversal II</a></h3><p>暂无</p>\n<h3 id=\"263-Ugly-Number\"><a href=\"#263-Ugly-Number\" class=\"headerlink\" title=\"263-Ugly Number\"></a><a href=\"https://leetcode.com/problems/ugly-number/#/description\" target=\"_blank\" rel=\"noopener\">263-Ugly Number</a></h3><h4 id=\"方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\"><a href=\"#方法一：根据丑陋数的定义，我们将给定数除以-2、3、5，直到无法整除，也就是除以-2、3、5-的余数不再为-0-时停止。这时如果得到-1，说明是所有因子都是-2-或-3-或-5，如果不是-1，则不是丑陋数。\" class=\"headerlink\" title=\"方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。\"></a>方法一：根据丑陋数的定义，我们将给定数除以 2、3、5，直到无法整除，也就是除以 2、3、5 的余数不再为 0 时停止。这时如果得到 1，说明是所有因子都是 2 或 3 或 5，如果不是 1，则不是丑陋数。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isUgly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">of</span> [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &amp;&amp; num % p === <span class=\"number\">0</span>)</span><br><span class=\"line\">        num /= p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"459-Repeated-Substring-Pattern\"><a href=\"#459-Repeated-Substring-Pattern\" class=\"headerlink\" title=\"459-Repeated Substring Pattern\"></a><a href=\"https://leetcode.com/problems/repeated-substring-pattern/#/description\" target=\"_blank\" rel=\"noopener\">459-Repeated Substring Pattern</a></h3><h4 id=\"方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\"><a href=\"#方法一：The-idea-is-that-when-we-see-a-character-in-str-that-matches-the-very-first-character-of-str-we-can-start-to-hoping-that-str-is-a-built-by-copies-of-the-substring-composed-by-all-characters-before-the-reappearance-of-the-its-first-character\" class=\"headerlink\" title=\"方法一：The idea is that when we see a character in str that matches the very first character of str, we can start to hoping that str is a built by copies of the substring composed by all characters before the reappearance of the its first character.\"></a>方法一：The idea is that when we see a character in <em>str</em> that matches the very first character of <em>str</em>, we can start to hoping that <em>str</em> is a built by copies of the substring composed by all characters before the reappearance of the its first character.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> repeatedSubstringPattern = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sb = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = s.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    sb += first;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= l / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = s.charAt(i++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == first &amp;&amp; isCopies(s, sb)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb += c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isCopies = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str,substr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.length % substr.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = substr.length; i &lt; str.length; i += substr.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.substring(i).slice(<span class=\"number\">0</span>,substr.length) !== substr)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其他方法仍在思考实现中</p>\n<h3 id=\"21-Merge-Two-Sorted-Lists\"><a href=\"#21-Merge-Two-Sorted-Lists\" class=\"headerlink\" title=\"21-Merge Two Sorted Lists\"></a><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/#/solutions\" target=\"_blank\" rel=\"noopener\">21-Merge Two Sorted Lists</a></h3><h4 id=\"方法一：递归-2\"><a href=\"#方法一：递归-2\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2 === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        l2.next = mergeTwoLists(l2.next, l1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\"><a href=\"#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\" class=\"headerlink\" title=\"235-Lowest Common Ancestor of a Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/#/description\" target=\"_blank\" rel=\"noopener\">235-Lowest Common Ancestor of a Binary Search Tree</a></h3><h4 id=\"方法一：递归-3\"><a href=\"#方法一：递归-3\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><p>因为这是一棵二叉搜索数，所以两个节点分别与共同的祖先节点相减所得的差应该是异号或等于0的，否则就根据节点与当前根节点的大小比较对其左子树或右子树进行递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; p</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; q</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;TreeNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((root.val - p.val) * (root.val - q.val) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        root = p.val &lt; root.val ? root.left : root.right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：迭代，和递归类似，只不过代码更加简化\"><a href=\"#方法二：迭代，和递归类似，只不过代码更加简化\" class=\"headerlink\" title=\"方法二：迭代，和递归类似，只不过代码更加简化\"></a>方法二：迭代，和递归类似，只不过代码更加简化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; p</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; q</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;TreeNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (root.val - p.val) * (root.val - q.val) &lt; <span class=\"number\">1</span> ? root :</span><br><span class=\"line\">           lowestCommonAncestor(p.val &lt; root.val ? root.left : root.right, p, q);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"198-House-Robber\"><a href=\"#198-House-Robber\" class=\"headerlink\" title=\"198-House Robber\"></a><a href=\"https://leetcode.com/problems/house-robber/#/description\" target=\"_blank\" rel=\"noopener\">198-House Robber</a></h3><h4 id=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"><a href=\"#方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\" class=\"headerlink\" title=\"方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律\"></a>方法一：根据房间数的奇偶进行分类存储最大值，并且有以下规律</h4><blockquote>\n<p>f(0) = nums[0] f(1) = max(num[0], num[1]) f(k) = max( f(k-2) + nums[k], f(k-1) )</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">        b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span>===<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a = <span class=\"built_in\">Math</span>.max(a+nums[i], b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b = <span class=\"built_in\">Math</span>.max(a, b+nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"342-Power-of-Four\"><a href=\"#342-Power-of-Four\" class=\"headerlink\" title=\"342-Power of Four\"></a><a href=\"https://leetcode.com/problems/power-of-four/#/description\" target=\"_blank\" rel=\"noopener\">342-Power of Four</a></h3><h4 id=\"方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\"><a href=\"#方法一：因为能被-4-整除的数用二进制表示的话有且只有一个-1-在奇数位上\" class=\"headerlink\" title=\"方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上\"></a>方法一：因为能被 4 整除的数用二进制表示的话有且只有一个 1 在奇数位上</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num&amp;(num<span class=\"number\">-1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num &amp; <span class=\"number\">0x55555555</span>) !== <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：很好用的-replace-length\"><a href=\"#方法二：很好用的-replace-length\" class=\"headerlink\" title=\"方法二：很好用的 replace().length\"></a>方法二：很好用的 replace().length</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.toString(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"string\">''</span>).length === <span class=\"number\">1</span> &amp;&amp; num.toString(<span class=\"number\">2</span>).length%<span class=\"number\">2</span> ===<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\"><a href=\"#方法三：利用-2-的倍数减-1-无法整除-3-而-4-的倍数减-1-可以整除-3-的特性\" class=\"headerlink\" title=\"方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性\"></a>方法三：利用 2 的倍数减 1 无法整除 3 而 4 的倍数减 1 可以整除 3 的特性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPowerOfFour = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> &amp;&amp; (num &amp; (num - <span class=\"number\">1</span>)) === <span class=\"number\">0</span> &amp;&amp; (num - <span class=\"number\">1</span>) % <span class=\"number\">3</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"345-Reverse-Vowels-of-a-String\"><a href=\"#345-Reverse-Vowels-of-a-String\" class=\"headerlink\" title=\"345-Reverse Vowels of a String\"></a><a href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/#/solutions\" target=\"_blank\" rel=\"noopener\">345-Reverse Vowels of a String</a></h3><h4 id=\"方法一：利用二分法和替代数组\"><a href=\"#方法一：利用二分法和替代数组\" class=\"headerlink\" title=\"方法一：利用二分法和替代数组\"></a>方法一：利用二分法和替代数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseVowels = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.length &lt;= <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> s;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'u'</span>,<span class=\"string\">'A'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'I'</span>,<span class=\"string\">'O'</span>,<span class=\"string\">'U'</span>],</span><br><span class=\"line\">        res = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(s.length);</span><br><span class=\"line\">        left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = s.length <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.indexOf(s[left]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.indexOf(s[right]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[right] = s[right];</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr.indexOf(s[left]) &gt;=<span class=\"number\">0</span> &amp;&amp; arr.indexOf(s[right]) &gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res[left] = s[right];</span><br><span class=\"line\">            res[right] = s[left];</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"367-Valid-Perfect-Square\"><a href=\"#367-Valid-Perfect-Square\" class=\"headerlink\" title=\"367-Valid Perfect Square\"></a><a href=\"https://leetcode.com/problems/valid-perfect-square/#/description\" target=\"_blank\" rel=\"noopener\">367-Valid Perfect Square</a></h3><h4 id=\"方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\"><a href=\"#方法一：完全平方数一定是-1-3-5-7……O-sqrt-N\" class=\"headerlink\" title=\"方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))\"></a>方法一：完全平方数一定是 1+3+5+7……O(sqrt(N))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; num &gt; <span class=\"number\">0</span>; i += <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        num -= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找，O-logN\"><a href=\"#方法二：二分查找，O-logN\" class=\"headerlink\" title=\"方法二：二分查找，O(logN)\"></a>方法二：二分查找，O(logN)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>, right = num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> t = mid * mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &gt; num) &#123;</span><br><span class=\"line\">          right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; num) &#123;</span><br><span class=\"line\">          left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法，O-1\"><a href=\"#方法三：牛顿迭代法，O-1\" class=\"headerlink\" title=\"方法三：牛顿迭代法，O(1)\"></a>方法三：<a href=\"https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\" target=\"_blank\" rel=\"noopener\">牛顿迭代法</a>，O(1)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPerfectSquare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t * t &gt; num) &#123;</span><br><span class=\"line\">        t = <span class=\"built_in\">Math</span>.floor((t + num / t) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t * t == num || num === <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"27-Remove-Element\"><a href=\"#27-Remove-Element\" class=\"headerlink\" title=\"27-Remove Element\"></a><a href=\"https://leetcode.com/problems/remove-element/#/description\" target=\"_blank\" rel=\"noopener\">27-Remove Element</a></h3><h4 id=\"方法一：在获得剩余长度的同时生成新数组\"><a href=\"#方法一：在获得剩余长度的同时生成新数组\" class=\"headerlink\" title=\"方法一：在获得剩余长度的同时生成新数组\"></a>方法一：在获得剩余长度的同时生成新数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; nums.length ; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val)</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums[i-cnt] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length-cnt;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：既短又快\"><a href=\"#方法二：既短又快\" class=\"headerlink\" title=\"方法二：既短又快\"></a>方法二：既短又快</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">            nums[i--] = nums[l-- <span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"101-Symmetric-Tree\"><a href=\"#101-Symmetric-Tree\" class=\"headerlink\" title=\"101-Symmetric Tree\"></a><a href=\"https://leetcode.com/problems/symmetric-tree/#/description\" target=\"_blank\" rel=\"noopener\">101-Symmetric Tree</a></h3><h4 id=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"><a href=\"#方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\" class=\"headerlink\" title=\"方法一：通过另外一个方法判断其左右子树是否都是”镜像数”\"></a>方法一：通过另外一个方法判断其左右子树是否都是”镜像数”</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root===<span class=\"literal\">null</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMirror(root.left,root.right);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isMirror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p,q</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> &amp;&amp; q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p===<span class=\"literal\">null</span> || q===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p.val==q.val) &amp;&amp; isMirror(p.left,q.right) &amp;&amp; isMirror(p.right,q.left);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：通过队列（在-JS-中通过数组模拟）\"><a href=\"#方法二：通过队列（在-JS-中通过数组模拟）\" class=\"headerlink\" title=\"方法二：通过队列（在 JS 中通过数组模拟）\"></a>方法二：通过队列（在 JS 中通过数组模拟）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> q = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.push(root.left);</span><br><span class=\"line\">    q.push(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = q.shift(),</span><br><span class=\"line\">            right = q.shift();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span>&amp;&amp; right === <span class=\"literal\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left=== <span class=\"literal\">null</span> ^ right === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left.val != right.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        q.push(left.left);</span><br><span class=\"line\">        q.push(right.right);</span><br><span class=\"line\">        q.push(left.right);</span><br><span class=\"line\">        q.push(right.left);            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"66-Plus-One\"><a href=\"#66-Plus-One\" class=\"headerlink\" title=\"66-Plus One\"></a><a href=\"https://leetcode.com/problems/plus-one/#/description\" target=\"_blank\" rel=\"noopener\">66-Plus One</a></h3><h4 id=\"方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\"><a href=\"#方法一：从-n-1-开始遍历，然后用一个变量表示前面一位是否进位\" class=\"headerlink\" title=\"方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位\"></a>方法一：从 n-1 开始遍历，然后用一个变量表示前面一位是否进位</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; digits</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> plusOne = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">digits</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n=digits.length,i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        k = i==n<span class=\"number\">-1</span> ? <span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = digits[i];</span><br><span class=\"line\">        digits[i] = (old + j + k)%<span class=\"number\">10</span>;</span><br><span class=\"line\">        j = <span class=\"built_in\">Math</span>.floor((old + j + k)/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        digits.unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"118-Pascal’s-Triangle\"><a href=\"#118-Pascal’s-Triangle\" class=\"headerlink\" title=\"118-Pascal’s Triangle\"></a><a href=\"https://leetcode.com/problems/pascals-triangle/#/description\" target=\"_blank\" rel=\"noopener\">118-Pascal’s Triangle</a></h3><h4 id=\"方法一：单独用一个方法生成某一行，再-push-进数组\"><a href=\"#方法一：单独用一个方法生成某一行，再-push-进数组\" class=\"headerlink\" title=\"方法一：单独用一个方法生成某一行，再 push 进数组\"></a>方法一：单独用一个方法生成某一行，再 push 进数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; numRows</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = f(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        arr.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(f(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)&#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = f(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            a[i+<span class=\"number\">1</span>] = arr[i]+arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[n<span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：直接对二维数组进行赋值\"><a href=\"#方法二：直接对二维数组进行赋值\" class=\"headerlink\" title=\"方法二：直接对二维数组进行赋值\"></a>方法二：直接对二维数组进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; numRows</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;numRows;k++)&#123;    </span><br><span class=\"line\">        r[k]= [];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++) &#123;</span><br><span class=\"line\">        r[i][<span class=\"number\">0</span>] = r[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">            r[i][j] = r[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + r[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"434-Number-of-Segments-in-a-String\"><a href=\"#434-Number-of-Segments-in-a-String\" class=\"headerlink\" title=\"434. Number of Segments in a String\"></a><a href=\"https://leetcode.com/problems/number-of-segments-in-a-string/#/description\" target=\"_blank\" rel=\"noopener\">434. Number of Segments in a String</a></h3><h4 id=\"方法一：先去掉首尾空格再将非空格替换成空字符\"><a href=\"#方法一：先去掉首尾空格再将非空格替换成空字符\" class=\"headerlink\" title=\"方法一：先去掉首尾空格再将非空格替换成空字符\"></a>方法一：先去掉首尾空格再将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = s.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.length === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : str.replace(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">' '</span>).replace(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">''</span>).length +<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"><a href=\"#方法二：先在首尾加一个空格，然后将非空格替换成空字符\" class=\"headerlink\" title=\"方法二：先在首尾加一个空格，然后将非空格替换成空字符\"></a>方法二：先在首尾加一个空格，然后将非空格替换成空字符</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countSegments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">\" \"</span> + s + <span class=\"string\">\" \"</span>).replace(<span class=\"regexp\">/\\s+/g</span>,<span class=\"string\">' '</span>).replace(<span class=\"regexp\">/\\S/g</span>,<span class=\"string\">''</span>).length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"110-Balanced-Binary-Tree\"><a href=\"#110-Balanced-Binary-Tree\" class=\"headerlink\" title=\"110. Balanced Binary Tree\"></a><a href=\"https://leetcode.com/problems/balanced-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">110. Balanced Binary Tree</a></h3><h4 id=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\"><a href=\"#方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O-N-2\" class=\"headerlink\" title=\"方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)\"></a>方法一：某节点的高度等于该节点的左子树和右子树的高度中的较大值再加一，O(N^2)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=depth(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right=depth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(left - right) &lt;= <span class=\"number\">1</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> depth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(depth(root.left), depth (root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：从底部向上遍历，O-N\"><a href=\"#方法二：从底部向上遍历，O-N\" class=\"headerlink\" title=\"方法二：从底部向上遍历，O(N)\"></a>方法二：从底部向上遍历，O(N)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfsHeight(root) != <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dfsHeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftHeight = dfsHeight (root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftHeight == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightHeight = dfsHeight(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightHeight == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(leftHeight - rightHeight) &gt; <span class=\"number\">1</span>)  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(leftHeight, rightHeight) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"257-Binary-Tree-Paths\"><a href=\"#257-Binary-Tree-Paths\" class=\"headerlink\" title=\"257-Binary Tree Paths\"></a><a href=\"https://leetcode.com/problems/binary-tree-paths/#/description\" target=\"_blank\" rel=\"noopener\">257-Binary Tree Paths</a></h3><p>暂无</p>\n<h3 id=\"441-Arranging-Coins\"><a href=\"#441-Arranging-Coins\" class=\"headerlink\" title=\"441-Arranging Coins\"></a><a href=\"https://leetcode.com/problems/arranging-coins/#/description\" target=\"_blank\" rel=\"noopener\">441-Arranging Coins</a></h3><h4 id=\"方法一：根据公式直接求解-x-x-1-2-lt-n\"><a href=\"#方法一：根据公式直接求解-x-x-1-2-lt-n\" class=\"headerlink\" title=\"方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n\"></a>方法一：根据公式直接求解 (x * ( x + 1)) / 2 &lt;= n</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(((<span class=\"number\">-1</span> + <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> + <span class=\"number\">8</span> *n)) / <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先根据根值确定大致范围，然后二分查找\"><a href=\"#方法二：先根据根值确定大致范围，然后二分查找\" class=\"headerlink\" title=\"方法二：先根据根值确定大致范围，然后二分查找\"></a>方法二：先根据根值确定大致范围，然后二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrangeCoins = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">        end = n,</span><br><span class=\"line\">        mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end)&#123;</span><br><span class=\"line\">        mid = (start + end) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"number\">0.5</span> * mid * mid + <span class=\"number\">0.5</span> * mid ) &lt;= n)&#123;</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"119-Pascal’s-Triangle-II\"><a href=\"#119-Pascal’s-Triangle-II\" class=\"headerlink\" title=\"119-Pascal’s Triangle II\"></a><a href=\"https://leetcode.com/problems/pascals-triangle-ii/#/description\" target=\"_blank\" rel=\"noopener\">119-Pascal’s Triangle II</a></h3><h4 id=\"方法一：递归，直接计算\"><a href=\"#方法一：递归，直接计算\" class=\"headerlink\" title=\"方法一：递归，直接计算\"></a>方法一：递归，直接计算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; rowIndex</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = [];</span><br><span class=\"line\">    A[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;rowIndex+<span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i; j&gt;=<span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j]))&#123;</span><br><span class=\"line\">                A[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(A[j<span class=\"number\">-1</span>]))&#123;</span><br><span class=\"line\">                A[j<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[j] += A[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\"><a href=\"#方法二：根据公式-a-k-1-a-k-n-k-k-1-，其中-a-0-1-和-a-1-n-很容易发现\" class=\"headerlink\" title=\"方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现\"></a>方法二：根据公式 a(k+1) = a(k) * (n-k)/(k+1)，其中 a(0)=1 和 a(1)=n 很容易发现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; rowIndex</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getRow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rowIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rowIndex === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> [<span class=\"number\">1</span>];&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> A=[];  </span><br><span class=\"line\">    A[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    A[<span class=\"number\">1</span>]=rowIndex;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">2</span>;i&lt;=rowIndex;i++) &#123;  </span><br><span class=\"line\">        A[i]=<span class=\"built_in\">Math</span>.floor(A[i<span class=\"number\">-1</span>]*(rowIndex-(i<span class=\"number\">-1</span>))/i); <span class=\"comment\">//in case of overflow  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232-Implement Queue using Stacks\"></a><a href=\"https://leetcode.com/problems/implement-queue-using-stacks/#/description\" target=\"_blank\" rel=\"noopener\">232-Implement Queue using Stacks</a></h3><p>参见我的另外一篇文章：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"141-Linked-List-Cycle\"><a href=\"#141-Linked-List-Cycle\" class=\"headerlink\" title=\"141-Linked List Cycle\"></a><a href=\"https://leetcode.com/problems/linked-list-cycle/#/description\" target=\"_blank\" rel=\"noopener\">141-Linked List Cycle</a></h3><h4 id=\"方法一：一个快指针，一个慢指针\"><a href=\"#方法一：一个快指针，一个慢指针\" class=\"headerlink\" title=\"方法一：一个快指针，一个慢指针\"></a>方法一：一个快指针，一个慢指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head===<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> walker = head,runner = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(runner.next!==<span class=\"literal\">null</span> &amp;&amp; runner.next.next!==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        walker = walker.next;</span><br><span class=\"line\">        runner = runner.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(walker==runner) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"26-Remove-Duplicates-from-Sorted-Array\"><a href=\"#26-Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"26-Remove Duplicates from Sorted Array\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description\" target=\"_blank\" rel=\"noopener\">26-Remove Duplicates from Sorted Array</a></h3><h4 id=\"方法一：遇到不同的元素时才进行赋值\"><a href=\"#方法一：遇到不同的元素时才进行赋值\" class=\"headerlink\" title=\"方法一：遇到不同的元素时才进行赋值\"></a>方法一：遇到不同的元素时才进行赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length===<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;nums.length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i]!=nums[j]) nums[++j]=nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++j;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个变量记录当前重复元素数量\"><a href=\"#方法二：用一个变量记录当前重复元素数量\" class=\"headerlink\" title=\"方法二：用一个变量记录当前重复元素数量\"></a>方法二：用一个变量记录当前重复元素数量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == nums[i<span class=\"number\">-1</span>]) count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> nums[i-count] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length-count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"172-Factorial-Trailing-Zeroes\"><a href=\"#172-Factorial-Trailing-Zeroes\" class=\"headerlink\" title=\"172-Factorial Trailing Zeroes\"></a><a href=\"https://leetcode.com/problems/factorial-trailing-zeroes/#/description\" target=\"_blank\" rel=\"noopener\">172-Factorial Trailing Zeroes</a></h3><h4 id=\"方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\"><a href=\"#方法一：产生-0-的可能性只有-2-5，所以需要计算-n-里有几个-5，2-是足够多的\" class=\"headerlink\" title=\"方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的\"></a>方法一：产生 0 的可能性只有 2*5，所以需要计算 n! 里有几个 5，2 是足够多的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trailingZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">5</span>) + trailingZeroes(n / <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-Palindrome-Number\"><a href=\"#9-Palindrome-Number\" class=\"headerlink\" title=\"9-Palindrome Number\"></a><a href=\"https://leetcode.com/problems/palindrome-number/#/description\" target=\"_blank\" rel=\"noopener\">9-Palindrome Number</a></h3><h4 id=\"方法一：二分查找\"><a href=\"#方法一：二分查找\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span> + x,left=<span class=\"number\">0</span>,right=str.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right-left&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[left] == str[right])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：比较前一半数字和后一半数字是否相等\"><a href=\"#方法二：比较前一半数字和后一半数字是否相等\" class=\"headerlink\" title=\"方法二：比较前一半数字和后一半数字是否相等\"></a>方法二：比较前一半数字和后一半数字是否相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span> || (x!==<span class=\"number\">0</span> &amp;&amp; x%<span class=\"number\">10</span>===<span class=\"number\">0</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x&gt;rev)&#123;</span><br><span class=\"line\">    \trev = rev*<span class=\"number\">10</span> + x%<span class=\"number\">10</span>;</span><br><span class=\"line\">    \tx = <span class=\"built_in\">Math</span>.floor(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x==rev || x==<span class=\"built_in\">Math</span>.floor(rev/<span class=\"number\">10</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"374-Guess-Number-Higher-or-Lower\"><a href=\"#374-Guess-Number-Higher-or-Lower\" class=\"headerlink\" title=\"374-Guess Number Higher or Lower\"></a><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower/#/description\" target=\"_blank\" rel=\"noopener\">374-Guess Number Higher or Lower</a></h3><h4 id=\"方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\"><a href=\"#方法一：二分查找（这道题不能用-JS，所以答案并没有在-leetcode-上验证）\" class=\"headerlink\" title=\"方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）\"></a>方法一：二分查找（这道题不能用 JS，所以答案并没有在 leetcode 上验证）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forward declaration of guess API.</span></span><br><span class=\"line\"><span class=\"comment\">// @param n, your guess</span></span><br><span class=\"line\"><span class=\"comment\">// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> guessNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor(low + (n-low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> res = guess(mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            n = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438-Find All Anagrams in a String\"></a><a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/#/description\" target=\"_blank\" rel=\"noopener\">438-Find All Anagrams in a String</a></h3><p>暂无</p>\n<h3 id=\"112-Path-Sum\"><a href=\"#112-Path-Sum\" class=\"headerlink\" title=\"112-Path Sum\"></a><a href=\"https://leetcode.com/problems/path-sum/#/description\" target=\"_blank\" rel=\"noopener\">112-Path Sum</a></h3><h4 id=\"方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\"><a href=\"#方法一：知道-sum-和-root-val，看左子树或右子树是否能够满足-sum-root-val\" class=\"headerlink\" title=\"方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val\"></a>方法一：知道 sum 和 root.val，看左子树或右子树是否能够满足 sum-root.val</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; sum</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasPathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, sum</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == sum &amp;&amp; root.left === <span class=\"literal\">null</span> &amp;&amp; root.right === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"38-Count-and-Say\"><a href=\"#38-Count-and-Say\" class=\"headerlink\" title=\"38-Count and Say\"></a><a href=\"https://leetcode.com/problems/count-and-say/#/description\" target=\"_blank\" rel=\"noopener\">38-Count and Say</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countAndSay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">'1'</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = countAndSay(n<span class=\"number\">-1</span>),res=<span class=\"string\">''</span>,a=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=s.length;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i+<span class=\"number\">1</span>] == s[i])&#123;</span><br><span class=\"line\">                a++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res += a + s[i];</span><br><span class=\"line\">                a=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"250-Isomorphic-Strings\"><a href=\"#250-Isomorphic-Strings\" class=\"headerlink\" title=\"250-Isomorphic Strings\"></a><a href=\"https://leetcode.com/problems/isomorphic-strings/#/solutions\" target=\"_blank\" rel=\"noopener\">250-Isomorphic Strings</a></h3><h4 id=\"方法一：用哈希表判断重复出现的位置\"><a href=\"#方法一：用哈希表判断重复出现的位置\" class=\"headerlink\" title=\"方法一：用哈希表判断重复出现的位置\"></a>方法一：用哈希表判断重复出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> phic(s,t) &amp;&amp; phic(t,s);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s,t</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=s.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> code = s[i].charCodeAt() - <span class=\"number\">65</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[code] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[code] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i] != t[arr[code]])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：用一个数组保存重复元素第一次出现的位置\"><a href=\"#方法二：用一个数组保存重复元素第一次出现的位置\" class=\"headerlink\" title=\"方法二：用一个数组保存重复元素第一次出现的位置\"></a>方法二：用一个数组保存重复元素第一次出现的位置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; t</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m[s.charCodeAt(i)] != m[t.charCodeAt(i)+<span class=\"number\">256</span>]) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">        m[s.charCodeAt(i)] = m[t.charCodeAt(i)+<span class=\"number\">256</span>] = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20-Valid Parentheses\"></a><a href=\"https://leetcode.com/problems/valid-parentheses/#/description\" target=\"_blank\" rel=\"noopener\">20-Valid Parentheses</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> q = <span class=\"string\">\"()&#123;&#125;[]\"</span>.indexOf(s.substring(i, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.length === <span class=\"number\">0</span> || p.shift() != q - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> p.unshift(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !p.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"111-Minimum-Depth-of-Binary-Tree\"><a href=\"#111-Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"111-Minimum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/#/description\" target=\"_blank\" rel=\"noopener\">111-Minimum Depth of Binary Tree</a></h3><h4 id=\"方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\"><a href=\"#方法一：We-need-to-add-the-smaller-one-of-the-child-depths-except-if-that’s-zero-then-add-the-larger-one\" class=\"headerlink\" title=\"方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.\"></a>方法一：We need to add the smaller one of the child depths - except if that’s zero, then add the larger one.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;TreeNode&#125; root</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minDepth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> L = minDepth(root.left), R = minDepth(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + (<span class=\"built_in\">Math</span>.min(L, R) || <span class=\"built_in\">Math</span>.max(L, R));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"290-Word-Pattern\"><a href=\"#290-Word-Pattern\" class=\"headerlink\" title=\"290-Word Pattern\"></a><a href=\"https://leetcode.com/problems/word-pattern/#/description\" target=\"_blank\" rel=\"noopener\">290-Word Pattern</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; pattern</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; str</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wordPattern = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pattern, str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = str.split(<span class=\"string\">\" \"</span>),mid = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=pattern.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> char = pattern[i].charCodeAt() - <span class=\"number\">97</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid[char] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(inArray(arr[i],mid))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                mid[char] = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid[char] != arr[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> &amp;&amp; (pattern.length == arr.length);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=arr.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] === item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"234-Palindrome-Linked-List\"><a href=\"#234-Palindrome-Linked-List\" class=\"headerlink\" title=\"234-Palindrome Linked List\"></a><a href=\"https://leetcode.com/problems/palindrome-linked-list/#/description\" target=\"_blank\" rel=\"noopener\">234-Palindrome Linked List</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = head,p2 = head,p3 = p1.next,pre = p1;</span><br><span class=\"line\">    <span class=\"comment\">//find mid pointer, and reverse head half part</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p2.next !== <span class=\"literal\">null</span> &amp;&amp; p2.next.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p2 = p2.next.next;</span><br><span class=\"line\">        pre = p1;</span><br><span class=\"line\">        p1 = p3;</span><br><span class=\"line\">        p3 = p3.next;</span><br><span class=\"line\">        p1.next = pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//odd number of elements, need left move p1 one step</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//even number of elements, do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//compare from mid to head/tail</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p3 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1.val != p3.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        p3 = p3.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1.Two Sum\"></a><a href=\"https://leetcode.com/problems/two-sum/#/description\" target=\"_blank\" rel=\"noopener\">1.Two Sum</a></h3><h4 id=\"方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\"><a href=\"#方法一：双层循环（其实应该用哈希表，但是-JS-中没有，需要额外实现）\" class=\"headerlink\" title=\"方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）\"></a>方法一：双层循环（其实应该用哈希表，但是 JS 中没有，需要额外实现）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[j]) == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"219-Contains-Duplicate-II\"><a href=\"#219-Contains-Duplicate-II\" class=\"headerlink\" title=\"219-Contains Duplicate II\"></a><a href=\"https://leetcode.com/problems/contains-duplicate-ii/#/description\" target=\"_blank\" rel=\"noopener\">219-Contains Duplicate II</a></h3><h4 id=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"><a href=\"#方法一：只要读懂题意就差不多了，哈希表及时更新\" class=\"headerlink\" title=\"方法一：只要读懂题意就差不多了，哈希表及时更新\"></a>方法一：只要读懂题意就差不多了，哈希表及时更新</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsNearbyDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [],res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,n=nums.length;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[item] === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(arr[item] - i) &lt;= k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[item] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225-Implement Stack using Queues\"></a><a href=\"https://leetcode.com/problems/implement-stack-using-queues/#/description\" target=\"_blank\" rel=\"noopener\">225-Implement Stack using Queues</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"88-Merge-Sorted-Array\"><a href=\"#88-Merge-Sorted-Array\" class=\"headerlink\" title=\"88.Merge Sorted Array\"></a><a href=\"https://leetcode.com/problems/merge-sorted-array/#/description\" target=\"_blank\" rel=\"noopener\">88.Merge Sorted Array</a></h3><h4 id=\"方法一：模仿归并排序，从后往前比较\"><a href=\"#方法一：模仿归并排序，从后往前比较\" class=\"headerlink\" title=\"方法一：模仿归并排序，从后往前比较\"></a>方法一：模仿归并排序，从后往前比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; m</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>) nums1[m+n<span class=\"number\">-1</span>] = (m===<span class=\"number\">0</span>||nums2[n<span class=\"number\">-1</span>] &gt; nums1[m<span class=\"number\">-1</span>]) ? nums2[--n] : nums1[--m];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"203-Remove-Linked-List-Elements\"><a href=\"#203-Remove-Linked-List-Elements\" class=\"headerlink\" title=\"203-Remove Linked List Elements\"></a><a href=\"https://leetcode.com/problems/remove-linked-list-elements/#/solutions\" target=\"_blank\" rel=\"noopener\">203-Remove Linked List Elements</a></h3><h4 id=\"方法一：递归-4\"><a href=\"#方法一：递归-4\" class=\"headerlink\" title=\"方法一：递归\"></a>方法一：递归</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; head</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; val</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElements = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    head.next = removeElements(head.next, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.val == val ? head.next : head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"58-Length-of-Last-Word\"><a href=\"#58-Length-of-Last-Word\" class=\"headerlink\" title=\"58.Length of Last Word\"></a><a href=\"https://leetcode.com/problems/length-of-last-word/#/description\" target=\"_blank\" rel=\"noopener\">58.Length of Last Word</a></h3><h4 id=\"方法一：利用-split，需要提前去掉前后空格\"><a href=\"#方法一：利用-split，需要提前去掉前后空格\" class=\"headerlink\" title=\"方法一：利用 split，需要提前去掉前后空格\"></a>方法一：利用 split，需要提前去掉前后空格</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLastWord = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  s.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>).split(<span class=\"string\">' '</span>)[s.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>).split(<span class=\"string\">' '</span>).length - <span class=\"number\">1</span>].length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"507-Perfect-Number\"><a href=\"#507-Perfect-Number\" class=\"headerlink\" title=\"507-Perfect Number\"></a><a href=\"https://leetcode.com/problems/perfect-number/#/solutions\" target=\"_blank\" rel=\"noopener\">507-Perfect Number</a></h3><h4 id=\"方法一：先求根值，因为根值是遍历的界限\"><a href=\"#方法一：先求根值，因为根值是遍历的界限\" class=\"headerlink\" title=\"方法一：先求根值，因为根值是遍历的界限\"></a>方法一：先求根值，因为根值是遍历的界限</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; num</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkPerfectNumber = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sqrt = <span class=\"built_in\">Math</span>.sqrt(num),res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=sqrt;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res += i+ num/i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num&gt;<span class=\"number\">1</span> &amp;&amp; res==<span class=\"number\">2</span>*num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"67-Add-Binary\"><a href=\"#67-Add-Binary\" class=\"headerlink\" title=\"67-Add Binary\"></a><a href=\"https://leetcode.com/problems/add-binary/#/description\" target=\"_blank\" rel=\"noopener\">67-Add Binary</a></h3><h4 id=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"><a href=\"#方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\" class=\"headerlink\" title=\"方法一：对两个字符串循环遍历，同时用一个变量保存进位情况\"></a>方法一：对两个字符串循环遍历，同时用一个变量保存进位情况</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; a</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; b</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addBinary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">0</span>, i = a.length - <span class=\"number\">1</span>, j = b.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span> || c == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c += i &gt;= <span class=\"number\">0</span> ? a[i --] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        c += j &gt;= <span class=\"number\">0</span> ? b[j --] - <span class=\"string\">'0'</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        s = c % <span class=\"number\">2</span> + s;</span><br><span class=\"line\">        c = <span class=\"built_in\">Math</span>.floor(c / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-Longest-Common-Prefix\"><a href=\"#14-Longest-Common-Prefix\" class=\"headerlink\" title=\"14-Longest Common Prefix\"></a><a href=\"https://leetcode.com/problems/longest-common-prefix/#/description\" target=\"_blank\" rel=\"noopener\">14-Longest Common Prefix</a></h3><h4 id=\"方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\"><a href=\"#方法一：对数组进行遍历，用-indexOf-判断字符串的前缀\" class=\"headerlink\" title=\"方法一：对数组进行遍历，用 indexOf 判断字符串的前缀\"></a>方法一：对数组进行遍历，用 indexOf 判断字符串的前缀</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[]&#125; strs</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestCommonPrefix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strs === <span class=\"literal\">null</span> || strs.length === <span class=\"number\">0</span>)    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pre = strs[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; strs.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(strs[i].indexOf(pre) !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            pre = pre.substring(<span class=\"number\">0</span>,pre.length<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"160-Intersection-of-Two-Linked-Lists\"><a href=\"#160-Intersection-of-Two-Linked-Lists\" class=\"headerlink\" title=\"160-Intersection of Two Linked Lists\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/#/description\" target=\"_blank\" rel=\"noopener\">160-Intersection of Two Linked Lists</a></h3><h4 id=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"><a href=\"#方法一：用两个指针进行遍历，循环结束条件为指针相等\" class=\"headerlink\" title=\"方法一：用两个指针进行遍历，循环结束条件为指针相等\"></a>方法一：用两个指针进行遍历，循环结束条件为指针相等</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; headA</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; headB</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur1 = headA,cur2 = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur1 != cur2)&#123;</span><br><span class=\"line\">        cur1 = cur1?cur1.next:headB;</span><br><span class=\"line\">        cur2 = cur2?cur2.next:headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur1;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"400-Nth-Digit\"><a href=\"#400-Nth-Digit\" class=\"headerlink\" title=\"400-Nth Digit\"></a><a href=\"https://leetcode.com/problems/nth-digit/#/description\" target=\"_blank\" rel=\"noopener\">400-Nth Digit</a></h3><h4 id=\"方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\"><a href=\"#方法一：步骤为：确定数字是几位数-gt-确定具体数字-gt-返回这个数字的第几位数\" class=\"headerlink\" title=\"方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数\"></a>方法一：步骤为：确定数字是几位数-&gt;确定具体数字-&gt;返回这个数字的第几位数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findNthDigit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> digits = <span class=\"number\">1</span>, first = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">9</span> / first / digits) &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        n -= <span class=\"number\">9</span> * first * digits;</span><br><span class=\"line\">        digits++;</span><br><span class=\"line\">        first *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (first + <span class=\"built_in\">Math</span>.floor(n/digits) + <span class=\"string\">\"\"</span>).charAt(n%digits) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"475-Heaters\"><a href=\"#475-Heaters\" class=\"headerlink\" title=\"475. Heaters**\"></a><a href=\"https://leetcode.com/problems/heaters/#/description\" target=\"_blank\" rel=\"noopener\">475. Heaters</a>**</h3><h4 id=\"方法一：在对房子进行循环的过程中移动加热器的指针\"><a href=\"#方法一：在对房子进行循环的过程中移动加热器的指针\" class=\"headerlink\" title=\"方法一：在对房子进行循环的过程中移动加热器的指针\"></a>方法一：在对房子进行循环的过程中移动加热器的指针</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; houses</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; heaters</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRadius = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">houses, heaters</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> house = houses.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        heater= heaters.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;),</span><br><span class=\"line\">        i = <span class=\"number\">0</span>, </span><br><span class=\"line\">        res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>,n=house.length;j&lt;n;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; heater.length - <span class=\"number\">1</span> &amp;&amp; heater[i] + heater[i + <span class=\"number\">1</span>] &lt;= house[j] * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = <span class=\"built_in\">Math</span>.max(res, <span class=\"built_in\">Math</span>.abs(heater[i] - house[j]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"190-Reverse-Bits\"><a href=\"#190-Reverse-Bits\" class=\"headerlink\" title=\"190-Reverse Bits\"></a><a href=\"https://leetcode.com/problems/reverse-bits/#/description\" target=\"_blank\" rel=\"noopener\">190-Reverse Bits</a></h3><h4 id=\"方法一：利用数组的-reverse-进行反转\"><a href=\"#方法一：利用数组的-reverse-进行反转\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 进行反转\"></a>方法一：利用数组的 reverse() 进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125; - a positive integer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseBits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> zero = <span class=\"number\">32</span>- n.toString(<span class=\"number\">2</span>).length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bit = n.toString(<span class=\"number\">2</span>).split(<span class=\"string\">\"\"</span>).reverse().join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(zero&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        bit += <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        zero--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(bit,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"303-Range-Sum-Query-Immutable\"><a href=\"#303-Range-Sum-Query-Immutable\" class=\"headerlink\" title=\"303-Range Sum Query - Immutable\"></a><a href=\"https://leetcode.com/problems/range-sum-query-immutable/#/description\" target=\"_blank\" rel=\"noopener\">303-Range Sum Query - Immutable</a></h3><h4 id=\"方法一：用一个数组保存前面元素之和\"><a href=\"#方法一：用一个数组保存前面元素之和\" class=\"headerlink\" title=\"方法一：用一个数组保存前面元素之和\"></a>方法一：用一个数组保存前面元素之和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> NumArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">        nums[i] += nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.nums = nums;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; i </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; j</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">NumArray.prototype.sumRange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i === <span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nums[j];&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nums[j] - <span class=\"keyword\">this</span>.nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = Object.create(NumArray).createNew(nums)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.sumRange(i,j)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"28-Implement-strStr\"><a href=\"#28-Implement-strStr\" class=\"headerlink\" title=\"28-Implement strStr()\"></a><a href=\"https://leetcode.com/problems/implement-strstr/#/description\" target=\"_blank\" rel=\"noopener\">28-Implement strStr()</a></h3><h4 id=\"方法一：利用-JS-中的-indexOf\"><a href=\"#方法一：利用-JS-中的-indexOf\" class=\"headerlink\" title=\"方法一：利用 JS 中的 indexOf()\"></a>方法一：利用 JS 中的 indexOf()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; haystack</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; needle</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> haystack.indexOf(needle);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：老老实实遍历\"><a href=\"#方法二：老老实实遍历\" class=\"headerlink\" title=\"方法二：老老实实遍历\"></a>方法二：老老实实遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; haystack</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; needle</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; ; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j == needle.length) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i + j == haystack.length) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (needle.charAt(j) != haystack.charAt(i + j)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"69-Sqrt-x\"><a href=\"#69-Sqrt-x\" class=\"headerlink\" title=\"69-Sqrt(x)\"></a><a href=\"https://leetcode.com/problems/sqrtx/#/description\" target=\"_blank\" rel=\"noopener\">69-Sqrt(x)</a></h3><h4 id=\"方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"><a href=\"#方法一：从-x-2-开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\" class=\"headerlink\" title=\"方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）\"></a>方法一：从 x/2 开始遍历（复杂度高，而且有可能会超时，不建议这种方法）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Math</span>.floor(x/<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t*t&gt;x &amp;&amp; t&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        t--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x==<span class=\"number\">1</span> ? <span class=\"number\">1</span> : t;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：二分查找-1\"><a href=\"#方法二：二分查找-1\" class=\"headerlink\" title=\"方法二：二分查找\"></a>方法二：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> begin = <span class=\"number\">0</span>,end = x,result = <span class=\"number\">1</span>,mid = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">Math</span>.abs(result-x) &gt; <span class=\"number\">0.000001</span>)&#123;  </span><br><span class=\"line\">        mid = (begin+end)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">        result = mid*mid;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result &gt; x)   &#123;end = mid;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;begin = mid; &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(mid);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：牛顿迭代法\"><a href=\"#方法三：牛顿迭代法\" class=\"headerlink\" title=\"方法三：牛顿迭代法\"></a>方法三：<a href=\"https://www.zhihu.com/question/20690553\" target=\"_blank\" rel=\"noopener\">牛顿迭代法</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySqrt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    r = x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r*r &gt; x)</span><br><span class=\"line\">        r = ((r + x/r) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"155-Min-Stack\"><a href=\"#155-Min-Stack\" class=\"headerlink\" title=\"155-Min Stack\"></a><a href=\"https://leetcode.com/problems/min-stack/#/description\" target=\"_blank\" rel=\"noopener\">155-Min Stack</a></h3><p>参考我的另一篇文章<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS实现复杂数据结构</a></p>\n<h3 id=\"414-Third-Maximum-Number\"><a href=\"#414-Third-Maximum-Number\" class=\"headerlink\" title=\"414-Third Maximum Number\"></a><a href=\"https://leetcode.com/problems/third-maximum-number/#/description\" target=\"_blank\" rel=\"noopener\">414-Third Maximum Number</a></h3><h4 id=\"方法一：遍历比较\"><a href=\"#方法一：遍历比较\" class=\"headerlink\" title=\"方法一：遍历比较\"></a>方法一：遍历比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max1 = <span class=\"literal\">null</span>,max2 = <span class=\"literal\">null</span>,max3 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,len=nums.length;i&lt;len;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max1 || n == max2 || n == max3) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max1 === <span class=\"literal\">null</span> || n &gt; max1) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = max1;</span><br><span class=\"line\">            max1 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max2 === <span class=\"literal\">null</span> || n &gt; max2) &#123;</span><br><span class=\"line\">            max3 = max2;</span><br><span class=\"line\">            max2 = n;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (max3 === <span class=\"literal\">null</span> || n &gt; max3) &#123;</span><br><span class=\"line\">            max3 = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">null</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：先将数组排序再遍历\"><a href=\"#方法二：先将数组排序再遍历\" class=\"headerlink\" title=\"方法二：先将数组排序再遍历\"></a>方法二：先将数组排序再遍历</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thirdMax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b-a;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    max1 = nums[<span class=\"number\">0</span>],i = <span class=\"number\">1</span>,j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] == max1&amp;&amp;nums[i] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max2 = nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[j] == max2&amp;&amp;nums[j] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max3 = nums[j];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max3 === <span class=\"literal\">undefined</span> ? max1 : max3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"532-K-diff-Pairs-in-an-Array\"><a href=\"#532-K-diff-Pairs-in-an-Array\" class=\"headerlink\" title=\"532-K-diff Pairs in an Array\"></a><a href=\"https://leetcode.com/problems/k-diff-pairs-in-an-array/#/description\" target=\"_blank\" rel=\"noopener\">532-K-diff Pairs in an Array</a></h3><h4 id=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"><a href=\"#方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\" class=\"headerlink\" title=\"方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字\"></a>方法一：两个指针，一个指针用来遍历，另一个指针用来寻找对应数字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findPairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"built_in\">Math</span>.max(j, i + <span class=\"number\">1</span>); j &lt; nums.length &amp;&amp; nums[j] - nums[i] &lt; k; j++) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; nums.length &amp;&amp;  nums[j] - nums[i] == k) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i + <span class=\"number\">1</span> &lt; nums.length &amp;&amp; nums[i] == nums[i + <span class=\"number\">1</span>]) &#123;i++;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"204-Count-Primes\"><a href=\"#204-Count-Primes\" class=\"headerlink\" title=\"204-Count Primes\"></a><a href=\"https://leetcode.com/problems/count-primes/#/description\" target=\"_blank\" rel=\"noopener\">204-Count Primes</a></h3><h4 id=\"方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\"><a href=\"#方法一：质数（素数）判断思路-gt-对正整数-n，如果用-2-到根号-n-之间的所有整数去除，均无法整除，则-n-为质数\" class=\"headerlink\" title=\"方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数\"></a>方法一：质数（素数）判断思路-&gt;对正整数 n，如果用 2 到根号 n 之间的所有整数去除，均无法整除，则 n 为质数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countPrimes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = [],count = <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">3</span>; i * i &lt; n; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[i]) &#123;<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i * i; j &lt; n; j += <span class=\"number\">2</span> * i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!f[j]) &#123;</span><br><span class=\"line\">                --count;</span><br><span class=\"line\">                f[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"125-Valid-Palindrome\"><a href=\"#125-Valid-Palindrome\" class=\"headerlink\" title=\"125-Valid Palindrome\"></a><a href=\"https://leetcode.com/problems/valid-palindrome/#/description\" target=\"_blank\" rel=\"noopener\">125-Valid Palindrome</a></h3><h4 id=\"方法一：二分查找-1\"><a href=\"#方法一：二分查找-1\" class=\"headerlink\" title=\"方法一：二分查找\"></a>方法一：二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s === <span class=\"string\">''</span>)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = s.replace(<span class=\"regexp\">/\\W/g</span>,<span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(low);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=<span class=\"number\">0</span>,right=low.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(low[left] != low[right])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"168-Excel-Sheet-Column-Title\"><a href=\"#168-Excel-Sheet-Column-Title\" class=\"headerlink\" title=\"168-Excel Sheet Column Title\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-title/#/description\" target=\"_blank\" rel=\"noopener\">168-Excel Sheet Column Title</a></h3><h4 id=\"方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\"><a href=\"#方法一：利用-ASCII-码进行递归，为了让余数为-0-25，需要每次递归前将-n-减-1\" class=\"headerlink\" title=\"方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1\"></a>方法一：利用 ASCII 码进行递归，为了让余数为 0-25，需要每次递归前将 n 减 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertToTitle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        res =  <span class=\"built_in\">String</span>.fromCharCode(n % <span class=\"number\">26</span> + <span class=\"number\">65</span>)+res;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">26</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"278-First-Bad-Version\"><a href=\"#278-First-Bad-Version\" class=\"headerlink\" title=\"278-First Bad Version\"></a><a href=\"https://leetcode.com/problems/first-bad-version/#/description\" target=\"_blank\" rel=\"noopener\">278-First Bad Version</a></h3><h4 id=\"方法一：很常用的二分查找\"><a href=\"#方法一：很常用的二分查找\" class=\"headerlink\" title=\"方法一：很常用的二分查找\"></a>方法一：很常用的二分查找</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;integer&#125; version number</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;boolean&#125; whether the version is bad</span></span><br><span class=\"line\"><span class=\"comment\"> * isBadVersion = function(version) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ...</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;function&#125; isBadVersion()</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;function&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solution = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isBadVersion</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;integer&#125; n Total versions</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;integer&#125; The first bad version</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = <span class=\"number\">1</span>,right=n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;right)&#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.floor((left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isBadVersion(min))&#123;</span><br><span class=\"line\">                right = min;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left=min+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7-Reverse Integer\"></a><a href=\"https://leetcode.com/problems/reverse-integer/#/description\" target=\"_blank\" rel=\"noopener\">7-Reverse Integer</a></h3><h4 id=\"方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\"><a href=\"#方法一：利用数组的-reverse-方法，需要注意的是符号位和-int-型溢出的处理\" class=\"headerlink\" title=\"方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理\"></a>方法一：利用数组的 reverse() 方法，需要注意的是符号位和 int 型溢出的处理</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">Math</span>.floor((<span class=\"string\">''</span> + <span class=\"built_in\">Math</span>.abs(x)).split(<span class=\"string\">''</span>).reverse().join().replace(<span class=\"regexp\">/,/g</span>,<span class=\"string\">''</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res &gt; (<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>)<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? res : <span class=\"number\">0</span>- res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：利用数学计算进行反转\"><a href=\"#方法二：利用数学计算进行反转\" class=\"headerlink\" title=\"方法二：利用数学计算进行反转\"></a>方法二：利用数学计算进行反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rev= <span class=\"number\">0</span>,pos = <span class=\"built_in\">Math</span>.abs(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( pos !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        rev= rev*<span class=\"number\">10</span> + pos % <span class=\"number\">10</span>;</span><br><span class=\"line\">        pos= <span class=\"built_in\">Math</span>.floor(pos/<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(rev)&gt;<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>,<span class=\"number\">31</span>)<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.floor(rev) : <span class=\"number\">0</span>- <span class=\"built_in\">Math</span>.floor(rev);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"189-Rotate-Array\"><a href=\"#189-Rotate-Array\" class=\"headerlink\" title=\"189-Rotate Array\"></a><a href=\"https://leetcode.com/problems/rotate-array/#/description\" target=\"_blank\" rel=\"noopener\">189-Rotate Array</a></h3><p>方法一：利用数组的 pop() 和 unshift() 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        nums.unshift(nums.pop());</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：三次反转\"><a href=\"#方法二：三次反转\" class=\"headerlink\" title=\"方法二：三次反转\"></a>方法二：三次反转</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    k %= nums.length;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    reverse(nums, k, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums,start,end</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"><a href=\"#方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\" class=\"headerlink\" title=\"方法三：非常巧妙的一种方式，看不懂的可以点击这里看作者的解释\"></a>方法三：非常巧妙的一种方式，看不懂的可以<a href=\"https://discuss.leetcode.com/topic/11349/my-three-way-to-solve-this-problem-the-first-way-is-interesting-java\" target=\"_blank\" rel=\"noopener\">点击这里</a>看作者的解释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//step each time to move</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = k % nums.length;</span><br><span class=\"line\">    <span class=\"comment\">//find GCD between nums length and step</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gcd = findGcd(nums.length, step),position, count;</span><br><span class=\"line\">    <span class=\"comment\">//gcd path to finish movie</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; gcd; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//beginning position of each path</span></span><br><span class=\"line\">        position = i;</span><br><span class=\"line\">        <span class=\"comment\">//count is the number we need swap each path</span></span><br><span class=\"line\">        count = <span class=\"built_in\">Math</span>.floor(nums.length / gcd) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; count; j++)&#123;</span><br><span class=\"line\">            position = (position + step) % nums.length;</span><br><span class=\"line\">            <span class=\"comment\">//swap index value in index i and position</span></span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">            nums[position] ^= nums[i];</span><br><span class=\"line\">            nums[i] ^= nums[position];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> findGcd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a === <span class=\"number\">0</span> || b === <span class=\"number\">0</span>) ? a + b : findGcd(b, a % b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"algorithm","path":"api/categories/algorithm.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"leetcode","path":"api/tags/leetcode.json"}]},{"title":"罗马数字转换成整数（JS）","slug":"罗马数字转换成整数（JS）","date":"2017-03-24T14:40:12.000Z","updated":"2019-07-04T08:09:14.553Z","comments":true,"path":"api/articles/罗马数字转换成整数（JS）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>在刷 Leetcode 时碰到了一道题，题目的大致意图就是将罗马数字转换成整数，但是我竟然连罗马数字是什么都不知道，所以就打算写一篇关于这道题的文章</p>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>给定一个罗马数字 s，(I &lt;= s &lt;= MMMCMXCIX)（即1 到 3999），将罗马数字转换成整数。<br>输入：一个罗马数字<br>输出：对应的整数</p>\n<h2 id=\"知识储备\"><a href=\"#知识储备\" class=\"headerlink\" title=\"知识储备\"></a>知识储备</h2><p>首先要来了解一下罗马数字表示法，基本字符有 7 个：I，V，X，L，C，D，M，分别表示 1，5，10，50，100，500，1000。并且在构成数字的时候，有下列规则：</p>\n<ul>\n<li>相同的数字连写，所表示的数等于这些数字相加得到的数，如：Ⅲ= 3；</li>\n<li>小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数， 如：Ⅷ= 8；Ⅻ= 12；</li>\n<li>小的数字，（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数，如：Ⅳ=4；Ⅸ=9；</li>\n<li>正常使用时，连写的数字重复不得超过三次。</li>\n</ul>\n<p>所以，根据以上规则，可以发现其中的规律，就是只需要比较前后元素的大小，如果前面比后面大，这两个罗马字母代表的数字就相加；如果前面比后面小，就后面的减去前面的；如果相等也相加。再把每一对都相加，最后结果就是转换后的整数了（需要注意的是，最后一个字母是肯定要相加的）</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opt = &#123;<span class=\"string\">'M'</span>: <span class=\"number\">1000</span>,<span class=\"string\">'D'</span>: <span class=\"number\">500</span> ,<span class=\"string\">'C'</span>: <span class=\"number\">100</span>,<span class=\"string\">'L'</span>: <span class=\"number\">50</span>,<span class=\"string\">'X'</span>: <span class=\"number\">10</span>,<span class=\"string\">'V'</span>: <span class=\"number\">5</span>,<span class=\"string\">'I'</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        z = <span class=\"number\">0</span>,</span><br><span class=\"line\">        n = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt[s[i]] &lt; opt[s[i+<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\">            z -= opt[s[i]];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            z += opt[s[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> z + opt[s[n<span class=\"number\">-1</span>]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目来源\"><a href=\"#题目来源\" class=\"headerlink\" title=\"题目来源\"></a>题目来源</h2><p>Leetcode第 13 题：<a href=\"https://leetcode.com/problems/roman-to-integer/#/description\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/roman-to-integer/#/description</a></p>\n","raw":null,"categories":[{"name":"computer-base","path":"api/categories/computer-base.json"}],"tags":[{"name":"罗马数字","path":"api/tags/罗马数字.json"}]},{"title":"JS中数组方法总结","slug":"JS中数组方法总结","date":"2017-03-22T14:12:57.000Z","updated":"2019-07-04T08:09:14.545Z","comments":true,"path":"api/articles/JS中数组方法总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>因为刷 leetcode 的时候，发现会经常用到数组，因为 JS 中没有明确的栈和队列，所以需要用数组进行模拟，在刷算法题的过程中碰到了好多关于数组的计算方法，所以就打算对算法中经常用的数组方法进行总结，可能会对刚开始用 JS 刷 Leetcode 的码农有好处，如果你有任何补充，请留言评论或直接给我发邮件。</p>\n<h2 id=\"JS-自带数组方法\"><a href=\"#JS-自带数组方法\" class=\"headerlink\" title=\"JS 自带数组方法\"></a>JS 自带数组方法</h2><ul>\n<li>concat() =&gt; 连接两个或更多的数组，并返回结果。</li>\n<li>join() =&gt; 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</li>\n<li>pop() =&gt; 删除并返回数组的最后一个元素</li>\n<li>push() =&gt; 向数组的末尾添加一个或更多元素，并返回新的长度。</li>\n<li>reverse() =&gt; 颠倒数组中元素的顺序。</li>\n<li>shift() =&gt; 删除并返回数组的第一个元素</li>\n<li>slice() =&gt; 从某个已有的数组返回选定的元素</li>\n<li>sort() =&gt; 对数组的元素进行排序</li>\n<li>splice() =&gt; 删除元素，并向数组添加新元素。</li>\n<li>toSource() =&gt; 返回该对象的源代码。</li>\n<li>toString() =&gt; 把数组转换为字符串，并返回结果。</li>\n<li>toLocaleString() =&gt; 把数组转换为本地数组，并返回结果。</li>\n<li>unshift() =&gt; 向数组的开头添加一个或更多元素，并返回新的长度。</li>\n<li>valueOf() =&gt; 返回数组对象的原始值</li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>JS 数组对象排序有内置方法 sort()，但是默认以字符串方式排序:</p>\n<h3 id=\"简单数组简单排序\"><a href=\"#简单数组简单排序\" class=\"headerlink\" title=\"简单数组简单排序\"></a>简单数组简单排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrSimple = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">arrSimple.sort();  <span class=\"comment\">// [1,6,7,8]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"简单数组自定义排序\"><a href=\"#简单数组自定义排序\" class=\"headerlink\" title=\"简单数组自定义排序\"></a>简单数组自定义排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrSimple2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">arrSimple2.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123; <span class=\"keyword\">return</span> b - a &#125;);  <span class=\"comment\">// [8,7,6,1]</span></span><br><span class=\"line\"><span class=\"comment\">// 解释：a, b表示数组中的任意两个元素，若return &gt; 0 b 前 a 后；reutrn &lt; 0 a 前 b 后；a = b 时存在浏览器兼容</span></span><br><span class=\"line\"><span class=\"comment\">// 简化一下：a-b 输出从小到大排序，b-a 输出从大到小排序。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除重复的元素只保留一个（两种实现思路）\"><a href=\"#删除重复的元素只保留一个（两种实现思路）\" class=\"headerlink\" title=\"删除重复的元素只保留一个（两种实现思路）\"></a>删除重复的元素只保留一个（两种实现思路）</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：遍历要删除的数组arr, 把元素分别放入另一个数组tmp中，在判断该元素在arr中不存在才允许放入tmp中用到两个函数：for ...in 和 indexOf()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"a\"</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique1</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历arr，把元素分别放入tmp数组(不存在才放)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 该元素在tmp内部不存在才允许追加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp.indexOf(arr[i])==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            tmp.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique1(test);  <span class=\"comment\">// [2,4,5,\"a\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二：把目标数组arr的元素值和键的位置调换 自动就把重复的元素给删除掉了，调换后的样子：array('qiang'=&gt;1,'ming'=&gt;1,'tao'=&gt;1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique2</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">        tmp[arr[m]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 再把键和值的位置再次调换</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmparr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> tmp)&#123;</span><br><span class=\"line\">        tmparr.push(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmparr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique2(test);  <span class=\"comment\">//[2,4,5,\"a\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法三：返回新数组，保证类型不变</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique3</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hash=[],arr=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">        hash[a[i]]!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!hash[a[i]])&#123;</span><br><span class=\"line\">            arr.push(a[i]);</span><br><span class=\"line\">            hash[a[i]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unique3(test);<span class=\"comment\">// [2, 4, 5, \"a\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取数组中的最大值和最小值\"><a href=\"#获取数组中的最大值和最小值\" class=\"headerlink\" title=\"获取数组中的最大值和最小值\"></a>获取数组中的最大值和最小值</h3><p>可以用传统的遍历，也可以用math</p>\n<p>首先定义一个数组：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">54</span>,<span class=\"number\">65</span>,<span class=\"number\">43</span>,<span class=\"number\">21</span>,<span class=\"number\">12</span>,<span class=\"number\">34</span>,<span class=\"number\">45</span>,<span class=\"number\">58</span>,<span class=\"number\">97</span>,<span class=\"number\">24</span>];</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一、字符串拼接法</span></span><br><span class=\"line\"><span class=\"comment\">// 利用toString和join把数组转换为字符串，再和Math的max和min方法分别进行拼接，最后执行eval方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.max(\"</span> + arr.toString() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.min(\"</span> + arr.toString() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.max(\"</span> + arr.join() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">eval</span>(<span class=\"string\">\"Math.min(\"</span> + arr.join() + <span class=\"string\">\")\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二、排序法</span></span><br><span class=\"line\"><span class=\"comment\">// 先把数组从小到大排序，数组第一个即为最小值，最后一个即为最大值</span></span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> a-b;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = arr[arr.length<span class=\"number\">-1</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三-1\"><a href=\"#方法三-1\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法三、假设法</span></span><br><span class=\"line\"><span class=\"comment\">// 假设数组第一个为最大（或最小值），和后边进行比较，若后边的值比最大值大（或比最小值小），则替换最大值（或最小值）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = arr[i];</span><br><span class=\"line\">    cur&gt;maxN ? maxN=cur : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    cur&lt;minN ? minN=cur : <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四\"></a>方法四</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法四、Math的max和min方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用apply方法使数组可以作为传递的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,arr);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr);</span><br><span class=\"line\"><span class=\"comment\">// 多维数组可以这样做：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ta=a.join(<span class=\"string\">\",\"</span>).split(<span class=\"string\">\",\"</span>);<span class=\"comment\">// 转化为一维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxN = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,ta);<span class=\"comment\">// 最大值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minN = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,ta);<span class=\"comment\">// 最小值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展：增加原型方法，同时为了避免其他库也实现了同名的原型方法，可以在生成函数之前进行重名判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype[<span class=\"string\">'max'</span>] == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max.apply(&#123;&#125;,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype[<span class=\"string\">'min'</span>] == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min.apply(&#123;&#125;,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化二维数组\"><a href=\"#初始化二维数组\" class=\"headerlink\" title=\"初始化二维数组\"></a>初始化二维数组</h3><h4 id=\"方法一-2\"><a href=\"#方法一-2\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：直接定义并且初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _TheArray = [[<span class=\"string\">\"0-1\"</span>,<span class=\"string\">\"0-2\"</span>],[<span class=\"string\">\"1-1\"</span>,<span class=\"string\">\"1-2\"</span>],[<span class=\"string\">\"2-1\"</span>,<span class=\"string\">\"2-2\"</span>]]</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-2\"><a href=\"#方法二-2\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法二：未知长度的二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();  <span class=\"comment\">// 先声明一维</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;i;k++)&#123;    <span class=\"comment\">// 一维长度为i,i为变量，可以根据实际情况改变</span></span><br><span class=\"line\">    tArray[k]=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();  <span class=\"comment\">// 声明二维，每一个一维数组里面的一个元素都是一个数组；</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;p;j++)&#123;   <span class=\"comment\">// 一维数组里面每个元素数组可以包含的数量p，p也是一个变量；</span></span><br><span class=\"line\">        tArray[k][j]=<span class=\"string\">\"\"</span>;    <span class=\"comment\">// 这里将变量初始化，我这边统一初始化为空，后面在用所需的值覆盖里面的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法三-2\"><a href=\"#方法三-2\" class=\"headerlink\" title=\"方法三\"></a>方法三</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以上方法都有问题，推荐方法三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k=<span class=\"number\">0</span>;k&lt;length;k++)&#123;    </span><br><span class=\"line\">   r[k]= [];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组随机排序\"><a href=\"#数组随机排序\" class=\"headerlink\" title=\"数组随机排序\"></a>数组随机排序</h3><h4 id=\"Fisher–Yates-shuffle-算法\"><a href=\"#Fisher–Yates-shuffle-算法\" class=\"headerlink\" title=\"Fisher–Yates shuffle 算法\"></a>Fisher–Yates shuffle 算法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = arr.length, t, j;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i) &#123;</span><br><span class=\"line\">    j = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * i--);</span><br><span class=\"line\">    t = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来自——<a href=\"https://blog.oldj.net/2017/01/23/shuffle-an-array-in-javascript/\" target=\"_blank\" rel=\"noopener\">关于JavaScript的数组随机排序</a></p>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"数组","path":"api/tags/数组.json"}]},{"title":"一些位操作的技巧","slug":"一些位操作的技巧","date":"2017-03-21T14:11:27.000Z","updated":"2019-07-04T08:09:14.549Z","comments":true,"path":"api/articles/一些位操作的技巧.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这篇文章大部分是从英文翻译过来的，是在刷 leetcode 的时候看到的一个 solution，感觉作者讲的很好，只不过英文的读起来有点费劲，在网上搜了一下，发现也没有翻译的版本，于是就想做第一个吃螃蟹的人，然后再加一些其他文章中的位操作技巧进行总结，最终形成了这个版本（文末有原文链接，英文好的可以去看一下，毕竟看原文才不会被误导）</p>\n<h2 id=\"位操作介绍\"><a href=\"#位操作介绍\" class=\"headerlink\" title=\"位操作介绍\"></a>位操作介绍</h2><p>位操作是对少于一个字母的数据段或位数进行算法层面的计算。在计算机工程领域，用到位操作任务有低等级设备控制、误差检测和校正算法，数据压缩、加密算法和优化算法。对于大多数任务而言，现在编程语言允许程序员直接用高级语言而不是位操作。位操作的源码使用位运算：<strong>AND、OR、XOR、NOT 和移位</strong> 由于位操作是可以并行处理的，所以在某些情况下可以减少甚至避免对于某数据结构的循环操作，从而在速度上会有较大提升，但是代码将变得很难书写和理解。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>位操作的核心是位运算符 &amp;（和）、|（或）、~（不）、^（异或）以及移位运算符 a &lt;&lt; b 和 a &gt;&gt; b（异或通常缩写为 XOR）。</p>\n<ul>\n<li>取并集：A | B</li>\n<li>取交集：A &amp; B</li>\n<li>取补集：A &amp; ~B</li>\n<li>所有位数取反：^A 或者~A</li>\n<li>设置某位：A | = 1 &lt;&lt; bit</li>\n<li>清除某位：A &amp; = ~（1 &lt;&lt; bit）</li>\n<li>检验某位：(A &amp; 1 &lt;&lt; bit) != 0</li>\n<li>提取最后一位：A &amp; -A 或者 A &amp; ~ (A-1) 或者x ^ (x &amp; (x-1))</li>\n<li>移除最后一位：A &amp; (A-1)</li>\n<li>所有位数为1：~0</li>\n</ul>\n<h2 id=\"位操作的基本技巧\"><a href=\"#位操作的基本技巧\" class=\"headerlink\" title=\"位操作的基本技巧\"></a>位操作的基本技巧</h2><ul>\n<li>用异或操作符 ^ 可以删除完全相同的数字然后保存剩余的，或者保存不同位然后移除相同位</li>\n<li>用 | 操作符可以留存尽可能多的 1</li>\n<li>用 &amp; 可以筛选出指定位</li>\n</ul>\n<h3 id=\"1-检查整数是奇数还是偶数\"><a href=\"#1-检查整数是奇数还是偶数\" class=\"headerlink\" title=\"1. 检查整数是奇数还是偶数\"></a>1. 检查整数是奇数还是偶数</h3><p>只要整数的最后一位比特是 1，那它就是奇数，反之就是偶数。即最低位要么是 1 要么是 0，x 和 1 与（&amp;）运算，保留最低位，如果最低位是 1，x 是奇数，如果最低位是 0 ，x 是偶数。<br>例如 43，二进制表示为 00101011，注意\b它的最低位为 1，我们将 43 与 1 做 &amp; 运算：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    00101011</span><br><span class=\"line\">&amp;   00000001   (note: 1 is the same as 00000001)</span><br><span class=\"line\">    --------</span><br><span class=\"line\">    00000001</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-测试第-n-位比特\"><a href=\"#2-测试第-n-位比特\" class=\"headerlink\" title=\"2. 测试第 n 位比特\"></a>2. 测试第 n 位比特</h3><p>只要将与运算的 1 向左平移相应的位数即可。假设向左平移 n 位，接下来的与运算就是只保留第 n 位，其它位都清零了。<br>比如：122 的第三位比特是 1 吗？（从 0 开始数）可以这样做：122 &amp; (1 &lt;&lt; 3)，122 的二进制表示是 01111010，(1 &lt;&lt; 3)即 1 向左平移 3 比特 00001000。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    01111010</span><br><span class=\"line\">&amp;   00001000</span><br><span class=\"line\">    --------</span><br><span class=\"line\">    00001000</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-将第-n-位设为-1-或不变\"><a href=\"#3-将第-n-位设为-1-或不变\" class=\"headerlink\" title=\"3. 将第 n 位设为 1 或不变\"></a>3. 将第 n 位设为 1 或不变</h3><p>和前面的技巧一样，只是把与运算（&amp;）换成了或运算（|）。与 1 进行或运算将参与运算的位置设为 1，与 0 进行或运算参与预算的位不变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = x | (1 &lt;&lt; n)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-将第-n-位设为-0\"><a href=\"#4-将第-n-位设为-0\" class=\"headerlink\" title=\"4. 将第 n 位设为 0\"></a>4. 将第 n 位设为 0</h3><p>这个方法的关键就是 ~(1 &lt;&lt; n)，它将第 n 位设为 0，其它位全部为 1。看下面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = x &amp; ~(1 &lt;&lt; n)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-将第-n-位取反\"><a href=\"#5-将第-n-位取反\" class=\"headerlink\" title=\"5. 将第 n 位取反\"></a>5. 将第 n 位取反</h3><p>这次使用的是异或运算，如果异或运算的两个操作数相同，运算结果是 0，两个操作数不同，结果是 1。怎样将第 n 位取反呢？如果第 n 位比特为 1，将它与 1 进行异或运算结果就是 0，如果它是 0，那么它与 1 异或运算的结果就是 1。于是这一位就取反了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = x ^ (1 &lt;&lt; n)</span><br></pre></td></tr></table></figure>\n<h2 id=\"位操作在数字运算中的应用\"><a href=\"#位操作在数字运算中的应用\" class=\"headerlink\" title=\"位操作在数字运算中的应用\"></a>位操作在数字运算中的应用</h2><h3 id=\"1-计算某二进制数中的-1-的数量\"><a href=\"#1-计算某二进制数中的-1-的数量\" class=\"headerlink\" title=\"1. 计算某二进制数中的 1 的数量\"></a>1. 计算某二进制数中的 1 的数量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count_one</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">        n = n&amp;(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-判断某数字是否为-4-的-n-次方-n-≥-0-，是就返回该数，不是就返回-0-或-false\"><a href=\"#2-判断某数字是否为-4-的-n-次方-n-≥-0-，是就返回该数，不是就返回-0-或-false\" class=\"headerlink\" title=\"2. 判断某数字是否为 4 的 n 次方(n ≥ 0)，是就返回该数，不是就返回 0 或 false\"></a>2. 判断某数字是否为 4 的 n 次方(n ≥ 0)，是就返回该数，不是就返回 0 或 false</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">bool <span class=\"title\">isPowerOfFour</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(n&amp;(n-<span class=\"number\">1</span>)) &amp;&amp; (n&amp;<span class=\"number\">0x55555555</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用-和-amp-来求两个数字的和\"><a href=\"#3-使用-和-amp-来求两个数字的和\" class=\"headerlink\" title=\"3. 使用 ^ 和 &amp; 来求两个数字的和\"></a>3. 使用 ^ 和 &amp; 来求两个数字的和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b==<span class=\"number\">0</span>? a:getSum(a^b, (a&amp;b)&lt;&lt;<span class=\"number\">1</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-寻找丢失数字：给你一个包括从-0-到-n-的各不相同的-n-元数组，从中找出丢失的那个数字，比如给你的数组为-0-1-3-，那么应该返回-2（当然，你也可以用数学方法解决）\"><a href=\"#4-寻找丢失数字：给你一个包括从-0-到-n-的各不相同的-n-元数组，从中找出丢失的那个数字，比如给你的数组为-0-1-3-，那么应该返回-2（当然，你也可以用数学方法解决）\" class=\"headerlink\" title=\"4. 寻找丢失数字：给你一个包括从 0 到 n 的各不相同的 n 元数组，从中找出丢失的那个数字，比如给你的数组为 [0, 1, 3]，那么应该返回 2（当然，你也可以用数学方法解决）\"></a>4. 寻找丢失数字：给你一个包括从 0 到 n 的各不相同的 n 元数组，从中找出丢失的那个数字，比如给你的数组为 [0, 1, 3]，那么应该返回 2（当然，你也可以用数学方法解决）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(vector&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class=\"line\">        ret ^= i;</span><br><span class=\"line\">        ret ^= nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret^=nums.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-给定一个自然数-N，找到小于等于-N-的-2-的最大倍数\"><a href=\"#5-给定一个自然数-N，找到小于等于-N-的-2-的最大倍数\" class=\"headerlink\" title=\"5. 给定一个自然数 N，找到小于等于 N 的 2 的最大倍数\"></a>5. 给定一个自然数 N，找到小于等于 N 的 2 的最大倍数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">largest_power</span><span class=\"params\">(<span class=\"keyword\">long</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将所有右侧位变为1.</span></span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">2</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">4</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">8</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (N+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-将一个-32-位的无符号数进行反转\"><a href=\"#6-将一个-32-位的无符号数进行反转\" class=\"headerlink\" title=\"6. 将一个 32 位的无符号数进行反转\"></a>6. 将一个 32 位的无符号数进行反转</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">uint32_t <span class=\"title\">reverseBits</span><span class=\"params\">(uint32_t n)</span> </span>&#123;</span><br><span class=\"line\">    unsigned <span class=\"keyword\">int</span> mask = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res |= mask;</span><br><span class=\"line\">        mask &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">uint32_t <span class=\"title\">reverseBits</span><span class=\"params\">(uint32_t n)</span> </span>&#123;</span><br><span class=\"line\">\tuint32_t mask = <span class=\"number\">1</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i)&#123;</span><br><span class=\"line\">\t\tret &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mask &amp; n) ret |= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tmask &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-给定一个范围-m-n-，其中-0-lt-m-lt-n-lt-2147483647，返回在这个范围内的所有数的按位进行-AND-操作之后的数字，比如范围为-5-7-，那返回的应该是按位进行计算的-5-6-7，结果是-4（100）\"><a href=\"#7-给定一个范围-m-n-，其中-0-lt-m-lt-n-lt-2147483647，返回在这个范围内的所有数的按位进行-AND-操作之后的数字，比如范围为-5-7-，那返回的应该是按位进行计算的-5-6-7，结果是-4（100）\" class=\"headerlink\" title=\"7. 给定一个范围[m, n]，其中 0&lt;=m&lt;=n&lt;=2147483647，返回在这个范围内的所有数的按位进行 AND 操作之后的数字，比如范围为 [5, 7]，那返回的应该是按位进行计算的 5+6+7，结果是 4（100）\"></a>7. 给定一个范围[m, n]，其中 0&lt;=m&lt;=n&lt;=2147483647，返回在这个范围内的所有数的按位进行 AND 操作之后的数字，比如范围为 [5, 7]，那返回的应该是按位进行计算的 5+6+7，结果是 4（100）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rangeBitwiseAnd</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m != n) &#123;</span><br><span class=\"line\">        m &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        a++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m&lt;&lt;a; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-求一个无符号数的汉明距离（即二进制表示中的-1-的个数）\"><a href=\"#8-求一个无符号数的汉明距离（即二进制表示中的-1-的个数）\" class=\"headerlink\" title=\"8. 求一个无符号数的汉明距离（即二进制表示中的 1 的个数）\"></a>8. 求一个无符号数的汉明距离（即二进制表示中的 1 的个数）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(uint32_t n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\tn = n&amp;(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(uint32_t n)</span> </span>&#123;</span><br><span class=\"line\">    ulong mask = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mask &amp; n) count++;</span><br><span class=\"line\">        mask &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-用位操作交换变量\"><a href=\"#9-用位操作交换变量\" class=\"headerlink\" title=\"9. 用位操作交换变量\"></a>9. 用位操作交换变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a ^ b; </span><br><span class=\"line\">b = a ^ b;  <span class=\"comment\">// 实际上是(a^b)^b 也就是a异或了b两次，等号右边是a的值</span></span><br><span class=\"line\">a = a ^ b;  <span class=\"comment\">// 此时b里面已经是“果汁”，实际上是(a^b)^a，也就是b异或了a两次，是b</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"位操作更复杂的应用\"><a href=\"#位操作更复杂的应用\" class=\"headerlink\" title=\"位操作\b更复杂的应用\"></a>位操作\b更复杂的应用</h2><h3 id=\"1-查找-DNA-重复序列\"><a href=\"#1-查找-DNA-重复序列\" class=\"headerlink\" title=\"1. 查找 DNA 重复序列\"></a>1. 查找 DNA 重复序列</h3><p>所有的 DNA 是由一系列简写为 A、C、G 和 T 核苷酸组成的，比如 “ACGAATTCCG”，当我们研究 DNA 时，有时候识别 DNA 中的重复序列是有用的，设计一个方法可以找出所有在 DNA 分子中出现不止一次的 10 字母长的序列（或子序列）</p>\n<p>举个例子：<br>Given s = “AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT” Return: [“AAAAACCCCC”, “CCCCCAAAAA”]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">findRepeatedDnaSequences</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sLen = s.length();</span><br><span class=\"line\">        vector&lt;string&gt; v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sLen &lt; <span class=\"number\">11</span>) <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> keyMap[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">21</span>]&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hashKey = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i) hashKey = (hashKey&lt;&lt;<span class=\"number\">2</span>) | (s[i]-<span class=\"string\">'A'</span>+<span class=\"number\">1</span>)%<span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">9</span>; i &lt; sLen; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(keyMap[hashKey = ((hashKey&lt;&lt;<span class=\"number\">2</span>)|(s[i]-<span class=\"string\">'A'</span>+<span class=\"number\">1</span>)%<span class=\"number\">5</span>)&amp;<span class=\"number\">0xfffff</span>]++ == <span class=\"number\">1</span>)</span><br><span class=\"line\">                v.push_back(s.substr(i-<span class=\"number\">9</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-多数单元\"><a href=\"#2-多数单元\" class=\"headerlink\" title=\"2. 多数单元\"></a>2. 多数单元</h3><p>给定一个 n 元数组，多数单元式在该数组中出现次数多于 ⌊n/2⌋ 次的数（一般采用位运算，但是在这里我们也可以采用分组和穆尔投票算法）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(vector&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = sizeof(<span class=\"keyword\">int</span>)*<span class=\"number\">8</span>, size = nums.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>, mask = <span class=\"number\">1</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; size; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mask &amp; nums[j]) count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; size/<span class=\"number\">2</span>) ret |= mask;</span><br><span class=\"line\">        mask &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-找数字\"><a href=\"#3-找数字\" class=\"headerlink\" title=\"3. 找数字\"></a>3. 找数字</h3><p>给定整数数组，每个元素都出现了三次，除了一个元素，找到这个元素（这种问题通过位运算可以迎刃而解）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inspired by logical circuit design and boolean algebra;</span></span><br><span class=\"line\"><span class=\"comment\">// counter - unit of 3;</span></span><br><span class=\"line\"><span class=\"comment\">// current   incoming  next</span></span><br><span class=\"line\"><span class=\"comment\">// a b            c    a b</span></span><br><span class=\"line\"><span class=\"comment\">// 0 0            0    0 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0 1            0    0 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1 0            0    1 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0 0            1    0 1</span></span><br><span class=\"line\"><span class=\"comment\">// 0 1            1    1 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1 0            1    0 0</span></span><br><span class=\"line\"><span class=\"comment\">// a = a&amp;~b&amp;~c + ~a&amp;b&amp;c;</span></span><br><span class=\"line\"><span class=\"comment\">// b = ~a&amp;b&amp;~c + ~a&amp;~b&amp;c;</span></span><br><span class=\"line\"><span class=\"comment\">// return a|b since the single number can appear once or twice;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(vector&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>, a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class=\"line\">        t = (a&amp;~b&amp;~nums[i]) | (~a&amp;b&amp;nums[i]);</span><br><span class=\"line\">        b = (~a&amp;b&amp;~nums[i]) | (~a&amp;~b&amp;nums[i]);</span><br><span class=\"line\">        a = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a | b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-字符长度的最大积\"><a href=\"#4-字符长度的最大积\" class=\"headerlink\" title=\"4. 字符长度的最大积\"></a>4. 字符长度的最大积</h3><p>给定一个包含几个字符串的数组，找到 length(word[i])*length(word[j]) 的最大值，其中这两个字符串没有共同的字符。假定每个字符串的字符均为小写，如果没有这样的两个字符，返回 0</p>\n<h4 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><ol>\n<li>Example 1: Given [“abcw”, “baz”, “foo”, “bar”, “xtfn”, “abcdef”] Return 16 The two words can be “abcw”, “xtfn”. </li>\n<li>Example 2: Given [“a”, “ab”, “abc”, “d”, “cd”, “bcd”, “abcd”] Return 4 The two words can be “ab”, “cd”.</li>\n<li>Example 3: Given [“a”, “aa”, “aaa”, “aaaa”] Return 0 No such pair of words.</li>\n</ol>\n<h4 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h4><p>因为我们要非常频繁的用到字符串的长度，并且我们要比较两个字符串中的字符来检测他们是否有相同的字符，所以：</p>\n<ul>\n<li>使用一个 int 型数组来保存每个字符串的长度</li>\n<li>因为 int 型数字有 4 比特，可以有 32 位，而字母只有 26 中，所以我们仅仅使用一位就可以代表字母在字符串中的存在与否</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">mask</span><span class=\"params\">(words.size()</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">lens</span><span class=\"params\">(words.size()</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.size(); ++i) lens[i] = words[i].length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;words.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : words[i])</span><br><span class=\"line\">            mask[i] |= <span class=\"number\">1</span> &lt;&lt; (c - <span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;i; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(mask[i] &amp; mask[j]))</span><br><span class=\"line\">                result = max(result, lens[i]*lens[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制在趣味数学中的应用\"><a href=\"#二进制在趣味数学中的应用\" class=\"headerlink\" title=\"二进制在趣味数学中的应用\"></a>二进制在趣味数学中的应用</h2><h3 id=\"1-一工人工作-7-天，老板有一段黄金，每天要给工人-1-7-的黄金作为工资，老板只能切这段黄金-2-刀，请问怎样切才能每天都给工人-1-7-的黄金？\"><a href=\"#1-一工人工作-7-天，老板有一段黄金，每天要给工人-1-7-的黄金作为工资，老板只能切这段黄金-2-刀，请问怎样切才能每天都给工人-1-7-的黄金？\" class=\"headerlink\" title=\"1. 一工人工作 7 天，老板有一段黄金，每天要给工人 1/7 的黄金作为工资，老板只能切这段黄金 2 刀，请问怎样切才能每天都给工人 1/7 的黄金？\"></a>1. 一工人工作 7 天，老板有一段黄金，每天要给工人 1/7 的黄金作为工资，老板只能切这段黄金 2 刀，请问怎样切才能每天都给工人 1/7 的黄金？</h3><p>因为 7 &lt; 2^3 = 8，所以只要使用 2^0，2^1，2^2 三个数，就可以表示 1 到 7 之间的所有数。那么我们只要把金条分成三份，比例为 1:2:4，也就是第一刀切下金条的七分之一（设为黄金 A），第二刀切下金条的七分之二（设为黄金 B），剩下的部分刚好为金条的七分之四（设为黄金 C）。我们只要按照如下的方法发放工资，就解决问题了：</p>\n<ol>\n<li>第一天：给长工黄金 A；（1 = 2^0）</li>\n<li>第二天：给长工黄金 B，并把黄金 A 拿回来；（2 = 2^1）</li>\n<li>第三天：给长工黄金 A；（3 = 2^0 + 2^1）</li>\n<li>第四天：给长工黄金 C，并把黄金 A 和黄金 B 拿回来；（4 = 2^2）</li>\n<li>第五天：给长工黄金 A；（5 = 2^0 + 2^2）</li>\n<li>第六天：给长工黄金 B，并把黄金 A 拿回来；（6 = 2^1 + 2^2）</li>\n<li>第七天：给长工黄金 A。（5 = 2^0 + 2^1 + 2^2）</li>\n</ol>\n<h3 id=\"2-用天平称-1-63-克整数克重的物品，至少要配备几只多重的砝码（砝码只能放在天平的一端）？\"><a href=\"#2-用天平称-1-63-克整数克重的物品，至少要配备几只多重的砝码（砝码只能放在天平的一端）？\" class=\"headerlink\" title=\"2. 用天平称 1~63 克整数克重的物品，至少要配备几只多重的砝码（砝码只能放在天平的一端）？\"></a>2. 用天平称 1~63 克整数克重的物品，至少要配备几只多重的砝码（砝码只能放在天平的一端）？</h3><p>没有学过二进制的人是很难想到答案的，可是如果你知道二进制数，那就不难了。我们知道二进制中只有 0 和 1 两个数字，它的各位数字的权值从小到大依次为 2^0，2^1，2^2，2^3。。。。我们用一个数的每位数字乘以其权值所得到的乘积之和来表示这个数。对于一个具有 8 位的二进制数来说，它可以表示的数据范围是 0~2^8。63 = 2^6 – 1 = 2^0 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 所以，我们只需配备 2^0 =1，2^1 = 2，2^2 = 4，2^3 = 8，2^4 = 16，2^5 = 32 五种不同克数的砝码各一个。</p>\n<h3 id=\"3-药瓶问题\"><a href=\"#3-药瓶问题\" class=\"headerlink\" title=\"3. 药瓶问题\"></a>3. 药瓶问题</h3><p>一家药店收到运来的某种药品十瓶。每瓶装药丸 1000 粒。药剂师怀特先生刚把药瓶送上架子，一封电报接踵而来。怀特先生把电报念给药店经理布莱克小姐听。怀特先生：“特急！所有药瓶须检查后方能出售。由于失误，其中有一瓶药丸每粒超重 10 毫克。请即退回分量有误的那瓶药。怀特先生很气恼。怀特先生：“倒霉极了，我只好从每瓶中取出一粒来称一下。真是胡闹。怀特先生刚要动手，布莱克小姐拦住了他。布莱克小姐：“等一下，没必要称十次，只需称一次就够了。”这怎么可能呢？<br>布莱克小姐的妙主意是从第一瓶中取出1粒，从第二瓶中取出 2 粒，第三瓶中取出 3 粒，以此类推，直至从第十瓶中取出 10 粒。把这 55 粒药丸放在秤上，记下总重量。如果重 5510 毫克，也就是超过规格 10 毫克，她当即明白其中只有一粒是超重的，并且是从第一瓶中取出的。如果总重量超过规格 20 毫克，则其中有 2 粒超重，并且是从第二瓶中取出的，以此类推进行判断。所以布莱克小姐只要称一次，不是吗？<br>六个月后，药店又收到此种药品十瓶。一封加急电报又接踵而至，指出发生了一个更糟糕的错误。这一次，药丸每粒超重仍然是 10 毫克，但是对超重药丸的瓶数无可奉告，也就是说可能有好几个药瓶超重。怀特先生气恼极了。怀特先生：“布莱克小姐，怎么办？我们上次的方法不中用了。布莱克小姐没有立即回答，她在思索这个问题。布莱克小姐：“不错。但如果把那个方法改变一下，我们仍然只需称一次就能把分量有误的药品识别出来。这回布莱克小姐又有什么好主意？<br>为了解决第二个问题，我们必须用一个数字序列把每瓶药单独标上某个数字，且此序列中的每一个子集必须有一个单独的和。有没有这样的序列？有的，最简单的就是下列二重序列：1，2，4，8，16，。。。这些数字是 2 的连续次幂，这一序列为二进制记数法奠定了基础。在这个问题中，解法是把药瓶排成一行，从第一瓶中取出 1 粒，从第二瓶中取出 2 粒，从第三瓶中取出 4 粒，以此类推。取出的药丸放在秤上称一下。假设总重量超重 270 毫克，由于每粒分量有误的药丸超重 10 毫克，所以我们把 270 除以 10，得到 27，即为超重药丸的粒数。把 27 化成二进制数：11011 。在 11011 中自右至左，第一，二，四，五位上的“1”表示其权值分别为 1，2，8，16。因此分量有误的药瓶是第一，二，四，五瓶。</p>\n<h3 id=\"4-简单的扑克魔术\"><a href=\"#4-简单的扑克魔术\" class=\"headerlink\" title=\"4. 简单的扑克魔术\"></a>4. 简单的扑克魔术</h3><p>请别人把一副牌洗过，然后放进你的口袋，再请人说出一个 1 至 15 以内的数字。然后你把手插进你的口袋里，一伸手就取出一组牌，其数值相加正好等于他所说的数字。<br>此秘密简单的很。在耍魔术之前，预先取出 A，2，4，8 各一张放入口袋。这副牌缺少区区四张，不大可能为人察觉。洗过的牌放入口袋后，暗中将其排置于原先已经放在口袋中的四张牌的后面。请别人说出一个数字，你用心算将此数表示成 2 的幂的和。如果是 10，那你就应想到：8+2=10，随即伸手入袋，取出 2 和 8 的牌示众。</p>\n<h3 id=\"5-心灵感应游戏\"><a href=\"#5-心灵感应游戏\" class=\"headerlink\" title=\"5. 心灵感应游戏\"></a>5. 心灵感应游戏</h3><p>心灵感应游戏的依据也是二进制原理，准备五张卡片，分别记为 A，B，C，D，E，上面写着 1~31 之间的一些整数。请一位观众想好此范围内的一个数字（例如某个人的年龄），然后请他把所有上面有此数字的卡片都交给你。你随即说出他心中所想的那个数字。<br>卡片如下： </p>\n<ul>\n<li>A：1   3   5   7  9   11  13  15  17  19  21  23  25  27  29  31</li>\n<li>B：2   3   6   7  10  11  14  15  18  19  22  23  26  27  30  31</li>\n<li>C：4   5   6   7  12  13  14  15  20  21  22  23  28  29  30  31</li>\n<li>D：8   9  10   11  12  13  14  15  24  25  26  27  28  29  30  31</li>\n<li>E：16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31</li>\n</ul>\n<p>秘诀就是把每张卡片上 2 的幂的第一个数字相加。例如，如果把卡片 C 和 E 交给你，你只要将上面第一个数字 4 和 16 相加，便知道别人心中所想的数字是 20。这是为什么呢？<br>我们观察卡片上的数字，可以发现这样一个规律：<br>第一张卡片 (A) 上的数字如果用五位二进制表示，则分别为：<br>00001，00011，00101，00111，01001，01011，01101，01111，10001，10011，10101，10111，11001，11011，11101，11111。<br>第二张卡片 (B) 上的数字如果用五位二进制表示，则分别为：<br>00010，00011，00110，00111，01010，01011，01110，01111，10010，10011，10110，10111，11010，11011，11110，11111。<br>第三张卡片 (C) 上的数字如果用五位二进制表示，则分别为：<br>00100，00101，00110，00111，01100，01101，01110，01111，10100，10101，10110，10111，11100，11101，11110，11111。<br>请大家注意观察，第一张卡片上每个二进制数的右起第一位都是 “1”，第二张卡片上每个二进制数的右起第二位都是 “1”，第三张卡片上每个二进制数的右起第三位都是 “1”。依此类推，我们可以发现第 n 张卡片上每个二进制数的右起第 n 位都是 “1”。观众所想的数字和卡片的关系只有“有”和“无”两种状态，正好与二进制数码 0 与 1 一一对应。“有”我们就记为 “1”，“无”我们就记为 “0”，这样观众交给我们的卡片组合，就对应一个二进制数，如把卡片 C 和 E 交给你，那卡片组合就是“有无有无无”，对应二进制数为 10100”，即十进制数 “20”。又如把卡片A，B 和 E 交给你，那卡片组合就是“有无无有有”，对应二进制数为 “10011”，即十进制数 “19”。 二进制数的位数越多，能够表示的数值就越大，如果有 6 张卡片，则表示的数字范围扩大到 1~63，7 张卡片则可以表示 1~127。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://discuss.leetcode.com/topic/50315/a-summary-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently\" target=\"_blank\" rel=\"noopener\">A summary: how to use bit manipulation to solve problems easily and efficiently</a></li>\n</ul>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"https://graphics.stanford.edu/~seander/bithacks.html\" target=\"_blank\" rel=\"noopener\">Bit Twiddling Hacks</a></li>\n<li><a href=\"http://lab.polygonal.de/2007/05/10/bitwise-gems-fast-integer-math/\" target=\"_blank\" rel=\"noopener\">Bitwise gems – fast integer math</a></li>\n</ul>\n","raw":null,"categories":[{"name":"computer-base","path":"api/categories/computer-base.json"}],"tags":[{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"位操作","path":"api/tags/位操作.json"}]},{"title":"前端面试系列（3）——HTTP/2新特性","slug":"前端面试系列（3）——HTTP2新特性","date":"2017-03-19T13:18:57.000Z","updated":"2019-07-04T08:09:14.553Z","comments":true,"path":"api/articles/前端面试系列（3）——HTTP2新特性.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_37.png","content":"<p>如果你认为前端不需要了解 HTTP 的话你就大错特错了，根据师兄师姐们的面试经验反馈，前端面试时关于 HTTP 的问题提问的几率也很大，而且对于更高一层的 tcp/ip 协议的认知也是前端开发者需要掌握的，所以我打算把关于 HTTP/2 新特性的文章作为前端面试系列的第三篇文章，如果想对 HTTP/2 协议有更深入的了解，可以点击文末的扩展阅读链接。</p>\n<h2 id=\"HTTP-2-源自-SPDY2\"><a href=\"#HTTP-2-源自-SPDY2\" class=\"headerlink\" title=\"HTTP/2 源自 SPDY2\"></a>HTTP/2 源自 SPDY2</h2><p>SPDY 系列协议由谷歌开发，于 2009 年公开。它的设计目标是降低 50% 的页面加载时间。当下很多著名的互联网公司，例如百度、淘宝、<a href=\"https://www.upyun.com/\" target=\"_blank\" rel=\"noopener\">UPYUN</a> 都在自己的网站或 APP 中采用了 SPDY 系列协议（当前最新版本是 SPDY/3.1），因为它对性能的提升是显而易见的。主流的浏览器（谷歌、火狐、Opera）也都早已经支持 SPDY，它已经成为了工业标准，HTTP Working-Group 最终决定以 SPDY/2 为基础，开发 HTTP/2。 但是，HTTP/2 跟 SPDY 仍有不同的地方，主要是以下两点：</p>\n<ol>\n<li>HTTP/2 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</li>\n<li>HTTP/2 消息头的压缩算法采用 <a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"noopener\">HPACK</a>，而非 SPDY 采用的 <a href=\"http://zh.wikipedia.org/wiki/DEFLATE\" target=\"_blank\" rel=\"noopener\">DELEFT</a></li>\n</ol>\n<h2 id=\"HTTP-2-的优势\"><a href=\"#HTTP-2-的优势\" class=\"headerlink\" title=\"HTTP/2 的优势\"></a>HTTP/2 的优势</h2><h3 id=\"1-HTTP-是一个二进制协议\"><a href=\"#1-HTTP-是一个二进制协议\" class=\"headerlink\" title=\"1. HTTP 是一个二进制协议\"></a>1. HTTP 是一个二进制协议</h3><p>基于二进制的 HTTP/2 可以使成帧的使用变得更为便捷。在 HTTP1.1 和其他基于文本的协议中，对帧的起始和结束识别起来相当复杂。而另一方面，这项决议同样使得我们可以更加便捷的从帧结构中分离出那部分协议本身的内容。而在 HTTP1 中，各个部分相互交织，犹如一团乱麻。</p>\n<p>HTTP/2 会发送有着不同类型的二进制帧，但他们都有如下的公共字段：Type, Length, Flags, Steam Identifier 和 frame payload；规范中一共定义了 10 种不同的帧，其中最基础的两种分别对应于 HTTP 1.1 的 DATA 和 HEADERS。之后我会更详细的介绍它们其中的一部分。</p>\n<p>二进制协议的优势显而易见：解析开销更小，描述协议也更高效。</p>\n<h3 id=\"2-多路复用的流\"><a href=\"#2-多路复用的流\" class=\"headerlink\" title=\"2. 多路复用的流\"></a>2. 多路复用的流</h3><p>流是一个逻辑上的联合，一个独立的，双向的帧序列可以通过一个 HTTP/2 的连接在服务端与客户端之间不断的交换数据。</p>\n<p>每个单独的 HTTP/2 连接都可以包含多个并发的流，这些流中<strong>交错</strong>的包含着来自两端的帧。流既可以被客户端/服务器端单方面的建立和使用，也可以被双方共享，或者被任意一边关闭。在流里面，<strong>每一帧发送的顺序非常关键</strong>。接收方会按照收到帧的顺序来进行处理。</p>\n<p>流的多路复用意味着在同一连接中来自各个流的数据包会被混合在一起。就好像两个（或者更多）独立的“数据列车”被拼凑到了一辆列车上，但它们最终会在终点站被分开。</p>\n<h3 id=\"3-优先级和依赖性\"><a href=\"#3-优先级和依赖性\" class=\"headerlink\" title=\"3. 优先级和依赖性\"></a>3. 优先级和依赖性</h3><p>每个流都包含一个优先级（也就是“权重”），它被用来告诉对端哪个流更重要。当资源有限的时候，服务器会根据优先级来选择应该先发送哪些流。</p>\n<p>借助于 PRIORITY 帧（关于 HTTP/2 中帧的介绍可以查看文末扩展阅读），客户端同样可以告知服务器当前的流依赖于其他哪个流。该功能让客户端能建立一个优先级“树”，所有“子流”会依赖于“父流”的传输完成情况。</p>\n<p>优先级和依赖关系可以在传输过程中被动态的改变。这样当用户滚动一个全是图片的页面的时候，浏览器就能够指定哪个图片拥有更高的优先级。或者是在你切换标签页的时候，浏览器可以提升新切换到的页面所包含流的优先级。</p>\n<h3 id=\"4-头压缩\"><a href=\"#4-头压缩\" class=\"headerlink\" title=\"4. 头压缩\"></a>4. 头压缩</h3><p>HTTP 是一种无状态的协议。简而言之，这意味着每个请求必须要携带服务器需要的所有细节，而不是让服务器保存住之前请求的元数据。因为 HTTP/2 并没有改变这个范式，所以它也需要这样（携带所有细节）。</p>\n<p>这也保证了 HTTP 可重复性。当一个客户端从同一服务器请求了大量资源（例如页面的图片）的时候，所有这些请求看起来几乎都是一致的，而这些大量一致的东西则正好值得被压缩。</p>\n<p>当每个页面资源的个数上升的时候，cookies 和请求的大小都会增加，而每个请求都会包含的 cookie 几乎是一模一样的。</p>\n<p>HTTP 1.1 请求的大小正变得越来越大，有时甚至会大于 TCP 窗口的初始大小，这会严重拖累发送请求的速度。因为它们需要等待带着 ACK 的响应回来以后，才能继续被发送。这也是另一个需要压缩的理由。</p>\n<p>HTTP/2 对消息头采用 <strong>HPACK</strong> 进行压缩传输，能够节省消息头占用的网络的流量。如果我们约定将常用的请求头的参数用一些特殊的编号来表示，比如 GET /index.html 用一个 1 来表示，POST /index.html 用 2 来表示。那么是不是可以节省很多字节？ 为 HTTP/2 的专门量身打造的 HPACK 便是类似这样的思路延伸。它使用一份索引表来定义常用的 HTTP Header。把常用的 HTTP Header 存放在表里。请求的时候便只需要发送在表里的索引位置即可。例如 :method=GET 使用索引值 2 表示，:path=/index.html 使用索引值 5 表示。</p>\n<h3 id=\"5-重置\"><a href=\"#5-重置\" class=\"headerlink\" title=\"5. 重置\"></a>5. 重置</h3><p>HTTP 1.1 有一个缺点是：当一个含有确切值的 Content-Length 的 HTTP 消息被送出之后，你就很难中断它了。当然，通常你可以断开整个 TCP 链接（但也不总是可以这样），但这样导致的代价就是需要通过三次握手来重新建立一个新的 TCP 连接。</p>\n<p>一个更好的方案是只终止当前传输的消息并重新发送一个新的。在 HTTP/2 里面，我们可以通过发送 RST_STREAM 帧来实现这种需求，从而避免浪费带宽和中断已有的连接。</p>\n<h3 id=\"6-服务器推送\"><a href=\"#6-服务器推送\" class=\"headerlink\" title=\"6.服务器推送\"></a>6.服务器推送</h3><p>这个功能通常被称作“缓存推送”。主要的思想是：当一个客户端请求资源 X，而服务器知道它很可能也需要资源 Z 的情况下，服务器可以在客户端发送请求前，主动将资源 Z 推送给客户端。这个功能帮助客户端将 Z 放进缓存以备将来之需。</p>\n<p>服务器推送需要客户端显式的允许服务器提供该功能。但即使如此，客户端依然能自主选择是否需要中断该推送的流。如果不需要的话，客户端可以通过发送一个 RST_STREAM 帧来中止。</p>\n<h3 id=\"7-流量控制\"><a href=\"#7-流量控制\" class=\"headerlink\" title=\"7. 流量控制\"></a>7. 流量控制</h3><p>HTTP/2 上面每个流都拥有自己的公示的流量窗口，它可以限制另一端发送数据。对于每个流来说，两端都必须告诉对方自己还有更多的空间来接受新的数据，而在该窗口被扩大前，另一端只被允许发送这么多数据。</p>\n<p>而只有数据帧会受到流量控制。</p>\n<h3 id=\"8-HTTP-2-的基石-Frame\"><a href=\"#8-HTTP-2-的基石-Frame\" class=\"headerlink\" title=\"8. HTTP/2 的基石-Frame\"></a>8. HTTP/2 的基石-Frame</h3><p>Frame 是 HTTP/2 二进制格式的基础，基本可以把它理解为它 TCP 里面的数据包一样。HTTP/2 之所以能够有如此多的新特性，正是因为底层数据格式的改变。 Frame 的基本格式如下（图中的数字表示所占位数，内容摘自  <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-http2-17\" target=\"_blank\" rel=\"noopener\">http2-draft-17</a>）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------------------------------------+</span><br><span class=\"line\">| Length (24) |</span><br><span class=\"line\">+---------------+---------------+---------------+</span><br><span class=\"line\">| Type (8) | Flags (8) |</span><br><span class=\"line\">+-+-------------+---------------+-------------------+</span><br><span class=\"line\">|R| Stream Identifier (31) |</span><br><span class=\"line\">+=+=================================================+</span><br><span class=\"line\">| Frame Payload (0...) ...</span><br><span class=\"line\">+---------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Length</strong>：表示 Frame Payload 部分的长度，另外 Frame Header 的长度是固定的 9 字节（Length + Type + Flags + R + Stream Identifier = 72 bit）。</li>\n<li><strong>Type</strong>：区分这个 Frame Payload 存储的数据是属于 HTTP Header 还是 HTTP Body；另外 HTTP/2 新定义了一些其他的 Frame Type，例如，这个字段为 0 时，表示 DATA 类型（即 HTTP/1.x 里的 Body 部分数据）</li>\n<li><strong>Flags</strong>：共 8 位， 每位都起标记作用。每种不同的 Frame Type 都有不同的 Frame Flags。例如发送最后一个 DATA 类型的 Frame 时，就会将 Flags 最后一位设置 1（<code>flags &amp;= 0x01</code>），表示 END_STREAM，说明这个 Frame 是流的最后一个数据包。</li>\n<li><strong>R</strong>：保留位。</li>\n<li><strong>Stream Identifier</strong>：流 ID，当客户端和服务端建立 TCP 链接时，就会先发送一个 Stream ID = 0 的流，用来做些初始化工作。之后客户端和服务端从 1 开始发送请求/响应。</li>\n</ul>\n<p>Frame 由 Frame Header 和 Frame Payload 两部分组成。不论是原来的 HTTP Header 还是 HTTP Body，在 HTTP/2 中，都将这些数据存储到 Frame Payload，组成一个个 Frame，再发送响应 / 请求。通过 Frame Header 中的 Type 区分这个 Frame 的类型。由此可见语义并没有太大变化，而是数据的格式变成二进制的 Frame。二者的转换和关系如下图:</p>\n<div align=\"center\"><img src=\"/images/hexo_post_37.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"9-HTTP-2-对-web-开发的影响\"><a href=\"#9-HTTP-2-对-web-开发的影响\" class=\"headerlink\" title=\"9.HTTP/2 对 web 开发的影响\"></a>9.HTTP/2 对 web 开发的影响</h3><p>到目前为止，HTTP/2 还没被大范围部署使用，我们也无法确定到底会发生什么变化。</p>\n<p>HTTP/2 减少了网络往返传输的数量，并且用多路复用和快速丢弃不需要的流的办法来完全避免了 head of line blocking（线头阻塞）的困扰。它也支持大量并行流，所以即使网站的数据分发在各处也不是问题。合理利用流的优先级，可以让客户端尽可能优先收到更重要的数据。</p>\n<p>所有这些加起来，页面载入时间和站点的响应速度都会更快。简而言之，它们都代表着更好的 web 体验。</p>\n<p>然而这里的问题在于：对于网站的开发者而言，在短期内开发和部署同一套前端来支持 HTTP 1.1 和 HTTP/2 的客户端访问并获得最大性能将会是一个挑战。考虑到这些问题，<strong>彻底发掘 HTTP/2 的潜力还有很长一段路要走</strong>。</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"https://bagder.gitbooks.io/http2-explained/content/zh/\" target=\"_blank\" rel=\"noopener\">http2讲解（中文）</a></li>\n<li><a href=\"https://http2.github.io/\" target=\"_blank\" rel=\"noopener\">HTTP/2 官网</a></li>\n<li><a href=\"https://http2.akamai.com/demo\" target=\"_blank\" rel=\"noopener\">官方给出的关于 HTTP/2 性能的例子</a></li>\n<li><a href=\"http://blog.csdn.net/jianfyun/article/details/48549939\" target=\"_blank\" rel=\"noopener\">HTTP/2 的各种帧定义</a></li>\n</ul>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"面试","path":"api/tags/面试.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]}]}