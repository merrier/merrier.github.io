{"total":118,"pageSize":10,"pageCount":12,"data":[{"title":"Apache配置二级域名及SSL证书","slug":"Apache配置二级域名及SSL证书","date":"2018-04-24T10:13:56.000Z","updated":"2019-02-04T13:27:44.345Z","comments":true,"path":"api/articles/Apache配置二级域名及SSL证书.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前一段日子，我费了九牛二虎之力将 “Merrier说” 博客升级成了HTTPS，虽然回过头来看，其实申请SSL证书以及配置都是现成的轮子，别人已经为我们写好了脚本，不过对于第一次接触服务器相关的童鞋来说，确实会遇到很多麻烦，如果你也有这个需求，可以参考我的另一篇文章——<a href=\"/20180416/website-configuration-https.html\">网站配置HTTPS踩坑记</a>，不过这几天我又配置了一个二级域名（api.merrier.wang），用作爬虫输出的 REST API 所用。</p>\n<h2 id=\"Apache配置\"><a href=\"#Apache配置\" class=\"headerlink\" title=\"Apache配置\"></a>Apache配置</h2><p>首先，我们既然要配置二级域名，那肯定要更改服务器的配置了，这里我以Apache为例，介绍一下如何配置二级域名： 服务器的配置文件以 .conf 为后缀，首先找到 apache 配置文件（httpd.conf）所在位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>假如 httpd.conf 所在路径为 <code>/etc/httpd/conf/httpd.conf</code> ，在 httpd.conf 中加入这样一句代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/httpd/conf/extra/*.conf</span><br></pre></td></tr></table></figure>\n<p>其含义是将 /etc/httpd/conf/extra/ 路径下的所有以 .conf 为后缀的文件都作为 apache 的配置文件进行引入，这样我们就可以将除了 httpd.conf 之外的其他配置文件都放到 extra 文件夹下，便于管理。接着配置一下 NameVirtualHost，将配置文件中的下面一行代码取消注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NameVirtualHost *:80</span><br></pre></td></tr></table></figure>\n<p>然后，我们在 extra 文件夹下新建一个配置文件，如果主域名为 merrier.wang，而想配置的二级域名为 api.merrier.wang 的话，配置文件可以取名为 httpd-api.conf，这样命名比较规范。在新建的配置文件中填入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin root@merrier.wang</span><br><span class=\"line\">    DocumentRoot &quot;/var/www/html/merrier-api&quot;</span><br><span class=\"line\">    &lt;Directory &quot;/var/www/html/merrier-api&quot;&gt;</span><br><span class=\"line\">      AllowOverride all</span><br><span class=\"line\">      Order allow,deny</span><br><span class=\"line\">      Allow from all</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\">    ServerName api.merrier.wang</span><br><span class=\"line\">    ProxyRequests off</span><br><span class=\"line\">    &lt;Proxy *&gt;</span><br><span class=\"line\">      Order deny,allow</span><br><span class=\"line\">      Allow from all</span><br><span class=\"line\">    &lt;/Proxy&gt;</span><br><span class=\"line\">    &lt;Location /&gt;</span><br><span class=\"line\">      ProxyPass http://localhost:3000/</span><br><span class=\"line\">      ProxyPassReverse http://localhost:3000/</span><br><span class=\"line\">    &lt;/Location&gt;</span><br><span class=\"line\">    ErrorLog logs/merrier.wang-error_log</span><br><span class=\"line\">    CustomLog logs/merrier-wang-access_log common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>其中有几个字段名需要按照真实情况进行修改：</p>\n<ul>\n<li>DocumentRoot和Directory：你的文件存放路径</li>\n<li>ServerAdmin：一般为 root@主域名</li>\n<li>ServerName：二级域名</li>\n<li>ProxyPass和ProxyPassReverse：node 服务占用的端口号，如果没有 node 服务，可以不填写</li>\n<li>ErrorLog和CustomLog：log 存放地址</li>\n</ul>\n<p>这样修改完之后重启服务器让配置生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>然后访问一下你的二级域名（http），如果一切顺利的话应该就可以看到页面了（如果有 node 服务的话，需要先启动 node 服务）</p>\n<h2 id=\"PM2及node相关配置\"><a href=\"#PM2及node相关配置\" class=\"headerlink\" title=\"PM2及node相关配置\"></a>PM2及node相关配置</h2><p>如果你需要启动 node 服务，那你肯定需要进行进程管理，尤其是如果你的网站需要占用多个端口有多个 node 服务的话，那在 node 进程管理工具中，业界使用最多的就是 pm2 了，下面就介绍一下如何合理的进行 pm2 配置以及 node 相关安装和配置（如果你没有 node 服务，那这一部分就可以跳过了）：</p>\n<h3 id=\"安装nodejs和npm\"><a href=\"#安装nodejs和npm\" class=\"headerlink\" title=\"安装nodejs和npm\"></a>安装nodejs和npm</h3><p>centos 默认是没有 nodejs 和 npm 的，所以需要进行安装：首先要通过 yum 来安装 nodejs 和 npm，而这需要先给 yum 添加 epel 源，添加方法在 <a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-add-epel-remi/\" target=\"_blank\" rel=\"noopener\">centos 添加epel和remi源</a> 中，安装完成后，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm。在 centos 系统，我们可以通过 curl 的方式安装 nvm ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>如果你看到以下报错，说明你的 git 版本太低了（可以通过 <code>git --version</code> 查看当前 git 的版本）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\\&gt; error: pathspec &apos;v0.29.0&apos; did not match any file(s) known to git.</span><br><span class=\"line\">Your version of git is out of date. Please update it!</span><br></pre></td></tr></table></figure>\n<p>可以按照<a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7 安装 最新版 git</a>的教程进行最新版git的安装，讲解步骤很详细。安装完 nvm 之后，我们对 node 的版本管理就非常简单了，例如，如果我们要安装 8.1.3 版本，可以用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8.1.3</span><br></pre></td></tr></table></figure>\n<p>列出远程服务器上所有的可用版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n<p>列出本地已安装的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n<p>切换到某个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 8.1.3</span><br></pre></td></tr></table></figure>\n<p>nvm 的更多用法参见：<a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n<h3 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h3><p>使用 npm 全局安装，一行命令不能再简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置pm2\"><a href=\"#配置pm2\" class=\"headerlink\" title=\"配置pm2\"></a>配置pm2</h3><p>如果你的服务入口文件为 app.js，在当前项目目录下启动pm2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --watch</span><br></pre></td></tr></table></figure>\n<p>这里用了 –watch 参数，意味着当你的 express 应用代码发生变化时，pm2 会帮你自动重启服务，多贴心。不过如果不经常改动，最好省去这个参数。关于 pm2 的其他命令可以查看<a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\" target=\"_blank\" rel=\"noopener\">PM2实用入门指南</a>。</p>\n<h4 id=\"shell脚本启动多个服务\"><a href=\"#shell脚本启动多个服务\" class=\"headerlink\" title=\"shell脚本启动多个服务\"></a>shell脚本启动多个服务</h4><p>我们可以通过shell脚本控制多个服务的同时开启，比如新建一个bootstrap.sh文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">CURRENT\\_DIR=&quot;$(cd -P &quot;$(dirname &quot;$&#123;BASH\\_SOURCE\\[0\\]&#125;&quot;)&quot; &amp;&amp; pwd)&quot;</span><br><span class=\"line\">cd $CURRENT_DIR</span><br><span class=\"line\">. ~/.nvm/nvm.sh</span><br><span class=\"line\">nvm use v8.1</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">pm2 start app.json</span><br></pre></td></tr></table></figure>\n<p>而 app.json 中可以填入多个 node 服务的相关信息，名称、端口、log 信息等等，这种玩法苏南大叔讲的很详细了，可以移步：<a href=\"https://newsn.net/say/node-pm2-start.html\" target=\"_blank\" rel=\"noopener\">pm2 start命令进阶详解</a></p>\n<h2 id=\"配置SSL证书\"><a href=\"#配置SSL证书\" class=\"headerlink\" title=\"配置SSL证书\"></a>配置SSL证书</h2><p>接下来就是配置 SSL 证书的环节了，这里我们依然可以选择 Let’s entrypt 的证书，同时利用 certbot 工具可以节省很多麻烦，如果你配置过顶级域名的 SSL 证书（如果没有配置过，可以参考我的另一篇文章：<a href=\"/20180416/website-configuration-https.html\">网站配置HTTPS踩坑记</a>进行配置），可以进入之前已经生成好的 certbot-auto 目录，然后执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot-auto --apache --duplicate</span><br></pre></td></tr></table></figure>\n<p>当你遇到以下信息时，建议单独选择你没有进行配置过 HTTPS 的域名，这样就不会覆盖掉原来申请过的证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\"></span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\"></span><br><span class=\"line\">1: merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">2: api.merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\"></span><br><span class=\"line\">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\"></span><br><span class=\"line\">blank to select all options shown (Enter &apos;c&apos; to cancel):</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，重启服务就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Have Fun！</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><p><a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-install-nodejs-npm/\" target=\"_blank\" rel=\"noopener\">centos用 yum 方式安装 nodejs 和 npm</a></p>\n</li>\n<li><p><a href=\"http://www.dahouduan.com/2014/12/25/centos-yum-add-epel-remi/\" target=\"_blank\" rel=\"noopener\">centos 添加 epel 和 remi 源</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000007135306\" target=\"_blank\" rel=\"noopener\">centos 使用 nvm 安装 nodejs （nvm安装时出错，git 版本太老）</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000007134786\" target=\"_blank\" rel=\"noopener\">centos 6.7 安装 最新版 git</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\" target=\"_blank\" rel=\"noopener\">PM2实用入门指南</a></p>\n</li>\n<li><p><a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n</li>\n</ul>\n","raw":null,"categories":[{"name":"server","path":"api/categories/server.json"}],"tags":[{"name":"apache","path":"api/tags/apache.json"},{"name":"ssl","path":"api/tags/ssl.json"}]},{"title":"网站配置HTTPS踩坑记","slug":"网站配置HTTPS踩坑记","date":"2018-04-16T06:36:36.000Z","updated":"2019-02-04T13:27:44.357Z","comments":true,"path":"api/articles/网站配置HTTPS踩坑记.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_290.png","content":"<p>近两年来 HTTPS 取代 HTTP 已经成为大势所趋。早在 2014 年 Google Chromium 安全团队提议将所有的 HTTP 协议网站标注为不安全。现在，Chrome 浏览器已经开始执行这一标准了。从 Chrome 56 开始，任何网页，如果有输入密码或者信用卡资料的，却没有使用 HTTPS，将被 Chrome 浏览器标识为不安全；逐步的，任何没有使用 HTTPS 协议的网页 Chrome 浏览器都会被标识为”不安全”，或者 “Not Secure”。所以处女座的我打算将 merrier.wang 升级成 HTTPS，以下对升级过程中遇到的问题和坑进行一下总结，如果你也有类似需求，希望这篇文章能够帮到你一二~</p>\n<h2 id=\"SSL证书选择\"><a href=\"#SSL证书选择\" class=\"headerlink\" title=\"SSL证书选择\"></a>SSL证书选择</h2><p>1、对于国内用户来说，可以使用与百度云、腾讯云、阿里云合作的赛门铁克签署的证书，一年免费，申请和使用都很方便。 （<strong>不过我一开始用腾讯云的免费证书，发现chrome浏览器还是标记不安全，所以我就放弃用国内的证书- -</strong>） 2、自从 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 免费签发证书后，SSL 证书的价格就开始平民化了，有不少免费和收费的 SSL 可以选择。Let’s Encrypt 的证书虽然只有90的天，不过自动续期也很方便，对于小站来说，是很不错的选择。而我使用的就是 Lets Encrypt 颁发的证书，下面就主要记录一下申请证书，配置证书到 apache，以及自动续期的实现步骤，供有兴趣的童鞋参考。</p>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><p>Certbot 是一个简单易用的 SSL 证书部署工具，由 EFF 开发，前身即 Let’s Encrypt 官方（Python）客户端。简单来说，certbot 就是一个简化 Let’s Encrypt 部署，和管理 Let’s Encrypt 证书的工具。所以我们可以通过 Certbot 非常方便的生成证书并借助脚本实现自动续费。 首先来到 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">Certbot官网</a>，在下面的蓝色箭头处选择操作系统和服务器型号：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_290.png\" alt=\"\"><br></div>\n\n<p>以我的阿里云 ECS 举例，操作系统是 CentOS 6，服务器是 Apache，选择完之后页面下方会出现指引；按照其指引，我们首先需要安装 certbot-auto，在你想要安装的目录（这个目录最好是一个简单好找的目录，比如 <code>/etc/httpd/conf</code>，因为后面还要用到）下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure>\n<p>然后我们通过certbot获取证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./path/to/certbot-auto --apache</span><br></pre></td></tr></table></figure>\n<p>期间会让你填一些自己的信息，比如个人邮箱等等，按照自己的实际情况填写即可，然后过程中可能会遇到下面这条信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class=\"line\">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class=\"line\">new sites, or if you&apos;re confident your site works on HTTPS. You can undo this</span><br><span class=\"line\">change by editing your web server&apos;s configuration.</span><br></pre></td></tr></table></figure>\n<p>这里我强烈建议选择第二个 Redirect 选项，因为这样 Certbot 会对 apache 配置文件进行修改，当用户访问 HTTP 链接时，强制重定向到 HTTPS 链接，就不需要我们自己进行修改了。 如果一切顺利的话，当我们看到下面的提示信息时，就证明我们的证书已经申请成功并配置成功了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br><span class=\"line\">Congratulations! You have successfully enabled https://merrier.wang</span><br><span class=\"line\"></span><br><span class=\"line\">You should test your configuration at:</span><br><span class=\"line\">https://www.ssllabs.com/ssltest/analyze.html?d=merrier.wang</span><br><span class=\"line\">\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动续费\"><a href=\"#自动续费\" class=\"headerlink\" title=\"自动续费\"></a>自动续费</h2><p>此时我们可以访问一下 HTTPS 的链接，看看证书是否生效，如果不生效，可以尝试一下重启 apache：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<p>Let’s Encrypt 的证书，默认的有效期是 90 天，不过官方推荐每 60 天续期。到期之后，我们需要用命令来为证书续期，不过我们是懒人，这种体力活还是交给机器来完成比较合适。所以，我们可以用 Linux 的 cron job 来完成这类的任务。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果服务器上没有安装 crontabs，需要手动安装，centos 系统建议通过 yum 安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install crontabs</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start</span><br><span class=\"line\">chkconfig crond start</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加新的任务\"><a href=\"#添加新的任务\" class=\"headerlink\" title=\"添加新的任务\"></a>添加新的任务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab \\[-u user\\] -e</span><br></pre></td></tr></table></figure>\n<p>其中：-u user：用来设定某个用户的 crontab 服务，例如，“-u ixdba”表示设定 ixdba 用户的 crontab 服务，此参数一般由 root 用户来运行。即执行 <code>crontab -u root -e</code> 来添加任务，此时会打开一个新的文件，填入以下脚本信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0,12 * * * python -c &apos;import random; import time; time.sleep(random.random() * 3600)&apos; &amp;&amp; ./path/to/certbot-auto renew --post-hook &quot;service httpd restart&quot;</span><br></pre></td></tr></table></figure>\n<p>如果出现 crontab: installing new crontab 就说明我们的脚本已经生效了，自动续费就配置好了。关于更多 crontab 的内容可以<a href=\"https://www.jianshu.com/p/838db0269fd0\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，你可以利用他做更多有意思的事情。如果你不确定自己的定时任务是否设置成功，可以通过执行 <code>crontab -l</code> 进行查看，如果出现上面的那段 python 代码，说明定时任务已经设置成功；有时候可能 crond 服务莫名的挂掉，我们可以通过上面的命令手动启动，同时也可以通过下面的命令手动更新证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/httpd/conf/certbot-auto renew</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wordpress配置https\"><a href=\"#Wordpress配置https\" class=\"headerlink\" title=\"Wordpress配置https\"></a>Wordpress配置https</h2><p>如果你的网站是通过 wordpress 搭建的，除了进行上面的流程之外，还需要进行额外的配置：</p>\n<h3 id=\"修改wordpress后台配置中的地址改为https版本\"><a href=\"#修改wordpress后台配置中的地址改为https版本\" class=\"headerlink\" title=\"修改wordpress后台配置中的地址改为https版本\"></a>修改wordpress后台配置中的地址改为https版本</h3><div align=\"center\"><br><img src=\"/images/hexo_post_291.png\" alt=\"\"><br></div>\n\n<p><strong>注意：一定要保证https和http两种方式都能正常访问网站，才能改这个配置，否则可能导致网站无法访问。</strong>通过上面的设置，绝大部分导航中的链接就由 wordpress 系统会自动改为 HTTPS 版本。</p>\n<h3 id=\"替换正文的内部链接和其他静态资源\"><a href=\"#替换正文的内部链接和其他静态资源\" class=\"headerlink\" title=\"替换正文的内部链接和其他静态资源\"></a>替换正文的内部链接和其他静态资源</h3><p>对于这部分链接需要手工修改，修改的方法有两种：</p>\n<h4 id=\"（1）直接在数据库中更新，更新的sql如下：\"><a href=\"#（1）直接在数据库中更新，更新的sql如下：\" class=\"headerlink\" title=\"（1）直接在数据库中更新，更新的sql如下：\"></a>（1）直接在数据库中更新，更新的sql如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update wp\\_posts set post\\_content = replace(post_content, ‘http://your-website-name/’,‘https://your-website-name/’)</span><br></pre></td></tr></table></figure>\n<p>对于数据库不熟悉的童鞋不推荐这种方法，对数据库错误的更新对网站可能是毁灭性的打击，建议<strong>更新前最好备份数据库</strong>。</p>\n<h4 id=\"（2）利用wordpress提供的api来重写链接\"><a href=\"#（2）利用wordpress提供的api来重写链接\" class=\"headerlink\" title=\"（2）利用wordpress提供的api来重写链接\"></a>（2）利用wordpress提供的api来重写链接</h4><p>在使用的主题（themes）的目录下的 functions.php 加入如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"function\"><span class=\"keyword\">function</span>\\<span class=\"title\">_exists</span><span class=\"params\">(<span class=\"string\">'add\\_theme\\_support'</span>)</span> )<span class=\"title\">add</span>\\<span class=\"title\">_theme_support</span><span class=\"params\">(<span class=\"string\">'post-thumbnails'</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'script\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_script\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_script</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add\\_filter(<span class=\"string\">'style\\_loader\\_src'</span>, <span class=\"string\">'agnostic\\_style\\_loader\\_src'</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">agnostic</span>\\<span class=\"title\">_style</span>\\<span class=\"title\">_loader_src</span><span class=\"params\">($src, $handle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_replace(<span class=\"string\">'/^(http|https):/'</span>, <span class=\"string\">''</span>, $src);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法优点是可逆，不会对网站的数据库有什么影响，推荐使用这种方法。 调整完内部链接后，检查整个网站的页面，包括首页，栏目页，内容页，sitemap，页面head部分内容，比如：css，js，canonical 等，是否都转换成了 HTTPS 版本。</p>\n<h2 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h2><h3 id=\"Apache配置文件找不到\"><a href=\"#Apache配置文件找不到\" class=\"headerlink\" title=\"Apache配置文件找不到\"></a>Apache配置文件找不到</h3><p>可能某些童鞋的 apache 配置文件不在 <code>/etc/httpd/conf</code> 目录下，可以通过 find 命令进行查找：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name httpd.conf</span><br></pre></td></tr></table></figure>\n<p>其中“/”是指在根目录下进行查找，如果你知道在哪个目录下，可以自行修改，节省查找的时间</p>\n<h3 id=\"Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\"><a href=\"#Invalid-command-‘SSLEngine’-perhaps-misspelled-or-defined-by-a-module-not-included-in-the-server-configuration\" class=\"headerlink\" title=\"Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration\"></a>Invalid command ‘SSLEngine’, perhaps misspelled or defined by a module not included in the server configuration</h3><p>不管是在证书申请过程中还是在自己修改配置过程中遇到次报错，一般情况下是因为在 modules 文件夹下并没有 ssl 模块，那就需要自己安装了，我在<a href=\"https://stackoverflow.com/questions/5257974/how-to-install-mod-ssl-for-apache-httpd\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>上搜到了解决方案，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mod_ssl</span><br></pre></td></tr></table></figure>\n<p>当我们安装完毕之后，就可以看到 modules 文件夹下多了一个 mod_ssl.so 文件了，此时我们再重启 apache 就应该不报错了。</p>\n<h3 id=\"warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\"><a href=\"#warn-module-ssl-module-is-already-loaded-skipping-Address-already-in-use-make-sock-could-not-bind-to-address-0-0-0-0-443-no-listening-sockets-available-shutting-down\" class=\"headerlink\" title=\"[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down\"></a>[warn] module ssl_module is already loaded, skipping Address already in use: make_sock: could not bind to address 0.0.0.0:443 no listening sockets available, shutting down</h3><p>出现该警告说明 ssl module 被多处使用，可以用如下命令检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep ssl_module -rI /etc/httpd/*</span><br></pre></td></tr></table></figure>\n<p>此时会出现：</p>\n<div align=\"center\"><br><img src=\"/images/hexo_post_289.png\" alt=\"\"><br></div>\n\n<p>其中 <code>httpd.bk.conf</code> 是我自己建的备份，所以有两种解决方法：</p>\n<ol>\n<li>httpd.conf 中去掉 <code>LoadModule ssl\\_module modules/mod\\_ssl.so</code>、去掉 <code>Listen 443</code></li>\n<li>直接删除 <code>/etc/httpd/conf.d/ssl.conf</code>，推荐直接删除 ssl.conf</li>\n</ol>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.watch-life.net/wordpress/wordpress-https-link.html\" target=\"_blank\" rel=\"noopener\">WordPress整站轻松开启HTTPS</a></p>\n<p><a href=\"https://www.jianshu.com/p/909adc612fd4\" target=\"_blank\" rel=\"noopener\">apache服务器添加https（针对ios10 https）</a></p>\n<p><a href=\"https://stringblog.com/%E9%80%9A%E8%BF%87certbot%E9%85%8D%E7%BD%AElets-encrypt%E7%9A%84ssl%EF%BC%88apache%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">通过Certbot配置Let’s Encrypt的SSL（Apache）</a></p>\n","raw":null,"categories":[{"name":"HTTP","path":"api/categories/HTTP.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"},{"name":"Wordpress","path":"api/tags/Wordpress.json"},{"name":"HTTP","path":"api/tags/HTTP.json"}]},{"title":"Promise入门","slug":"Promise入门","date":"2018-02-26T14:14:10.000Z","updated":"2019-02-04T13:27:44.349Z","comments":true,"path":"api/articles/Promise入门.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>幕课网上的视频——<a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a>笔记，Promise 作为 ES6 中最重要的特性之一，对其进行了解和学习是非常有必要的，课程的源码已经上传至<a href=\"https://github.com/merrier/imooc-promise-sample\" target=\"_blank\" rel=\"noopener\">我的github</a>。</p>\n<h2 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h2><h3 id=\"MDN\"><a href=\"#MDN\" class=\"headerlink\" title=\"MDN\"></a>MDN</h3><blockquote>\n<ul>\n<li>The Promise object is used for asynchronous computations.</li>\n<li>A Promise represents a value which may be available now, or in the future, or never.</li>\n</ul>\n</blockquote>\n<h3 id=\"MDN中文\"><a href=\"#MDN中文\" class=\"headerlink\" title=\"MDN中文\"></a>MDN中文</h3><blockquote>\n<ul>\n<li>Promise对象用于异步计算。</li>\n<li>一个Promise表示一个现在、将来或永不可能可用的值。</li>\n</ul>\n</blockquote>\n<h3 id=\"按照用途来解释\"><a href=\"#按照用途来解释\" class=\"headerlink\" title=\"按照用途来解释\"></a>按照用途来解释</h3><ul>\n<li>主要用于异步计算</li>\n<li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。</li>\n<li>可以在对象之间传递和操作Promise，帮助我们处理队列。</li>\n</ul>\n<h2 id=\"回调存在的问题\"><a href=\"#回调存在的问题\" class=\"headerlink\" title=\"回调存在的问题\"></a>回调存在的问题</h2><ol>\n<li>嵌套层次很深，难以维护</li>\n<li>无法正常使用 return 和 throw</li>\n<li>无法正常检索堆栈信息</li>\n<li>多个回调之间难以建立联系</li>\n</ol>\n<h2 id=\"Promise-详解\"><a href=\"#Promise-详解\" class=\"headerlink\" title=\"Promise 详解\"></a>Promise 详解</h2><ul>\n<li>Promise 是一个代理对象，它和原先要进行的操作并无关系</li>\n<li>它通过引入一个回调，避免更多的回调</li>\n</ul>\n<h3 id=\"Promise-有-3-个状态\"><a href=\"#Promise-有-3-个状态\" class=\"headerlink\" title=\"Promise 有 3 个状态\"></a>Promise 有 3 个状态</h3><ol>\n<li>pending[待定]——初始状态</li>\n<li>fulfilled[实现\\——操作成功</li>\n<li>rejected[被否决]——操作失败</li>\n</ol>\n<p>当 Promise 的状态发生改变，就会触发 .then() 里的响应函数处理后续步骤；Promise 状态一经改变，不会再变；只有在连续多个回调顺序执行的时候，Promise才会显示出其威力</p>\n<h3 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\".then()\"></a>.then()</h3><ul>\n<li>.then() 接受两个函数作为参数，分别代表 fulfilled 和 rejected</li>\n<li>.then() 返回一个新的 Promise 实例，所以它可以链式调用</li>\n<li>当前面的 Promise 状态改变时，.then() 根据其最终状态，选择特定的状态响应函数执行</li>\n<li>状态响应函数可以返回新的 Promise，或其它值</li>\n<li>如果返回新的 Promise，那么下一级 .then() 会在新的 Promise 状态改变之后执行</li>\n<li>如果返回其它任何值，则会立刻执行下一级 .then()</li>\n</ul>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>Promise 会自动捕获内部异常，并交给 rejected 响应函数处理 最好是在语句的最后通过 catch 捕获错误，因为 catch 可以捕获 resolve 回调中发生的错误，而 reject 回调无法捕获；catch 也会返回一个 Promise 实例，并且它返回的 Promise 实例如果没有错误的话也是 fulfilled 状态，所以 catch() 后面的 .then() 也都会触发，但是 catch() 后面的 .catch() 不会触发（<strong>如果在第一个catch()中没有抛出错误</strong>）</p>\n<p><strong>强烈建议在所有队列最后都加上.catch()，以避免漏掉错误处理造成意想不到的问题：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething()</span><br><span class=\"line\">  .doAnotherThing()</span><br><span class=\"line\">  .doMoreThing()</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现队列\"><a href=\"#实现队列\" class=\"headerlink\" title=\"实现队列\"></a>实现队列</h3><p>有时候我们不希望所有动作一起发生，而是按照一定顺序，逐个进行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = doSomething();</span><br><span class=\"line\">promise = promise.then(doSomethingElse);</span><br><span class=\"line\">promise = promise.then(doSomethingElse2);</span><br><span class=\"line\">promise = promise.then(doSomethingElse3);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-forEach\"><a href=\"#使用-forEach\" class=\"headerlink\" title=\"使用.forEach()\"></a>使用.forEach()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">things</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">  things.forEach( <span class=\"function\"><span class=\"params\">thing</span> =&gt;</span> &#123;</span><br><span class=\"line\">    promise = promise.then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        doThing(thing, () =&gt; &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue(\\[<span class=\"string\">'lots'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'things'</span>, ....\\]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-reduce\"><a href=\"#使用-reduce\" class=\"headerlink\" title=\"使用.reduce()\"></a>使用.reduce()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">things</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> things.reduce( <span class=\"function\">(<span class=\"params\">promise, thing</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promise = promise.then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        doThing(thing, () =&gt; &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">queue(\\[<span class=\"string\">'lots'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'things'</span>, ....\\]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise常用函数\"><a href=\"#Promise常用函数\" class=\"headerlink\" title=\"Promise常用函数\"></a>Promise常用函数</h2><h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>返回一个 fulfilled 的 Promise 实例，或原始 Promise 实例</p>\n<ul>\n<li>参数为空，返回一个状态为 fulfilled 的 Promise 实例</li>\n<li>参数是一个跟 Promise 无关的值，同上，不过 fulfilled 响应函数会得到这个参数</li>\n<li>参数为 Promise 实例，则返回该实例，不做任何修改</li>\n<li>参数为 thenable（有 then 方法），立刻执行它的 .then()</li>\n</ul>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>返回一个 rejected 的 Promise 实例</p>\n<ul>\n<li><strong>Promise.reject()不认thenable</strong></li>\n<li>其他和 Promise.resolve() 类似</li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all(\\[p1, p2, p3, ...\\])</code> 用于将多个 Promise 实例包装成一个新的 Promise 实例 当所有子 Promise 都完成，该 Promise 完成，返回值是<strong>全部值的数组</strong>；有任何一个失败，该 Promise 失败，返回值是<strong>第一个失败的子Promise的结果</strong>，最常见的是和 .map() 连用</p>\n<p>###Promise.race()</p>\n<p>类似 Promise.all() ，区别在于它有任意一个完成就算完成。</p>\n<h3 id=\"常见用法：\"><a href=\"#常见用法：\" class=\"headerlink\" title=\"常见用法：\"></a>常见用法：</h3><ul>\n<li>把异步操作和定时器放在一起</li>\n<li>如果定时器先触发，就认为超时，告知用户</li>\n</ul>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><p>ES2017 新增运算符，新的语言元素</p>\n<ul>\n<li>赋予 JavaScript 以顺序手法编写异步脚本的能力！</li>\n<li>既保留异步运算的无阻赛特性，还继续使用同步写法。</li>\n<li>还能正常使用 return/try/catch</li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"ES6","path":"api/tags/ES6.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"慕课网","path":"api/tags/慕课网.json"}]},{"title":"慕课网视频评分&推荐","slug":"慕课网视频评分&推荐","date":"2018-02-19T02:11:11.000Z","updated":"2019-02-04T13:27:44.357Z","comments":true,"path":"api/articles/慕课网视频评分&推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>总有童鞋问我<a href=\"https://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">慕课网</a>上面有哪些视频比较好，我就索性写一篇文章总结一下我看过的慕课网上面的优秀的视频，绝大部分都是前端相关的，希望能够提升你的效率，节省时间。下面我会对这些视频从以下几个方面进行评分（单纯个人评分，不喜勿喷- -）：</p>\n<ul>\n<li><strong>难度系数</strong>：视频所讲内容的难度</li>\n<li><strong>实战系数</strong>：视频所讲内容的实际应用系数</li>\n<li><strong>版本系数</strong>：视频所讲内容中涉及到的框架/插件的版本是否是最新的</li>\n<li><strong>综合评分</strong>：综合评价</li>\n</ul>\n<p>推荐大家用 1.75 倍速播放，这样可以节省很多时间，同时也能听清- -</p>\n<h2 id=\"前端工具\"><a href=\"#前端工具\" class=\"headerlink\" title=\"前端工具\"></a>前端工具</h2><h3 id=\"前端内容的自动化构建\"><a href=\"#前端内容的自动化构建\" class=\"headerlink\" title=\"前端内容的自动化构建\"></a><a href=\"https://www.imooc.com/learn/922\" target=\"_blank\" rel=\"noopener\">前端内容的自动化构建</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程分为三个部分，第一部分讲解什么是构建，为什么需要自动化构建，后面两部分分别讲解如何使用 Gulp 进行 JavaScript 和 CSS 的构建。所讲内容比较简单，而且自动化构建在实际项目中经常会用到，不过 webpack 版本比较低，需要结合评论进行学习。。</p>\n<h3 id=\"webpack深入与实战\"><a href=\"#webpack深入与实战\" class=\"headerlink\" title=\"webpack深入与实战\"></a><a href=\"https://www.imooc.com/learn/802\" target=\"_blank\" rel=\"noopener\">webpack深入与实战</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★☆☆☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍了如何在项目中使用 webpack 打包文件，处理各种资源，以及配置开发环境，上线环境等，通过实际的例子来讲解 webpack 的使用方法，带你探索 webpack 强大的功能。可以说是很全面了，作者讲解的也比较详细，想初步了解 webpack 如何使用的童鞋可以选择看一下该视频。</p>\n<h3 id=\"前端实时可视化开发工具体验\"><a href=\"#前端实时可视化开发工具体验\" class=\"headerlink\" title=\"前端实时可视化开发工具体验\"></a><a href=\"https://www.imooc.com/learn/718\" target=\"_blank\" rel=\"noopener\">前端实时可视化开发工具体验</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>前端开发中，我们常常需要频繁的修改 html，css，js，然后刷新页面，看效果，再调整，再刷新。该课程使用 liveStyle，liveReload，browserSync 工具实现修改代码后，立即体现效果的功能，使用可见即可得的开发模式，极大的提高前端开发效率。实时可视化在开发环境应用的比较多，会很大程度地提高工作效率，感兴趣的童鞋可以再自行搜索 hotreload，这样结合本视频观看食用效果更佳</p>\n<h3 id=\"前端性能优化-基础知识认知\"><a href=\"#前端性能优化-基础知识认知\" class=\"headerlink\" title=\"前端性能优化-基础知识认知\"></a><a href=\"https://www.imooc.com/learn/580\" target=\"_blank\" rel=\"noopener\">前端性能优化-基础知识认知</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程从前端优化目的，简单方法、分类开始，到如何优化，优化过程中的常见错误，业内公认的但是不适应所有方案。我们还可从这个课程中学习到当我们访问一个站点的时候，我们究竟做了什么以及怎么样才叫优化成功。性能优化是一个老生常谈的问题，如果你对该问题有一定的基础认知，想再深入了解相关知识的话，该课程你不容错过</p>\n<h2 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h2><h3 id=\"Hello，移动WEB\"><a href=\"#Hello，移动WEB\" class=\"headerlink\" title=\"Hello，移动WEB\"></a><a href=\"https://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">Hello，移动WEB</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程介绍移动 web 的开发基础，高效的排版布局，常见的移动 web 问题，终端触摸交互，各种 bug 坑如何解决等多方面。虽然视频比较短，但是干货多多，对于移动端的适配布局这类问题进行了很详细的讲解。</p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Promise入门\"><a href=\"#Promise入门\" class=\"headerlink\" title=\"Promise入门\"></a><a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise入门</a></h3><ul>\n<li>难度系数：★★★★☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>Promise 是 ES6 中最重要的特性之一，该课程为我们讲解了为什么会有 Promise，以及 Promise 的常见用法和注意事项，通过实际代码进行讲解清晰易懂，适合前端中级水平开发者，我对该课程进行了总结，笔记<a href=\"/20180226/introduction-to-promise.html\">在这里</a>可以查看得到。</p>\n<h3 id=\"ajax跨域完全讲解\"><a href=\"#ajax跨域完全讲解\" class=\"headerlink\" title=\"ajax跨域完全讲解\"></a><a href=\"https://www.imooc.com/learn/947\" target=\"_blank\" rel=\"noopener\">ajax跨域完全讲解</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>跨域是前端领域中经常遇到的问题，尤其是各种 CDN 服务兴起之后，而究竟什么情况下跨域，如何解决跨域问题更是笔试或面试时经常被问到的问题，该视频教程详细讲解了 jsonp 的工作机制，http 协议如何支持跨域，以及 http 服务器 nginx 和 apache 的 2 种不同解决思路，让大家知其然并知其所以然，是非常不错的跨域入门讲解课程</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS深入理解系列\"><a href=\"#CSS深入理解系列\" class=\"headerlink\" title=\"CSS深入理解系列\"></a><a href=\"https://www.imooc.com/search/course?words=css%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E5%BC%A0%E9%91%AB%E6%97%AD\" target=\"_blank\" rel=\"noopener\">CSS深入理解系列</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★★★</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★★</li>\n</ul>\n<p>该系列视频为张鑫旭老师对 CSS 相关属性的讲解，包括 margin、padding、position、z-index 等等基础属性，适合具备一定 CSS 基础知识的童鞋，张鑫旭老师的讲课风格很独特，也不知道是否符合你的口味，不过我是很喜欢啦~而且张鑫旭老师对于这些属性的讲解很深入，在实际项目中应用的很多，毕竟前端工程师一年写的 CSS 代码可以绕地球三圈啊（我对该系列视频的讲解进行了总结，在系列专栏中的<a href=\"/20170421/css-in-depth-understanding-series.html\">CSS深入理解系列</a>中可以看到）</p>\n<h3 id=\"如何用CSS进行网页布局\"><a href=\"#如何用CSS进行网页布局\" class=\"headerlink\" title=\"如何用CSS进行网页布局\"></a><a href=\"https://www.imooc.com/learn/57\" target=\"_blank\" rel=\"noopener\">如何用CSS进行网页布局</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程教你怎么制作一列布局、二列布局、三列布局当然还有最通用的混合布局，而且你还可以选择让它固定还是自适应。用 CSS 重新规划你的网页，让你的网页从此更美观、更友好。难度系数很低，而布局在实际项目中是很基本也是很重要的知识点</p>\n<h3 id=\"分页页码制作\"><a href=\"#分页页码制作\" class=\"headerlink\" title=\"分页页码制作\"></a><a href=\"https://www.imooc.com/learn/15\" target=\"_blank\" rel=\"noopener\">分页页码制作</a></h3><ul>\n<li>难度系数：★☆☆☆☆</li>\n<li>实战系数：★★☆☆☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>通过本课程的学习，我们可以学习到利用 HTML、CSS 样式技术制作出分页页码的效果。包括最简单的直角分页页码效果，修复行内元素之间的间隔 bug 问题分析，代码整理，为分页页码插入小图标。虽然一般不需要我们自己制作分页页码，但是如果你想自己写框架或者对这类知识比较好奇的话，该视频能够充分解答你的疑惑，最为关键的是<strong>提供源码</strong>啊~</p>\n<h2 id=\"JavaScript-1\"><a href=\"#JavaScript-1\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"Hybrid设计\"><a href=\"#Hybrid设计\" class=\"headerlink\" title=\"Hybrid设计\"></a><a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★★☆</li>\n<li>综合评分：★★★★☆</li>\n</ul>\n<p>该课程首先会告诉大家什么是 Hybrid，Hybrid 有什么特点，也会告诉大家业内有哪些常见的 Hybrid 应用以及 Hybrid 合理的应用场景。 然后，课程会简单介绍一个 Hybrid 架构的方方面面，包括 Hybrid 的发展，比如超级 Hybrid 方案 React Native 以及 Weex 学习该课程，大家会知道 Hybrid 中 H5 与 Native 如何交互，并且对 Hybrid 体验增强和 Hybrid 离线包有一些认识，是大家做混合 APP 的必备良药。</p>\n<h3 id=\"zepto设计和源码分析\"><a href=\"#zepto设计和源码分析\" class=\"headerlink\" title=\"zepto设计和源码分析\"></a><a href=\"https://www.imooc.com/learn/745\" target=\"_blank\" rel=\"noopener\">zepto设计和源码分析</a></h3><ul>\n<li>难度系数：★★★☆☆</li>\n<li>实战系数：★★★☆☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>当熟练使用 zepto 的 API 之后，也应该解读一下 zepto 的源码，了解一下 zepto 的设计原理。该教程深入浅出的介绍了 zepto 最核心的设计原理，看完之后即能轻松解读 zepto 所有源码。就像 TJ 大神一样，有时候看别人写的代码会有不同寻常的收获</p>\n<h3 id=\"Web安全-XSS\"><a href=\"#Web安全-XSS\" class=\"headerlink\" title=\"Web安全-XSS\"></a><a href=\"https://www.imooc.com/learn/812\" target=\"_blank\" rel=\"noopener\">Web安全-XSS</a></h3><ul>\n<li>难度系数：★★☆☆☆</li>\n<li>实战系数：★★★★☆</li>\n<li>版本系数：★★★☆☆</li>\n<li>综合评分：★★★☆☆</li>\n</ul>\n<p>该课程从 Web 安全 XSS 的定义开始讲起，到深入剖析 XSS 攻击的原理和流程，了解常见 XSS 攻击的危害。同时通过项目实战针对性的分析如何应对 XSS 攻击做到安全的 XSS 防御措施。XSS 是最常见的一种 web 攻击，了解一些相关知识百利无一害= =</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"推荐","path":"api/tags/推荐.json"},{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"那些惊艳的移动端H5案例","slug":"那些惊艳的移动端H5案例","date":"2018-02-11T08:25:53.000Z","updated":"2019-02-04T13:27:44.361Z","comments":true,"path":"api/articles/那些惊艳的移动端H5案例.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_235.jpeg","content":"<p>不管是公司用于宣传还是对某个产品进行营销，移动端 H5 的应用范围越来越广，其取得的效果也有目共睹，而这篇文章就带大家领略一下那些十分惊艳的移动端H5案例，希望大家抱着猎奇的心态观看，毕竟可远观而不可亵玩呐-。-（以下活动有可能是限时的，所以当你再次访问时有可能已经关站了，排名不分先后）</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"adidas-胜势全开\"><a href=\"#adidas-胜势全开\" class=\"headerlink\" title=\"adidas-胜势全开\"></a><a href=\"http://show.im20.com.cn/bbcny/\" target=\"_blank\" rel=\"noopener\">adidas-胜势全开</a></h3><p>\badidas 为自己的新战靴做的宣传，不过看开头动画的时候有点吓到我了- -，这为了宣传新鞋也真是下了一番功夫啊。。</p>\n<h3 id=\"凡科720°全景×活动促销\"><a href=\"#凡科720°全景×活动促销\" class=\"headerlink\" title=\"凡科720°全景×活动促销\"></a><a href=\"https://s.wcd.im/v/2uZ71/\" target=\"_blank\" rel=\"noopener\">凡科720°全景×活动促销</a></h3><p>凡科互动是凡科旗下的一个子品牌，主要做的就是这种活动促销 H5，其中大多数为游戏的形式，而这个 720° 全景营销案例很经典，之前我也曾经尝试过实现一个类似的，结果可想而知。。因为 720° 需要用到一些数学知识，同时为了让其滑动的更顺滑，引入了很多插件，所以是一个比较难实现的案例。</p>\n<h3 id=\"Merrier和王者荣耀的故事\"><a href=\"#Merrier和王者荣耀的故事\" class=\"headerlink\" title=\"Merrier和王者荣耀的故事\"></a><a href=\"https://game.weixin.qq.com/cgi-bin/act?noticeid=90113615&amp;actid=7519&amp;k=m4GgtZfFORJ_wyqLywTnnw&amp;q=0&amp;jsapi_ticket=1&amp;openid=owanlsmlZT4pSDOwMrD8P9ObuEEU&amp;partition=4052#wechat_redirect\" target=\"_blank\" rel=\"noopener\">Merrier和王者荣耀的故事</a></h3><p>不知道你们能不能打开这个链接，应该是只能在微信中打开的- -，这是王者荣耀在两周年的时候出的一个总结性质的 H5，色彩搭配很舒服，同时各种数据的统计证明这个文案是用了很大心思的。</p>\n<h3 id=\"有志者，吃就橙\"><a href=\"#有志者，吃就橙\" class=\"headerlink\" title=\"有志者，吃就橙\"></a><a href=\"http://h5.flyfinger.com/2017/dlanping/foodleS/index.html\" target=\"_blank\" rel=\"noopener\">有志者，吃就橙</a></h3><p>大众点评和摩拜单车联合搞的一次“炫光吃货车”活动，虽然其实就是一个不能暂停也没有很人性化的静音按钮的视频，但是不得不说，文案还是有一丢丢创意的，而且配音也很有意思。。</p>\n<h3 id=\"车轮招聘节\"><a href=\"#车轮招聘节\" class=\"headerlink\" title=\"车轮招聘节\"></a><a href=\"http://h5.eclicks.cn/2016/hr/index.html\" target=\"_blank\" rel=\"noopener\">车轮招聘节</a></h3><p><a href=\"http://eclicks.cn/\" target=\"_blank\" rel=\"noopener\">车轮——让有车生活更美好</a>制作的招聘宣传 H5，虽然动画比较简单，而且元素也比较单一，但是整体效果还是不错的，而且有一个很牛逼的微信分享标题：《我们在召唤你，艾泽拉斯最强的勇士们！》</p>\n<h3 id=\"开打法魔用能只章文篇这\"><a href=\"#开打法魔用能只章文篇这\" class=\"headerlink\" title=\"开打法魔用能只章文篇这\"></a><a href=\"http://news.163.com/special/fdh5_harrypotter20_18/\" target=\"_blank\" rel=\"noopener\">开打法魔用能只章文篇这</a></h3><p>（这个标题用了我 30 秒的时间）不得不承认这是我见过的最炫酷的 H5 宣传案例了，当那熟悉的旋律响起，我们仿佛就置身于霍格沃茨魔法学院，通过一些手势产生互动，最后还能学到魔法，不得不说真的很赞，不过缺点就是：这个是宣传什么的来着？</p>\n<h3 id=\"艾泽拉斯全景之旅\"><a href=\"#艾泽拉斯全景之旅\" class=\"headerlink\" title=\"艾泽拉斯全景之旅\"></a><a href=\"http://zhouxin.legendh5.com/h5/537c983e-b0a6-8a91-435b-abb04ad6c704.html\" target=\"_blank\" rel=\"noopener\">艾泽拉斯全景之旅</a></h3><p>80 年代的魔兽世界，大灾变之前的艾泽拉斯，wower 老玩家的回忆。不知不觉，魔兽世界已经陪伴我们超过十年了，虽然我自己玩魔兽的时间很短很短，不过对魔兽世界的文化本身还是比较感兴趣的，而这个 720° 全景可以说做的很用心，也很真实，同时还能够看到一些玩家在暴风城等地方留下的感慨，岁月流转，曾经一起下副本的朋友们你们过得还好吗？</p>\n<h3 id=\"朕收到一条来自你妈的微信\"><a href=\"#朕收到一条来自你妈的微信\" class=\"headerlink\" title=\"朕收到一条来自你妈的微信\"></a><a href=\"http://9be705463ff7.vt.iamh5.cn/v3/idea/7gEJ3FF5\" target=\"_blank\" rel=\"noopener\">朕收到一条来自你妈的微信</a></h3><p>这个标题着实吓到我了，不过点开才发现，这和我妈有什么关系？！其实就是故宫食品的宣传 H5，在这里赞一下文案设计，风趣而不失稳重（看饿了）：</p>\n<blockquote>\n<p>圣旨到<br>奉天承运，皇帝诏曰<br>朕最近心情不佳<br>打农药微信总弹窗<br>段位一直掉掉掉掉<br>烦死朕了<br>朕实在控记不住记几啊<br>点开一看<br>朕收到了你妈的微信<br>让你中秋回家吃月饼 SO<br>朕就给你批个长假<br>回家过节<br>反正带不回对象<br>那就带朕的心意<br>哈哈哈哈，没想到吧<br>朕给自家御膳房走波广告<br>（…各种弹幕）<br>朕的御厨，平时很闲<br>除了月饼，还做了一堆<br>（…各种吃的）<br>现在有些妖艳的月饼<br>咬一口防腐半年<br>一定是哪个刁民<br>想谋害朕<br>好继承朕的江山<br>稳住我们能赢！<br>朕的御膳房，刀枪不入，百毒不侵<br>国味汝肴典藏月饼<br>这就是朕的心意<br>故  宫  的  月  饼<br>眼花了吧 哈哈哈哈哈<br>朕就是这样迷人的汉子<br>（好不要脸）</p>\n</blockquote>\n<h3 id=\"领英丨名企梦工厂-今日头条\"><a href=\"#领英丨名企梦工厂-今日头条\" class=\"headerlink\" title=\"领英丨名企梦工厂-今日头条\"></a><a href=\"https://h5.veervr.tv/player/?vid=%E9%A2%86%E8%8B%B1%E4%B8%A8%E5%90%8D%E4%BC%81%E6%A2%A6%E5%B7%A5%E5%8E%82-%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1-66114\" target=\"_blank\" rel=\"noopener\">领英丨名企梦工厂-今日头条</a></h3><p>领英在校招季携手 18 家顶级名企，用 VR 全景带你全方位无死角地触碰心仪公司，可以说结合 VR 进行企业的介绍效果很赞，再加上旁白的介绍更加饱满充实，不过就是流量消耗巨大。。如果对 VR 感兴趣的话，欢迎去 <a href=\"https://veervr.tv/\" target=\"_blank\" rel=\"noopener\">VeeR-全球VR内容分享社区</a>观看更多 VR 视频（首先，你得有一副好的 VR 眼镜）</p>\n<h3 id=\"2017两会\"><a href=\"#2017两会\" class=\"headerlink\" title=\"2017两会\"></a><a href=\"http://www.html5case.com.cn/case/people-cn/likeqiang-timeline/index2.html\" target=\"_blank\" rel=\"noopener\">2017两会</a></h3><p>人民日报在两会期间做的微信宣传 H5，很有创意，借用微信群聊和朋友圈的方式对国家取得的成果进行了展示，同时进行了一些宣传和号召。</p>\n<h3 id=\"王思聪邀请你加入群聊\"><a href=\"#王思聪邀请你加入群聊\" class=\"headerlink\" title=\"王思聪邀请你加入群聊\"></a><a href=\"http://static.udache.com/gulfstream/webapp/modules/tmall2didi/index.html\" target=\"_blank\" rel=\"noopener\">王思聪邀请你加入群聊</a></h3><p>现在的标题党越来越多了。。其实和上面那个两会的 H5 类似，只不过粗糙一些，而且内容也比较少，就是滴滴的一个活动的宣传，很明显的不太用心啊。</p>\n<h3 id=\"河北衡水中学720°全景图\"><a href=\"#河北衡水中学720°全景图\" class=\"headerlink\" title=\"河北衡水中学720°全景图\"></a><a href=\"http://720yun.com/t/7b9z011r08z?code=03101967458b0569d107870c89280a4H\" target=\"_blank\" rel=\"noopener\">河北衡水中学720°全景图</a></h3><p>衡中虽然占地面积比较小，但是每年产出的清北人数可以说在全国都是名列前茅的，而这个 720° 全景图相比之前魔兽和凡科的就差太多了，好希望有人能做一个比较细致的 720° 全景图啊- -</p>\n<h3 id=\"比尔盖茨邀请你加入群聊\"><a href=\"#比尔盖茨邀请你加入群聊\" class=\"headerlink\" title=\"比尔盖茨邀请你加入群聊\"></a><a href=\"http://m.creatby.com/v2/manage/book/rkcmfz/?weixin_auth_key=20180215100913870054844\" target=\"_blank\" rel=\"noopener\">比尔盖茨邀请你加入群聊</a></h3><p>需要在微信中打开，和上面的“王思聪邀请你加入群聊”类似，都是模仿微信进行宣传，同时加入了一些用户互动，最后重定向到了公众号中的一篇文章，其实这种形式是一种很好的宣传，值得借鉴</p>\n<h3 id=\"以你之名，守护汉字\"><a href=\"#以你之名，守护汉字\" class=\"headerlink\" title=\"以你之名，守护汉字\"></a><a href=\"http://shared.youdao.com/market/xmdh/163.html?d=1518660346820\" target=\"_blank\" rel=\"noopener\">以你之名，守护汉字</a></h3><p>网易有道做的“守护汉字”主题活动，根据你的姓名为你分配一个需要守护的古汉字，让我不禁想起了《国家宝藏》，不过不得不说，动画特效和 BGM 都很赞，在“提笔忘字”的今天，守护汉字显得尤为重要</p>\n<h3 id=\"快看！李彦宏父女跑进你的手机啦！\"><a href=\"#快看！李彦宏父女跑进你的手机啦！\" class=\"headerlink\" title=\"快看！李彦宏父女跑进你的手机啦！\"></a><a href=\"https://eopa.baidu.com/page/RV-gFZw4Ct7\" target=\"_blank\" rel=\"noopener\">快看！李彦宏父女跑进你的手机啦！</a></h3><p>虽然只是一个视频，技术上难度很低，不过这个视频做的很赞，百度通过这种形式宣传自己的“手机百度”，虽然对百度并无好感，不过如此用心的视频还是要赞一个</p>\n<h3 id=\"2017，谁是头条？\"><a href=\"#2017，谁是头条？\" class=\"headerlink\" title=\"2017，谁是头条？\"></a><a href=\"http://p.static.jimingkeji.com.cn/infini-first171208/index.html\" target=\"_blank\" rel=\"noopener\">2017，谁是头条？</a></h3><p>头条对于 2017 年度新闻的总结，水墨画与太极的结合很是中国风，文案处处体现着“中国功夫”的元素。</p>\n<h3 id=\"唐朝名媛高阶生活指南\"><a href=\"#唐朝名媛高阶生活指南\" class=\"headerlink\" title=\"唐朝名媛高阶生活指南\"></a><a href=\"http://wx.amo9.com/h5/2018/nov/cmcc10086/8/index.html?proj=cmcc10086&amp;\" target=\"_blank\" rel=\"noopener\">唐朝名媛高阶生活指南</a></h3><p>你不看到末尾不会想到，这是中国移动的广告。。。</p>\n<h3 id=\"二零一七年娱乐圈画传\"><a href=\"#二零一七年娱乐圈画传\" class=\"headerlink\" title=\"二零一七年娱乐圈画传\"></a><a href=\"http://ent.163.com/special/entphotos2017/?spssid=5892622e2f96d034a7931d06dd4b4dd0&amp;spsw=12&amp;spss=other&amp;from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">二零一七年娱乐圈画传</a></h3><p>去年的一个网易娱乐年度新闻盘点的 H5 页面非常的新颖，采用画中画的形式依次串联十多个手绘娱乐图片，加上洗脑的“好运来”音乐，让人有很大的分享的欲望。这里有一篇解密的文章：<a href=\"https://juejin.im/post/5bfbcb1e5188252e8966a298\" target=\"_blank\" rel=\"noopener\">《Canvas 实现画中画动画效果–网易娱乐年度盘点H5动画解密》</a></p>\n<h3 id=\"娱乐圈画传2018：江湖多离别-十年如一梦\"><a href=\"#娱乐圈画传2018：江湖多离别-十年如一梦\" class=\"headerlink\" title=\"娱乐圈画传2018：江湖多离别 十年如一梦\"></a><a href=\"http://h5.data.163.com/163/html/ent/entpainting2018/index.html?spssid=5892622e2f96d034a7931d06dd4b4dd0&amp;spsw=3&amp;spss=native\" target=\"_blank\" rel=\"noopener\">娱乐圈画传2018：江湖多离别 十年如一梦</a></h3><p>从 2008 到 2018，时间是世事更迭最好的导演。网易娱乐将娱乐圈画传做成了一个 IP，希望一直做下去吧。</p>\n<h3 id=\"她挣扎48小时后死去，无人知晓\"><a href=\"#她挣扎48小时后死去，无人知晓\" class=\"headerlink\" title=\"她挣扎48小时后死去，无人知晓\"></a><a href=\"https://c.m.163.com/nc/qa/activity/dada_protection/index.html?spssid=5892622e2f96d034a7931d06dd4b4dd0&amp;spsw=1&amp;spss=163\" target=\"_blank\" rel=\"noopener\">她挣扎48小时后死去，无人知晓</a></h3><p>副标题：《你也是这个故事的主角》，首先不要被这个标题所吓到，其实这是网易出品的一个号召大家关注环境保护的一个 H5，不得不说，网易在这个方面做的真的很出色。</p>\n<h3 id=\"制造【我】的草莓音乐节\"><a href=\"#制造【我】的草莓音乐节\" class=\"headerlink\" title=\"制造【我】的草莓音乐节\"></a><a href=\"http://wap.zhengzai.tv/pages/strawberry2018/index.html\" target=\"_blank\" rel=\"noopener\">制造【我】的草莓音乐节</a></h3><p>可以在线生成草莓音乐节主题海报，你可以定制自己的外形，并添加一些简单的文案。</p>\n<h3 id=\"重回1978，带你潇洒走一回！\"><a href=\"#重回1978，带你潇洒走一回！\" class=\"headerlink\" title=\"重回1978，带你潇洒走一回！\"></a><a href=\"http://omgmkt.qq.com/tencent_news/201811/reform/40year.8b3ec.html\" target=\"_blank\" rel=\"noopener\">重回1978，带你潇洒走一回！</a></h3><p>腾讯新闻出品的，结合重力感应带你回顾改革开放四十年来我们的变化，筒子楼、迪斯科、马里奥，这些具有十分明显的时代痕迹的符号代表了那一辈人的童年，就像标题一样，带你潇洒走一回！</p>\n<h3 id=\"当TiMi一声响起的时候\"><a href=\"#当TiMi一声响起的时候\" class=\"headerlink\" title=\"当TiMi一声响起的时候\"></a><a href=\"https://timi.qq.com/act/a20181212timi/index.html\" target=\"_blank\" rel=\"noopener\">当TiMi一声响起的时候</a></h3><p>天美工作室出品，这是属于我们十年的回忆，不止是王者荣耀</p>\n<h3 id=\"我在幸福长街40号等你\"><a href=\"#我在幸福长街40号等你\" class=\"headerlink\" title=\"我在幸福长街40号等你\"></a><a href=\"https://c.h5in.net/people/\" target=\"_blank\" rel=\"noopener\">我在幸福长街40号等你</a></h3><p>人民日报携手快手出品，这是一张“长动图”，见证了 1979-2019 这 40 年的沧桑巨变。</p>\n<h3 id=\"带你全方位欣赏美丽的重庆邮电大学\"><a href=\"#带你全方位欣赏美丽的重庆邮电大学\" class=\"headerlink\" title=\"带你全方位欣赏美丽的重庆邮电大学\"></a><a href=\"https://720yun.com/t/70c26xsgq1f\" target=\"_blank\" rel=\"noopener\">带你全方位欣赏美丽的重庆邮电大学</a></h3><p>重邮全景</p>\n<h2 id=\"一些专门做H5媒体内容的平台：\"><a href=\"#一些专门做H5媒体内容的平台：\" class=\"headerlink\" title=\"一些专门做H5媒体内容的平台：\"></a>一些专门做H5媒体内容的平台：</h2><h3 id=\"木疙瘩\"><a href=\"#木疙瘩\" class=\"headerlink\" title=\"木疙瘩\"></a><a href=\"http://www.mugeda.com\" target=\"_blank\" rel=\"noopener\">木疙瘩</a></h3><p>H5 交互融媒体内容制作与管理平台。首先吐槽一下这个名字，可能是因为只买到了这个稍微能凑出汉字的域名吧，毕竟现在的域名是真贵啊- -，其特色有：</p>\n<ul>\n<li>免费无广告</li>\n<li>零代码交互</li>\n<li>自动适配屏幕</li>\n<li>可导出源文件</li>\n</ul>\n<p>然而，人民日报的一篇题为《燃爆！人民日报首部闪卡H5动画“史上最牛团队这样创业！”》的 H5 文案却被删除了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_235.jpeg\" width=\"300\" alt=\"\"></div>\n\n<h3 id=\"凡科互动\"><a href=\"#凡科互动\" class=\"headerlink\" title=\"凡科互动\"></a><a href=\"http://hd.faisco.com/\" target=\"_blank\" rel=\"noopener\">凡科互动</a></h3><p>H5 游戏营销领导者。H5游戏因为其跨平台、传播快等特性，近年来受到了广泛关注，而凡科互动就是专注于 H5 游戏的一个平台，我自己也试玩了一下它的几款游戏，包括大转盘、摇一摇、砸金蛋等等，画面音效都很不错，不过应该不是免费的，所以还是要预估一下成本和收益再做决定吧。</p>\n<h3 id=\"720yun\"><a href=\"#720yun\" class=\"headerlink\" title=\"720yun\"></a><a href=\"http://720yun.com/\" target=\"_blank\" rel=\"noopener\">720yun</a></h3><p>从名字可以看出，这是一家做 720 度全景和 VR 视频的平台，首先这个网站的风格我很喜欢，非常紧致有力，不过名气不是很大，也不知道效果如何和收费情况。</p>\n<h3 id=\"MAKA\"><a href=\"#MAKA\" class=\"headerlink\" title=\"MAKA\"></a><a href=\"http://maka.im/\" target=\"_blank\" rel=\"noopener\">MAKA</a></h3><blockquote>\n<p>MAKA 是一款简单、强大的 H5 数字化营销创作工具 其在线编辑器可帮助企业创作出专业级 H5 酷炫动态效果</p>\n</blockquote>\n<p>这是其官网的介绍，MAKA 在业界算是很有名气的了，经常会看到一些企业用 MAKA 做 H5 宣传，所以其本身的效果是已经经过广泛验证的了，最关键的是免费制作（当然，有一些也需要收费），如果有感兴趣的童鞋可以下载一下 MAKA 的 APP 尝试一下，操作简单但是功能强大。</p>\n<h3 id=\"易企秀\"><a href=\"#易企秀\" class=\"headerlink\" title=\"易企秀\"></a><a href=\"http://www.eqxiu.com/\" target=\"_blank\" rel=\"noopener\">易企秀</a></h3><blockquote>\n<p>企业移动营销综合服务平台 极简制作流程 奢华呈现形式 精准投放保证传播效果 数据随时跟踪反馈 从营销到再营销 从传播到二次传播 易企秀提供一键解决方案</p>\n</blockquote>\n<p>易企秀和 MAKA 类似，也是我最开始接触到的 H5 营销平台，虽然其介绍感觉比 MAKA 要强大许多，不过从我自身的体验来讲，易企秀比较适合中小型企业以及那些不太追求外表，同时在线时间比较短的营销活动，比如年会邀请函、新品介绍等等。总之吧，和 MAKA 相比各有千秋。</p>\n<h2 id=\"它山之石\"><a href=\"#它山之石\" class=\"headerlink\" title=\"它山之石\"></a>它山之石</h2><p>还有一些志同道合的童鞋也对与H5的玩法案例进行了总结：</p>\n<h3 id=\"H5玩法知多少\"><a href=\"#H5玩法知多少\" class=\"headerlink\" title=\"H5玩法知多少\"></a><a href=\"https://www.jianshu.com/p/34987148c9d9\" target=\"_blank\" rel=\"noopener\">H5玩法知多少</a></h3><p>来自简书，作者不仅介绍了许许多多经典的 H5 案例，作者还将 H5 玩法归纳为<strong>基于传感器、基于触摸屏操作、基于画面呈现、基于内容</strong>这四类，内容很充实。</p>\n","raw":null,"categories":[{"name":"mobile","path":"api/categories/mobile.json"}],"tags":[{"name":"移动端","path":"api/tags/移动端.json"}]},{"title":"再见，2017","slug":"再见，2017","date":"2017-12-31T15:15:52.000Z","updated":"2019-02-04T13:27:44.353Z","comments":true,"path":"api/articles/再见，2017.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_236.jpeg","content":"<p>今天是2017年12月31号，也就是2017年的最后一天，一般有个人博客的人都会搞个总结神马的，那我也不能落后啊？！</p>\n<h2 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h2><p>2017 对于我来说，可以说是非常重要的一年，在这一年中我经历了很多，也度过了很多个难忘的夜晚，废话少说：</p>\n<h3 id=\"人\"><a href=\"#人\" class=\"headerlink\" title=\"人\"></a>人</h3><p>首先，2017 年最重要的当然是<strong>找到了第一份工作</strong>，在字节跳动遇到了很多有趣的同事，其实现在想想，我的秋招就这样以一场面试开始，以同样一场面试结束了。。 在这里不得不讲一下<strong>字节跳动</strong>的种种，这里的人都很 nice，上级并没有官架子，同事们也很有趣，当然这里的饭菜在互联网界也是非常出名的，每一餐都是 50+ 的水准，不得不说，一个好食堂真的能提高生产力~除此之外，每天中午吃完饭之后还能休息 1-2 个小时，这对于我这种不睡午觉一天就没精神的简直是超级福利。。说了这么多，如果有想来字节跳动工作的童鞋，欢迎联系我~ 2017 年对于所有的90后来说也是独特的一年，因为过了今天就意味着<strong>所有的90后都已满18岁</strong>，不再是当初那个叛逆的年纪了，所以在最近也看到了各种秀 18 岁的朋友圈，时光催人老，不服不行：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_236.jpeg\" width=\"400\" alt=\"\"></div>\n\n<p>这张照片是当初在衡中远足时拍的，应该在 2009 年，当时差不多 17 岁。<br>2017 年还是一个<strong>主播行业大热</strong>的年份，不得不说，我是看着冯提莫、二珂、大表姐、大奶强等主播逐渐成长起来的，可以说直播不仅让我吃外卖的时候不感觉无聊，同时让我学到了很多姿势，成为了我日常生活中不可缺少的一部分。</p>\n<h3 id=\"事\"><a href=\"#事\" class=\"headerlink\" title=\"事\"></a>事</h3><p>首先，这一年我的个人博客终于上线了。在经过一系列的折腾和 YueBug 的热情帮助下，<strong>Merrier说</strong>在今年 4 月份的时候上线了，虽然我的水平有限，不能像其他前端大牛一样对各种新鲜技术进行讲解，或对一些框架的源码进行解读，但是我始终相信，基础知识才是最重要的，所以如果你也入了前端的坑，那么 Merrier说 一定能让你学到一些东西~ 2017 年不得不提一下<strong>共享单车</strong>这个行业，从最初的 ofo，到后来的各种单车，再到现在的 ofo 和摩拜平分天下的形势，可以说我们都成为了共享单车行业的见证人，同时也让我们看到了为什么<strong>创业需谨慎</strong>，提到共享单车，就联想到了我至今还没有追回的 99 大洋押金：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_234.jpeg\" width=\"300\" alt=\"\"></div>\n\n<p>当然，如果让我在 ofo 和摩拜中选一个，我站摩拜（新摩拜简直好骑到爆）！ 不知道什么时候，本命年的梗深受人心，不过对于我来说，2017 年可以说是收获的一年，不仅在前端方面找到了自己喜爱的学习方式，同时在工作上也有了自己满意的结果，当然希望看到这里的有缘人不管 2017 年过得如何，在 2018 年都能如自己所愿。</p>\n<h2 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h2><p>展望一下2018的话，希望能够：</p>\n<ul>\n<li>在工作上取得突破，不管是前端技术还是为人处事都能再进一步</li>\n<li>说了好几年的健身应该能付诸行动了吧？</li>\n<li>多看几部纪录片</li>\n<li>把漫威DC的电影都看一遍</li>\n<li>Leetcode 再刷 200 道题</li>\n<li>Merrier说 能够再多一些干货文章</li>\n<li>完成一个 chrome 插件</li>\n<li>向 npm 库提交一个自己做的插件</li>\n<li>小程序可以玩一玩</li>\n<li>一直想做的图片上传和展示网站能落地</li>\n<li><strong>顺利毕业！</strong></li>\n<li><strong>摇到号！</strong></li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>你以为完了？并没有！以一张网图作为结束吧：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_233.jpeg\" width=\"300\" alt=\"\"></div>\n\n<p>愿你走出半生，归来仍是少年。</p>\n","raw":null,"categories":[{"name":"talk","path":"api/categories/talk.json"}],"tags":[{"name":"life","path":"api/tags/life.json"},{"name":"总结","path":"api/tags/总结.json"}]},{"title":"Blue老师ES6视频笔记","slug":"Blue老师ES6视频笔记","date":"2017-12-12T14:10:42.000Z","updated":"2019-02-04T13:27:44.345Z","comments":true,"path":"api/articles/Blue老师ES6视频笔记.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>请容许我吐槽一下，我发现中国很多前端的大神的英文真的差啊。。</p>\n<h2 id=\"ES6-兼容性\"><a href=\"#ES6-兼容性\" class=\"headerlink\" title=\"ES6 兼容性\"></a>ES6 兼容性</h2><p>可以在线查看兼容性：</p>\n<ul>\n<li>ES5：<a href=\"https://kangax.github.io/compat-table/es5/\" target=\"_blank\" rel=\"noopener\">kangax.github.io/compat-table/es5/</a></li>\n<li>ES6：<a href=\"https://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"noopener\">kangax.github.io/compat-table/es6/</a></li>\n</ul>\n<h3 id=\"在线编译\"><a href=\"#在线编译\" class=\"headerlink\" title=\"在线编译\"></a>在线编译</h3><p><strong>babel === browser.js</strong>，只不过叫法不同 可以通过如下方式实现在线编译 ES6，只不过会多出额外的编译时间，用户体验稍差：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"browser.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> a = <span class=\"number\">12</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> b = <span class=\"number\">5</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    alert(a+b);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"ES5-中-var-的缺点：\"><a href=\"#ES5-中-var-的缺点：\" class=\"headerlink\" title=\"ES5 中 var 的缺点：\"></a>ES5 中 var 的缺点：</h3><ul>\n<li>可以重复声明</li>\n<li>无法限制修改，即没有常量的概念</li>\n<li>没有块级作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">12</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert a; <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"块级作用域有什么用？\"><a href=\"#块级作用域有什么用？\" class=\"headerlink\" title=\"块级作用域有什么用？\"></a>块级作用域有什么用？</h3><p>可以限定变量在块中起作用，而不像ES5一样在函数块中起作用，最常见的是 for 循环中的索引值</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><ol>\n<li>如果只有一个参数，()可以省略</li>\n<li>如果只有一个 return，{}可以省略</li>\n</ol>\n<h2 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h2><p>ES6新增：</p>\n<h3 id=\"参数扩展（…args必须为最后一个形参）\"><a href=\"#参数扩展（…args必须为最后一个形参）\" class=\"headerlink\" title=\"参数扩展（…args必须为最后一个形参）\"></a>参数扩展（…args必须为最后一个形参）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">a, b, ...args</span>)</span>&#123;</span><br><span class=\"line\">  alert(a);</span><br><span class=\"line\">  alert(b);</span><br><span class=\"line\">  alert(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">show(<span class=\"number\">12</span>, <span class=\"number\">15</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"展开一个数组\"><a href=\"#展开一个数组\" class=\"headerlink\" title=\"展开一个数组\"></a>展开一个数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = \\[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>\\];</span><br><span class=\"line\">\\[...arr\\] = \\[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>\\];</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">a, b=<span class=\"number\">5</span>, c=<span class=\"number\">12</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> \\[a, b, c\\] = \\[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>\\]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> \\[&#123;a, b&#125;, \\[n1, n2, n3\\], num, str\\] = \\[&#123;<span class=\"attr\">a</span>: <span class=\"number\">12</span>, <span class=\"attr\">b</span>: <span class=\"number\">5</span>&#125;, \\[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>\\], <span class=\"number\">8</span>, <span class=\"string\">'cxzcv'</span>\\];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, n1, n2, n3, num, str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> \\[a, b\\] = &#123;<span class=\"attr\">a</span>: <span class=\"number\">12</span>, <span class=\"attr\">b</span>: <span class=\"number\">45</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b); <span class=\"comment\">// undefined is not a function, 前提1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a, b&#125; = &#123;<span class=\"number\">12</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b); <span class=\"comment\">// unexpected token, 前提2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> \\[a, b\\];</span><br><span class=\"line\">\\[a, b\\] = \\[<span class=\"number\">12</span>, <span class=\"number\">5</span>\\]; <span class=\"comment\">// XXXX error, 前提3</span></span><br></pre></td></tr></table></figure>\n<p>前提：</p>\n<ol>\n<li>左右两边解构必须一样</li>\n<li>右边必须是个东西</li>\n<li>声明和赋值不能分开（必须在一句话中完成）</li>\n</ol>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>新增四个方法：</p>\n<ul>\n<li>map：映射</li>\n<li>reduce：汇总</li>\n<li>filter：过滤器</li>\n<li>forEach：循环（迭代）</li>\n</ul>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = \\[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>\\];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result); <span class=\"comment\">// 24, 10, 16</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>经常用来算总数、平均数等指标</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = \\[<span class=\"number\">12</span>, <span class=\"number\">69</span>, <span class=\"number\">180</span>, <span class=\"number\">8763</span>\\];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tmp, item, index</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tmp + item;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result);</span><br></pre></td></tr></table></figure>\n<p>求平均数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = \\[<span class=\"number\">12</span>, <span class=\"number\">69</span>, <span class=\"number\">180</span>, <span class=\"number\">8763</span>\\];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.reduce(<span class=\"function\">(<span class=\"params\">tmp, item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index != arr.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp+item;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (tmp+item)/arr.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alert(result);</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>filter 中 return true 就留下来，return false 就不保留</p>\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><p>类似于传统的 for 循环，参数为 item, index</p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>新增：</p>\n<ol>\n<li>多了两个新方法，startsWith，endsWith</li>\n<li>字符串模板</li>\n</ol>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><p>普通字符串无法折行，字符串模板可以折行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = \\<span class=\"string\">`a<span class=\"subst\">$&#123;a&#125;</span>bc\\`;</span></span><br><span class=\"line\"><span class=\"string\">alert(str); // a12bc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>ES5 中的面向对象：类和构造函数不分，混为一谈；ES6 中的面向对象：</p>\n<ol>\n<li>class 关键字，构造器和类分开了</li>\n<li>class 里面直接加方法</li>\n<li>extends-继承</li>\n</ol>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>json 的标准写法：</p>\n<ol>\n<li>只能用双引号</li>\n<li>所有的名字（key）都必须用引号包起来</li>\n</ol>\n<p>在 ES 中，当名字和值相同时，可以只写其中一个；方法可以省掉: function</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>异步会让代码更复杂，而同步的代码简单，而 Promise 用同步的方式来书写异步代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'arr.txt'</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">    success(arr)&#123;</span><br><span class=\"line\">      resolve(arr);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error(err)&#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'成功'</span>)&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'失败'</span>)&#125;);</span><br></pre></td></tr></table></figure>\n<p>Promise.all([promise1, promise2, …]) =&gt; 都 resolve 的时候才算成功，只要有一个 reject 就算失败<br>Promise.\brace([promise1, promise2, …]) =&gt; 只要有一个 resolve 的时候就算成功，全部 reject 才算失败 在高版本 jQuery 中，$.ajax 的返回值就是一个 Promise 对象</p>\n<h2 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h2><p>和普通函数相比，中间能暂停，需要和 yield 配合使用 generator 并不会直接执行，而是会创建一个 generator 对象，其中该对象的 next 方法用于继续执行，碰到 yield 就会停</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  alert(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> genObj = show();</span><br><span class=\"line\">genObj.next(); <span class=\"comment\">// a</span></span><br><span class=\"line\">genObj.next(); <span class=\"comment\">// b</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>yield 既可以传参，又可以返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">show</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">`<span class=\"subst\">$&#123;num1&#125;</span>, <span class=\"subst\">$&#123;num2&#125;</span>`</span>);</span><br><span class=\"line\">  alert(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  alert(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  alert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> gen = show(<span class=\"number\">99</span>, <span class=\"number\">88</span>);</span><br><span class=\"line\">gen.next(<span class=\"number\">12</span>); <span class=\"comment\">// 第一个next没法给yield传参</span></span><br><span class=\"line\">gen.next(<span class=\"number\">5</span>); <span class=\"comment\">// 会传给上面的yield，所以a=5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-的局限性\"><a href=\"#Promise-的局限性\" class=\"headerlink\" title=\"Promise 的局限性\"></a>Promise 的局限性</h3><p>其实 generator 之所以出现也是因为纯 Promise 也有其自身的缺陷，并不能完全避免“回调陷阱”，而网上对于 Promise 的局限性解释很多，建议大家直接去看相关博客就可以了，而在我理解就是<strong>Promise 在解决数据依赖问题时避免不了“回调陷阱”</strong>，比如我需要根据数据 A 去请求数据 B，然后再根据数据 B 请求数据 C，然后再……，如果你自己用 Promis e实现一下的话就会发现这时候它的局限性所在；这也再一次证明了那句话：<strong>懒惰是最大生产力</strong></p>\n<h2 id=\"ES7-预览\"><a href=\"#ES7-预览\" class=\"headerlink\" title=\"ES7 预览\"></a>ES7 预览</h2><p>ES6 还没掌握，ES7 都定稿了。。ES8 都有草案了。。，不过现在浏览器对 ES7 的支持很惨</p>\n<ul>\n<li>数组 includes -&gt; 检查数组是否包含某元素</li>\n<li>数组 keys/values/entries -&gt; 一般配合 for…of 使用，for…of 即对 value 的循环，entries 是对键值对的循环</li>\n<li>求幂新操作符 -&gt; 3**8 === Math.pow(3, 8)</li>\n<li>字符串的 padStart/padEnd 方法 -&gt; 补充空格或其他字符串</li>\n<li>增加了函数容忍度 function show(a, b, c, ) -&gt; 不报错</li>\n<li>async 和 await，这基本上是 ES7 最好用的。。用于替代 generator 和 yield</li>\n<li>……</li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"ES6","path":"api/tags/ES6.json"},{"name":"笔记","path":"api/tags/笔记.json"}]},{"title":"Hybrid设计与浅析","slug":"Hybrid设计与浅析","date":"2017-12-01T14:19:00.000Z","updated":"2019-02-04T13:27:44.349Z","comments":true,"path":"api/articles/Hybrid设计与浅析.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_288.png","content":"<p>慕课网视频——<a href=\"https://www.imooc.com/learn/850\" target=\"_blank\" rel=\"noopener\">Hybrid设计</a>的学习笔记，同时加入了一些自己的理解，希望通过本篇文章能够让你理解什么是 Hybrid，以及 Hybrid 有什么特点，同时还会简单介绍一下 Hybrid 开发时的注意事项。</p>\n<h2 id=\"什么是-Hybrid\"><a href=\"#什么是-Hybrid\" class=\"headerlink\" title=\"什么是 Hybrid\"></a>什么是 Hybrid</h2><p>Hybrid 和普通前端代码没差别，只不过宿主不一样，Hybrid 就是在 app 中运行的前端代码。</p>\n<h2 id=\"业内的-Hybrid-App\"><a href=\"#业内的-Hybrid-App\" class=\"headerlink\" title=\"业内的 Hybrid App\"></a>业内的 Hybrid App</h2><ul>\n<li>携程</li>\n<li>百度糯米</li>\n<li>京东</li>\n<li>天猫</li>\n<li>微信</li>\n<li>QQ</li>\n<li>手机百度</li>\n<li>支付宝</li>\n</ul>\n<h3 id=\"一般地，APP-开发方式有以下几种方式：\"><a href=\"#一般地，APP-开发方式有以下几种方式：\" class=\"headerlink\" title=\"一般地，APP 开发方式有以下几种方式：\"></a>一般地，APP 开发方式有以下几种方式：</h3><ol>\n<li>Web App（浏览器网页）</li>\n<li>Native App（原生app）</li>\n<li>Hybrid App（ H5 混合app）</li>\n<li>超级Hybrid（React Native、Weex）</li>\n<li>微信/支付宝小程序（或内嵌页面）</li>\n</ol>\n<h2 id=\"Hybrid-相比-Native-和纯-Html5-的优缺点\"><a href=\"#Hybrid-相比-Native-和纯-Html5-的优缺点\" class=\"headerlink\" title=\"Hybrid 相比 Native 和纯 Html5 的优缺点\"></a>Hybrid 相比 Native 和纯 Html5 的优缺点</h2><div align=\"center\"><img src=\"/images/hexo_post_288.png\" alt=\"\"></div>\n\n<h2 id=\"Native-与-H5-的职责\"><a href=\"#Native-与-H5-的职责\" class=\"headerlink\" title=\"Native 与 H5 的职责\"></a>Native 与 H5 的职责</h2><ul>\n<li>H5 做业务</li>\n<li>Native 提供基础能力</li>\n<li>Native 做好必须 Native 做的业务</li>\n</ul>\n<h2 id=\"H5-与-Native-通信\"><a href=\"#H5-与-Native-通信\" class=\"headerlink\" title=\"H5 与 Native 通信\"></a>H5 与 Native 通信</h2><h3 id=\"JavascriptCore\"><a href=\"#JavascriptCore\" class=\"headerlink\" title=\"JavascriptCore\"></a>JavascriptCore</h3><p>和 JS Bridge 类似</p>\n<div align=\"center\"><img src=\"/images/hexo_post_104.png\" alt=\"\"></div>\n\n<h2 id=\"通过-URL-Schema-通信\"><a href=\"#通过-URL-Schema-通信\" class=\"headerlink\" title=\"通过 URL Schema 通信\"></a>通过 URL Schema 通信</h2><h3 id=\"App-主动与-H5-通信\"><a href=\"#App-主动与-H5-通信\" class=\"headerlink\" title=\"App 主动与 H5 通信\"></a>App 主动与 H5 通信</h3><div align=\"center\"><img src=\"/images/hexo_post_88.png\" alt=\"\"></div>\n\n<p>将一组 API 绑定在 webview 的 window 对象上，App 通过 iOS/Android 原生方法调用 window 对象中的 js 方法</p>\n<h3 id=\"H5-主动与-App-通信\"><a href=\"#H5-主动与-App-通信\" class=\"headerlink\" title=\"H5 主动与 App 通信\"></a>H5 主动与 App 通信</h3><div align=\"center\"><img src=\"/images/hexo_post_105.png\" alt=\"\"></div>\n\n<p>App 实现对 WebView URL 的观察者模式，H5 通过改变 URL 的哈希值，App 会通过解析哈希值的变化执行对应的操作</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"Hybrid","path":"api/tags/Hybrid.json"},{"name":"慕课网","path":"api/tags/慕课网.json"}]},{"title":"浅谈搜索引擎（SEO）","slug":"浅谈搜索引擎（SEO）","date":"2017-11-30T14:47:40.000Z","updated":"2019-02-04T13:27:44.357Z","comments":true,"path":"api/articles/浅谈搜索引擎（SEO）.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这是一篇视频笔记，最近看了幕课网上的视频——<a href=\"https://www.imooc.com/learn/855\" target=\"_blank\" rel=\"noopener\">浅谈搜索引擎_SEO</a>，同时结合了之前有位公司的同事分享的关于 SEO 的一些内容，可以说是基本上包含了 SEO 的全部内容了~</p>\n<h2 id=\"SEO-与-SEM-的区别\"><a href=\"#SEO-与-SEM-的区别\" class=\"headerlink\" title=\"SEO 与 SEM 的区别\"></a>SEO 与 SEM 的区别</h2><p>SEO：Search Engine Optimization，搜索引擎优化，SEM：Search Engine Marketing，搜索引擎营销，因为价钱越高排名越靠前，所以也可以称为搜索引擎竞价</p>\n<ul>\n<li>SEO 免费，SEM 付费</li>\n<li>SEM 短，效益快、SEO 长期投入，增长慢</li>\n<li>新广告法颁布之后 SEM 广告位减少、竞争压力大</li>\n</ul>\n<h2 id=\"IP、PV、UV\"><a href=\"#IP、PV、UV\" class=\"headerlink\" title=\"IP、PV、UV\"></a>IP、PV、UV</h2><ul>\n<li><strong>IP</strong>：独立IP访问的用户</li>\n<li><strong>PV</strong>：页面浏览量或点击量</li>\n<li><strong>UV</strong>：独立访客数</li>\n</ul>\n<p>搜索引擎占有率工具：statcounter</p>\n<h2 id=\"SEO-的三个大方向\"><a href=\"#SEO-的三个大方向\" class=\"headerlink\" title=\"SEO 的三个大方向\"></a>SEO 的三个大方向</h2><ol>\n<li>优化网站的内容</li>\n<li>提升用户体验，吸引更多流量</li>\n<li>优化网站结构，帮助搜索引擎抓取</li>\n</ol>\n<p>虽然搜索引擎的算法，网站的技术不断更新，但是 SEO 的三个大的方向从未变过</p>\n<h2 id=\"SEO-优化最重要的三要素\"><a href=\"#SEO-优化最重要的三要素\" class=\"headerlink\" title=\"SEO 优化最重要的三要素\"></a>SEO 优化最重要的三要素</h2><ul>\n<li>标题（title，一般格式为内容-关键词-品牌词）</li>\n<li>关键词（keywords，一般不超过 100 个字符）</li>\n<li>描述（description，50-170 个字）</li>\n</ul>\n<p><code>title</code>:一般会作为搜索结果的标题中，<code>description</code>:可能会被引用为搜索结果，也可能不会，<code>keyowrds</code>:由于很多网站无法准确提取关键词，一些网站恶意堆砌关键词，关键词的重要性已经在降低。</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><h3 id=\"内链\"><a href=\"#内链\" class=\"headerlink\" title=\"内链\"></a>内链</h3><ul>\n<li>提升网站内部页面抓取率</li>\n<li>优化本站、提高流量</li>\n</ul>\n<p>经典的内链网站为百度百科</p>\n<h3 id=\"外链\"><a href=\"#外链\" class=\"headerlink\" title=\"外链\"></a>外链</h3><p>外链是指网站与网站之间的链接向导，外链是提升权重的方式，互联网是链接与链接实现的一条网络，灌水式外链会让人头疼</p>\n<h2 id=\"友情链接交换注意事项\"><a href=\"#友情链接交换注意事项\" class=\"headerlink\" title=\"友情链接交换注意事项\"></a>友情链接交换注意事项</h2><p>和内容相近的网站交换 链接交换形式多样</p>\n<ul>\n<li>单向链接：别人指向我或者我指向别人，而对方不指过来</li>\n<li>双向链接：网站与网站之间互相交换链接</li>\n</ul>\n<h2 id=\"SEO建议\"><a href=\"#SEO建议\" class=\"headerlink\" title=\"SEO建议\"></a>SEO建议</h2><ul>\n<li>经常更新</li>\n<li>质量</li>\n<li>原创</li>\n<li>关键词密度（2%~8%）</li>\n<li>图文并茂</li>\n</ul>\n<h2 id=\"和SEO相关的HTML标签\"><a href=\"#和SEO相关的HTML标签\" class=\"headerlink\" title=\"和SEO相关的HTML标签\"></a>和SEO相关的HTML标签</h2><h3 id=\"a-标签中的-nofollow\"><a href=\"#a-标签中的-nofollow\" class=\"headerlink\" title=\"a 标签中的 nofollow\"></a>a 标签中的 nofollow</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"nofollow\"</span>&gt;</span>链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作用：使链接指向的页面不影响本页权重，但不能保证搜索引擎不抓取，使用时机：</p>\n<ul>\n<li>搜索引擎不需要抓取的页面，如登录、注册、付费等；</li>\n<li>对页面没有正向权重的页面，如了解更多；</li>\n<li>页面中的重复链接。</li>\n</ul>\n<h3 id=\"meta-中-robots-设置\"><a href=\"#meta-中-robots-设置\" class=\"headerlink\" title=\"meta 中 robots 设置\"></a>meta 中 robots 设置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>noindex：不要索引此页面</li>\n<li>nofollow：不要关注此页面的链接</li>\n<li>noatchive：不要保存网页快照</li>\n<li>nosnippet：不要此页面的描述</li>\n</ul>\n<p>目前不是所有的搜索引擎都支持 robots，即使支持，也不是所有的字段都会遵守。</p>\n<h2 id=\"避免过度-SEO\"><a href=\"#避免过度-SEO\" class=\"headerlink\" title=\"避免过度 SEO\"></a>避免过度 SEO</h2><h3 id=\"不要尝试欺骗搜索引擎\"><a href=\"#不要尝试欺骗搜索引擎\" class=\"headerlink\" title=\"不要尝试欺骗搜索引擎\"></a>不要尝试欺骗搜索引擎</h3><ul>\n<li>采用图片遮盖、透明度等方式隐藏文字</li>\n<li>关键词、标题、描述和内容不符</li>\n</ul>\n<h3 id=\"避免抄袭\"><a href=\"#避免抄袭\" class=\"headerlink\" title=\"避免抄袭\"></a>避免抄袭</h3><ul>\n<li>避免机器采集</li>\n<li>有技巧的借鉴</li>\n</ul>\n<h3 id=\"购买外链，恶意交换友情链接\"><a href=\"#购买外链，恶意交换友情链接\" class=\"headerlink\" title=\"购买外链，恶意交换友情链接\"></a>购买外链，恶意交换友情链接</h3><ul>\n<li>保证适量的外链和友情链接</li>\n<li>不购买被百度惩罚了的网站的外链</li>\n</ul>\n<h3 id=\"移动端强引导下载\"><a href=\"#移动端强引导下载\" class=\"headerlink\" title=\"移动端强引导下载\"></a>移动端强引导下载</h3><p><code>冰心算法</code>是专门用来打击移动端的强引导下载。不下载 app 就无法阅读网页全部内容被百度认为是最严重影响用户体验的行为</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>《SEO实战密码》——堪称 SEO 必读书籍</li>\n<li>seoWhy——关于 seo 的一个论坛</li>\n<li>cnzz、百度统计、谷歌统计——流量统计网站</li>\n</ul>\n<p>本博客用的就是 cnzz，因为流量比较小，所以看不出来和百度统计、谷歌统计比有哪些好处，而且这三家统计网站好像统计的标准都不相同，所以最好的方案就是放三套统计代码。。</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"慕课网","path":"api/tags/慕课网.json"},{"name":"SEO","path":"api/tags/SEO.json"}]},{"title":"是时候为网易云音乐的评论打call了","slug":"是时候为网易云音乐的评论打call了","date":"2017-11-07T08:37:46.000Z","updated":"2019-02-04T13:27:44.357Z","comments":true,"path":"api/articles/是时候为网易云音乐的评论打call了.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_232.jpeg","content":"<p>如果你问我，用的最频繁的软件是什么？我的回答不会是微信 or QQ ，而是<strong>网易云音乐</strong>！是的，虽然从研究生开始才入了网易云音乐的坑，但是入了坑才发现之前的音乐播放器都是什么鬼东西啊我的天！而更吸引我的是网易云音乐的评论，一个纯粹的音乐软件竟然把评论系统做的如此有声有色实属不易；所以，是时候为网易云音乐的评论打 call 了！</p>\n<h2 id=\"一生所爱（卢冠廷版）\"><a href=\"#一生所爱（卢冠廷版）\" class=\"headerlink\" title=\"一生所爱（卢冠廷版）\"></a>一生所爱（卢冠廷版）</h2><p>第一首给我最爱的《一生所爱》，最爱的电影《大话西游》和最喜欢的导演星爷</p>\n<ul>\n<li>不戴金箍，如何救你；戴了金箍，如何爱你。</li>\n<li>白晶晶爱的是孙悟空，爱白晶晶的是至尊宝，紫霞爱的是至尊宝，爱紫霞的是孙悟空，你以为是同一个人，其实已经相隔 500 年。</li>\n<li>95 版此恨绵绵无绝期，15版曾经沧海难为水，时移、事易，不同心境而已。无悔，都是自己的回忆。有回忆，还是好的。有怨，还是未能免俗。世俗了，我能理解，不接受。</li>\n<li>《大话西游》的结尾有句话，“你看那个人，好奇怪哟，象一条狗”。像条狗的人，是放弃了人间的男女情欢，无欲无念兢兢业业走在西天取经路上的至尊宝。他如你我这般，收起了脾气火气不再任性淘气，只顾奔波职场。人生百年，谁不曾大闹天宫，谁不曾头上紧箍，谁不曾爱上层楼，谁不曾孤单上路。</li>\n</ul>\n<h2 id=\"一生所爱（莫文蔚版）\"><a href=\"#一生所爱（莫文蔚版）\" class=\"headerlink\" title=\"一生所爱（莫文蔚版）\"></a>一生所爱（莫文蔚版）</h2><p>莫文蔚在天籁之战第八期上的翻唱版本，就像评论说的“兜兜转转，最终没有得到孙悟空的白晶晶又唱起了一生所爱，我想没有人会比她更适合翻唱这首歌了。”</p>\n<ul>\n<li>想要救紫霞就必须打败牛魔王，想要打败牛魔王就必须要变成孙悟空，想要变成孙悟空就必须忘掉七情六欲从此不能再有半点沾染。人生就是这样：想自由地和心爱之人在一起必须要事业有成，想要事业有成就必须要抛弃天真戴上面具，当你变得有能力给心爱之人一切时，却发现找不回最初的自己亦失去了爱的能力。</li>\n<li>白晶晶和紫霞都找到了如意郎君，只有至尊宝沉迷在“大话西游”的世界出不来。</li>\n<li>“昨晚你念晶晶的名字98次，哦，晶晶是我的娘子，还有个叫紫霞的你念了784次，啊，这紫霞一定欠你很多钱。”之前以为这句台词只是为了搞笑</li>\n<li>知乎上有个提问：为何我年龄越大，看周星驰的电影就越心酸？点赞数最高的答案结尾写道：究其原因，我们都变成了我们当初讨厌的模样。</li>\n<li>“从此相逢，便是路人”——一致《一生所爱》</li>\n<li>孟婆汤是否分六口，一口出世甜、二口叛逆辣、三口珍惜酸、四口情责苦、五口身心麻，最后一口却为白水，淡了口中味，忘了前尘事，泯了爱恩仇，舒了川字眉</li>\n<li>每个男人都想当至尊宝有梦想的日子，简单快乐，却不得不戴上紧箍咒，变成齐天大圣，但你会失去很多，生活就是紧箍咒，社会就是牛魔王，父母就是唐僧，紫霞就是梦想，可是你却活的像条狗</li>\n</ul>\n<h2 id=\"I-Wanna-Fuck-You\"><a href=\"#I-Wanna-Fuck-You\" class=\"headerlink\" title=\"I Wanna Fuck You\"></a>I Wanna Fuck You</h2><p>额。。我英语不好。。</p>\n<ul>\n<li>想草就直说，别披着爱情的虚伪</li>\n<li>看到歌名我沉默了，我想了很久，还是同意了，来吧，阿肯，如果你不介意我是个男的话</li>\n<li>有时候你想约个炮，却不小心谈了场恋爱；有时候你想好好谈个恋爱，却发现只是约了个炮。世界那么大，床却那么小，床上的两个人曾经那么好，却不能一起携手到老。我喜欢牵了手就能成婚的故事，却活在了一个上了床也没有结果的时代。</li>\n</ul>\n<h2 id=\"隔烟水（Cover-晃儿）\"><a href=\"#隔烟水（Cover-晃儿）\" class=\"headerlink\" title=\"隔烟水（Cover 晃儿）\"></a>隔烟水（Cover 晃儿）</h2><p>歌手：暖阳/特曼，之前一直看不起古风类的歌曲，后来发现有些古风歌曲不管是词还是曲都还是蛮不错的。。</p>\n<ul>\n<li>爹爹给我的基因也就只有美貌了</li>\n<li>我只剩一百块了 我还是愿意花三十块钱打个车去找你 六十块钱买两张电影票再花八块钱给你买两杯奶茶 剩下两块钱自己坐公交车到银行 提三百万明天我们一起花</li>\n<li>总有一天，你会碰到这样一个女孩，她温柔体贴，漂亮大方，不嫌你穷，不嫌你丑，不要你的钱，也不要你的车，也不要你。</li>\n</ul>\n<h2 id=\"Strength-Of-A-Thousand-Men\"><a href=\"#Strength-Of-A-Thousand-Men\" class=\"headerlink\" title=\"Strength Of A Thousand Men\"></a>Strength Of A Thousand Men</h2><p>自从听了几首纯音乐之后，日推就再也没有词了。。</p>\n<ul>\n<li>尼玛 送快递 听这些音乐 感觉自己在护送核弹</li>\n<li>别让 isis 看到这个歌单。。。</li>\n<li>我要把中国的雾霾全吸干净 不要拦着我</li>\n<li>借我三千虎骑，复我浩荡中华！ 饮马恒河畔，剑指天山西； 碎叶城揽月，库叶岛赏雪； 黑海之滨垂钓，贝加尔湖张弓； 中南半岛访古，东京废墟遥祭华夏列祖。 汉旗指处，望尘逃遁——敢犯中华天威者、虽远必诛;</li>\n<li>爸妈，对不起，原谅我的不辞而别。我只是在床上听了这首音乐，感觉地球有灾难了，我必须站出来了！</li>\n<li>扶朕起来！朕还能再刷几十道高数！！</li>\n</ul>\n<h2 id=\"步戏\"><a href=\"#步戏\" class=\"headerlink\" title=\"步戏\"></a>步戏</h2><p>歌手：五音Jw</p>\n<ul>\n<li>我此生遇到过三个戏子，第一个哥哥演绎的程蝶衣，一生戏痴，第二个二月红，以情入戏，第三个解语花，红妆倾城，从此入了戏，世间有朵解语花，凭谁解花语 这三个中有两个在三叔笔下 他们都有血有肉 对于我来说已经不只是一个书中的角色那么简单了 我本是听书人 奈何入戏太深——典狱司</li>\n<li>讲真的，哪一天这歌很火了，他们就开始疯狂的刷评论，而我们这些老一辈的评论就有很重要的历史意义了，是我们帮他们打下江山，那时候我们早开始新的旅程了，而他们还刚开始。不知过了多久，他们便会发现，哪里都有我们的足迹</li>\n<li>这么多年，他硬是将这身粉色穿出了杀气。</li>\n<li>当这个歌没火的时候评论多半在说第几第几 坐等火 不火没道理之类的 火了之后人们才开始说歌词和故事 而没有故事的万年单身狗只能凭借一腔喜欢刷评论 简单而执着</li>\n<li>瞎子无眼，却道破天机。 哑巴无言，却生死不弃。 戏子无情，却缘定倾心。 天真无邪，却阴谋算尽。</li>\n<li>一身是血的他笑着嘲笑吴邪太天真，告诉他倒斗界里有规矩，不管同伴是谁都要先保自己，却忘了是谁一身伤仍披着沉重的盔甲，忍受着头发钻进伤口的痛苦，一步一步把吴邪带出山洞；忘了是谁还未了解计划的全部，就为了吴邪铤而走险，与强大的对手搏斗。他叫解雨臣，有着世界上最冰冷的温柔。</li>\n</ul>\n<h2 id=\"九九八十一-piano-ver\"><a href=\"#九九八十一-piano-ver\" class=\"headerlink\" title=\"九九八十一 piano ver.\"></a>九九八十一 piano ver.</h2><p>评论的各位大佬真的是 666</p>\n<ul>\n<li>“何谓孤寂？”“清风、艳日，无笑意。”“可否具体？”“左拥、右抱，无情欲。”“可否再具体？”“不得你。”</li>\n<li>“何谓思服？”“巧笑、含睇、山阿盼。”“可否具体？”“琴瑟、钟鼓、寤寐求。”“可否再具体？”“不见你。”</li>\n<li>“何谓无医？” “灵丹、妙药、救不急。”“可否具体”“华佗、仲景、摇头不语。”“可否再具体？”“思你成疾”</li>\n<li>“何谓绝色？”“长空，落日，江山雪。”“可否具体？”“青冥，残霞，天水一线。”“可否再具体？”“不如你”</li>\n<li>“何谓颓靡？” “功名、利禄、皆无趣。”“可否具体”“山珍、糟粕、食之如一。”“可否再具体？”“让我忘了你”</li>\n<li>“何谓遗世？”“流放，独立，无踪迹。”“可否具体？”“无情，冷梦，旧不记。”“可否再具体？”“他已弃。”</li>\n<li>“何谓怠惰?”“无痛，无痒，心惆怅”“可否具体”“淡欲，浅望，双眼迷离”“可否再具体”“心在轮回道”</li>\n<li>“何谓痴情？”“相思泪、千杯酒，是否再遇。”“可否具体？”“足荆棘、手玫瑰，只博一笑。”“可否再具体？”“爱上你。”</li>\n<li>“何为漂泊？”“飞蓬，飘萍，无根底。”“可否具体？”“只鹤，孤雁，寒塘独下迟。”“可否再具体？”“南游，东出，客愁，旅思，离乡千万里。”“可否更具体？”“春行，秋度，杳杳无归期。”“仍是不解。”“浪迹云游，何处寻你。”</li>\n<li>“何谓分裂？”“喜孤、厌闹、渴关注。”“可否具体？”“古风、电音、蒸汽波。”“可否再具体？”“欲卸网易却不舍。”</li>\n</ul>\n<h2 id=\"天空之城\"><a href=\"#天空之城\" class=\"headerlink\" title=\"天空之城\"></a>天空之城</h2><p>歌手：李志，其实蒋敦豪版本也不错。。</p>\n<ul>\n<li>有次校园广播，一哥们说点一首天空之城送给他的港岛妹妹，于是响起了经典的久石让</li>\n<li>这个高冷的人，关闭了微博评论，舞台上他很少话就一直唱啊唱，一曲又一曲，曲曲都肆意。起初不以为意，听久了才发现他是一个经得起单曲循环的歌者。</li>\n<li>从今天起朝九晚五，早起早睡，作息规律，有法定休假，有保险，福利，有体面的工作，有规划有书有音乐，终于成为了普通人，和这座城市的所有人一样，不再奢望仗剑走天涯不再以梦为马，终于可以坦然的承认所有的不羁都将成为过去，都将随着公交车周而复始的轮回被淹没，一切，为了更好的生活。</li>\n<li>人平均活到六十八岁，一共24820天，19万个小时，3500万分钟，差不多21亿秒左右，这10秒，你在读这段话，这十秒，你只属于我，我爱你陌生人</li>\n<li>爱民谣的人是孤独的…05年许巍，06年朴树，07年李健，08年李志，09年绕十三，10年宋冬野，11年贰佰，12年左小祖咒，13年赵雷，14年王喂马，15年周云鹏……身边朋友都说我听的歌变态…是吗？也许这就是用心听歌与用耳听歌的区别吧…</li>\n<li>梵高的爱人是一个妓女 他把所有的钱都用在画画和妓女身上 有一天妓女说想要梵高的耳朵 于是梵高真的把耳朵割下来 有了著名的梵高的自画像 但是当梵高把耳朵给了妓女的时候妓女吓的落荒而逃了 你看 为什么我把你想要的给了你 你还是走了</li>\n</ul>\n<h2 id=\"如果我爱你\"><a href=\"#如果我爱你\" class=\"headerlink\" title=\"如果我爱你\"></a>如果我爱你</h2><p>歌手：周冬雨/张一山，电视剧《春风十里，不如你》片头曲；“春风十里，不如你”，很喜欢这句话。</p>\n<ul>\n<li>公交车上来两个初中生，他们聊天声音很轻，之间的距离也保持在刚好不会碰到彼此。男孩一直害羞低着头不看旁边的女生，女孩一直笑笑的听男生说话，他们一直偷偷瞟着对方。我突然心里柔软得想要笑着落泪，那样青涩又美好的时光，就像小时候偷喝了蜜糖，踩在云端，甜在心里，却再也回不来。✔很棒</li>\n<li>如果我们不能结婚，你来当伴郎吧，因为我们也算是同走红地毯。后来我又想，如果我们不能结婚，你来砸我场、抢我走吧，我一定脱下高跟鞋，跟你私奔到天涯。后来仔细想想，算了，如果我们不能结婚，你别来了，我怕你什么都不做、却举杯祝我幸福。</li>\n<li>“我喜欢你”四个字，在我肠子里饶了几个弯儿，在我胸口跌倒好几回，爬到我的喉咙里又开始胆怯，滑到我的嘴边又改头换面，最后乔装打扮成“你好吗”又或者是“你在干嘛”</li>\n</ul>\n<h2 id=\"逝年\"><a href=\"#逝年\" class=\"headerlink\" title=\"逝年\"></a>逝年</h2><p>歌手：夏小虎，“时间似流水，催促我们长大，年轻的心有了白发，当初的人呐，你们如今在哪”</p>\n<ul>\n<li>当所有人喜欢《董小姐》的时候，你听董小姐，当所以人热捧《南山南》的时候，你循环南山南，我说这些美丽你遇见的太晚了，你说我不懂流行，我笑你不懂民谣。仅此而已。</li>\n<li>我有故事，你有酒嘛</li>\n</ul>\n<h2 id=\"逆流时光\"><a href=\"#逆流时光\" class=\"headerlink\" title=\"逆流时光\"></a>逆流时光</h2><p>歌手：安图声乐队，第一次听这首歌的时候感觉没什么，第二次感觉还可以，就这样听了将近一百次。。</p>\n<ul>\n<li>后来听说你混的风声水起 可我还是喜欢那个与世无争的你</li>\n<li>如果我18岁， 我会喜欢这首歌。 好吧，其实我28岁也喜欢， 但是，我已经38岁了。 那又怎样，我48岁依旧爱这首歌。</li>\n<li>一般般吧，我也就单曲循环了2个小时就换歌了。</li>\n<li>愿你有高跟鞋也有跑鞋，喝茶也喝酒。愿你有勇敢的朋友，有牛逼的对手。愿你对过往的一切情深意重，但从不回头。愿你特别美丽，特别平静，特别凶狠，也特别温柔。</li>\n</ul>\n<h2 id=\"慢慢捱\"><a href=\"#慢慢捱\" class=\"headerlink\" title=\"慢慢捱\"></a>慢慢捱</h2><p>歌手：土不叔叔乐队/李柏凝，曲很简单，词也很简单，但是放在一起就不简单了</p>\n<ul>\n<li>带着当初跟朋友借的200块买了一张火车票孤身一人出门闯荡，当时立志士不成名誓不还，闯过北京，去过上海，到过深圳，从当初的200块到30万，再到200万，500万，800万，再到现在的1300万，我没有任何炫富的意思，我只是想告诉大家，手机像素越高拍的照片越清晰。</li>\n<li>网易诗人多如狗，可惜都没女朋友</li>\n<li>生来平庸，茅屋未破衣暖饭饱。打量比较，陷于名利未圆其梦。前方泥沼，后有余埃。微笑苦笑，未知几年几日，死于荒谬。</li>\n</ul>\n<h2 id=\"一个歌手的情书\"><a href=\"#一个歌手的情书\" class=\"headerlink\" title=\"一个歌手的情书\"></a>一个歌手的情书</h2><p>歌手：周三/蔡健雅，从《红色高跟鞋》认识蔡健雅，然后就反复地听她的歌了</p>\n<ul>\n<li>你不是赵雷的南方姑娘，不是马頔的傲寒，不是宋冬野的董小姐，不是李志的港岛妹妹，不是海龟的玛卡瑞纳，不是王威的她，不是贰佰的玫瑰，不是尧十三的北方女王，不是许巍的故乡，不是低苦艾的小花花，不是陈粒的祝星。不是周三情书里的那个心上人。你只是风尘中我恋恋不舍的姑娘。</li>\n<li>她说民谣太穷了，一听就是一根烟，一听就是一瓶酒。而我只有一根烟了，还要撑一夜，只剩一点爱了，还要过一生。</li>\n</ul>\n<h2 id=\"别有天\"><a href=\"#别有天\" class=\"headerlink\" title=\"别有天\"></a>别有天</h2><p>歌手：排骨教主，平常听古风类歌曲的话比较喜欢听排骨教主的，嗓音很特别</p>\n<ul>\n<li>你说，十里桃花，两人一马； 后来，谢了繁华，生死无话。 你说，修起篱笆，闲话桑麻； 后来，岁至月腊，空负韶华。 你说，对坐饮茶，共看晚霞； 后来，惨淡月牙，心思暗哑。 你说，不恋戎马，归田卸甲； 后来，倾覆天下，一夜白发。</li>\n<li>自古红尘多少人只欲寻仙问道超然去，却不知，总有仙人偶然窥见了人间华灯初上的光景，便甘愿从此坠入红尘中寻世间烟火、听市井俚歌，只为遇到一个萍水相逢的你。一场绮梦天涯，此生无悔。</li>\n<li>采桑子 欧阳修 画船载酒西湖好， 急管繁弦， 玉盏催传， 稳泛平波任醉眠。 行云却在行舟下， 空水澄鲜， 俯仰留连， 疑是湖中别有天。</li>\n</ul>\n<h2 id=\"你，好不好？\"><a href=\"#你，好不好？\" class=\"headerlink\" title=\"你，好不好？\"></a>你，好不好？</h2><p>歌手：周兴哲，电视剧《遗憾拼图》片尾图，相信很多人听到这首歌都会有很多感受</p>\n<ul>\n<li>有些异性不能拿来做恋人，却也舍不得给别人。</li>\n<li>想让你吃醋，又怕你祝我幸福。</li>\n<li>我戒烟了，没玩游戏了，每天不断的充实自己，我真的过的很好，你来看下我好不好</li>\n<li>牙疼 你的喜糖就不吃了 不胜酒力 你的喜酒就不喝了 健忘 特别健忘 你叫什么就不记了 ​​</li>\n<li>朋友之间，千万别谈爱情，要么一生，要么陌生。</li>\n</ul>\n<h2 id=\"ブルーバード\"><a href=\"#ブルーバード\" class=\"headerlink\" title=\"ブルーバード\"></a>ブルーバード</h2><p>每当听到这首歌的时候就想起了火影，就像某条评论“虽然不会日语，但这首歌我差不多可以唱完。”</p>\n<ul>\n<li>看火影那么多年，才知道。晓组织的十叛忍：佩恩，迪达拉，小南，鼬，绝，带土，鬼鲛，角都，飞段，蝎。代表了人类的十个梦想：和平，艺术，友情，亲情，统治，爱情，力量，金钱，宗教，童年。</li>\n<li>此生无悔入火影，来世愿生木叶村</li>\n<li>电影院里一个小孩问妈妈：“怎么这么多大人？大人也爱看动漫么？” 妈妈说“是看动漫的小孩都长大了”</li>\n<li>看了那么多年火影，才知道木叶三忍，自来也，纲手，大蛇丸分别代表黄，赌，毒。</li>\n<li>每次听到这歌，心中的火之意志在熊熊燃烧，尼玛我们村长太腐败了，劳资要推翻他，建立和平の村。</li>\n<li>整个火影故事里，有人相信血统，有人相信精神，有人相信身体，有人相信眼睛，有人相信先天传承，有人相信后天努力。只有大蛇丸，他相信科学。</li>\n</ul>\n<h2 id=\"生きていたんだよな\"><a href=\"#生きていたんだよな\" class=\"headerlink\" title=\"生きていたんだよな\"></a>生きていたんだよな</h2><p>歌名翻译成中文的意思是：她曾活过啊</p>\n<ul>\n<li>这是一首歌颂死亡的歌，无论一个人选择如何结束自己的生命，都不是未经历过死亡的我们可以靠着想象来自以为是地理解并指手画脚的，因为无论如何，她曾经活过啊。</li>\n<li>不知道是否安慰你，但是我突然想起我的语文老师对我开导的一句话“人生就像心电图，一帆风顺，就死了。”我仍然记得那时她说这句话时眼里闪烁的泪，以及她声音的颤，最忘不了的是她紧紧握住的，我的手。</li>\n<li>“有一天我忽然意识到：我自己是我一生中最后一个死去的人。”</li>\n<li>初一冬天得了抑郁， 割腕以后痛的心慌， 打了出租去医院， 捧着手狂哭， 司机后座被我弄的全都是血， 到了医院还带我去处理， 生意都不要了， 带着我去吃了一顿饭， 他一边哭一边说： “十来岁的小姑娘， 人生路还长， 千万别冲动， 千万别学我女儿。”</li>\n<li>齐奥朗认为自杀的念头是自然的、健康的，对存在的强烈渴望才是一种严重的缺陷。他甚至将自杀视为能保证人活下去的唯一想法，因为“自杀让我明白，我可以在我愿意的时候离开这个世界，这令生命变得可以承受，而不是毁掉它。”</li>\n<li>喜欢iPad你就去买，喜欢莱卡你就去赚，想喝港式奶茶你就过口岸，想当team leader你就努力学习然后努力去工作，想去威尼斯你就攒钱去，想爱谁你就去爱，想追谁你就去追，想到了就去做，拼命努力，拼命享受，忍着守着惦记着，青春就过去了，何必用40岁的心态过20岁的年华。</li>\n<li>小时候家里养过一只猫和一只狗 狗总是被猫欺负 不是狗憨厚 而是斗不过猫 比如猫藏在鞋盒偷袭狗 狗只能绕着鞋盒转圈 后来狗去世了 猫没看见它去世的样子 只是没见狗回来 半年过去了 有天我故意在门口喊了声狗的名字 猫从屋里飞奔到门口左右张望</li>\n<li>很多自杀的人最后一刻都是后悔的，证据是，90%跳楼而死的人，都伤在手部，肘部或者腿骨，因为在最后一刻他们采取了撑地的姿势，他们想活下去。有个朋友说，像香港女星陈宝莲就是这样的。但也有10%的例外，他们最后的姿势是仰躺，比如张国荣</li>\n</ul>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>很荣幸你能看到最后（或者你直接就翻到最后了。。），现在网易云音乐对于我而言已经不再是一款单纯的音乐软件了，而是一种信仰！所以，我的网易云音乐账户叫 <code>wangcongbug</code>，欢迎大家关注我~（我收藏了很多好听到爆的歌曲，希望你也能喜欢~）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_232.jpeg\" alt=\"\" width=\"300\"></div>\n\n<p>歌单里又有很多歌变灰了，在版权面前，情怀仿佛变得不堪一击，但是，我不会选择离开，你会吗？</p>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"life","path":"api/tags/life.json"},{"name":"网易云音乐","path":"api/tags/网易云音乐.json"}]}]}