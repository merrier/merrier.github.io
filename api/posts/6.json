{"total":114,"pageSize":10,"pageCount":12,"data":[{"title":"Git撤销操作","slug":"Git撤销操作","date":"2017-06-29T02:46:13.000Z","updated":"2019-01-27T13:15:42.887Z","comments":true,"path":"api/articles/Git撤销操作.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>Git中提供了几个相关的撤销操作的命令，如 clean、checkout、reset和revert；在看这篇文章之前，我希望你能够浏览一下我的另一篇文章：<a href=\"/20170628/workspace-temporary-zone-and-history-zone-in-git.html\">Git工作区、暂存区和历史记录区</a>，看完之后理解这篇文章会更简单一些</p>\n<h2 id=\"git-clean\"><a href=\"#git-clean\" class=\"headerlink\" title=\"git clean\"></a>git clean</h2><p>git clean 命令用来从你的工作目录中删除所有没有 tracked 过的文件</p>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -n</span><br></pre></td></tr></table></figure>\n<p>是一次 clean 的演习， 告诉你哪些文件会被删除。 记住他不会真正的删除文件， 只是一个提醒。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f</span><br></pre></td></tr></table></figure>\n<p>删除当前目录下所有没有 track 过的文件。 他不会删除 .gitignore 文件里面指定的文件夹和文件， 不管这些文件有没有被 track 过。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<p>删除指定路径下的没有被 track 过的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n<p>删除当前目录下没有被 track 过的文件和文件夹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -xf</span><br></pre></td></tr></table></figure>\n<p>删除当前目录下所有没有 track 过的文件。 不管他是否是 .gitignore 文件里面指定的文件夹和文件。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"假如你要删除所有工作目录下面的修改，包括新添加的文件：\"><a href=\"#假如你要删除所有工作目录下面的修改，包括新添加的文件：\" class=\"headerlink\" title=\"假如你要删除所有工作目录下面的修改，包括新添加的文件：\"></a>假如你要删除所有工作目录下面的修改，包括新添加的文件：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard</span><br><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n<p>运行后，工作目录和缓存区回到最近一次 commit 时候一摸一样的状态， git status 会告诉你这是一个干净的工作目录，又是一个新的开始了。</p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>git checkout 命令用来丢弃本地修改</p>\n<h3 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- files</span><br></pre></td></tr></table></figure>\n<p>把文件从暂存区域复制到工作目录，用来丢弃本地修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n<p>会用暂存区全部的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout HEAD .</span><br></pre></td></tr></table></figure>\n<p>会用 HEAD 指向的 master 分支中的全部文件替换暂存区以及工作区中的文件。<strong>这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动</strong></p>\n<h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>有时候我们的工作区会增加一些不想要的文件（多数为隐藏文件），比如 .idea/、.DS_Store 文件，此时我们不想将这些无关紧要的文件添加到暂存区，所以就像将它们从工作区丢弃，此时就可以利用下面的命令将该文件夹丢弃：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .idea/</span><br></pre></td></tr></table></figure>\n<p>当然，这种总是会自动生成的文件最好写到 .gitignore 里，否则每次都要 checkout 会很烦的</p>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>git reset 命令撤销对于暂存区 / 历史记录区的修改，也就是撤销你本地的 add，commit 操作</p>\n<h3 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n<p>撤销所有暂存区域文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset -- files</span><br></pre></td></tr></table></figure>\n<p>用来撤销最后一次的 git add files（因为每 git add file 一次，暂存区的文件都会被更改一次）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --mixed &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>会保留源码，只是将 git commit 和 index 信息回退到了某个版本。（相当于撤销了 add 和 commit 操作，提交的修改都回到了工作区）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>保留源码，只回退 commit 信息到某个版本，不涉及index的回退，如果还需要提交，直接commit即可。（也就是只撤销了commit，并没有撤销add）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>源码也会回退到某个版本</strong>，commit 和 index 都回回退到某个版本。(注意，这种方式是改变本地代码仓库源码)，当然有人在 push 代码以后，也可以使用 <code>reset --hard &lt;commit id&gt;</code> 回退本地的代码到某个版本之前，但是这样会有一个问题，你线上的代码没有变，线上 commit，index 都没有变，当你把本地代码修改完提交的时候你会发现全是冲突。。（此时就需要用到下面要介绍的 git revert 了）</p>\n<h3 id=\"应用场景-2\"><a href=\"#应用场景-2\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"当我们在使用-pull-的时候，可能会出现冲突，就需要-merge，而在冲突状态下，需要解决冲突的文件会从-index-暂存区打回到工作区，如果我们想放弃-index-和工作区的改动，就可以执行下面这条命令：\"><a href=\"#当我们在使用-pull-的时候，可能会出现冲突，就需要-merge，而在冲突状态下，需要解决冲突的文件会从-index-暂存区打回到工作区，如果我们想放弃-index-和工作区的改动，就可以执行下面这条命令：\" class=\"headerlink\" title=\"当我们在使用 pull 的时候，可能会出现冲突，就需要 merge，而在冲突状态下，需要解决冲突的文件会从 index 暂存区打回到工作区，如果我们想放弃 index 和工作区的改动，就可以执行下面这条命令：\"></a>当我们在使用 pull 的时候，可能会出现冲突，就需要 merge，而在冲突状态下，需要解决冲突的文件会从 index 暂存区打回到工作区，如果我们想放弃 index 和工作区的改动，就可以执行下面这条命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n<p>上面这条命令用来撤销还没 commit 的 merge，就放弃了 index 暂存区和工作区的改动</p>\n<h4 id=\"当我们在本地进行了-add-和-commit-操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：\"><a href=\"#当我们在本地进行了-add-和-commit-操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：\" class=\"headerlink\" title=\"当我们在本地进行了 add 和 commit 操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：\"></a>当我们在本地进行了 add 和 commit 操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>上面这条命令用来撤销已经 commit 的内容（等价于 <code>git reset --hard HEAD~1</code>）。原理就是放弃工作区和 index 的改动，同时 HEAD 指针指向前一个 commit 对象</p>\n<h4 id=\"如果我们已经用-add-命令将某个文件加入暂存区了，此时想撤销对这个文件的-add-操作，就可以用下面的命令：\"><a href=\"#如果我们已经用-add-命令将某个文件加入暂存区了，此时想撤销对这个文件的-add-操作，就可以用下面的命令：\" class=\"headerlink\" title=\"如果我们已经用 add 命令将某个文件加入暂存区了，此时想撤销对这个文件的 add 操作，就可以用下面的命令：\"></a>如果我们已经用 add 命令将某个文件加入暂存区了，此时想撤销对这个文件的 add 操作，就可以用下面的命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这条命令用来撤销对单个文件的 git add，执行之后该文件会从暂存区回到工作区中</p>\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p>git revert 用于反转提交，执行 revert 命令时要求工作树必须是干净的。git revert 用一个新提交来消除一个历史提交所做的任何修改。</p>\n<p>###参数说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>revert 使用，需要先找到你想回滚版本唯一的 commit 标识代码，可以用 <code>git log</code> 进行查看，commit id 是一串 40 位的字符串，通常用前几位即可（6 位就差不多保证唯一了）；执行完之后，revert 的那一次 commit 被撤销，原理是 git revert 用一次逆向的 commit “中和”之前的提交，所以此时 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容；这样在日后合并老的 branch 时，导致这部分改变不会再次出现，就不会出现类似 git reset 带来的冲突问题</p>\n<h3 id=\"应用场景-3\"><a href=\"#应用场景-3\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"对于已经把代码-push-到线上仓库，但是此时发现-push-的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：\"><a href=\"#对于已经把代码-push-到线上仓库，但是此时发现-push-的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：\" class=\"headerlink\" title=\"对于已经把代码 push 到线上仓库，但是此时发现 push 的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：\"></a>对于已经把代码 push 到线上仓库，但是此时发现 push 的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>执行完此命令之后，再执行 git push 就可以将线上代码回滚到某个指定版本，同时不会像 git reset 一样可能会导致一大堆冲突</p>\n<h2 id=\"git-的其它删除命令\"><a href=\"#git-的其它删除命令\" class=\"headerlink\" title=\"git 的其它删除命令\"></a>git 的其它删除命令</h2><p>这些命令类似于 Linux 的命令，是一种物理层面的删除，也会经常遇到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached readme.txt</span><br></pre></td></tr></table></figure>\n<p>只从缓存区中删除readme.txt，保留物理文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm readme.txt</span><br></pre></td></tr></table></figure>\n<p>不但从缓存区中删除，同时删除物理文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv a.txt b.txt</span><br></pre></td></tr></table></figure>\n<p>把a.txt改名为b.txt</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/pingfan1990/p/5454757.html\" target=\"_blank\" rel=\"noopener\">git clean(转载)</a></li>\n<li><a href=\"http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html\" target=\"_blank\" rel=\"noopener\">git reset revert 回退回滚取消提交返回上一版本</a></li>\n<li><a href=\"http://josh-persistence.iteye.com/blog/2215214\" target=\"_blank\" rel=\"noopener\">详解Git工作区、暂存区、历史记录区以及git reset、git revert、git checkout等撤销命令的区别</a></li>\n</ul>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]},{"title":"Git工作区、暂存区和历史记录区","slug":"Git工作区、暂存区和历史记录区","date":"2017-06-28T12:13:42.000Z","updated":"2019-01-27T13:15:42.887Z","comments":true,"path":"api/articles/Git工作区、暂存区和历史记录区.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_5.jpg","content":"<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>可以将 git 简单的分为三个区域：</p>\n<ul>\n<li>工作区（working directory）</li>\n<li>暂存区（stage index）</li>\n<li>历史记录区（history）</li>\n</ul>\n<p>如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_5.jpg\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"简单解释\"><a href=\"#简单解释\" class=\"headerlink\" title=\"简单解释\"></a>简单解释</h2><p><strong>工作区</strong>：就是我们能看到的区域，也是我们经常修改代码的目录<br><strong>暂存区</strong>：文件在本地修改之后，需要提交到暂存区之后才能提交到版本库，作为过渡层；可以避免误操作和保护工作区和版本库<br><strong>历史记录区</strong>：可以理解为版本库，我们从暂存区提交之后的记录会保存在这里</p>\n<h2 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h2><p>当我们执行 <code>git add files</code> 时，我们把当前工作目录中的文件放入了暂存区域，这其实做了两件事：</p>\n<ol>\n<li>将本地文件的时间戳、长度，当前文档对象的id等信息保存到一个树形目录中去（index，即平时说的暂存区）</li>\n<li>将本地文件的内容做快照并保存到 Git 的对象库。</li>\n</ol>\n<p>所以，暂存区实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等），文件的内容并不存储其中，而是保存在 Git 对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_6.png\" alt=\"\" width=\"600\"></div>\n\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个“游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下</p>\n<h2 id=\"三个区域与-git-命令\"><a href=\"#三个区域与-git-命令\" class=\"headerlink\" title=\"三个区域与 git 命令\"></a>三个区域与 git 命令</h2><h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中</p>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><p>当执行 “git status” 命令扫描工作区改动的时候，先依据 .git/index 文件中记录的（工作区跟踪文件的）时间戳、长度等信息判断工作区文件是否改变。如果工作区的文件时间戳改变，说明文件的内容<strong>可能</strong>被改变了，需要打开文件，读取文件内容，和更改前的原始文件相比较（本地文件和与之对应的 object 库中的文件的内容进行对比），判断文件内容是否被更改。如果文件内容没有改变，则将该文件新的时间戳记录到 .git/index 文件中。因为判断文件是否更改，使用时间戳、文件长度等信息进行比较要比通过文件内容比较要快的多，所以 Git 这样的实现方式可以让工作区状态扫描更快速的执行，这也是 Git 高效的因素之一。</p>\n<h3 id=\"git-diff-files\"><a href=\"#git-diff-files\" class=\"headerlink\" title=\"git diff files\"></a>git diff files</h3><p>git diff files 用来进行具体文件的变动对比，通常用来进行工作区与暂存区之间的对比，实质上是用 git objects 库中的快照与工作区文件的内容的对比。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://josh-persistence.iteye.com/blog/2215214\" target=\"_blank\" rel=\"noopener\">详解Git工作区、暂存区、历史记录区以及git reset、git revert、git checkout等撤销命令的区别</a></li>\n</ul>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]},{"title":"Chrome扩展程序推荐&(伪)开发指南","slug":"Chrome扩展程序推荐&(伪)开发指南","date":"2017-06-28T09:25:28.000Z","updated":"2019-01-27T13:15:42.887Z","comments":true,"path":"api/articles/Chrome扩展程序推荐&(伪)开发指南.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_239.png","content":"<p>chrome 作为 Google 公司研发的一款网页浏览器，其诞生之初就备受关注，从一开始的全年占有率上升幅度最大到如今的全球使用人数最多，chrome 成为了 Google 最值得骄傲的产品之一；而作为前端工程师，和浏览器打交道是最多的，所以如何用好浏览器就成为了一项潜在的技能。chrome 本身就基于其他开源软件所撰写（WebKit、Blink），所以其丰富的扩展程序成为了另一大杀器，下面就分享一下我用的一些扩展程序（排名不分先后，如果你也有用着很爽的插件，欢迎在评论中分享哦～），同时简单的介绍一下自己如果想开发一个 Chrome 扩展程序，应该从何下手。</p>\n<h2 id=\"扩展程序推荐\"><a href=\"#扩展程序推荐\" class=\"headerlink\" title=\"扩展程序推荐\"></a>扩展程序推荐</h2><h3 id=\"React-Developer-Tools\"><a href=\"#React-Developer-Tools\" class=\"headerlink\" title=\"React Developer Tools\"></a><a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\" target=\"_blank\" rel=\"noopener\">React Developer Tools</a></h3><p>之所以将这款插件排在第一位，那是因为 react 实在是太火了，颇有一统前端框架之势（想多了，怎么可能），所以就首先推荐这款插件了。这款插件是 facebook 官方推荐的（<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">Github 地址</a>），目前已经有 64W 用户下载使用，所以其性能方面是不容置疑的，不过由于我目前还没有更深入的接触 react，所以这款插件自从下载之后就没有实际用过，具体怎样就没办法描述了。。</p>\n<h3 id=\"JSONView\"><a href=\"#JSONView\" class=\"headerlink\" title=\"JSONView\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\" target=\"_blank\" rel=\"noopener\">JSONView</a></h3><p>这款插件其实功能很简单，就是能够让你在浏览器中更方便地看 JSON 类型的数据，我们前端工程师常会有这样的困扰：后台提供了一个接口，返回的是 JSON 数据，但是我们通过 URL 直接在浏览器中打开的话，中文会显示乱码，而且如果其中有类似 URL 这种格式的数据，也没有办法点击跳转；此时，这款插件就派上了用场，虽然其提供的功能很简单，但是 105W+ 的用户量已经说明了一切，截图神马的最有说服力了：</p>\n<h4 id=\"JSONView之前\"><a href=\"#JSONView之前\" class=\"headerlink\" title=\"JSONView之前\"></a>JSONView之前</h4><div align=\"center\"><img src=\"/images/hexo_post_239.png\" alt=\"\" width=\"700\"></div>\n\n<h4 id=\"JSONView之后\"><a href=\"#JSONView之后\" class=\"headerlink\" title=\"JSONView之后\"></a>JSONView之后</h4><div align=\"center\"><img src=\"/images/hexo_post_238.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"Set-Character-Encoding\"><a href=\"#Set-Character-Encoding\" class=\"headerlink\" title=\"Set Character Encoding\"></a><a href=\"https://chrome.google.com/webstore/detail/set-character-encoding/bpojelgakakmcfmjfilgdlmhefphglae\" target=\"_blank\" rel=\"noopener\">Set Character Encoding</a></h3><p>这款插件的功能也很简单，就像它的名字一样，是用来改变网页编码格式的，相信用最新版本 Chrome 的童鞋会发现，右键改编码格式的日子一去不复返了，甚至连高级设置中都没有办法改编码格式了，那么如何修改万恶的编码格式呢？这款插件就派上了用场，使用很简单：安装之后在你想要改变编码格式的网页右键，就会出现下面这个东东：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_240.png\" alt=\"\" width=\"400\"></div>\n\n<p>使用起来就是如此的简单，还在担心乱码吗？赶紧安装一下试试吧！</p>\n<h3 id=\"印象笔记·剪藏\"><a href=\"#印象笔记·剪藏\" class=\"headerlink\" title=\"印象笔记·剪藏\"></a><a href=\"https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">印象笔记·剪藏</a></h3><p>印象笔记作为一款最受欢迎的笔记类应用之一，其本身提供的功能已经足够惊艳了，但是它的这款 chrome 插件更是好用到爆，安装之后在浏览网页时点击它的大象 logo 就会在你的网页右上角弹出如下弹框：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_241.png\" alt=\"\" width=\"300\"></div>\n\n<p>该弹框基本上涵盖了你所需要的所有功能，包括命名、内容选择、存储位置、标签、注释等等，可以让你很方便的保存你所浏览的任何内容（可以<a href=\"https://www.yinxiang.com/webclipper/guide/#1\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看这款插件的玩法介绍），如果你是印象笔记的用户或潜在用户，一定要安装试一下，童叟无欺哦～</p>\n<h3 id=\"YSlow\"><a href=\"#YSlow\" class=\"headerlink\" title=\"YSlow\"></a><a href=\"https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh\" target=\"_blank\" rel=\"noopener\">YSlow</a></h3><p>YSlow（why slow）是雅虎基于网站优化规则推出的工具，帮助你分析并优化网站性能。说到雅虎，就不得不提一下<a href=\"http://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">雅虎军规</a>了，雅虎军规在十几个方面给你的网站提出优化建议，YSlow 会根据这些规则分析你的网站，并给出评级。雅虎作为一家对前端性能追求卓越的公司，虽然已光辉不再，但是 YSlow 这款插件（<a href=\"https://addons.mozilla.org/en-US/firefox/addon/5369\" target=\"_blank\" rel=\"noopener\">Firefox 也有相应插件</a>）对于前端开发者来说还是能提供很多思路的，官方网站：<a href=\"http://developer.yahoo.com/yslow/\" target=\"_blank\" rel=\"noopener\">http://developer.yahoo.com/yslow/</a> 我的个人博客用YSlow的评分结果。。：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_212.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"花瓣网页收藏工具\"><a href=\"#花瓣网页收藏工具\" class=\"headerlink\" title=\"花瓣网页收藏工具\"></a><a href=\"https://chrome.google.com/webstore/detail/%E8%8A%B1%E7%93%A3%E7%BD%91%E9%A1%B5%E6%94%B6%E8%97%8F%E5%B7%A5%E5%85%B7/imamemhokkdleoelohnmkimbmpfglcil\" target=\"_blank\" rel=\"noopener\">花瓣网页收藏工具</a></h3><p>这是<a href=\"http://www.huaban.com\" target=\"_blank\" rel=\"noopener\">花瓣网</a>官方提供的扩展，这个扩展程序可以让你方便地从任意网站上采集喜欢的图片、视频或者网页截图，并且可以全部保存下来，甚至可以追溯到这张图片的源网页继续查看。从某种角度而言，是一款不仅仅适合设计师的插件</p>\n<div align=\"center\"><img src=\"/images/hexo_post_213.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"Check-my-links\"><a href=\"#Check-my-links\" class=\"headerlink\" title=\"Check my links\"></a><a href=\"https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf\" target=\"_blank\" rel=\"noopener\">Check my links</a></h3><p>该插件会检查当前页面中链接的有效性，会告诉你哪些地方的链接已经是死链等等，对 SEO 很有帮助，下图是这个插件的主界面：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_283.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"Host-Switch-Plus\"><a href=\"#Host-Switch-Plus\" class=\"headerlink\" title=\"Host Switch Plus\"></a><a href=\"https://chrome.google.com/webstore/detail/host-switch-plus/bopepoejgapmihklfepohbilpkcdoaeo?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Host Switch Plus</a></h3><p>快速切换 Domain-IP 配置而不需要编辑 Hosts 文件，并方便的添加、修改、分组（批量开关）。对于程序员来说也是一大神器啊！其实有一个软件也是用来切换 hosts 的，叫做 <strong>SwitchHosts</strong> ，感兴趣的话可以试用一下，同样很简洁。</p>\n<h3 id=\"Fatkun图片批量下载\"><a href=\"#Fatkun图片批量下载\" class=\"headerlink\" title=\"Fatkun图片批量下载\"></a><a href=\"https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf\" target=\"_blank\" rel=\"noopener\">Fatkun图片批量下载</a></h3><p>就像名字一样，它的功能是找出当前页面的所有图片并下载，提供按分辨率、链接等筛选图片，是一款十分简洁但又功能强大的扩展程序。可能更适合设计师吧？！</p>\n<h3 id=\"Extension-Source-Locator\"><a href=\"#Extension-Source-Locator\" class=\"headerlink\" title=\"Extension Source Locator\"></a><a href=\"https://chrome.google.com/webstore/detail/extension-source-locator/cmhbfegjgncgaikpopenldnaidbhdopp\" target=\"_blank\" rel=\"noopener\">Extension Source Locator</a></h3><p>这是一款神奇的扩展程序，翻译成中文就是“<strong>扩展程序源码定位器</strong>”，它是干什么的呢，根据被翻译过来的不太准确的大中华语可以大概知道这玩意儿可以定位到一个你已经在谷歌浏览器上安装了的扩展程序的源码，或者说源文件 ，在你电脑磁盘的哪个地方。更重要的是它让我们可以修改一些自己喜欢的扩展程序，让其更加适合自己的使用。具体参见<a href=\"http://www.cnblogs.com/Wayou/p/how_to_adapt_chrome_extension_for_your_own_willing.html\" target=\"_blank\" rel=\"noopener\">这篇介绍文章</a></p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb\" target=\"_blank\" rel=\"noopener\">Vimium</a></h3><p>首先，不知道为什么叫这个名字。。用惯 vim 的人可能习惯用键盘操控一切了，那么这款插件一定能够满足你，它让你能够通过键盘控制浏览器，包括跳转，点击某个按钮，翻页以及所有你能想到的浏览器功能，实在是佩服这款插件的开发者，可以先看一下它的<a href=\"https://youtu.be/t67Sn0RGK54\" target=\"_blank\" rel=\"noopener\">宣传视频</a>（来自油管，需要翻墙~）压压惊</p>\n<h3 id=\"一键管理所有扩展\"><a href=\"#一键管理所有扩展\" class=\"headerlink\" title=\"一键管理所有扩展\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%80%E6%9C%89%E6%89%A9%E5%B1%95/niemebbfnfbjfojajlmnbiikmcpjkkja\" target=\"_blank\" rel=\"noopener\">一键管理所有扩展</a></h3><p>名字已经说明了一切，当我们安装了很多扩展程序的时候，一键管理就派上用场了，快速激活、禁用插件。可以安装多个插件，切换使用，缓解 Chrome 的吃内存问题</p>\n<h3 id=\"Adblock-Plus\"><a href=\"#Adblock-Plus\" class=\"headerlink\" title=\"Adblock Plus\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb\" target=\"_blank\" rel=\"noopener\">Adblock Plus</a></h3><p>去除广告的插件，满天飞的弹窗广告相当烦人啊。具体效果还没有试验，但是看到“\b去除广告”这四个字的时候，我就决定要安装一下了</p>\n<h3 id=\"WEB-前端助手-FeHelper\"><a href=\"#WEB-前端助手-FeHelper\" class=\"headerlink\" title=\"WEB 前端助手(FeHelper)\"></a><a href=\"https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad\" target=\"_blank\" rel=\"noopener\">WEB 前端助手(FeHelper)</a></h3><p>提供了很多前端开发者经常用到的功能，包括字符串编解码、图片 base64 编码、代码压缩、时间戳转换、二维码生成、页面性能检测等等功能，具体看下图吧：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_101.png\" alt=\"\" width=\"200\"></div>\n\n<h3 id=\"新浪微博图床\"><a href=\"#新浪微博图床\" class=\"headerlink\" title=\"新浪微博图床\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf\" target=\"_blank\" rel=\"noopener\">新浪微博图床</a></h3><p>简单好用的图片上传工具，支持选择、拖拽、粘贴、上传图片，并且生成图片地址、HTML、UBB 和 Markdown 等格式，同时还支持批量上传等功能，很适合那些需要把图片放网上供其他人浏览的场景</p>\n<h3 id=\"惠惠购物助手\"><a href=\"#惠惠购物助手\" class=\"headerlink\" title=\"惠惠购物助手\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb\" target=\"_blank\" rel=\"noopener\">惠惠购物助手</a></h3><p>剁手党的神器！虽然名字起得像一个垃圾广告，但是功能还是蛮实用的。。可以自动显示淘宝、京东、当当等各大网上商城的报价（安装它之后，必须要进入扩展选项设置，不然这货会弹出广告！）</p>\n<blockquote>\n<p>更新自2017-9-10：突然发现，这个插件会在后来运行，然后在有优惠信息时，会在右上角弹出推送消息（和 service worker 类似），如下图：</p>\n</blockquote>\n<div align=\"center\"><img src=\"/images/hexo_post_284.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc\" target=\"_blank\" rel=\"noopener\">Octotree</a></h3><p>这是一款非常方便的 github 扩展，安装了这款插件之后，你可以在 Github 项目页面的左侧看到相应项目树状结构图，对于项目管理以及具体的文件跳转来说非常方便（同时还可以一键下载某文件，这个功能我最喜欢了！）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_122.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"BuiltWith-Technology-Profiler\"><a href=\"#BuiltWith-Technology-Profiler\" class=\"headerlink\" title=\"BuiltWith Technology Profiler\"></a><a href=\"https://chrome.google.com/webstore/detail/builtwith-technology-prof/dapjbgnjinbpoindlpdmhochffioedbn\" target=\"_blank\" rel=\"noopener\">BuiltWith Technology Profiler</a></h3><p>这款插件很适合充满好奇心的“极客”，它可以帮你<strong>探测出当前网站所用的技术栈并按类型分类</strong>，从此再也不用去看代码推测技术栈了！</p>\n<h3 id=\"User-Agent-Switcher-for-Chrome\"><a href=\"#User-Agent-Switcher-for-Chrome\" class=\"headerlink\" title=\"User-Agent Switcher for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg\" target=\"_blank\" rel=\"noopener\">User-Agent Switcher for Chrome</a></h3><p>有时候我们需要同时在不同设备上测试网页的自适应情况，而有了这款插件，你可以随时更换 UA，节省了“检查元素”窗口的空间，同时还显得自己是一个很厉害的“前端工程师”~</p>\n<blockquote>\n<p>更新自2017-09-11：偶然间发现一篇文章：<a href=\"https://www.v2ex.com/t/389340\" target=\"_blank\" rel=\"noopener\">大家注意了 Chrome 的插件 User-Agent Switcher 是个木马</a>，但是这篇文章里面说的插件是 User-Agent Switcher for Google Chrome，所以大家安装插件的时候一定要擦亮眼睛啊~</p>\n</blockquote>\n<h3 id=\"Always-Clear-Downloads\"><a href=\"#Always-Clear-Downloads\" class=\"headerlink\" title=\"Always Clear Downloads\"></a><a href=\"https://chrome.google.com/webstore/detail/always-clear-downloads/cpbmgiffkljiglnpdbljhlenaikojapc\" target=\"_blank\" rel=\"noopener\">Always Clear Downloads</a></h3><p>自动清理下载记录和关闭令人厌烦的必须手动关闭的下载栏；但是我安装之后发现没有什么变化，是我的姿势不对吗？</p>\n<h3 id=\"Imagus\"><a href=\"#Imagus\" class=\"headerlink\" title=\"Imagus\"></a><a href=\"https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab\" target=\"_blank\" rel=\"noopener\">Imagus</a></h3><p>鼠标停在小图片上即可显示出原图大小的图片，从此刷微博不必点击展开图片，刷淘宝、京东不必点击到商品页面细看，但是我安装之后还是看不了，难道我的姿势又不对了吗？</p>\n<blockquote>\n<p>更新于2017-09-07：我发现有的图片它不会放大，可能没有压缩过的图片它不会显示原图吧，不过用过之后感觉还是蛮好用的。</p>\n</blockquote>\n<h3 id=\"主题创建者\"><a href=\"#主题创建者\" class=\"headerlink\" title=\"主题创建者\"></a><a href=\"https://chrome.google.com/webstore/detail/theme-creator-create-cust/ognfcdaekjfmdjhcjaacfapijblalleg?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">主题创建者</a></h3><p>为谷歌浏览器创建自定义主题。可以为每个区域选择颜色和背景。追求个性化浏览器的童鞋可以尝试一下。</p>\n<h3 id=\"Proxy-SwitchyOmega\"><a href=\"#Proxy-SwitchyOmega\" class=\"headerlink\" title=\"Proxy SwitchyOmega\"></a><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\" target=\"_blank\" rel=\"noopener\">Proxy SwitchyOmega</a></h3><p>轻松快捷地管理和切换多个代理设置。很适合程序猿的一款扩展，不仅可以全局代理，还可以通过正则或其他规则进行局部代理，除此之外还可以加载 PAC 脚本，翻墙神器，你不可错过。</p>\n<h3 id=\"Video-DownloadHelper\"><a href=\"#Video-DownloadHelper\" class=\"headerlink\" title=\"Video DownloadHelper\"></a><a href=\"https://chrome.google.com/webstore/detail/video-downloadhelper/lmjnegcaeklhafolokijcfjliaokphfk\" target=\"_blank\" rel=\"noopener\">Video DownloadHelper</a></h3><p>通过名字就可以看出来，这是一款用来下载视频的扩展，可以下载多种格式的视频，同时其提供了多种额外的功能，有兴趣的童鞋可以自行了解。</p>\n<h3 id=\"Smart-TOC\"><a href=\"#Smart-TOC\" class=\"headerlink\" title=\"Smart TOC\"></a><a href=\"https://chrome.google.com/webstore/detail/smart-toc/lifgeihcfpkmmlfjbailfpfhbahhibba\" target=\"_blank\" rel=\"noopener\">Smart TOC</a></h3><blockquote>\n<p>Add a table of contents for web article or documentation</p>\n</blockquote>\n<p>这个插件的作用很难用语言来描述。。大致的作用就是给当前网页生成一个“目录”，同时支持锚链接，当我们再看那种“老太太裹脚布”的文章的时候，这个扩展就可以大展身手了，类似下图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_230.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"斗鱼HTML5播放器\"><a href=\"#斗鱼HTML5播放器\" class=\"headerlink\" title=\"斗鱼HTML5播放器\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%96%97%E9%B1%BChtml5%E6%92%AD%E6%94%BE%E5%99%A8/hbocinidadgpnbcamhjgfbgiebhpnmfj\" target=\"_blank\" rel=\"noopener\">斗鱼HTML5播放器</a></h3><p>替换斗鱼TV的 Flash 播放器, 并支持弹幕, 送礼等功能. 目前是测试版本, 可能无法播放部分直播间. 基于 flv.js(<a href=\"https://github.com/Bilibili/flv.js)(感谢谦谦)\" target=\"_blank\" rel=\"noopener\">https://github.com/Bilibili/flv.js)(感谢谦谦)</a></p>\n<h3 id=\"Tampermonkey\"><a href=\"#Tampermonkey\" class=\"headerlink\" title=\"Tampermonkey\"></a><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\" target=\"_blank\" rel=\"noopener\">Tampermonkey</a></h3><p>这个插件属于必装的插件之一，大家通常称其为“油猴脚本”，有了这个，你会发现<strong>新世界大门</strong>向你打开，里面有各种<strong>秀出天</strong>际的脚本：百度网盘直接下载助手、VIP 视频破解、解决百度云大文件下载限制等等，安装脚本很简单，第一次安装该插件时会有一个简单的教程，还可以去<a href=\"http://greasyfork.org\" target=\"_blank\" rel=\"noopener\">greasyfork.org</a>下载更多更厉害的脚本，从此上网之路会变得异常酷爽！</p>\n<h3 id=\"Onetab\"><a href=\"#Onetab\" class=\"headerlink\" title=\"Onetab\"></a><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall\" target=\"_blank\" rel=\"noopener\">Onetab</a></h3><p>用电脑经常用着用着就<strong>不知觉地打开了很多页面</strong>，用了多年的扎扎电脑很容易就出现浏览器<strong>崩溃的状况</strong>。装上这个 onetab 插件后，点击一下就可以把当前浏览器<strong>打开的所有标签页集中到一个页面</strong>，又可以开始愉快地浏览了，然后可以单独或全部恢复这些标签页。 或者可以打开一组<strong>相关的页面</strong>，点击后作为<strong>一个合集分享出去</strong>，工作上分享资料可以用到。 最重要的是能够<strong>节省高达95％的内存：</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_229.jpg\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Infinity新标签页-Pro\"><a href=\"#Infinity新标签页-Pro\" class=\"headerlink\" title=\"Infinity新标签页(Pro)\"></a><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh\" target=\"_blank\" rel=\"noopener\">Infinity新标签页(Pro)</a></h3><p>这个<strong>自定义的标签页</strong>颜值颇高，同时还提供了<strong>谷歌邮件自动提醒</strong>功能，还有精美天气，待办事项，印象笔记一样的记事应用，高清壁纸，必应，百度，谷歌搜索，让你的使用更加简单方便快捷。还有高清壁纸库，从 3 万多张超清壁纸中一张一张搭配图标，精心挑选出 365 张，形成每日一图，当然你也可以从你自己电脑上选择图片作为壁纸。这是它的<a href=\"https://www.infinitynewtab.com\" target=\"_blank\" rel=\"noopener\">官网</a>，可以说是居家必备良品了。</p>\n<h3 id=\"Copyfish\"><a href=\"#Copyfish\" class=\"headerlink\" title=\"Copyfish\"></a><a href=\"https://chrome.google.com/webstore/detail/copyfish-%F0%9F%90%9F-free-ocr-soft/eenjdnjldapjajjofmldgmkjaienebbj\" target=\"_blank\" rel=\"noopener\">Copyfish</a></h3><p>一款免费的 <strong>OCR文字识别插件</strong>，可以帮助我们快速地从网页中进行区域选定识别文字。Copyfish 可以从图像，PDF甚至是视频中识别提取文本，使用方法也很简便。非常适合用于那些不能复制文字的网页，选定后则会自动进行识别，弹出识别结果。还可以在设置中进行翻译语言设置等，识别后一键翻译。</p>\n<h3 id=\"掘金\"><a href=\"#掘金\" class=\"headerlink\" title=\"掘金\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb\" target=\"_blank\" rel=\"noopener\">掘金</a></h3><p>可以让你的新标签页变成掘金文章列表，包含 Android、前端、产品、设计、iOS、后端六大频道，每个频道内都有一到多个为你精心准备的优质内容源。同时还可以添加 Github、Dribbble 的内容，为设计师、程序员、产品经理每日发现优质内容。当然，如果你不想作为新标签页使用的话，还可以使用其<a href=\"https://e.xitu.io/\" target=\"_blank\" rel=\"noopener\">网页版</a>，其功能和新标签页是一模一样的，可以说是十分贴心了。</p>\n<h3 id=\"Momentum\"><a href=\"#Momentum\" class=\"headerlink\" title=\"Momentum\"></a><a href=\"https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca\" target=\"_blank\" rel=\"noopener\">Momentum</a></h3><p>这也是一款改造新标签页的扩展程序，从下面的截图中可以看到，改造之后非常的炫酷，关键是每一天的壁纸都不一样，而且还可以添加 todoList 等更多功能，如果感兴趣的话可以自行探索。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_292.jpg\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"New-Tab-Dribbble\"><a href=\"#New-Tab-Dribbble\" class=\"headerlink\" title=\"New Tab Dribbble\"></a><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fnew-tab-dribbble%2Fomhhjicbfncielplfgggjedgnkjoicjj\" target=\"_blank\" rel=\"noopener\">New Tab Dribbble</a></h3><p>这个就更厉害了，可以说是设计师的必备，你每次打开新的标签页都会第一时间把每日精品设计作品展示出来，你每天都能看到来自大神的作品，简直是灵感的源泉，作品都来自 Dribbble。</p>\n<h3 id=\"Isometric-Contributions\"><a href=\"#Isometric-Contributions\" class=\"headerlink\" title=\"Isometric Contributions\"></a><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fisometric-contributions%2Fmjoedlfflcchnleknnceiplgaeoegien\" target=\"_blank\" rel=\"noopener\">Isometric Contributions</a></h3><p>这个应该是程序员专属，它可以让我们 Github 的贡献图变成 3D 效果，非常适合用来装逼有没有，是不是很高大上：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_293.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"GitHub-Repository-Size\"><a href=\"#GitHub-Repository-Size\" class=\"headerlink\" title=\"GitHub Repository Size\"></a><a href=\"https://chrome.google.com/webstore/detail/github-repository-size/apnjnioapinblneaedefcnopcjepgkci/related\" target=\"_blank\" rel=\"noopener\">GitHub Repository Size</a></h3><p>这款插件也是 Github 相关的一款辅助工具，它可以直接将仓库的大小以及仓库中各个文件的大小显示出来：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_228.jpg\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"Darkness\"><a href=\"#Darkness\" class=\"headerlink\" title=\"Darkness\"></a><a href=\"https://chrome.google.com/webstore/detail/darkness-beautiful-dark-t/imilbobhamcfahccagbncamhpnbkaenm\" target=\"_blank\" rel=\"noopener\">Darkness</a></h3><p>Darkness为热门网站提供精美的深色主题，可以显著减轻由明亮的电脑屏幕引起的眼睛负担和疲劳：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_227.jpg\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"云盘万能钥匙\"><a href=\"#云盘万能钥匙\" class=\"headerlink\" title=\"云盘万能钥匙\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%BA%91%E7%9B%98%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99/anlllmnpjodopgbkbpnghnjlelnogfjc\" target=\"_blank\" rel=\"noopener\">云盘万能钥匙</a></h3><p>官网地址：<a href=\"https://ypsuperkey.meek.com.cn/\" target=\"_blank\" rel=\"noopener\">https://ypsuperkey.meek.com.cn/</a>，这款插件可以自动识别百度网盘提取密码，标识已失效的网盘链接，网盘分享从此更加简单。不过这款插件之所以会有如此能力，是因为它会在你提交百度网盘分享链接提取密码时收集提取密码信息，可能会涉及到隐私问题。除了 Chrome 浏览器，它还支持其他大部分浏览器，包括火狐、360、QQ、搜狗、UC 等等。</p>\n<h3 id=\"沙拉查词\"><a href=\"#沙拉查词\" class=\"headerlink\" title=\"沙拉查词\"></a><a href=\"https://chrome.google.com/webstore/detail/沙拉查词-多词典专业划词翻译/cdonnmffkdaoajfknoeeecmchibpmkmg\" target=\"_blank\" rel=\"noopener\">沙拉查词</a></h3><p>涵盖所有主流词典，多重划词模式，极致交互体验，灵活导出生词本，高度可配置，支持 PDF，兼容 Vimium 全键盘操作。对于想学英语的童鞋来说是一个很好的工具。</p>\n<h3 id=\"GayHub\"><a href=\"#GayHub\" class=\"headerlink\" title=\"GayHub\"></a><a href=\"https://chrome.google.com/webstore/detail/gayhub/mdcffelghikdiafnfodjlgllenhlnejl\" target=\"_blank\" rel=\"noopener\">GayHub</a></h3><p>首先，请忽略这个扩展的名字。。它的主要功能是优化 Github 的阅读体验：</p>\n<ul>\n<li>文件目录树：把 Vscode 的精美的侧边栏完美移植到 github 上</li>\n<li>TOC导航：能完美解析当前内容的所有嵌套标题，性能优越，滑动起来如丝滑般流畅。</li>\n<li>夜间暗色主题</li>\n<li>图片全屏预览</li>\n<li>一键复制代码</li>\n</ul>\n<h2 id=\"其他人推荐的扩展程序\"><a href=\"#其他人推荐的扩展程序\" class=\"headerlink\" title=\"其他人推荐的扩展程序\"></a>其他人推荐的扩展程序</h2><p>以上是我自己使用过或在使用的一些扩展程序，还有一些扩展程序可能我自己并没有使用但是其他人推荐了，我也列举在下方，方便大家查看和选择：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5b470d8de51d4519105d3bbd\" target=\"_blank\" rel=\"noopener\">优秀程序员都在用哪些Chrome拓展工具？</a></li>\n</ul>\n<p>如果因为某些显而易见的问题，无法从应用商店安装插件的话，可以尝试到<a href=\"https://extfans.com/\" target=\"_blank\" rel=\"noopener\">扩展迷官网</a>下载。</p>\n<h2 id=\"开发指南\"><a href=\"#开发指南\" class=\"headerlink\" title=\"开发指南\"></a>开发指南</h2><p>其实 Chrome 扩展程序的开发并不是很难，只要你有前端的一些基础知识（HTML、CSS、JavaScript）就足够了，剩下的一些就是按照官方的文档或其他教程一步一步的编写+理解就可以了，下面是一些推荐的教程，相信看过之后你一定可以开发出一个类似天气、股票、PM2.5 这样的扩展程序：</p>\n<ul>\n<li><a href=\"http://www.ituring.com.cn/book/1421\" target=\"_blank\" rel=\"noopener\">Chrome 扩展及应用开发</a> -&gt; 来自图灵社区的免费电子书，适合入门。</li>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//open.chrome.360.cn/extension_dev/overview.html\" target=\"_blank\" rel=\"noopener\">Chrome扩展开发文档</a> -&gt; 来自 360 极速浏览器翻译的官方文档（比较老了，不是很推荐）。</li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">Chrome 插件开发官方文档(英文)</a> -&gt; 前两个适合入门，实际开发的时候还是推荐官方的，查API啥的都很方便，况且这篇文档写的很赞，也简单易懂，强烈推荐。</li>\n<li><a href=\"http://www.cnblogs.com/coco1s/p/8004510.html\" target=\"_blank\" rel=\"noopener\">ChokCoco-手把手教你开发扩展程序</a> -&gt; ChokCoco 老师的扩展程序开发教程，讲的挺好的，五星推荐！</li>\n<li><a href=\"https://developer.chrome.com/webstore/publish\" target=\"_blank\" rel=\"noopener\">Publish in the Chrome Web Store</a> -&gt; Chrome官方出的发布自己的扩展程序的教程</li>\n<li><a href=\"https://github.com/sxei/chrome-plugin-demo\" target=\"_blank\" rel=\"noopener\">Chrome插件开发全攻略</a> -&gt; 作者花了将近一个多月的时间断断续续写下这篇博文，并精心写下了这个完整 demo，里面包含的内容很多，包括了大部分的配置项，同时还附有源码，是一篇很不错的入门文章。</li>\n<li><a href=\"https://juejin.im/post/5c135a275188257284143418\" target=\"_blank\" rel=\"noopener\">一篇文章教你顺利入门和开发chrome扩展程序（插件）</a> -&gt; 前面部分大多数是一些基础介绍，和别人的资料大同小异，但是用的是通俗的语言或者作者自己理解来描述的，不是拷贝官方的描述，更方便读者理解；后面部分多为一些作者在项目中总结的方法。</li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"Chrome","path":"api/tags/Chrome.json"},{"name":"指南","path":"api/tags/指南.json"},{"name":"推荐","path":"api/tags/推荐.json"}]},{"title":"Git配置别名","slug":"Git配置别名","date":"2017-06-28T03:04:28.000Z","updated":"2019-01-27T13:15:42.887Z","comments":true,"path":"api/articles/Git配置别名.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_102.png","content":"<p>git 提供了各种各样的操作方法，但是我们常常会陷入“敲 git 命令敲的手疼”的困境，此时为 git 配置别名就显得尤为重要了，尤其是当我们的项目有各种各样的分支（master、dev、test…）时，经常需要 merge、rebase、add、commit，如果能用一两个字母代替这些命令的话，我相信会减轻很多打字的负担。</p>\n<h2 id=\"方法一：临时修改\"><a href=\"#方法一：临时修改\" class=\"headerlink\" title=\"方法一：临时修改\"></a>方法一：临时修改</h2><p>我们只需要敲一行命令，告诉 git，以后 st 就表示 status：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>–global 参数是全局参数，也就是这一行命令在这台电脑的所有 git 仓库下都有用；当然，如果你想只在当前项目中使用简写命令，可以在项目的目录下使用 git config 命令而不带 –global 选项，这样会在你当前项目目录下的 .git/config 文件增加一节 [user] 内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">    name = Merrier</span><br><span class=\"line\">    eamil = 953075999@qq.com</span><br></pre></td></tr></table></figure>\n<p>只改了 status 不过瘾？没关系，我们还有别的命令可以简写，很多人用 co 表示 checkout，ci 表示 commit，br 表示 branch（每个人都有自己的简写习惯，不过最好和别人相同，否则别人在你的电脑上提交代码的话可能会有不必要的麻烦）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br></pre></td></tr></table></figure>\n<p>当然，除了上面这些简单的命令之外，我们还可以为一些复杂的命令设置别名，比如配置一个 git last，让其显示最后一次提交信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.last <span class=\"string\">'log -1'</span></span><br></pre></td></tr></table></figure>\n<p>这样，我们用 git last 就能显示最近一次的提交：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git last</span><br><span class=\"line\">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</span><br><span class=\"line\">Merge: bd6ae48 291bea8</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Thu Aug 22 22:49:22 2013 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    merge &amp; fix hello.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二：修改-gitconfig\"><a href=\"#方法二：修改-gitconfig\" class=\"headerlink\" title=\"方法二：修改 .gitconfig\"></a>方法二：修改 .gitconfig</h2><p>如果我们拿到的是一台新电脑，像上面那样一行一行敲设置简写的命令的话会将一件本来让自己方便的事变得很麻烦，所以有没有一次性设置全部简写命令的方法呢？当然是有的了（要不然我这个方法二从何而来），就是修改 .gitconfig 文件，其实我们上面那些命令就是在一次次的修改 .gitconfig 文件；.gitconfig 文件在哪呢？理论上就在你的主目录下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_102.png\" alt=\"\" width=\"400\"></div>\n\n<p>从上图可以看到，可以通过 cat ~/.gitconfig 查看自己电脑的 .gitconfig 文件内容，而由于我已经设置了 git 别名，所以该文件中会有 [alias] 内容，那么你就可以通过在这个文件中添加类似的内容来配置你自己的别名了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">alias</span>]</span><br><span class=\"line\">    co = checkout</span><br><span class=\"line\">    ci = commit</span><br><span class=\"line\">    st = status</span><br><span class=\"line\">    pl = pull</span><br><span class=\"line\">    ps = push</span><br><span class=\"line\">    dt = difftool</span><br><span class=\"line\">    l = <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\">    cp = cherry-pick</span><br><span class=\"line\">    ca = commit -a</span><br><span class=\"line\">    b = branch</span><br></pre></td></tr></table></figure>\n<p>和方法一一样，如果你只想要在某些项目中使用简写，可以进入项目的目录，然后编辑 .git/config 文件，加入上面的内容就可以了</p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]},{"title":"搜狐研究院前端散招面试题总结","slug":"搜狐研究院前端散招面试题总结","date":"2017-05-19T02:06:37.000Z","updated":"2019-01-27T13:15:42.895Z","comments":true,"path":"api/articles/搜狐研究院前端散招面试题总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>首先，搜狐媒体大厦还是蛮阔气的，但是门口的保安让我在沙发区稍等一会儿的时候，我看到那里有 5 个类似员工的人在打王者荣耀。。果然“大公司”的员工氛围就是不一样啊。。后来等了大概 10 分钟左右，一个挂有实习工作牌的女士把我带到了 9 楼，这里应该是搜狐员工办公的地方，两边都有比较大的办公区，然后中间有一块稍微小一点的地方用来面试和聊天，hr 姐姐首先让我做了一下搜狐的笔试题，然后说大概一个小时，如果做完了就给她打电话，然后就自己走开了（连杯水都没有倒，实习生就是这样的吗。。）， 做完了之后就有一位男士拿着我的简历过来了，整个面试的过程堪称尴尬，因为我的简历上写有“关注ES6”，所以这位年轻的面试官就开始各种问 ES6 相关的东西，还问我和 react 相关的东西，比如让我讲一下 react 的设计思想啊什么的。。难道这就是“关注ES6”想要表达的意思吗？后来他可能感觉也比较尴尬了，就问了一些 JS 相关的东西，比如 self 和 this 的区别啊什么的，但是我的水平实在有限，这位面试官的前端水平实在是在我之上太多，所以我也是基本上全程蒙蔽，更别提让我用 jQuery 实现一个 promise 对象了（对了，这位面试官连 jQ 的 when() 方法都不知道。。），就这样结束了一面，当然由于我的水平实在太低，所以就直接让我走人了（不过我也比较饿了，想回学校吃点东西了。。）</p>\n<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><h3 id=\"一、不定项选择题\"><a href=\"#一、不定项选择题\" class=\"headerlink\" title=\"一、不定项选择题\"></a>一、不定项选择题</h3><p>我不知道笔试题能不能拍照，但是我还是冒着被批评和留下不好印象的风险拍了一下，总体来说难度还是适中的，其中有些题还是蛮经典的，大家可以自行消化</p>\n<h4 id=\"1-以下元素为块级元素的有：\"><a href=\"#1-以下元素为块级元素的有：\" class=\"headerlink\" title=\"1. 以下元素为块级元素的有：\"></a>1. 以下元素为块级元素的有：</h4><ul>\n<li>p</li>\n<li>strong</li>\n<li>span</li>\n<li>section</li>\n</ul>\n<h4 id=\"2-以下可以使元素不可见的有：\"><a href=\"#2-以下可以使元素不可见的有：\" class=\"headerlink\" title=\"2. 以下可以使元素不可见的有：\"></a>2. 以下可以使元素不可见的有：</h4><ul>\n<li>display: none</li>\n<li>width:0; height:0; overflow:hidden</li>\n<li>visibility: hidden</li>\n<li>display: inline</li>\n</ul>\n<h4 id=\"3-以下正确的有：\"><a href=\"#3-以下正确的有：\" class=\"headerlink\" title=\"3. 以下正确的有：\"></a>3. 以下正确的有：</h4><ul>\n<li>Number.MIN_VALUE &gt; 0</li>\n<li>Number(1) == new Number(1)</li>\n<li>null == undefined</li>\n<li>NaN == NaN</li>\n</ul>\n<h4 id=\"4-以下会有错误发生的有：\"><a href=\"#4-以下会有错误发生的有：\" class=\"headerlink\" title=\"4. 以下会有错误发生的有：\"></a>4. 以下会有错误发生的有：</h4><ul>\n<li>9..toString()  //“9”</li>\n<li>alert(a)  //a is not defined</li>\n<li>eval(‘a’)  //a is not defined</li>\n<li>console.log(Number)</li>\n</ul>\n<h4 id=\"5-以下哪些情况会促发-BFC？\"><a href=\"#5-以下哪些情况会促发-BFC？\" class=\"headerlink\" title=\"5. 以下哪些情况会促发 BFC？\"></a>5. 以下哪些情况会促发 BFC？</h4><ul>\n<li>float 不为 none</li>\n<li>position 为 fixed</li>\n<li>display 为 static</li>\n<li>overflow 为 scroll</li>\n</ul>\n<h4 id=\"6-哪些元素会生成-BFC：\"><a href=\"#6-哪些元素会生成-BFC：\" class=\"headerlink\" title=\"6. 哪些元素会生成 BFC：\"></a>6. 哪些元素会生成 BFC：</h4><ol>\n<li>根元素</li>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow 不为 visible</li>\n</ol>\n<h3 id=\"二、填空题\"><a href=\"#二、填空题\" class=\"headerlink\" title=\"二、填空题\"></a>二、填空题</h3><h4 id=\"1-一个-div-垂直居中于整个-body-的-css-代码：\"><a href=\"#1-一个-div-垂直居中于整个-body-的-css-代码：\" class=\"headerlink\" title=\"1. 一个 div 垂直居中于整个 body 的 css 代码：\"></a>1. 一个 div 垂直居中于整个 body 的 css 代码：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\"><a href=\"#2-以下代码的打印结果为：10-10-10-10-10-10-10-10-10-10\" class=\"headerlink\" title=\"2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10\"></a>2. 以下代码的打印结果为：10 10 10 10 10 10 10 10 10 10</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-匹配邮箱的正则表达式：\"><a href=\"#3-匹配邮箱的正则表达式：\" class=\"headerlink\" title=\"3. 匹配邮箱的正则表达式：\"></a>3. 匹配邮箱的正则表达式：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\[a-z0<span class=\"number\">-9</span>\\]+(\\[._\\\\\\-\\]*\\[a-z0<span class=\"number\">-9</span>\\])*@(\\[a-z0<span class=\"number\">-9</span>\\]+\\[-a-z0<span class=\"number\">-9</span>\\]*\\[a-z0<span class=\"number\">-9</span>\\]+.)&#123;<span class=\"number\">1</span>,<span class=\"number\">63</span>&#125;\\[a-z0<span class=\"number\">-9</span>\\]+$</span><br></pre></td></tr></table></figure>\n<p>对于该正则表达式的解释：<a href=\"http://www.jb51.net/article/31182.htm\" target=\"_blank\" rel=\"noopener\">比较正宗的验证邮箱的正则表达式js代码详解</a></p>\n<h4 id=\"4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\"><a href=\"#4-对纯数字数组中每个元素进行乘以-2-后再取数组中的最小值\" class=\"headerlink\" title=\"4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值\"></a>4. 对纯数字数组中每个元素进行乘以 2 后再取数组中的最小值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleMin</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于数组 map() 方法的讲解：<a href=\"http://www.cnblogs.com/xuan52rock/p/4460949.html\" target=\"_blank\" rel=\"noopener\">js 数组 map方法</a></p>\n<h4 id=\"5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\"><a href=\"#5-对以下数组按照拼音首字母排序-arr-‘研发中心’-’视频中心’-’焦点部门’-’新闻部门’\" class=\"headerlink\" title=\"5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]\"></a>5. 对以下数组按照拼音首字母排序 arr: [‘研发中心’,’视频中心’,’焦点部门’,’新闻部门’]</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> af = a.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bf = b.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(af.localeCompare(bf) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(af.localeCompare(bf) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、简答题\"><a href=\"#三、简答题\" class=\"headerlink\" title=\"三、简答题\"></a>三、简答题</h3><h4 id=\"1-实现：var-a-add-10-3-2-a打印结果为15\"><a href=\"#1-实现：var-a-add-10-3-2-a打印结果为15\" class=\"headerlink\" title=\"1. 实现：var a = add(10)(3)(2) // a打印结果为15\"></a>1. 实现：var a = add(10)(3)(2) // a打印结果为15</h4><p>这是一道关于类型转换的问题：<a href=\"http://web.jobbole.com/90654/\" target=\"_blank\" rel=\"noopener\">一道面试题引发的对 javascript 类型转换的思考</a></p>\n<h4 id=\"2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\"><a href=\"#2-实现一个加载的动画-该动画有至少三个小圆，分别变大变小富有层次感-（只能使用-css）\" class=\"headerlink\" title=\"2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）\"></a>2. 实现一个加载的动画(该动画有至少三个小圆，分别变大变小富有层次感)（只能使用 css）</h4><p>利用关键帧动画 @keyframes 就可以达到，网上有好多关于加载动画实现的文章，推荐一下类似这道题想要的效果的文章：<a href=\"http://www.cnblogs.com/zourong/p/4022729.html\" target=\"_blank\" rel=\"noopener\">CSS 实现加载动画之八-圆点旋转</a>、<a href=\"http://www.jq22.com/yanshi12864\" target=\"_blank\" rel=\"noopener\">6种CSS3加载动画</a></p>\n<h4 id=\"3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\"><a href=\"#3-HTTP-是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈-localStorage-和-sessionStorage-的区别，对离线缓存，甚至是-indexDB-的理解\" class=\"headerlink\" title=\"3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解\"></a>3. HTTP 是一个无状态的协议，那网站是如何记住用户信息的呢？请写出详细过程；同时谈谈 localStorage 和 sessionStorage 的区别，对离线缓存，甚至是 indexDB 的理解</h4><p>网站是如何记住用户信息的：<a href=\"http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">无状态协议中认证状态保持方案的一些思考</a></p>\n<h4 id=\"4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\"><a href=\"#4-请用-JS-实现一个简单的列表-List-类，使得其具有-show-展示该-list-的所有元素-，add-向-list-添加一个元素，无返回-，delete-删除指定位置的元素，并返回删除成功否-，clear-清空-list-；\" class=\"headerlink\" title=\"4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；\"></a>4. 请用 JS 实现一个简单的列表(List)类，使得其具有 show(展示该 list 的所有元素)，add(向 list 添加一个元素，无返回)，delete(删除指定位置的元素，并返回删除成功否)，clear(清空 list)；</h4><p>在 JS 中是没有类的，所以其实是用 function 来间接实现，这类实现在我的另一篇文章里大量提到：<a href=\"/20170326/complex-data-structure-implemented-by-js.html\">JS 实现复杂数据结构</a></p>\n<h4 id=\"5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\"><a href=\"#5-请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用-css-和-html，不考虑兼容性）\" class=\"headerlink\" title=\"5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）\"></a>5. 请分别实现一个菱形，一个倒三角，一个椭圆形的答案（只能使用 css 和 html，不考虑兼容性）</h4><p>在 css 中，通过 border 和旋转可以实现很多种图形，我在这个方面也是比较白痴的，所以推荐以下文章：<a href=\"http://www.2cto.com/kf/201604/500811.html\" target=\"_blank\" rel=\"noopener\">CSS3实现32种基本图形</a>、<a href=\"http://www.cnblogs.com/pigtail/archive/2013/02/17/2914119.html\" target=\"_blank\" rel=\"noopener\">利用css样式画各种图形–初步、进阶、高级（一）</a>（感觉这两篇文章的排版和图片都不是很好，找时间我会自己再总结一下）</p>\n<h4 id=\"6-简要回答你对跨域的理解，为什么要跨域，如何跨域\"><a href=\"#6-简要回答你对跨域的理解，为什么要跨域，如何跨域\" class=\"headerlink\" title=\"6. 简要回答你对跨域的理解，为什么要跨域，如何跨域\"></a>6. 简要回答你对跨域的理解，为什么要跨域，如何跨域</h4><p>跨域这种问题应该是老生常谈了，其实就是浏览器的一种“同源策略”，为了保证安全而采取的措施，具体大家自行搜索吧，关于跨域的文章实在是太多了</p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><h3 id=\"1-localStorage-和-sessionStorage-的区别\"><a href=\"#1-localStorage-和-sessionStorage-的区别\" class=\"headerlink\" title=\"1. localStorage 和 sessionStorage 的区别\"></a>1. localStorage 和 sessionStorage 的区别</h3><ul>\n<li>localStorage 和 sessionStorage 一样都是用来存储客户端临时信息的对象。</li>\n<li>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</li>\n<li>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。</li>\n<li>sessionStorage 生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过 sessionStorage 存储的数据也就被清空了。</li>\n<li>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</li>\n</ul>\n<h3 id=\"2-JS中self和this的区别\"><a href=\"#2-JS中self和this的区别\" class=\"headerlink\" title=\"2. JS中self和this的区别\"></a>2. JS中self和this的区别</h3><p>不知道为什么面试官会问这个问题，因为 self 好像在 react 才会经常用到吧？。。但是我还是查了一下，网上对这两个的区别的解释很少，大致就是：self 指向本窗口，this 指向就比较广泛了</p>\n<h3 id=\"3-如何实现-JS-中的防抖动和节流阀\"><a href=\"#3-如何实现-JS-中的防抖动和节流阀\" class=\"headerlink\" title=\"3. 如何实现 JS 中的防抖动和节流阀\"></a>3. 如何实现 JS 中的防抖动和节流阀</h3><p>这个功能其实经常用到，但是面试官给我的答案是 underscore.js 源码中有，然后说 jQuery 的第三方库应该也有。。估计是这位面试官经常用 underscore.js 解决重复点击的问题，然后至于怎么实现的自己也不知道。。（我就没好意思再问了，以免造成尴尬的局面），推荐一下解释的很清楚的文章（这是一篇中文译文，英文原文可以点击下面这篇文章中的原文链接）：<a href=\"http://www.tuicool.com/articles/VfyMBrI\" target=\"_blank\" rel=\"noopener\">实例解析防抖动（Debouncing）和节流阀（Throttling）</a></p>\n<h3 id=\"4-HTML5-使任何元素变为可编辑的属性\"><a href=\"#4-HTML5-使任何元素变为可编辑的属性\" class=\"headerlink\" title=\"4. HTML5 使任何元素变为可编辑的属性\"></a>4. HTML5 使任何元素变为可编辑的属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contenteditable=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\"><a href=\"#5-当给-line-height-设置为-5rem、5em、5px、5pt、500-、5-时的计算公式\" class=\"headerlink\" title=\"5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式\"></a>5. 当给 line-height 设置为 5rem、5em、5px、5pt、500%、5 时的计算公式</h3><p>在张鑫旭的慕课网讲解视频（深入理解 CSS 系列）中曾经讲到过这些单位的含义和作用，具体可以点击下面链接查看我对他的讲解的总结：<a href=\"/20170421/line-height-of-css.html\">CSS 深入理解之 line-height</a>，具体计算公式和作用如下：</p>\n<ul>\n<li>5rem：按照 html 的 font-size 进行计算</li>\n<li>5em：按照自身的 font-size 进行计算</li>\n<li>5px：相对长度单位，像素</li>\n<li>5pt：绝对长度单位，点 Points (1点 = 1/72英寸)</li>\n<li>500%：按照自身的 font-size 进行计算</li>\n<li>5：同样按照自身的 font-size 进行计算</li>\n</ul>\n<p>可以看出，line-height 的值如果不是具体数值，都是按照 font-size 进行计算的，同时 500%/5em/5 有什么区别呢？在张鑫旭的讲解中也提到了，500%/5em 会根据自身的 font-size 进行计算，得到具体数值后将行高继承给后代元素，而 5 只会将比例继承给后代元素，后代元素会根据自己的 font-size 重新计算行高</p>\n<blockquote>\n<p>更新自2017-10-11：突然发现小程序中有一个很有趣的长度单位 rpx，具体参见这篇文章：<a href=\"http://huang-jerryc.com/2017/05/21/talk-about-pixel-and-rpx/\" target=\"_blank\" rel=\"noopener\">谈谈像素以及微信小程序的 rpx</a></p>\n</blockquote>\n<h3 id=\"6-oninput-事件和-onchange-事件的区别\"><a href=\"#6-oninput-事件和-onchange-事件的区别\" class=\"headerlink\" title=\"6. oninput 事件和 onchange 事件的区别\"></a>6. oninput 事件和 onchange 事件的区别</h3><p>onchange 事件经常用到（图片、文件上传），但是 oninput 事件却没有用过了，推荐：<a href=\"http://blog.csdn.net/freshlover/article/details/39050609\" target=\"_blank\" rel=\"noopener\">总结oninput、onchange与onpropertychange事件的用法和区别</a></p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"今日头条前端散招内推面试经验总结","slug":"今日头条前端散招内推面试经验总结","date":"2017-05-17T07:33:40.000Z","updated":"2019-01-27T13:15:42.891Z","comments":true,"path":"api/articles/今日头条前端散招内推面试经验总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><p>可能是内推的缘故，在面试之前前台工作人员给了一套前端的笔试题，然后就分配了一个小房间开始做题，虽然没有指明不可以手机搜索，但是为了保证最起码的诚信，我全程都没有看手机，完全凭自己的水平答题，虽然最后面试官把原题拿走了，但是我还是能靠记忆回想起一些题目，总结如下：</p>\n<h3 id=\"1-替换元素和非替换元素有哪些，它们的差异是什么？\"><a href=\"#1-替换元素和非替换元素有哪些，它们的差异是什么？\" class=\"headerlink\" title=\"1. 替换元素和非替换元素有哪些，它们的差异是什么？\"></a>1. 替换元素和非替换元素有哪些，它们的差异是什么？</h3><h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。 比如：<code>&lt;input type=&quot;text&quot;/&gt;</code>，这是一个文本输入框，换一个其他 type 的时候，浏览器显示就不一样，HTML 中的 <code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;object&gt;</code> 都是替换元素，这些元素都没有实际的内容。</p>\n<h4 id=\"非替换元素\"><a href=\"#非替换元素\" class=\"headerlink\" title=\"非替换元素\"></a>非替换元素</h4><p>HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。 比如 <code>&lt;p&gt;merrier.wang&lt;/p&gt;</code>、<code>&lt;label&gt;Merrier&lt;/label&gt;</code> 浏览器将把这段内容直接显示出来。</p>\n<h3 id=\"2-offsetWidth、clientWidth、scrollWidth-如何计算？\"><a href=\"#2-offsetWidth、clientWidth、scrollWidth-如何计算？\" class=\"headerlink\" title=\"2. offsetWidth、clientWidth、scrollWidth 如何计算？\"></a>2. offsetWidth、clientWidth、scrollWidth 如何计算？</h3><h4 id=\"offsetWidth\"><a href=\"#offsetWidth\" class=\"headerlink\" title=\"offsetWidth\"></a>offsetWidth</h4><ul>\n<li>无 <code>padding</code> 无滚动无 <code>border</code><ul>\n<li>offsetWidth = clientWidth = 盒子的宽度</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 无滚动有 <code>border</code><ul>\n<li>offsetWidth = 盒子的宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 边框宽度*2</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 有滚动，且滚动是显示的，有 <code>border</code><ul>\n<li>offsetWidth = 盒子宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 滚动轴宽度 + 边框宽度 * 2</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"clientWidth\"><a href=\"#clientWidth\" class=\"headerlink\" title=\"clientWidth\"></a>clientWidth</h4><ul>\n<li>无 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code></li>\n<li>有 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code> + 盒子的 <code>padding * 2</code></li>\n<li>有 <code>padding</code> 有滚动 ：<code>clientWidth</code> = 盒子和 <code>width</code> + 盒子的 <code>padding * 2</code> - 滚动轴宽度</li>\n</ul>\n<h4 id=\"scrollWidth\"><a href=\"#scrollWidth\" class=\"headerlink\" title=\"scrollWidth\"></a>scrollWidth</h4><p>无滚动轴时：</p>\n<ul>\n<li>scrollWidth = clientWidth = 盒子宽度 + 盒子 padding * 2</li>\n</ul>\n<p>有滚动轴时：</p>\n<ul>\n<li>scrollWidth = 实际内容的宽度 + padding * 2</li>\n<li>scrollHeight = 实际内容的高度 + padding * 2</li>\n</ul>\n<p>更多关于 JS 中的宽高可以狠狠的点击这里：<a href=\"/20170501/js-width-and-height.html\">JS 宽高的理解和应用</a></p>\n<h3 id=\"3-JS-中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\"><a href=\"#3-JS-中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\" class=\"headerlink\" title=\"3. JS 中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例\"></a>3. JS 中的标准事件模型是什么？是所有的事件都会冒泡吗？不是的话请举例</h3><p>DOM2 标准事件模型：每一个 DOM 元素所触发的事件都要经历三个阶段：</p>\n<ol>\n<li>捕获阶段</li>\n<li>目标对象本身的事件处理程序调用阶段</li>\n<li>冒泡阶段</li>\n</ol>\n<p>在 IE8 以上的版本以及其他的浏览器中通过 e.stopPropagation() 方式阻止事件的冒泡；在 IE8  以下的浏览器中通过 e.cancleBubble = true 阻止事件冒泡；jQ 中的 mouseenter 和 mouseleave 也是默认不冒泡</p>\n<h3 id=\"4-CSS-选择器的优先级是什么？\"><a href=\"#4-CSS-选择器的优先级是什么？\" class=\"headerlink\" title=\"4. CSS 选择器的优先级是什么？\"></a>4. CSS 选择器的优先级是什么？</h3><p>!important &gt; 内联 &gt; id &gt; class &gt; 标签(p、a、div) &gt; 通配符(*) &gt; 浏览器自定义</p>\n<p>更多关于 CSS 选择器的的内容：<a href=\"/20170403/css-selector.html\">前端面试系列（4）——CSS选择器</a></p>\n<h3 id=\"5-IFC-是什么？它的作用是什么？\"><a href=\"#5-IFC-是什么？它的作用是什么？\" class=\"headerlink\" title=\"5. IFC 是什么？它的作用是什么？\"></a>5. IFC 是什么？它的作用是什么？</h3><h4 id=\"What’s-FC？\"><a href=\"#What’s-FC？\" class=\"headerlink\" title=\"What’s FC？\"></a>What’s FC？</h4><p>FC 的全称是：Formatting Contexts，是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<h4 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h4><p>IFC(Inline Formatting Contexts) 直译为”内联格式化上下文”，IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding / margin 影响)，IFC 中的 line box 一般左右都贴紧整个 IFC，但是会因为 float 元素而扰乱。float 元素会位于 IFC 与 line box 之间，使得 line box 宽度缩短。 同个 IFC 下的多个 line box 高度会不同。IFC 中是不可能有块级元素的，当插入块级元素时（如 p 中插入 div），会产生两个匿名块与 div 分隔开，即产生两个 IFC，每个 IFC 对外表现为块级元素，与 div 垂直排列。</p>\n<p><strong>那么IFC一般有什么用呢？</strong></p>\n<ul>\n<li>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</li>\n<li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>\n</ul>\n<h4 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h4><p>BFC(Block Formatting Contexts) 直译为”块级格式化上下文”。Block Formatting Contexts 就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。 </p>\n<p><strong>如何产生 BFC？</strong></p>\n<ol>\n<li>float 的值不为 none。</li>\n<li>overflow 的值不为 visible。</li>\n<li>position 的值不为 relative 和 static。</li>\n<li>display 的值为 table-cell, table-caption, inline-block 中的任何一个。</li>\n</ol>\n<p><strong>那BFC 一般有什么用呢？</strong> </p>\n<p>比如常见的多栏布局，结合块级别元素浮动，里面的元素则是在一个相对隔离的环境里运行。 CSS2.1 中只有 BFC 和 IFC，CSS3 中才有 GFC 和 FFC，更多关于这些 FC 的内容可以查看：<a href=\"http://www.jshacker.com/note/3608\" target=\"_blank\" rel=\"noopener\">小科普：到底什么是BFC、IFC、GFC和FFC，次奥？</a></p>\n<h3 id=\"6-如何实现一个自适应正方形\"><a href=\"#6-如何实现一个自适应正方形\" class=\"headerlink\" title=\"6. 如何实现一个自适应正方形\"></a>6. 如何实现一个自适应正方形</h3><p>这个问题在我前不久的一篇文章里有总结过，可以<a href=\"/20170516/realization-of-adaptive-square-in-pure-css.html\">点击这里</a>查看</p>\n<h3 id=\"7-http-mp-toutiao-com-向-http-toutiao-com-发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\"><a href=\"#7-http-mp-toutiao-com-向-http-toutiao-com-发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\" class=\"headerlink\" title=\"7. http://mp.toutiao.com 向 http://toutiao.com 发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？\"></a>7. <a href=\"http://mp.toutiao.com\" target=\"_blank\" rel=\"noopener\">http://mp.toutiao.com</a> 向 <a href=\"http://toutiao.com\" target=\"_blank\" rel=\"noopener\">http://toutiao.com</a> 发送请求的话，跨域了吗，能收到请求吗，是什么样的请求？</h3><p>判断跨域的指标：域名、协议、端口，只要有其中一项不一致就会发生跨域</p>\n<h3 id=\"8-请介绍一下-XSS-和-CSRF-的区别，如何防御？\"><a href=\"#8-请介绍一下-XSS-和-CSRF-的区别，如何防御？\" class=\"headerlink\" title=\"8. 请介绍一下 XSS 和 CSRF 的区别，如何防御？\"></a>8. 请介绍一下 XSS 和 CSRF 的区别，如何防御？</h3><h4 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h4><p>XSS 全称“跨站脚本”（Cross-site scripting），是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>\n<h4 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h4><p>CSRF 的全称是“跨站请求伪造”（Cross-site request forgery），而 XSS 的全称是“跨站脚本”。看起来有点相似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户，但前面说了，它们的攻击类型是不同维度上的分类。CSRF 顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份（包括使用服务器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。 严格意义上来说，CSRF 不能分类为注入攻击，因为 CSRF 的实现途径远远不止 XSS 注入这一条。通过 XSS 来实现 CSRF 易如反掌，但对于设计不佳的网站，一条正常的链接都能造成 CSRF。</p>\n<h4 id=\"防御-XSS-攻击可以通过以下两方面操作：\"><a href=\"#防御-XSS-攻击可以通过以下两方面操作：\" class=\"headerlink\" title=\"防御 XSS 攻击可以通过以下两方面操作：\"></a>防御 XSS 攻击可以通过以下两方面操作：</h4><ol>\n<li>对用户表单输入的数据进行过滤，对 javascript 代码进行转义，然后再存入数据库；</li>\n<li>在信息的展示页面，也要进行转义，防止 javascript 在页面上执行。</li>\n</ol>\n<h4 id=\"CSRF-攻击的防御可以通过以下两方面操作：\"><a href=\"#CSRF-攻击的防御可以通过以下两方面操作：\" class=\"headerlink\" title=\"CSRF 攻击的防御可以通过以下两方面操作：\"></a>CSRF 攻击的防御可以通过以下两方面操作：</h4><ol>\n<li>所有需要用户登录之后才能执行的操作属于重要操作，这些操作传递参数应该使用 post 方式，更加安全；</li>\n<li>为防止跨站请求伪造，我们在某次请求的时候都要带上一个 csrf_token 参数，用于标识请求来源是否合法，csrf_token 参数由系统生成，存储在 SESSION 中。</li>\n</ol>\n<h4 id=\"更多关于-XSS-和-CSRF-的解释：\"><a href=\"#更多关于-XSS-和-CSRF-的解释：\" class=\"headerlink\" title=\"更多关于 XSS 和 CSRF 的解释：\"></a>更多关于 XSS 和 CSRF 的解释：</h4><ul>\n<li><a href=\"http://blog.csdn.net/koastal/article/details/52905358\" target=\"_blank\" rel=\"noopener\">浅析XSS和CSRF攻击及防御</a></li>\n<li><a href=\"https://www.zhihu.com/question/34445731?sort=created\" target=\"_blank\" rel=\"noopener\">如何用简洁生动的语言理清XSS和CSRF的区别？</a></li>\n</ul>\n<h3 id=\"9-JSBridge-是什么，它的作用是什么？\"><a href=\"#9-JSBridge-是什么，它的作用是什么？\" class=\"headerlink\" title=\"9. JSBridge 是什么，它的作用是什么？\"></a>9. JSBridge 是什么，它的作用是什么？</h3><p>在开发中我们经常需要 web 和 native 进行交互，也就是要用到经常听到的 “JSBridge”。由于我对这个东西也是停留在概念层面，所以推荐其他人的一篇文章吧：<a href=\"http://blog.csdn.net/jjx0224/article/details/52788922\" target=\"_blank\" rel=\"noopener\">理解JSBridge</a></p>\n<h3 id=\"10-TCP-和-UDP-的区别，以及如何进行拥塞控制？\"><a href=\"#10-TCP-和-UDP-的区别，以及如何进行拥塞控制？\" class=\"headerlink\" title=\"10. TCP 和 UDP 的区别，以及如何进行拥塞控制？\"></a>10. TCP 和 UDP 的区别，以及如何进行拥塞控制？</h3><ol>\n<li>TCP 面向连接（如打电话要先拨号建立连接）；UDP 是无连接的，即发送数据之前不需要建立连接</li>\n<li>TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP 尽最大努力交付，即不保证可靠交付</li>\n<li>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流；UDP 是面向报文的，UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）</li>\n<li>每一条 TCP 连接只能是点到点的；UDP 支持一对一，一对多，多对一和多对多的交互通信</li>\n<li>TCP 首部开销 20 字节；UDP 的首部开销小，只有 8 个字节</li>\n<li>TCP 的逻辑通信信道是全双工的可靠信道，UDP 则是不可靠信道</li>\n</ol>\n<p>更多关于 TCP 和 UDP 的区别：<a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">TCP和UDP的最完整的区别</a></p>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。<br><strong>几种拥塞控制方法</strong>：慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。 更多关于拥塞控制：<a href=\"http://blog.csdn.net/kinger0/article/details/48206999\" target=\"_blank\" rel=\"noopener\">TCP/IP详解–拥塞控制 &amp; 慢启动 快恢复 拥塞避免</a></p>\n<h3 id=\"11-有一无序数组，数组个数为-m，如何从这-m-个数里面找到-N-个数，使这-N-个数的和为-M；并阐述时间复杂度和空间复杂度\"><a href=\"#11-有一无序数组，数组个数为-m，如何从这-m-个数里面找到-N-个数，使这-N-个数的和为-M；并阐述时间复杂度和空间复杂度\" class=\"headerlink\" title=\"11. 有一无序数组，数组个数为 m，如何从这 m 个数里面找到 N 个数，使这 N 个数的和为 M；并阐述时间复杂度和空间复杂度\"></a>11. 有一无序数组，数组个数为 m，如何从这 m 个数里面找到 N 个数，使这 N 个数的和为 M；并阐述时间复杂度和空间复杂度</h3><p>这个属于比较经典的 <a href=\"http://baike.baidu.com/item/01%E8%83%8C%E5%8C%85\" target=\"_blank\" rel=\"noopener\">01背包问题</a>，网上有很多关于这种问题的求解方式，基本上包括递归、动态规划、无脑循环等方法，推荐以下比较靠谱的解法：<a href=\"http://www.cnblogs.com/iyangyuan/p/3908498.html\" target=\"_blank\" rel=\"noopener\">动态规划（JS）</a>、<a href=\"http://blog.csdn.net/min_jie/article/details/3966867\" target=\"_blank\" rel=\"noopener\">无脑循环</a></p>\n<h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><p>一面的时间很长，大概有将近一个小时的感觉，所以问的问题涉及的领域和方面也比较多，所以我就想到什么写下什么了，另外也不赋答案了，实在有点多。。</p>\n<ol>\n<li>__proto__ 是什么意思</li>\n<li>JS 实现继承的方式</li>\n<li>object.defineproprety() 方法的参数和含义</li>\n<li>setTimeout(func,0) 中设置延时为 “0” 的目的</li>\n<li>jQuery 中对 Promise() 的 when() 方法的实现原理</li>\n<li>HTTP 和 TCP 的关系</li>\n<li>TCP 三次握手</li>\n<li>HTTP 如何达到在下一次连接时不用再 TCP 三次握手的</li>\n<li>如何实现一个自适应正方形</li>\n<li>浏览器渲染的过程</li>\n<li>重排和重绘的触发时机和区别</li>\n<li>层叠上下文起作用的前提</li>\n<li>前端路由和后端路由的区别</li>\n<li>首屏加载完毕之后 <code>&lt;script&gt;&lt;/script&gt;</code> 代码的加载顺序</li>\n<li>vue.js 的设计思想</li>\n<li>如果用 jQuery 实现双向数据绑定，应该如何实现</li>\n<li>当 content-length 过长时，应该如何传输数据</li>\n<li>JS 文件中的代码执行顺序</li>\n<li>详细讲解一下 JS 中宏任务和微任务的判断机制</li>\n<li>如果有别的库中也用到了 “$”，如何解决和 jQuery 的冲突</li>\n</ol>\n<h2 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h2><p>二面相对于一面来说，就简单随意了很多，问了一些项目的事情，还问了技术选型方面的问题，最后出了一道算法题让我做，我思考了大概 15 分钟，感觉真心写不出代码，就和面试官简单的讲了一下思路，面试官思考了一段时间之后就告诉我二面结束了，可以 hr 面了；至此，技术面就全部结束了。</p>\n","raw":null,"categories":[{"name":"frontend","path":"api/categories/frontend.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"纯CSS实现自适应正方形","slug":"纯CSS实现自适应正方形","date":"2017-05-16T09:00:27.000Z","updated":"2019-01-27T13:15:42.899Z","comments":true,"path":"api/articles/纯CSS实现自适应正方形.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_231.png","content":"<p>首先，自适应正方形是指宽度和高度随着屏幕宽度（不管是移动端还是 PC 端）进行等比例变化的正方形，在处理移动端页面时，我们有时会需要将 banner 图做成与屏幕等宽的正方形以获得最佳的体验效果，如 <a href=\"http://flipboard.com/@news/\" target=\"_blank\" rel=\"noopener\">Flipbord的移动页面</a>，而在 PC 端，我们也可能需要实现一个随屏幕宽度变化的正方形，从而达到某些效果；那么应该怎么使用纯 CSS 制作出能够自适应大小的正方形呢？</p>\n<h2 id=\"方案一：CSS3-vw-单位\"><a href=\"#方案一：CSS3-vw-单位\" class=\"headerlink\" title=\"方案一：CSS3 vw 单位\"></a>方案一：CSS3 vw 单位</h2><p>CSS3 中新增了一组相对于可视区域百分比的长度单位 vw, vh, vmin, vmax。其中vw是相对于视口宽度百分比的单位，1vw = 1% viewport width，vh是相对于视口高度百分比的单位，1vh = 1% viewport height；vmin 是相对当前视口宽高中较小的一个的百分比单位，同理 vmax 是相对当前视口宽高中较大的一个的百分比单位。<a href=\"http://caniuse.com/#search=vw\" target=\"_blank\" rel=\"noopener\">该单位浏览器兼容性</a>如下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_231.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"placeholder\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：简洁方便 缺点：浏览器兼容不好</p>\n<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#viewwidth\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"方法二：设置垂直方向的-padding-撑开容器\"><a href=\"#方法二：设置垂直方向的-padding-撑开容器\" class=\"headerlink\" title=\"方法二：设置垂直方向的 padding 撑开容器\"></a>方法二：设置垂直方向的 padding 撑开容器</h2><p>在 CSS 盒模型中，一个比较容易被忽略的就是 margin, padding 的百分比数值计算。按照规定，<strong>margin, padding 的百分比数值是相对父元素宽度的宽度计算的</strong>。由此可以发现只需将元素垂直方向的一个 padding 值设定为与 width 相同的百分比就可以制作出自适应正方形了：</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: bottom:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果正方形中没有内容（相当于只是一个几何里面的正方形，并没有展示其他任何内容），一切看起来都很正常；但是，如果正方形中有其他内容（这种情况会更常见一些，比如说有一些文本和图片），此时容器的高度就会被拉伸，因为<a href=\"/20170403/css-box-model.html\">盒子模型</a>中的 padding 是不包含在 content 中的，所以我们可以通过 height:0 解决这个问题；这种方案简洁明了，且兼容性好；但是除了填充内容后会出现问题以外，还有可能碰上<a href=\"https://idiotwu.me/study/responsive-square/#maxheight\" target=\"_blank\" rel=\"noopener\">max-height不收缩</a>，于是第三种方案来了：</p>\n<h2 id=\"方案三：利用伪元素的-margin-padding-top-撑开容器\"><a href=\"#方案三：利用伪元素的-margin-padding-top-撑开容器\" class=\"headerlink\" title=\"方案三：利用伪元素的 margin(padding)-top 撑开容器\"></a>方案三：利用伪元素的 margin(padding)-top 撑开容器</h2><p>在方案二中，我们利用百分比数值的 padding-bottom 属性撑开容器内部空间，但是这样做会导致在元素上设置的 max-height 属性失效；而失效的原因是 <a href=\"http://stackoverflow.com/questions/21750091/max-height-on-border-boxed-div-with-padding-is-not-set\" target=\"_blank\" rel=\"noopener\">max-height 属性只限制于 height</a>，也就是只会对元素的 content height 起作用。那么我们是不是能用一个子元素撑开 content 部分的高度，从而使 max-height 属性生效呢？我们来试试：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.placeholder</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/* margin 百分比相对父元素宽度计算 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一刷新页面，啊嘞？怎么什么也没有？ 这里就涉及到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing\" target=\"_blank\" rel=\"noopener\">margin collapse</a> 的概念了，由于容器与伪元素在垂直方向发生了外边距折叠，所以我们想象中的撑开父元素高度并没有出现。而应对的方法是在父元素上触发 BFC：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现效果-1\"><a href=\"#实现效果-1\" class=\"headerlink\" title=\"实现效果\"></a><a href=\"https://idiotwu.me/study/responsive-square/#margin\" target=\"_blank\" rel=\"noopener\">实现效果</a></h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是三种制作自适应正方形的方案，除去 CSS3 中的视口相对单位，主要利用到 margin, padding 的百分比数值相对父元素宽度的宽度计算得出来制作宽高相等、且相对视口宽度自适应的正方形。如果需求是制作相对视口高度自适应的正方形，估计就只能使用 vh 单位了吧~</p>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"Sublime Text插件推荐","slug":"Sublime Text插件推荐","date":"2017-05-14T12:44:19.000Z","updated":"2019-01-27T13:15:42.891Z","comments":true,"path":"api/articles/Sublime Text插件推荐.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_7.gif","content":"<h2 id=\"安装sublime-text2-插件的方法\"><a href=\"#安装sublime-text2-插件的方法\" class=\"headerlink\" title=\"安装sublime text2 插件的方法\"></a>安装sublime text2 插件的方法</h2><h3 id=\"直接安装\"><a href=\"#直接安装\" class=\"headerlink\" title=\"直接安装\"></a>直接安装</h3><p>安装 Sublime text 2 插件很方便，可以直接下载安装包解压缩到 Packages 目录（菜单 -&gt; preferences -&gt; packages）。</p>\n<h3 id=\"使用-Package-Control-组件安装\"><a href=\"#使用-Package-Control-组件安装\" class=\"headerlink\" title=\"使用 Package Control 组件安装\"></a>使用 Package Control 组件安装</h3><p>也可以安装 package control 组件，然后直接在线安装：</p>\n<ol>\n<li>按 Ctrl+` 调出 console（注：安装有 QQ 输入法的话这个快捷键会有冲突，输入法属性设置-输入法管理-取消热键切换至 QQ 拼音）</li>\n<li>粘贴以下代码到底部命令行并回车：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib2,os;pf=<span class=\"string\">'Package Control.sublime-package'</span>;ipp=sublime.installed\\_packages\\_path();os.makedirs(ipp) <span class=\"keyword\">if</span> not os.path.exists(ipp) <span class=\"keyword\">else</span> None;open(os.path.join(ipp,pf),<span class=\"string\">'wb'</span>).write(urllib2.urlopen(<span class=\"string\">'http://sublime.wbond.net/'</span>+pf.replace(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>())</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启 Sublime Text 2。</li>\n<li>如果在 Perferences -&gt; package settings 中看到 package control 这一项，则安装成功。</li>\n</ol>\n<h2 id=\"用-Package-Control-安装插件的方法\"><a href=\"#用-Package-Control-安装插件的方法\" class=\"headerlink\" title=\"用 Package Control 安装插件的方法\"></a>用 Package Control 安装插件的方法</h2><ol>\n<li>按下 Ctrl + Shift + P 调出命令面板</li>\n<li>输入 install，调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</li>\n</ol>\n<p>不爽的是，有的网络环境可能会不允许访问陌生的网络环境从而设置一道防火墙，而 Sublime Text 2 貌似无法设置代理，可能就获取不到安装包列表了。好，方法介绍完了，下面是本文正题，推荐一些 Sublime Text 2 插件：</p>\n<h2 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h2><h3 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h3><p>HTML / CSS 代码快速编写神器，Emmet 的前身是大名鼎鼎的 Zen coding，如果你从事 Web 前端开发的话，对该插件一定不会陌生。它使用仿 CSS 选择器的语法来生成代码，大大提高了 HTML / CSS代码编写的速度，比如下面的演示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_7.gif\" alt=\"\" width=\"400\"></div>\n\n<p>关于这一插件的牛逼之处就不再多言，这里有一篇讲解 Emmet 的文章讲的很详细：<a href=\"http://www.iteye.com/news/27580\" target=\"_blank\" rel=\"noopener\">Emmet：HTML/CSS代码快速编写神器</a></p>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>git 应该是必备的插件之一，而 sublime 对于 git 的支持也是很好的，关于如何在 sublime 中使用 git，可以查看下面这篇文章：<a href=\"http://www.jianshu.com/p/c3fabbeebbeb\" target=\"_blank\" rel=\"noopener\">sublime中git的使用</a>，我就不再过多描述了</p>\n<h3 id=\"Vue-Syntax-Highlight\"><a href=\"#Vue-Syntax-Highlight\" class=\"headerlink\" title=\"Vue Syntax Highlight\"></a>Vue Syntax Highlight</h3><p>这是一款可以让你的 .vue 文件也可以高亮的插件，鉴于最近在自学 vue，所以还是推荐一下这款插件吧，在 Package 里面搜索 vue 即可</p>\n","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"推荐","path":"api/tags/推荐.json"},{"name":"sublime","path":"api/tags/sublime.json"}]},{"title":"与MySQL的零距离接触","slug":"与MySQL的零距离接触","date":"2017-05-09T02:02:40.000Z","updated":"2019-01-27T13:15:42.891Z","comments":true,"path":"api/articles/与MySQL的零距离接触.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_207.png","content":"<h2 id=\"MySQL-基础\"><a href=\"#MySQL-基础\" class=\"headerlink\" title=\"MySQL 基础\"></a>MySQL 基础</h2><p>由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司，MySQL 是一个开源的<strong>关系型</strong>数据库管理系统，分为社区版和企业版</p>\n<h2 id=\"MySQL-一些常用参数\"><a href=\"#MySQL-一些常用参数\" class=\"headerlink\" title=\"MySQL 一些常用参数\"></a>MySQL 一些常用参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-D，–database=name</td>\n<td>打开指定数据库</td>\n</tr>\n<tr>\n<td>–delimiter=name</td>\n<td>指定分隔符</td>\n</tr>\n<tr>\n<td>-h，–host=name</td>\n<td>服务器名称</td>\n</tr>\n<tr>\n<td>-p，–password[=name]</td>\n<td>密码</td>\n</tr>\n<tr>\n<td>-P，–port=#</td>\n<td>端口号</td>\n</tr>\n<tr>\n<td>–prompt=name</td>\n<td>设置提示符</td>\n</tr>\n<tr>\n<td>-u，–user=name</td>\n<td>用户名</td>\n</tr>\n<tr>\n<td>-V，–version</td>\n<td>输出版本信息并且退出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MySQL退出\"><a href=\"#MySQL退出\" class=\"headerlink\" title=\"MySQL退出\"></a>MySQL退出</h3><ul>\n<li>mysql &gt; exit;</li>\n<li>mysql &gt; quit;</li>\n<li>mysql &gt; \\q;</li>\n</ul>\n<h3 id=\"修改-MySQL-提示符\"><a href=\"#修改-MySQL-提示符\" class=\"headerlink\" title=\"修改 MySQL 提示符\"></a>修改 MySQL 提示符</h3><p>连接客户端时通过参数指定提示符：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;mysql -uroot -proot --prompt</span><br></pre></td></tr></table></figure>\n<p>连接上客户端后，通过 prompt 命令修改提示符：mysql&gt;prompt，MySQL 提示符修改时可以用到的一些参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\D</td>\n<td>完整的日期</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>当前数据库</td>\n</tr>\n<tr>\n<td>\\h</td>\n<td>服务器名称</td>\n</tr>\n<tr>\n<td>\\u</td>\n<td>当前用户</td>\n</tr>\n</tbody>\n</table>\n<div align=\"center\"><img src=\"/images/hexo_post_207.png\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"修改数据表的默认存储引擎\"><a href=\"#修改数据表的默认存储引擎\" class=\"headerlink\" title=\"修改数据表的默认存储引擎\"></a>修改数据表的默认存储引擎</h3><p>找到 MySQL 配置文件：default-storage-engine=INNODB，修改完之后需要重启 MySQL</p>\n<h2 id=\"MySQL-语句的规范\"><a href=\"#MySQL-语句的规范\" class=\"headerlink\" title=\"MySQL 语句的规范\"></a>MySQL 语句的规范</h2><ul>\n<li>关键字与函数名称全部大写</li>\n<li>数据库名称、表名称、字段名称全部小写</li>\n<li>SQL 语句必须以分号结尾</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ol>\n<li>字符型</li>\n<li>整型</li>\n<li>浮点型</li>\n<li>日期时间型</li>\n</ol>\n<h2 id=\"MySQL-常用命令\"><a href=\"#MySQL-常用命令\" class=\"headerlink\" title=\"MySQL 常用命令\"></a>MySQL 常用命令</h2><ul>\n<li>显示当前服务器版本：SELECT VERSION();</li>\n<li>显示当前日期时间：SELECT NOW();</li>\n<li>显示当前用户：SELECT USER();</li>\n</ul>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><ul>\n<li>|：表示可以互换的两项</li>\n<li>[]：表示可选项</li>\n<li>{}：表示必选项</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE &#123;DATABASE | SCHEMA&#125; \\[IF NOT EXISTS\\] db\\_name \\[DEFAULT\\] CHARACTER SET \\[=\\] charset\\_name</span><br></pre></td></tr></table></figure>\n<p>DATABASE | SCHEMA：这两个完全相同，任选其一即可<br>IF NOT EXISTS：可选项，如果存在就不创建，不存在才会创建<br>CHARACTER：设置编码格式，例如 utf-8，gbk</p>\n<h3 id=\"查看当前服务器下的数据表列表\"><a href=\"#查看当前服务器下的数据表列表\" class=\"headerlink\" title=\"查看当前服务器下的数据表列表\"></a>查看当前服务器下的数据表列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW &#123;DATABASES | SCHEMAS&#125; \\[LIKE <span class=\"string\">'pattern'</span> | WHERE expr\\]</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改数据库\"><a href=\"#修改数据库\" class=\"headerlink\" title=\"修改数据库\"></a>修改数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER &#123;DATABASE | SCHEMA&#125; \\[db\\_name\\] \\[DEFAULT\\] CHARACTER SET \\[=\\] charset\\_name</span><br></pre></td></tr></table></figure>\n<p>通过以上语句可以修改某个数据库的编码格式</p>\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP &#123;DATABASE | SCHEMA&#125; \\[IF EXISTS\\] db_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开数据库\"><a href=\"#打开数据库\" class=\"headerlink\" title=\"打开数据库\"></a>打开数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE db_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE \\[IF NOT EXISTS\\] table\\_name( column\\_name data_type, .... )</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看数据表列表\"><a href=\"#查看数据表列表\" class=\"headerlink\" title=\"查看数据表列表\"></a>查看数据表列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW TABLES \\[FROM db_name\\] \\[LIKE <span class=\"string\">'pattern'</span> | WHERE expr\\]</span><br></pre></td></tr></table></figure>\n<p>FROM db_name：不仅可以查看当前数据库中的数据表，还可以查看其他数据库中的数据表</p>\n<h3 id=\"查看数据表结构\"><a href=\"#查看数据表结构\" class=\"headerlink\" title=\"查看数据表结构\"></a>查看数据表结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW COLUMNS FROM tbl_name</span><br></pre></td></tr></table></figure>\n<p>tbl_name：数据表的名称</p>\n<h3 id=\"插入记录\"><a href=\"#插入记录\" class=\"headerlink\" title=\"插入记录\"></a>插入记录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT \\[INFO\\] tbl\\_name \\[(col\\_name,...)\\] VALUES(val,...)</span><br></pre></td></tr></table></figure>\n<p>如果省略 col_name (列名称)，就必须为所有字段都赋值</p>\n<h3 id=\"记录查找\"><a href=\"#记录查找\" class=\"headerlink\" title=\"记录查找\"></a>记录查找</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT expr,... FROM tbl_name</span><br></pre></td></tr></table></figure>\n<p>expr：表达式</p>\n<h2 id=\"字段属性设置\"><a href=\"#字段属性设置\" class=\"headerlink\" title=\"字段属性设置\"></a>字段属性设置</h2><h3 id=\"空值与非空\"><a href=\"#空值与非空\" class=\"headerlink\" title=\"空值与非空\"></a>空值与非空</h3><ul>\n<li>NULL：字段值可以为空（默认值）</li>\n<li>NOT NULL：字段值禁止为空</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE tbl_name(username VARCHAR(20) NOT NULL,age TINYINT UNSIGNED NULL);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_208.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"表级约束与列级约束\"><a href=\"#表级约束与列级约束\" class=\"headerlink\" title=\"表级约束与列级约束\"></a>表级约束与列级约束</h2><p>对一个数据列建立的约束，称为列级约束 对多个数据列建立的约束，称为表级约束 列级约束既可以在列定义时声明，也可以在列定义后声明 表级约束只能在列定义后声明</p>\n<h3 id=\"主键约束\"><a href=\"#主键约束\" class=\"headerlink\" title=\"主键约束\"></a>主键约束</h3><p>PRIMARY KEY：每张数据表只能存在一个主键，主键保证记录的唯一性，主键自动为 NOT NULL，主键不一定和下面的自动编号一起使用，但是不能赋相同的值</p>\n<h3 id=\"自动编号\"><a href=\"#自动编号\" class=\"headerlink\" title=\"自动编号\"></a>自动编号</h3><p>AUTO_INCREMENT：必须与主键组合使用，默认情况下，起始值为 1，每次的增量为 1，该字段的数据类型必须为数字，如果是浮点数必须小数位数为 0</p>\n<h3 id=\"唯一约束\"><a href=\"#唯一约束\" class=\"headerlink\" title=\"唯一约束\"></a>唯一约束</h3><p>UNIQUE KEY：可以保证记录的唯一性，字段可以为空值（NULL），每张数据表可以存在多个唯一约束</p>\n<h3 id=\"默认约束\"><a href=\"#默认约束\" class=\"headerlink\" title=\"默认约束\"></a>默认约束</h3><p>DEFAULT：当插入记录时，如果没有明确为字段赋值，则自动赋予默认值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex enum(<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>) DEFAULT <span class=\"string\">'3'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>FOREIGN KEY：保持数据一致性和完整性，实现一对一或一对多关系</p>\n<h4 id=\"外键约束的要求\"><a href=\"#外键约束的要求\" class=\"headerlink\" title=\"外键约束的要求\"></a>外键约束的要求</h4><ol>\n<li>父表和子表必须使用相同的存储引擎，而且禁止使用临时表</li>\n<li>数据表的存储引擎只能为 InnoDB</li>\n<li>外键列和参照列必须具有相似的数据类型，其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同</li>\n<li>外键列和参照列必须创建索引，如果外键列不存在索引的话，MySQL 将自动创建索引</li>\n</ol>\n<h4 id=\"外键约束的参照操作\"><a href=\"#外键约束的参照操作\" class=\"headerlink\" title=\"外键约束的参照操作\"></a>外键约束的参照操作</h4><ol>\n<li>CASCADE：从父表删除或更新且自动删除或更新子表中匹配的行</li>\n<li>SET NULL：从父表删除或更新行，并设置子表中的外键列为 NULL。如果使用该选项，必须保证子表列没有指定NOT NULL</li>\n<li>RESTRICT：拒绝对父表的删除或更新操作</li>\n<li>NO ACTION：标准 SQL 的关键字，在 MySQL 中与 RESTRICT 相同</li>\n</ol>\n<p>pid INT,FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE =&gt; pid 为外键约束，参照数据表 provinces 中的 id 字段；并且删除时的参照操作为 CASCADE</p>\n<h2 id=\"修改数据表\"><a href=\"#修改数据表\" class=\"headerlink\" title=\"修改数据表\"></a>修改数据表</h2><h3 id=\"添加单列\"><a href=\"#添加单列\" class=\"headerlink\" title=\"添加单列\"></a>添加单列</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name ADD \\[COLUMN\\] col\\_name column\\_definition \\[FIRST | AFTER col\\_name\\]</span><br></pre></td></tr></table></figure>\n<p>FIRST：新添加的列将置于最前面<br>AFTER col_name：新添加的列将置于某一列后面<br>如果省略以上两项，新添加的列将位于所有列最后面</p>\n<h3 id=\"添加多列\"><a href=\"#添加多列\" class=\"headerlink\" title=\"添加多列\"></a>添加多列</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name ADD \\[COLUMN\\] (col\\_name column_definition,...)</span><br></pre></td></tr></table></figure>\n<p>添加多列时无法指定位置，只能位于最后面</p>\n<h3 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name DROP \\[COLUMN\\] col\\_name</span><br></pre></td></tr></table></figure>\n<p>ALTER TABLE tbl_name DROP age,DROP password =&gt; 可以同时删除 age 列和 password 列</p>\n<h3 id=\"添加约束\"><a href=\"#添加约束\" class=\"headerlink\" title=\"添加约束\"></a>添加约束</h3><h4 id=\"添加主键约束\"><a href=\"#添加主键约束\" class=\"headerlink\" title=\"添加主键约束\"></a>添加主键约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name ADD \\[CONSTRAINT \\[symbol\\] \\] PRIMARY KEY \\[index\\_type\\] (index\\_col\\_name,...)</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加唯一约束\"><a href=\"#添加唯一约束\" class=\"headerlink\" title=\"添加唯一约束\"></a>添加唯一约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name ADD \\[CONSTRAINT \\[symbol\\] \\] UNIQUE \\[INDEX | KEY\\] \\[index\\_name\\] \\[index\\_type\\] (index\\_col_name,...)</span><br></pre></td></tr></table></figure>\n<p>唯一约束可以给多列添加</p>\n<h4 id=\"添加外键约束\"><a href=\"#添加外键约束\" class=\"headerlink\" title=\"添加外键约束\"></a>添加外键约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name ADD \\[CONSTRAINT \\[symbol\\] \\] FOREIGN KEY \\[index\\_name\\] (index\\_col\\_name,...) reference_definition</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加-删除默认约束\"><a href=\"#添加-删除默认约束\" class=\"headerlink\" title=\"添加/删除默认约束\"></a>添加/删除默认约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name ALTER \\[COLUMN\\] col\\_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;</span><br></pre></td></tr></table></figure>\n<p>SET DEFAULT literal：添加默认约束<br>DROP DEFAULT：删除默认约束</p>\n<h3 id=\"删除约束\"><a href=\"#删除约束\" class=\"headerlink\" title=\"删除约束\"></a>删除约束</h3><h4 id=\"删除主键约束\"><a href=\"#删除主键约束\" class=\"headerlink\" title=\"删除主键约束\"></a>删除主键约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DROP PRIMARY KEY</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除唯一约束\"><a href=\"#删除唯一约束\" class=\"headerlink\" title=\"删除唯一约束\"></a>删除唯一约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name DROP &#123;INDEX | KEY&#125; index\\_name</span><br></pre></td></tr></table></figure>\n<p>一张表可以有多个唯一约束，所以需要查看约束的名字 =&gt; SHOW INDEXES FROM tbl_name [\\G];</p>\n<h4 id=\"删除外键约束\"><a href=\"#删除外键约束\" class=\"headerlink\" title=\"删除外键约束\"></a>删除外键约束</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name DROP FOREIGN KEY fk\\_symbol</span><br></pre></td></tr></table></figure>\n<p>fk_symbol：约束的名字，需要提前查看 =&gt; SHOW CREATE tbl_name</p>\n<h3 id=\"修改列定义\"><a href=\"#修改列定义\" class=\"headerlink\" title=\"修改列定义\"></a>修改列定义</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name MODIFY \\[COLUMN\\] col\\_name column\\_definition \\[FIRST | AFTER col\\_name\\]</span><br></pre></td></tr></table></figure>\n<p>可以修改数据类型以及数据列的位置</p>\n<h3 id=\"修改列名称\"><a href=\"#修改列名称\" class=\"headerlink\" title=\"修改列名称\"></a>修改列名称</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name CHANGE \\[COLUMN\\] old\\_col\\_name new\\_col\\_name column\\_definition \\[FIRST | AFTER col_name\\]</span><br></pre></td></tr></table></figure>\n<p>修改列名称的同时也可以修改列类型和位置，所以其功能要强大于修改列定义</p>\n<h3 id=\"数据表更名\"><a href=\"#数据表更名\" class=\"headerlink\" title=\"数据表更名\"></a>数据表更名</h3><p>尽量少更改数据表和数据列名字，因为如果创建过索引和约束，会影响到正常使用</p>\n<h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl\\_name RENAME \\[TO | AS\\] new\\_tbl_name</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RENAME TABLE tbl\\_name TO new\\_tbl\\_name \\[,tbl\\_name2 TO new\\_tbl\\_name2\\] ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><div align=\"center\"><img src=\"/images/hexo_post_209.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"记录操作\"><a href=\"#记录操作\" class=\"headerlink\" title=\"记录操作\"></a>记录操作</h2><h3 id=\"插入记录-1\"><a href=\"#插入记录-1\" class=\"headerlink\" title=\"插入记录\"></a>插入记录</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT \\[INTO\\] tbl\\_name \\[(col\\_name,...)\\] &#123;VALUES | VALUE&#125; (&#123;expr | DEFAULT&#125;,...&#125;,(...),...</span><br></pre></td></tr></table></figure>\n<p>可以插入一条记录，也可以插入多条记录 INSERT users VALUES(NULL,’John’,’456’,25,1); =&gt; NULL 为空值，也可以为自增字段赋值（DEFAULT也可以）</p>\n<p>INSERT users VALUES(\bDEFAULT,’Tom’,’123’,3*7-5,1),(NULL,’Rose’,md5(‘123’),DEFAULT,0); =&gt; 插入多条记录，可以用表达式，也可以用函数、NULL、DEFAULT</p>\n<h4 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT \\[INTO\\] tbl\\_name SET col\\_name=&#123;expr | DEFAULT&#125;,...</span><br></pre></td></tr></table></figure>\n<p>与第一种方式的区别在于，此方法可以使用子查询(SubQuery)，但是此方法只能插入一条记录<br>INSERT users SET username=’Ben’,password=’456’; =&gt; 将这两条数据列插入users，其他数据列为默认值<br>INSERT test(username) SELECT username FROM users WHERE age&gt;=30; =&gt; 将 users 数据表中的 age &gt;= 30 的记录中的 username 数据列插入到 test 的 username 数据列中</p>\n<h3 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT \\[INTO\\] tbl\\_name \\[(col\\_name,...)\\] SELECT ...</span><br></pre></td></tr></table></figure>\n<p>此方法可以将查询结果插入到指定数据表</p>\n<h3 id=\"更新记录（单表更新）\"><a href=\"#更新记录（单表更新）\" class=\"headerlink\" title=\"更新记录（单表更新）\"></a>更新记录（单表更新）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE \\[LOW\\_PRIORITY\\] \\[IGNORE\\] table\\_reference SET col\\_name1=&#123;expr1 | DEFAULT&#125; \\[,col\\_name2=&#123;expr2 | DEFAULT&#125;\\] ... \\[WHERE where_condition\\]</span><br></pre></td></tr></table></figure>\n<p>UPDATE users SET age=age-id,sex=0 WHERE id%2=0; =&gt; 将 id 为偶数的记录的 age 设置为 age-id，sex 设置为 0</p>\n<h3 id=\"删除记录（单表删除）\"><a href=\"#删除记录（单表删除）\" class=\"headerlink\" title=\"删除记录（单表删除）\"></a>删除记录（单表删除）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM tbl\\_name \\[WHERE <span class=\"built_in\">where</span>\\_condition\\]</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找记录\"><a href=\"#查找记录\" class=\"headerlink\" title=\"查找记录\"></a>查找记录</h3><p>查找记录占据了 MySQL 语句的 80% 频率</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT select\\_expr \\[,select\\_expr ...\\] \\[ FROM table\\_references \\[WHERE <span class=\"built_in\">where</span>\\_condition\\] \\[GROUP BY &#123;col\\_name | position&#125; \\[ASC | DESC\\],...\\] \\[HAVING <span class=\"built_in\">where</span>\\_condition\\] \\[ORDER BY &#123;col\\_name | expr | position&#125; \\[ASC | DESC\\],...\\] \\[LIMIT &#123;\\[offset,\\] row\\_count | row_count OFFSET offset&#125;\\] \\]</span><br></pre></td></tr></table></figure>\n<h4 id=\"select-expr\"><a href=\"#select-expr\" class=\"headerlink\" title=\"select_expr\"></a>select_expr</h4><p>查询表达式</p>\n<ul>\n<li>每一个表达式表示想要的一列，必须有至少一个</li>\n<li>多个列之间以英文逗号分隔</li>\n<li>星号(<em>)表示所有列；tbl_name.</em> 可以表示命名表的所有列</li>\n<li>查询表达式可以使用 [AS] alias_name 为其赋予别名</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT username AS uname FROM users;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>别名可用于 GROUP BY,ORDRE BY 或 HAVING 子句</li>\n</ul>\n<h4 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h4><p>条件表达式 对记录进行过滤，如果没有指定WHERE子句，则显示所有记录 在 WHERE 表达式中，可以使用 MySQL 支持的函数或运算符</p>\n<h4 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h4><p>查询结果分组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[GROUP BY &#123;col_name | position&#125; \\[ASC | DESC\\], ...\\]</span><br></pre></td></tr></table></figure>\n<p>既可以指定列名，也可以指定列的位置 ASC 为升序（默认），DESC 为降序</p>\n<h4 id=\"HAVING\"><a href=\"#HAVING\" class=\"headerlink\" title=\"HAVING\"></a>HAVING</h4><p>分组条件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[HAVING where_condition\\]</span><br></pre></td></tr></table></figure>\n<h4 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h4><p>对查询结果进行排序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[ORDER BY &#123;col_name | expr | position&#125; \\[ASC | DESC\\],...\\]</span><br></pre></td></tr></table></figure>\n<p>可以指定多个数据列进行排序，当第一个数据列的值相同时，按照第二个数据列进行排序，以此类推……</p>\n<h4 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h4><p>限制查询结果返回的数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[LIMIT &#123;\\[offset,\\] row\\_count | row\\_count OFFSET offset&#125;\\]</span><br></pre></td></tr></table></figure>\n<p>SELECT * FROM users LIMIT 3,2; =&gt; 从索引值为 3（第四条记录）的记录开始返回两条记录</p>\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><p>子查询(Subquery)是指出现在其他 SQL 语句内的 SELECT 子句<br>SELECT <em> FROM t1 WHERE col1 = (SELECT col2 FROM t2); =&gt; 其中SELECT </em> FROM t1 称为 Outer Query/Outer Statement,SELECT col2 FROM t2 称为 SubQuery</p>\n<ul>\n<li>子查询指嵌套在查询内部，且必须始终出现在圆括号内</li>\n<li>子查询可以包含多个关键字或条件，如 DISTINCT、GROUP BY、ORDER BY、LIMIT 函数等</li>\n<li>子查询的外层查询可以是：SELECT，INSERT，UPDATE，SET 或 DO</li>\n</ul>\n<h3 id=\"子查询返回值\"><a href=\"#子查询返回值\" class=\"headerlink\" title=\"子查询返回值\"></a>子查询返回值</h3><p>子查询可以返回标量、一行、一列或子查询</p>\n<h3 id=\"使用比较运算法的子查询\"><a href=\"#使用比较运算法的子查询\" class=\"headerlink\" title=\"使用比较运算法的子查询\"></a>使用比较运算法的子查询</h3><p>=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、&lt;=&gt;</p>\n<h3 id=\"语法结构\"><a href=\"#语法结构\" class=\"headerlink\" title=\"语法结构\"></a>语法结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operand comparison_operator subquery</span><br></pre></td></tr></table></figure>\n<h3 id=\"用-ANY、SOME-或-ALL-修饰的比较运算符\"><a href=\"#用-ANY、SOME-或-ALL-修饰的比较运算符\" class=\"headerlink\" title=\"用 ANY、SOME 或 ALL 修饰的比较运算符\"></a>用 ANY、SOME 或 ALL 修饰的比较运算符</h3><ol>\n<li>operand comparison_operator ANY (subquery)</li>\n<li>operand comparison_operator SOME (subquery)</li>\n<li>operand comparison_operator ALL (subquery)</li>\n</ol>\n<p>运算符和关键字相结合之后的结果类型：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_210.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"使用-NOT-IN-的子查询\"><a href=\"#使用-NOT-IN-的子查询\" class=\"headerlink\" title=\"使用 [NOT] IN 的子查询\"></a>使用 [NOT] IN 的子查询</h3><h4 id=\"语法结构-1\"><a href=\"#语法结构-1\" class=\"headerlink\" title=\"语法结构\"></a>语法结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operand comparison_operator \\[NOT\\] IN (subquery)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>=ANY 运算符与 IN 等效</li>\n<li>!=ALL 或 &lt;&gt;ALL 运算符与 NOT IN 等效</li>\n</ul>\n<h3 id=\"使用-NOT-EXISTS-的子查询\"><a href=\"#使用-NOT-EXISTS-的子查询\" class=\"headerlink\" title=\"使用 [NOT] EXISTS 的子查询\"></a>使用 [NOT] EXISTS 的子查询</h3><p>如果子查询返回任何行，EXISTS 将返回 TRUE，否则为 FALSE</p>\n<h2 id=\"多表操作\"><a href=\"#多表操作\" class=\"headerlink\" title=\"多表操作\"></a>多表操作</h2><h3 id=\"多表更新\"><a href=\"#多表更新\" class=\"headerlink\" title=\"多表更新\"></a>多表更新</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table\\_references SET col\\_name1 = &#123;expr1 | DEFAULT&#125; \\[,col\\_name2= &#123;expr2 | DEFAULT&#125;\\] ...\\[WHERE <span class=\"built_in\">where</span>\\_condition\\]</span><br></pre></td></tr></table></figure>\n<h3 id=\"CREATE…SELECT\"><a href=\"#CREATE…SELECT\" class=\"headerlink\" title=\"CREATE…SELECT\"></a>CREATE…SELECT</h3><p>创建数据表同时将查询结果写入到数据表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE \\[IF NOT EXISTS\\] tbl\\_name \\[(create\\_definition,...)\\] select_statement</span><br></pre></td></tr></table></figure>\n<p>CREATE TABLE tdb_goods_brands(brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,brand_name VARCHAR(40) NOT NULL) SELECT brand_name FROM tdb_goods GROUP BY brand_name; =&gt; 创建表 tdb_goods_brands 的同时将 tdb_goods 中的 brand_name 数据列的值赋给新表 tdb_goods_brands 中的 brand_name 数据列</p>\n<h3 id=\"表的连接\"><a href=\"#表的连接\" class=\"headerlink\" title=\"表的连接\"></a>表的连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table\\_reference &#123;\\[INNER | CROSS\\] JOIN | &#123;LEFT | RIGHT&#125; \\[OUTER\\] JOIN&#125; table\\_reference ON conditional_expr</span><br></pre></td></tr></table></figure>\n<p>table_reference：连接的两张表的名字<br>conditional_expr：连接条件，使用 ON 关键字来设定连接条件，也可以使用 WHERE 来代替：通常使用 ON 关键字来设定连接条件，使用 WHERE 关键字进行结果集记录的过滤</p>\n<h4 id=\"连接类型\"><a href=\"#连接类型\" class=\"headerlink\" title=\"连接类型\"></a>连接类型</h4><ol>\n<li>INNER JOIN，内连接，在 MySQL 中，JOIN，CROSS JOIN 和 INNER JOIN 是等价的</li>\n<li>LEFT [OUTER] JOIN，左外连接</li>\n<li>RIGHT [OUTER] JOIN，右外连接</li>\n</ol>\n<p>UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name=b.brand_name SET g.brand_name=b.brand_id; =&gt; 按照 tdb_goods_brands (设置别名为 b)表更新 tdb_goods (设置别名为 g)表，连接条件为表 g 的brand_name 和表 b 的 brand_name 字段值相等，更新操作为将 g 中的 brand_name 更改为 b 中的 brand_id</p>\n<h4 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h4><p>仅显示左表及右表符合连接条件的记录（交集、公共部分）</p>\n<h4 id=\"左（右）外连接\"><a href=\"#左（右）外连接\" class=\"headerlink\" title=\"左（右）外连接\"></a>左（右）外连接</h4><p>显示左（右）表的全部记录及右（左）表符合连接条件的记录 A LEFT JOIN B join_condition 如果数据表 A 的某条记录符合 WHERE 条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行</p>\n<h3 id=\"多表删除\"><a href=\"#多表删除\" class=\"headerlink\" title=\"多表删除\"></a>多表删除</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE tbl\\_name\\[.*\\] \\[,tbl\\_name\\[.*\\]\\] ... FROM table\\_references \\[WHERE <span class=\"built_in\">where</span>\\_condition\\]</span><br></pre></td></tr></table></figure>\n<h2 id=\"系统内置函数\"><a href=\"#系统内置函数\" class=\"headerlink\" title=\"系统内置函数\"></a>系统内置函数</h2><h3 id=\"字符函数\"><a href=\"#字符函数\" class=\"headerlink\" title=\"字符函数\"></a>字符函数</h3><table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONCAT()</td>\n<td>字符连接</td>\n</tr>\n<tr>\n<td>CONCAT_WS()</td>\n<td>使用指定的分隔符进行字符连接</td>\n</tr>\n<tr>\n<td>FORMAT()</td>\n<td>数字格式化</td>\n</tr>\n<tr>\n<td>LOWER()</td>\n<td>转换成小写字母</td>\n</tr>\n<tr>\n<td>UPPER()</td>\n<td>转换成大写字母</td>\n</tr>\n<tr>\n<td>LEFT()</td>\n<td>获取左侧字符</td>\n</tr>\n<tr>\n<td>RIGHT()</td>\n<td>获取右侧字符</td>\n</tr>\n<tr>\n<td>LENGTH()</td>\n<td>获取字符串长度</td>\n</tr>\n<tr>\n<td>LTRIM()</td>\n<td>删除前导空格</td>\n</tr>\n<tr>\n<td>RTRIM()</td>\n<td>删除后续空格</td>\n</tr>\n<tr>\n<td>TRIM()</td>\n<td>删除前导和后续空格</td>\n</tr>\n<tr>\n<td>SUBSTRING()</td>\n<td>字符串截取</td>\n</tr>\n<tr>\n<td>[NOT] LIKE</td>\n<td>模式匹配</td>\n</tr>\n<tr>\n<td>REPLACE()</td>\n<td>字符串替换</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"CONCAT\"><a href=\"#CONCAT\" class=\"headerlink\" title=\"CONCAT()\"></a>CONCAT()</h3><p>SELECT CONCAT(first_name,last_name) AS fullname FROM test; =&gt; 将数据表 test 中的 first_name 和 last_name 中的数据连接到一起进行输出，并命名为 fullname</p>\n<h3 id=\"FORMAT\"><a href=\"#FORMAT\" class=\"headerlink\" title=\"FORMAT()\"></a>FORMAT()</h3><p>SELECT FORMAT(12560.75,2); =&gt; 转换成 12,560.75（千分位）<br>SELECT FORMAT(12560.75,1); =&gt; 转换成 12,560.8（四舍五入）<br>SELECT FORMAT(12560.75,0); =&gt; 转换成 12,561（取整）</p>\n<h3 id=\"TRIM\"><a href=\"#TRIM\" class=\"headerlink\" title=\"TRIM()\"></a>TRIM()</h3><p>除了删除首尾空格，还可以删除指定其他字符 SELECT TRIM(LEADING ‘?’ FROM ‘??MySQL???’); =&gt; MySQL???，LEADING 关键字代表前导，所以这句话的含义是删除字符串前面的’?’字符；将 LEADING 换为 TRAILING 表示去掉尾部相应字符，换为 BOTH 表示去掉首尾相应字符</p>\n<h3 id=\"NOT-LIKE\"><a href=\"#NOT-LIKE\" class=\"headerlink\" title=\"[NOT] LIKE\"></a>[NOT] LIKE</h3><p>SELECT <em> FROM test WHERE first_name LIKE ‘%o%’; => tom%，%相当于</em>，所以 LIKE 有点类似于正则匹配</p>\n<h3 id=\"数值运算符与函数\"><a href=\"#数值运算符与函数\" class=\"headerlink\" title=\"数值运算符与函数\"></a>数值运算符与函数</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CEIL()</td>\n<td>进一取整</td>\n</tr>\n<tr>\n<td>DIV</td>\n<td>整数除法</td>\n</tr>\n<tr>\n<td>FLOOR()</td>\n<td>舍一取整</td>\n</tr>\n<tr>\n<td>MOD</td>\n<td>取余数（取模）</td>\n</tr>\n<tr>\n<td>POWER()</td>\n<td>幂运算</td>\n</tr>\n<tr>\n<td>ROUND()</td>\n<td>四舍五入</td>\n</tr>\n<tr>\n<td>TRUNCATE()</td>\n<td>数字截取</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TRUNCATE\"><a href=\"#TRUNCATE\" class=\"headerlink\" title=\"TRUNCATE()\"></a>TRUNCATE()</h3><p>数字截取，不会进行运算，TRUNCATE(125.89,0); => 125，TRUNCATE(125.89,-1); => 120</p>\n<h3 id=\"比较运算符与函数\"><a href=\"#比较运算符与函数\" class=\"headerlink\" title=\"比较运算符与函数\"></a>比较运算符与函数</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[NOT] BETWEEN…AND…</td>\n<td>[不]在范围之内</td>\n</tr>\n<tr>\n<td>[NOT] IN()</td>\n<td>[不]在列出值范围内</td>\n</tr>\n<tr>\n<td>IS [NOT] NULL</td>\n<td>[不]为空</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日期时间函数\"><a href=\"#日期时间函数\" class=\"headerlink\" title=\"日期时间函数\"></a>日期时间函数</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NOW()</td>\n<td>当前日期和时间</td>\n</tr>\n<tr>\n<td>CURDATE()</td>\n<td>当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>DATE_ADD()</td>\n<td>日期变化</td>\n</tr>\n<tr>\n<td>DATEDIFF()</td>\n<td>日期差值</td>\n</tr>\n<tr>\n<td>DATE_FORMAT()</td>\n<td>日期格式化</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"DATE-ADD\"><a href=\"#DATE-ADD\" class=\"headerlink\" title=\"DATE_ADD()\"></a>DATE_ADD()</h3><p>DATE_ADD(‘2014-3-12’,INTERVAL 3 \bWEEK); =&gt; 2014-04-02<br>DATE_ADD(‘2014-3-12’,INTERVAL -365 DAY); =&gt; 2013-3-12</p>\n<h3 id=\"DATEDIFF\"><a href=\"#DATEDIFF\" class=\"headerlink\" title=\"DATEDIFF()\"></a>DATEDIFF()</h3><p>DATEDIFF(‘2013-3-12’,’2014-3-12’); =&gt;-365</p>\n<h3 id=\"DATE-FORMAT\"><a href=\"#DATE-FORMAT\" class=\"headerlink\" title=\"DATE_FORMAT()\"></a>DATE_FORMAT()</h3><p>DATE_FORMAT(‘2014-3-2’,’%m/%d/%Y’); =&gt;03/02/2014</p>\n<h3 id=\"信息函数\"><a href=\"#信息函数\" class=\"headerlink\" title=\"信息函数\"></a>信息函数</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONNECTION_ID()</td>\n<td>连接ID</td>\n</tr>\n<tr>\n<td>DATABASE()</td>\n<td>当前数据库</td>\n</tr>\n<tr>\n<td>LAST_INSERT_ID()</td>\n<td>最后插入记录的ID号</td>\n</tr>\n<tr>\n<td>USER()</td>\n<td>当前用户</td>\n</tr>\n<tr>\n<td>VERSION()</td>\n<td>版本信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"LAST-INSERT-ID\"><a href=\"#LAST-INSERT-ID\" class=\"headerlink\" title=\"LAST_INSERT_ID()\"></a>LAST_INSERT_ID()</h3><p>当使用该函数时，当前数据表中必须存在一个自增的字段，字段名可以不为 id，当同时写入多条记录时，只返回插入的第一条记录的 ID 值</p>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AVG()</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>COUNT()</td>\n<td>计数</td>\n</tr>\n<tr>\n<td>MAX()</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>MIN()</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>SUM()</td>\n<td>求和</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"AVG\"><a href=\"#AVG\" class=\"headerlink\" title=\"AVG()\"></a>AVG()</h4><p>SELECT AVG(age) FROM test; =&gt; 返回 test 数据表中的 age 平均值</p>\n<h2 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h2><p>用户自定义函数（user-defined function,UDF）是一种对 MySQL 扩展的途径，其用法与内置函数相同</p>\n<h3 id=\"必要条件\"><a href=\"#必要条件\" class=\"headerlink\" title=\"必要条件\"></a>必要条件</h3><ol>\n<li>参数（理论上不超过 1024 个参数）</li>\n<li>返回值</li>\n</ol>\n<p>函数可以返回任意类型的值，同样可以接收这些类型的参数</p>\n<h3 id=\"创建自定义函数\"><a href=\"#创建自定义函数\" class=\"headerlink\" title=\"创建自定义函数\"></a>创建自定义函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE FUNCTION <span class=\"keyword\">function</span>\\_name RETURNS &#123;STRING | INTERGER | REAL | DECIMAL&#125; routine\\_body</span><br></pre></td></tr></table></figure>\n<p>CREATE FUNCTION f1() RETURNS VARCHAR(30) RETURN DATE_FORMAT(NOW(),’%Y年%m月%d日 %H点:%i分:%s秒’); =&gt; 不带有参数的函数，返回格式为 ‘2017年05月09日 21点:26分:15秒’</p>\n<h3 id=\"关于函数体\"><a href=\"#关于函数体\" class=\"headerlink\" title=\"关于函数体\"></a>关于函数体</h3><ol>\n<li>函数体由合法的 SQL 语句构成</li>\n<li>函数体可以是简单的 SELECT 或 INSERT 语句</li>\n<li>函数体如果为复合结构，则使用 BEGIN…END 语句</li>\n<li>复合结构可以包含声明，循环，控制结构</li>\n</ol>\n<h3 id=\"删除函数\"><a href=\"#删除函数\" class=\"headerlink\" title=\"删除函数\"></a>删除函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP FUNCTION \\[IF EXISTS\\] function_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL命令执行过程\"><a href=\"#MySQL命令执行过程\" class=\"headerlink\" title=\"MySQL命令执行过程\"></a>MySQL命令执行过程</h2><div align=\"center\"><img src=\"/images/hexo_post_211.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><p>存储过程是 SQL 语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理</p>\n<h3 id=\"存储过程的优点\"><a href=\"#存储过程的优点\" class=\"headerlink\" title=\"存储过程的优点\"></a>存储过程的优点</h3><ol>\n<li>增强 SQL 语句的功能和灵活性</li>\n<li>实现较快的执行速度</li>\n<li>减少网络流量</li>\n</ol>\n<h3 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE \\[DEFINER = &#123;user | CURRENT\\_USER&#125;\\] PROCEDURE sp\\_name (\\[proc\\_parameter\\[,...\\]\\]) \\[characteristic ...\\] routine\\_body</span><br></pre></td></tr></table></figure>\n<p>和创建自定义函数类似，最大的不同就是参数部分不同</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proc\\_parameter:\\[IN | OUT | INOUT\\] param\\_name <span class=\"built_in\">type</span></span><br></pre></td></tr></table></figure>\n<p>IN -&gt; 表示该参数的值必须在调用存储过程时指定<br>OUT -&gt; 表示该参数的值可以被存储过程改变，并且可以返回<br>INOUT -&gt; 表示该参数的调用时指定，并且可以被改变和返回</p>\n<h3 id=\"过程体\"><a href=\"#过程体\" class=\"headerlink\" title=\"过程体\"></a>过程体</h3><ol>\n<li>过程体由合法的 SQL 语句构成</li>\n<li>过程体可以是任意 SQL 语句</li>\n<li>过程体如果为复合结构则使用 BEGIN…END 语句</li>\n<li>复合结构可以包含声明，循环，控制结构</li>\n</ol>\n<h3 id=\"调用存储过程\"><a href=\"#调用存储过程\" class=\"headerlink\" title=\"调用存储过程\"></a>调用存储过程</h3><ul>\n<li>CALL sp_name([parameter[,…]])</li>\n<li>CALL sp_name[()]</li>\n</ul>\n<h3 id=\"修改存储过程\"><a href=\"#修改存储过程\" class=\"headerlink\" title=\"修改存储过程\"></a>修改存储过程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER PROCEDURE sp_name \\[characteristic ...\\] COMMENT <span class=\"string\">'string'</span> | &#123;CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125; | SQL SECURITY &#123; DEFINER | INVOKER &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除存储过程\"><a href=\"#删除存储过程\" class=\"headerlink\" title=\"删除存储过程\"></a>删除存储过程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE \\[IF EXISTS\\] sp_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>CREATE PROCEDURE sp1() SELECTION VERSION(); -&gt; 创建存储体<br>CALL sp1; -&gt; 调用存储体</p>\n","raw":null,"categories":[{"name":"慕课网","path":"api/categories/慕课网.json"}],"tags":[{"name":"mysql","path":"api/tags/mysql.json"},{"name":"数据库","path":"api/tags/数据库.json"}]},{"title":"JS宽高的理解和应用","slug":"JS宽高的理解和应用","date":"2017-05-01T14:49:51.000Z","updated":"2019-01-27T13:15:42.891Z","comments":true,"path":"api/articles/JS宽高的理解和应用.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_31.png","content":"<h2 id=\"window-和-document\"><a href=\"#window-和-document\" class=\"headerlink\" title=\"window 和 document\"></a>window 和 document</h2><p><strong>document 是 window 对象的一部分</strong>：document.body -&gt; window.document.body，浏览器的 HTML 文档称为 document 对象<br><strong>window.location === document.location</strong>：window 对象的 location 属性引用的是 location 对象，表示该窗口中当前显示文档的 URL，document 对象的 location 属性也是引用了 location 对象</p>\n<h2 id=\"window-screen\"><a href=\"#window-screen\" class=\"headerlink\" title=\"window.screen\"></a>window.screen</h2><p>window.screen 包含有关用户屏幕的信息，它包括：</p>\n<ul>\n<li><code>window.screen.width</code></li>\n<li><code>window.screen.height</code></li>\n<li><code>window.screen.availHeight</code></li>\n<li><code>window.screen.availWidth</code></li>\n<li><code>window.screenTop</code></li>\n<li><code>window.screenLeft</code></li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_31.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"与-window-相关的宽高\"><a href=\"#与-window-相关的宽高\" class=\"headerlink\" title=\"与 window 相关的宽高\"></a>与 window 相关的宽高</h2><ul>\n<li><code>window.innerWidth</code> 内部的宽度</li>\n<li><code>window.innerHeight</code> 内部的高度</li>\n<li><code>window.outWidth</code> 外部的宽度</li>\n<li><code>window.outHeight</code> 外部的高度</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_24.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"与-document-相关的宽高\"><a href=\"#与-document-相关的宽高\" class=\"headerlink\" title=\"与 document 相关的宽高\"></a>与 document 相关的宽高</h2><h3 id=\"与-client-相关的宽高\"><a href=\"#与-client-相关的宽高\" class=\"headerlink\" title=\"与 client 相关的宽高\"></a>与 client 相关的宽高</h3><ul>\n<li><code>document.body.clientWidth</code> 元素宽度（可视内容区+内边距）</li>\n<li><code>document.body.clientHeight</code> 元素高度（可视内容区+内边距）</li>\n</ul>\n<p>该属性指的是元素的可视部分宽度和高度，即 <code>padding+content</code></p>\n<ul>\n<li>如果没有滚动条，即为元素设定的宽度和高度</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">350px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: scroll; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body.clientWidth);  <span class=\"comment\">// 350+padding(80) = 430</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body.clientHeight);  <span class=\"comment\">// 500 + padding(80) = 580</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果出现滚动条，滚动条会遮盖元素的宽高，那么该属性就是其本来宽高减去滚动条的宽高</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#exp2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"exp2\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test.clientHeight); <span class=\"comment\">// 200</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test.clientWidth); <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>document.body.clientLeft</code></li>\n<li><code>document.body.clientTop</code></li>\n</ul>\n<p>这两个返回的是元素周围边框的厚度，如果不指定一个边框或者不定位该元素，它的值就是 0</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">350px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: scroll; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body.clientLeft);  <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body.clientTop);  <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li>无 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code></li>\n<li>有 <code>padding</code> 无滚动 ：<code>clientWidth</code> = 盒子的 <code>width</code> + 盒子的 <code>padding * 2</code></li>\n<li>有 <code>padding</code> 有滚动 ：<code>clientWidth</code> = 盒子和 <code>width</code> + 盒子的 <code>padding * 2</code> - 滚动轴宽度</li>\n<li><code>clientTop = border-top</code></li>\n<li><code>clientLeft = border-left</code></li>\n</ul>\n<h3 id=\"与-offset-相关的宽高\"><a href=\"#与-offset-相关的宽高\" class=\"headerlink\" title=\"与 offset 相关的宽高\"></a>与 offset 相关的宽高</h3><ul>\n<li><strong>document.body.offsetWidth（元素的border + padding + content的宽度）</strong></li>\n<li><strong>document.body.offsetHeight（元素的border + padding + content的高度）</strong></li>\n</ul>\n<p>该属性和其内部的内容是否超出元素大小无关，只和本来设定的 border 以及 width 和 height 有关</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">350px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: scroll; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body.offsetWidth);  <span class=\"comment\">// 470 = padding\\*2 + 350 + border\\*2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body.offsetHeight);  <span class=\"comment\">// 620 = padding\\*2 + 500 + border\\*2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>document.offsetLeft</strong></li>\n<li><strong>document.offsetTop</strong></li>\n</ul>\n<p>了解这两个属性我们必须先了解它，什么是 <code>offsetParent</code></p>\n<ul>\n<li>如果当前元素的父级元素没有进行 <code>CSS</code> 定位（<code>position</code> 为 <code>absolute</code> 或 <code>relative</code>）,<code>offsetParent</code> 为 <code>body.</code></li>\n<li>假如当前元素的父级元素中有 <code>CSS</code> 定位，<code>offsetParent</code> 取最近的那个父级元素</li>\n</ul>\n<h3 id=\"offsetLeft-的兼容性问题\"><a href=\"#offsetLeft-的兼容性问题\" class=\"headerlink\" title=\"offsetLeft 的兼容性问题\"></a>offsetLeft 的兼容性问题</h3><ul>\n<li>在 <code>IE6/7</code> 中<ul>\n<li><code>offsetLeft</code> = offsetParent 的 padding-left + 当前元素的 margin-left</li>\n</ul>\n</li>\n<li>在 <code>IE8/9/10</code> 以及 <code>chrome</code> 中<ul>\n<li><code>offsetLeft</code> = offsetParent 的 margin-left + offsetParent 的 border 宽度 + offsetParent 的 padding-left + 当前元素的 margin-left</li>\n</ul>\n</li>\n<li>在 <code>FireFox</code> 中<ul>\n<li><code>offsetLeft</code> = offsetParent 的 margin-left + 当前元素的 margin-left + offsetParent 的padding-left</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">350px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: scroll; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-id\">#exp</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">20px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 IE8 / 9 / 10 以及 chrome 中：<ul>\n<li>div.offsetLeft = 本身的 margin10 + 父级元素的 padding40 + margin10 + border20 = 80</li>\n<li>div.offsetTop = 本身的 margin10 + 父级元素的 padding40 + margin10 + border20 = 80</li>\n</ul>\n</li>\n<li>在 FireFox：（相比 chrome 中少了 border）<ul>\n<li>div.offsetLeft = 本身的 margin10 + 父级元素的 padding40 + margin10 = 60</li>\n<li>div.offsetTop = 本身的 margin10 + 父级元素的 padding40 + margin10 = 60</li>\n</ul>\n</li>\n<li>在 IE6/7 中：（相比在 FireFox，不但少了 border 还少了父级元素的 margin）<ul>\n<li><code>div.offsetLeft</code> = 本身的 <code>margin10</code> + 父级元素的 <code>padding40</code> = 50</li>\n<li><code>div.offsetTop</code> = 本身的 <code>margin10</code> + 父级元素的 <code>padding40</code> = 50</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li>无 <code>padding</code> 无滚动无 <code>border</code><ul>\n<li>offsetWidth = clientWidth = 盒子的宽度</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 无滚动有 <code>border</code><ul>\n<li>offsetWidth = 盒子的宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 边框宽度 * 2</li>\n</ul>\n</li>\n<li>有 <code>padding</code> 有滚动，且滚动是显示的，有 <code>border</code><ul>\n<li>offsetWidth = 盒子宽度 + 盒子 padding <em> 2 + 盒子边框 </em> 2 = clientWidth + 滚动轴宽度 + 边框宽度 * 2</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"与-scroll-相关的宽高\"><a href=\"#与-scroll-相关的宽高\" class=\"headerlink\" title=\"与 scroll 相关的宽高\"></a>与 scroll 相关的宽高</h2><ul>\n<li><strong>document.body.scrollWidth</strong></li>\n<li><strong>document.body.scrollHeight</strong></li>\n</ul>\n<p>document.body 的 scrollWidth 和 scrollHeight 与 div 的 scrollWidth 和 scrollHeight 是有区别的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">350px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: scroll; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight; <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth; <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>当给定宽高小于浏览器窗口的宽高<ul>\n<li>scrollWidth = 通常是浏览器窗口的宽度</li>\n<li>scrollHeight = 通常是浏览器窗口的高度</li>\n</ul>\n</li>\n<li>当给定宽高大于浏览器窗口的宽高，且内容小于给定宽高的时候<ul>\n<li>scrollWidth = 给定宽度 + 其所有的 padding + margin + border</li>\n<li>scrollHeight = 给定高度 + 其所有的 padding + margin + border</li>\n</ul>\n</li>\n<li>当给定宽高大于浏览器窗口宽高，且内容大于给定宽高<ul>\n<li>scrollWidth = 内容宽度 + 其所有的 padding + margin + border</li>\n<li>scrollHeight = 内容高度 + 其所有的 padding + margin + border</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在某-div-中的-scrollWidth-和-scrollHeight\"><a href=\"#在某-div-中的-scrollWidth-和-scrollHeight\" class=\"headerlink\" title=\"在某 div 中的 scrollWidth 和 scrollHeight\"></a><strong>在某 div 中的 scrollWidth 和 scrollHeight</strong></h3><p>无滚动轴时：</p>\n<ul>\n<li>scrollWidth = clientWidth = 盒子宽度 + 盒子 padding * 2</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_28.png\" alt=\"\" width=\"450\"></div>\n\n<p>有滚动轴时：</p>\n<ul>\n<li>scrollWidth = 实际内容的宽度 + padding * 2</li>\n<li>scrollHeight = 实际内容的高度 + padding * 2</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_32.png\" alt=\"\" width=\"450\"></div>\n\n<ul>\n<li><strong>document.body.scrollLeft</strong></li>\n<li><strong>document.body.scrollTop</strong></li>\n</ul>\n<p>与前面不同的是，这对属性是<strong>可读写</strong>的，指的是当元素其中的超出其宽高的时候，元素被卷起来的高度和宽度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#exp</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">20px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow-y</span>:scroll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mydiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"exp\"</span>);</span><br><span class=\"line\">mydiv.scrollTop ;  <span class=\"comment\">// 默认情况下是0 </span></span><br><span class=\"line\">mydiv.scrollLeft ; <span class=\"comment\">// 默认情况下是0 </span></span><br><span class=\"line\"><span class=\"comment\">// 可以改写它</span></span><br><span class=\"line\">mydiv.scrollTop = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mydiv.scrollTop)</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_25.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"obj-style-width-和-obj-style-height\"><a href=\"#obj-style-width-和-obj-style-height\" class=\"headerlink\" title=\"obj.style.width 和 obj.style.height\"></a><strong>obj.style.width 和 obj.style.height</strong></h3><p>对于一个 <code>DOM</code> 元素，它的 <code>style</code> 属性返回的是一个对象，这个对象的任意一个属性是可读写的，<code>style.width</code> 等于 <code>css</code> 属性中的宽度。<code>style.height</code> 等于 <code>css</code> 属性中的高度</p>\n<h2 id=\"documentElement-和-body-的关系\"><a href=\"#documentElement-和-body-的关系\" class=\"headerlink\" title=\"documentElement 和 body 的关系\"></a>documentElement 和 body 的关系</h2><p>是父子级的关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>); <span class=\"comment\">//document</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.documentElement); <span class=\"comment\">//html</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body); <span class=\"comment\">//body</span></span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_29.png\" alt=\"\" width=\"600\"></div>\n\n<ul>\n<li>兼容问题推荐使用，获取浏览器窗口可视区域大小：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth || <span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight || <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-对象的-5-种坐标\"><a href=\"#Event-对象的-5-种坐标\" class=\"headerlink\" title=\"Event 对象的 5 种坐标\"></a>Event 对象的 5 种坐标</h2><ul>\n<li>clientX 和 clientY：相对于浏览器（可视区左上角0,0）的坐标</li>\n<li>screenX 和 screenY：相对于设备屏幕左上角（0,0）的坐标</li>\n<li>offsetX 和 offsetY：相对于事件源左上角（0,0）的坐标</li>\n<li>pageX 和 pageY：相对于整个网页左上角（0,0）的坐标</li>\n<li>X 和 Y：本来是 IE 属性，相对于用CSS动态定位的最内层包容元素</li>\n</ul>\n<div align=\"center\"><img src=\"/images/hexo_post_27.png\" alt=\"\" width=\"700\"></div>\n\n<h2 id=\"JS各种宽高的应用\"><a href=\"#JS各种宽高的应用\" class=\"headerlink\" title=\"JS各种宽高的应用\"></a>JS各种宽高的应用</h2><ul>\n<li><a href=\"http://codepen.io/poetries/pen/RoeJgG\" target=\"_blank\" rel=\"noopener\">可视区域加载</a></li>\n<li><a href=\"http://codepen.io/poetries/pen/WoayJy\" target=\"_blank\" rel=\"noopener\">判断网页滚动到顶部或者底部</a></li>\n<li><a href=\"http://codepen.io/poetries/pen/vyVrvm\" target=\"_blank\" rel=\"noopener\">DIV滚动到底部时加载剩余内容</a></li>\n<li><a href=\"http://codepen.io/poetries/pen/RoeBbL\" target=\"_blank\" rel=\"noopener\">计算滚动轴的宽高</a></li>\n</ul>\n<h2 id=\"JS中的宽高属性总结\"><a href=\"#JS中的宽高属性总结\" class=\"headerlink\" title=\"JS中的宽高属性总结\"></a>JS中的宽高属性总结</h2><div align=\"center\"><img src=\"/images/hexo_post_26.png\" alt=\"\" width=\"700\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_23.png\" alt=\"\" width=\"700\"></div>\n\n<div align=\"center\"><img src=\"/images/hexo_post_30.png\" alt=\"\" width=\"600\"></div>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://blog.poetries.top/2016/12/13/js-props/\" target=\"_blank\" rel=\"noopener\">JavaScript及jQuery中的各种宽高属性图解</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"}]}]}