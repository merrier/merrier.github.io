{"total":120,"pageSize":10,"pageCount":12,"data":[{"title":"关于CSS Reset那些事","slug":"关于CSS Reset那些事","date":"2017-07-30T12:47:49.000Z","updated":"2019-05-05T03:04:39.106Z","comments":true,"path":"api/articles/关于CSS Reset那些事.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"CSS-Reset\"><a href=\"#CSS-Reset\" class=\"headerlink\" title=\"CSS Reset\"></a>CSS Reset</h2><p>css reset，顾名思义，就是<strong>重置样式</strong>。那么为什么我们需要重置样式呢，这一切还要“归功于”前端领域的特点，就是跨平台、跨客户端；众所周知，现在所使用的主流浏览器对于一些标签的默认属性并没有做到统一，所以我们有时候会发现，某个页面在 chrome 浏览器上样式表现很正常，但是到了 firefox 上面却有着其他的样式表现（就更不用提IE了），这就是经常提到的“<strong>兼容性问题</strong>”，而 css reset 就是解决默认样式不兼容问题的办法之一</p>\n<h2 id=\"CSS-Reset发展历程\"><a href=\"#CSS-Reset发展历程\" class=\"headerlink\" title=\"CSS Reset发展历程\"></a>CSS Reset发展历程</h2><h3 id=\"第一份\"><a href=\"#第一份\" class=\"headerlink\" title=\"第一份\"></a>第一份</h3><p>查阅了一些资料，也看了一些大牛的博客，目前比较一致地认为最早的一份 CSS reset 来自<a href=\"http://tantek.com/log/2004/undohtml.css\" target=\"_blank\" rel=\"noopener\">Tantek 的 undohtml.css</a>，时间应该是 2004 年，很简单的代码（注释都比代码多），Tantek 根据自己的需要，对浏览器的默认样式进行了一些重置，同时从这一份 CSS reset 也可以窥探出“重置样式”需要考虑的标签有哪些。</p>\n<h3 id=\"YUI-团队\"><a href=\"#YUI-团队\" class=\"headerlink\" title=\"YUI 团队\"></a>YUI 团队</h3><p>业界领袖 YUI 团队在 Tantek 的基础上将 css reset 变得更加充实，当然代码的核心部分仍然是对样式进行重置，可以直接<a href=\"http://yui.yahooapis.com/3.18.1/build/cssreset-context/cssreset-context-min.css\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看，YUI 团队 2014 年给出的 css reset 代码（随着 Yahoo 光荣不再，估计这份 css reset 的版本也会停留在 3.18.1 了吧），从代码中可以看出我们如果想引用这套 css reset，还需要加一个 yui3-cssreset 类，或者修改其源码，将 .yui3-cssreset 全部删掉。YUI 不仅支持 css reset，还配套了 cssfonts.css 和 cssbase.css。<code>cssreset.css</code> 只负责清除默认样式,而 <code>cssfonts.css</code> 和 <code>cssbase.css</code> 则负责将一些元素的默认样式再重设回来</p>\n<h3 id=\"Eric-Meyer\"><a href=\"#Eric-Meyer\" class=\"headerlink\" title=\"Eric Meyer\"></a>Eric Meyer</h3><p>相比 YUI 团队的 css reset 方案，<a href=\"http://meyerweb.com/eric/tools/css/reset/index.html\" target=\"_blank\" rel=\"noopener\">Eric Meyer 的方案</a>就显得有些繁重了，而且这套代码最新版本是 2011 年公开的，考虑到年代久远，就不予评论了。</p>\n<h3 id=\"html5reset\"><a href=\"#html5reset\" class=\"headerlink\" title=\"html5reset\"></a>html5reset</h3><p>相比前面的这些方案，<a href=\"https://github.com/murtaugh/HTML5-Reset\" target=\"_blank\" rel=\"noopener\">这个团队</a>给出的方案就更显臃肿了，而且也不太出名，当然了，css reset 并不是用来全盘照搬的，找到自己需要的才是最聪明的办法</p>\n<h2 id=\"国产-CSS-reset\"><a href=\"#国产-CSS-reset\" class=\"headerlink\" title=\"国产 CSS reset\"></a>国产 CSS reset</h2><p>以上都是国外的大牛或团队给出的 css reset 方案，那么作为互联网行业发展最突飞猛进的中国，就没有人或团队做过 css reset 方面的尝试吗？肯定有啊（要不然我这一部分怎么写？）：</p>\n<h3 id=\"阿里-Kissy-框架\"><a href=\"#阿里-Kissy-框架\" class=\"headerlink\" title=\"阿里 Kissy 框架\"></a>阿里 Kissy 框架</h3><p>阿里在 2009 年就已经给出了自己的 css reset 方案，这应该是国内的第一份 css reset，是玉伯和另外一位前辈完成的，向他们致敬。但是由于距离现在已经有将近十年了，源码的链接已经失效，我将各种版本的 css reset 代码都上传到了我的 github，可以<a href=\"http://merrier.github.io/CSS-Reset/kissy/reset.css\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看国内第一份 css reset。</p>\n<h3 id=\"张鑫旭的方案\"><a href=\"#张鑫旭的方案\" class=\"headerlink\" title=\"张鑫旭的方案\"></a>张鑫旭的方案</h3><p>我不希望你看到这个标题的第一感觉是：<a href=\"http://www.zhangxinxu.com\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>是谁。因为如果你连张鑫旭都不认识，前端界真是白混了！作为一位资深 css 研究学者，张鑫旭对于 css reset 也有自己独到的理解，下面就是他给出的方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1.4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>:arial;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">textarea</span>,<span class=\"selector-tag\">select</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>:inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span>,<span class=\"selector-tag\">p</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">ol</span>,<span class=\"selector-tag\">form</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">ol</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>:<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/\\*image with no-border\\*/</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">border</span>:<span class=\"number\">0</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，非常的简短，当然了，对于这份方案，张鑫旭在<a href=\"http://www.zhangxinxu.com/wordpress/2010/07/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99css%E8%BF%9B%E8%A1%8C%E6%9E%B6%E6%9E%84%E7%9A%84/\" target=\"_blank\" rel=\"noopener\">他的文章</a>中也进行了解释</p>\n<h2 id=\"替代品-Normalize-css\"><a href=\"#替代品-Normalize-css\" class=\"headerlink\" title=\"替代品 Normalize.css\"></a>替代品 Normalize.css</h2><p>历史的车轮滚滚向前，时过境迁，中国的前端职位越发的火热，开发者们也变得更为专业，<code>CSS Reset</code> 泛滥使用逐渐淡出的前端的视野，被取而代之就是 <a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"noopener\"><code>Normalize.css</code></a>，关于对 <code>CSS Reset</code> 与 <code>Normalize.css</code> 的区别？可以引用知乎上<a href=\"http://www.zhihu.com/question/20094066\" target=\"_blank\" rel=\"noopener\">张小核桃</a>的一个回答：</p>\n<blockquote>\n<p>CSS Reset 是革命党，CSS Reset 里最激进那一派提倡不管你小子有用没用，通通给我脱了那身衣服，凭什么你 body 出生就穿一圈 margin，凭什么你姓 h 的比别人吃得胖，凭什么你 ul 戴一胳膊珠子。于是 *{margin:0;} 等等运动，把人家全拍扁了。看似是众生平等了，实则是浪费了资源又占不到便宜，有求于人家的时候还得贱贱地给加回去，实在需要人家的默认样式了怎么办？人家锅都扔炉子里烧了，自己看着办吧。</p>\n</blockquote>\n<p>所以，normalize.css 的产生是有一定历史原因的（css reset 的滥用），normalize.css 是<a href=\"https://twitter.com/necolas\" target=\"_blank\" rel=\"noopener\">@necolas</a>和<a href=\"https://twitter.com/jon_neal\" target=\"_blank\" rel=\"noopener\">@jon_neal</a> 两位大牛花了几百个小时来研究不同浏览器的默认样式的差异而得出的结晶，感谢前辈们的贡献。 关于 normalize.css 的更多内容，就不在本篇文章里过多赘述了，因为它不是主角啊！有兴趣的童鞋可以点击下面的链接查看：</p>\n<ul>\n<li><a href=\"https://github.com/necolas/normalize.css/\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li><a href=\"http://nicolasgallagher.com/about-normalize-css/\" target=\"_blank\" rel=\"noopener\">官方介绍</a></li>\n<li><a href=\"http://jerryzou.com/posts/aboutNormalizeCss/\" target=\"_blank\" rel=\"noopener\">官方介绍（中文）</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后引用张鑫旭文章中的一段话作为结束：</p>\n<blockquote>\n<p>武侠的最高境界是什么？ – 无招胜有招 设计的最高境界是什么？ – 减少设计 所以，最少的 CSS 代码，最少的渲染，最少的重置就是最好的CSS样式代码，这反应了您的 CSS 层次。说句不好听的话，CSS reset 是用来让那些 CSS 菜鸟，对 CSS 不太了解的人准备的。</p>\n</blockquote>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000003021766\" target=\"_blank\" rel=\"noopener\">关于CSS Reset 那些事（一）之 历史演变与Normalize.css</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2010/07/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99css%E8%BF%9B%E8%A1%8C%E6%9E%B6%E6%9E%84%E7%9A%84/\" target=\"_blank\" rel=\"noopener\">我是如何对网站CSS进行架构的</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2010/04/css-reset%E7%9A%84%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86-%E9%81%BF%E5%85%8D%E6%A0%B7%E5%BC%8F%E9%87%8D%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">CSS reset的重新审视 – 避免样式重置</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2010/08/html5-css-reset/\" target=\"_blank\" rel=\"noopener\">HTML5 css reset</a></li>\n<li><a href=\"http://www.jianshu.com/p/69ba47248774\" target=\"_blank\" rel=\"noopener\">CSS:认识 css reset</a></li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"性能优化","path":"api/tags/性能优化.json"}]},{"title":"JS 中的浅拷贝和深拷贝","slug":"JS中的浅拷贝和深拷贝","date":"2017-07-30T10:17:35.000Z","updated":"2019-05-05T03:04:39.102Z","comments":true,"path":"api/articles/JS中的浅拷贝和深拷贝.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<h2 id=\"浅拷贝-VS-深拷贝\"><a href=\"#浅拷贝-VS-深拷贝\" class=\"headerlink\" title=\"浅拷贝 VS 深拷贝\"></a>浅拷贝 VS 深拷贝</h2><p>浅拷贝和深拷贝也成为<strong>浅复制</strong>和<strong>深复制</strong>，是在很多编程语言中经常用到的方法。另外，本文只会涉及到 js 中<strong>复杂数据类型</strong>的拷贝问题（Object, Array 等），不讨论基本数据类型（null, undefined, string, number 和 boolean），因为基本数据类型不存在引用值的情况。浅拷贝和深拷贝都可以实现在已有对象的基础上再生一份的作用，但是对象的实例是存储在堆内存中然后通过一个<strong>引用值</strong>去操作对象，由此拷贝的时候就存在两种情况了：<strong>拷贝引用和拷贝实例</strong>，这也是浅拷贝和深拷贝的区别所在：浅拷贝：只会将对象的各个属性进行依次复制，<strong>并不会进行递归复制</strong>，而JS中存储对象都是存地址的，所以浅拷贝会导致 obj.arr 和 shallowObj.arr 指向同一块内存地址 深拷贝：不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法<strong>递归复制</strong>到新对象上。这就不会存在上面 obj 和 shallowObj 的 arr 属性指向同一个对象的问题。 </p>\n<p>NOTE：如果对象比较大，层级也比较多，<strong>深拷贝会带来性能上的问题</strong>。在遇到需要采用深拷贝的场景时，可以考虑有没有其他替代的方案。在实际的应用场景中，也是浅拷贝更为常用。</p>\n<h2 id=\"浅拷贝的实现方式\"><a href=\"#浅拷贝的实现方式\" class=\"headerlink\" title=\"浅拷贝的实现方式\"></a>浅拷贝的实现方式</h2><p>从以上的对比可以总结出：浅拷贝就是简单的<strong>引用复制</strong>，有以下几种实现方式：</p>\n<h3 id=\"jQuery-extend-false-…\"><a href=\"#jQuery-extend-false-…\" class=\"headerlink\" title=\"jQuery.extend(false,…)\"></a>jQuery.extend(false,…)</h3><p>jQuery.extend 的第一个参数可以是布尔值，用来设置是否深度拷贝，设置为 false 或设置为空时就可以实现浅拷贝</p>\n<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><p>ES6 中的 Object.assign(…) 方法可用来实现浅拷贝–它会遍历一个或多个源对象的所有可枚举的自有键并把它们复制到目标对象，最后返回目标对象。</p>\n<p>NOTE：这里<a href=\"https://stackoverflow.com/questions/38345937/object-assign-vs-extend\" target=\"_blank\" rel=\"noopener\">有一篇stackoverflow的文章</a>，是关于jQuery.extend()和Object.assign()区别的，当然你也可以直接点击<a href=\"https://jsfiddle.net/on9x55ow/2/\" target=\"_blank\" rel=\"noopener\">这里</a>通过实例比较两者区别</p>\n<h3 id=\"Underscore-的-clone\"><a href=\"#Underscore-的-clone\" class=\"headerlink\" title=\"Underscore 的 _.clone()\"></a>Underscore 的 _.clone()</h3><p>在 Underscore 中有这样一个方法：<code>_.clone()</code>，这个方法实际上是一种浅拷贝，所有嵌套的对象和数组都是直接复制引用，但是它比直接赋值来得“深”一些，因为它创建了一个新的对象，可以看下面例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">z</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = _.clone(x);</span><br><span class=\"line\"></span><br><span class=\"line\">y === x       <span class=\"comment\">// false</span></span><br><span class=\"line\">y.b === x.b   <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.b.z = <span class=\"number\">100</span>;</span><br><span class=\"line\">y.b.z         <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-的-slice-和-concat\"><a href=\"#Array-的-slice-和-concat\" class=\"headerlink\" title=\"Array 的 slice 和 concat\"></a>Array 的 slice 和 concat</h3><p>Array 的 slice 和 concat 方法都会<strong>返回一个新的数组实例</strong>，但是这两个方法对于数组中的对象元素却没有执行深拷贝，而只是复制了引用。（和上面的 _.clone() 类似）</p>\n<h3 id=\"for…in…\"><a href=\"#for…in…\" class=\"headerlink\" title=\"for…in…\"></a>for…in…</h3><p>利用 for…in… 遍历对象就可以实现浅拷贝，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">p,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">    c = c||&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.hasOwnProperty(i))&#123;</span><br><span class=\"line\">            c\\[i\\] = p\\[i\\];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝的实现方式\"><a href=\"#深拷贝的实现方式\" class=\"headerlink\" title=\"深拷贝的实现方式\"></a>深拷贝的实现方式</h2><p>浅拷贝的实现方式如上所述，浅拷贝适合用在开发 jQuery 插件或者 redux 中返回 new state，而我们有时需要的是深拷贝，就是<strong>保证拷贝的对象与源对象完全隔离</strong>：</p>\n<h3 id=\"jQuery-extend-true-…\"><a href=\"#jQuery-extend-true-…\" class=\"headerlink\" title=\"jQuery.extend(true,…)\"></a>jQuery.extend(true,…)</h3><p>将 jQuery.extend 的第一个参数设置为 true 即可实现深度拷贝。但是缺点是<strong>无法深拷贝 JSON 对象以外的对象</strong></p>\n<p>NOTE：jQuery 中有一个叫做 $.clone() 的方法，可是它并不是用于一般的 JS 对象的拷贝，而是用于 DOM 对象的克隆，所以不要被它的名字骗到~</p>\n<h3 id=\"借助-JSON-全局对象\"><a href=\"#借助-JSON-全局对象\" class=\"headerlink\" title=\"借助 JSON 全局对象\"></a>借助 JSON 全局对象</h3><p>相比于使用插件，使用 JSON 全局对象的 <code>parse</code> 和 <code>stringify</code> 方法来实现深复制也算是一个简单讨巧的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = jsonClone(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>然而这种方法<strong>有一些隐藏的坑</strong>：</p>\n<ul>\n<li>只能处理能够被json直接表示的数据结构：Number, String, Boolean, Array, 扁平对象；而对于正则表达式、Date 和 Function这种特殊的 Object 就无能为力了</li>\n<li>如果对象中存在循环引用的情况，这个方法也无法正确处理</li>\n</ul>\n<h3 id=\"lodash-的-clone-cloneDeep\"><a href=\"#lodash-的-clone-cloneDeep\" class=\"headerlink\" title=\"lodash 的 _.clone() / _.cloneDeep()\"></a>lodash 的 _.clone() / _.cloneDeep()</h3><p>在 lodash 中关于复制的方法有两个，分别是 <code>_.clone()</code> 和 <code>_.cloneDeep()</code>。其中 <code>_.clone(obj, true)</code> 等价于 <code>_.cloneDeep(obj)</code>。看了源码会发现，lodash 中与深拷贝相关的代码有上百行，而 jQuery 却只有 60 多行，这是为什么呢？原因是 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对<strong>存在环的对象</strong>的处理也是非常出色的。 所以，loadsh 在深拷贝上下了很多功夫，是一个很完美同时更拥抱未来的一个第三方库</p>\n<h2 id=\"各个深拷贝方法的比较\"><a href=\"#各个深拷贝方法的比较\" class=\"headerlink\" title=\"各个深拷贝方法的比较\"></a>各个深拷贝方法的比较</h2><p><a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074\" target=\"_blank\" rel=\"noopener\">stackoverflow 上有一个提问</a>，讨论了 JS 中各个深拷贝方法的效率问题，然后有位大牛借助 jsben 对各个深拷贝方法进行了<a href=\"http://jsben.ch/bWfk9\" target=\"_blank\" rel=\"noopener\">实例测试</a>，强烈推荐大家看一下这个提问下的讨论以及实例测试的结果，相信看完后你对 JS 中的深拷贝会有更深刻的理解~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/tracylin/p/5346314.html\" target=\"_blank\" rel=\"noopener\">也来谈一谈js的浅复制和深复制</a></li>\n<li><a href=\"https://www.zhihu.com/question/23031215\" target=\"_blank\" rel=\"noopener\">javascript中的深拷贝和浅拷贝？</a></li>\n<li><a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></li>\n</ul>\n","raw":null,"categories":[{"name":"js","path":"api/categories/js.json"}],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"计算机基础","path":"api/tags/计算机基础.json"},{"name":"数据结构","path":"api/tags/数据结构.json"}]},{"title":"Mac下用Cron定时任务更新壁纸","slug":"Mac下用Cron定时任务更新壁纸","date":"2017-07-26T07:08:17.000Z","updated":"2019-05-05T03:04:39.106Z","comments":true,"path":"api/articles/Mac下用Cron定时任务更新壁纸.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>这个技巧的原文来自<a href=\"https://www.macosxautomation.com/automator/apod/index.html\" target=\"_blank\" rel=\"noopener\">Set Desktop to NASA Astronomy Picture of the Day</a>，作者通过 Automator 脚本可以每天自动去 NASA（美国宇航局）下载“每日一图”，同时将其设置为桌面。是不是听起来很酷！当然了，我第一次看到的并不是上面那篇文章，而是另一位大神（harttle）的<a href=\"http://harttle.com/2015/11/20/crontab-desktop.html\" target=\"_blank\" rel=\"noopener\">用Cron定时任务更新壁纸</a>，harttle 并没有用 Automator 方式，而是通过 Cron 定时任务实现了这个功能。美中不足的是，harttle 是 Linux 系统，然后我就在自己的 Mac 上试了一下，下面就跟着我一起来实现一把吧！</p>\n<h2 id=\"下载壁纸的脚本\"><a href=\"#下载壁纸的脚本\" class=\"headerlink\" title=\"下载壁纸的脚本\"></a>下载壁纸的脚本</h2><p>首先，我们需要完成一个下载壁纸的脚本，在 Mac 环境下就是 shell 脚本了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/local/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载HTML到/tmp</span></span><br><span class=\"line\">base=<span class=\"string\">'http://apod.nasa.gov/apod/'</span></span><br><span class=\"line\">wget -O /tmp/nasa <span class=\"variable\">$&#123;base&#125;</span>astropix.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到其中的&lt;img&gt;标签的src参数</span></span><br><span class=\"line\">href=<span class=\"variable\">$&#123;base&#125;</span>\\`cat /tmp/nasa | grep -i <span class=\"string\">'&lt;img'</span> | awk -F <span class=\"string\">'\"'</span> <span class=\"string\">'&#123;print $2&#125;'</span>\\`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算src的文件后缀</span></span><br><span class=\"line\">ext=<span class=\"variable\">$&#123;href##*.&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算保存到的文件地址</span></span><br><span class=\"line\">file=/Users/\bYourMacName/Pictures/nasa/\\`date +<span class=\"string\">\"%Y-%m-%d\"</span>\\`.<span class=\"variable\">$ext</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载img</span></span><br><span class=\"line\">wget -O <span class=\"variable\">$file</span> <span class=\"variable\">$href</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>不能完全复制粘贴上面的代码，需要注意将 <code>YourMacName</code> 换成你的真实文件夹名</li>\n<li>需要提前安装 wget，可以通过 brew install wget 安装</li>\n<li>需要将脚本保存到 /usr/local/bin 这个目录下，命名就随便了，可以取名为 nasa-pic-of-day.sh，运行一下，如果在 /Users/\bYourMacName/Pictures/nasa/ 下有一张图片那说明这一步已经成功了！</li>\n</ul>\n<h2 id=\"Cron-定时任务\"><a href=\"#Cron-定时任务\" class=\"headerlink\" title=\"Cron 定时任务\"></a>Cron 定时任务</h2><p>Cron 是 Unix 系统中用于周期执行任务的守护进程，被定时的任务由 crontab 文件提供。我们来写一个自己的 crontab 文件，保存为 ~/bin/daily.cron：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/usr/<span class=\"built_in\">local</span>/bin/bash</span><br><span class=\"line\">30 8 * * * /usr/<span class=\"built_in\">local</span>/bin/nasa-pic-of-day.sh &gt;&gt; /usr/<span class=\"built_in\">local</span>/var/frontend/cron 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>其中 30 表示分钟，6 表示小时，后面的依次是日、月、星期。同时将输出重定向到 /var/harttle/cron（当然你需要确保这个目录存在）。2&gt;&amp;1 是将错误输出重定向至标准输出，这样我们的日志中将会同时包含标准输出和错误输出。 然后通过 crontab 命令载入我们的这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab /usr/<span class=\"built_in\">local</span>/bin/daily.cron</span><br></pre></td></tr></table></figure>\n<p>此后呢，我们的脚本就会在每天早上 8:30 执行。如果有问题我们可以查看日志文件 /usr/local/var/YourMacName/cron，这里有脚本的一切输出。</p>\n<h2 id=\"编辑-crontab\"><a href=\"#编辑-crontab\" class=\"headerlink\" title=\"编辑 crontab\"></a>编辑 crontab</h2><p>crontab 会把刚才载入的文件保存起来，以后我们可以通过 <code>crontab -e</code> 直接更改它（注意更改原文件是不起作用的）。在 Mac 上保存更改时会有错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab: temp file must be edited <span class=\"keyword\">in</span> place</span><br></pre></td></tr></table></figure>\n<p>可以在 ~/.vimrc 后面加一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autocmd filetype crontab setlocal nobackup nowritebackup</span><br></pre></td></tr></table></figure>\n<h2 id=\"Cron-运行环境\"><a href=\"#Cron-运行环境\" class=\"headerlink\" title=\"Cron 运行环境\"></a>Cron 运行环境</h2><p>Cron 运行脚本的环境和交互式 Shell 是不一样的，这一点需要注意。你的脚本可以在交互式 Shell 中正常运行，但 Cron 中可能会有错误。</p>\n<blockquote>\n<p>Cron always runs with a mostly empty environment. HOME, LOGNAME, and SHELL are set; and a very limited PATH.</p>\n</blockquote>\n<p>推荐的做法是在 Cron 运行的脚本中显式地声明那些环境变量：<code>source ~/.bashrc</code>，来手动设置需要的环境。比如在 Mac 上，你可能会需要这一项设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"Mac","path":"api/tags/Mac.json"}]},{"title":"读书笔记系列（8）——CSS Secrets","slug":"读书笔记系列（8）——CSS Secrets","date":"2017-07-06T10:21:45.000Z","updated":"2019-05-05T03:04:39.114Z","comments":true,"path":"api/articles/读书笔记系列（8）——CSS Secrets.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_248.png","content":"<p>这本书被誉为近十年来最出色的一本 CSS 相关书籍，作者是被誉为 “CSS一姐” 的 Lea Verou，是 W3C CSS 工作组特邀专家，而我看的是这本书的译本（翻译为 CSS 揭秘），作者叫张鹏，是百姓网的前端架构师；译者翻译的不错，同时还加入了自己的注解，如果对这本书有任何疑问，可以<a href=\"http://book.cssmagic.net\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看译者的注解。作者通过示例介绍了 CSS 的 47 个技巧，并将其归类至 7 大类中，由于这本书的绝大部分内容都是很值得学习的，所以关于这本书的读书笔记可能会比较长，强烈推荐你认真阅读一下这本书，是一本不可多得的 CSS 进阶教材。</p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><h3 id=\"currentColor\"><a href=\"#currentColor\" class=\"headerlink\" title=\"currentColor\"></a>currentColor</h3><p>这是一个特殊的颜色关键字，它是 CSS 中有史以来的第一个变量，举个例子，加入我们想让所有的水平分割线（所有 <code>&lt;hr&gt;</code> 元素）自动与文本的颜色一致，可以这样写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">hr</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: .<span class=\"number\">5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>currentColor 其实不仅仅可以用到 background 属性，还可以用在 border-color、outline-color、text-shadow 和 box-shadow 等等</p>\n<h3 id=\"避免不必要的媒体查询\"><a href=\"#避免不必要的媒体查询\" class=\"headerlink\" title=\"避免不必要的媒体查询\"></a>避免不必要的媒体查询</h3><ul>\n<li>使用百分比长度来取代固定长度，如果实在做不到这一点，也应该尝试使用与视口相关的单位（vw、vh、vmin  和vmax）</li>\n<li>当你需要在较大分辨率下得到固定宽度时，使用 max-width 而不是 width，因为它可以适应较小的分辨率，而无需使用媒体查询。</li>\n<li>不要忘记为替换元素(比如 img、object、video、iframe 等)设置一个 max-width，值为 100%。</li>\n<li>假如背景图片需要完整地铺满一个容器，不管容器的尺寸如何变化，background-size: cover 这个属性都可以做到。但是，我们也要时刻牢记——带宽并不是无限的，因此在移动网页中通过 CSS 把一张大图缩小显示往往是不太明智的。</li>\n<li>当图片(或其他元素)以行列式进行布局时，让视口的宽度来决定列的数量。弹性盒布局(即 Flexbox)或者 display: inline-block 加上常规的文本折行行为，都可以实现这一点。</li>\n<li>在使用多列文本时，指定 column-width(列宽)而不是指定 column-count(列数)，这样它就可以在较小的屏幕上自动显示为单列布局。</li>\n</ul>\n<h3 id=\"合理使用简写\"><a href=\"#合理使用简写\" class=\"headerlink\" title=\"合理使用简写\"></a>合理使用简写</h3><p>以下两行 CSS 代码并不是等价的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rebeccapurple</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">rebeccapurple</span>;</span><br></pre></td></tr></table></figure>\n<p>前者是简写，它可以确保你得到 rebeccapurple 纯色背景 但是如果你用的是展开式的单个属性（background-color），那这个元素的背景最终有可能会显示为一个粉色的渐变图案、一张猫的图片或其他任何东西，因为同时可能会有一条 background-image 声明在起作用。所以展开式属性并不会帮助你清空所有相关的其他属性，从而有可能会被其他属性所干扰。</p>\n<h3 id=\"预处理器不是完美无缺的\"><a href=\"#预处理器不是完美无缺的\" class=\"headerlink\" title=\"预处理器不是完美无缺的\"></a>预处理器不是完美无缺的</h3><ul>\n<li>CSS 的<strong>文件体积</strong>和<strong>复杂度</strong>可能会失控</li>\n<li><strong>调试难度</strong>会增加（但是 SourceMap 正是为了解决这个痛点而生的，它会告诉浏览器哪些编译生成的 CSS 代码对应哪些预处理器 CSS 代码，精确到行号）</li>\n<li>预处理器在开发过程中引入了一定程度的<strong>延时</strong></li>\n<li><strong>学习成本</strong>变高</li>\n<li>预处理器是由人类写出来的，就像所有由 人类写出来的大型程序一样，<strong>它们有它们自己的 bug</strong></li>\n</ul>\n<h3 id=\"预处理器中不可能做到的变量玩法\"><a href=\"#预处理器中不可能做到的变量玩法\" class=\"headerlink\" title=\"预处理器中不可能做到的变量玩法\"></a>预处理器中不可能做到的变量玩法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123; <span class=\"attribute\">--accent-color</span>: purple; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123; <span class=\"attribute\">--accent-color</span>: rebeccapurple; &#125; </span><br><span class=\"line\"><span class=\"selector-tag\">li</span> &#123; <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--accent-color); &#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的意图是：在有序列表中，列表项的背景色将是 rebeccapurple；但在无序列表中，列表项的背景色将是 purple</p>\n<h2 id=\"背景与边框\"><a href=\"#背景与边框\" class=\"headerlink\" title=\"背景与边框\"></a>背景与边框</h2><h3 id=\"半透明边框\"><a href=\"#半透明边框\" class=\"headerlink\" title=\"半透明边框\"></a>半透明边框</h3><p>假设我们想给一个容器设置一层白色背景和一道半透明白色边框，body 的背景会从它的半透明边框透上来。我们最开始的尝试可能是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.5</span>); </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">white</span>;</span><br></pre></td></tr></table></figure>\n<p>但实际上，上面这段代码让 body 的背景从半透明白色边框处透了上来，这实际上得到的效果跟纯白实色的边框看起来完全一样。 所以我们可以通过 background-clip 属性来调整上述默认行为所带来的不便，这个属性的初始值是 border-box，意味着背景会被元素的 border box(边框的外沿框)裁切掉。如果不希望背景侵入边框所在的范围，我们要做的就是把它的值设为 padding-box，这样浏览器就会用内边距的外沿来把背景裁切掉。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.5</span>); </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">white</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-clip</span>: <span class=\"selector-tag\">padding-box</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多重边框\"><a href=\"#多重边框\" class=\"headerlink\" title=\"多重边框\"></a>多重边框</h3><h4 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h4><p>box-shadow 还接受第四个参数（称作”扩张半径”），通过指定正值或负值，可以让投影面积加大或者减小。一个正值的扩张半径加上两个为零的偏移量以及为零的模糊值，得到的“投影”其实就像一道实线边框。这并没有什么了不起的，因为你完全可以用 border 属性来生成完全一样的边框效果。不过 box-shadow 的好处在于，<strong>它支持逗号分隔语法，我们可以创建任意数量的投影</strong>，但是多重投影方案有一些注意事项： 投影不会影响布局，也不会受到 box-sizing 属性的影响。不过，你可以通过<strong>内边距或外边距</strong>(这取决于投影是内嵌和还是外扩的)来额外模拟出边框所需要占据的空间。 通过 box-shadow 创建出的假”边框’出现在元素的外圈，它们并不会响应鼠标事件，比如悬停或点击。可以通过给 box-shadow 加上 inset 关键字，来使投影绘制在元素的内圈，此时还需要额外的内边距来腾出足够的空隙</p>\n<h4 id=\"ouline\"><a href=\"#ouline\" class=\"headerlink\" title=\"ouline\"></a>ouline</h4><p>在某些情况下，你可能只需要两层边框，那就可以先设置一层常规边框，再加上 outline(描边)属性来产生外层的边框。这种方法的优点在于边框样式十分灵活（box-shadow 无法产生虚线边框），而且可以通过 outline-offset 属性来控制它跟元素边缘之间的间距，但是同样有一些需要注意的地方：</p>\n<ul>\n<li>只适用于双层”边框”的场景，因为 outline 不接受逗号</li>\n<li>outline 产生的边框不一定会贴合 border-radius 产生的圆角</li>\n<li>对于 outline 的表现，各个浏览器可能会有所不同，最好在不同浏览器中完整地测试最终效果</li>\n</ul>\n<h3 id=\"灵活的背景定位\"><a href=\"#灵活的背景定位\" class=\"headerlink\" title=\"灵活的背景定位\"></a>灵活的背景定位</h3><h4 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h4><p>background-position 允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前面指定关键字：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">code-pirate</span><span class=\"selector-class\">.svg</span>) <span class=\"selector-tag\">no-repeat</span> <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: <span class=\"selector-tag\">right</span> 20<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">bottom</span> 10<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"background-origin\"><a href=\"#background-origin\" class=\"headerlink\" title=\"background-origin\"></a>background-origin</h4><p>背景图片的 background-position 属性是默认相对于 padding box 的左上角的，但是 background-origin 可以改变这种行为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(\"<span class=\"selector-tag\">code-pirate</span><span class=\"selector-class\">.svg</span>\") <span class=\"selector-tag\">no-repeat</span> <span class=\"selector-id\">#58abottom</span> <span class=\"selector-tag\">right</span>; <span class=\"comment\">/* 或 100% 100% */</span> </span><br><span class=\"line\"><span class=\"selector-tag\">background-origin</span>: <span class=\"selector-tag\">content-box</span>;</span><br></pre></td></tr></table></figure>\n<p>此时，background-position 将以内容区的边缘作为基准，也就是此时图片距离边角的偏移量就跟内边距保持一致了</p>\n<h4 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc\"></a>calc</h4><p>把背景图片定位到距离底边 10px 且距离右边 20px 的位置。如果我们仍然以左上角偏移的思路来考虑，其实就是希望它有一个 100% - 20px 的水平偏移量，以及 100% - 10px 的垂直偏移量。calc() 函数可以完美地在 background-position 属性中使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">url</span>(\"<span class=\"selector-tag\">code-pirate</span><span class=\"selector-class\">.svg</span>\") <span class=\"selector-tag\">no-repeat</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>) <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 10<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"边框内圆角\"><a href=\"#边框内圆角\" class=\"headerlink\" title=\"边框内圆角\"></a>边框内圆角</h3><p>有时我们需要一个容器，只在内侧有圆角，而边框或描边的四个角在外部仍然保持直角的形状，如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_248.png\" alt=\"\" width=\"400\"></div>\n\n<p>如果只需要达成简单地实色效果，我们可以只用一个元素：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">tan</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: <span class=\"selector-class\">.8em</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">padding</span>: 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 0 0 0 <span class=\"selector-class\">.6em</span> <span class=\"selector-id\">#655</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">outline</span>: <span class=\"selector-class\">.6em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#655</span>;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码产生的视觉效果如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_249.png\" alt=\"\" width=\"\"></div>\n\n<p>我们受益于两个事实：<strong>描边并不会跟着元素的圆角走(因而显示出直角)，但 box-shadow 却是会的</strong>。因此，如果我们把这两者叠加到一起，box-shadow 会刚好填补描边和容器圆角之间的空隙，这两者的组合达成了我们想要的效果。</p>\n<h3 id=\"条纹背景\"><a href=\"#条纹背景\" class=\"headerlink\" title=\"条纹背景\"></a>条纹背景</h3><p>假如我们有一条基本的垂直现行渐变，颜色从 #fb3 过渡到 #58a：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 20%, <span class=\"selector-id\">#58a</span> 80%);</span><br></pre></td></tr></table></figure>\n<h4 id=\"水平条纹\"><a href=\"#水平条纹\" class=\"headerlink\" title=\"水平条纹\"></a>水平条纹</h4><p>现在容器顶部的 20% 区域被填充为 #fb3 实色，而底部 20% 区域被 填充为 #58a 实色。真正的渐变只出现在容器 60% 的高度区域。如果我们把两个色标重合在一起（改为 50% 和 50%）， 会发生什么?</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 50%, <span class=\"selector-id\">#58a</span> 50%);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_250.png\" alt=\"\" width=\"\"></div>\n\n<p>所以，本质上，我们通过垂直线性渐变创建了两条巨大的水平条纹 我们还可以通过 background-size 来调整其尺寸，然后由于背景在默认情况下是重复平铺的，整个容器其实已经被填满了水平条纹：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 50%, <span class=\"selector-id\">#58a</span> 50%); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_251.png\" alt=\"\" width=\"\"></div>\n\n<p>还有一条规范是：如果某个色标的位置值比整个列表中在它之前的色标的位置值都要小，则该色标的位置值会被设置为它前面所有色标位置值的最大值。这意味着，如果我们把第二个色标的位置值设置为 0，那它的位置就总是会被浏览器调整为前一个色标的位置值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 30%, <span class=\"selector-id\">#58a</span> 0); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p>如果要创建超过两种颜色的条纹，也是很容易的。举例来说，下面的代码可以生成三种颜色的水平条纹：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#fb3</span> 33<span class=\"selector-class\">.3</span>%,<span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 66<span class=\"selector-class\">.6</span>%, <span class=\"selector-tag\">yellowgreen</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 45<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"垂直条纹\"><a href=\"#垂直条纹\" class=\"headerlink\" title=\"垂直条纹\"></a>垂直条纹</h4><p>我们只需要在开头加上一个额外的参数来指定渐变的方向（但是我们还需要把 background-size 的值颠倒一下）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">right</span>, <span class=\"comment\">/* 或 90deg */</span> <span class=\"selector-id\">#fb3</span> 50%, <span class=\"selector-id\">#58a</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 100%;</span><br></pre></td></tr></table></figure>\n<h4 id=\"斜向条纹\"><a href=\"#斜向条纹\" class=\"headerlink\" title=\"斜向条纹\"></a>斜向条纹</h4><p>我们需要用单个贴片包包含四条条纹，而不是两条，只有这样才可能做到无缝拼接：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_252.png\" alt=\"\" width=\"\"></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>,<span class=\"selector-id\">#fb3</span> 25%, <span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 50%,<span class=\"selector-id\">#fb3</span> 0, <span class=\"selector-id\">#fb3</span> 75%, <span class=\"selector-id\">#58a</span> 0); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p>但是，如果我们想得到条纹宽度为 15px 的背景，则需要借助<strong>勾股定理</strong>进行计算，具体原理就不在赘述，看上面图应该能看出来</p>\n<h4 id=\"更好的斜向条纹\"><a href=\"#更好的斜向条纹\" class=\"headerlink\" title=\"更好的斜向条纹\"></a>更好的斜向条纹</h4><p>一个鲜为人知的真相是 linear-gradient() 和 radial-gradient() 还各有一个循环式的加强版：repeating-linear-gradient() 和 repeating-radial-gradient()。 它们的工作方式跟前两者类似，只有一点不同：<strong>色标是无限循环重复的，直到填满整个背景</strong>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">repeating-linear-gradient</span>(60<span class=\"selector-tag\">deg</span>,<span class=\"selector-id\">#fb3</span>, <span class=\"selector-id\">#fb3</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 30<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_253.png\" alt=\"\" width=\"\"></div>\n\n<p>在这个方法中，不论条纹的角度如何，我们在创建双色条纹时都需要用到四个色标</p>\n<h4 id=\"灵活的同色系条纹\"><a href=\"#灵活的同色系条纹\" class=\"headerlink\" title=\"灵活的同色系条纹\"></a>灵活的同色系条纹</h4><p>如果我们想要的条纹图案并不是由差异极大的几种颜色组成的，而是属于同一色系，只是在明度方面有轻微差异的话，我们可以<strong>把最深的颜色指定为背景色，同时把半透明白色的条纹叠加在背景色之上来得到浅色条纹</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">repeating-linear-gradient</span>(30<span class=\"selector-tag\">deg</span>,</span><br><span class=\"line\">                    <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.1</span>),</span><br><span class=\"line\">                    <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.1</span>) 15<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">                    <span class=\"selector-tag\">transparent</span> 0, <span class=\"selector-tag\">transparent</span> 30<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n<p>我们现在只需要修改一个地方就可以改变所有颜色了。我们还得到了一个额外的好处，对于那些不支持 CSS 渐变的浏览器来说，这里的背景色还起到了回退的作用</p>\n<h3 id=\"复杂的背景图案\"><a href=\"#复杂的背景图案\" class=\"headerlink\" title=\"复杂的背景图案\"></a>复杂的背景图案</h3><h4 id=\"网格\"><a href=\"#网格\" class=\"headerlink\" title=\"网格\"></a>网格</h4><p>做法：<strong>把水平和垂直的条纹叠加起来</strong>；在某些情况下，我们希望网格中每个格子的大小可以调整，而网格线条的粗细同时保持固定。此时可以使用长度而不是百分比作为色标。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span><span class=\"selector-pseudo\">:linear-gradient(white</span> 1<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0),<span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">white</span> 1<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"波点\"><a href=\"#波点\" class=\"headerlink\" title=\"波点\"></a>波点</h4><p>径向渐变能够创建的最简单的图案是圆点的阵列；我们可以生成两层圆点阵列图案，并把它们的背景定位错开，这样就可以得到真正的波点图案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: #655;</span><br><span class=\"line\">background-image: radial-gradient(tan 30%, transparent 0),radial-gradient(tan 30%, transparent 0); </span><br><span class=\"line\">background-size: 30px 30px;</span><br><span class=\"line\">background-position: 0 0, 15px 15px;</span><br></pre></td></tr></table></figure>\n<h4 id=\"棋盘\"><a href=\"#棋盘\" class=\"headerlink\" title=\"棋盘\"></a>棋盘</h4><p>棋盘图案是可以通过平铺生成的，平铺成这个图案的典型贴片包含两种不同颜色的方块，且相互间隔，这里的窍门在于用两个直角三角形来拼合出我们想要的方块</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#eee</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#bbb</span> 25%, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 75%, <span class=\"selector-id\">#bbb</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#bbb</span> 25%, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 75%, <span class=\"selector-id\">#bbb</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 0, 15<span class=\"selector-tag\">px</span> 15<span class=\"selector-tag\">px</span>,15<span class=\"selector-tag\">px</span> 15<span class=\"selector-tag\">px</span>, 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 30<span class=\"selector-tag\">px</span> 30<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS3图案库\"><a href=\"#CSS3图案库\" class=\"headerlink\" title=\"CSS3图案库\"></a>CSS3图案库</h4><p><a href=\"http://lea.verou.me/css3patterns/\" target=\"_blank\" rel=\"noopener\">lea.verou.me/css3patterns</a>，展示了 CSS 渐变早在 2011 年就能够实现的效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_254.png\" alt=\"\" width=\"\"></div>\n\n<h4 id=\"SVG图案库\"><a href=\"#SVG图案库\" class=\"headerlink\" title=\"SVG图案库\"></a>SVG图案库</h4><p><a href=\"http://philbit.com/svgpatterns\" target=\"_blank\" rel=\"noopener\">philbit.com/svgpatterns</a>，这个网站是 CSS 图案库的 SVG 版实现</p>\n<h4 id=\"Bennett-Feely-的图案库\"><a href=\"#Bennett-Feely-的图案库\" class=\"headerlink\" title=\"Bennett Feely 的图案库\"></a>Bennett Feely 的图案库</h4><p><a href=\"http://bennettfeely.com/gradients\" target=\"_blank\" rel=\"noopener\">http://bennettfeely.com/gradients</a>，采用混合模式生成的 CSS 图案库</p>\n<h3 id=\"伪随机背景\"><a href=\"#伪随机背景\" class=\"headerlink\" title=\"伪随机背景\"></a>伪随机背景</h3><p>重现大自然的随机性是一个挑战，因为 CSS 本身没有提供任何随机功能。</p>\n<p>为了更真实地模拟条纹的随机性，我们接下来可能会想到，把这组条纹从一个平面拆散为多个图层:一种颜色作为底色，另三种颜色作为条纹，然后再让条纹以不同的间隔进行重复平铺：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(20, 40%, 90%); </span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#fb3</span> 10<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#ab4</span> 20<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0),</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-id\">#655</span> 20<span class=\"selector-tag\">px</span>, <span class=\"selector-tag\">transparent</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 80<span class=\"selector-tag\">px</span> 100%, 60<span class=\"selector-tag\">px</span> 100%, 40<span class=\"selector-tag\">px</span> 100%;</span><br></pre></td></tr></table></figure>\n<p>但是我们很容易发现：<strong>各层背景图像以不同间距重复数次后再次统一对齐，而贴片的尺寸实际上就是所有 background-size 的最小公倍数</strong>，而 40、60 和 80 的最小公倍数正是 240。 所以为了模拟随机，我们需要把贴片的尺寸最大化：<strong>为了让最小公倍数最大化，这些数字最好是“相对质数”。</strong>这个技巧被 Alex Walker 定名为“蝉原则”，他最先提出了通过质数来 增加随机真实性的想法。请注意这个方法不仅适用于背景，还可以用于其他 涉及有规律重复的情况：</p>\n<ul>\n<li>在照片图库中，为每幅图片应用细微的伪随机旋转效果时，可以使 用多个 :nth-child(a) 选择符，且让 a 是质数。</li>\n<li>如果要生成一个动画，而且想让它看起来不是按照明显的规律在 循环时，我们可以应用多个时长为质数的动画。</li>\n</ul>\n<h3 id=\"连续的图像边框\"><a href=\"#连续的图像边框\" class=\"headerlink\" title=\"连续的图像边框\"></a>连续的图像边框</h3><p>有时我们想把一幅图案或图片应用为边框，而不是背景，达到下面的展示效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_255.png\" alt=\"\" width=\"\"></div>\n\n<p>此时 border-image 是不可能做到的，因为它无法随着元素宽高和边框厚度的变化而变化。所以我们的思路是<strong>在石雕背景图片之上，再叠加一层纯白的实色背景</strong>。为了让下层的图片背景透过边框区域显示出来，我们需要给两层背景指定不同的 background-clip 值。最后一个要点在于，我们只能在多重背景的最底层设置背景色，因此需要用一道从白色过渡到白色的 CSS 渐变来模拟出纯白实色背景的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">white</span>),<span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">stone-art</span><span class=\"selector-class\">.jpg</span>); </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">cover</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-clip</span>: <span class=\"selector-tag\">padding-box</span>, <span class=\"selector-tag\">border-box</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-origin</span>: <span class=\"selector-tag\">border-box</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"老式信封样式的边框\"><a href=\"#老式信封样式的边框\" class=\"headerlink\" title=\"老式信封样式的边框\"></a><a href=\"http://play.csssecrets.io/vintage-envelope\" target=\"_blank\" rel=\"noopener\">老式信封样式的边框</a></h4><p>将上面的技巧用在渐变图案上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">white</span>) <span class=\"selector-tag\">padding-box</span>,</span><br><span class=\"line\">            <span class=\"selector-tag\">repeating-linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>,</span><br><span class=\"line\">              <span class=\"selector-tag\">red</span> 0, <span class=\"selector-tag\">red</span> 12<span class=\"selector-class\">.5</span>%,</span><br><span class=\"line\">              <span class=\"selector-tag\">transparent</span> 0, <span class=\"selector-tag\">transparent</span> 25%,</span><br><span class=\"line\">              <span class=\"selector-id\">#58a</span> 0, <span class=\"selector-id\">#58a</span> 37<span class=\"selector-class\">.5</span>%,</span><br><span class=\"line\">              <span class=\"selector-tag\">transparent</span> 0, <span class=\"selector-tag\">transparent</span> 50%)</span><br><span class=\"line\">              0 / 5em 5em;</span><br></pre></td></tr></table></figure>\n<h4 id=\"蚂蚁行军边框\"><a href=\"#蚂蚁行军边框\" class=\"headerlink\" title=\"蚂蚁行军边框\"></a><a href=\"http://play.csssecrets.io/marching-ants\" target=\"_blank\" rel=\"noopener\">蚂蚁行军边框</a></h4><p>为了创建蚂蚁行军效果，我们将会用到“老式信封”技巧的一个变种。我们将把条纹转变为黑白两色，并把边框的宽度减少至 1px，然后再把 background-size 改为某个合适的值。最后，我们把 background-position 以动画的方式改变为 100%，就可以让它滚动起来了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> ants &#123; <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-position</span>: <span class=\"number\">100%</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.marching-ants</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid transparent; <span class=\"attribute\">background</span>:</span><br><span class=\"line\">        <span class=\"built_in\">linear-gradient</span>(white, white) padding-box,</span><br><span class=\"line\">        <span class=\"built_in\">repeating-linear-gradient</span>(-45deg,</span><br><span class=\"line\">          black 0, black 25%, white 0, white 50%</span><br><span class=\"line\">        ) <span class=\"number\">0</span> / .<span class=\"number\">6em</span> .<span class=\"number\">6em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: ants <span class=\"number\">12s</span> linear infinite; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a><a href=\"http://play.csssecrets.io/footnote\" target=\"_blank\" rel=\"noopener\">脚注</a></h4><p>我们可以用 border-image 搭配渐变图案实现顶部边框被裁切的效果，就像一般的脚注那样，我们所需要的就是 border-image 属性再加上一条由渐变生成的垂直条纹，并把要裁切的长度在渐变中写好。边框线的粗细交给 border-width 来控制：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-top</span>: <span class=\"selector-class\">.2em</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-image</span>: 100% 0 0 <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>,<span class=\"selector-tag\">currentColor</span> 4<span class=\"selector-tag\">em</span>,<span class=\"selector-tag\">transparent</span> 0);</span><br><span class=\"line\"><span class=\"selector-tag\">padding-top</span>: 1<span class=\"selector-tag\">em</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h2><h3 id=\"自适应的椭圆\"><a href=\"#自适应的椭圆\" class=\"headerlink\" title=\"自适应的椭圆\"></a>自适应的椭圆</h3><p>我们想要达到这样效果：<strong>如果宽高相等，就显示为一个圆；如果宽高不等，就显示为一个椭圆</strong> border-radius 可以单独指定水平和垂直半径，用一个斜杠（/）分隔这两个值即可；同时，它不仅可以接受长度值，还可以接受百分比值，这个百分比值会基于元素的尺寸进行解析。这意味着相同的百分比可能会计算出不同的水平和垂直半径，因此可以这样实现自适应椭圆：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: 50%;</span><br></pre></td></tr></table></figure>\n<h3 id=\"半椭圆\"><a href=\"#半椭圆\" class=\"headerlink\" title=\"半椭圆\"></a>半椭圆</h3><div align=\"center\"><img src=\"/images/hexo_post_256.png\" alt=\"\" width=\"\"></div>\n\n<p>我们可以为四个角提供完全不同的水平和垂直半径，这意味着当 border-radius 的值为 10px / 5px 20px 时，其效果相当于 10px 10px 10px 10px / 5px 20px 5px 20px；所以我们很容易写出半椭圆的 CSS 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-radius: 50% / 100% 100% 0 0;</span><br></pre></td></tr></table></figure>\n<p>举一反三，沿纵轴劈开的半椭圆：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-radius: 100% 0 0 100% / 50%;</span><br></pre></td></tr></table></figure>\n<p>四分之一椭圆（其中一个角的水平和垂直半径值都需要是 100%，而其他三个角都不能设为圆角）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">border-radius</span>: 100% 0 0 0;</span><br></pre></td></tr></table></figure>\n<p>但是很遗憾，<strong>border-radius 是无法生成八分之一椭圆，三分之一椭圆的</strong>！</p>\n<h3 id=\"平行四边形\"><a href=\"#平行四边形\" class=\"headerlink\" title=\"平行四边形\"></a>平行四边形</h3><p>我们可以通过 skew() 的变形属性来对某个矩形进行斜向拉伸，但是这回导致它的内容也发生了斜向变形。所以我们的思路是<strong>把所有样式（背景、边框等）应用到伪元素上，然后再对伪元素进行变形</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    /\\* 其他的文字颜色、内边距等样式...... */</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>; <span class=\"comment\">/* 用伪元素来生成一个矩形 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>; <span class=\"comment\">/* 防止伪元素的背景遮住内容 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#58a</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(45deg); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个技巧<strong>适用于其他任何变形样式</strong>，当我们想<strong>变形一个元素而不想变形它的内容</strong>时就很有用：</p>\n<ul>\n<li>可以用<a href=\"http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/\" target=\"_blank\" rel=\"noopener\">在IE下实现多重背景</a></li>\n<li>实现“边框内圆角”效果</li>\n<li>可以用来为某一层“背景”<a href=\"http://nicolasgallagher.com/css-background-image-hacks\" target=\"_blank\" rel=\"noopener\">单独设置类似opacity这样的属性</a></li>\n<li>模拟多层边框</li>\n</ul>\n<h3 id=\"菱形图片\"><a href=\"#菱形图片\" class=\"headerlink\" title=\"菱形图片\"></a><a href=\"http://play.csssecrets.io/diamond-clip\" target=\"_blank\" rel=\"noopener\">菱形图片</a></h3><p>主要思路是使用 clip-path 属性，它最大的缺陷在于其浏览器支持程度还很有限。但是，它可以平稳退化（只是没有裁切效果而已），因此它至少有资格成为我们的备选方案 我们将会使用 polygon()（多边形）函数来指定一个菱形。实际上，它允许我们用一系列（以逗号分隔的）坐标点来指定任意的多边形。我们甚至可以使用百分比值，它们会解析为元素自身的尺寸：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">clip-path</span>: <span class=\"selector-tag\">polygon</span>(50% 0, 100% 50%, 50% 100%, 0 50%);</span><br></pre></td></tr></table></figure>\n<p>clip-path 所能创造的奇迹还不止于此。这个属性甚至可以参与动画，只要我们的动画是在同一种形状函数(比如这里是 polygon())之间进行的，而且点的数量是相同的。因此，如果我们希望图片在鼠标悬停时平滑地扩展为完整的面积，只需要这样做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clip-path</span>: <span class=\"built_in\">polygon</span>(50% 0, 100% 50%, 50% 100%, 0 50%);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span> clip-path;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clip-path</span>: <span class=\"built_in\">polygon</span>(0 0, 100% 0, 100% 100%,0 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MDN 关于 clip-path 的文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path</a></p>\n<h3 id=\"切角效果\"><a href=\"#切角效果\" class=\"headerlink\" title=\"切角效果\"></a>切角效果</h3><p>把角切掉不仅是为了省钱，它还是一种非常流行的设计风格，不论是在印刷媒介还是在网页设计中都是如此。</p>\n<h4 id=\"用渐变实现\"><a href=\"#用渐变实现\" class=\"headerlink\" title=\"用渐变实现\"></a>用渐变实现</h4><p>假设我们只需要一个角被切掉，以右下角为例，可以充分利用渐变的一大特性：渐变可以接受一个角度（比如 45deg）作为方向，而且色标的位置信息也可以是绝对的长度值，不受容器尺寸的影响；综上，我们需要一个线性渐变，把一个透明色标放在切角处，然后在相同位置设置另一个色标，并且把它的颜色设置为我们想要的背景色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0);</span><br></pre></td></tr></table></figure>\n<p><strong>左下角和右下角都有切角效果</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">                <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">            <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">                <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 50% 100%; </span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>四个角都有切角效果</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(135<span class=\"selector-tag\">deg</span>,  <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-135deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0)</span><br><span class=\"line\">        <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 50% 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的可维护性并不理想，使用<strong>预处理器的 mixin</strong> 可以帮助我们减少代码的重复度</p>\n<h4 id=\"弧形切角\"><a href=\"#弧形切角\" class=\"headerlink\" title=\"弧形切角\"></a>弧形切角</h4><p>很多人也把这种效果成为“内凹圆角”，因为它看起来就像是圆角的反向版本。唯一的区别在于，我们会用<strong>径向渐变</strong>来替代上述线性渐变：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_257.png\" alt=\"\" width=\"400\"></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">right</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">circle</span> <span class=\"selector-tag\">at</span> <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>,</span><br><span class=\"line\">             <span class=\"selector-tag\">transparent</span> 15<span class=\"selector-tag\">px</span>, <span class=\"selector-id\">#58a</span> 0) <span class=\"selector-tag\">bottom</span> <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 50% 50%; </span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clip-path-实现切角\"><a href=\"#clip-path-实现切角\" class=\"headerlink\" title=\"clip-path 实现切角\"></a>clip-path 实现切角</h4><p>裁切路径最神奇的地方在于我们<strong>可以同时使用百分比数值（它会以元素自身的宽高作为基数度进行换算）和绝对长度值</strong>，从而提供巨大的灵活性。举个例子，如果用裁切路径将一个元素切出 20px 大小的斜面切角，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">clip-path</span>: <span class=\"selector-tag\">polygon</span>(</span><br><span class=\"line\">    20<span class=\"selector-tag\">px</span> 0, <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>) 0, 100% 20<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">    100% <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>), <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>) 100%,</span><br><span class=\"line\">    20<span class=\"selector-tag\">px</span> 100%, 0 <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 20<span class=\"selector-tag\">px</span>), 0 20<span class=\"selector-tag\">px</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>但是它有一个很明显的缺点，就是<strong>当内边距不够宽时，它会裁切掉文本</strong>，因为它只能对元素做统一的裁切，并不能区分元素的各个部分</p>\n<h3 id=\"梯形标签页\"><a href=\"#梯形标签页\" class=\"headerlink\" title=\"梯形标签页\"></a><a href=\"http://play.csssecrets.io/trapezoid-tabs\" target=\"_blank\" rel=\"noopener\">梯形标签页</a></h3><p>一直以来，梯形都是众所周知难以用 CSS 生成的形状，网页开发者如果没有用精心设计的背景图片来实现梯形，那多半就是在用伪元素的边框来模拟梯形两侧的斜边，而我们的思路是通过 3D 变形，将矩形进行3D旋转，就可以创建一个梯形。但由于旋转之后，元素的尺寸会变小，同时会稍微下移，所以我们需要让其在3D空间旋转时固定底边（transform-origin），同时通过 scale() 方法改变它的尺寸：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scaleY</span>(1<span class=\"selector-class\">.3</span>) <span class=\"selector-tag\">perspective</span>(<span class=\"selector-class\">.5em</span>) <span class=\"selector-tag\">rotateX</span>(5<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">transform-origin</span>: <span class=\"selector-tag\">bottom</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_258.png\" alt=\"\" width=\"\"></div>\n\n<p>同时，我们只需要把 transform-origin 改成 bottom left 或 bottom right，就可以立即得到左侧倾斜或右侧倾斜的标签页</p>\n<h3 id=\"简单的饼图\"><a href=\"#简单的饼图\" class=\"headerlink\" title=\"简单的饼图\"></a>简单的饼图</h3><p>我们可以通过渐变来将一个圆形的左右两半设置为不同的颜色，然后通过伪元素的旋转不同角度来实现不同角度的简单饼图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_259.png\" alt=\"\" width=\"\"></div>\n\n<p>由于已经找到了实现任意比率的方法，我们甚至可以用 CSS 动画来实现一个饼图从 0 变化到 100% 的动画，从而得到一个<a href=\"http://play.csssecrets.io/pie-animated\" target=\"_blank\" rel=\"noopener\">炫酷的进度指示器</a>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> spin &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(.5turn); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> bg &#123;</span><br><span class=\"line\">    50% &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#655</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.pie</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span> <span class=\"number\">100%</span> <span class=\"number\">100%</span> <span class=\"number\">0</span> / <span class=\"number\">50%</span>; </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: inherit; </span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: spin <span class=\"number\">3s</span> linear infinite, bg <span class=\"number\">6s</span> step-end infinite;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们需要一个静态的任意比率的饼图，可以利用<strong>负的动画延时</strong>来直接跳至动画中的任意时间 点，并且定格在那里。举例来说，如果动画持续时间定为 6s，我们只需要把 animation-delay 设置为 -1.2s，就能显示出 20% 的比率。最终的效果：<a href=\"http://play.csssecrets.io/pie-static\" target=\"_blank\" rel=\"noopener\">play.csssecrets.io/pie-static</a> 我们还可以通过 SVG 实现简单的饼图，与伪元素相比，SVG 的方案具有不少优点：</p>\n<ul>\n<li>增加第三种颜色非常容易</li>\n<li>不需要特别担心打印，因为 SVG 元素本身被视为页面内容</li>\n<li>可以用内联样式指定颜色这意味着我们可以通过脚本控制颜色</li>\n</ul>\n<p>SVG 方案实现的效果：<a href=\"http://play.csssecrets.io/pie-svg\" target=\"_blank\" rel=\"noopener\">play.csssecrets.io/pie-svg</a></p>\n<h2 id=\"视觉效果\"><a href=\"#视觉效果\" class=\"headerlink\" title=\"视觉效果\"></a>视觉效果</h2><h3 id=\"单侧投影\"><a href=\"#单侧投影\" class=\"headerlink\" title=\"单侧投影\"></a><a href=\"http://play.csssecrets.io/shadow-one-side\" target=\"_blank\" rel=\"noopener\">单侧投影</a></h3><p>解决方案来自 box-shadow 鲜为人知的第四个长度参数，称作扩张半径。这个参数会根据你指定的值去扩大或 (当指定负值时)缩小投影的尺寸。举例来说，一个 -5px 的扩张半径会把投影的宽度和高度各减少 10px(即每边各  5px)。如果给投影应用一个正的垂直偏移量，我们就会在元素的底部看到一道投影，而元素的另外三侧是没有投影的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 0 5<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-4px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"邻边投影\"><a href=\"#邻边投影\" class=\"headerlink\" title=\"邻边投影\"></a><a href=\"http://play.csssecrets.io/shadow-2-sides\" target=\"_blank\" rel=\"noopener\">邻边投影</a></h4><p>把一个 black、6px 的投影设置到右侧和底部可以这样做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 3<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> 6<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-3px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双侧投影\"><a href=\"#双侧投影\" class=\"headerlink\" title=\"双侧投影\"></a><a href=\"http://play.csssecrets.io/shadow-opposite-sides\" target=\"_blank\" rel=\"noopener\">双侧投影</a></h4><p>唯一的办法是用两块投影（每边各一块）来达到目的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 5<span class=\"selector-tag\">px</span> 0 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-5px</span> <span class=\"selector-tag\">black</span>, </span><br><span class=\"line\">            <span class=\"selector-tag\">-5px</span> 0 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-5px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不规则投影\"><a href=\"#不规则投影\" class=\"headerlink\" title=\"不规则投影\"></a>不规则投影</h3><p>当我们想给一个矩形或其他能用 border-radius 生成的形状加投影时，box-shadow 的表现都堪称完美。但是，当元素添加了一些伪元素或半透明的装饰之后，它就有些力不从心了，因为 border-radius 会无耻地忽视透明部分：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_260.png\" alt=\"\" width=\"\"></div>\n\n<p>我们的解决方案是利用 filter 的新属性来指定滤镜效果，比如上面的投影效果可以这样来写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">drop-shadow</span>(2<span class=\"selector-tag\">px</span> 2<span class=\"selector-tag\">px</span> 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.5</span>));</span><br></pre></td></tr></table></figure>\n<p>实现效果：<a href=\"http://play.csssecrets.io/drop-shadow\" target=\"_blank\" rel=\"noopener\">play.csssecrets.io/drop-shadow</a></p>\n<h3 id=\"染色效果\"><a href=\"#染色效果\" class=\"headerlink\" title=\"染色效果\"></a>染色效果</h3><p>首先可以去<a href=\"https://2014.cssconf.com/\" target=\"_blank\" rel=\"noopener\">CSSConf 官网</a>欣赏一下讲师照片的染色效果，当鼠标悬停或获得焦点时，照片将显示为全彩的样式</p>\n<h4 id=\"基于滤镜的方案\"><a href=\"#基于滤镜的方案\" class=\"headerlink\" title=\"基于滤镜的方案\"></a><a href=\"http://play.csssecrets.io/color-tint-filter\" target=\"_blank\" rel=\"noopener\">基于滤镜的方案</a></h4><p>filter 属性提供了多种关于色调调整的方法，下面的代码可以实现染色效果的过渡动画：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">5s</span> filter;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">sepia</span>(1) <span class=\"built_in\">saturate</span>(4) <span class=\"built_in\">hue-rotate</span>(295deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:hover</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: none; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于混合模式的方案\"><a href=\"#基于混合模式的方案\" class=\"headerlink\" title=\"基于混合模式的方案\"></a><a href=\"http://play.csssecrets.io/color-tint\" target=\"_blank\" rel=\"noopener\">基于混合模式的方案</a></h4><p>使用 background-blend-mode 属性可以让每层背景跟它的下层背景进行混合：</p>\n<p>HTML 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tinted-image\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">style</span>=<span class=\"string\">\"background-image:url(tiger.jpg)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tinted-image</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">640px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">440px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover; </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">hsl</span>(335, 100%, 50%); </span><br><span class=\"line\">    <span class=\"attribute\">background-blend-mode</span>: luminosity; </span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">5s</span> background-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tinted-image</span><span class=\"selector-pseudo\">:hover</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"毛玻璃效果\"><a href=\"#毛玻璃效果\" class=\"headerlink\" title=\"毛玻璃效果\"></a><a href=\"http://play.csssecrets.io/frosted-glass\" target=\"_blank\" rel=\"noopener\">毛玻璃效果</a></h3><p>我们想要达到下面这种效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_261.png\" alt=\"\" width=\"\"></div>\n\n<p>我们的实现方案是利用伪元素实现模糊背景，但由于模糊效果在接近边缘处会逐渐消退，所以我们需要让伪元素相对其宿主元素的尺寸再向外扩大至少模糊半径的距离，然后再对宿主元素应用 overflow:hidden 来将多余的模糊区域裁切掉，最终代码如下所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">main</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"tiger.jpg\"</span>) <span class=\"number\">0</span> / cover fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">hsla</span>(0,0%,100%,.3); </span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(20px);</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: -<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"折角效果\"><a href=\"#折角效果\" class=\"headerlink\" title=\"折角效果\"></a>折角效果</h3><h4 id=\"45°折角的解决方案\"><a href=\"#45°折角的解决方案\" class=\"headerlink\" title=\"45°折角的解决方案\"></a><a href=\"http://play.csssecrets.io/folded-corner\" target=\"_blank\" rel=\"noopener\">45°折角的解决方案</a></h4><p>我们先根据“切角效果”一节中的渐变方案实现一个右上角的斜面切角，然后增加另一层渐变来生成一个三角形并将其定位在右上角，从而实现翻折效果，需要注意的是<strong>这个渐变的两个色标需要在正中央重合</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#58a</span>; <span class=\"comment\">/* 回退样式 */</span> </span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">to</span> <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">transparent</span> 50%, <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>) 0)</span><br><span class=\"line\">        no-repeat 100% 0 / 2em 2em,</span><br><span class=\"line\">    <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-135deg</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">transparent</span> 1<span class=\"selector-class\">.5em</span>, <span class=\"selector-id\">#58a</span> 0);</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他角度的解决方案\"><a href=\"#其他角度的解决方案\" class=\"headerlink\" title=\"其他角度的解决方案\"></a><a href=\"http://play.csssecrets.io/folded-corner-realistic\" target=\"_blank\" rel=\"noopener\">其他角度的解决方案</a></h4><p>由于其他角度的切角需要旋转一定角度，所以我们需要借助伪元素来实现，同时还需要借助一些数学知识来计算角度和距离，具体实现过程比较复杂，大家可以看书中的解释或者直接看<a href=\"http://play.csssecrets.io/folded-corner-realistic\" target=\"_blank\" rel=\"noopener\">实现效果</a>，最终代码如下所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.note</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#58a</span>; <span class=\"comment\">/* 回退样式 */</span> </span><br><span class=\"line\"><span class=\"attribute\">background</span>:</span><br><span class=\"line\">        <span class=\"built_in\">linear-gradient</span>(-150deg,</span><br><span class=\"line\">            transparent 1.5em, #58a 0);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: .<span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.note</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to left bottom,</span><br><span class=\"line\">        transparent 50%, rgba(0,0,0,.2) <span class=\"number\">0</span>, <span class=\"built_in\">rgba</span>(0,0,0,.4))</span><br><span class=\"line\">        <span class=\"number\">100%</span> <span class=\"number\">0</span> no-repeat; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1.73em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-1.3em) <span class=\"built_in\">rotate</span>(-30deg); </span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: bottom right; </span><br><span class=\"line\">    <span class=\"attribute\">border-bottom-left-radius</span>: inherit;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: -.<span class=\"number\">2em</span> .<span class=\"number\">2em</span> .<span class=\"number\">3em</span> -.<span class=\"number\">1em</span> <span class=\"built_in\">rgba</span>(0,0,0,.15);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字体排印\"><a href=\"#字体排印\" class=\"headerlink\" title=\"字体排印\"></a>字体排印</h2><h3 id=\"连字符断行\"><a href=\"#连字符断行\" class=\"headerlink\" title=\"连字符断行\"></a>连字符断行</h3><p>text-align:justify 可以实现两端对齐，但是对于英文字体来说，很容易出现“单词孤岛”现象，这样不仅看起来很糟糕，而且损伤了可读性。在打印媒介中，两端对齐总是和连字符断行相辅相成的，这样文本看起来就自然很多。 CSS 文本（第三版）引入了一个新的属性 hyphens：</p>\n<blockquote>\n<p>hyphens: none | manual | auto</p>\n</blockquote>\n<p>manual 是它的初始值，</p>\n<p>其行为正好对应了现有的工作方式：我们可以在任何时候手工插入软连字符，来实现断词折行的效果。很显然 hyphens: none; 会禁用这种行为；而最为神奇的是，只需这短短一行 CSS 就可以产生我们梦寐以求的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">hyphens</span>: <span class=\"selector-tag\">auto</span>;</span><br></pre></td></tr></table></figure>\n<p>为了确保它奏效，你需要在 HTML 标签的 lang 属性中指定合适的语言</p>\n<p>如果需要更细粒度地控制连字符的行为（比如在简短的引文中），你仍然可以通过一些软连字符（<code>&amp;shy;</code>）来辅助浏览器进行断词。这个 hyphens 属性会优先处理它们，然后再去计算其他可以断词的地方</p>\n<h3 id=\"插入换行\"><a href=\"#插入换行\" class=\"headerlink\" title=\"插入换行\"></a><a href=\"http://play.csssecrets.io/line-breaks\" target=\"_blank\" rel=\"noopener\">插入换行</a></h3><p>HTML代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Lea Verou<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>lea@verou.me<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Location:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Earth<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们想让 dt 和后面的 dd 在同一行，每个dt所在的内容都单独占一行。 有一个 Unicode 字符是专门代表换行符的:0x000A1。在 CSS 中， 这个字符可以写作 “\\000A”，或简化为 “\\A”。我们可以用它来作为 ::after 伪元素的内容，并将其添加到每个 <code>&lt;dd&gt;</code> 元素的尾部</p>\n<p>但是由于我们是在 HTML 代码中插入了换行符，所以这些换行符会和相邻的其他空白符进行合并，此时我们希望<strong>保留源代码中的这些空白符和换行，</strong>我们会用到 white-space:pre。然而如果你的结构代码在多个连续的 <code>&lt;dd&gt;</code> 之间包含了(未加注释的)空白符，那么逗号前面会有一个空格。有很多方法可以修复这个问题，但都不够完美。其中一种方法是利用<strong>负外边距</strong>。最终 CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dt</span>,<span class=\"selector-tag\">dd</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span> + <span class=\"selector-tag\">dt</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">'\\\\A'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: pre; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">dd</span> + <span class=\"selector-tag\">dd</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">', '</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -.<span class=\"number\">25em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文本行的斑马条纹\"><a href=\"#文本行的斑马条纹\" class=\"headerlink\" title=\"文本行的斑马条纹\"></a><a href=\"http://play.csssecrets.io/zebra-lines\" target=\"_blank\" rel=\"noopener\">文本行的斑马条纹</a></h3><p>我们可以通过 :nth-child() / :nth-of-type() 伪类来实现表格的“斑马条纹”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(even)</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0,0,0,.2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，这种实现方式无法应用到文本行。我们可以<strong>在 CSS 中用渐变直接生成背景图像</strong>，而且可以用 em 单位来设定背景尺寸，这样背景就可以<strong>自动适应 font-size 的变化</strong>了。水平条纹背景的 background-size 需要设置为 line-height 的两倍，因为每个背景贴片需要覆盖两行代码。同时我们希望让背景自动跟着内边距的宽度走，所以就需要 background-origin 告诉浏览器在解析 background-position 时以 content box 的外沿作为基准：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">padding</span>: <span class=\"selector-class\">.5em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">beige</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">auto</span> 3<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-origin</span>: <span class=\"selector-tag\">content-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.2</span>) 50%,</span><br><span class=\"line\">                                  <span class=\"selector-tag\">transparent</span> 0);</span><br></pre></td></tr></table></figure>\n<p>唯一可能破坏效果的情况可能就是在改变 line-height 时忘了相应地调整 background-size</p>\n<h3 id=\"调整tab的宽度\"><a href=\"#调整tab的宽度\" class=\"headerlink\" title=\"调整tab的宽度\"></a><a href=\"http://play.csssecrets.io/tab-size\" target=\"_blank\" rel=\"noopener\">调整tab的宽度</a></h3><p>我们通常使用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 元素来显示代码，但是<strong>浏览器会把 tab 的宽度显示为8个字符</strong>！ 而在 CSS 文本（第三版）中，一个新的 CSS 属性 tab-size 可以控制这个情况。这个属性接受一个数字(表示字符数)或者一个长度值(这个不那么实用)。我们通常希望把它设置为4(表示 4 个字符的宽度)或 2，后者是最近更为流行的缩进尺寸。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">pre</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">tab-size</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连字\"><a href=\"#连字\" class=\"headerlink\" title=\"连字\"></a><a href=\"http://play.csssecrets.io/ligatures\" target=\"_blank\" rel=\"noopener\">连字</a></h3><h4 id=\"什么是连字？（右侧为左侧连字写法）\"><a href=\"#什么是连字？（右侧为左侧连字写法）\" class=\"headerlink\" title=\"什么是连字？（右侧为左侧连字写法）\"></a>什么是连字？（右侧为左侧连字写法）</h4><p>i 的圆点往往会与 f 的升部发生冲突，导致两者都显示不清；为了缓解这个问题，字体设计师通常会在字体中包含一些额外的字形，称作连字。这些字形被设计为双字形或三字形的单一组合体，专门提供给排版软件使用，代为显示特定的字符组合：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_262.png\" alt=\"\" width=\"\"></div>\n\n<h4 id=\"支持连字解决方案\"><a href=\"#支持连字解决方案\" class=\"headerlink\" title=\"支持连字解决方案\"></a>支持连字解决方案</h4><p>在 CSS 字体（第三版）中，原有的 font- variant 被升级成了一个简写属性，由很多新的展开式属性组合而成。其中之一叫作 font-variant-ligatures，专门用来控制连字效果的开启和关闭。如果要启用所有可能的连字，需要同时指定这三个标识符:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-variant-ligatures</span>: <span class=\"selector-tag\">common-ligatures</span> </span><br><span class=\"line\">                        <span class=\"selector-tag\">discretionary-ligatures</span></span><br><span class=\"line\">                        <span class=\"selector-tag\">historical-ligatures</span>;</span><br></pre></td></tr></table></figure>\n<p>font-variant-ligatures 还接受 none 这个值，它会把所有的连字效果都关掉。千万不要使用 none，除非你绝对清楚自己是在做什么。如果要把 font-variant-ligatures 属性复位为初始值，应该使用 normal 而不是 none。</p>\n<h3 id=\"华丽的-amp-符号\"><a href=\"#华丽的-amp-符号\" class=\"headerlink\" title=\"华丽的 &amp; 符号\"></a><a href=\"http://play.csssecrets.io/ampersands\" target=\"_blank\" rel=\"noopener\">华丽的 &amp; 符号</a></h3><p>我们想要用另一种字体来单独美化某个特定字符（或是某个区间内的多个字符）： 首先，@font-face 规则中的 src 描述符是可以接受 local() 函数的，用于指定本地字体的名称：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Ampersand;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">'Baskerville'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Goudy Old Style'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Garamond'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Palatino'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，整段文本会都被应用为我们指定的字体，所以需要一个描述符来声明我们想用这款字体来显示哪些字符，这个描述符叫做 unicode-range；它是基于 “Unicode 码位”的，所以需要知道你想指定的字符的十六进制码位，你可以在控制台打印下面JS代码获取：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"&amp;\"</span>.charCodeAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>); <span class=\"comment\">// 返回26</span></span><br></pre></td></tr></table></figure>\n<p>还需要在前面加上 U+ 作为前缀，所以最终声明方式为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">unicode-range</span>: <span class=\"selector-tag\">U</span>+26;</span><br></pre></td></tr></table></figure>\n<p>如果你想指定一个字符区间，还是要加上 U+ 前缀，比如 U+400-4FF。实际上对于这个区间来说，你还可以使用通配符，以这样的方式来写：U+4??。同时指定多个字符或多个区间也是允许的，把它们用逗号隔开即可，比如 U+26, U+4??, U+2665-2670</p>\n<p>最后，为了指定某些字体的斜体版本，我们需要直接指定字体中我们想要的单个风格/字重所对应的 “PostScript 名称”：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Ampersand;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(<span class=\"string\">'Baskerville-Italic'</span>),</span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'GoudyOldStyleT-Italic'</span>), </span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'Palatino-Italic'</span>), </span><br><span class=\"line\">         <span class=\"built_in\">local</span>(<span class=\"string\">'BookAntiqua-Italic'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">unicode-range</span>: U+<span class=\"number\">26</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Ampersand, Helvetica, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义下划线\"><a href=\"#自定义下划线\" class=\"headerlink\" title=\"自定义下划线\"></a>自定义下划线</h3><p>text-decoration:underline 实现的文本下划线不能够定制，同时<strong>在不同浏览器下的渲染效果大相径庭</strong>。所以为了得到更加定制化的下划线，我们可以通过 background-image 及其相关属性来实现（CSS 渐变）</p>\n<h4 id=\"实线下划线\"><a href=\"#实线下划线\" class=\"headerlink\" title=\"实线下划线\"></a>实线下划线</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">gray</span>, <span class=\"selector-tag\">gray</span>) <span class=\"selector-tag\">no-repeat</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 1<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 1<span class=\"selector-class\">.15em</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"防止下划线穿过文本的降部\"><a href=\"#防止下划线穿过文本的降部\" class=\"headerlink\" title=\"防止下划线穿过文本的降部\"></a>防止下划线穿过文本的降部</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">gray</span>, <span class=\"selector-tag\">gray</span>) <span class=\"selector-tag\">no-repeat</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 1<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 1<span class=\"selector-class\">.15em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: <span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">-</span><span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"虚线下划线\"><a href=\"#虚线下划线\" class=\"headerlink\" title=\"虚线下划线\"></a><a href=\"http://play.csssecrets.io/underlines\" target=\"_blank\" rel=\"noopener\">虚线下划线</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(90<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">gray</span> 66%, <span class=\"selector-tag\">transparent</span> 0) <span class=\"selector-tag\">repeat-x</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-class\">.2em</span> 2<span class=\"selector-tag\">px</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-position</span>: 0 1<span class=\"selector-tag\">em</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"波浪型的下划线（两层渐变）\"><a href=\"#波浪型的下划线（两层渐变）\" class=\"headerlink\" title=\"波浪型的下划线（两层渐变）\"></a><a href=\"http://play.csssecrets.io/wavy-underlines\" target=\"_blank\" rel=\"noopener\">波浪型的下划线（两层渐变）</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">-45deg</span>, <span class=\"selector-tag\">transparent</span> 40%, <span class=\"selector-tag\">red</span> 0, <span class=\"selector-tag\">red</span> 60%, <span class=\"selector-tag\">transparent</span> 0) 0 1<span class=\"selector-tag\">em</span>,</span><br><span class=\"line\">\t    <span class=\"selector-tag\">linear-gradient</span>(45<span class=\"selector-tag\">deg</span>, <span class=\"selector-tag\">transparent</span> 40%, <span class=\"selector-tag\">red</span> 0, <span class=\"selector-tag\">red</span> 60%, <span class=\"selector-tag\">transparent</span> 0) <span class=\"selector-class\">.1em</span> 1<span class=\"selector-tag\">em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">repeat-x</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-class\">.2em</span> <span class=\"selector-class\">.1em</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: <span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>, <span class=\"selector-tag\">-</span><span class=\"selector-class\">.05em</span> 0 <span class=\"selector-tag\">white</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"现实中的文字效果\"><a href=\"#现实中的文字效果\" class=\"headerlink\" title=\"现实中的文字效果\"></a>现实中的文字效果</h3><h4 id=\"凸版印刷效果\"><a href=\"#凸版印刷效果\" class=\"headerlink\" title=\"凸版印刷效果\"></a><a href=\"http://play.csssecrets.io/letterpress\" target=\"_blank\" rel=\"noopener\">凸版印刷效果</a></h4><p>我们通过 text-shadow 使人产生物体从平面上凸起的错觉 <strong>当我们在浅色背景上使用深色文字时，在底部加上浅色投影通常效果最佳</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 60%);</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 30%);</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">hsla</span>(0,0%,100%,<span class=\"selector-class\">.8</span>);</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_263.png\" alt=\"\" width=\"\"></div>\n\n<p><strong>当我们在深色背景上使用浅色文字时，在底部加上深色投影通常效果最佳</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 40%); </span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">hsl</span>(210, 13%, 75%); </span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 <span class=\"selector-tag\">-1px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_264.png\" alt=\"\" width=\"\"></div>\n\n<h4 id=\"空心字效果\"><a href=\"#空心字效果\" class=\"headerlink\" title=\"空心字效果\"></a><a href=\"http://play.csssecrets.io/stroked-text\" target=\"_blank\" rel=\"noopener\">空心字效果</a></h4><p>我们一般使用多个 text-shadow 来模拟文字描边：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">deeppink</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">white</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, <span class=\"selector-tag\">-1px</span> <span class=\"selector-tag\">-1px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">-1px</span> <span class=\"selector-tag\">black</span>, <span class=\"selector-tag\">-1px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<p>但是，目前比较理想的方案是使用 SVG，HTML 代码可能是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"2em\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"1.2em\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#css\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">id</span>=<span class=\"string\">\"css\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"1em\"</span>&gt;</span>CSS<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">500%</span>/<span class=\"number\">1</span> Rockwell, serif; </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: deeppink;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">svg</span> &#123; <span class=\"attribute\">overflow</span>: visible &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> <span class=\"selector-tag\">use</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">stroke</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-width</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">stroke-linejoin</span>: round;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文字外发光效果\"><a href=\"#文字外发光效果\" class=\"headerlink\" title=\"文字外发光效果\"></a><a href=\"http://play.csssecrets.io/glow\" target=\"_blank\" rel=\"noopener\">文字外发光效果</a></h4><p>文字外发光效果常用于凸显标题，或给链接添加鼠标悬停效果。它是最容易生成的文字美化效果之一。这种方法有一个最简单的版本:你只需要准备几层重叠的 text-shadow 即可，不需要考虑偏移量，颜色也只需跟文字保持一致：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#203</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#ffc</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 0 0 <span class=\"selector-class\">.1em</span>, 0 0 <span class=\"selector-class\">.3em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">或者使用<span class=\"selector-tag\">CSS</span>滤镜：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#203</span>; </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white; </span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(.1em); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文字凸起效果\"><a href=\"#文字凸起效果\" class=\"headerlink\" title=\"文字凸起效果\"></a><a href=\"http://play.csssecrets.io/extruded\" target=\"_blank\" rel=\"noopener\">文字凸起效果</a></h4><p>思路就是使用一长串累加的投影，不设模糊并以 1px 的跨度逐渐错开，使颜色逐渐变暗，然后在底部加一层强烈模糊的暗投影，从而模拟完整的立体效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: #58a;</span><br><span class=\"line\">color: white;</span><br><span class=\"line\">text-shadow: 0 1px hsl(0,0%,85%),</span><br><span class=\"line\">             0 2px hsl(0,0%,80%), </span><br><span class=\"line\">             0 3px hsl(0,0%,75%), </span><br><span class=\"line\">             0 4px hsl(0,0%,70%), </span><br><span class=\"line\">             0 5px hsl(0,0%,65%), </span><br><span class=\"line\">             0 5px 10px black;</span><br></pre></td></tr></table></figure>\n<h4 id=\"模拟复古标志牌：\"><a href=\"#模拟复古标志牌：\" class=\"headerlink\" title=\"模拟复古标志牌：\"></a>模拟复古标志牌：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">white</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">hsl</span>(0,50%,45%);</span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 2<span class=\"selector-tag\">px</span> 2<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             3<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             5<span class=\"selector-tag\">px</span> 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 6<span class=\"selector-tag\">px</span> 6<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>,</span><br><span class=\"line\">             7<span class=\"selector-tag\">px</span> 7<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>, 8<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">black</span>;</span><br></pre></td></tr></table></figure>\n<div align=\"center\"><img src=\"/images/hexo_post_265.png\" alt=\"\" width=\"\"></div>\n\n<h3 id=\"环形文字\"><a href=\"#环形文字\" class=\"headerlink\" title=\"环形文字\"></a><a href=\"http://play.csssecrets.io/circular-text\" target=\"_blank\" rel=\"noopener\">环形文字</a></h3><p>目前我们没有很好的纯 CSS 方案实现环形问题，只能借助内联 SVG 来实现这种效果；</p>\n<p>在 SVG 中，让文本按照路径排列的基本方法就是用一个 <code>&lt;textPath&gt;</code> 元素来包裹住这段文本，再把它们装进一个 <code>&lt;text&gt;</code> 元素中。这个 <code>&lt;textPath&gt;</code> 元素还需要在它的 ID 属性中引用一个 <code>&lt;path&gt;</code> 元素，然后就可以用这个 <code>&lt;path&gt;</code> 元素来定义我们想要的路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"circular\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 100 100\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M 0,50 a 50,50 0 1,1 0,1 z\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"circle\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个效果的实现比较复杂，所以直接点击上面标题链接查看吧。。</p>\n<h2 id=\"用户体验\"><a href=\"#用户体验\" class=\"headerlink\" title=\"用户体验\"></a>用户体验</h2><h3 id=\"选用合适的鼠标光标\"><a href=\"#选用合适的鼠标光标\" class=\"headerlink\" title=\"选用合适的鼠标光标\"></a>选用合适的鼠标光标</h3><p>在<a href=\"http://w3.org/TR/css3-ui/#cursor\" target=\"_blank\" rel=\"noopener\">CSS 基本UI 特性（第三版）</a>中，我们获得了一大批新的内建光标：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_266.png\" alt=\"\" width=\"\"></div>\n\n<h3 id=\"扩大可点击区域\"><a href=\"#扩大可点击区域\" class=\"headerlink\" title=\"扩大可点击区域\"></a><a href=\"http://play.csssecrets.io/hit-area\" target=\"_blank\" rel=\"noopener\">扩大可点击区域</a></h3><p><a href=\"http://simonwallner.at/ext/fitts/\" target=\"_blank\" rel=\"noopener\">Fitts法则</a>：人类移动到某个目标区域所需的最短时间是由目标距离与目标宽度之比所构成的对数函数；所以将可点击区域（热区）向外扩张往往可以带来可用性的提升，我们还需要了解：<strong>伪元素同样可以代表其宿主元素来响应鼠标交互</strong></p>\n<p>所以，我们可以在按钮的上层覆盖一层透明的伪元素，并让伪元素在四个方向上都比宿主元素大出 10px：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    /\\* \\[其余样式\\] */ </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">10px</span>; <span class=\"attribute\">right</span>: -<span class=\"number\">10px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: -<span class=\"number\">10px</span>; <span class=\"attribute\">left</span>: -<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个基于伪元素的解决方案极为灵活，我们基本上可以把热区设置为任何想要的尺寸、位置或形状，甚至可以脱离元素原有的位置!</p>\n<h3 id=\"自定义复选框\"><a href=\"#自定义复选框\" class=\"headerlink\" title=\"自定义复选框\"></a>自定义复选框</h3><p>知识点：伪类选择符 :checked 和属性选择符 [checked] 之间的区别是<strong>后者是不会根据用户的交互行为进行更新的，因为用户的交互并不会影响到 HTML 标签上的属性</strong>。 下面是作者实现的效果：</p>\n<ul>\n<li><a href=\"http://play.csssecrets.io/checkboxes\" target=\"_blank\" rel=\"noopener\">自定义复选框</a></li>\n<li><a href=\"http://play.csssecrets.io/toggle-buttons\" target=\"_blank\" rel=\"noopener\">开关式按钮</a></li>\n</ul>\n<h3 id=\"通过阴影来弱化背景\"><a href=\"#通过阴影来弱化背景\" class=\"headerlink\" title=\"通过阴影来弱化背景\"></a>通过阴影来弱化背景</h3><p>很多时候，我们需要通过一层半透明的遮罩层来把后面的一切整体调暗，以便凸显某个特定的 UI 元素，引导用户关注</p>\n<h4 id=\"伪元素方案\"><a href=\"#伪元素方案\" class=\"headerlink\" title=\"伪元素方案\"></a>伪元素方案</h4><p>我们可以通过伪元素来添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.dimmed</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed; </span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0,0,0,.8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>伪元素方案的缺点：<strong>伪元素无法绑定独立的JavaScript事件处理函数；</strong>同时 ::before 伪元素有可能已经被占用；还需要一点 JavaScript 来给 <code>&lt;body&gt;</code> 添加 dimmed 这个类</p>\n<h4 id=\"box-shadow方案\"><a href=\"#box-shadow方案\" class=\"headerlink\" title=\"box-shadow方案\"></a><a href=\"http://play.csssecrets.io/dimming-box-shadow\" target=\"_blank\" rel=\"noopener\">box-shadow方案</a></h4><p>box-shadow 的扩张参数可以把元素的投影向各个方向延伸放大。具体做法就是生成一个巨大的投影，不偏移也不模糊，简单而拙劣地模拟出遮罩层的效果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: 0 0 0 50<span class=\"selector-tag\">vmax</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.8</span>);</span><br></pre></td></tr></table></figure>\n<p>但是它也存在两个非常严重的问题：当我们滚动页面时，遮罩层的边缘就露出来了；<strong>它只能在视觉上起到引导注意力的作用，却无法阻止鼠标交互</strong></p>\n<h4 id=\"backdrop-方案\"><a href=\"#backdrop-方案\" class=\"headerlink\" title=\"backdrop 方案\"></a><a href=\"http://play.csssecrets.io/native-modal\" target=\"_blank\" rel=\"noopener\">backdrop 方案</a></h4><p>\b如果你想引导用户关注元素就是一个模态的 <code>&lt;dialog&gt;</code> 元素，那么根据浏览器的默认样式，它会自带一个遮罩层。借助 ::backdrop 伪元素，这个原生的遮罩层也是可以设置样式的，比如可以把它变得更暗一些：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dialog</span><span class=\"selector-pseudo\">::backdrop</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, .8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一需要注意的地方在于，<strong>浏览器对它的支持还极为有限</strong></p>\n<h2 id=\"通过模糊来弱化背景\"><a href=\"#通过模糊来弱化背景\" class=\"headerlink\" title=\"通过模糊来弱化背景\"></a><a href=\"http://play.csssecrets.io/deemphasizing-blur\" target=\"_blank\" rel=\"noopener\">通过模糊来弱化背景</a></h2><p>我们需要一个额外的 HTML 元素来实现这个效果：需要把页面上除了关键元素之外的一切都包裹起来，这样就可以只对这个容器元素进行模糊处理了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span>Bacon Ipsum dolor sit amet...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dialog</span>&gt;</span></span><br><span class=\"line\">    O HAI, I'm a dialog. Click on me to dismiss.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dialog</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> 其他对话框都写在这里 <span class=\"attr\">--</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来，每当弹出一个对话框，都需要给 <code>&lt;main&gt;</code> 元素增加一个类，以便对它应用模糊滤镜：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span><span class=\"selector-class\">.de-emphasized</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(5px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"滚动提示\"><a href=\"#滚动提示\" class=\"headerlink\" title=\"滚动提示\"></a><a href=\"http://play.csssecrets.io/scrolling-hints\" target=\"_blank\" rel=\"noopener\">滚动提示</a></h3><p>我们需要实现的效果类似 Google Reader 中的一种用户体验模式：当侧边栏的容器还有更多内容时，一层淡淡的阴影会出现在容器的顶部和 / 或底部，用来提示侧边栏需要滚动才能看到完整的内容</p>\n<div align=\"center\"><img src=\"/images/hexo_post_267.png\" alt=\"\" width=\"\"></div>\n\n<p>我们可以用纯 CSS 实现这种效果，利用的就是 background-attachment 属性的一个关键字：local，但是<strong>我们需要两层背景</strong>：一层用来生成那条阴影，另一层基本上就是一个用来遮挡阴影的白色矩形，其作用类似于遮罩层。生成阴影的那层背景将具有默认的 background-attachment 值(scroll)，因为我们希望它总是保持在原位。我们把遮罩背景的 background-attachment 属性设置为 local，这样它就会在我们滚动到最顶部时盖住阴影，在向下滚动时跟着滚动，从而露出阴影。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">white</span> 30%, <span class=\"selector-tag\">transparent</span>), </span><br><span class=\"line\">            <span class=\"selector-tag\">radial-gradient</span>(<span class=\"selector-tag\">at</span> 50% 0, <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.2</span>),<span class=\"selector-tag\">transparent</span> 70%); </span><br><span class=\"line\"><span class=\"selector-tag\">background-repeat</span>: <span class=\"selector-tag\">no-repeat</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: 100% 50<span class=\"selector-tag\">px</span>, 100% 15<span class=\"selector-tag\">px</span>; </span><br><span class=\"line\"><span class=\"selector-tag\">background-attachment</span>: <span class=\"selector-tag\">local</span>, <span class=\"selector-tag\">scroll</span>;</span><br></pre></td></tr></table></figure>\n<p>但是为了完整地实现这个效果，我们<strong>还需要再用两层渐变来实现底部的阴影和它配套的遮罩</strong>，具体实现可以点击上面的链接查看</p>\n<h3 id=\"交互式的图片对比控件\"><a href=\"#交互式的图片对比控件\" class=\"headerlink\" title=\"交互式的图片对比控件\"></a>交互式的图片对比控件</h3><p>有时，我们需要展示两张图片的外观差异，通常是“之前和之后”形式的对比</p>\n<h4 id=\"CSS-resize方案\"><a href=\"#CSS-resize方案\" class=\"headerlink\" title=\"CSS resize方案\"></a><a href=\"http://play.csssecrets.io/image-slider\" target=\"_blank\" rel=\"noopener\">CSS resize方案</a></h4><p>resize 属性可以让某个元素的大小变得可调整，我们的第一个念头可能是列出两个 <code>&lt;img&gt;</code> 元素。但是，直接对一个 <code>&lt;img&gt;</code> 元素应用 resize 看起来会很怪异，因为直接调整图片大小会导致其变形失真。如果用一个 <code>&lt;div&gt;</code> 作为它的容器，再对这个容器应用 resize 属性，那就合理多了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"image-slider\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"adamcatlace-before.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Before\"</span> /&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"adamcatlace-after.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"After\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>resize 起作用的前提条件是它的 overflow 属性不是 visible；</strong>同时我们可以通过伪元素改变调节手柄的样式；最后，我们可以对这两张图片应用 user-select: none，这样即使用户在没有点中调节手柄的情况下拖动鼠标，也不会误选图片：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.image-slider</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image-slider</span> &gt; <span class=\"selector-tag\">div</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">resize</span>: horizontal; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image-slider</span> &gt; <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(-45deg, white 50%, transparent 0); </span><br><span class=\"line\">    <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: ew-resize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image-slider</span> <span class=\"selector-tag\">img</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"范围输入控件方案\"><a href=\"#范围输入控件方案\" class=\"headerlink\" title=\"范围输入控件方案\"></a>范围输入控件方案</h4><p>上面的 CSS resize 方案有一些不足之处：</p>\n<ul>\n<li>对键盘来说不可访问</li>\n<li>调整上层图片的唯一方法就是拖动</li>\n<li>用户只能在右下角进行调整大小的操作</li>\n</ul>\n<p>我们可以将原生的滑块控件（HTML 范围输入控件）覆盖在图片上，用它来控制上层图片的伸缩，这样就可以解决上述三个问题，同时为了让范围输入控件在视觉上与整个控件更加统一，可以用混合模式和滤镜来实现，最终实现效果：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_268.png\" alt=\"\" width=\"\"></div>\n\n<h2 id=\"结构与布局\"><a href=\"#结构与布局\" class=\"headerlink\" title=\"结构与布局\"></a>结构与布局</h2><h3 id=\"自适应内部元素\"><a href=\"#自适应内部元素\" class=\"headerlink\" title=\"自适应内部元素\"></a><a href=\"http://play.csssecrets.io/intrinsic-sizing\" target=\"_blank\" rel=\"noopener\">自适应内部元素</a></h3><p>众所周知，如果不给元素指定一个具体的 height，它就会自动适应其内容的高度。假如我们希望 width 也具有类似的行为，该怎么做呢?</p>\n<p>CSS 内部与外部尺寸模型（第三版）为 width 和 height 属性定义了一些新的关键字，其中最有用的应该就是 min-content 了。这个关键字将解析为这个容器内部最大的不可断行元素的宽度(即最宽的单词、图片或具有固定宽度的盒元素)。这正是我们梦寐以求的！为了给那些旧版浏览器提供一个平稳的回退样式，我们需要在使用这个技巧的同时，提供一个固定的 max-width 值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">figure</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">300px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: min-content; </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">figure</span> &gt; <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">max-width</span>: inherit; &#125;</span><br></pre></td></tr></table></figure>\n<p>关于 width 和 height 的新关键字，还有 max-content，它的行为类似于我们在前面看到的 display: inline-block；而 fit-content 的行为与浮动元素是相同的(和 min-content 的效果通常一致，但也有例外)。</p>\n<h3 id=\"精确控制表格列宽\"><a href=\"#精确控制表格列宽\" class=\"headerlink\" title=\"精确控制表格列宽\"></a><a href=\"http://play.csssecrets.io/table-column-widths\" target=\"_blank\" rel=\"noopener\">精确控制表格列宽</a></h3><p>对于不固定的内容来说，表格的布局是很难预测的，这是因为<strong>列宽根据其内容进行调整</strong>，即使我们显式地指定了 width。解决方案来自于 CSS 2.1 中一个鲜为人知的属性，叫做 table-layout，它的默认值是 auto，其行为模式被称作自动表格布局算法，也就是我们最为熟悉的表格布局行为。不过，它还接受另外一个值 <strong>fixed</strong>，这个值的行为要明显可控一些，使用也很简单：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">table-layout</span>: fixed; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据兄弟元素的数量来设置样式\"><a href=\"#根据兄弟元素的数量来设置样式\" class=\"headerlink\" title=\"根据兄弟元素的数量来设置样式\"></a><a href=\"http://play.csssecrets.io/styling-sibling-count\" target=\"_blank\" rel=\"noopener\">根据兄弟元素的数量来设置样式</a></h3><p>在某些场景下，我们需要根据兄弟元素的总数来为它们设置样式。</p>\n<p>对于只有一个列表项的特殊场景来说，解决方案显然就是 :only-child：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:only-child</span> &#123;</span><br><span class=\"line\">    /\\* 只有一个列表项时的样式 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上，:only-child 等效于 :first-child:last-child，道理就是：如果第一项也是最后一项，那它就是唯一的那一项；而 :first-child:nth-last-child(4) 会匹配到一个正好有四个列表项的列表中的第一个列表项，所以下面的选择符就相当于<strong>在这个列表正好包含四个列表项时，命中它的每一项</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(4)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(4)</span> ~ <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    /\\* 当列表正好包含四项时，命中所有列表项 */ </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用选择符的表达式，我们可以<strong>在列表项的总数是4或更多时选中所有列表项</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+4)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+4)</span> ~ <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    /\\* 当列表至少包含四项时，命中所有列表项 */ </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同理，-n+b 这种形式的表达式可以选中开头的 b 个元素。因此，我们可以<strong>在列表项的总数是 4 个或更少时选中所有列表项</strong>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(-n+4)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(-n+4)</span> ~ <span class=\"selector-tag\">li</span> &#123; </span><br><span class=\"line\">    /\\* 当列表最多包含四项时，命中所有列表项 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，我们还可以把这两种技巧组合起来使用，不过代码也会变得更加复杂。假设我们希望<strong>在列表包含 2 ~ 6 个列表项时命中所有的列表项</strong>，可以这样写:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+2)</span><span class=\"selector-pseudo\">:nth-last-child(-n+6)</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span><span class=\"selector-pseudo\">:nth-last-child(n+2)</span><span class=\"selector-pseudo\">:nth-last-child(-n+6)</span> ~ <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    /\\* 当列表包含2~6项时，命中所有列表项 */ </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"满幅的背景，定宽的内容\"><a href=\"#满幅的背景，定宽的内容\" class=\"headerlink\" title=\"满幅的背景，定宽的内容\"></a><a href=\"http://play.csssecrets.io/fluid-fixed\" target=\"_blank\" rel=\"noopener\">满幅的背景，定宽的内容</a></h3><p>背景宽度满幅，内容宽度固定的设计手法在网页的页脚中经常看到：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_269.png\" alt=\"\" width=\"\"></div>\n\n<p>绝大多数的网页设计师/工程师都是用两层元素来实现的，那么能不能用一层元素实现呢？其实我们可以用 calc() 来实现内容的居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">1em</span>;  <span class=\"comment\">/* 回退样式 */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span> <span class=\"built_in\">calc</span>(50% - 450px); </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><blockquote>\n<p>44 年前我们就把人类送上月球了，但现在我们仍然无法在 CSS 中实现垂直居中 —— James Anderson</p>\n</blockquote>\n<h4 id=\"几种十分流行的技巧：\"><a href=\"#几种十分流行的技巧：\" class=\"headerlink\" title=\"几种十分流行的技巧：\"></a>几种十分流行的技巧：</h4><ul>\n<li>表格布局法</li>\n<li>行内块法</li>\n</ul>\n<p>Chris Coyier 写的<a href=\"http://css-tricks.com/centering-in-the-unknown\" target=\"_blank\" rel=\"noopener\">“不为人知的居中方法”</a>详细讲述了这两种技巧</p>\n<h4 id=\"基于绝对定位的解决方案\"><a href=\"#基于绝对定位的解决方案\" class=\"headerlink\" title=\"基于绝对定位的解决方案\"></a><a href=\"http://play.csssecrets.io/vertical-centering-abs\" target=\"_blank\" rel=\"noopener\">基于绝对定位的解决方案</a></h4><p>早期的垂直居中方法，它要求元素具有固定的宽度和高度：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">3em</span>; <span class=\"comment\">/* 6/2 = 3 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">9em</span>; <span class=\"comment\">/* 18/2 = 9 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">6em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CSS 领域有一个很常见的现象，真正的解决方案往往来自于我们最意想不到的地方。当我们在 translate() 变形函数中使用百分比值时，是以这个元素自身的宽度和高度为基准进行换算和移动的，所以就解除了对固定尺寸的依赖：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个方法有一些需要注意的地方：</p>\n<ul>\n<li>有时不能选用绝对定位</li>\n<li>如果需要居中的元素已经在高度上超过了视口，那它的顶部会被视口裁切掉</li>\n<li>在某些浏览器中，这个方法可能会导致元素的显示有一些模糊</li>\n</ul>\n<h4 id=\"基于视口单位的解决方案\"><a href=\"#基于视口单位的解决方案\" class=\"headerlink\" title=\"基于视口单位的解决方案\"></a><a href=\"http://play.csssecrets.io/vertical-centering-vh\" target=\"_blank\" rel=\"noopener\">基于视口单位的解决方案</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span> <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50vh</span> auto <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于-Flexbox-的解决方案\"><a href=\"#基于-Flexbox-的解决方案\" class=\"headerlink\" title=\"基于 Flexbox 的解决方案\"></a><a href=\"http://play.csssecrets.io/vertical-centering\" target=\"_blank\" rel=\"noopener\">基于 Flexbox 的解决方案</a></h4><p>这是毋庸置疑的最佳解决方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们使用 Flexbox 时，margin:auto 不仅在水平方向上将元素居中，垂直方向上也是如此</p>\n<h3 id=\"紧贴底部的页脚\"><a href=\"#紧贴底部的页脚\" class=\"headerlink\" title=\"紧贴底部的页脚\"></a>紧贴底部的页脚</h3><p>这是一个相当常见的问题：我们希望内容很长时，页脚在内容的尾部；而如果内容很短，页脚会在视口的底部。</p>\n<h4 id=\"一些解决方案（仍然有局限之处）：\"><a href=\"#一些解决方案（仍然有局限之处）：\" class=\"headerlink\" title=\"一些解决方案（仍然有局限之处）：\"></a>一些解决方案（仍然有局限之处）：</h4><ul>\n<li><a href=\"https://css-tricks.com/snippets/css/sticky-footer/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/snippets/css/sticky-footer/</a></li>\n<li><a href=\"https://pixelsvsbytes.com/2011/09/sticky-css-footers-the-flexible-way/\" target=\"_blank\" rel=\"noopener\">https://pixelsvsbytes.com/2011/09/sticky-css-footers-the-flexible-way/</a></li>\n</ul>\n<h4 id=\"固定高度的解决方案\"><a href=\"#固定高度的解决方案\" class=\"headerlink\" title=\"固定高度的解决方案\"></a><a href=\"http://play.csssecrets.io/sticky-footer-fixed\" target=\"_blank\" rel=\"noopener\">固定高度的解决方案</a></h4><p>我们可以通过计算给内容指定最小高度，然后就可以将页脚“固定”到底部：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"built_in\">calc</span>(100vh - 7em); <span class=\"comment\">/* 7em为页脚高度 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Flexbox-的解决方案\"><a href=\"#Flexbox-的解决方案\" class=\"headerlink\" title=\"Flexbox 的解决方案\"></a><a href=\"http://play.csssecrets.io/sticky-footer\" target=\"_blank\" rel=\"noopener\">Flexbox 的解决方案</a></h4><p>我们需要对 <code>&lt;body&gt;</code> 元素设置 display:flex，然后将其 min-height 属性指定为 100vh，这样它就至少会占据整个视口的高度；此时我们所期望的是，页头和页脚的高度由其内部元素来决定，而内容区块的高度应该可以自动伸展并占满所有的可用空间。我们只要给 <code>&lt;main&gt;</code> 这个容器的 flex 属性指定一个大于 0 的值(比如 1 即可)，就可以实现这个效果了:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-flow</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"过渡与动画\"><a href=\"#过渡与动画\" class=\"headerlink\" title=\"过渡与动画\"></a>过渡与动画</h2><h3 id=\"缓动效果\"><a href=\"#缓动效果\" class=\"headerlink\" title=\"缓动效果\"></a>缓动效果</h3><p>在现实世界中，物体从 A 点到 B 点的移动往往不是完全匀速的</p>\n<h4 id=\"弹跳动画\"><a href=\"#弹跳动画\" class=\"headerlink\" title=\"弹跳动画\"></a><a href=\"http://play.csssecrets.io/bounce\" target=\"_blank\" rel=\"noopener\">弹跳动画</a></h4><p>CSS 提供了一个 cubic-bezier() 函数，允许我们指定自定义的调速函数，借助该函数，我们可以近乎完美的实现回弹动画：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> bounce &#123; </span><br><span class=\"line\">    60%, 80%, <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(400px);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>: ease; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    70% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(300px); &#125;</span><br><span class=\"line\">    90% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(360px); &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ball</span> &#123;</span><br><span class=\"line\">    /\\* 外观样式 */</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">bounce</span> 3<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">cubic-bezier</span>(<span class=\"selector-class\">.1</span>,<span class=\"selector-class\">.25</span>,1,<span class=\"selector-class\">.25</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"弹性过渡\"><a href=\"#弹性过渡\" class=\"headerlink\" title=\"弹性过渡\"></a><a href=\"http://play.csssecrets.io/elastic\" target=\"_blank\" rel=\"noopener\">弹性过渡</a></h4><p>同样是 cubic-bezier() 函数的使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0); </span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">25s</span> transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.callout</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: .<span class=\"number\">5s</span> <span class=\"built_in\">cubic-bezier</span>(.25,.1,.3,1.5) transform;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逐帧动画\"><a href=\"#逐帧动画\" class=\"headerlink\" title=\"逐帧动画\"></a><a href=\"http://play.csssecrets.io/frame-by-frame\" target=\"_blank\" rel=\"noopener\">逐帧动画</a></h4><p>在很多时候，我们需要一个很难（或不可能）只通过某些 CSS 属性的过渡来实现的动画。但由于 GIF 不具备透明的特性，所以下面的加载提示只能用CSS动画实现：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_270.png\" alt=\"\" width=\"\"></div>\n\n<p>而如何实现这种逐帧动画效果呢？秘诀就是 steps() 这个调速函数，steps() 函数会使整个动画在帧与帧之间硬切，所以只需把动画的代码修改为下面的形式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">loader</span> 1<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">infinite</span> <span class=\"selector-tag\">steps</span>(8);</span><br></pre></td></tr></table></figure>\n<h3 id=\"闪烁效果\"><a href=\"#闪烁效果\" class=\"headerlink\" title=\"闪烁效果\"></a><a href=\"http://play.csssecrets.io/blink\" target=\"_blank\" rel=\"noopener\">闪烁效果</a></h3><p>这里涉及到的知识点是 animation-direction 中的 alternate 属性，它的作用是反转第偶数个循环周期（包括调整函数）：</p>\n<blockquote>\n<p>animation-direction: normal | alternate | reverse | alternate-reverse</p>\n</blockquote>\n<div align=\"center\"><img src=\"/images/hexo_post_271.png\" alt=\"\" width=\"\"></div>\n\n<h3 id=\"打字动画\"><a href=\"#打字动画\" class=\"headerlink\" title=\"打字动画\"></a><a href=\"http://play.csssecrets.io/typing\" target=\"_blank\" rel=\"noopener\">打字动画</a></h3><p>CSS 值与单位规范引入了一个新单位，表示“0”字形的宽度，叫做 ch ；在等宽字体中，“0” 字形的宽度和其他所有字形的宽度是一样的，所以如果我们用 ch 单位来表达一段文本的宽度，那取值实际上就是字符的数量；最后，我们可以借助上面的闪烁动画的原理来实现文字后面闪烁的光标</p>\n<h3 id=\"状态平滑的动画\"><a href=\"#状态平滑的动画\" class=\"headerlink\" title=\"状态平滑的动画\"></a><a href=\"http://play.csssecrets.io/state-animations\" target=\"_blank\" rel=\"noopener\">状态平滑的动画</a></h3><p>我们需要根据用户的交互行为来暂停动画和继续之前的动画状态，从而避免生硬的跳回现象，而 animation-play-state 正是为这种暂停动画的需求专门设计的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> panoramic &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-position</span>: <span class=\"number\">100%</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.panoramic</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"img/naxos-greece.jpg\"</span>); </span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: auto <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: panoramic <span class=\"number\">10s</span> linear infinite alternate; </span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: paused;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.panoramic</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.panoramic</span><span class=\"selector-pseudo\">:focus</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">animation-play-state</span>: running;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"沿环形路径平移的动画\"><a href=\"#沿环形路径平移的动画\" class=\"headerlink\" title=\"沿环形路径平移的动画\"></a>沿环形路径平移的动画</h3><p>我们需要让一个元素沿着环形路径动起来，同时元素中的内容（图片、文字）不能发生旋转</p>\n<h4 id=\"需要两个元素的解决方案\"><a href=\"#需要两个元素的解决方案\" class=\"headerlink\" title=\"需要两个元素的解决方案\"></a><a href=\"http://play.csssecrets.io/circular-2elements\" target=\"_blank\" rel=\"noopener\">需要两个元素的解决方案</a></h4><p>我们让元素旋转，同时让其中的内容以相反的方向进行自转，从而可以抵消元素旋转的影响，由此可见，我们可以用 animation-direction 来实现这样的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> spin &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(1turn); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: spin <span class=\"number\">3s</span> infinite linear; </span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">50%</span> <span class=\"number\">150px</span>; <span class=\"comment\">/* 150px = 路径的半径 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.avatar</span> &gt; <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: inherit; </span><br><span class=\"line\">    <span class=\"attribute\">animation-direction</span>: reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"单个元素的解决方案\"><a href=\"#单个元素的解决方案\" class=\"headerlink\" title=\"单个元素的解决方案\"></a><a href=\"http://play.csssecrets.io/circular\" target=\"_blank\" rel=\"noopener\">单个元素的解决方案</a></h4><blockquote>\n<p>“transform-origin 只是一个语法糖而已。实际上你总是可以用 translate() 来代替它。” ——Aryeh Gregor</p>\n</blockquote>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"笔记","path":"api/tags/笔记.json"}]},{"title":"CSS布局问题总结","slug":"CSS布局问题总结","date":"2017-07-04T10:17:27.000Z","updated":"2019-05-05T03:04:39.102Z","comments":true,"path":"api/articles/CSS布局问题总结.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_22.png","content":"<p>本文主要对 CSS 中常见的布局问题进行了总结，同时提供了解决方案和一些参考链接，涉及到三栏式布局（圣杯、双飞翼），居中布局等等；感兴趣的童鞋可以点击来源链接查看原文，因为本文是基于原文进行整理的，所以内容会比原文精简。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ul>\n<li><a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a>（排版和配色比较舒服，简短不深入，适合入门）</li>\n<li><a href=\"http://www.barelyfitz.com/screencast/html-training/css/positioning/\" target=\"_blank\" rel=\"noopener\">10个文档学布局</a>（通过十个例子讲解布局，主要涉及相对布局，绝对布局和浮动）</li>\n</ul>\n<h2 id=\"三栏式布局\"><a href=\"#三栏式布局\" class=\"headerlink\" title=\"三栏式布局\"></a>三栏式布局</h2><p>涉及浮动和清除浮动，主要讲解“圣杯”和“双飞翼”两种解决方法。这两种方法实现的都是三栏布局，两边的盒子宽度固定，中间盒子自适应，它们实现的效果是一样的，差别在于其实现的思想：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_22.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>圣杯：父盒子包含三个子盒子（左，中，右）</p>\n<ul>\n<li>中间盒子的宽度设置为 <code>width: 100%;</code> 独占一行；</li>\n<li>使用负边距(均是 <code>margin-left</code>)把左右两边的盒子都拉上去和中间盒子同一行；<ul>\n<li><code>.left {margin-left:-100%;}</code> 把左边的盒子拉上去</li>\n<li><code>.right {margin-left：-右边盒子宽度px;}</code> 把右边的盒子拉上去</li>\n</ul>\n</li>\n<li>父盒子设置左右的 padding 来为左右盒子留位置；</li>\n<li>对左右盒子使用相对布局来占据 padding 的空白，避免中间盒子的内容被左右盒子覆盖；</li>\n</ul>\n<h4 id=\"HTML结构\"><a href=\"#HTML结构\" class=\"headerlink\" title=\"HTML结构\"></a>HTML结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 中间的div必须写在最前面 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span>中间内容区<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>左边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>右边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*左右栏通过添加负的margin放到正确的位置了，此段代码是为了摆正中间栏的位置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">180px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;<span class=\"comment\">/*左栏上去到第一行*/</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">180px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#0c9</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:-<span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#0c9</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:-<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h3><p>双飞翼：父盒子包含三个子盒子（左，中，右），中间的子盒子里再加一个子盒子。</p>\n<ul>\n<li>中间盒子的宽度设置为 <code>width: 100%;</code> 独占一行；</li>\n<li>使用负边距(均是 <code>margin-left</code>)把左右两边的盒子都拉上去和中间盒子同一行；</li>\n<li>在中间盒子里面再添加一个 div，然后对这个 div 设置 <code>margin-left</code> 和 <code>margin-right</code>来为左右盒子留位置；</li>\n</ul>\n<h4 id=\"HTML结构-1\"><a href=\"#HTML结构-1\" class=\"headerlink\" title=\"HTML结构\"></a>HTML结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 中间的div必须写在最前面 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle-inner\"</span>&gt;</span>中间弹性区<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>左边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>右边栏<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.middle-inner</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">210px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(33, 114, 214, 0.8);</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 82, 0, 0.8);</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(90, 243, 151, 0.8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"圣杯和双飞翼异同\"><a href=\"#圣杯和双飞翼异同\" class=\"headerlink\" title=\"圣杯和双飞翼异同\"></a>圣杯和双飞翼异同</h3><p>圣杯布局和双飞翼布局解决的问题是一样的，都是两边定宽，中间自适应的三栏布局，<strong>中间栏要在放在文档流前面以优先渲染</strong>。</p>\n<ul>\n<li>两种方法基本思路都相同：三栏全部 float 浮动。首先让中间盒子 100% 宽度占满同一高度的空间，在左右两个盒子被挤出中间盒子所在区域时，使用 margin-left 的负值将左右两个盒子拉回与中间盒子同一高度的空间。接下来进行一些调整避免中间盒子的内容被左右盒子遮挡。</li>\n<li>主要区别在于 <strong>如何使中间盒子的内容不被左右盒子遮挡</strong>：<ul>\n<li>圣杯布局的方法：设置父盒子的 padding 值为左右盒子留出空位，再利用相对布局对左右盒子调整位置占据 padding 出来的空位；</li>\n<li>双飞翼布局的方法：在中间盒子里再增加一个子盒子，直接设置这个子盒子的 margin 值来让出空位，而不用再调整左右盒子。</li>\n</ul>\n</li>\n</ul>\n<p>简单说起来就是<strong>双飞翼布局比圣杯布局多创建了一个 div，但不用相对布局了，少设置几个属性</strong>。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.w3cplus.com/blog/104.html\" target=\"_blank\" rel=\"noopener\">CSS三栏布局——中间固定两边自适应宽度</a>：w3cplus 的文章，使用了双飞翼和浮动实现两侧定宽、中间自适应，也实现了两侧自适应、中间定宽</li>\n<li><a href=\"http://www.jianshu.com/p/f9bcddb0e8b4\" target=\"_blank\" rel=\"noopener\">简书 - 圣杯布局和双飞翼布局（前端面试必看）</a>：只讲了圣杯，不过特别详细</li>\n<li><a href=\"https://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"noopener\">In Search of the Holy Grail</a>：圣杯布局的来源</li>\n<li><a href=\"http://ife.baidu.com/note/detail/id/1025\" target=\"_blank\" rel=\"noopener\">百度前端学院笔记 - 三栏式布局之双飞翼与圣杯</a>：百度前端学院学员的前端学习笔记</li>\n<li><a href=\"http://www.jianshu.com/p/549aaa5fabaa\" target=\"_blank\" rel=\"noopener\">简书 - margin为负值产生的影响和常见布局应用</a>：包括对自身的影响，对文档流的影响，以及一些在布局中的应用技巧(比如去除列表右边框，负边距+定位实现水平垂直居中，去除列表最后一个 li 元素的 border-bottom，多列等高)</li>\n</ul>\n<h2 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h2><p>强烈推荐<a href=\"https://css-tricks.com/centering-css-complete-guide/\" target=\"_blank\" rel=\"noopener\">Centering in CSS: A Complete Guide</a>这篇文章，非常全面的居中定位博客，包括各种情况下的水平居中，垂直居中和水平垂直居中方案。有展示示例及相应的 HTML 和 CSS 代码，这篇文章翻译总结如下：</p>\n<ul>\n<li>水平居中<ul>\n<li>对于行内元素(inline)：<code>text-align: center;</code></li>\n<li>对于块级元素(block)：设置宽度且 <code>marigin-left</code> 和 <code>margin-right</code> 是设成 auto</li>\n<li>对于多个块级元素：对父元素设置 <code>text-align: center;</code>，对子元素设置 <code>display: inline-block;</code>；或者使用 flex 布局</li>\n</ul>\n</li>\n<li>垂直居中<ul>\n<li>对于行内元素(inline)<ul>\n<li>单行：设置上下 pandding 相等；或者设置 <code>line-height</code> 和 <code>height</code> 相等</li>\n<li>多行：设置上下 pandding 相等；或者设置 <code>display: table-cell;</code> 和 <code>vertical-align: middle;</code>；或者使用 flex 布局；或者使用伪元素</li>\n</ul>\n</li>\n<li>对于块级元素(block)：下面前两种方案，父元素需使用相对布局<ul>\n<li>已知高度：子元素使用绝对布局 <code>top: 50%;</code>，再用负的 <code>margin-top</code> 把子元素往上拉一半的高度</li>\n<li>未知高度：子元素使用绝对布局 <code>position: absolute; top: 50%; transform: translateY(-50%);</code></li>\n<li>使用 Flexbox：选择方向，<code>justify-content: center;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>水平垂直居中<ul>\n<li>定高定宽：先用绝对布局 <code>top: 50%; left: 50%;</code>，再用和宽高的一半相等的负 margin 把子元素回拉</li>\n<li>高度和宽度未知：先用绝对布局 <code>top: 50%; left: 50%;</code>，再设置 <code>transform: translate(-50%, -50%);</code></li>\n<li>使用 Flexbox：<code>justify-content: center; align-items: center;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"https://segmentfault.com/a/1190000003931851\" target=\"_blank\" rel=\"noopener\">利用HTML和CSS实现常见的布局</a></p>\n","raw":null,"categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"}]},{"title":"利用Github Pages搭建自己的个人博客","slug":"利用Github Pages搭建自己的个人博客","date":"2017-07-04T04:03:49.000Z","updated":"2019-05-05T03:04:39.110Z","comments":true,"path":"api/articles/利用Github Pages搭建自己的个人博客.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_242.png","content":"<p>这篇文章以我的亲身实验为基础，为大家讲解如何利用 Github Pages 搭建一个自己的个人博客，由于<a href=\"http://merrier.wang\">我的个人博客</a>已经拿 wordpress 搭建完成好久了，所以我就拿我 [github] (<a href=\"https://github.com/merrier/)中的另外一个项目作为试验，一步一步的截图引导大家将自己的\" target=\"_blank\" rel=\"noopener\">https://github.com/merrier/)中的另外一个项目作为试验，一步一步的截图引导大家将自己的</a> github 中的项目放到网上供其他人浏览，请注意，这都是免费的哦！不需要你购买域名和服务器，因为 github 帮你搞定了一切，最终实现的效果是下面这样的（可以看到，域名是 merrier.github.io，这是 github 为你提供的域名，\b该页面可以<a href=\"https://merrier.github.io/Magical-CSS/\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_242.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>你需要有一个 github 账号</li>\n<li>如果想看到效果的话，你需要一个有 README.md / index.html 的项目</li>\n</ul>\n<h2 id=\"好戏开场\"><a href=\"#好戏开场\" class=\"headerlink\" title=\"好戏开场\"></a>好戏开场</h2><h3 id=\"gh-pages-分支\"><a href=\"#gh-pages-分支\" class=\"headerlink\" title=\"gh-pages 分支\"></a>gh-pages 分支</h3><p>基于上面的准备工作，我认为你现在应该在自己的 github 中有了一个用来向他人展示的项目，然后进入自己的项目，切换到 gh-pages 分支，没有的话创建一个就可以了：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_243.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"Theme选择\"><a href=\"#Theme选择\" class=\"headerlink\" title=\"Theme选择\"></a>Theme选择</h3><p>然后点击上面的 Settings 按钮，向下找到 Github Pages 模块：</p>\n<div align=\"center\"><img src=\"images/hexo_post_244.png\" alt=\"\" width=\"400\"></div>\n\n<p>然后在这里你可以选择一个主题（点击 Change theme 按钮，然后你就可以跳转到选择主题的页面），这些主题都是 github 给你免费提供的，我选择的是下面这款蓝色的主题，效果就是文章开头截图那样的：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_245.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h3><p>选择完主题之后再回到刚才有 Github Pages 的页面，github 会提示你现在可以通过某个URL访问你的页面了，此时你通过 github 提示的 URL 进行访问的话，显示的就是你项目根目录的 README.md / index.html 文件中的内容，这样就完成了！是不是很 easy！：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_246.png\" alt=\"\" width=\"400\"></div>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><h3 id=\"现在已经不需要新建gh-pages分支了，任意分支都可以\"><a href=\"#现在已经不需要新建gh-pages分支了，任意分支都可以\" class=\"headerlink\" title=\"现在已经不需要新建gh-pages分支了，任意分支都可以\"></a>现在已经不需要新建gh-pages分支了，任意分支都可以</h3><ul>\n<li>在你选择完主题之后，github 会自动在你的项目根目录下创建一个 _config.yml 文件，内容大概是下面这个样子，合并代码时需要注意一下：</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">jekyll-theme-architect</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在-Github-Pages-模块，你可以设置你自己的-custom-domain\"><a href=\"#在-Github-Pages-模块，你可以设置你自己的-custom-domain\" class=\"headerlink\" title=\"在 Github Pages 模块，你可以设置你自己的 custom domain\"></a>在 Github Pages 模块，你可以设置你自己的 custom domain</h3><p>比如设置成 <a href=\"http://www.example.com，此时别人就可以通过访问\" target=\"_blank\" rel=\"noopener\">www.example.com，此时别人就可以通过访问</a> <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 访问到你刚刚用 Github Pages 搭建的个人博客了</p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html\" target=\"_blank\" rel=\"noopener\">一步步在GitHub上创建博客主页</a></p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"Github","path":"api/tags/Github.json"}]},{"title":"Git撤销操作","slug":"Git撤销操作","date":"2017-06-29T02:46:13.000Z","updated":"2019-05-05T03:04:39.102Z","comments":true,"path":"api/articles/Git撤销操作.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":null,"content":"<p>Git中提供了几个相关的撤销操作的命令，如 clean、checkout、reset和revert；在看这篇文章之前，我希望你能够浏览一下我的另一篇文章：<a href=\"/20170628/workspace-temporary-zone-and-history-zone-in-git.html\">Git工作区、暂存区和历史记录区</a>，看完之后理解这篇文章会更简单一些</p>\n<h2 id=\"git-clean\"><a href=\"#git-clean\" class=\"headerlink\" title=\"git clean\"></a>git clean</h2><p>git clean 命令用来从你的工作目录中删除所有没有 tracked 过的文件</p>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -n</span><br></pre></td></tr></table></figure>\n<p>是一次 clean 的演习， 告诉你哪些文件会被删除。 记住他不会真正的删除文件， 只是一个提醒。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f</span><br></pre></td></tr></table></figure>\n<p>删除当前目录下所有没有 track 过的文件。 他不会删除 .gitignore 文件里面指定的文件夹和文件， 不管这些文件有没有被 track 过。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<p>删除指定路径下的没有被 track 过的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n<p>删除当前目录下没有被 track 过的文件和文件夹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -xf</span><br></pre></td></tr></table></figure>\n<p>删除当前目录下所有没有 track 过的文件。 不管他是否是 .gitignore 文件里面指定的文件夹和文件。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"假如你要删除所有工作目录下面的修改，包括新添加的文件：\"><a href=\"#假如你要删除所有工作目录下面的修改，包括新添加的文件：\" class=\"headerlink\" title=\"假如你要删除所有工作目录下面的修改，包括新添加的文件：\"></a>假如你要删除所有工作目录下面的修改，包括新添加的文件：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard</span><br><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n<p>运行后，工作目录和缓存区回到最近一次 commit 时候一摸一样的状态， git status 会告诉你这是一个干净的工作目录，又是一个新的开始了。</p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>git checkout 命令用来丢弃本地修改</p>\n<h3 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- files</span><br></pre></td></tr></table></figure>\n<p>把文件从暂存区域复制到工作目录，用来丢弃本地修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n<p>会用暂存区全部的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout HEAD .</span><br></pre></td></tr></table></figure>\n<p>会用 HEAD 指向的 master 分支中的全部文件替换暂存区以及工作区中的文件。<strong>这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动</strong></p>\n<h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>有时候我们的工作区会增加一些不想要的文件（多数为隐藏文件），比如 .idea/、.DS_Store 文件，此时我们不想将这些无关紧要的文件添加到暂存区，所以就像将它们从工作区丢弃，此时就可以利用下面的命令将该文件夹丢弃：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .idea/</span><br></pre></td></tr></table></figure>\n<p>当然，这种总是会自动生成的文件最好写到 .gitignore 里，否则每次都要 checkout 会很烦的</p>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>git reset 命令撤销对于暂存区 / 历史记录区的修改，也就是撤销你本地的 add，commit 操作</p>\n<h3 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n<p>撤销所有暂存区域文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset -- files</span><br></pre></td></tr></table></figure>\n<p>用来撤销最后一次的 git add files（因为每 git add file 一次，暂存区的文件都会被更改一次）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --mixed &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>会保留源码，只是将 git commit 和 index 信息回退到了某个版本。（相当于撤销了 add 和 commit 操作，提交的修改都回到了工作区）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>保留源码，只回退 commit 信息到某个版本，不涉及index的回退，如果还需要提交，直接commit即可。（也就是只撤销了commit，并没有撤销add）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>源码也会回退到某个版本</strong>，commit 和 index 都回回退到某个版本。(注意，这种方式是改变本地代码仓库源码)，当然有人在 push 代码以后，也可以使用 <code>reset --hard &lt;commit id&gt;</code> 回退本地的代码到某个版本之前，但是这样会有一个问题，你线上的代码没有变，线上 commit，index 都没有变，当你把本地代码修改完提交的时候你会发现全是冲突。。（此时就需要用到下面要介绍的 git revert 了）</p>\n<h3 id=\"应用场景-2\"><a href=\"#应用场景-2\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"当我们在使用-pull-的时候，可能会出现冲突，就需要-merge，而在冲突状态下，需要解决冲突的文件会从-index-暂存区打回到工作区，如果我们想放弃-index-和工作区的改动，就可以执行下面这条命令：\"><a href=\"#当我们在使用-pull-的时候，可能会出现冲突，就需要-merge，而在冲突状态下，需要解决冲突的文件会从-index-暂存区打回到工作区，如果我们想放弃-index-和工作区的改动，就可以执行下面这条命令：\" class=\"headerlink\" title=\"当我们在使用 pull 的时候，可能会出现冲突，就需要 merge，而在冲突状态下，需要解决冲突的文件会从 index 暂存区打回到工作区，如果我们想放弃 index 和工作区的改动，就可以执行下面这条命令：\"></a>当我们在使用 pull 的时候，可能会出现冲突，就需要 merge，而在冲突状态下，需要解决冲突的文件会从 index 暂存区打回到工作区，如果我们想放弃 index 和工作区的改动，就可以执行下面这条命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n<p>上面这条命令用来撤销还没 commit 的 merge，就放弃了 index 暂存区和工作区的改动</p>\n<h4 id=\"当我们在本地进行了-add-和-commit-操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：\"><a href=\"#当我们在本地进行了-add-和-commit-操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：\" class=\"headerlink\" title=\"当我们在本地进行了 add 和 commit 操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：\"></a>当我们在本地进行了 add 和 commit 操作之后，发现本地的修改都是错误的，想要回到前一版本，就可以执行下面这条命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>上面这条命令用来撤销已经 commit 的内容（等价于 <code>git reset --hard HEAD~1</code>）。原理就是放弃工作区和 index 的改动，同时 HEAD 指针指向前一个 commit 对象</p>\n<h4 id=\"如果我们已经用-add-命令将某个文件加入暂存区了，此时想撤销对这个文件的-add-操作，就可以用下面的命令：\"><a href=\"#如果我们已经用-add-命令将某个文件加入暂存区了，此时想撤销对这个文件的-add-操作，就可以用下面的命令：\" class=\"headerlink\" title=\"如果我们已经用 add 命令将某个文件加入暂存区了，此时想撤销对这个文件的 add 操作，就可以用下面的命令：\"></a>如果我们已经用 add 命令将某个文件加入暂存区了，此时想撤销对这个文件的 add 操作，就可以用下面的命令：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这条命令用来撤销对单个文件的 git add，执行之后该文件会从暂存区回到工作区中</p>\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p>git revert 用于反转提交，执行 revert 命令时要求工作树必须是干净的。git revert 用一个新提交来消除一个历史提交所做的任何修改。</p>\n<p>###参数说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>revert 使用，需要先找到你想回滚版本唯一的 commit 标识代码，可以用 <code>git log</code> 进行查看，commit id 是一串 40 位的字符串，通常用前几位即可（6 位就差不多保证唯一了）；执行完之后，revert 的那一次 commit 被撤销，原理是 git revert 用一次逆向的 commit “中和”之前的提交，所以此时 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容；这样在日后合并老的 branch 时，导致这部分改变不会再次出现，就不会出现类似 git reset 带来的冲突问题</p>\n<h3 id=\"应用场景-3\"><a href=\"#应用场景-3\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"对于已经把代码-push-到线上仓库，但是此时发现-push-的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：\"><a href=\"#对于已经把代码-push-到线上仓库，但是此时发现-push-的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：\" class=\"headerlink\" title=\"对于已经把代码 push 到线上仓库，但是此时发现 push 的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：\"></a>对于已经把代码 push 到线上仓库，但是此时发现 push 的代码有问题，你想回退本地代码的同时也回退线上代码，回滚到某个指定的版本，使得线上和线下代码保持一致：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit id&gt;</span><br></pre></td></tr></table></figure>\n<p>执行完此命令之后，再执行 git push 就可以将线上代码回滚到某个指定版本，同时不会像 git reset 一样可能会导致一大堆冲突</p>\n<h2 id=\"git-的其它删除命令\"><a href=\"#git-的其它删除命令\" class=\"headerlink\" title=\"git 的其它删除命令\"></a>git 的其它删除命令</h2><p>这些命令类似于 Linux 的命令，是一种物理层面的删除，也会经常遇到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached readme.txt</span><br></pre></td></tr></table></figure>\n<p>只从缓存区中删除readme.txt，保留物理文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm readme.txt</span><br></pre></td></tr></table></figure>\n<p>不但从缓存区中删除，同时删除物理文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv a.txt b.txt</span><br></pre></td></tr></table></figure>\n<p>把a.txt改名为b.txt</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://www.cnblogs.com/pingfan1990/p/5454757.html\" target=\"_blank\" rel=\"noopener\">git clean(转载)</a></li>\n<li><a href=\"http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html\" target=\"_blank\" rel=\"noopener\">git reset revert 回退回滚取消提交返回上一版本</a></li>\n<li><a href=\"http://josh-persistence.iteye.com/blog/2215214\" target=\"_blank\" rel=\"noopener\">详解Git工作区、暂存区、历史记录区以及git reset、git revert、git checkout等撤销命令的区别</a></li>\n</ul>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]},{"title":"Git工作区、暂存区和历史记录区","slug":"Git工作区、暂存区和历史记录区","date":"2017-06-28T12:13:42.000Z","updated":"2019-05-05T03:04:39.102Z","comments":true,"path":"api/articles/Git工作区、暂存区和历史记录区.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_5.jpg","content":"<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>可以将 git 简单的分为三个区域：</p>\n<ul>\n<li>工作区（working directory）</li>\n<li>暂存区（stage index）</li>\n<li>历史记录区（history）</li>\n</ul>\n<p>如图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_5.jpg\" alt=\"\" width=\"500\"></div>\n\n<h2 id=\"简单解释\"><a href=\"#简单解释\" class=\"headerlink\" title=\"简单解释\"></a>简单解释</h2><p><strong>工作区</strong>：就是我们能看到的区域，也是我们经常修改代码的目录<br><strong>暂存区</strong>：文件在本地修改之后，需要提交到暂存区之后才能提交到版本库，作为过渡层；可以避免误操作和保护工作区和版本库<br><strong>历史记录区</strong>：可以理解为版本库，我们从暂存区提交之后的记录会保存在这里</p>\n<h2 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h2><p>当我们执行 <code>git add files</code> 时，我们把当前工作目录中的文件放入了暂存区域，这其实做了两件事：</p>\n<ol>\n<li>将本地文件的时间戳、长度，当前文档对象的id等信息保存到一个树形目录中去（index，即平时说的暂存区）</li>\n<li>将本地文件的内容做快照并保存到 Git 的对象库。</li>\n</ol>\n<p>所以，暂存区实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等），文件的内容并不存储其中，而是保存在 Git 对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。如下图所示：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_6.png\" alt=\"\" width=\"600\"></div>\n\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个“游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下</p>\n<h2 id=\"三个区域与-git-命令\"><a href=\"#三个区域与-git-命令\" class=\"headerlink\" title=\"三个区域与 git 命令\"></a>三个区域与 git 命令</h2><h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中</p>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><p>当执行 “git status” 命令扫描工作区改动的时候，先依据 .git/index 文件中记录的（工作区跟踪文件的）时间戳、长度等信息判断工作区文件是否改变。如果工作区的文件时间戳改变，说明文件的内容<strong>可能</strong>被改变了，需要打开文件，读取文件内容，和更改前的原始文件相比较（本地文件和与之对应的 object 库中的文件的内容进行对比），判断文件内容是否被更改。如果文件内容没有改变，则将该文件新的时间戳记录到 .git/index 文件中。因为判断文件是否更改，使用时间戳、文件长度等信息进行比较要比通过文件内容比较要快的多，所以 Git 这样的实现方式可以让工作区状态扫描更快速的执行，这也是 Git 高效的因素之一。</p>\n<h3 id=\"git-diff-files\"><a href=\"#git-diff-files\" class=\"headerlink\" title=\"git diff files\"></a>git diff files</h3><p>git diff files 用来进行具体文件的变动对比，通常用来进行工作区与暂存区之间的对比，实质上是用 git objects 库中的快照与工作区文件的内容的对比。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"http://josh-persistence.iteye.com/blog/2215214\" target=\"_blank\" rel=\"noopener\">详解Git工作区、暂存区、历史记录区以及git reset、git revert、git checkout等撤销命令的区别</a></li>\n</ul>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]},{"title":"Chrome扩展程序推荐&(伪)开发指南","slug":"Chrome扩展程序推荐&(伪)开发指南","date":"2017-06-28T09:25:28.000Z","updated":"2019-05-05T03:04:39.102Z","comments":true,"path":"api/articles/Chrome扩展程序推荐&(伪)开发指南.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_239.png","content":"<p>chrome 作为 Google 公司研发的一款网页浏览器，其诞生之初就备受关注，从一开始的全年占有率上升幅度最大到如今的全球使用人数最多，chrome 成为了 Google 最值得骄傲的产品之一；而作为前端工程师，和浏览器打交道是最多的，所以如何用好浏览器就成为了一项潜在的技能。chrome 本身就基于其他开源软件所撰写（WebKit、Blink），所以其丰富的扩展程序成为了另一大杀器，下面就分享一下我用的一些扩展程序（排名不分先后，如果你也有用着很爽的插件，欢迎在评论中分享哦～），同时简单的介绍一下自己如果想开发一个 Chrome 扩展程序，应该从何下手。</p>\n<h2 id=\"扩展程序推荐\"><a href=\"#扩展程序推荐\" class=\"headerlink\" title=\"扩展程序推荐\"></a>扩展程序推荐</h2><h3 id=\"捕捉网页截图-FireShot\"><a href=\"#捕捉网页截图-FireShot\" class=\"headerlink\" title=\"捕捉网页截图 - FireShot\"></a><a href=\"https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg\" target=\"_blank\" rel=\"noopener\">捕捉网页截图 - FireShot</a></h3><p>捕捉网页截图，编辑并将它们保存为PDF，JPEG，GIF，PNG或BMP；不过有用户评论反馈“页面一大就崩溃”</p>\n<h3 id=\"Chrome-Regex-Search\"><a href=\"#Chrome-Regex-Search\" class=\"headerlink\" title=\"Chrome Regex Search\"></a><a href=\"https://chrome.google.com/webstore/detail/chrome-regex-search/bpelaihoicobbkgmhcbikncnpacdbknn\" target=\"_blank\" rel=\"noopener\">Chrome Regex Search</a></h3><p>相比传统的 <code>Command</code>+<code>F</code> 搜索，正则表达式进行搜索能够满足更多场景下的搜索需求，用户评价：</p>\n<blockquote>\n<p>真的太棒了,对比同类应用,最值得称赞的是能实时搜索以及记录搜索历史.希望作者能开通支付宝,不捐赠说不过去啊</p>\n</blockquote>\n<h3 id=\"cookie快速模拟\"><a href=\"#cookie快速模拟\" class=\"headerlink\" title=\"cookie快速模拟\"></a><a href=\"https://chrome.google.com/webstore/detail/cookie%E5%BF%AB%E9%80%9F%E6%A8%A1%E6%8B%9F/jpdfbendalpmcbdekkmldlkcklpcafma\" target=\"_blank\" rel=\"noopener\">cookie快速模拟</a></h3><p>方便地管理你的cookie，开发人员必备，快速查看，修改，删除。</p>\n<h3 id=\"JSON-handle\"><a href=\"#JSON-handle\" class=\"headerlink\" title=\"JSON-handle\"></a><a href=\"https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj\" target=\"_blank\" rel=\"noopener\">JSON-handle</a></h3><p>对 JSON 格式的内容进行浏览和编辑，以树形图样式展现JSON文档，并可实时编辑。用户评价：</p>\n<blockquote>\n<p>目前为止，体验最好的chrome中json 解析扩展，希望更加强大</p>\n</blockquote>\n<h3 id=\"SimpleUndoClose\"><a href=\"#SimpleUndoClose\" class=\"headerlink\" title=\"SimpleUndoClose\"></a><a href=\"https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj\" target=\"_blank\" rel=\"noopener\">SimpleUndoClose</a></h3><p>非常简洁的界面，可以让你轻而易举的撤销关闭的标签！虽然可以 <code>Command</code>+<code>Shift</code>+<code>T</code> 打开最近关闭的标签页，但是这个 Chrome 插件还提供了搜索的功能，非常实用。</p>\n<h3 id=\"Stylish\"><a href=\"#Stylish\" class=\"headerlink\" title=\"Stylish\"></a><a href=\"https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe/related\" target=\"_blank\" rel=\"noopener\">Stylish</a></h3><p>利用用户样式管理器Stylish来重新编辑网站的样式。您可利用Stylish为许多网站安装主题和皮肤，也可创建自己的主题和皮肤。</p>\n<h3 id=\"React-Developer-Tools\"><a href=\"#React-Developer-Tools\" class=\"headerlink\" title=\"React Developer Tools\"></a><a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\" target=\"_blank\" rel=\"noopener\">React Developer Tools</a></h3><p>这款插件是 facebook 官方推荐的（<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">Github 地址</a>），目前已经有 64W 用户下载使用，所以其性能方面是不容置疑的，不过由于我目前还没有更深入的接触 react，所以这款插件自从下载之后就没有实际用过，具体怎样就没办法描述了。。</p>\n<h3 id=\"JSONView\"><a href=\"#JSONView\" class=\"headerlink\" title=\"JSONView\"></a><a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\" target=\"_blank\" rel=\"noopener\">JSONView</a></h3><p>这款插件其实功能很简单，就是能够让你在浏览器中更方便地看 JSON 类型的数据，我们前端工程师常会有这样的困扰：后台提供了一个接口，返回的是 JSON 数据，但是我们通过 URL 直接在浏览器中打开的话，中文会显示乱码，而且如果其中有类似 URL 这种格式的数据，也没有办法点击跳转；此时，这款插件就派上了用场，虽然其提供的功能很简单，但是 105W+ 的用户量已经说明了一切，截图神马的最有说服力了：</p>\n<h4 id=\"JSONView之前\"><a href=\"#JSONView之前\" class=\"headerlink\" title=\"JSONView之前\"></a>JSONView之前</h4><div align=\"center\"><img src=\"/images/hexo_post_239.png\" alt=\"\" width=\"700\"></div>\n\n<h4 id=\"JSONView之后\"><a href=\"#JSONView之后\" class=\"headerlink\" title=\"JSONView之后\"></a>JSONView之后</h4><div align=\"center\"><img src=\"/images/hexo_post_238.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"Set-Character-Encoding\"><a href=\"#Set-Character-Encoding\" class=\"headerlink\" title=\"Set Character Encoding\"></a><a href=\"https://chrome.google.com/webstore/detail/set-character-encoding/bpojelgakakmcfmjfilgdlmhefphglae\" target=\"_blank\" rel=\"noopener\">Set Character Encoding</a></h3><p>这款插件的功能也很简单，就像它的名字一样，是用来改变网页编码格式的，相信用最新版本 Chrome 的童鞋会发现，右键改编码格式的日子一去不复返了，甚至连高级设置中都没有办法改编码格式了，那么如何修改万恶的编码格式呢？这款插件就派上了用场，使用很简单：安装之后在你想要改变编码格式的网页右键，就会出现下面这个东东：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_240.png\" alt=\"\" width=\"400\"></div>\n\n<p>使用起来就是如此的简单，还在担心乱码吗？赶紧安装一下试试吧！</p>\n<h3 id=\"印象笔记·剪藏\"><a href=\"#印象笔记·剪藏\" class=\"headerlink\" title=\"印象笔记·剪藏\"></a><a href=\"https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">印象笔记·剪藏</a></h3><p>印象笔记作为一款最受欢迎的笔记类应用之一，其本身提供的功能已经足够惊艳了，但是它的这款 chrome 插件更是好用到爆，安装之后在浏览网页时点击它的大象 logo 就会在你的网页右上角弹出如下弹框：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_241.png\" alt=\"\" width=\"300\"></div>\n\n<p>该弹框基本上涵盖了你所需要的所有功能，包括命名、内容选择、存储位置、标签、注释等等，可以让你很方便的保存你所浏览的任何内容（可以<a href=\"https://www.yinxiang.com/webclipper/guide/#1\" target=\"_blank\" rel=\"noopener\">点击这里</a>查看这款插件的玩法介绍），如果你是印象笔记的用户或潜在用户，一定要安装试一下，童叟无欺哦～</p>\n<h3 id=\"YSlow\"><a href=\"#YSlow\" class=\"headerlink\" title=\"YSlow\"></a><a href=\"https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh\" target=\"_blank\" rel=\"noopener\">YSlow</a></h3><p>YSlow（why slow）是雅虎基于网站优化规则推出的工具，帮助你分析并优化网站性能。说到雅虎，就不得不提一下<a href=\"http://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"noopener\">雅虎军规</a>了，雅虎军规在十几个方面给你的网站提出优化建议，YSlow 会根据这些规则分析你的网站，并给出评级。雅虎作为一家对前端性能追求卓越的公司，虽然已光辉不再，但是 YSlow 这款插件（<a href=\"https://addons.mozilla.org/en-US/firefox/addon/5369\" target=\"_blank\" rel=\"noopener\">Firefox 也有相应插件</a>）对于前端开发者来说还是能提供很多思路的，官方网站：<a href=\"http://developer.yahoo.com/yslow/\" target=\"_blank\" rel=\"noopener\">http://developer.yahoo.com/yslow/</a> 我的个人博客用YSlow的评分结果。。：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_212.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"花瓣网页收藏工具\"><a href=\"#花瓣网页收藏工具\" class=\"headerlink\" title=\"花瓣网页收藏工具\"></a><a href=\"https://chrome.google.com/webstore/detail/%E8%8A%B1%E7%93%A3%E7%BD%91%E9%A1%B5%E6%94%B6%E8%97%8F%E5%B7%A5%E5%85%B7/imamemhokkdleoelohnmkimbmpfglcil\" target=\"_blank\" rel=\"noopener\">花瓣网页收藏工具</a></h3><p>这是<a href=\"http://www.huaban.com\" target=\"_blank\" rel=\"noopener\">花瓣网</a>官方提供的扩展，这个扩展程序可以让你方便地从任意网站上采集喜欢的图片、视频或者网页截图，并且可以全部保存下来，甚至可以追溯到这张图片的源网页继续查看。从某种角度而言，是一款不仅仅适合设计师的插件</p>\n<div align=\"center\"><img src=\"/images/hexo_post_213.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"Check-my-links\"><a href=\"#Check-my-links\" class=\"headerlink\" title=\"Check my links\"></a><a href=\"https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf\" target=\"_blank\" rel=\"noopener\">Check my links</a></h3><p>该插件会检查当前页面中链接的有效性，会告诉你哪些地方的链接已经是死链等等，对 SEO 很有帮助，下图是这个插件的主界面：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_283.png\" alt=\"\" width=\"300\"></div>\n\n<h3 id=\"Host-Switch-Plus\"><a href=\"#Host-Switch-Plus\" class=\"headerlink\" title=\"Host Switch Plus\"></a><a href=\"https://chrome.google.com/webstore/detail/host-switch-plus/bopepoejgapmihklfepohbilpkcdoaeo?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Host Switch Plus</a></h3><p>快速切换 Domain-IP 配置而不需要编辑 Hosts 文件，并方便的添加、修改、分组（批量开关）。对于程序员来说也是一大神器啊！其实有一个软件也是用来切换 hosts 的，叫做 <strong>SwitchHosts</strong> ，感兴趣的话可以试用一下，同样很简洁。</p>\n<h3 id=\"Fatkun图片批量下载\"><a href=\"#Fatkun图片批量下载\" class=\"headerlink\" title=\"Fatkun图片批量下载\"></a><a href=\"https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf\" target=\"_blank\" rel=\"noopener\">Fatkun图片批量下载</a></h3><p>就像名字一样，它的功能是找出当前页面的所有图片并下载，提供按分辨率、链接等筛选图片，是一款十分简洁但又功能强大的扩展程序。可能更适合设计师吧？！</p>\n<h3 id=\"Extension-Source-Locator\"><a href=\"#Extension-Source-Locator\" class=\"headerlink\" title=\"Extension Source Locator\"></a><a href=\"https://chrome.google.com/webstore/detail/extension-source-locator/cmhbfegjgncgaikpopenldnaidbhdopp\" target=\"_blank\" rel=\"noopener\">Extension Source Locator</a></h3><p>这是一款神奇的扩展程序，翻译成中文就是“<strong>扩展程序源码定位器</strong>”，它是干什么的呢，根据被翻译过来的不太准确的大中华语可以大概知道这玩意儿可以定位到一个你已经在谷歌浏览器上安装了的扩展程序的源码，或者说源文件 ，在你电脑磁盘的哪个地方。更重要的是它让我们可以修改一些自己喜欢的扩展程序，让其更加适合自己的使用。具体参见<a href=\"http://www.cnblogs.com/Wayou/p/how_to_adapt_chrome_extension_for_your_own_willing.html\" target=\"_blank\" rel=\"noopener\">这篇介绍文章</a></p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb\" target=\"_blank\" rel=\"noopener\">Vimium</a></h3><p>首先，不知道为什么叫这个名字。。用惯 vim 的人可能习惯用键盘操控一切了，那么这款插件一定能够满足你，它让你能够通过键盘控制浏览器，包括跳转，点击某个按钮，翻页以及所有你能想到的浏览器功能，实在是佩服这款插件的开发者，可以先看一下它的<a href=\"https://youtu.be/t67Sn0RGK54\" target=\"_blank\" rel=\"noopener\">宣传视频</a>（来自油管，需要翻墙~）压压惊</p>\n<h3 id=\"一键管理所有扩展\"><a href=\"#一键管理所有扩展\" class=\"headerlink\" title=\"一键管理所有扩展\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%80%E6%9C%89%E6%89%A9%E5%B1%95/niemebbfnfbjfojajlmnbiikmcpjkkja\" target=\"_blank\" rel=\"noopener\">一键管理所有扩展</a></h3><p>名字已经说明了一切，当我们安装了很多扩展程序的时候，一键管理就派上用场了，快速激活、禁用插件。可以安装多个插件，切换使用，缓解 Chrome 的吃内存问题</p>\n<h3 id=\"Adblock-Plus\"><a href=\"#Adblock-Plus\" class=\"headerlink\" title=\"Adblock Plus\"></a><a href=\"https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb\" target=\"_blank\" rel=\"noopener\">Adblock Plus</a></h3><p>去除广告的插件，满天飞的弹窗广告相当烦人啊。具体效果还没有试验，但是看到“\b去除广告”这四个字的时候，我就决定要安装一下了</p>\n<h3 id=\"WEB-前端助手-FeHelper\"><a href=\"#WEB-前端助手-FeHelper\" class=\"headerlink\" title=\"WEB 前端助手(FeHelper)\"></a><a href=\"https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad\" target=\"_blank\" rel=\"noopener\">WEB 前端助手(FeHelper)</a></h3><p>提供了很多前端开发者经常用到的功能，包括字符串编解码、图片 base64 编码、代码压缩、时间戳转换、二维码生成、页面性能检测等等功能，具体看下图吧：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_101.png\" alt=\"\" width=\"200\"></div>\n\n<h3 id=\"新浪微博图床\"><a href=\"#新浪微博图床\" class=\"headerlink\" title=\"新浪微博图床\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf\" target=\"_blank\" rel=\"noopener\">新浪微博图床</a></h3><p>简单好用的图片上传工具，支持选择、拖拽、粘贴、上传图片，并且生成图片地址、HTML、UBB 和 Markdown 等格式，同时还支持批量上传等功能，很适合那些需要把图片放网上供其他人浏览的场景</p>\n<h3 id=\"惠惠购物助手\"><a href=\"#惠惠购物助手\" class=\"headerlink\" title=\"惠惠购物助手\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb\" target=\"_blank\" rel=\"noopener\">惠惠购物助手</a></h3><p>剁手党的神器！虽然名字起得像一个垃圾广告，但是功能还是蛮实用的。。可以自动显示淘宝、京东、当当等各大网上商城的报价（安装它之后，必须要进入扩展选项设置，不然这货会弹出广告！）</p>\n<blockquote>\n<p>更新自2017-9-10：突然发现，这个插件会在后来运行，然后在有优惠信息时，会在右上角弹出推送消息（和 service worker 类似），如下图：</p>\n</blockquote>\n<div align=\"center\"><img src=\"/images/hexo_post_284.png\" alt=\"\" width=\"400\"></div>\n\n<h3 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc\" target=\"_blank\" rel=\"noopener\">Octotree</a></h3><p>这是一款非常方便的 github 扩展，安装了这款插件之后，你可以在 Github 项目页面的左侧看到相应项目树状结构图，对于项目管理以及具体的文件跳转来说非常方便（同时还可以一键下载某文件，这个功能我最喜欢了！）：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_122.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"BuiltWith-Technology-Profiler\"><a href=\"#BuiltWith-Technology-Profiler\" class=\"headerlink\" title=\"BuiltWith Technology Profiler\"></a><a href=\"https://chrome.google.com/webstore/detail/builtwith-technology-prof/dapjbgnjinbpoindlpdmhochffioedbn\" target=\"_blank\" rel=\"noopener\">BuiltWith Technology Profiler</a></h3><p>这款插件很适合充满好奇心的“极客”，它可以帮你<strong>探测出当前网站所用的技术栈并按类型分类</strong>，从此再也不用去看代码推测技术栈了！</p>\n<h3 id=\"User-Agent-Switcher-for-Chrome\"><a href=\"#User-Agent-Switcher-for-Chrome\" class=\"headerlink\" title=\"User-Agent Switcher for Chrome\"></a><a href=\"https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg\" target=\"_blank\" rel=\"noopener\">User-Agent Switcher for Chrome</a></h3><p>有时候我们需要同时在不同设备上测试网页的自适应情况，而有了这款插件，你可以随时更换 UA，节省了“检查元素”窗口的空间，同时还显得自己是一个很厉害的“前端工程师”~</p>\n<blockquote>\n<p>更新自2017-09-11：偶然间发现一篇文章：<a href=\"https://www.v2ex.com/t/389340\" target=\"_blank\" rel=\"noopener\">大家注意了 Chrome 的插件 User-Agent Switcher 是个木马</a>，但是这篇文章里面说的插件是 User-Agent Switcher for Google Chrome，所以大家安装插件的时候一定要擦亮眼睛啊~</p>\n</blockquote>\n<h3 id=\"Always-Clear-Downloads\"><a href=\"#Always-Clear-Downloads\" class=\"headerlink\" title=\"Always Clear Downloads\"></a><a href=\"https://chrome.google.com/webstore/detail/always-clear-downloads/cpbmgiffkljiglnpdbljhlenaikojapc\" target=\"_blank\" rel=\"noopener\">Always Clear Downloads</a></h3><p>自动清理下载记录和关闭令人厌烦的必须手动关闭的下载栏；但是我安装之后发现没有什么变化，是我的姿势不对吗？</p>\n<h3 id=\"Imagus\"><a href=\"#Imagus\" class=\"headerlink\" title=\"Imagus\"></a><a href=\"https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab\" target=\"_blank\" rel=\"noopener\">Imagus</a></h3><p>鼠标停在小图片上即可显示出原图大小的图片，从此刷微博不必点击展开图片，刷淘宝、京东不必点击到商品页面细看，但是我安装之后还是看不了，难道我的姿势又不对了吗？</p>\n<blockquote>\n<p>更新于2017-09-07：我发现有的图片它不会放大，可能没有压缩过的图片它不会显示原图吧，不过用过之后感觉还是蛮好用的。</p>\n</blockquote>\n<h3 id=\"主题创建者\"><a href=\"#主题创建者\" class=\"headerlink\" title=\"主题创建者\"></a><a href=\"https://chrome.google.com/webstore/detail/theme-creator-create-cust/ognfcdaekjfmdjhcjaacfapijblalleg?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">主题创建者</a></h3><p>为谷歌浏览器创建自定义主题。可以为每个区域选择颜色和背景。追求个性化浏览器的童鞋可以尝试一下。</p>\n<h3 id=\"Proxy-SwitchyOmega\"><a href=\"#Proxy-SwitchyOmega\" class=\"headerlink\" title=\"Proxy SwitchyOmega\"></a><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\" target=\"_blank\" rel=\"noopener\">Proxy SwitchyOmega</a></h3><p>轻松快捷地管理和切换多个代理设置。很适合程序猿的一款扩展，不仅可以全局代理，还可以通过正则或其他规则进行局部代理，除此之外还可以加载 PAC 脚本，翻墙神器，你不可错过。</p>\n<h3 id=\"Video-DownloadHelper\"><a href=\"#Video-DownloadHelper\" class=\"headerlink\" title=\"Video DownloadHelper\"></a><a href=\"https://chrome.google.com/webstore/detail/video-downloadhelper/lmjnegcaeklhafolokijcfjliaokphfk\" target=\"_blank\" rel=\"noopener\">Video DownloadHelper</a></h3><p>通过名字就可以看出来，这是一款用来下载视频的扩展，可以下载多种格式的视频，同时其提供了多种额外的功能，有兴趣的童鞋可以自行了解。</p>\n<h3 id=\"Smart-TOC\"><a href=\"#Smart-TOC\" class=\"headerlink\" title=\"Smart TOC\"></a><a href=\"https://chrome.google.com/webstore/detail/smart-toc/lifgeihcfpkmmlfjbailfpfhbahhibba\" target=\"_blank\" rel=\"noopener\">Smart TOC</a></h3><blockquote>\n<p>Add a table of contents for web article or documentation</p>\n</blockquote>\n<p>这个插件的作用很难用语言来描述。。大致的作用就是给当前网页生成一个“目录”，同时支持锚链接，当我们再看那种“老太太裹脚布”的文章的时候，这个扩展就可以大展身手了，类似下图：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_230.png\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"斗鱼HTML5播放器\"><a href=\"#斗鱼HTML5播放器\" class=\"headerlink\" title=\"斗鱼HTML5播放器\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%96%97%E9%B1%BChtml5%E6%92%AD%E6%94%BE%E5%99%A8/hbocinidadgpnbcamhjgfbgiebhpnmfj\" target=\"_blank\" rel=\"noopener\">斗鱼HTML5播放器</a></h3><p>替换斗鱼TV的 Flash 播放器, 并支持弹幕, 送礼等功能. 目前是测试版本, 可能无法播放部分直播间. 基于 flv.js(<a href=\"https://github.com/Bilibili/flv.js)(感谢谦谦)\" target=\"_blank\" rel=\"noopener\">https://github.com/Bilibili/flv.js)(感谢谦谦)</a></p>\n<h3 id=\"Tampermonkey\"><a href=\"#Tampermonkey\" class=\"headerlink\" title=\"Tampermonkey\"></a><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\" target=\"_blank\" rel=\"noopener\">Tampermonkey</a></h3><p>这个插件属于必装的插件之一，大家通常称其为“油猴脚本”，有了这个，你会发现<strong>新世界大门</strong>向你打开，里面有各种<strong>秀出天</strong>际的脚本：百度网盘直接下载助手、VIP 视频破解、解决百度云大文件下载限制等等，安装脚本很简单，第一次安装该插件时会有一个简单的教程，还可以去<a href=\"http://greasyfork.org\" target=\"_blank\" rel=\"noopener\">greasyfork.org</a>下载更多更厉害的脚本，从此上网之路会变得异常酷爽！</p>\n<h3 id=\"Onetab\"><a href=\"#Onetab\" class=\"headerlink\" title=\"Onetab\"></a><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall\" target=\"_blank\" rel=\"noopener\">Onetab</a></h3><p>用电脑经常用着用着就<strong>不知觉地打开了很多页面</strong>，用了多年的扎扎电脑很容易就出现浏览器<strong>崩溃的状况</strong>。装上这个 onetab 插件后，点击一下就可以把当前浏览器<strong>打开的所有标签页集中到一个页面</strong>，又可以开始愉快地浏览了，然后可以单独或全部恢复这些标签页。 或者可以打开一组<strong>相关的页面</strong>，点击后作为<strong>一个合集分享出去</strong>，工作上分享资料可以用到。 最重要的是能够<strong>节省高达95％的内存：</strong></p>\n<div align=\"center\"><img src=\"/images/hexo_post_229.jpg\" alt=\"\" width=\"500\"></div>\n\n<h3 id=\"Infinity新标签页-Pro\"><a href=\"#Infinity新标签页-Pro\" class=\"headerlink\" title=\"Infinity新标签页(Pro)\"></a><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh\" target=\"_blank\" rel=\"noopener\">Infinity新标签页(Pro)</a></h3><p>这个<strong>自定义的标签页</strong>颜值颇高，同时还提供了<strong>谷歌邮件自动提醒</strong>功能，还有精美天气，待办事项，印象笔记一样的记事应用，高清壁纸，必应，百度，谷歌搜索，让你的使用更加简单方便快捷。还有高清壁纸库，从 3 万多张超清壁纸中一张一张搭配图标，精心挑选出 365 张，形成每日一图，当然你也可以从你自己电脑上选择图片作为壁纸。这是它的<a href=\"https://www.infinitynewtab.com\" target=\"_blank\" rel=\"noopener\">官网</a>，可以说是居家必备良品了。</p>\n<h3 id=\"Copyfish\"><a href=\"#Copyfish\" class=\"headerlink\" title=\"Copyfish\"></a><a href=\"https://chrome.google.com/webstore/detail/copyfish-%F0%9F%90%9F-free-ocr-soft/eenjdnjldapjajjofmldgmkjaienebbj\" target=\"_blank\" rel=\"noopener\">Copyfish</a></h3><p>一款免费的 <strong>OCR文字识别插件</strong>，可以帮助我们快速地从网页中进行区域选定识别文字。Copyfish 可以从图像，PDF甚至是视频中识别提取文本，使用方法也很简便。非常适合用于那些不能复制文字的网页，选定后则会自动进行识别，弹出识别结果。还可以在设置中进行翻译语言设置等，识别后一键翻译。</p>\n<h3 id=\"掘金\"><a href=\"#掘金\" class=\"headerlink\" title=\"掘金\"></a><a href=\"https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb\" target=\"_blank\" rel=\"noopener\">掘金</a></h3><p>可以让你的新标签页变成掘金文章列表，包含 Android、前端、产品、设计、iOS、后端六大频道，每个频道内都有一到多个为你精心准备的优质内容源。同时还可以添加 Github、Dribbble 的内容，为设计师、程序员、产品经理每日发现优质内容。当然，如果你不想作为新标签页使用的话，还可以使用其<a href=\"https://e.xitu.io/\" target=\"_blank\" rel=\"noopener\">网页版</a>，其功能和新标签页是一模一样的，可以说是十分贴心了。</p>\n<h3 id=\"Momentum\"><a href=\"#Momentum\" class=\"headerlink\" title=\"Momentum\"></a><a href=\"https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca\" target=\"_blank\" rel=\"noopener\">Momentum</a></h3><p>这也是一款改造新标签页的扩展程序，从下面的截图中可以看到，改造之后非常的炫酷，关键是每一天的壁纸都不一样，而且还可以添加 todoList 等更多功能，如果感兴趣的话可以自行探索。</p>\n<div align=\"center\"><img src=\"/images/hexo_post_292.jpg\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"New-Tab-Dribbble\"><a href=\"#New-Tab-Dribbble\" class=\"headerlink\" title=\"New Tab Dribbble\"></a><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fnew-tab-dribbble%2Fomhhjicbfncielplfgggjedgnkjoicjj\" target=\"_blank\" rel=\"noopener\">New Tab Dribbble</a></h3><p>这个就更厉害了，可以说是设计师的必备，你每次打开新的标签页都会第一时间把每日精品设计作品展示出来，你每天都能看到来自大神的作品，简直是灵感的源泉，作品都来自 Dribbble。</p>\n<h3 id=\"Isometric-Contributions\"><a href=\"#Isometric-Contributions\" class=\"headerlink\" title=\"Isometric Contributions\"></a><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fisometric-contributions%2Fmjoedlfflcchnleknnceiplgaeoegien\" target=\"_blank\" rel=\"noopener\">Isometric Contributions</a></h3><p>这个应该是程序员专属，它可以让我们 Github 的贡献图变成 3D 效果，非常适合用来装逼有没有，是不是很高大上：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_293.png\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"GitHub-Repository-Size\"><a href=\"#GitHub-Repository-Size\" class=\"headerlink\" title=\"GitHub Repository Size\"></a><a href=\"https://chrome.google.com/webstore/detail/github-repository-size/apnjnioapinblneaedefcnopcjepgkci/related\" target=\"_blank\" rel=\"noopener\">GitHub Repository Size</a></h3><p>这款插件也是 Github 相关的一款辅助工具，它可以直接将仓库的大小以及仓库中各个文件的大小显示出来：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_228.jpg\" alt=\"\" width=\"600\"></div>\n\n<h3 id=\"Darkness\"><a href=\"#Darkness\" class=\"headerlink\" title=\"Darkness\"></a><a href=\"https://chrome.google.com/webstore/detail/darkness-beautiful-dark-t/imilbobhamcfahccagbncamhpnbkaenm\" target=\"_blank\" rel=\"noopener\">Darkness</a></h3><p>Darkness为热门网站提供精美的深色主题，可以显著减轻由明亮的电脑屏幕引起的眼睛负担和疲劳：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_227.jpg\" alt=\"\" width=\"700\"></div>\n\n<h3 id=\"云盘万能钥匙\"><a href=\"#云盘万能钥匙\" class=\"headerlink\" title=\"云盘万能钥匙\"></a><a href=\"https://chrome.google.com/webstore/detail/%E4%BA%91%E7%9B%98%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99/anlllmnpjodopgbkbpnghnjlelnogfjc\" target=\"_blank\" rel=\"noopener\">云盘万能钥匙</a></h3><p>官网地址：<a href=\"https://ypsuperkey.meek.com.cn/\" target=\"_blank\" rel=\"noopener\">https://ypsuperkey.meek.com.cn/</a>，这款插件可以自动识别百度网盘提取密码，标识已失效的网盘链接，网盘分享从此更加简单。不过这款插件之所以会有如此能力，是因为它会在你提交百度网盘分享链接提取密码时收集提取密码信息，可能会涉及到隐私问题。除了 Chrome 浏览器，它还支持其他大部分浏览器，包括火狐、360、QQ、搜狗、UC 等等。</p>\n<h3 id=\"沙拉查词\"><a href=\"#沙拉查词\" class=\"headerlink\" title=\"沙拉查词\"></a><a href=\"https://chrome.google.com/webstore/detail/沙拉查词-多词典专业划词翻译/cdonnmffkdaoajfknoeeecmchibpmkmg\" target=\"_blank\" rel=\"noopener\">沙拉查词</a></h3><p>涵盖所有主流词典，多重划词模式，极致交互体验，灵活导出生词本，高度可配置，支持 PDF，兼容 Vimium 全键盘操作。对于想学英语的童鞋来说是一个很好的工具。</p>\n<h3 id=\"GayHub\"><a href=\"#GayHub\" class=\"headerlink\" title=\"GayHub\"></a><a href=\"https://chrome.google.com/webstore/detail/gayhub/mdcffelghikdiafnfodjlgllenhlnejl\" target=\"_blank\" rel=\"noopener\">GayHub</a></h3><p>首先，请忽略这个扩展的名字。。它的主要功能是优化 Github 的阅读体验：</p>\n<ul>\n<li>文件目录树：把 Vscode 的精美的侧边栏完美移植到 github 上</li>\n<li>TOC导航：能完美解析当前内容的所有嵌套标题，性能优越，滑动起来如丝滑般流畅。</li>\n<li>夜间暗色主题</li>\n<li>图片全屏预览</li>\n<li>一键复制代码</li>\n</ul>\n<h3 id=\"Lighthouse\"><a href=\"#Lighthouse\" class=\"headerlink\" title=\"Lighthouse\"></a><a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk\" target=\"_blank\" rel=\"noopener\">Lighthouse</a></h3><p>Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。 可以将其作为一个 Chrome 扩展程序运行，或从命令行运行。 当为 Lighthouse 提供一个要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。可以参考失败的测试，看看可以采取哪些措施来改进应用。</p>\n<p>运行 Lighthouse 的方式有两种：作为 Chrome 扩展程序运行，或作为命令行工具运行。</p>\n<h3 id=\"Wayback-Machine\"><a href=\"#Wayback-Machine\" class=\"headerlink\" title=\"Wayback Machine\"></a><a href=\"https://chrome.google.com/webstore/detail/wayback-machine/fpnmgdkabkmnadcjpehmlllkndpkmiak\" target=\"_blank\" rel=\"noopener\">Wayback Machine</a></h3><p>这是一个国外的网站，它是互联网的一个备份工具，被称为互联网时光机。自从 1996 年以来，Wayback Machine 已经累计备份了超过 4350 亿个网页。你只要在它的网站上输入一个网站地址，就能看到这个网站在过去的不同时期分别长什么样。</p>\n<p>Wayback Machine 网站有相应的同名插件，支持主流浏览器，只要点击插件，然后点击 Save Page Now，可以手动保存当前网站到这个互联网档案库里。N 年后再来会看今天的你，那感觉挺棒！</p>\n<h2 id=\"其他人推荐的扩展程序\"><a href=\"#其他人推荐的扩展程序\" class=\"headerlink\" title=\"其他人推荐的扩展程序\"></a>其他人推荐的扩展程序</h2><p>以上是我自己使用过或在使用的一些扩展程序，还有一些扩展程序可能我自己并没有使用但是其他人推荐了，我也列举在下方，方便大家查看和选择：</p>\n<ul>\n<li><a href=\"https://mikelin.cn/1201.html\" target=\"_blank\" rel=\"noopener\">MIKELIN常用的几款Chrome插件推荐</a></li>\n<li><a href=\"https://juejin.im/post/5b470d8de51d4519105d3bbd\" target=\"_blank\" rel=\"noopener\">优秀程序员都在用哪些Chrome拓展工具？</a></li>\n<li><a href=\"https://github.com/zhaoolee/ChromeAppHeroes/\" target=\"_blank\" rel=\"noopener\">谷粒-Chrome插件英雄榜</a></li>\n</ul>\n<p>如果因为某些显而易见的问题，无法从应用商店安装插件的话，可以尝试到<a href=\"https://extfans.com/\" target=\"_blank\" rel=\"noopener\">扩展迷官网</a>下载。</p>\n<h2 id=\"开发指南\"><a href=\"#开发指南\" class=\"headerlink\" title=\"开发指南\"></a>开发指南</h2><p>其实 Chrome 扩展程序的开发并不是很难，只要你有前端的一些基础知识（HTML、CSS、JavaScript）就足够了，剩下的一些就是按照官方的文档或其他教程一步一步的编写+理解就可以了，下面是一些推荐的教程，相信看过之后你一定可以开发出一个类似天气、股票、PM2.5 这样的扩展程序：</p>\n<ul>\n<li><a href=\"http://www.ituring.com.cn/book/1421\" target=\"_blank\" rel=\"noopener\">Chrome 扩展及应用开发</a> -&gt; 来自图灵社区的免费电子书，适合入门。</li>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//open.chrome.360.cn/extension_dev/overview.html\" target=\"_blank\" rel=\"noopener\">Chrome扩展开发文档</a> -&gt; 来自 360 极速浏览器翻译的官方文档（比较老了，不是很推荐）。</li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">Chrome 插件开发官方文档(英文)</a> -&gt; 前两个适合入门，实际开发的时候还是推荐官方的，查API啥的都很方便，况且这篇文档写的很赞，也简单易懂，强烈推荐。</li>\n<li><a href=\"http://www.cnblogs.com/coco1s/p/8004510.html\" target=\"_blank\" rel=\"noopener\">ChokCoco-手把手教你开发扩展程序</a> -&gt; ChokCoco 老师的扩展程序开发教程，讲的挺好的，五星推荐！</li>\n<li><a href=\"https://developer.chrome.com/webstore/publish\" target=\"_blank\" rel=\"noopener\">Publish in the Chrome Web Store</a> -&gt; Chrome官方出的发布自己的扩展程序的教程</li>\n<li><a href=\"https://github.com/sxei/chrome-plugin-demo\" target=\"_blank\" rel=\"noopener\">Chrome插件开发全攻略</a> -&gt; 作者花了将近一个多月的时间断断续续写下这篇博文，并精心写下了这个完整 demo，里面包含的内容很多，包括了大部分的配置项，同时还附有源码，是一篇很不错的入门文章。</li>\n<li><a href=\"https://juejin.im/post/5c135a275188257284143418\" target=\"_blank\" rel=\"noopener\">一篇文章教你顺利入门和开发chrome扩展程序（插件）</a> -&gt; 前面部分大多数是一些基础介绍，和别人的资料大同小异，但是用的是通俗的语言或者作者自己理解来描述的，不是拷贝官方的描述，更方便读者理解；后面部分多为一些作者在项目中总结的方法。</li>\n</ul>\n","raw":null,"categories":[{"name":"summary","path":"api/categories/summary.json"}],"tags":[{"name":"Chrome","path":"api/tags/Chrome.json"},{"name":"指南","path":"api/tags/指南.json"},{"name":"推荐","path":"api/tags/推荐.json"}]},{"title":"Git配置别名","slug":"Git配置别名","date":"2017-06-28T03:04:28.000Z","updated":"2019-05-05T03:04:39.102Z","comments":true,"path":"api/articles/Git配置别名.json","excerpt":null,"keywords":"merrier 博客 前端 北邮人","cover":"/images/hexo_post_102.png","content":"<p>git 提供了各种各样的操作方法，但是我们常常会陷入“敲 git 命令敲的手疼”的困境，此时为 git 配置别名就显得尤为重要了，尤其是当我们的项目有各种各样的分支（master、dev、test…）时，经常需要 merge、rebase、add、commit，如果能用一两个字母代替这些命令的话，我相信会减轻很多打字的负担。</p>\n<h2 id=\"方法一：临时修改\"><a href=\"#方法一：临时修改\" class=\"headerlink\" title=\"方法一：临时修改\"></a>方法一：临时修改</h2><p>我们只需要敲一行命令，告诉 git，以后 st 就表示 status：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>–global 参数是全局参数，也就是这一行命令在这台电脑的所有 git 仓库下都有用；当然，如果你想只在当前项目中使用简写命令，可以在项目的目录下使用 git config 命令而不带 –global 选项，这样会在你当前项目目录下的 .git/config 文件增加一节 [user] 内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">    name = Merrier</span><br><span class=\"line\">    eamil = 953075999@qq.com</span><br></pre></td></tr></table></figure>\n<p>只改了 status 不过瘾？没关系，我们还有别的命令可以简写，很多人用 co 表示 checkout，ci 表示 commit，br 表示 branch（每个人都有自己的简写习惯，不过最好和别人相同，否则别人在你的电脑上提交代码的话可能会有不必要的麻烦）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br></pre></td></tr></table></figure>\n<p>当然，除了上面这些简单的命令之外，我们还可以为一些复杂的命令设置别名，比如配置一个 git last，让其显示最后一次提交信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.last <span class=\"string\">'log -1'</span></span><br></pre></td></tr></table></figure>\n<p>这样，我们用 git last 就能显示最近一次的提交：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git last</span><br><span class=\"line\">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</span><br><span class=\"line\">Merge: bd6ae48 291bea8</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Thu Aug 22 22:49:22 2013 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    merge &amp; fix hello.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二：修改-gitconfig\"><a href=\"#方法二：修改-gitconfig\" class=\"headerlink\" title=\"方法二：修改 .gitconfig\"></a>方法二：修改 .gitconfig</h2><p>如果我们拿到的是一台新电脑，像上面那样一行一行敲设置简写的命令的话会将一件本来让自己方便的事变得很麻烦，所以有没有一次性设置全部简写命令的方法呢？当然是有的了（要不然我这个方法二从何而来），就是修改 .gitconfig 文件，其实我们上面那些命令就是在一次次的修改 .gitconfig 文件；.gitconfig 文件在哪呢？理论上就在你的主目录下：</p>\n<div align=\"center\"><img src=\"/images/hexo_post_102.png\" alt=\"\" width=\"400\"></div>\n\n<p>从上图可以看到，可以通过 cat ~/.gitconfig 查看自己电脑的 .gitconfig 文件内容，而由于我已经设置了 git 别名，所以该文件中会有 [alias] 内容，那么你就可以通过在这个文件中添加类似的内容来配置你自己的别名了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">alias</span>]</span><br><span class=\"line\">    co = checkout</span><br><span class=\"line\">    ci = commit</span><br><span class=\"line\">    st = status</span><br><span class=\"line\">    pl = pull</span><br><span class=\"line\">    ps = push</span><br><span class=\"line\">    dt = difftool</span><br><span class=\"line\">    l = <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\">    cp = cherry-pick</span><br><span class=\"line\">    ca = commit -a</span><br><span class=\"line\">    b = branch</span><br></pre></td></tr></table></figure>\n<p>和方法一一样，如果你只想要在某些项目中使用简写，可以进入项目的目录，然后编辑 .git/config 文件，加入上面的内容就可以了</p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}]}